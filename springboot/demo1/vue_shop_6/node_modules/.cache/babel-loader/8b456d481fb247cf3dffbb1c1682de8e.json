{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ElIcon } from 'element-plus';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { computed, reactive } from 'vue';\nimport { ref, unref } from \"vue\"; // 引入组件\n\nimport axios from \"axios\";\nimport { useRouter } from 'vue-router'; // 这是登陆表单的数据绑定对象\n\nexport default {\n  __name: 'Login',\n\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const a = '123';\n    const loginForm = reactive({\n      username: '',\n      password: ''\n    }); // 这是表单的验证规则对象\n\n    const loginFormRule = reactive({\n      // 验证用户名\n      username: [{\n        min: 3,\n        max: 12,\n        message: '长度在 3 到 12 个字符之间',\n        trigger: 'blur'\n      }, {\n        required: true,\n        message: '请输入登陆名称',\n        trigger: 'blur'\n      }],\n      // 验证密码\n      password: [{\n        min: 6,\n        max: 20,\n        message: '长度在 6 到 20 个字符之间',\n        trigger: 'blur'\n      }, {\n        required: true,\n        message: '请输入登陆密码',\n        trigger: 'blur'\n      }]\n    }); // 组合式api中没有this概念，使用ref和unref获取对象的引用\n\n    let loginFormRef = ref(); // 登陆\n\n    const canSubmit = computed(() => {\n      const {\n        username,\n        password\n      } = loginForm;\n      return Boolean(username && password);\n    });\n\n    function login() {\n      const form = unref(loginFormRef);\n      form.validate(valid => {\n        console.log(valid);\n        if (!valid) ElMessageBox.alert('用户或密码错误', 'ERROR');\n      });\n    }\n\n    function log() {\n      console.log(\"begin login\");\n      const form = unref(loginFormRef);\n      form.validate(valid => {\n        console.log(valid);\n        if (!valid) ElMessageBox.alert('用户或密码格式错误', 'ERROR');\n      }); //定义了一个函数来执行\n      //根据input框的id来获取相关的文本值\n\n      let login_msg = \"\";\n      let data = {\n        \"customerName\": document.getElementById(\"customerName\").value,\n        \"loginPwd\": document.getElementById(\"loginPwd\").value\n      };\n      console.log(data);\n      axios.post('http://localhost:9090/customer/login', data).then(res => {\n        //判断登录情况\n        console.log(res);\n\n        if (res.data !== \"\") {\n          login_msg = \"success login,token=\" + res.data; //this.$router.push('/mainIndex')\n        } else {\n          login_msg = \"fail\";\n        }\n\n        console.log(login_msg);\n        if (login_msg === \"fail\") ElMessageBox.alert('用户或密码错误', 'ERROR');else {\n          ElMessageBox.alert('登陆成功', 'SUCCESS');\n        } //回调函数 跳转到正常的页面\n      }); //axios发送一个post请求到指定的url\n    } // 重置\n\n\n    function resetLoginForm() {\n      const form = unref(loginFormRef);\n      console.log(loginFormRef.value);\n      form.resetFields();\n    }\n\n    const router = useRouter();\n\n    function goRegister() {\n      router.push({\n        path: '/register'\n      });\n    }\n\n    const __returned__ = {\n      a,\n      loginForm,\n      loginFormRule,\n      loginFormRef,\n      canSubmit,\n      login,\n      log,\n      resetLoginForm,\n      router,\n      goRegister,\n      ElIcon,\n      ElMessage,\n      ElMessageBox,\n      computed,\n      reactive,\n      ref,\n      unref,\n      axios,\n      useRouter\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":";AAuDC,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,cAAxC;AACC,SAAQC,QAAR,EAAkBC,QAAlB,QAAiC,KAAjC;AACD,SAASC,GAAT,EAAcC,KAAd,QAA2B,KAA3B,C,CAAkC;;AACjC,OAAOC,KAAP,MAAkB,OAAlB;AACD,SAASC,SAAT,QAA0B,YAA1B,C,CAEA;;;;;;;;;IACA,MAAMC,CAAC,GAAG,KAAV;IAEA,MAAMC,SAAS,GAAGN,QAAQ,CAAC;MAC1BO,QAAQ,EAAE,EADgB;MAE1BC,QAAQ,EAAE;IAFgB,CAAD,CAA1B,EAKA;;IACA,MAAMC,aAAa,GAAGT,QAAQ,CAAC;MAC9B;MACAO,QAAQ,EAAE,CACT;QAAEG,GAAG,EAAE,CAAP;QAAUC,GAAG,EAAE,EAAf;QAAmBC,OAAO,EAAE,kBAA5B;QAAgDC,OAAO,EAAE;MAAzD,CADS,EAET;QAAEC,QAAQ,EAAE,IAAZ;QAAkBF,OAAO,EAAE,SAA3B;QAAsCC,OAAO,EAAE;MAA/C,CAFS,CAFoB;MAM9B;MACAL,QAAQ,EAAE,CACT;QAAEE,GAAG,EAAE,CAAP;QAAUC,GAAG,EAAE,EAAf;QAAmBC,OAAO,EAAE,kBAA5B;QAAgDC,OAAO,EAAE;MAAzD,CADS,EAET;QAAEC,QAAQ,EAAE,IAAZ;QAAkBF,OAAO,EAAE,SAA3B;QAAsCC,OAAO,EAAE;MAA/C,CAFS;IAPoB,CAAD,CAA9B,EAaA;;IACA,IAAIE,YAAY,GAAGd,GAAG,EAAtB,EACA;;IACC,MAAMe,SAAS,GAAGjB,QAAQ,CAAC,MAAK;MAC9B,MAAM;QAACQ,QAAD;QAAWC;MAAX,IAAuBF,SAA7B;MACA,OAAOW,OAAO,CAACV,QAAQ,IAAIC,QAAb,CAAd;IACD,CAHyB,CAA1B;;IAID,SAASU,KAAT,GAAiB;MAChB,MAAMC,IAAI,GAAGjB,KAAK,CAACa,YAAD,CAAlB;MACAI,IAAI,CAACC,QAAL,CACCC,KAAK,IAAI;QACRC,OAAO,CAACC,GAAR,CAAYF,KAAZ;QACA,IAAI,CAACA,KAAL,EAAYvB,YAAY,CAAC0B,KAAb,CAAmB,SAAnB,EAA8B,OAA9B;MACZ,CAJF;IAMA;;IACA,SAASD,GAAT,GAAc;MACZD,OAAO,CAACC,GAAR,CAAY,aAAZ;MACA,MAAMJ,IAAI,GAAGjB,KAAK,CAACa,YAAD,CAAlB;MACAI,IAAI,CAACC,QAAL,CACIC,KAAK,IAAI;QACPC,OAAO,CAACC,GAAR,CAAYF,KAAZ;QACA,IAAI,CAACA,KAAL,EAAYvB,YAAY,CAAC0B,KAAb,CAAmB,WAAnB,EAAgC,OAAhC;MACb,CAJL,EAHY,CASZ;MACA;;MACA,IAAIC,SAAS,GAAG,EAAhB;MACA,IAAIC,IAAI,GAAG;QACT,gBAAeC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,KAD9C;QAET,YAAWF,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC;MAFtC,CAAX;MAIAP,OAAO,CAACC,GAAR,CAAYG,IAAZ;MACAvB,KAAK,CAAC2B,IAAN,CAAW,sCAAX,EAAkDJ,IAAlD,EAAwDK,IAAxD,CAA8DC,GAAD,IAAO;QAClE;QACAV,OAAO,CAACC,GAAR,CAAYS,GAAZ;;QACA,IAAIA,GAAG,CAACN,IAAJ,KAAa,EAAjB,EAAoB;UAClBD,SAAS,GAAG,yBAAuBO,GAAG,CAACN,IAAvC,CADkB,CAElB;QACD,CAHD,MAGM;UACJD,SAAS,GAAG,MAAZ;QACD;;QACDH,OAAO,CAACC,GAAR,CAAYE,SAAZ;QACA,IAAIA,SAAS,KAAK,MAAlB,EAA0B3B,YAAY,CAAC0B,KAAb,CAAmB,SAAnB,EAA8B,OAA9B,EAA1B,KACK;UACH1B,YAAY,CAAC0B,KAAb,CAAmB,MAAnB,EAA2B,SAA3B;QACD,CAbiE,CAclE;MACD,CAfD,EAjBY,CAiCZ;IACD,EACF;;;IACA,SAASS,cAAT,GAA0B;MACzB,MAAMd,IAAI,GAAGjB,KAAK,CAACa,YAAD,CAAlB;MACAO,OAAO,CAACC,GAAR,CAAYR,YAAY,CAACc,KAAzB;MACAV,IAAI,CAACe,WAAL;IACA;;IAED,MAAMC,MAAM,GAAG/B,SAAS,EAAxB;;IACA,SAASgC,UAAT,GAAsB;MACrBD,MAAM,CAACE,IAAP,CAAY;QACXC,IAAI,EAAE;MADK,CAAZ;IAGA","names":["ElIcon","ElMessage","ElMessageBox","computed","reactive","ref","unref","axios","useRouter","a","loginForm","username","password","loginFormRule","min","max","message","trigger","required","loginFormRef","canSubmit","Boolean","login","form","validate","valid","console","log","alert","login_msg","data","document","getElementById","value","post","then","res","resetLoginForm","resetFields","router","goRegister","push","path"],"sources":["F:/BUAA-DataBase/db-main/springboot/demo1/vue_shop_6/src/components/Login.vue"],"sourcesContent":["\r\n<template>\r\n\t<div class=\"login_container\">\r\n\t\t<link href=\"../assets/icons/font_2cf2621a7by/iconfont.css\"> \r\n\t\t<!-- 这里link引入icon的css文件时就不用ref了，有些浏览器用ref=\"stylesheet\"会报错-->\r\n\t\t<div class=\"login_container\">\r\n\t\t<div class=\"login_box\">\r\n\t\t\t<div class=\"avator_box\">\r\n\t\t\t\t<!--头像区域--> \r\n\t\t\t\t<img src=\"../assets/logo.png\" alt=\"\"> \r\n\t\t\t</div>\r\n\r\n\t\t\t<el-form \r\n\t\t\t:model=\"loginForm\" :rules=\"loginFormRule\" ref=\"loginFormRef\" \r\n\t\t\tlabel-width=\"0px\" class=\"login_form\" @keyup.enter=\"log\">\r\n\t\t\t\t<!--用户名-->\r\n\t\t\t\t<el-form-item prop=\"username\">\r\n\t\t\t\t\t<el-input \r\n\t\t\t\t\tv-model=\"loginForm.username\" \r\n\t\t\t\t\tplaceholder=\"User Name\"\r\n          id=\"customerName\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<template #prefix>\r\n            <i class=\"iconfont icon-yonghu_user\"></i>\r\n          </template>\r\n\t\t\t\t\t</el-input>\r\n\t\t\t\t\t<!--注意icon图标的引用格式-->\r\n\t\t\t\t</el-form-item>\r\n\t\t\t\t<!--密码-->\r\n\t\t\t\t<el-form-item prop=\"password\">\r\n\t\t\t\t\t<el-input \r\n\t\t\t\t\tv-model=\"loginForm.password\" \r\n\t\t\t\t\tplaceholder=\"Password\"\r\n\t\t\t\t\tshow-password\r\n\t\t\t\t\ttype=\"password\"\r\n          id=\"loginPwd\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<template #prefix>\r\n            <i class=\"iconfont icon-mima_password\"></i>\r\n          </template>\r\n\t\t\t\t\t</el-input>\r\n\t\t\t\t</el-form-item>\r\n\t\t\t\t<!--按钮区域-->\r\n\t\t\t\t<el-form-item class=\"bots\">\r\n\t\t\t\t\t<el-button type=\"primary\" plain @click=\"log\" :disabled=\"!canSubmit\">登陆</el-button>\r\n\t\t\t\t\t<el-button type=\"info\" plain @click=\"resetLoginForm\">清除</el-button>\r\n\t\t\t\t\t<el-button text type=\"primary\" plain @click=\"goRegister\">注册账户</el-button>\r\n\t\t\t\t</el-form-item>\r\n\t\t\t</el-form>\r\n\t\t</div>\r\n\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ElIcon } from 'element-plus';\r\n\timport { ElMessage, ElMessageBox } from 'element-plus';\r\n  import {computed, reactive} from 'vue';\r\n\timport { ref, unref } from \"vue\"; // 引入组件\r\n  import axios from \"axios\";\r\n\timport { useRouter } from 'vue-router';\r\n\r\n\t// 这是登陆表单的数据绑定对象\r\n\tconst a = '123'\r\n\r\n\tconst loginForm = reactive({\r\n\t\tusername: '',\r\n\t\tpassword: '',\r\n\t})\r\n\r\n\t// 这是表单的验证规则对象\r\n\tconst loginFormRule = reactive({\r\n\t\t// 验证用户名\r\n\t\tusername: [\r\n\t\t\t{ min: 3, max: 12, message: '长度在 3 到 12 个字符之间', trigger: 'blur' },\r\n\t\t\t{ required: true, message: '请输入登陆名称', trigger: 'blur' }\r\n\t\t],\r\n\t\t// 验证密码\r\n\t\tpassword: [\r\n\t\t\t{ min: 6, max: 20, message: '长度在 6 到 20 个字符之间', trigger: 'blur' },\r\n\t\t\t{ required: true, message: '请输入登陆密码', trigger: 'blur' }\r\n\t\t]\r\n\t})\r\n\r\n\t// 组合式api中没有this概念，使用ref和unref获取对象的引用\r\n\tlet loginFormRef = ref()\r\n\t// 登陆\r\n  const canSubmit = computed(()=> {\r\n    const {username, password} = loginForm;\r\n    return Boolean(username && password);\r\n  })\r\n\tfunction login() {\r\n\t\tconst form = unref(loginFormRef)\r\n\t\tform.validate(\r\n\t\t\tvalid => {\r\n\t\t\t\tconsole.log(valid)\r\n\t\t\t\tif (!valid) ElMessageBox.alert('用户或密码错误', 'ERROR');\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n  function log(){\r\n    console.log(\"begin login\")\r\n    const form = unref(loginFormRef)\r\n    form.validate(\r\n        valid => {\r\n          console.log(valid)\r\n          if (!valid) ElMessageBox.alert('用户或密码格式错误', 'ERROR');\r\n        }\r\n    );\r\n    //定义了一个函数来执行\r\n    //根据input框的id来获取相关的文本值\r\n    let login_msg = \"\";\r\n    let data = {\r\n      \"customerName\":document.getElementById(\"customerName\").value,\r\n      \"loginPwd\":document.getElementById(\"loginPwd\").value\r\n    }\r\n    console.log(data)\r\n    axios.post('http://localhost:9090/customer/login',data).then((res)=>{\r\n      //判断登录情况\r\n      console.log(res)\r\n      if (res.data !== \"\"){\r\n        login_msg = \"success login,token=\"+res.data;\r\n        //this.$router.push('/mainIndex')\r\n      }else {\r\n        login_msg = \"fail\"\r\n      }\r\n      console.log(login_msg)\r\n      if (login_msg === \"fail\") ElMessageBox.alert('用户或密码错误', 'ERROR');\r\n      else {\r\n        ElMessageBox.alert('登陆成功', 'SUCCESS')\r\n      }\r\n      //回调函数 跳转到正常的页面\r\n    })\r\n    //axios发送一个post请求到指定的url\r\n  }\r\n\t// 重置\r\n\tfunction resetLoginForm() {\r\n\t\tconst form = unref(loginFormRef)\r\n\t\tconsole.log(loginFormRef.value);\r\n\t\tform.resetFields();\r\n\t}\r\n\r\n\tconst router = useRouter()\r\n\tfunction goRegister() {\r\n\t\trouter.push({\r\n\t\t\tpath: '/register'\r\n\t\t})\r\n\t}\r\n</script>\r\n\r\n<style lang=\"less\" scoped> \r\n// scoped:样式只在当前组件内生效\r\n\r\n.login_container{\r\n\theight: 100%;\r\n\tbackground-image: url('../assets/pictures/background1.jpg');\r\n\tbackground-position: center;\r\n\r\n\tbackground-color: rgb(33, 177, 203);\r\n}\r\n.login_box{\r\n\twidth: 450px;\r\n\theight: 300px;\r\n\tbackground-color: #fff;\r\n\tborder-radius: 10px;\r\n\tposition: absolute;\r\n\tleft: 50%;\r\n\ttop: 50%;\r\n\ttransform: translate(-50%,-50%);\r\n\r\n\t.avator_box{ // 嵌套定义样式\r\n\t\twidth: 130px;\r\n\t\theight: 130px;\r\n\t\tborder: 1px solid #eee;\r\n\t\tborder-radius: 50%;\r\n\t\tpadding: 10px;\r\n\t\tbox-shadow: 0 0 10px #ddd;\r\n\t\t// 定义位置\r\n\t\tposition: absolute;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\t\r\n\t\tbackground-color: #fff;\r\n\t\timg{\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 100%;\r\n\t\t\tborder-radius: 50%;\r\n\t\t\tbackground-color: #eee;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.login_form{\r\n\tposition: absolute;\r\n\tbottom: 10%;\r\n\twidth: 100%;\r\n\tpadding: 0 20px;\r\n\tbox-sizing: border-box; \r\n\t// 默认的box-sizing: content-box(边框和内边距宽度会增加到内容区的宽度上)\r\n\t.el-form-item {\r\n\t\tmargin: 5% 0;\r\n\t}\r\n}\r\n\r\n.bots{\r\n\tjustify-content: flex-end;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}