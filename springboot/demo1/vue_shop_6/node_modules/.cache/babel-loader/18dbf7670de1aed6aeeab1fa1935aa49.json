{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { getCurrentInstance, unref, nextTick } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport useWatcher from './watcher.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\n\nfunction replaceColumn(array, column) {\n  return array.map(item => {\n    var _a;\n\n    if (item.id === column.id) {\n      return column;\n    } else if ((_a = item.children) == null ? void 0 : _a.length) {\n      item.children = replaceColumn(item.children, column);\n    }\n\n    return item;\n  });\n}\n\nfunction sortColumn(array) {\n  array.forEach(item => {\n    var _a, _b;\n\n    item.no = (_a = item.getColumnIndex) == null ? void 0 : _a.call(item);\n\n    if ((_b = item.children) == null ? void 0 : _b.length) {\n      sortColumn(item.children);\n    }\n  });\n  array.sort((cur, pre) => cur.no - pre.no);\n}\n\nfunction useStore() {\n  const instance = getCurrentInstance();\n  const watcher = useWatcher();\n  const ns = useNamespace(\"table\");\n  const mutations = {\n    setData(states, data) {\n      const dataInstanceChanged = unref(states._data) !== data;\n      states.data.value = data;\n      states._data.value = data;\n      instance.store.execQuery();\n      instance.store.updateCurrentRowData();\n      instance.store.updateExpandRows();\n      instance.store.updateTreeData(instance.store.states.defaultExpandAll.value);\n\n      if (unref(states.reserveSelection)) {\n        instance.store.assertRowKey();\n        instance.store.updateSelectionByRowKey();\n      } else {\n        if (dataInstanceChanged) {\n          instance.store.clearSelection();\n        } else {\n          instance.store.cleanSelection();\n        }\n      }\n\n      instance.store.updateAllSelected();\n\n      if (instance.$ready) {\n        instance.store.scheduleLayout();\n      }\n    },\n\n    insertColumn(states, column, parent) {\n      const array = unref(states._columns);\n      let newColumns = [];\n\n      if (!parent) {\n        array.push(column);\n        newColumns = array;\n      } else {\n        if (parent && !parent.children) {\n          parent.children = [];\n        }\n\n        parent.children.push(column);\n        newColumns = replaceColumn(array, parent);\n      }\n\n      sortColumn(newColumns);\n      states._columns.value = newColumns;\n\n      if (column.type === \"selection\") {\n        states.selectable.value = column.selectable;\n        states.reserveSelection.value = column.reserveSelection;\n      }\n\n      if (instance.$ready) {\n        instance.store.updateColumns();\n        instance.store.scheduleLayout();\n      }\n    },\n\n    removeColumn(states, column, parent) {\n      const array = unref(states._columns) || [];\n\n      if (parent) {\n        parent.children.splice(parent.children.findIndex(item => item.id === column.id), 1);\n\n        if (parent.children.length === 0) {\n          delete parent.children;\n        }\n\n        states._columns.value = replaceColumn(array, parent);\n      } else {\n        const index = array.indexOf(column);\n\n        if (index > -1) {\n          array.splice(index, 1);\n          states._columns.value = array;\n        }\n      }\n\n      if (instance.$ready) {\n        instance.store.updateColumns();\n        instance.store.scheduleLayout();\n      }\n    },\n\n    sort(states, options) {\n      const {\n        prop,\n        order,\n        init\n      } = options;\n\n      if (prop) {\n        const column = unref(states.columns).find(column2 => column2.property === prop);\n\n        if (column) {\n          column.order = order;\n          instance.store.updateSort(column, prop, order);\n          instance.store.commit(\"changeSortCondition\", {\n            init\n          });\n        }\n      }\n    },\n\n    changeSortCondition(states, options) {\n      const {\n        sortingColumn,\n        sortProp,\n        sortOrder\n      } = states;\n      const columnValue = unref(sortingColumn),\n            propValue = unref(sortProp),\n            orderValue = unref(sortOrder);\n\n      if (orderValue === null) {\n        states.sortingColumn.value = null;\n        states.sortProp.value = null;\n      }\n\n      const ignore = {\n        filter: true\n      };\n      instance.store.execQuery(ignore);\n\n      if (!options || !(options.silent || options.init)) {\n        instance.emit(\"sort-change\", {\n          column: columnValue,\n          prop: propValue,\n          order: orderValue\n        });\n      }\n\n      instance.store.updateTableScrollY();\n    },\n\n    filterChange(_states, options) {\n      const {\n        column,\n        values,\n        silent\n      } = options;\n      const newFilters = instance.store.updateFilters(column, values);\n      instance.store.execQuery();\n\n      if (!silent) {\n        instance.emit(\"filter-change\", newFilters);\n      }\n\n      instance.store.updateTableScrollY();\n    },\n\n    toggleAllSelection() {\n      instance.store.toggleAllSelection();\n    },\n\n    rowSelectedChanged(_states, row) {\n      instance.store.toggleRowSelection(row);\n      instance.store.updateAllSelected();\n    },\n\n    setHoverRow(states, row) {\n      states.hoverRow.value = row;\n    },\n\n    setCurrentRow(_states, row) {\n      instance.store.updateCurrentRow(row);\n    }\n\n  };\n\n  const commit = function (name, ...args) {\n    const mutations2 = instance.store.mutations;\n\n    if (mutations2[name]) {\n      mutations2[name].apply(instance, [instance.store.states].concat(args));\n    } else {\n      throw new Error(`Action not found: ${name}`);\n    }\n  };\n\n  const updateTableScrollY = function () {\n    nextTick(() => instance.layout.updateScrollY.apply(instance.layout));\n  };\n\n  return {\n    ns,\n    ...watcher,\n    mutations,\n    commit,\n    updateTableScrollY\n  };\n}\n\nclass HelperStore {\n  constructor() {\n    this.Return = useStore();\n  }\n\n}\n\nexport { useStore as default };","map":{"version":3,"mappings":"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","names":["replaceColumn","array","column","map","item","_a","id","children","length","sortColumn","forEach","_b","no","getColumnIndex","call","sort","cur","pre","useStore","instance","getCurrentInstance","watcher","useWatcher","ns","useNamespace","mutations","setData","states","data","dataInstanceChanged","unref","_data","value","store","execQuery","updateCurrentRowData","updateExpandRows","updateTreeData","defaultExpandAll","reserveSelection","assertRowKey","updateSelectionByRowKey","clearSelection","cleanSelection","updateAllSelected","$ready","scheduleLayout","insertColumn","parent","_columns","newColumns","push","type","selectable","updateColumns","removeColumn","splice","findIndex","index","indexOf","options","prop","order","init","columns","find","column2","property","updateSort","commit","changeSortCondition","sortingColumn","sortProp","sortOrder","columnValue","propValue","orderValue","ignore","filter","silent","emit","updateTableScrollY","filterChange","_states","values","newFilters","updateFilters","toggleAllSelection","rowSelectedChanged","row","toggleRowSelection","setHoverRow","hoverRow","setCurrentRow","updateCurrentRow","name","args","mutations2","apply","concat","Error","nextTick","layout","updateScrollY","HelperStore","constructor","Return"],"sources":["../../../../../../../packages/components/table/src/store/index.ts"],"sourcesContent":["// @ts-nocheck\nimport { getCurrentInstance, nextTick, unref } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport useWatcher from './watcher'\n\nimport type { Ref } from 'vue'\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { Filter, Sort, Table } from '../table/defaults'\n\ninterface WatcherPropsData<T> {\n  data: Ref<T[]>\n  rowKey: Ref<string>\n}\n\nfunction replaceColumn<T>(\n  array: TableColumnCtx<T>[],\n  column: TableColumnCtx<T>\n) {\n  return array.map((item) => {\n    if (item.id === column.id) {\n      return column\n    } else if (item.children?.length) {\n      item.children = replaceColumn(item.children, column)\n    }\n    return item\n  })\n}\n\nfunction sortColumn<T>(array: TableColumnCtx<T>[]) {\n  array.forEach((item) => {\n    item.no = item.getColumnIndex?.()\n    if (item.children?.length) {\n      sortColumn(item.children)\n    }\n  })\n  array.sort((cur, pre) => cur.no - pre.no)\n}\n\nfunction useStore<T>() {\n  const instance = getCurrentInstance() as Table<T>\n  const watcher = useWatcher<T>()\n  const ns = useNamespace('table')\n  type StoreStates = typeof watcher.states\n  const mutations = {\n    setData(states: StoreStates, data: T[]) {\n      const dataInstanceChanged = unref(states._data) !== data\n      states.data.value = data\n      states._data.value = data\n      instance.store.execQuery()\n      // 数据变化，更新部分数据。\n      // 没有使用 computed，而是手动更新部分数据 https://github.com/vuejs/vue/issues/6660#issuecomment-331417140\n      instance.store.updateCurrentRowData()\n      instance.store.updateExpandRows()\n      instance.store.updateTreeData(\n        instance.store.states.defaultExpandAll.value\n      )\n      if (unref(states.reserveSelection)) {\n        instance.store.assertRowKey()\n        instance.store.updateSelectionByRowKey()\n      } else {\n        if (dataInstanceChanged) {\n          instance.store.clearSelection()\n        } else {\n          instance.store.cleanSelection()\n        }\n      }\n      instance.store.updateAllSelected()\n      if (instance.$ready) {\n        instance.store.scheduleLayout()\n      }\n    },\n\n    insertColumn(\n      states: StoreStates,\n      column: TableColumnCtx<T>,\n      parent: TableColumnCtx<T>\n    ) {\n      const array = unref(states._columns)\n      let newColumns = []\n      if (!parent) {\n        array.push(column)\n        newColumns = array\n      } else {\n        if (parent && !parent.children) {\n          parent.children = []\n        }\n        parent.children.push(column)\n        newColumns = replaceColumn(array, parent)\n      }\n      sortColumn(newColumns)\n      states._columns.value = newColumns\n      if (column.type === 'selection') {\n        states.selectable.value = column.selectable\n        states.reserveSelection.value = column.reserveSelection\n      }\n      if (instance.$ready) {\n        instance.store.updateColumns() // hack for dynamics insert column\n        instance.store.scheduleLayout()\n      }\n    },\n\n    removeColumn(\n      states: StoreStates,\n      column: TableColumnCtx<T>,\n      parent: TableColumnCtx<T>\n    ) {\n      const array = unref(states._columns) || []\n      if (parent) {\n        parent.children.splice(\n          parent.children.findIndex((item) => item.id === column.id),\n          1\n        )\n        if (parent.children.length === 0) {\n          delete parent.children\n        }\n        states._columns.value = replaceColumn(array, parent)\n      } else {\n        const index = array.indexOf(column)\n        if (index > -1) {\n          array.splice(index, 1)\n          states._columns.value = array\n        }\n      }\n\n      if (instance.$ready) {\n        instance.store.updateColumns() // hack for dynamics remove column\n        instance.store.scheduleLayout()\n      }\n    },\n\n    sort(states: StoreStates, options: Sort) {\n      const { prop, order, init } = options\n      if (prop) {\n        const column = unref(states.columns).find(\n          (column) => column.property === prop\n        )\n        if (column) {\n          column.order = order\n          instance.store.updateSort(column, prop, order)\n          instance.store.commit('changeSortCondition', { init })\n        }\n      }\n    },\n\n    changeSortCondition(states: StoreStates, options: Sort) {\n      // 修复 pr https://github.com/ElemeFE/element/pull/15012 导致的 bug\n      // https://github.com/element-plus/element-plus/pull/4640\n      const { sortingColumn, sortProp, sortOrder } = states\n      const columnValue = unref(sortingColumn),\n        propValue = unref(sortProp),\n        orderValue = unref(sortOrder)\n      if (orderValue === null) {\n        states.sortingColumn.value = null\n        states.sortProp.value = null\n      }\n      const ignore = { filter: true }\n      instance.store.execQuery(ignore)\n\n      if (!options || !(options.silent || options.init)) {\n        instance.emit('sort-change', {\n          column: columnValue,\n          prop: propValue,\n          order: orderValue,\n        })\n      }\n\n      instance.store.updateTableScrollY()\n    },\n\n    filterChange(_states: StoreStates, options: Filter<T>) {\n      const { column, values, silent } = options\n      const newFilters = instance.store.updateFilters(column, values)\n      instance.store.execQuery()\n\n      if (!silent) {\n        instance.emit('filter-change', newFilters)\n      }\n      instance.store.updateTableScrollY()\n    },\n\n    toggleAllSelection() {\n      instance.store.toggleAllSelection()\n    },\n\n    rowSelectedChanged(_states, row: T) {\n      instance.store.toggleRowSelection(row)\n      instance.store.updateAllSelected()\n    },\n\n    setHoverRow(states: StoreStates, row: T) {\n      states.hoverRow.value = row\n    },\n\n    setCurrentRow(_states, row: T) {\n      instance.store.updateCurrentRow(row)\n    },\n  }\n  const commit = function (name: keyof typeof mutations, ...args) {\n    const mutations = instance.store.mutations\n    if (mutations[name]) {\n      mutations[name].apply(instance, [instance.store.states].concat(args))\n    } else {\n      throw new Error(`Action not found: ${name}`)\n    }\n  }\n  const updateTableScrollY = function () {\n    nextTick(() => instance.layout.updateScrollY.apply(instance.layout))\n  }\n  return {\n    ns,\n    ...watcher,\n    mutations,\n    commit,\n    updateTableScrollY,\n  }\n}\n\nexport default useStore\n\nclass HelperStore<T> {\n  Return = useStore<T>()\n}\n\ntype StoreFilter = Record<string, string[]>\ntype Store<T> = HelperStore<T>['Return']\nexport type { WatcherPropsData, Store, StoreFilter }\n"]},"metadata":{},"sourceType":"module"}