{"ast":null,"code":"import { defineComponent, useSlots, computed, ref, provide, openBlock, createBlock, Teleport, createVNode, Transition, unref, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, mergeProps, createSlots, renderSlot, createCommentVNode, vShow } from 'vue';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport ElDialogContent from './dialog-content2.mjs';\nimport { dialogProps, dialogEmits } from './dialog.mjs';\nimport { useDialog } from './use-dialog.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { dialogInjectionKey } from '../../../tokens/dialog.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nconst _hoisted_1 = [\"aria-label\", \"aria-labelledby\", \"aria-describedby\"];\nconst __default__ = {\n  name: \"ElDialog\",\n  inheritAttrs: false\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: dialogProps,\n  emits: dialogEmits,\n\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const slots = useSlots();\n    useDeprecated({\n      scope: \"el-dialog\",\n      from: \"the title slot\",\n      replacement: \"the header slot\",\n      version: \"3.0.0\",\n      ref: \"https://element-plus.org/en-US/component/dialog.html#slots\"\n    }, computed(() => !!slots.title));\n    useDeprecated({\n      scope: \"el-dialog\",\n      from: \"custom-class\",\n      replacement: \"class\",\n      version: \"2.3.0\",\n      ref: \"https://element-plus.org/en-US/component/dialog.html#attributes\",\n      type: \"Attribute\"\n    }, computed(() => !!props.customClass));\n    const ns = useNamespace(\"dialog\");\n    const dialogRef = ref();\n    const headerRef = ref();\n    const dialogContentRef = ref();\n    const {\n      visible,\n      titleId,\n      bodyId,\n      style,\n      overlayDialogStyle,\n      rendered,\n      zIndex,\n      afterEnter,\n      afterLeave,\n      beforeLeave,\n      handleClose,\n      onModalClick,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      onCloseRequested\n    } = useDialog(props, dialogRef);\n    provide(dialogInjectionKey, {\n      dialogRef,\n      headerRef,\n      bodyId,\n      ns,\n      rendered,\n      style\n    });\n    const overlayEvent = useSameTarget(onModalClick);\n    const draggable = computed(() => props.draggable && !props.fullscreen);\n    expose({\n      visible,\n      dialogContentRef\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(Teleport, {\n        to: \"body\",\n        disabled: !_ctx.appendToBody\n      }, [createVNode(Transition, {\n        name: \"dialog-fade\",\n        onAfterEnter: unref(afterEnter),\n        onAfterLeave: unref(afterLeave),\n        onBeforeLeave: unref(beforeLeave),\n        persisted: \"\"\n      }, {\n        default: withCtx(() => [withDirectives(createVNode(unref(ElOverlay), {\n          \"custom-mask-event\": \"\",\n          mask: _ctx.modal,\n          \"overlay-class\": _ctx.modalClass,\n          \"z-index\": unref(zIndex)\n        }, {\n          default: withCtx(() => [createElementVNode(\"div\", {\n            role: \"dialog\",\n            \"aria-modal\": \"true\",\n            \"aria-label\": _ctx.title || void 0,\n            \"aria-labelledby\": !_ctx.title ? unref(titleId) : void 0,\n            \"aria-describedby\": unref(bodyId),\n            class: normalizeClass(`${unref(ns).namespace.value}-overlay-dialog`),\n            style: normalizeStyle(unref(overlayDialogStyle)),\n            onClick: _cache[0] || (_cache[0] = (...args) => unref(overlayEvent).onClick && unref(overlayEvent).onClick(...args)),\n            onMousedown: _cache[1] || (_cache[1] = (...args) => unref(overlayEvent).onMousedown && unref(overlayEvent).onMousedown(...args)),\n            onMouseup: _cache[2] || (_cache[2] = (...args) => unref(overlayEvent).onMouseup && unref(overlayEvent).onMouseup(...args))\n          }, [createVNode(unref(ElFocusTrap), {\n            loop: \"\",\n            trapped: unref(visible),\n            \"focus-start-el\": \"container\",\n            onFocusAfterTrapped: unref(onOpenAutoFocus),\n            onFocusAfterReleased: unref(onCloseAutoFocus),\n            onReleaseRequested: unref(onCloseRequested)\n          }, {\n            default: withCtx(() => [unref(rendered) ? (openBlock(), createBlock(ElDialogContent, mergeProps({\n              key: 0,\n              ref_key: \"dialogContentRef\",\n              ref: dialogContentRef\n            }, _ctx.$attrs, {\n              \"custom-class\": _ctx.customClass,\n              center: _ctx.center,\n              \"align-center\": _ctx.alignCenter,\n              \"close-icon\": _ctx.closeIcon,\n              draggable: unref(draggable),\n              fullscreen: _ctx.fullscreen,\n              \"show-close\": _ctx.showClose,\n              title: _ctx.title,\n              onClose: unref(handleClose)\n            }), createSlots({\n              header: withCtx(() => [!_ctx.$slots.title ? renderSlot(_ctx.$slots, \"header\", {\n                key: 0,\n                close: unref(handleClose),\n                titleId: unref(titleId),\n                titleClass: unref(ns).e(\"title\")\n              }) : renderSlot(_ctx.$slots, \"title\", {\n                key: 1\n              })]),\n              default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n              _: 2\n            }, [_ctx.$slots.footer ? {\n              name: \"footer\",\n              fn: withCtx(() => [renderSlot(_ctx.$slots, \"footer\")])\n            } : void 0]), 1040, [\"custom-class\", \"center\", \"align-center\", \"close-icon\", \"draggable\", \"fullscreen\", \"show-close\", \"title\", \"onClose\"])) : createCommentVNode(\"v-if\", true)]),\n            _: 3\n          }, 8, [\"trapped\", \"onFocusAfterTrapped\", \"onFocusAfterReleased\", \"onReleaseRequested\"])], 46, _hoisted_1)]),\n          _: 3\n        }, 8, [\"mask\", \"overlay-class\", \"z-index\"]), [[vShow, unref(visible)]])]),\n        _: 3\n      }, 8, [\"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])], 8, [\"disabled\"]);\n    };\n  }\n\n});\n\nvar Dialog = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog.vue\"]]);\n\nexport { Dialog as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwFA;IAGAA;MACAC,kBADA;MAEAC,sBAFA;MAGAC,8BAHA;MAIAC,gBAJA;MAKAC;IALA,GAOAC,6BAPA;IAWAN;MACAC,kBADA;MAEAC,oBAFA;MAGAC,oBAHA;MAIAC,gBAJA;MAKAC,sEALA;MAMAE;IANA,GAQAD,mCARA;IAWA;IACA;IACA;IACA;IAEA;MACAE,OADA;MAEAC,OAFA;MAGAC,MAHA;MAIAC,KAJA;MAKAC,kBALA;MAMAC,QANA;MAOAC,MAPA;MAQAC,UARA;MASAC,UATA;MAUAC,WAVA;MAWAC,WAXA;MAYAC,YAZA;MAaAC,eAbA;MAcAC,gBAdA;MAeAC;IAfA,IAgBAC,2BAhBA;IAkBAC;MACAC,SADA;MAEAC,SAFA;MAGAhB,MAHA;MAIAiB,EAJA;MAKAd,QALA;MAMAF;IANA;IASA;IAEA;IAEAiB;MAEApB,OAFA;MAGAqB;IAHA","names":["useDeprecated","scope","from","replacement","version","ref","computed","type","visible","titleId","bodyId","style","overlayDialogStyle","rendered","zIndex","afterEnter","afterLeave","beforeLeave","handleClose","onModalClick","onOpenAutoFocus","onCloseAutoFocus","onCloseRequested","useDialog","provide","dialogRef","headerRef","ns","expose","dialogContentRef"],"sources":["../../../../../../packages/components/dialog/src/dialog.vue"],"sourcesContent":["<template>\n  <teleport to=\"body\" :disabled=\"!appendToBody\">\n    <transition\n      name=\"dialog-fade\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        custom-mask-event\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n      >\n        <div\n          role=\"dialog\"\n          aria-modal=\"true\"\n          :aria-label=\"title || undefined\"\n          :aria-labelledby=\"!title ? titleId : undefined\"\n          :aria-describedby=\"bodyId\"\n          :class=\"`${ns.namespace.value}-overlay-dialog`\"\n          :style=\"overlayDialogStyle\"\n          @click=\"overlayEvent.onClick\"\n          @mousedown=\"overlayEvent.onMousedown\"\n          @mouseup=\"overlayEvent.onMouseup\"\n        >\n          <el-focus-trap\n            loop\n            :trapped=\"visible\"\n            focus-start-el=\"container\"\n            @focus-after-trapped=\"onOpenAutoFocus\"\n            @focus-after-released=\"onCloseAutoFocus\"\n            @release-requested=\"onCloseRequested\"\n          >\n            <el-dialog-content\n              v-if=\"rendered\"\n              ref=\"dialogContentRef\"\n              v-bind=\"$attrs\"\n              :custom-class=\"customClass\"\n              :center=\"center\"\n              :align-center=\"alignCenter\"\n              :close-icon=\"closeIcon\"\n              :draggable=\"draggable\"\n              :fullscreen=\"fullscreen\"\n              :show-close=\"showClose\"\n              :title=\"title\"\n              @close=\"handleClose\"\n            >\n              <template #header>\n                <slot\n                  v-if=\"!$slots.title\"\n                  name=\"header\"\n                  :close=\"handleClose\"\n                  :title-id=\"titleId\"\n                  :title-class=\"ns.e('title')\"\n                />\n                <slot v-else name=\"title\" />\n              </template>\n              <slot />\n              <template v-if=\"$slots.footer\" #footer>\n                <slot name=\"footer\" />\n              </template>\n            </el-dialog-content>\n          </el-focus-trap>\n        </div>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, ref, useSlots } from 'vue'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport { useDeprecated, useNamespace, useSameTarget } from '@element-plus/hooks'\nimport { dialogInjectionKey } from '@element-plus/tokens'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElDialogContent from './dialog-content.vue'\nimport { dialogEmits, dialogProps } from './dialog'\nimport { useDialog } from './use-dialog'\n\ndefineOptions({\n  name: 'ElDialog',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(dialogProps)\ndefineEmits(dialogEmits)\nconst slots = useSlots()\n\nuseDeprecated(\n  {\n    scope: 'el-dialog',\n    from: 'the title slot',\n    replacement: 'the header slot',\n    version: '3.0.0',\n    ref: 'https://element-plus.org/en-US/component/dialog.html#slots',\n  },\n  computed(() => !!slots.title)\n)\n\nuseDeprecated(\n  {\n    scope: 'el-dialog',\n    from: 'custom-class',\n    replacement: 'class',\n    version: '2.3.0',\n    ref: 'https://element-plus.org/en-US/component/dialog.html#attributes',\n    type: 'Attribute',\n  },\n  computed(() => !!props.customClass)\n)\n\nconst ns = useNamespace('dialog')\nconst dialogRef = ref<HTMLElement>()\nconst headerRef = ref<HTMLElement>()\nconst dialogContentRef = ref()\n\nconst {\n  visible,\n  titleId,\n  bodyId,\n  style,\n  overlayDialogStyle,\n  rendered,\n  zIndex,\n  afterEnter,\n  afterLeave,\n  beforeLeave,\n  handleClose,\n  onModalClick,\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onCloseRequested,\n} = useDialog(props, dialogRef)\n\nprovide(dialogInjectionKey, {\n  dialogRef,\n  headerRef,\n  bodyId,\n  ns,\n  rendered,\n  style,\n})\n\nconst overlayEvent = useSameTarget(onModalClick)\n\nconst draggable = computed(() => props.draggable && !props.fullscreen)\n\ndefineExpose({\n  /** @description whether the dialog is visible */\n  visible,\n  dialogContentRef,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}