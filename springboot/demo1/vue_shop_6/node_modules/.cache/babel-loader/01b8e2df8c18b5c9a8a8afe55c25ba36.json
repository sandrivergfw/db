{"ast":null,"code":"import { useGlobalConfig } from '../use-global-config/index.mjs';\nconst defaultNamespace = \"el\";\nconst statePrefix = \"is-\";\n\nconst _bem = (namespace, block, blockSuffix, element, modifier) => {\n  let cls = `${namespace}-${block}`;\n\n  if (blockSuffix) {\n    cls += `-${blockSuffix}`;\n  }\n\n  if (element) {\n    cls += `__${element}`;\n  }\n\n  if (modifier) {\n    cls += `--${modifier}`;\n  }\n\n  return cls;\n};\n\nconst useNamespace = block => {\n  const namespace = useGlobalConfig(\"namespace\", defaultNamespace);\n\n  const b = (blockSuffix = \"\") => _bem(namespace.value, block, blockSuffix, \"\", \"\");\n\n  const e = element => element ? _bem(namespace.value, block, \"\", element, \"\") : \"\";\n\n  const m = modifier => modifier ? _bem(namespace.value, block, \"\", \"\", modifier) : \"\";\n\n  const be = (blockSuffix, element) => blockSuffix && element ? _bem(namespace.value, block, blockSuffix, element, \"\") : \"\";\n\n  const em = (element, modifier) => element && modifier ? _bem(namespace.value, block, \"\", element, modifier) : \"\";\n\n  const bm = (blockSuffix, modifier) => blockSuffix && modifier ? _bem(namespace.value, block, blockSuffix, \"\", modifier) : \"\";\n\n  const bem = (blockSuffix, element, modifier) => blockSuffix && element && modifier ? _bem(namespace.value, block, blockSuffix, element, modifier) : \"\";\n\n  const is = (name, ...args) => {\n    const state = args.length >= 1 ? args[0] : true;\n    return name && state ? `${statePrefix}${name}` : \"\";\n  };\n\n  const cssVar = object => {\n    const styles = {};\n\n    for (const key in object) {\n      if (object[key]) {\n        styles[`--${namespace.value}-${key}`] = object[key];\n      }\n    }\n\n    return styles;\n  };\n\n  const cssVarBlock = object => {\n    const styles = {};\n\n    for (const key in object) {\n      if (object[key]) {\n        styles[`--${namespace.value}-${block}-${key}`] = object[key];\n      }\n    }\n\n    return styles;\n  };\n\n  const cssVarName = name => `--${namespace.value}-${name}`;\n\n  const cssVarBlockName = name => `--${namespace.value}-${block}-${name}`;\n\n  return {\n    namespace,\n    b,\n    e,\n    m,\n    be,\n    em,\n    bm,\n    bem,\n    is,\n    cssVar,\n    cssVarName,\n    cssVarBlock,\n    cssVarBlockName\n  };\n};\n\nexport { defaultNamespace, useNamespace };","map":{"version":3,"mappings":"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","names":["defaultNamespace","statePrefix","_bem","namespace","block","blockSuffix","element","modifier","cls","useNamespace","useGlobalConfig","b","value","e","m","be","em","bm","bem","is","name","args","state","length","cssVar","object","styles","key","cssVarBlock","cssVarName","cssVarBlockName"],"sources":["../../../../../packages/hooks/use-namespace/index.ts"],"sourcesContent":["import { useGlobalConfig } from '../use-global-config'\n\nexport const defaultNamespace = 'el'\nconst statePrefix = 'is-'\n\nconst _bem = (\n  namespace: string,\n  block: string,\n  blockSuffix: string,\n  element: string,\n  modifier: string\n) => {\n  let cls = `${namespace}-${block}`\n  if (blockSuffix) {\n    cls += `-${blockSuffix}`\n  }\n  if (element) {\n    cls += `__${element}`\n  }\n  if (modifier) {\n    cls += `--${modifier}`\n  }\n  return cls\n}\n\nexport const useNamespace = (block: string) => {\n  const namespace = useGlobalConfig('namespace', defaultNamespace)\n  const b = (blockSuffix = '') =>\n    _bem(namespace.value, block, blockSuffix, '', '')\n  const e = (element?: string) =>\n    element ? _bem(namespace.value, block, '', element, '') : ''\n  const m = (modifier?: string) =>\n    modifier ? _bem(namespace.value, block, '', '', modifier) : ''\n  const be = (blockSuffix?: string, element?: string) =>\n    blockSuffix && element\n      ? _bem(namespace.value, block, blockSuffix, element, '')\n      : ''\n  const em = (element?: string, modifier?: string) =>\n    element && modifier\n      ? _bem(namespace.value, block, '', element, modifier)\n      : ''\n  const bm = (blockSuffix?: string, modifier?: string) =>\n    blockSuffix && modifier\n      ? _bem(namespace.value, block, blockSuffix, '', modifier)\n      : ''\n  const bem = (blockSuffix?: string, element?: string, modifier?: string) =>\n    blockSuffix && element && modifier\n      ? _bem(namespace.value, block, blockSuffix, element, modifier)\n      : ''\n  const is: {\n    (name: string, state: boolean | undefined): string\n    (name: string): string\n  } = (name: string, ...args: [boolean | undefined] | []) => {\n    const state = args.length >= 1 ? args[0]! : true\n    return name && state ? `${statePrefix}${name}` : ''\n  }\n\n  // for css var\n  // --el-xxx: value;\n  const cssVar = (object: Record<string, string>) => {\n    const styles: Record<string, string> = {}\n    for (const key in object) {\n      if (object[key]) {\n        styles[`--${namespace.value}-${key}`] = object[key]\n      }\n    }\n    return styles\n  }\n  // with block\n  const cssVarBlock = (object: Record<string, string>) => {\n    const styles: Record<string, string> = {}\n    for (const key in object) {\n      if (object[key]) {\n        styles[`--${namespace.value}-${block}-${key}`] = object[key]\n      }\n    }\n    return styles\n  }\n\n  const cssVarName = (name: string) => `--${namespace.value}-${name}`\n  const cssVarBlockName = (name: string) =>\n    `--${namespace.value}-${block}-${name}`\n\n  return {\n    namespace,\n    b,\n    e,\n    m,\n    be,\n    em,\n    bm,\n    bem,\n    is,\n    // css\n    cssVar,\n    cssVarName,\n    cssVarBlock,\n    cssVarBlockName,\n  }\n}\n\nexport type UseNamespaceReturn = ReturnType<typeof useNamespace>\n"]},"metadata":{},"sourceType":"module"}