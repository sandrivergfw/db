import { _ as _defineProperty } from '../_chunks/dep-6f104017.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M4.5 1.94a7 7 0 117 12.12 7 7 0 01-7-12.12zm8.95 3.56h-3a3.5 3.5 0 01.63 4.16l-2.49 4.31a6 6 0 004.86-8.47zm-6.02 8.47l1.5-2.6a3.55 3.55 0 01-4.1-1.82l-2.3-4a6 6 0 004.9 8.42zM5 2.8a5.98 5.98 0 00-1.9 1.74l1.49 2.58a3.5 3.5 0 013.05-2.6l.04-.01c.15-.01.3-.02.46-.01h4.73A6 6 0 005 2.8zm2.97 2.7h-.22a2.5 2.5 0 00.45 4.99 2.5 2.5 0 00-.22-5z",
      "fillOpacity": 0.9
    }
  }]
};
var logoChrome = defineComponent({
  name: "LogoChromeIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },

  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-logo-chrome", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;

        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }

});

export { logoChrome as default };
//# sourceMappingURL=logo-chrome.js.map
