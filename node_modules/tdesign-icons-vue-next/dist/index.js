(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TDesignIconVueNext = {}, global.Vue));
})(this, (function (exports, vue) { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys$3L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3L(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function camel2Kebab(camelString) {
    var covertArr = ["fillOpacity", "fillRule", "clipRule"];

    if (covertArr.includes(camelString)) {
      return camelString.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase();
    }

    return camelString;
  }

  function renderFn(node, props) {
    var kebabAttrs = Object.keys(node.attrs).reduce((result, key) => {
      result[camel2Kebab(key)] = node.attrs[key];
      return result;
    }, {});
    return vue.h(node.tag, _objectSpread$3L(_objectSpread$3L({}, kebabAttrs), props), (node.children || []).map(child => renderFn(child, {})));
  }

  var DEFAULT_CLASS_PREFIX = "t";
  var DEFAULT_LOCALE = "zh-CN";
  var ConfigContext = {
    classPrefix: DEFAULT_CLASS_PREFIX,
    locale: DEFAULT_LOCALE
  };
  var ConfigContext$1 = ConfigContext;

  function useCommonClassName() {
    var {
      classPrefix
    } = ConfigContext$1;
    return {
      SIZE: {
        default: "",
        xs: "".concat(classPrefix, "-size-xs"),
        small: "".concat(classPrefix, "-size-s"),
        medium: "".concat(classPrefix, "-size-m"),
        large: "".concat(classPrefix, "-size-l"),
        xl: "".concat(classPrefix, "-size-xl"),
        block: "".concat(classPrefix, "-size-full-width")
      },
      STATUS: {
        loading: "".concat(classPrefix, "-is-loading"),
        disabled: "".concat(classPrefix, "-is-disabled"),
        focused: "".concat(classPrefix, "-is-focused"),
        success: "".concat(classPrefix, "-is-success"),
        error: "".concat(classPrefix, "-is-error"),
        warning: "".concat(classPrefix, "-is-warning"),
        selected: "".concat(classPrefix, "-is-selected"),
        active: "".concat(classPrefix, "-is-active"),
        checked: "".concat(classPrefix, "-is-checked"),
        current: "".concat(classPrefix, "-is-current"),
        hidden: "".concat(classPrefix, "-is-hidden"),
        visible: "".concat(classPrefix, "-is-visible"),
        expanded: "".concat(classPrefix, "-is-expanded"),
        indeterminate: "".concat(classPrefix, "-is-indeterminate")
      }
    };
  }

  function useSizeProps(size) {
    var COMMON_SIZE_CLASS_NAMES = useCommonClassName().SIZE;
    var className = vue.computed(() => {
      if (size.value in COMMON_SIZE_CLASS_NAMES) {
        return COMMON_SIZE_CLASS_NAMES[size.value];
      }

      return "";
    });
    var style = vue.computed(() => {
      if (size.value === void 0 || size.value in COMMON_SIZE_CLASS_NAMES) {
        return {};
      }

      return {
        fontSize: size.value
      };
    });
    return {
      style,
      className
    };
  }

  function ownKeys$3K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3K(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3I = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 8.5h-3v-1h3v-3h1v3h3v1h-3v3h-1v-3z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zm0-1A6 6 0 118 2a6 6 0 010 12z",
        "fillOpacity": 0.9
      }
    }]
  };
  var addCircle = vue.defineComponent({
    name: "AddCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-add-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3K(_objectSpread$3K({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3I, finalProps.value);
    }

  });

  function ownKeys$3J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3J(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3H = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 11V8.5H5v-1h2.5V5h1v2.5H11v1H8.5V11h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var addRectangle = vue.defineComponent({
    name: "AddRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-add-rectangle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3J(_objectSpread$3J({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3H, finalProps.value);
    }

  });

  function ownKeys$3I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3I(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3G = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.35 8.65v3.85h1.3V8.65h3.85v-1.3H8.65V3.5h-1.3v3.85H3.5v1.3h3.85z",
        "fillOpacity": 0.9
      }
    }]
  };
  var add = vue.defineComponent({
    name: "AddIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-add", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3I(_objectSpread$3I({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3G, finalProps.value);
    }

  });

  function ownKeys$3H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3H(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3F = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.25 1.75a3 3 0 100 6 3 3 0 000-6zm-2 3a2 2 0 114 0 2 2 0 01-4 0zM2 3a1 1 0 011-1h3.5a1 1 0 011 1v3.5a1 1 0 01-1 1H3a1 1 0 01-1-1V3zm1 0v3.5h3.5V3H3zM2 9.5a1 1 0 011-1h3.5a1 1 0 011 1V13a1 1 0 01-1 1H3a1 1 0 01-1-1V9.5zm1 0V13h3.5V9.5H3zM8.5 9.5a1 1 0 011-1H13a1 1 0 011 1V13a1 1 0 01-1 1H9.5a1 1 0 01-1-1V9.5zm1 3.5H13V9.5H9.5V13z",
        "fillOpacity": 0.9
      }
    }]
  };
  var app = vue.defineComponent({
    name: "AppIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-app", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3H(_objectSpread$3H({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3F, finalProps.value);
    }

  });

  function ownKeys$3G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3G(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3E = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.75 7.55L8.5 9.79V4.5h-1v5.3L5.25 7.54l-.7.7L8 11.71l3.45-3.46-.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var arrowDownRectangle = vue.defineComponent({
    name: "ArrowDownRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-arrow-down-rectangle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3G(_objectSpread$3G({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3E, finalProps.value);
    }

  });

  function ownKeys$3F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3F(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3D = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.5 2v10.09l3.65-3.65.7.7-4.64 4.65a.3.3 0 01-.42 0L3.15 9.15l.7-.71 3.65 3.65V2h1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var arrowDown = vue.defineComponent({
    name: "ArrowDownIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-arrow-down", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3F(_objectSpread$3F({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3D, finalProps.value);
    }

  });

  function ownKeys$3E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3E(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3C = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.91 8.5l3.65 3.65-.7.7L2.2 8.21a.3.3 0 010-.42l4.64-4.64.71.7L3.91 7.5H14v1H3.91z",
        "fillOpacity": 0.9
      }
    }]
  };
  var arrowLeft = vue.defineComponent({
    name: "ArrowLeftIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-arrow-left", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3E(_objectSpread$3E({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3C, finalProps.value);
    }

  });

  function ownKeys$3D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3D(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3B = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.09 7.5L8.44 3.85l.7-.7 4.65 4.64a.3.3 0 010 .42l-4.64 4.64-.71-.7 3.65-3.65H2v-1h10.09z",
        "fillOpacity": 0.9
      }
    }]
  };
  var arrowRight = vue.defineComponent({
    name: "ArrowRightIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-arrow-right", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3D(_objectSpread$3D({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3B, finalProps.value);
    }

  });

  function ownKeys$3C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3C(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3A = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 3.91L3.85 7.56l-.7-.7L7.79 2.2a.3.3 0 01.42 0l4.64 4.64-.7.71L8.5 3.91V14h-1V3.91z",
        "fillOpacity": 0.9
      }
    }]
  };
  var arrowUp = vue.defineComponent({
    name: "ArrowUpIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-arrow-up", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3C(_objectSpread$3C({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3A, finalProps.value);
    }

  });

  function ownKeys$3B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3B(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.13 3.86a2.02 2.02 0 00-2.85 0l-7.2 7.21-.71-.7 7.2-7.21a3.02 3.02 0 114.27 4.26L7 13.26a1.88 1.88 0 01-2.66-2.66L10 4.93l.71.7-5.67 5.68a.88.88 0 101.25 1.25l5.84-5.84c.79-.8.78-2.08-.01-2.86z",
        "fillOpacity": 0.9
      }
    }]
  };
  var attach = vue.defineComponent({
    name: "AttachIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-attach", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3B(_objectSpread$3B({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3z, finalProps.value);
    }

  });

  function ownKeys$3A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3A(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 8.2L5.94 9.72l-.71-.7L8 6.3l2.8 2.73-.71.7L8.5 8.19v3.8H7.5V8.2zM4.5 5.5h7v-1h-7v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 2a1 1 0 00-1 1v10a1 1 0 001 1h10a1 1 0 001-1V3a1 1 0 00-1-1H3zm10 1v10H3V3h10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var backtopRectangle = vue.defineComponent({
    name: "BacktopRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-backtop-rectangle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3A(_objectSpread$3A({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3y, finalProps.value);
    }

  });

  function ownKeys$3z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3z(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3x = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3h12V2H2v1zM3.38 10.23l4.1-4.03v8.64H8.5V6.2l4.18 4.08.71-.7-5.05-4.93a.5.5 0 00-.7 0l-4.98 4.9.72.69z",
        "fillOpacity": 0.9
      }
    }]
  };
  var backtop = vue.defineComponent({
    name: "BacktopIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-backtop", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3z(_objectSpread$3z({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3x, finalProps.value);
    }

  });

  function ownKeys$3y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3y(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3w = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.24 8.4a.5.5 0 010-.8l5.64-4.5a.5.5 0 01.81.4v4.27a.5.5 0 01.12-.15l5.37-4.48a.5.5 0 01.82.39v8.94a.5.5 0 01-.82.39L7.81 8.38a.5.5 0 01-.12-.15v4.27a.5.5 0 01-.81.4L1.24 8.4zm5.45 3.06V4.54L2.36 8l4.33 3.46zM13 11.4V4.6L8.91 8 13 11.4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var backward = vue.defineComponent({
    name: "BackwardIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-backward", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3y(_objectSpread$3y({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3w, finalProps.value);
    }

  });

  function ownKeys$3x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3x(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3v = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 2v12H2V2h2zm10 0v12h-2V2h2zm-3 0v12h-1V2h1zM9 2v12H7V2h2zM6 2v12H5V2h1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var barcode = vue.defineComponent({
    name: "BarcodeIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-barcode", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3x(_objectSpread$3x({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3v, finalProps.value);
    }

  });

  function ownKeys$3w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3w(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3u = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 9.28l-4 2.8V3h8v9.08l-4-2.8zm0 1.22l4.21 2.95a.5.5 0 00.79-.41V3a1 1 0 00-1-1H4a1 1 0 00-1 1v10.04c0 .4.45.64.79.4l4.2-2.94z",
        "fillOpacity": 0.9
      }
    }]
  };
  var books = vue.defineComponent({
    name: "BooksIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-books", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3w(_objectSpread$3w({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3u, finalProps.value);
    }

  });

  function ownKeys$3v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3v(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3t = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.77 11.98l1.38 1.37.7-.7-9.7-9.7-.7.7 1.2 1.21a7.9 7.9 0 00-2.53 2.91L1 8l.12.23a7.72 7.72 0 009.65 3.75zM10 11.2A6.67 6.67 0 012.11 8c.56-1 1.34-1.83 2.26-2.43l1.08 1.09a2.88 2.88 0 003.9 3.9l.64.64zM6.21 7.42l2.37 2.37a1.88 1.88 0 01-2.37-2.37zM14.88 8.23L15 8l-.12-.23a7.73 7.73 0 00-9.35-3.86l.8.8A6.7 6.7 0 0113.9 8a6.87 6.87 0 01-2.02 2.26l.7.7a7.9 7.9 0 002.3-2.73z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8c0 .37-.07.73-.2 1.06l-.82-.82.02-.24a1.88 1.88 0 00-2.12-1.86l-.82-.82A2.87 2.87 0 0110.88 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var browseOff = vue.defineComponent({
    name: "BrowseOffIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-browse-off", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3v(_objectSpread$3v({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3t, finalProps.value);
    }

  });

  function ownKeys$3u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3u(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3s = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8a2.88 2.88 0 11-5.76 0 2.88 2.88 0 015.76 0zm-1 0a1.88 1.88 0 10-3.76 0 1.88 1.88 0 003.76 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.12 8.23A7.72 7.72 0 008 12.5c2.9 0 5.54-1.63 6.88-4.27L15 8l-.12-.23A7.73 7.73 0 008 3.5a7.74 7.74 0 00-6.88 4.27L1 8l.12.23zM8 11.5A6.73 6.73 0 012.11 8 6.73 6.73 0 0113.9 8 6.74 6.74 0 018 11.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var browse = vue.defineComponent({
    name: "BrowseIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-browse", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3u(_objectSpread$3u({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3s, finalProps.value);
    }

  });

  function ownKeys$3t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3t(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3r = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M14 3H5v1h9V3zM3.5 3H2v1h1.5V3zM5 7.5h9v1H5v-1zM2 7.5h1.5v1H2v-1zM5 12h9v1H5v-1zM2 12h1.5v1H2v-1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var bulletpoint = vue.defineComponent({
    name: "BulletpointIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-bulletpoint", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3t(_objectSpread$3t({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3r, finalProps.value);
    }

  });

  function ownKeys$3s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3s(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 3H6V1.5H5V3H3a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V4a1 1 0 00-1-1h-2V1.5h-1V3zM5 5h1V4h4v1h1V4h2v2H3V4h2v1zM3 7h10v6H3V7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var calendar = vue.defineComponent({
    name: "CalendarIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-calendar", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3s(_objectSpread$3s({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3q, finalProps.value);
    }

  });

  function ownKeys$3r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3r(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3p = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M14 11.06c0 .6-.16 1.24-.52 1.76l-.12.16c-.24.35-.58.6-.98.75-.28.1-.46.14-.91.2-1.95.17-4.08-.74-6.18-2.6A10.2 10.2 0 012.32 6.9 6.45 6.45 0 012 5c0-.7.16-1.32.48-1.78.3-.42.88-.76 1.75-1.1a1 1 0 011.17.37l1.67 2.35a1 1 0 01-.1 1.27l-.21.22-.26.25c-.07.06-.17.2-.17.2-.02.3.3.93 1.26 1.9l.28.27c.88.81 1.12.88 1.39.69l.09-.07.87-.62a1 1 0 011.04-.06l.24.13c1.66.89 2.42 1.42 2.5 1.97v.08zm-1 .01c0 .09-.11-.04-.36-.22-.35-.25-.89-.57-1.61-.96l-.24-.12-.79.54-.02.01c-.86.68-1.6.49-3.1-.93-1.14-1.18-1.6-2.05-1.55-2.7.03-.35.27-.67.5-.86l.3-.29.12-.13-1.67-2.36c-.7.27-1.13.53-1.29.74C3.11 4.06 3 4.47 3 5c0 .48.1 1.03.28 1.61a9.2 9.2 0 002.67 3.98c1.91 1.7 3.79 2.5 5.41 2.35l.26-.04c.18-.02.28-.05.4-.1.23-.08.4-.2.54-.4.27-.33.4-.75.44-1.15v-.17z",
        "fillOpacity": 0.9
      }
    }]
  };
  var call = vue.defineComponent({
    name: "CallIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-call", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3r(_objectSpread$3r({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3p, finalProps.value);
    }

  });

  function ownKeys$3q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3q(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3o = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11 6H5l3 4.5L11 6z",
        "fillOpacity": 0.9
      }
    }]
  };
  var caretDownSmall = vue.defineComponent({
    name: "CaretDownSmallIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-caret-down-small", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3q(_objectSpread$3q({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3o, finalProps.value);
    }

  });

  function ownKeys$3p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3p(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3n = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 10.33L4 5h8l-4 5.33zm-.4 1.14c.2.26.6.26.8 0l5-6.67A.5.5 0 0013 4H3a.5.5 0 00-.4.8l5 6.67z",
        "fillOpacity": 0.9
      }
    }]
  };
  var caretDown = vue.defineComponent({
    name: "CaretDownIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-caret-down", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3p(_objectSpread$3p({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3n, finalProps.value);
    }

  });

  function ownKeys$3o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3o(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3m = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.5 5v6L6 8l4.5-3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var caretLeftSmall = vue.defineComponent({
    name: "CaretLeftSmallIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-caret-left-small", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3o(_objectSpread$3o({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3m, finalProps.value);
    }

  });

  function ownKeys$3n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3n(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3l = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.67 8L10 4v8L4.67 8zm-1.14-.4a.5.5 0 000 .8l6.67 5c.33.25.8.01.8-.4V3a.5.5 0 00-.8-.4l-6.67 5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var caretLeft = vue.defineComponent({
    name: "CaretLeftIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-caret-left", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3n(_objectSpread$3n({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3l, finalProps.value);
    }

  });

  function ownKeys$3m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3m(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3k = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 5v6l4.5-3L6 5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var caretRightSmall = vue.defineComponent({
    name: "CaretRightSmallIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-caret-right-small", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3m(_objectSpread$3m({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3k, finalProps.value);
    }

  });

  function ownKeys$3l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3l(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3j = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.33 8L6 12V4l5.33 4zm1.14.4a.5.5 0 000-.8l-6.67-5A.5.5 0 005 3v10c0 .41.47.65.8.4l6.67-5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var caretRight = vue.defineComponent({
    name: "CaretRightIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-caret-right", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3l(_objectSpread$3l({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3j, finalProps.value);
    }

  });

  function ownKeys$3k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3k(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3i = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11 10.5H5L8 6l3 4.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var caretUpSmall = vue.defineComponent({
    name: "CaretUpSmallIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-caret-up-small", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3k(_objectSpread$3k({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3i, finalProps.value);
    }

  });

  function ownKeys$3j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3j(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3h = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 5.67L12 11H4l4-5.33zm.4-1.14a.5.5 0 00-.8 0l-5 6.67a.5.5 0 00.4.8h10a.5.5 0 00.4-.8l-5-6.67z",
        "fillOpacity": 0.9
      }
    }]
  };
  var caretUp = vue.defineComponent({
    name: "CaretUpIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-caret-up", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3j(_objectSpread$3j({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3h, finalProps.value);
    }

  });

  function ownKeys$3i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3i(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3g = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1 3h1.58l1.39 8.33c.06.39.4.67.78.67H14v-1H4.92L4.6 9h8.63a.8.8 0 00.78-.6l.85-3.4a.8.8 0 00-.78-1H3.76l-.23-1.33A.8.8 0 002.75 2H1v1zm12.07 5H4.42l-.5-3h9.9l-.75 3zM4.75 14.5a.75.75 0 100-1.5.75.75 0 000 1.5zM12.81 14.5a.75.75 0 100-1.5.75.75 0 000 1.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var cart = vue.defineComponent({
    name: "CartIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-cart", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3i(_objectSpread$3i({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3g, finalProps.value);
    }

  });

  function ownKeys$3h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3h(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3f = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 2v12h1V2h-1zM2.5 6v8h1V6h-1zM12.5 14v-4h1v4h-1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chartBar = vue.defineComponent({
    name: "ChartBarIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chart-bar", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3h(_objectSpread$3h({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3f, finalProps.value);
    }

  });

  function ownKeys$3g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3g(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3e = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9 5.5a3 3 0 11-6 0 3 3 0 016 0zm-1 0a2 2 0 10-4 0 2 2 0 004 0zM14 10a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0zm-1 0a1.5 1.5 0 10-3 0 1.5 1.5 0 003 0zM5 12a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM13 4.5a1 1 0 100-2 1 1 0 000 2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chartBubble = vue.defineComponent({
    name: "ChartBubbleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chart-bubble", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3g(_objectSpread$3g({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3e, finalProps.value);
    }

  });

  function ownKeys$3f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3f(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3d = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zm-1.02.5H7.5V2.02a6 6 0 106.48 6.48zm0-1A6 6 0 008.5 2.02V7.5h5.48z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chartPie = vue.defineComponent({
    name: "ChartPieIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chart-pie", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3f(_objectSpread$3f({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3d, finalProps.value);
    }

  });

  function ownKeys$3e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3e(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3c = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.5 12V7.5h1V12h-1zM7.5 4.5V12h1V4.5h-1zM10.5 12V9h1v3h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3a1 1 0 01-1-1V3zm1 0v10h10V3H3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chart = vue.defineComponent({
    name: "ChartIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chart", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3e(_objectSpread$3e({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3c, finalProps.value);
    }

  });

  function ownKeys$3d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3d(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3b = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.64 10.5H13V4H3v7.87l1.64-1.37zm-2.15 3.09a.3.3 0 01-.49-.23V4a1 1 0 011-1h10a1 1 0 011 1v6.5a1 1 0 01-1 1H5l-2.5 2.09z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chat = vue.defineComponent({
    name: "ChatIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chat", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3d(_objectSpread$3d({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3b, finalProps.value);
    }

  });

  function ownKeys$3c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3c(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3a = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM4.5 8.2l.7-.7L7 9.3l3.8-3.8.7.7L7 10.7 4.5 8.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var checkCircleFilled = vue.defineComponent({
    name: "CheckCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-check-circle-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3c(_objectSpread$3c({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3a, finalProps.value);
    }

  });

  function ownKeys$3b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3b(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$39 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.5 8.2L7 10.7l4.5-4.5-.7-.7L7 9.3 5.2 7.5l-.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.11 2.18a7 7 0 117.78 11.64A7 7 0 014.1 2.18zm.56 10.8a6 6 0 106.66-9.97A6 6 0 004.67 13z",
        "fillOpacity": 0.9
      }
    }]
  };
  var checkCircle = vue.defineComponent({
    name: "CheckCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-check-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3b(_objectSpread$3b({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$39, finalProps.value);
    }

  });

  function ownKeys$3a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3a(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$38 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 13a1 1 0 001 1h10a1 1 0 001-1V3a1 1 0 00-1-1H3a1 1 0 00-1 1v10zm5-3.64l3.77-3.78.71.7L7 10.79l-2.49-2.5.71-.7L7 9.36z",
        "fillOpacity": 0.9
      }
    }]
  };
  var checkRectangleFilled = vue.defineComponent({
    name: "CheckRectangleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-check-rectangle-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3a(_objectSpread$3a({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$38, finalProps.value);
    }

  });

  function ownKeys$39(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$39(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$39(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$39(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$37 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.77 5.58L7 9.36 5.22 7.58l-.7.7L7 10.78l4.48-4.5-.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var checkRectangle = vue.defineComponent({
    name: "CheckRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-check-rectangle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$39(_objectSpread$39({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$37, finalProps.value);
    }

  });

  function ownKeys$38(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$38(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$38(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$38(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$36 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.43 9.92l6.23-6.22.92.92-7.15 7.14L1.97 7.3l.92-.92 3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var check = vue.defineComponent({
    name: "CheckIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-check", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$38(_objectSpread$38({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$36, finalProps.value);
    }

  });

  function ownKeys$37(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$37(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$37(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$37(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$35 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.8 6.2L8 9 5.2 6.2l-.7.71 3.5 3.5 3.5-3.5-.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1 8a7 7 0 1114 0A7 7 0 011 8zm1 0a6 6 0 1012 0A6 6 0 002 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronDownCircle = vue.defineComponent({
    name: "ChevronDownCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-down-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$37(_objectSpread$37({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$35, finalProps.value);
    }

  });

  function ownKeys$36(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$36(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$36(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$36(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$34 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.8 6.2L8 9 5.2 6.2l-.7.71 3.5 3.5 3.5-3.5-.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M14 13a1 1 0 01-1 1H3a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10zm-1 0V3H3v10h10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronDownRectangle = vue.defineComponent({
    name: "ChevronDownRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-down-rectangle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$36(_objectSpread$36({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$34, finalProps.value);
    }

  });

  function ownKeys$35(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$35(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$35(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$35(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$33 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.54 6.46l.92-.92L8 9.08l3.54-3.54.92.92L8 10.92 3.54 6.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronDown = vue.defineComponent({
    name: "ChevronDownIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-down", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$35(_objectSpread$35({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$33, finalProps.value);
    }

  });

  function ownKeys$34(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$34(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$34(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$34(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$32 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.8 10.8L7 8l2.8-2.8-.71-.7L5.59 8l3.5 3.5.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1a7 7 0 110 14A7 7 0 018 1zm0 1a6 6 0 100 12A6 6 0 008 2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronLeftCircle = vue.defineComponent({
    name: "ChevronLeftCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-left-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$34(_objectSpread$34({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$32, finalProps.value);
    }

  });

  function ownKeys$33(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$33(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$33(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$33(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$31 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.04 4.46l-.92-.92L7.66 8l4.46 4.46.92-.92L9.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.04 4.46l-.92-.92L2.66 8l4.46 4.46.92-.92L4.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronLeftDouble = vue.defineComponent({
    name: "ChevronLeftDoubleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-left-double", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$33(_objectSpread$33({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$31, finalProps.value);
    }

  });

  function ownKeys$32(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$32(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$32(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$32(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$30 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.8 10.8L7 8l2.8-2.8-.71-.7L5.59 8l3.5 3.5.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronLeftRectangle = vue.defineComponent({
    name: "ChevronLeftRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-left-rectangle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$32(_objectSpread$32({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$30, finalProps.value);
    }

  });

  function ownKeys$31(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$31(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$31(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$31(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2$ = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.54 3.54l.92.92L6.92 8l3.54 3.54-.92.92L5.08 8l4.46-4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronLeft = vue.defineComponent({
    name: "ChevronLeftIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-left", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$31(_objectSpread$31({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2$, finalProps.value);
    }

  });

  function ownKeys$30(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$30(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$30(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$30(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2_ = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.2 5.2L9 8l-2.8 2.8.71.7 3.5-3.5-3.5-3.5-.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 118 1a7 7 0 010 14zm0-1A6 6 0 108 2a6 6 0 000 12z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronRightCircle = vue.defineComponent({
    name: "ChevronRightCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-right-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$30(_objectSpread$30({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2_, finalProps.value);
    }

  });

  function ownKeys$2$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2$(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2Z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.96 11.54l.92.92L8.34 8 3.88 3.54l-.92.92L6.5 8l-3.54 3.54zm5 0l.92.92L13.34 8 8.88 3.54l-.92.92L11.5 8l-3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronRightDouble = vue.defineComponent({
    name: "ChevronRightDoubleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-right-double", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2$(_objectSpread$2$({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2Z, finalProps.value);
    }

  });

  function ownKeys$2_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2_(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2Y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.2 5.2L9 8l-2.8 2.8.71.7 3.5-3.5-3.5-3.5-.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13 2a1 1 0 011 1v10a1 1 0 01-1 1H3a1 1 0 01-1-1V3a1 1 0 011-1h10zm0 1H3v10h10V3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronRightRectangle = vue.defineComponent({
    name: "ChevronRightRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-right-rectangle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2_(_objectSpread$2_({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2Y, finalProps.value);
    }

  });

  function ownKeys$2Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2Z(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2X = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.46 12.46l-.92-.92L9.08 8 5.54 4.46l.92-.92L10.92 8l-4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronRight = vue.defineComponent({
    name: "ChevronRightIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-right", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2Z(_objectSpread$2Z({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2X, finalProps.value);
    }

  });

  function ownKeys$2Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2Y(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2W = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5.2 9.8L8 7l2.8 2.8.7-.71L8 5.59l-3.5 3.5.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zm-1 0A6 6 0 102 8a6 6 0 0012 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronUpCircle = vue.defineComponent({
    name: "ChevronUpCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-up-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2Y(_objectSpread$2Y({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2W, finalProps.value);
    }

  });

  function ownKeys$2X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2X(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2V = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5.2 9.8L8 7l2.8 2.8.7-.71L8 5.59l-3.5 3.5.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3a1 1 0 01-1-1V3zm1 0v10h10V3H3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronUpRectangle = vue.defineComponent({
    name: "ChevronUpRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-up-rectangle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2X(_objectSpread$2X({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2V, finalProps.value);
    }

  });

  function ownKeys$2W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2W(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2U = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.46 9.54l-.92.92L8 6.92l-3.54 3.54-.92-.92L8 5.08l4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronUp = vue.defineComponent({
    name: "ChevronUpIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-chevron-up", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2W(_objectSpread$2W({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2U, finalProps.value);
    }

  });

  function ownKeys$2V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2V(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2T = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1a7 7 0 110 14A7 7 0 018 1zm0 1a6 6 0 100 12A6 6 0 008 2z",
        "opacity": 0.9,
        "fillOpacity": 0.9
      }
    }]
  };
  var circle = vue.defineComponent({
    name: "CircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2V(_objectSpread$2V({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2T, finalProps.value);
    }

  });

  function ownKeys$2U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2U(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2S = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7 4h2V2H7v2zm3-2v2h3a1 1 0 011 1v2a1 1 0 01-.86.99l.7 4.87a1 1 0 01-1 1.14H3.16a1 1 0 01-.99-1.14l.7-4.87A1 1 0 012 7V5a1 1 0 011-1h3V2a1 1 0 011-1h2a1 1 0 011 1zm2.13 5H13V5H3v2H12.13zm0 1H3.87l-.72 5H5v-2h1v2h1.5v-2h1v2H10v-2h1v2h1.85l-.72-5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var clear = vue.defineComponent({
    name: "ClearIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-clear", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2U(_objectSpread$2U({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2S, finalProps.value);
    }

  });

  function ownKeys$2T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2T(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2R = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.67 4.95L8 7.29l2.33-2.34.7.7L8.7 8l2.34 2.35-.71.7L8 8.71l-2.33 2.34-.7-.7L7.3 8 4.96 5.65l.71-.7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var closeCircleFilled = vue.defineComponent({
    name: "CloseCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-close-circle-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2T(_objectSpread$2T({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2R, finalProps.value);
    }

  });

  function ownKeys$2S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2S(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2Q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.98 10.31L7.3 8 5 5.69l.7-.7L8 7.28 10.31 5l.7.7L8.72 8l2.3 2.31-.7.7L8 8.72 5.69 11l-.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1a7 7 0 110 14A7 7 0 018 1zm0 1a6 6 0 100 12A6 6 0 008 2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var closeCircle = vue.defineComponent({
    name: "CloseCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-close-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2S(_objectSpread$2S({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2Q, finalProps.value);
    }

  });

  function ownKeys$2R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2R(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2P = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.82 10.47L7.29 8 4.82 5.53l.7-.71L8 7.29l2.47-2.47.71.7L8.71 8l2.47 2.47-.7.71L8 8.71l-2.47 2.47-.71-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var closeRectangle = vue.defineComponent({
    name: "CloseRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-close-rectangle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2R(_objectSpread$2R({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2P, finalProps.value);
    }

  });

  function ownKeys$2Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2Q(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2O = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 8.92L11.08 12l.92-.92L8.92 8 12 4.92 11.08 4 8 7.08 4.92 4 4 4.92 7.08 8 4 11.08l.92.92L8 8.92z",
        "fillOpacity": 0.9
      }
    }]
  };
  var close = vue.defineComponent({
    name: "CloseIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-close", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2Q(_objectSpread$2Q({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2O, finalProps.value);
    }

  });

  function ownKeys$2P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2P(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2N = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.73 6.26l-.71.09A2.32 2.32 0 002 8.67c0 1.2.89 2.18 2 2.31v1a3.31 3.31 0 01-3-3.31 3.32 3.32 0 012.9-3.32A4.2 4.2 0 018 2c2 0 3.69 1.43 4.1 3.35 1.63.2 2.9 1.6 2.9 3.32a3.31 3.31 0 01-3 3.32v-1c1.11-.14 2-1.11 2-2.32 0-1.22-.9-2.2-2.02-2.32l-.71-.09-.15-.7A3.2 3.2 0 008 3a3.2 3.2 0 00-3.12 2.56l-.15.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.8 11.3l-1.3 1.29v-4.6h-1v4.6L6.2 11.3l-.7.7 2.15 2.15c.2.2.51.2.7 0L10.5 12l-.7-.71z",
        "fillOpacity": 0.9
      }
    }]
  };
  var cloudDownload = vue.defineComponent({
    name: "CloudDownloadIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-cloud-download", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2P(_objectSpread$2P({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2N, finalProps.value);
    }

  });

  function ownKeys$2O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2O(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2M = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.73 6.26l-.71.09A2.32 2.32 0 002 8.67c0 1.2.89 2.18 2 2.31v1a3.31 3.31 0 01-3-3.31 3.32 3.32 0 012.9-3.32A4.2 4.2 0 018 2c2 0 3.69 1.43 4.1 3.35 1.63.2 2.9 1.6 2.9 3.32a3.31 3.31 0 01-3 3.32v-1c1.11-.14 2-1.11 2-2.32 0-1.22-.9-2.2-2.02-2.32l-.71-.09-.15-.7A3.2 3.2 0 008 3a3.2 3.2 0 00-3.12 2.56l-.15.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.14 10.72L7.5 9.39l.03 5.12 1.01-.01-.03-5.1 1.37 1.34.72-.7-2.26-2.2a.5.5 0 00-.7 0l-2.22 2.18.72.7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var cloudUpload = vue.defineComponent({
    name: "CloudUploadIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-cloud-upload", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2O(_objectSpread$2O({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2M, finalProps.value);
    }

  });

  function ownKeys$2N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2N(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2L = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.73 7.26l.15-.7A3.2 3.2 0 018 4a3.2 3.2 0 013.12 2.56l.15.7.71.08A2.32 2.32 0 0114 9.67 2.3 2.3 0 0111.73 12H4.27A2.3 2.3 0 012 9.67c0-1.22.9-2.2 2.02-2.33l.71-.08zm7.37-.9A4.2 4.2 0 008 3a4.2 4.2 0 00-4.1 3.35A3.32 3.32 0 001 9.67 3.3 3.3 0 004.27 13h7.46A3.3 3.3 0 0015 9.67a3.32 3.32 0 00-2.9-3.32z",
        "fillOpacity": 0.9
      }
    }]
  };
  var cloud = vue.defineComponent({
    name: "CloudIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-cloud", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2N(_objectSpread$2N({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2L, finalProps.value);
    }

  });

  function ownKeys$2M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2M(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2K = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.94 2.56L6.09 13.18l.97.26L9.9 2.82l-.97-.26zM2.15 8l3.42 3.43-.7.7-3.71-3.7a.6.6 0 010-.85l3.7-3.71.71.7L2.15 8zM13.85 8l-3.44 3.4.7.71 3.73-3.68a.6.6 0 000-.86L11.1 3.9l-.7.7L13.85 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var code = vue.defineComponent({
    name: "CodeIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-code", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2M(_objectSpread$2M({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2K, finalProps.value);
    }

  });

  function ownKeys$2L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2L(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2J = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M14.5 4.25L8.47.77a.94.94 0 00-.94 0L1.5 4.25v6.96c0 .33.18.64.47.81L8 15.5l6.03-3.48a.94.94 0 00.47-.81V4.25zM8 7.42L3 4.54l5-2.89 5 2.89-5 2.88zm.5.87l5-2.89v5.77l-5 2.89V8.29zm-1 0v5.77l-5-2.89V5.4l5 2.89z",
        "fillRule": "evenodd",
        "clipRule": "evenodd"
      }
    }]
  };
  var controlPlatform = vue.defineComponent({
    name: "ControlPlatformIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-control-platform", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2L(_objectSpread$2L({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2J, finalProps.value);
    }

  });

  function ownKeys$2K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2K(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2I = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 11h3v-1h-3v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 12V4a1 1 0 00-1-1H2a1 1 0 00-1 1v8a1 1 0 001 1h12a1 1 0 001-1zm-1-8v1.5H2V4h12zM2 12V6.5h12V12H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var creditcard = vue.defineComponent({
    name: "CreditcardIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-creditcard", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2K(_objectSpread$2K({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2I, finalProps.value);
    }

  });

  function ownKeys$2J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2J(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2H = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "fill": "currentColor",
        "opacity": 0.9,
        "fillOpacity": 0.9
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "d": "M13.87 4.9l-4.5 4.5-.7-.7 4.5-4.5.7.7z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "d": "M8.02 11.05a1 1 0 110-2 1 1 0 010 2zm0 1a2 2 0 100-4 2 2 0 000 4z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "d": "M8 3.5a6.5 6.5 0 00-5.34 10.21l-.82.58a7.5 7.5 0 019.63-10.93l-.46.88A6.47 6.47 0 008 3.5zm6.5 6.5c0-1.08-.26-2.1-.73-3l.88-.46a7.47 7.47 0 01-.5 7.75l-.81-.58A6.47 6.47 0 0014.5 10z"
        }
      }]
    }]
  };
  var dashboard = vue.defineComponent({
    name: "DashboardIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-dashboard", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2J(_objectSpread$2J({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2H, finalProps.value);
    }

  });

  function ownKeys$2I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2I(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2G = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 12V6h1v6H6zM9 6v6h1V6H9z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.5 3H14v1h-1v10a1 1 0 01-1 1H4a1 1 0 01-1-1V4H2V3h3.5V1.8c0-.44.36-.8.8-.8h3.4c.44 0 .8.36.8.8V3zm-4 0h3V2h-3v1zM4 4v10h8V4H4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var _delete = vue.defineComponent({
    name: "DeleteIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-delete", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2I(_objectSpread$2I({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2G, finalProps.value);
    }

  });

  function ownKeys$2H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2H(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2F = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.5 11h5v2H3v1h10v-1H8.5v-2h5a1 1 0 001-1V3a1 1 0 00-1-1h-11a1 1 0 00-1 1v7a1 1 0 001 1zm0-8h11v7h-11V3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var desktop = vue.defineComponent({
    name: "DesktopIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-desktop", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2H(_objectSpread$2H({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2F, finalProps.value);
    }

  });

  function ownKeys$2G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2G(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2E = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.99 5.33a1.17 1.17 0 11-1.66 1.66 1.17 1.17 0 011.66-1.66z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 7.73c0 .27.1.52.3.7l5.9 5.92a1 1 0 001.42 0l4.73-4.73a1 1 0 000-1.41L8.44 2.29A1 1 0 007.73 2H2v5.73zm5.7-3.1a2.17 2.17 0 11-3.08 3.06A2.17 2.17 0 017.7 4.62z",
        "fillOpacity": 0.9
      }
    }]
  };
  var discountFilled = vue.defineComponent({
    name: "DiscountFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-discount-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2G(_objectSpread$2G({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2E, finalProps.value);
    }

  });

  function ownKeys$2F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2F(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2D = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.84 5.01A2 2 0 115 7.84 2 2 0 017.84 5zm-.7.7a1 1 0 10-1.42 1.42 1 1 0 001.41-1.41z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 7.95V2h5.95a1 1 0 01.7.3l6.14 6.13a1 1 0 010 1.41L9.84 14.8a1 1 0 01-1.41 0L2.29 8.66A1 1 0 012 7.95zM7.95 3l6.13 6.13-4.95 4.95L3 7.95V3h4.95z",
        "fillOpacity": 0.9,
        "fillRule": "evenodd",
        "clipRule": "evenodd"
      }
    }]
  };
  var discount = vue.defineComponent({
    name: "DiscountIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-discount", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2F(_objectSpread$2F({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2D, finalProps.value);
    }

  });

  function ownKeys$2E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2E(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2C = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.26 5.81L8.5 9.58V.5h-1v9.08L3.74 5.8l-.71.71 4.62 4.62c.2.2.5.2.7 0l4.62-4.62-.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 11v2a1 1 0 001 1h10a1 1 0 001-1v-2h-1v2H3v-2H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var download = vue.defineComponent({
    name: "DownloadIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-download", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2E(_objectSpread$2E({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2C, finalProps.value);
    }

  });

  function ownKeys$2D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2D(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2B = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "fill": "currentColor",
        "opacity": 0.9,
        "fillOpacity": 0.9
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "d": "M14.13 4.95L10.9 1.71l.7-.71 3.25 3.24-.7.71zM5.97 13.11l-3.61.72a.3.3 0 01-.35-.35l.72-3.61 7.3-7.3 3.24 3.24-7.3 7.3zm5.89-7.3l-1.83-1.83-6.38 6.38-.46 2.29 2.29-.46 6.38-6.38zM15 11h-4v1h4v-1zM15 13H8.5v1H15v-1z"
        }
      }]
    }]
  };
  var edit1 = vue.defineComponent({
    name: "Edit1Icon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-edit-1", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2D(_objectSpread$2D({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2B, finalProps.value);
    }

  });

  function ownKeys$2C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2C(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2A = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 1.74l3.25 3.24.7-.7-3.24-3.25-.7.7zM2.35 13.86l3.62-.72 7.3-7.3-3.25-3.24-7.3 7.3L2 13.5a.3.3 0 00.35.35zm7.67-9.85l1.83 1.83-6.38 6.38-2.28.46.45-2.29 6.38-6.38z",
        "fillOpacity": 0.9
      }
    }]
  };
  var edit = vue.defineComponent({
    name: "EditIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-edit", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2C(_objectSpread$2C({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2A, finalProps.value);
    }

  });

  function ownKeys$2B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2B(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 9a1 1 0 110-2 1 1 0 010 2zM7 8a1 1 0 102 0 1 1 0 00-2 0zM12 8a1 1 0 102 0 1 1 0 00-2 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ellipsis = vue.defineComponent({
    name: "EllipsisIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-ellipsis", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2B(_objectSpread$2B({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2z, finalProps.value);
    }

  });

  function ownKeys$2A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2A(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13 4v6H4.2l1.65-1.65-.7-.7-2.5 2.5a.5.5 0 000 .7l2.5 2.5.7-.7L4.21 11H13a1 1 0 001-1V4h-1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var enter = vue.defineComponent({
    name: "EnterIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-enter", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2A(_objectSpread$2A({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2y, finalProps.value);
    }

  });

  function ownKeys$2z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2z(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2x = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM8.5 4v5.5h-1V4h1zm-1.1 7h1.2v1.2H7.4V11z",
        "fillOpacity": 0.9
      }
    }]
  };
  var errorCircleFilled = vue.defineComponent({
    name: "ErrorCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-error-circle-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2z(_objectSpread$2z({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2x, finalProps.value);
    }

  });

  function ownKeys$2y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2y(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2w = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.5 4v5.5h-1V4h1zM8.6 10.5H7.4v1.2h1.2v-1.2z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zm-1 0A6 6 0 112 8a6 6 0 0112 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var errorCircle = vue.defineComponent({
    name: "ErrorCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-error-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2y(_objectSpread$2y({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2w, finalProps.value);
    }

  });

  function ownKeys$2x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2x(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2v = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.5 2h-1v9h1V2zm.1 10.8H7.4V14h1.2v-1.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var error = vue.defineComponent({
    name: "ErrorIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-error", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2x(_objectSpread$2x({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2v, finalProps.value);
    }

  });

  function ownKeys$2w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2w(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2u = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 1a1 1 0 00-1 1v11a1 1 0 001 1h4.54v-1H4V2h4v4h4v2.48h1V5.71a1 1 0 00-.3-.71l-.08-.08-3.7-3.71a.53.53 0 00-.3-.15A1 1 0 008.3 1H4zm7.3 4H9V2.7L11.3 5z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 15v-2h-2v-1h2v-2h1v2h2v1h-2v2h-1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var fileAdd = vue.defineComponent({
    name: "FileAddIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-file-add", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2w(_objectSpread$2w({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2u, finalProps.value);
    }

  });

  function ownKeys$2v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2v(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2t = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 1.92C4 1.34 4.52 1 5 1h4.37a1 1 0 01.71.3L13.71 5a1 1 0 01.29.7v6.38c0 .58-.52.92-1 .92H5c-.48 0-1-.34-1-.92V1.92zM5 2v10h8V6.01H9V2H5zm5 .65V5h2.32L10 2.65z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 5v9.01a1 1 0 001 1h8v-1H3V5H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var fileCopy = vue.defineComponent({
    name: "FileCopyIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-file-copy", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2v(_objectSpread$2v({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2t, finalProps.value);
    }

  });

  function ownKeys$2u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2u(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2s = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 2v12H8v1H3.5c-.48 0-1-.34-1-.92V1.92c0-.58.52-.92 1-.92h5.37a1 1 0 01.71.3L13.21 5a1 1 0 01.29.7v1.8h-1V6.01h-4V2h-5zm6 .65V5h2.32L9.5 2.65z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.34 9.8v-.85h-1v.84c0 .26.08.51.25.71l1.19 1.48-1.2 1.48c-.16.2-.24.46-.24.71v.84h1v-.84c0-.03 0-.06.03-.08l1.05-1.3 1.05 1.3c.02.02.03.05.03.08v.84h1v-.84c0-.25-.09-.5-.25-.7l-1.19-1.49 1.19-1.48c.16-.2.25-.45.25-.7v-.85h-1v.84l-.03.09-1.05 1.3-1.05-1.3a.13.13 0 01-.03-.09z",
        "fillOpacity": 0.9
      }
    }]
  };
  var fileExcel = vue.defineComponent({
    name: "FileExcelIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-file-excel", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2u(_objectSpread$2u({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2s, finalProps.value);
    }

  });

  function ownKeys$2t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2t(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2r = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 2v12h7.73v1H3.5c-.48 0-1-.34-1-.92V1.92c0-.58.52-.92 1-.92h5.37a1 1 0 01.71.3L13.21 5a1 1 0 01.29.7v1.8h-1V6.01h-4V2h-5zm6 3.01h2.32L9.5 2.65V5z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.48 9h2v.8h-.6v2.4h.6v.8h-2v-.8h.6V9.8h-.6V9zM9 9H7.8a.8.8 0 00-.8.8v2.4c0 .44.35.8.8.8H9v-.8H7.8V9.8H9V9zM13.8 9.8V13H13V9h1.74c.44 0 .8.36.8.8V13h-.8V9.8h-.94zM9.5 9.8v2.4c0 .44.36.8.8.8h1.2a.8.8 0 00.79-.8V9.8a.8.8 0 00-.8-.79h-1.2a.8.8 0 00-.79.8zm.8 2.4V9.8h1.2v2.4h-1.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var fileIcon = vue.defineComponent({
    name: "FileIconIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-file-icon", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2t(_objectSpread$2t({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2r, finalProps.value);
    }

  });

  function ownKeys$2s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2s(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.57 1c-.47 0-1 .34-1 .92v12.16c0 .58.53.92 1 .92h8.93c.48 0 1-.34 1-.92V5.7a1 1 0 00-.29-.7L9.58 1.3a1 1 0 00-.71-.3h-5.3zm0 10.36V2h5v4h3.93v4.29l-1.92-1.93-3 3-2-2-2 2zm0 1.28l2-2L6.95 12l-2 2H3.58v-1.36zm7-3l1.93 1.92V14H6.21l4.37-4.36zM11.83 5H9.58V2.72l2.24 2.29z",
        "fillOpacity": 0.9
      }
    }]
  };
  var fileImage = vue.defineComponent({
    name: "FileImageIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-file-image", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2s(_objectSpread$2s({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2q, finalProps.value);
    }

  });

  function ownKeys$2r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2r(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2p = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11 11.5H5v1h6v-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.5 1.92c0-.58.52-.92 1-.92h5.3a1 1 0 01.7.3L13.2 5a1 1 0 01.3.7v8.38c0 .58-.52.92-1 .92h-9c-.48 0-1-.34-1-.92V1.92zm1 .08v12h9V6.01h-4V2h-5zm6 3.01h2.3l-2.3-2.3V5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var filePaste = vue.defineComponent({
    name: "FilePasteIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-file-paste", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2r(_objectSpread$2r({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2p, finalProps.value);
    }

  });

  function ownKeys$2q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2q(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2o = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 14V2h5v4.01h4V7.5h1V5.7a1 1 0 00-.29-.7L9.58 1.3a1 1 0 00-.71-.3H3.5c-.48 0-1 .34-1 .92v12.16c0 .58.52.92 1 .92H12v-1H3.5zm8.32-8.99H9.5V2.65L11.82 5z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.38 9h1.86c.48 0 .87.4.87.88v2.23c0 .48-.39.87-.87.87H8.38V9zm.75.75v2.48h1.1c.08 0 .13-.05.13-.12V9.88a.13.13 0 00-.12-.13H9.13zM5 9h1.86c.48 0 .88.4.88.88v1.05c0 .49-.4.88-.88.88H5.75V13H5V9zm.75 2.06h1.11c.07 0 .13-.06.13-.13V9.88a.12.12 0 00-.13-.12H5.75v1.3zM11.75 13h.75v-1.58h1.62v-.75H12.5v-.92h1.62V9h-2.37v4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var filePdf = vue.defineComponent({
    name: "FilePdfIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-file-pdf", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2q(_objectSpread$2q({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2o, finalProps.value);
    }

  });

  function ownKeys$2p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2p(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2n = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 2v12H8v1H3.5c-.48 0-1-.34-1-.92V1.92c0-.58.52-.92 1-.92h5.37a1 1 0 01.71.3L13.21 5a1 1 0 01.29.7v1.8h-1V6.01h-4V2h-5zm6 .65V5h2.32L9.5 2.65z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.5 8.5h-3V15h1v-2.5h2a1 1 0 001-1v-2a1 1 0 00-1-1zm0 3h-2v-2h2v2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var filePowerpoint = vue.defineComponent({
    name: "FilePowerpointIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-file-powerpoint", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2p(_objectSpread$2p({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2n, finalProps.value);
    }

  });

  function ownKeys$2o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2o(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2m = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 2v12H9v1H3.5c-.48 0-1-.34-1-.92V1.92c0-.58.52-.92 1-.92h5.29a1 1 0 01.71.3L13.13 5a1 1 0 01.29.7v1.8h-1V6.01h-4V2H3.5zm5.92.65V5h2.32L9.42 2.65z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.42 8.42c-1.07 0-2 .82-2 1.9h1c0-.46.42-.9 1-.9.58 0 1 .44 1 .9 0 .3-.28.66-.72.83-.44.17-.78.6-.78 1.11v.66h1v-.66c0-.07.04-.14.14-.18.66-.25 1.36-.89 1.36-1.76 0-1.08-.93-1.9-2-1.9zM11.42 13.8a.6.6 0 100 1.2.6.6 0 000-1.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var fileUnknown = vue.defineComponent({
    name: "FileUnknownIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-file-unknown", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2o(_objectSpread$2o({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2m, finalProps.value);
    }

  });

  function ownKeys$2n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2n(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2l = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 2v12h3v1h-3c-.48 0-1-.34-1-.92V1.92c0-.58.52-.92 1-.92h5.37a1 1 0 01.71.3L13.21 5a1 1 0 01.29.7V8h-1V6.01h-4V2h-5zm6 .65V5h2.32L9.5 2.65z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9 14V9.5H8V14a1 1 0 001 1h3.5a1 1 0 001-1V9.5h-1V14h-1.25V9.5h-1V14H9z",
        "fillOpacity": 0.9
      }
    }]
  };
  var fileWord = vue.defineComponent({
    name: "FileWordIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-file-word", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2n(_objectSpread$2n({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2l, finalProps.value);
    }

  });

  function ownKeys$2m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2m(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2k = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 1c-.48 0-1 .34-1 .92v12.16c0 .58.52.92 1 .92h9c.48 0 1-.34 1-.92V5.7a1 1 0 00-.3-.71L9.5 1.3a1 1 0 00-.7-.3H3.5zm5 1v4.01h4V14h-9V2h5zm1 .7l2.3 2.31H9.5v-2.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var file = vue.defineComponent({
    name: "FileIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-file", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2m(_objectSpread$2m({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2k, finalProps.value);
    }

  });

  function ownKeys$2l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2l(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2j = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 2h9a1 1 0 01.69 1.73L8 7.2v5.54L5 15V7.21L1.32 3.73A1 1 0 011.2 2.4l.08-.1A1 1 0 012 2zm9 1H2l4 3.78V13l1-.75V6.78L11 3zM10.7 10l1.42 1.41L13.54 10l.7.7-1.41 1.42 1.41 1.42-.7.7-1.42-1.41-1.41 1.41-.71-.7 1.41-1.42L10 10.71l.7-.71z",
        "fillOpacity": 0.9
      }
    }]
  };
  var filterClear = vue.defineComponent({
    name: "FilterClearIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-filter-clear", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2l(_objectSpread$2l({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2j, finalProps.value);
    }

  });

  function ownKeys$2k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2k(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2i = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v1.79l-4.25 2.5V14h-3.5V7.29L2 4.79V3zm11 0H3v1.21l4.25 2.5V13h1.5V6.71L13 4.21V3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var filter = vue.defineComponent({
    name: "FilterIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-filter", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2k(_objectSpread$2k({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2i, finalProps.value);
    }

  });

  function ownKeys$2j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2j(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2h = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 2v13h1V2H3z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 2h10.46c.3 0 .54.24.54.54v6.92c0 .3-.24.54-.54.54H3V2zm1 1v6h9V3H4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var flag = vue.defineComponent({
    name: "FlagIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-flag", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2j(_objectSpread$2j({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2h, finalProps.value);
    }

  });

  function ownKeys$2i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2i(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2g = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.5 3a1 1 0 011-1h3.6l2.06 1.5H13a1 1 0 011 1v4h-1v-4H7.84L5.77 3H2.5v9h6v1h-6a1 1 0 01-1-1V3z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 15v-2h-2v-1h2v-2h1v2h2v1h-2v2h-1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var folderAdd = vue.defineComponent({
    name: "FolderAddIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-folder-add", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2i(_objectSpread$2i({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2g, finalProps.value);
    }

  });

  function ownKeys$2h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2h(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2f = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.5 2.74h3.93L8.5 4.4h5v-1H8.85L6.78 1.74H2.5v1zM2.5 4.4a1 1 0 00-1 1V13a1 1 0 001 1h11a1 1 0 001-1V7.05a1 1 0 00-1-1H8.17L6.1 4.39H2.5zm0 1h3.25l2.08 1.65h5.67V13h-11V5.4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var folderOpen = vue.defineComponent({
    name: "FolderOpenIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-folder-open", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2h(_objectSpread$2h({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2f, finalProps.value);
    }

  });

  function ownKeys$2g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2g(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2e = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.5 3.5a1 1 0 011-1H5.59l.13.1L7.66 4h5.84a1 1 0 011 1v8a1 1 0 01-1 1h-11a1 1 0 01-1-1V3.5zm3.77 0H2.5V13h11V5H7.34l-.13-.1-1.94-1.4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var folder = vue.defineComponent({
    name: "FolderIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-folder", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2g(_objectSpread$2g({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2e, finalProps.value);
    }

  });

  function ownKeys$2f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2f(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2d = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 2.5c0-.28.22-.5.5-.5h3c.28 0 .5.22.5.5v3a.5.5 0 01-.5.5h-1v2h3a1 1 0 011 1v1h1c.28 0 .5.22.5.5v3a.5.5 0 01-.5.5h-3a.5.5 0 01-.5-.5v-3c0-.28.22-.5.5-.5h1V9h-7v1h1c.28 0 .5.22.5.5v3a.5.5 0 01-.5.5h-3a.5.5 0 01-.5-.5v-3c0-.28.22-.5.5-.5h1V9a1 1 0 011-1h3V6h-1a.5.5 0 01-.5-.5v-3zM7 5h2V3H7v2zm-4 6v2h2v-2H3zm8 0v2h2v-2h-2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var fork = vue.defineComponent({
    name: "ForkIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-fork", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2f(_objectSpread$2f({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2d, finalProps.value);
    }

  });

  function ownKeys$2e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2e(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2c = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13 14V2h1v12h-1zM10.5 14V6h-1v8h1zM3.5 6v8h-1V6h1zM6 14V2h1v12H6z",
        "fillOpacity": 0.9
      }
    }]
  };
  var formatHorizontalAlignBottom = vue.defineComponent({
    name: "FormatHorizontalAlignBottomIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-format-horizontal-align-bottom", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2e(_objectSpread$2e({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2c, finalProps.value);
    }

  });

  function ownKeys$2d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2d(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2b = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13 14V2h1v12h-1zM10.5 12V4h-1v8h1zM3.5 4v8h-1V4h1zM6 14V2h1v12H6z",
        "fillOpacity": 0.9
      }
    }]
  };
  var formatHorizontalAlignCenter = vue.defineComponent({
    name: "FormatHorizontalAlignCenterIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-format-horizontal-align-center", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2d(_objectSpread$2d({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2b, finalProps.value);
    }

  });

  function ownKeys$2c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2c(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2a = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.5 2v9h1V2h-1zM9.5 11V2h1v9h-1zM13 14V2h1v12h-1zM6 14V2h1v12H6z",
        "fillOpacity": 0.9
      }
    }]
  };
  var formatHorizontalAlignTop = vue.defineComponent({
    name: "FormatHorizontalAlignTopIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-format-horizontal-align-top", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2c(_objectSpread$2c({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2a, finalProps.value);
    }

  });

  function ownKeys$2b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2b(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$29 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3h12V2H2v1zM4 6.5h8v-1H4v1zM12 13.5H4v-1h8v1zM2 10h12V9H2v1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var formatVerticalAlignCenter = vue.defineComponent({
    name: "FormatVerticalAlignCenterIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-format-vertical-align-center", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2b(_objectSpread$2b({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$29, finalProps.value);
    }

  });

  function ownKeys$2a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2a(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$28 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3h12V2H2v1zM2 6.5h9v-1H2v1zM11 13.5H2v-1h9v1zM2 10h12V9H2v1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var formatVerticalAlignLeft = vue.defineComponent({
    name: "FormatVerticalAlignLeftIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-format-vertical-align-left", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2a(_objectSpread$2a({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$28, finalProps.value);
    }

  });

  function ownKeys$29(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$29(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$29(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$29(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$27 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3h12V2H2v1zm3 3.5h9v-1H5v1zm9 7H5v-1h9v1zM2 10h12V9H2v1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var formatVerticalAlignRight = vue.defineComponent({
    name: "FormatVerticalAlignRightIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-format-vertical-align-right", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$29(_objectSpread$29({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$27, finalProps.value);
    }

  });

  function ownKeys$28(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$28(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$28(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$28(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$26 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M14.76 7.6a.5.5 0 010 .8l-5.64 4.5a.5.5 0 01-.81-.4V8.23a.5.5 0 01-.12.15l-5.37 4.48a.5.5 0 01-.82-.39V3.53c0-.43.5-.66.82-.39l5.37 4.48c.05.04.09.09.12.15V3.5a.5.5 0 01.81-.4l5.64 4.5zM9.3 4.55v6.92L13.64 8 9.31 4.54zM3 4.6v6.8L7.09 8 3 4.6z",
        "fillOpacity": 0.9
      }
    }]
  };
  var forward = vue.defineComponent({
    name: "ForwardIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-forward", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$28(_objectSpread$28({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$26, finalProps.value);
    }

  });

  function ownKeys$27(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$27(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$27(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$27(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$25 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.5 5.8V3h1v4a.5.5 0 01-.5.5H3v-1h2.8L2.14 2.85l.7-.7L6.5 5.79zM9.5 10.2V13h-1V9c0-.28.22-.5.5-.5h4v1h-2.8l3.65 3.65-.7.7-3.65-3.64z",
        "fillOpacity": 0.9
      }
    }]
  };
  var fullscreenExit = vue.defineComponent({
    name: "FullscreenExitIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-fullscreen-exit", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$27(_objectSpread$27({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$25, finalProps.value);
    }

  });

  function ownKeys$26(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$26(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$26(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$26(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$24 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 4.2V7h-1V3c0-.28.22-.5.5-.5h4v1H4.2l3.15 3.15-.7.7L3.5 4.21zM12.5 11.8V9h1v4a.5.5 0 01-.5.5H9v-1h2.8L8.64 9.35l.7-.7 3.15 3.14z",
        "fillOpacity": 0.9
      }
    }]
  };
  var fullscreen = vue.defineComponent({
    name: "FullscreenIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-fullscreen", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$26(_objectSpread$26({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$24, finalProps.value);
    }

  });

  function ownKeys$25(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$25(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$25(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$25(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$23 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1.68a3.5 3.5 0 00-.49 6.96V10h-2v1h2v3.5h1V11h2v-1h-2V8.64A3.5 3.5 0 008 1.68zm0 1a2.5 2.5 0 110 5 2.5 2.5 0 010-5z"
      }
    }]
  };
  var genderFemale = vue.defineComponent({
    name: "GenderFemaleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-gender-female", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$25(_objectSpread$25({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$23, finalProps.value);
    }

  });

  function ownKeys$24(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$24(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$24(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$24(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$22 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13 3.6a.6.6 0 00-.6-.6H9v1h2.38l-3.7 3.71a3.5 3.5 0 10.69.72L12 4.8V7h1V3.6zm-9.24 8.64a2.5 2.5 0 113.53-3.53 2.5 2.5 0 01-3.53 3.53z",
        "fillOpacity": 0.9,
        "fillRule": "evenodd",
        "clipRule": "evenodd"
      }
    }]
  };
  var genderMale = vue.defineComponent({
    name: "GenderMaleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-gender-male", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$24(_objectSpread$24({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$22, finalProps.value);
    }

  });

  function ownKeys$23(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$23(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$23(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$23(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$21 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 4c0 .56.19 1.08.5 1.5H2.5A.5.5 0 002 6v8c0 .28.22.5.5.5h11a.5.5 0 00.5-.5V6a.5.5 0 00-.5-.5H12a2.5 2.5 0 00-4-3A2.5 2.5 0 003.5 4zm8 0c0 .83-.67 1.5-1.5 1.5H8.5V4a1.5 1.5 0 113 0zm-4 2.5V11h1V6.5H13v7H3v-7h4.5zm0-1H6A1.5 1.5 0 117.5 4v1.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var gift = vue.defineComponent({
    name: "GiftIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-gift", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$23(_objectSpread$23({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$21, finalProps.value);
    }

  });

  function ownKeys$22(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$22(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$22(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$22(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$20 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 6.61a3.35 3.35 0 015.61-2.47L8 4.5l.39-.36a3.35 3.35 0 014.63 4.84l-4.87 4.87a.2.2 0 01-.3 0L2.98 8.98A3.35 3.35 0 012 6.61z",
        "fillOpacity": 0.9
      }
    }]
  };
  var heartFilled = vue.defineComponent({
    name: "HeartFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-heart-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$22(_objectSpread$22({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$20, finalProps.value);
    }

  });

  function ownKeys$21(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$21(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$21(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$21(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1$ = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 5.86l1.06-.98a2.35 2.35 0 013.25 3.4L8 12.57l-4.31-4.3a2.35 2.35 0 013.25-3.4L8 5.86zm-.39-1.72a3.35 3.35 0 00-4.63 4.84l4.87 4.87a.2.2 0 00.3 0l4.87-4.87a3.35 3.35 0 00-4.63-4.84L8 4.5l-.39-.36z",
        "fillOpacity": 0.9
      }
    }]
  };
  var heart = vue.defineComponent({
    name: "HeartIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-heart", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$21(_objectSpread$21({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1$, finalProps.value);
    }

  });

  function ownKeys$20(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$20(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$20(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$20(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1_ = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.8 6.63a2.2 2.2 0 014.39 0c0 .97-.75 1.72-1.49 2.02a.34.34 0 00-.2.32v.8h-1v-.8c0-.56.33-1.04.82-1.24.5-.2.87-.66.87-1.1a1.2 1.2 0 00-2.39 0h-1zm1.67 4.54a.53.53 0 111.05 0 .53.53 0 01-1.05 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var helpCircleFilled = vue.defineComponent({
    name: "HelpCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-help-circle-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$20(_objectSpread$20({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1_, finalProps.value);
    }

  });

  function ownKeys$1$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1$(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1Z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.4 11.6a.6.6 0 111.2 0 .6.6 0 01-1.2 0zM8 4a2.43 2.43 0 00-2.43 2.43h1a1.43 1.43 0 012.85 0c0 .54-.45 1.08-1.03 1.31-.53.22-.9.74-.9 1.35V10h1v-.9c0-.2.12-.36.28-.43.83-.34 1.65-1.17 1.65-2.24a2.43 2.43 0 00-2.43-2.42z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zm-1 0A6 6 0 112 8a6 6 0 0112 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var helpCircle = vue.defineComponent({
    name: "HelpCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-help-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1$(_objectSpread$1$({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1Z, finalProps.value);
    }

  });

  function ownKeys$1_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1_(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1Y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 2.5c-1.9 0-3.5 1.45-3.5 3.3h1c0-1.24 1.09-2.3 2.5-2.3s2.5 1.06 2.5 2.3c0 .88-.77 1.75-1.76 2.12-.72.28-1.24.95-1.24 1.76V11h1V9.68c0-.36.23-.68.6-.82 1.2-.46 2.4-1.6 2.4-3.06 0-1.85-1.6-3.3-3.5-3.3zM8 12a.75.75 0 100 1.5.75.75 0 000-1.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var help = vue.defineComponent({
    name: "HelpIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-help", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1_(_objectSpread$1_({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1Y, finalProps.value);
    }

  });

  function ownKeys$1Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Z(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1X = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.9 2.8c2.95 0 5.31 2.34 5.31 5.2 0 2.86-2.36 5.21-5.3 5.21a5.29 5.29 0 01-5.13-3.85l-1.03.17a6.33 6.33 0 006.16 4.72A6.3 6.3 0 0014.25 8a6.3 6.3 0 00-6.34-6.25c-2.1 0-3.97 1-5.12 2.55V2.64H1.75V5.8c0 .28.22.5.5.5h3.13V5.25H3.4a5.32 5.32 0 014.5-2.46z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7 5.5v2.89l2.65 2.65.7-.71L8 7.97V5.5H7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var history = vue.defineComponent({
    name: "HistoryIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-history", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1Z(_objectSpread$1Z({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1X, finalProps.value);
    }

  });

  function ownKeys$1Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Y(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1W = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 11v1h4v-1H6z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.65 1.65c.2-.2.5-.2.7 0l6.5 6.5-.7.7L13 7.71v5.79a1 1 0 01-1 1H4a1 1 0 01-1-1V7.7L1.85 8.86l-.7-.7 6.5-6.5zM8 2.7l-4 4v6.79h8V6.7l-4-4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var home = vue.defineComponent({
    name: "HomeIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-home", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1Y(_objectSpread$1Y({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1W, finalProps.value);
    }

  });

  function ownKeys$1X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1X(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1V = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 7.12l4-3.32V2.5H4v1.3l4 3.32zM3 4.27V2.5a1 1 0 011-1h8a1 1 0 011 1v1.77L8.5 8l4.5 3.73v1.77a1 1 0 01-1 1H4a1 1 0 01-1-1v-1.77L7.5 8 3 4.27zm1 7.93v1.3h8v-1.3L8 8.88 4 12.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var hourglass = vue.defineComponent({
    name: "HourglassIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-hourglass", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1X(_objectSpread$1X({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1V, finalProps.value);
    }

  });

  function ownKeys$1W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1W(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1U = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 13V8h1v2.3l3-3 5.7 5.7H13V3H8V2h5a1 1 0 011 1v10a1 1 0 01-1 1H3a1 1 0 01-1-1zm4-4.3l-3 3V13h7.3L6 8.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 6a2 2 0 11-4 0 2 2 0 014 0zm-1 0a1 1 0 10-2 0 1 1 0 002 0zM6.28 5.56l-.7.7-1.42-1.4-1.41 1.4-.71-.7 1.41-1.41-1.41-1.42.7-.7 1.42 1.4 1.41-1.4.71.7-1.41 1.42 1.41 1.4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var imageError = vue.defineComponent({
    name: "ImageErrorIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-image-error", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1W(_objectSpread$1W({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1U, finalProps.value);
    }

  });

  function ownKeys$1V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1V(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1T = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 8a2 2 0 100-4 2 2 0 000 4zm0-1a1 1 0 100-2 1 1 0 000 2z",
        "fillOpacity": 0.9,
        "fillRule": "evenodd",
        "clipRule": "evenodd"
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 13a1 1 0 001 1h10a1 1 0 001-1V3a1 1 0 00-1-1H3a1 1 0 00-1 1v10zm1-1.3l3-3 4.3 4.3H3v-1.3zm0-1.4V3h10v10h-1.3L6 7.3l-3 3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var image = vue.defineComponent({
    name: "ImageIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-image", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1V(_objectSpread$1V({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1T, finalProps.value);
    }

  });

  function ownKeys$1U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1U(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1S = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.4 4h1.2v1.2H7.4V4zm.1 2.5h1V12h-1V6.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var infoCircleFilled = vue.defineComponent({
    name: "InfoCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-info-circle-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1U(_objectSpread$1U({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1S, finalProps.value);
    }

  });

  function ownKeys$1T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1T(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1R = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 12V6.5h1V12h-1zM8.6 4H7.4v1.2h1.2V4z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1 8a7 7 0 1014 0A7 7 0 001 8zm1 0a6 6 0 1112 0A6 6 0 012 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var infoCircle = vue.defineComponent({
    name: "InfoCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-info-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1T(_objectSpread$1T({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1R, finalProps.value);
    }

  });

  function ownKeys$1S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1S(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1Q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.1 7.9a6.9 6.9 0 1113.8 0v.2a6.9 6.9 0 11-13.8 0v-.2zm12.79.6h-3a9.86 9.86 0 01-1.96 5.43A5.9 5.9 0 0013.9 8.5zm-3-1h3a5.9 5.9 0 00-4.96-5.43A9.86 9.86 0 0110.9 7.5zm-1 0A8.87 8.87 0 008 2.5a8.87 8.87 0 00-1.89 5H9.9zm-4.78 1h-3a5.9 5.9 0 004.96 5.43A9.86 9.86 0 015.1 8.5zm0-1c.1-1.92.75-3.82 1.96-5.43A5.9 5.9 0 002.1 7.5h3zm4.78 1H6.1c.1 1.78.73 3.53 1.89 5a8.87 8.87 0 001.89-5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var internet = vue.defineComponent({
    name: "InternetIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-internet", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1S(_objectSpread$1S({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1Q, finalProps.value);
    }

  });

  function ownKeys$1R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1R(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1P = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.3 13.7a1 1 0 00.7.3h10a1 1 0 001-1V8.5h-1V13H3V3h4.5V2H3a1 1 0 00-1 1v10c0 .27.1.52.3.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9 3V2h4.5c.28 0 .5.22.5.5V7h-1V3.7L8.7 8 8 7.3 12.3 3H9z",
        "fillOpacity": 0.9
      }
    }]
  };
  var jump = vue.defineComponent({
    name: "JumpIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-jump", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1R(_objectSpread$1R({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1P, finalProps.value);
    }

  });

  function ownKeys$1Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Q(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1O = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.5 12a1 1 0 01-1-1V4a1 1 0 011-1h11a1 1 0 011 1v7a1 1 0 01-1 1h-11zm0-1h11V4h-11v7zM15 13H1v1h14v-1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var laptop = vue.defineComponent({
    name: "LaptopIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-laptop", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1Q(_objectSpread$1Q({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1O, finalProps.value);
    }

  });

  function ownKeys$1P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1P(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1N = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M14.07 4.98L8 7.5 1.93 4.98c-.41-.17-.41-.78 0-.95L8 1.5l6.07 2.53c.41.17.41.78 0 .95zM3.43 4.5L8 6.4l4.57-1.9L8 2.6 3.43 4.5z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.5 7.03v1.22L8 11.11l6.5-2.86V7.03L8 9.88 1.5 7.03z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.5 10.42v1.23L8 14.5l6.5-2.85v-1.23L8 13.28l-6.5-2.86z",
        "fillOpacity": 0.9
      }
    }]
  };
  var layers = vue.defineComponent({
    name: "LayersIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-layers", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1P(_objectSpread$1P({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1N, finalProps.value);
    }

  });

  function ownKeys$1O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1O(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1M = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 2v2h1V2H6zM8.18 9.6l-2.3 2.29a1.25 1.25 0 01-1.77-1.77l2.3-2.3-.7-.7-2.3 2.3a2.25 2.25 0 003.18 3.18l2.3-2.3-.71-.7zM9.6 8.18l.7.7 2.3-2.3A2.25 2.25 0 109.4 3.4l-2.3 2.3.71.7 2.3-2.29a1.25 1.25 0 011.77 1.77l-2.3 2.3zM12 9h2v1h-2V9zM2 7h2V6H2v1zM10 12v2H9v-2h1zM11.73 11.03l1.62 1.62-.7.7-1.62-1.62.7-.7zM2.65 3.35l1.62 1.62.7-.7-1.62-1.62-.7.7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var linkUnlink = vue.defineComponent({
    name: "LinkUnlinkIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-link-unlink", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1O(_objectSpread$1O({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1M, finalProps.value);
    }

  });

  function ownKeys$1N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1N(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1L = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.23 11.89l2.12-2.12.71.7-2.12 2.13A2.5 2.5 0 013.4 9.06l2.13-2.12.7.7-2.12 2.13a1.5 1.5 0 002.12 2.12zM10.47 9.06l-.7-.7 2.12-2.13a1.5 1.5 0 10-2.12-2.12L7.65 6.23l-.71-.7L9.06 3.4a2.5 2.5 0 013.54 3.54l-2.13 2.12z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.06 6.23L6.23 9.06l.71.7 2.83-2.82-.7-.7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var link = vue.defineComponent({
    name: "LinkIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-link", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1N(_objectSpread$1N({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1L, finalProps.value);
    }

  });

  function ownKeys$1M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1M(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1K = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1.5a6.5 6.5 0 000 13v-1.63A4.87 4.87 0 1112.88 8h1.62A6.5 6.5 0 008 1.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var loading = vue.defineComponent({
    name: "LoadingIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-loading", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1M(_objectSpread$1M({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1K, finalProps.value);
    }

  });

  function ownKeys$1L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1L(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1J = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.5 6a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0zm-1 0a1.5 1.5 0 10-3 0 1.5 1.5 0 003 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.36 14.47a.44.44 0 01-.72 0L3.86 8.9a5.01 5.01 0 118.28 0l-3.78 5.56zm2.96-6.12a4.01 4.01 0 10-6.64 0L8 13.22l3.32-4.87z",
        "fillOpacity": 0.9
      }
    }]
  };
  var location = vue.defineComponent({
    name: "LocationIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-location", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1L(_objectSpread$1L({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1J, finalProps.value);
    }

  });

  function ownKeys$1K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1K(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1I = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 11v-1h4v1H6z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.5 6V5a3.5 3.5 0 117 0h-1a2.5 2.5 0 00-5 0v1H13c.28 0 .5.22.5.5v7a.5.5 0 01-.5.5H3a.5.5 0 01-.5-.5v-7c0-.28.22-.5.5-.5h1.5zm-1 7h9V7h-9v6z",
        "fillOpacity": 0.9
      }
    }]
  };
  var lockOff = vue.defineComponent({
    name: "LockOffIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-lock-off", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1K(_objectSpread$1K({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1I, finalProps.value);
    }

  });

  function ownKeys$1J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1J(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1H = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 10v1h4v-1H6z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.5 5v1H3a.5.5 0 00-.5.5v7c0 .28.22.5.5.5h10a.5.5 0 00.5-.5v-7A.5.5 0 0013 6h-1.5V5a3.5 3.5 0 00-7 0zm6 1h-5V5a2.5 2.5 0 015 0v1zm-7 1h9v6h-9V7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var lockOn = vue.defineComponent({
    name: "LockOnIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-lock-on", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1J(_objectSpread$1J({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1H, finalProps.value);
    }

  });

  function ownKeys$1I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1I(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1G = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.48 7.5L6.23 5.25l.7-.7 3.1 3.1c.2.2.2.5 0 .7l-3.1 3.1-.7-.7L8.48 8.5H1v-1h7.48z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 5V3h8v10H4v-2H3v2.5c0 .28.22.5.5.5h9a.5.5 0 00.5-.5v-11a.5.5 0 00-.5-.5h-9a.5.5 0 00-.5.5V5h1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var login = vue.defineComponent({
    name: "LoginIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-login", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1I(_objectSpread$1I({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1G, finalProps.value);
    }

  });

  function ownKeys$1H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1H(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1F = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5.32 8.38a.67.67 0 111.34 0 .67.67 0 01-1.34 0zM10.01 7.7a.67.67 0 100 1.35.67.67 0 000-1.34z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.32 4L4 5.68a6.68 6.68 0 018 0L13.68 4l.71.7-1.63 1.64a6.69 6.69 0 011.95 4.72v.67H1.29v-.67l.01-.33c.08-1.71.8-3.25 1.94-4.4L1.6 4.72 2.3 4zm-.02 6.73h11.4a5.7 5.7 0 00-11.4 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoAndroid = vue.defineComponent({
    name: "LogoAndroidIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-android", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1H(_objectSpread$1H({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1F, finalProps.value);
    }

  });

  function ownKeys$1G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1G(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1E = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.69 1c.08.79-.24 1.58-.7 2.15a2.5 2.5 0 01-2 .96c-.1-.78.27-1.58.7-2.09.5-.57 1.32-1 2-1.02zM13.13 5.6c-.15.1-1.46.92-1.45 2.57.02 2 1.71 2.68 1.8 2.72h.01v.02c-.05.14-.32 1-.93 1.9-.56.83-1.15 1.64-2.07 1.66a2.3 2.3 0 01-1.04-.25c-.32-.14-.65-.29-1.18-.29-.56 0-.9.15-1.24.3-.3.12-.58.24-.97.26-.89.03-1.57-.89-2.13-1.7-1.16-1.68-2.05-4.74-.86-6.8a3.3 3.3 0 012.8-1.7c.49 0 .97.18 1.38.35.32.13.6.24.84.24.2 0 .48-.1.8-.24.52-.2 1.14-.44 1.78-.38a3.15 3.15 0 012.46 1.34z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoAppleFilled = vue.defineComponent({
    name: "LogoAppleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-apple-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1G(_objectSpread$1G({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1E, finalProps.value);
    }

  });

  function ownKeys$1F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1F(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1D = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.29 4a2.57 2.57 0 002.57-2.56V1h-.44a2.57 2.57 0 00-2.57 2.57V4h.44zm1.29-1.27c-.26.26-.6.44-.95.5a1.82 1.82 0 011.45-1.45c-.06.35-.24.69-.5.95zM12.7 5.09c.22.18.43.4.63.67a3.04 3.04 0 00.37 5.5l-.05.15a7.28 7.28 0 01-.95 1.84c-.6.86-1.22 1.71-2.2 1.73-.47 0-.78-.13-1.11-.26a2.92 2.92 0 00-2.58 0c-.31.14-.6.26-1.03.28-.95.03-1.66-.93-2.27-1.78-1.23-1.74-2.17-4.91-.9-7.06A3.51 3.51 0 015.56 4.4c.53-.01 1.04.19 1.48.36.34.13.65.25.89.25.22 0 .5-.1.83-.23.53-.2 1.2-.46 1.93-.4a3.6 3.6 0 012 .71zm-2.06.18h-.01c-.4-.03-.8.08-1.24.24a21.05 21.05 0 00-.65.24c-.2.07-.5.16-.8.16-.3 0-.56-.07-.76-.14L6.7 5.6l-.14-.06c-.4-.15-.7-.24-.98-.23-.9 0-1.73.5-2.21 1.31-.48.82-.58 1.9-.37 3.06a7.87 7.87 0 002.12 4.1c.28.26.48.32.62.32.25-.02.41-.08.74-.22l.05-.02a3.9 3.9 0 013.18.02c.33.14.5.2.76.2h.01c.2-.01.4-.1.65-.32.26-.24.52-.58.82-1.02.27-.39.47-.77.61-1.08a3.88 3.88 0 01-1.7-3.23 3.84 3.84 0 011.1-2.74c-.5-.33-1.05-.4-1.33-.42z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoApple = vue.defineComponent({
    name: "LogoAppleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-apple", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1F(_objectSpread$1F({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1D, finalProps.value);
    }

  });

  function ownKeys$1E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1E(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1C = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M14.02 4.43a.11.11 0 01-.1.18H8.31 8.3L8 4.58a3.4 3.4 0 00-3.3 2.56.11.11 0 01-.21.03L2.52 3.76a.11.11 0 010-.12 6.97 6.97 0 019-1.7c1.03.6 1.9 1.47 2.5 2.5z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 10.62a2.62 2.62 0 110-5.24 2.62 2.62 0 010 5.24z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.03 11.33a.11.11 0 00-.12-.05 3.4 3.4 0 01-4-1.84L2.1 4.57a.11.11 0 00-.2 0 7 7 0 005.07 10.35c.04 0 .08-.02.1-.05l1.97-3.42a.11.11 0 000-.12z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.46 5.37h3.95c.05 0 .1.03.1.07a6.97 6.97 0 01-1.53 7.48A6.96 6.96 0 018.08 15a.11.11 0 01-.1-.17l2.81-4.88h.01a3.38 3.38 0 00-.42-4.38.11.11 0 01.08-.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoChromeFilled = vue.defineComponent({
    name: "LogoChromeFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-chrome-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1E(_objectSpread$1E({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1C, finalProps.value);
    }

  });

  function ownKeys$1D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1D(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1B = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.5 1.94a7 7 0 117 12.12 7 7 0 01-7-12.12zm8.95 3.56h-3a3.5 3.5 0 01.63 4.16l-2.49 4.31a6 6 0 004.86-8.47zm-6.02 8.47l1.5-2.6a3.55 3.55 0 01-4.1-1.82l-2.3-4a6 6 0 004.9 8.42zM5 2.8a5.98 5.98 0 00-1.9 1.74l1.49 2.58a3.5 3.5 0 013.05-2.6l.04-.01c.15-.01.3-.02.46-.01h4.73A6 6 0 005 2.8zm2.97 2.7h-.22a2.5 2.5 0 00.45 4.99 2.5 2.5 0 00-.22-5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoChrome = vue.defineComponent({
    name: "LogoChromeIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-chrome", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1D(_objectSpread$1D({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1B, finalProps.value);
    }

  });

  function ownKeys$1C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1C(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1A = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.53 5.59a.5.5 0 00-.21.47v3.88a.5.5 0 00.21.47l6.19 4.23c.17.12.4.12.56 0l6.19-4.23a.5.5 0 00.21-.46v-3.9a.5.5 0 00-.21-.46L8.28 1.36a.5.5 0 00-.56 0L1.53 5.59zm.9.41l5.14-3.52v2.97L4.61 7.5 2.43 6zm6-.55V2.48L13.56 6l-2.18 1.49-2.97-2.04zM3.84 8L2.17 9.15v-2.3L3.85 8zm9.98-1.15v2.3L12.15 8l1.68-1.15zM11.4 8.5L13.57 10l-5.15 3.52v-2.97L11.4 8.5zm-3.82 2.04v2.97L2.43 10l2.18-1.49 2.96 2.04zM10.64 8L8 9.8 5.36 8 8 6.2 10.64 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoCodepen = vue.defineComponent({
    name: "LogoCodepenIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-codepen", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1C(_objectSpread$1C({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1A, finalProps.value);
    }

  });

  function ownKeys$1B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1B(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1a7.1 7.1 0 00-7 7.18c0 3.17 2 5.86 4.79 6.8.35.07.46-.15.46-.34v-1.33c-1.95.43-2.35-.85-2.35-.85-.32-.83-.78-1.05-.78-1.05-.64-.45.05-.44.05-.44.7.05 1.07.74 1.07.74.63 1.1 1.64.78 2.04.6.06-.46.24-.78.44-.96-1.55-.18-3.19-.8-3.19-3.55 0-.78.28-1.42.72-1.92-.07-.19-.3-.92.07-1.9 0 0 .6-.2 1.93.73a6.56 6.56 0 013.5 0c1.34-.93 1.93-.73 1.93-.73.38.99.14 1.72.07 1.9.44.5.72 1.14.72 1.92 0 2.76-1.64 3.37-3.2 3.54.25.23.48.66.48 1.33v1.97c0 .2.11.42.47.35A7.17 7.17 0 0015 8.18 7.09 7.09 0 008 1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoGithubFilled = vue.defineComponent({
    name: "LogoGithubFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-github-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1B(_objectSpread$1B({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1z, finalProps.value);
    }

  });

  function ownKeys$1A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1A(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5.5 14.5v-1.8h-.9c-.73 0-1.32-.6-1.32-1.32 0-.25-.2-.46-.46-.46H2.1v-.85h.73a1.31 1.31 0 011.31 1.31.46.46 0 00.46.46h.91v-.38a2 2 0 01.22-.9 6.12 6.12 0 01-.92-.4l-.02-.01c-.5-.27-.94-.6-1.29-.98-.63-.67-1-1.49-1-2.37 0-.85.34-1.64.92-2.29l-.05-.22c-.2-.96 0-1.96.54-2.78a3.7 3.7 0 012.68.92l.36.31a7.26 7.26 0 012.17.02l.37-.33a3.7 3.7 0 012.68-.92c.54.82.74 1.82.54 2.78l-.07.33c.52.63.82 1.38.82 2.18 0 1.38-.9 2.6-2.28 3.35-.29.15-.6.29-.92.4a2 2 0 01.25.97v2.98h-5zM7.08 3.73l-.46.07-.7-.62a2.7 2.7 0 00-1.43-.66 2.7 2.7 0 00-.15 1.57l.15.7-.33.38c-.45.5-.67 1.06-.67 1.63 0 1.1.9 2.25 2.55 2.81l1.09.37-.52 1.03a1 1 0 00-.11.45v2.04h3v-1.98a1 1 0 00-.12-.49L8.8 10l1.13-.39c1.64-.56 2.52-1.71 2.52-2.8 0-.54-.2-1.06-.59-1.54l-.3-.37.16-.8a2.7 2.7 0 00-.15-1.57 2.7 2.7 0 00-1.43.66l-.72.64-.47-.08a6.25 6.25 0 00-1.87 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoGithub = vue.defineComponent({
    name: "LogoGithubIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-github", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1A(_objectSpread$1A({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1y, finalProps.value);
    }

  });

  function ownKeys$1z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1z(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1x = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.57 9.04h3.4a6.03 6.03 0 00-.82-3.74c.56-1.43.54-2.64-.21-3.36-.71-.68-2.62-.57-4.78.35a6.3 6.3 0 00-6.63 4.58 8.74 8.74 0 013.22-2.58l-.93.88C1.37 8.48.28 12.81 1.45 13.93c.9.85 2.5.7 4.35-.16.87.42 1.84.66 2.87.66a6.31 6.31 0 005.99-4.11h-3.42a2.8 2.8 0 01-2.45 1.4 2.8 2.8 0 01-2.45-1.4A2.6 2.6 0 016 9.05v-.01h5.56zM6 7.44a2.62 2.62 0 012.66-2.42 2.62 2.62 0 012.66 2.42H6.01zm7.9-4.83c.48.47.47 1.33.06 2.4a6.3 6.3 0 00-2.95-2.3c1.3-.54 2.35-.61 2.89-.1zM2.35 13.71c-.62-.59-.43-1.83.36-3.32a6.16 6.16 0 002.7 3.16c-1.38.6-2.5.7-3.06.17z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoIeFilled = vue.defineComponent({
    name: "LogoIeFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-ie-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1z(_objectSpread$1z({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1x, finalProps.value);
    }

  });

  function ownKeys$1y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1y(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1w = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5.34 7.31c.27-.3.56-.62.87-.92h3.61a1.87 1.87 0 00-2.06-1.4c.37-.29.74-.56 1.11-.8a2.8 2.8 0 011.94 2.66v.46H5.34z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.74 15a2.72 2.72 0 01-2-.73A2.72 2.72 0 011 12.26a6.3 6.3 0 01.69-2.62 6.54 6.54 0 017.95-7.95l.33-.15A6.3 6.3 0 0112.26 1c.72 0 1.46.18 2 .73.56.55.75 1.3.74 2.01a6.3 6.3 0 01-.67 2.6 6.54 6.54 0 01.14 2.68l-.06.4H6.2a1.87 1.87 0 003.3.65l.14-.19h4.66l-.27.65a6.53 6.53 0 01-7.7 3.8l-.31.13a6.3 6.3 0 01-2.29.54zm1.3-1.17a6.56 6.56 0 01-2.38-2.08c.1-.34.24-.7.42-1.09a5.6 5.6 0 009.78.15H10.1a2.8 2.8 0 01-4.89-1.86v-.47h8.38c.02-.15.02-.3.02-.47a5.6 5.6 0 00-2.85-4.87c.4-.17.78-.3 1.13-.39.8.6 1.48 1.38 1.94 2.29.37-1.15.32-2.1-.22-2.65-1.28-1.27-4.82.2-7.92 3.3-3.1 3.1-4.57 6.64-3.3 7.92.54.54 1.5.59 2.65.22zm3.24-11.4l-.27-.02a5.6 5.6 0 00-5.59 5.87 18.3 18.3 0 012.61-3.25 18.3 18.3 0 013.25-2.6z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoIe = vue.defineComponent({
    name: "LogoIeIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-ie", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1y(_objectSpread$1y({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1w, finalProps.value);
    }

  });

  function ownKeys$1x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1x(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1v = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.48 9.77c-.13-.4-.3-.87-.47-1.32l-.63-1.57v-.49C12.39 3.7 11.13 1 8 1S3.6 3.7 3.6 6.39l.01.49-.63 1.57c-.17.45-.34.92-.46 1.32-.6 1.91-.4 2.7-.26 2.73.32.03 1.23-1.45 1.23-1.45 0 .86.44 1.98 1.4 2.79-.36.1-.8.28-1.08.48-.25.2-.22.38-.18.46.2.34 3.44.21 4.37.1.93.11 4.16.24 4.36-.1.05-.08.08-.27-.17-.46a3.9 3.9 0 00-1.08-.48c.96-.81 1.4-1.93 1.4-2.79 0 0 .9 1.48 1.22 1.45.15-.02.34-.81-.25-2.73z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoQq = vue.defineComponent({
    name: "LogoQqIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-qq", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1x(_objectSpread$1x({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1v, finalProps.value);
    }

  });

  function ownKeys$1w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1w(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1u = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1 6.55C1 4.2 3.27 2.3 6.06 2.3c2.52 0 4.55 1.55 4.93 3.58h-.21c-2.55 0-4.61 1.73-4.61 3.87 0 .36.06.71.17 1.04a6.24 6.24 0 01-2.08-.24c-.1 0-.19.03-.27.07l-1.1.65a.19.19 0 01-.1.03.17.17 0 01-.17-.17c0-.03 0-.06.02-.1v-.02l.2-.71.03-.15a.34.34 0 00-.12-.39A4 4 0 011 6.55zm2.78-1.36c0 .33.26.6.6.6a.6.6 0 00.6-.6.6.6 0 00-.6-.6.6.6 0 00-.6.6zm3.37 0a.6.6 0 101.2 0 .6.6 0 00-.6-.6.6.6 0 00-.6.6z",
        "fillOpacity": 0.9,
        "fillRule": "evenodd",
        "clipRule": "evenodd"
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 9.75c0 1.07-.57 2.03-1.46 2.68a.28.28 0 00-.1.32l.19.71v.03l.02.08c0 .08-.06.14-.14.14a.16.16 0 01-.08-.03l-.92-.53a.42.42 0 00-.35-.05c-.43.12-.9.2-1.38.2-2.33 0-4.21-1.6-4.21-3.55 0-1.95 1.88-3.54 4.21-3.54S15 7.8 15 9.75zM8.85 8.62a.53.53 0 101.05 0c0-.3-.23-.53-.52-.53-.3 0-.53.24-.53.53zm2.81 0a.53.53 0 101.05 0c0-.3-.23-.53-.52-.53-.3 0-.53.24-.53.53z",
        "fillOpacity": 0.9,
        "fillRule": "evenodd",
        "clipRule": "evenodd"
      }
    }]
  };
  var logoWechat = vue.defineComponent({
    name: "LogoWechatIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-wechat", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1w(_objectSpread$1w({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1u, finalProps.value);
    }

  });

  function ownKeys$1v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1v(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1t = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.25 3.96c.37.38.67.81.9 1.27a4.43 4.43 0 01.44 2.3l-.01-.02a.8.8 0 00-1.02-.15 3.86 3.86 0 010-.16c0-.53-.11-1.05-.35-1.54a3.97 3.97 0 00-.72-1.02A5.01 5.01 0 006.8 3.16a5.02 5.02 0 00-3.68 1.47c-.3.31-.54.65-.72 1.02a3.49 3.49 0 00.25 3.53 4.16 4.16 0 001.03 1.07.43.43 0 01.15.47l-.08.32-.03.1-.05.18c0 .05-.02.09-.03.12l-.01.05-.04.16c0 .04.03.07.07.07l.04-.01 1.07-.63.02-.01h.01a.56.56 0 01.44-.04 5.53 5.53 0 00.86.16l.09.01a5.6 5.6 0 002.29-.22.8.8 0 00.55.84 6.5 6.5 0 01-4.04.14l-1.66.83-.02.01-.01.01a.44.44 0 01-.67-.34v-.02-.02-.03-.02l.01-.05.02-.05.17-1.38c-.38-.34-.8-.83-1.06-1.21a4.52 4.52 0 01-.3-4.47c.22-.46.52-.9.9-1.27A6.07 6.07 0 016.8 2.16a6.07 6.07 0 014.45 1.8z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.35 9.05a.8.8 0 111.37-.62 2.48 2.48 0 00.78 1.36.2.2 0 01-.29.26 2.5 2.5 0 00-1.47-.78.8.8 0 01-.4-.22zM14.76 10.2a.8.8 0 00-1.36.43v.05a2.48 2.48 0 01-.78 1.38.2.2 0 10.3.24l.05-.05a2.48 2.48 0 011.44-.71.8.8 0 00.35-1.35zM10.34 11.47a.2.2 0 00.03.3c.02 0 .04.03.06.05a2.48 2.48 0 01.7 1.43.8.8 0 001.35.36.8.8 0 00-.48-1.38 2.48 2.48 0 01-1.38-.76.2.2 0 00-.28 0zM10.43 10.89a2.48 2.48 0 01.78-1.43.2.2 0 10-.3-.25 2.48 2.48 0 01-1.49.76.8.8 0 101 .91z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoWecom = vue.defineComponent({
    name: "LogoWecomIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-wecom", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1v(_objectSpread$1v({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1t, finalProps.value);
    }

  });

  function ownKeys$1u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1u(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1s = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 2.5h-5v5h5v-5zM13.5 2.5h-5v5h5v-5zM8.5 8.5h5v5h-5v-5zM7.5 8.5h-5v5h5v-5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoWindowsFilled = vue.defineComponent({
    name: "LogoWindowsFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-windows-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1u(_objectSpread$1u({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1s, finalProps.value);
    }

  });

  function ownKeys$1t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1t(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1r = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13 2a1 1 0 011 1v10a1 1 0 01-1 1H3a1 1 0 01-1-1V3a1 1 0 011-1h10zM7.5 3H3v4.5h4.5V3zm1 10H13V8.5H8.5V13zm-1-4.5H3V13h4.5V8.5zm1-1H13V3H8.5v4.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logoWindows = vue.defineComponent({
    name: "LogoWindowsIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logo-windows", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1t(_objectSpread$1t({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1r, finalProps.value);
    }

  });

  function ownKeys$1s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1s(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9 3v2h1V2.5a.5.5 0 00-.5-.5h-8a.5.5 0 00-.5.5v11c0 .28.22.5.5.5h8a.5.5 0 00.5-.5V11H9v2H2V3h7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.23 5.25l2.25 2.25H6v1h7.48l-2.25 2.25.7.7 3.1-3.1a.5.5 0 000-.7l-3.1-3.1-.7.7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var logout = vue.defineComponent({
    name: "LogoutIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-logout", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1s(_objectSpread$1s({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1q, finalProps.value);
    }

  });

  function ownKeys$1r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1r(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1p = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.5 4a1 1 0 011-1h11a1 1 0 011 1v8a1 1 0 01-1 1h-11a1 1 0 01-1-1V4zm11.6 0H2.9L8 7.4 13.1 4zm-10.6.93V12h11V4.93L8 8.6 2.5 4.93z",
        "fillOpacity": 0.9
      }
    }]
  };
  var mail = vue.defineComponent({
    name: "MailIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-mail", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1r(_objectSpread$1r({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1p, finalProps.value);
    }

  });

  function ownKeys$1q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1q(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1o = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3.99L14 4V3L2 2.99v1zM7.5 8.5H14v-1H7.5v1zM2 12.99L14 13v-1l-12-.01v1zM5.97 7.6c.26.2.26.6 0 .8L2.8 10.76a.5.5 0 01-.8-.4V5.62a.5.5 0 01.8-.4l3.17 2.37zM3 6.61v2.75l1.83-1.38L3 6.62z",
        "fillOpacity": 0.9
      }
    }]
  };
  var menuFold = vue.defineComponent({
    name: "MenuFoldIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-menu-fold", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1q(_objectSpread$1q({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1o, finalProps.value);
    }

  });

  function ownKeys$1p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1p(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1n = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M14 12.01L2 12v1l12 .01v-1zM8.5 7.5H2v1h6.5v-1zM14 3.01L2 3v1l12 .01v-1zM10.03 8.4a.5.5 0 010-.8l3.17-2.37a.5.5 0 01.8.4v4.75a.5.5 0 01-.8.4l-3.17-2.37zm2.97.98V6.63l-1.83 1.38L13 9.38z",
        "fillOpacity": 0.9
      }
    }]
  };
  var menuUnfold = vue.defineComponent({
    name: "MenuUnfoldIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-menu-unfold", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1p(_objectSpread$1p({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1n, finalProps.value);
    }

  });

  function ownKeys$1o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1o(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1m = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zm3.5-6.5h-7v-1h7v1z",
        "fillOpacity": 0.9,
        "fillRule": "evenodd",
        "clipRule": "evenodd"
      }
    }]
  };
  var minusCircleFilled = vue.defineComponent({
    name: "MinusCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-minus-circle-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1o(_objectSpread$1o({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1m, finalProps.value);
    }

  });

  function ownKeys$1n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1n(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1l = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.5 8.5h7v-1h-7v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zm-1 0A6 6 0 102 8a6 6 0 0012 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var minusCircle = vue.defineComponent({
    name: "MinusCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-minus-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1n(_objectSpread$1n({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1l, finalProps.value);
    }

  });

  function ownKeys$1m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1m(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1k = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5 8.5h6v-1H5v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var minusRectangle = vue.defineComponent({
    name: "MinusRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-minus-rectangle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1m(_objectSpread$1m({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1k, finalProps.value);
    }

  });

  function ownKeys$1l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1l(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1j = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 1h1v14h-1V1zM14.72 12.44a.5.5 0 01-.35.54c-.07.02-.17.02-.38.02h-3.34l-.27-.01a.5.5 0 01-.37-.37l-.01-.27V5c0-.53 0-.8.04-.89a.5.5 0 01.8-.17c.07.07.18.3.4.8l3.34 7.34c.09.19.13.28.14.36zM11 12h2.45L11 6.62V12zM1.63 12.98c.07.02.17.02.38.02h3.34l.27-.01a.5.5 0 00.37-.37l.01-.27V5c0-.53 0-.8-.04-.89a.5.5 0 00-.8-.17c-.07.07-.18.3-.4.8l-3.34 7.34c-.09.19-.13.28-.14.36a.5.5 0 00.35.54zM5 6.62V12H2.55L5 6.62z",
        "fillOpacity": 0.9
      }
    }]
  };
  var mirror = vue.defineComponent({
    name: "MirrorIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-mirror", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1l(_objectSpread$1l({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1j, finalProps.value);
    }

  });

  function ownKeys$1k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1k(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1i = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.5 13h3v-1h-3v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5 1.5a1 1 0 00-1 1V14a1 1 0 001 1h6a1 1 0 001-1V2.5a1 1 0 00-1-1H5zm6 1V14H5V2.5h6zM2 4v9h1V4H2zM13 4v9h1V4h-1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var mobileVibrate = vue.defineComponent({
    name: "MobileVibrateIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-mobile-vibrate", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1k(_objectSpread$1k({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1i, finalProps.value);
    }

  });

  function ownKeys$1j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1j(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1h = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.5 13h3v-1h-3v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 2.5a1 1 0 011-1h7a1 1 0 011 1V14a1 1 0 01-1 1h-7a1 1 0 01-1-1V2.5zm1 0V14h7V2.5h-7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var mobile = vue.defineComponent({
    name: "MobileIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-mobile", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1j(_objectSpread$1j({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1h, finalProps.value);
    }

  });

  function ownKeys$1i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1i(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1g = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.5 7.5h-2v1h2v1h-2V12h-1V9.5h-2v-1h2v-1h-2v-1h1.46L5.61 4.81l.78-.62L8 6.2l1.61-2.01.78.62L9.04 6.5h1.46v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zm-1 0A6 6 0 112 8a6 6 0 0112 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var moneyCircle = vue.defineComponent({
    name: "MoneyCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-money-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1i(_objectSpread$1i({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1g, finalProps.value);
    }

  });

  function ownKeys$1h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1h(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1f = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 4a1 1 0 100-2 1 1 0 000 2zM8 9a1 1 0 100-2 1 1 0 000 2zM9 13a1 1 0 11-2 0 1 1 0 012 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var more = vue.defineComponent({
    name: "MoreIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-more", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1h(_objectSpread$1h({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1f, finalProps.value);
    }

  });

  function ownKeys$1g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1g(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1e = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5 1a1 1 0 100 2 1 1 0 000-2zM11 1a1 1 0 100 2 1 1 0 000-2zM4 6a1 1 0 112 0 1 1 0 01-2 0zM11 5a1 1 0 100 2 1 1 0 000-2zM4 10a1 1 0 112 0 1 1 0 01-2 0zM5 13a1 1 0 100 2 1 1 0 000-2zM10 10a1 1 0 112 0 1 1 0 01-2 0zM11 13a1 1 0 100 2 1 1 0 000-2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var move = vue.defineComponent({
    name: "MoveIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-move", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1g(_objectSpread$1g({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1e, finalProps.value);
    }

  });

  function ownKeys$1f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1f(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1d = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 2h1v12h-1V2zM10.85 7.58c.3.2.3.64 0 .84L3.77 13a.5.5 0 01-.77-.42V3.42c0-.4.44-.64.77-.42l7.08 4.58zM4 4.34v7.32L9.66 8 4 4.34z",
        "fillOpacity": 0.9
      }
    }]
  };
  var next = vue.defineComponent({
    name: "NextIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-next", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1f(_objectSpread$1f({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1d, finalProps.value);
    }

  });

  function ownKeys$1e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1e(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1c = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.5 2.03V1h-1v1.03a4.5 4.5 0 00-4 4.47V11l-.9 1.2a.5.5 0 00.4.8h2.55a2.5 2.5 0 004.9 0H13a.5.5 0 00.4-.8l-.9-1.2V6.5a4.5 4.5 0 00-4-4.47z",
        "fillOpacity": 0.9
      }
    }]
  };
  var notificationFilled = vue.defineComponent({
    name: "NotificationFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-notification-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1e(_objectSpread$1e({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1c, finalProps.value);
    }

  });

  function ownKeys$1d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1d(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1b = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.5 2.03V1h-1v1.03a4.5 4.5 0 00-4 4.47V11l-.9 1.2a.5.5 0 00.4.8h2.55a2.5 2.5 0 004.9 0H13a.5.5 0 00.4-.8l-.9-1.2V6.5a4.5 4.5 0 00-4-4.47zm-4 9.3V6.5a3.5 3.5 0 117 0v4.83l.5.67H4l.5-.67zM8 14a1.5 1.5 0 01-1.41-1H9.4c-.2.58-.76 1-1.41 1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var notification = vue.defineComponent({
    name: "NotificationIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-notification", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1d(_objectSpread$1d({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1b, finalProps.value);
    }

  });

  function ownKeys$1c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1c(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1a = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 8.5V15h1V8.5h4.66l-1.7 1.7.71.7 2.55-2.55a.5.5 0 000-.7L12.17 5.1l-.7.7 1.69 1.7H8.5V1h-1v6.5H2.85l1.69-1.7-.71-.7-2.54 2.55a.5.5 0 000 .7l2.54 2.55.7-.7-1.68-1.7H7.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var orderAdjustmentColumn = vue.defineComponent({
    name: "OrderAdjustmentColumnIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-order-adjustment-column", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1c(_objectSpread$1c({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1a, finalProps.value);
    }

  });

  function ownKeys$1b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1b(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$19 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 13.5V3.7l2.15 2.15.7-.7L11.9 2.2a.53.53 0 00-.9.37V13.5h1zM9.5 13.5H2v-1h7.5v1zM2 8.5h7.5v-1H2v1zM9.5 3.5H2v-1h7.5v1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var orderAscending = vue.defineComponent({
    name: "OrderAscendingIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-order-ascending", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1b(_objectSpread$1b({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$19, finalProps.value);
    }

  });

  function ownKeys$1a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1a(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$18 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.5 2.5H2v1h7.5v-1zM12 2.5v9.8l2.15-2.15.7.7-2.95 2.95c-.33.34-.9.1-.9-.37V2.5h1zM2 7.5h7.5v1H2v-1zM9.5 12.5H2v1h7.5v-1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var orderDescending = vue.defineComponent({
    name: "OrderDescendingIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-order-descending", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$1a(_objectSpread$1a({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$18, finalProps.value);
    }

  });

  function ownKeys$19(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$19(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$19(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$19(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$17 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.4 4.46l-.91-.92L7.03 8l4.46 4.46.92-.92L8.86 8l3.55-3.54zM4.8 4v8h1.3V4H4.8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var pageFirst = vue.defineComponent({
    name: "PageFirstIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-page-first", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$19(_objectSpread$19({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$17, finalProps.value);
    }

  });

  function ownKeys$18(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$18(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$18(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$18(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$16 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.6 11.54l.91.92L8.97 8 4.51 3.54l-.92.92L7.14 8l-3.55 3.54zm7.6.46V4H9.9v8h1.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var pageLast = vue.defineComponent({
    name: "PageLastIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-page-last", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$18(_objectSpread$18({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$16, finalProps.value);
    }

  });

  function ownKeys$17(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$17(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$17(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$17(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$15 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zM6 5v6h1V5H6zm4 0H9v6h1V5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var pauseCircleFilled = vue.defineComponent({
    name: "PauseCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-pause-circle-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$17(_objectSpread$17({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$15, finalProps.value);
    }

  });

  function ownKeys$16(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$16(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$16(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$16(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$14 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11 8a3 3 0 11-6 0 3 3 0 016 0zm-1 0a2 2 0 10-4 0 2 2 0 004 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.05 2a.6.6 0 00-.5.27L4.73 3.5H2.01a.51.51 0 00-.51.51v8.48c0 .28.23.51.51.51h11.98c.28 0 .51-.23.51-.51V4.01a.51.51 0 00-.51-.51h-2.72l-.82-1.23a.6.6 0 00-.5-.27h-3.9zm.22 1h3.46l1 1.5h2.77V12h-11V4.5h2.77l1-1.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var photo = vue.defineComponent({
    name: "PhotoIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-photo", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$16(_objectSpread$16({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$14, finalProps.value);
    }

  });

  function ownKeys$15(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$15(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$15(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$15(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$13 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.52 1.34a.6.6 0 00-.81-.04L7.66 4.72l-.77-.77a.6.6 0 00-.85 0l-2.1 2.1a.6.6 0 000 .85l2.22 2.23-4.1 4.1.7.71 4.11-4.1 2.23 2.22a.6.6 0 00.85 0l2.1-2.1a.6.6 0 000-.85l-.77-.77 3.42-4.05a.6.6 0 00-.04-.8l-2.14-2.15z",
        "fillOpacity": 0.9
      }
    }]
  };
  var pinFilled = vue.defineComponent({
    name: "PinFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-pin-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$15(_objectSpread$15({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$13, finalProps.value);
    }

  });

  function ownKeys$14(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$14(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$14(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$14(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$12 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.52 1.34a.6.6 0 00-.81-.04L7.66 4.72l-.77-.77a.6.6 0 00-.85 0l-2.1 2.1a.6.6 0 000 .85l2.22 2.23-4.1 4.1.7.71 4.11-4.1 2.23 2.22a.6.6 0 00.85 0l2.1-2.1a.6.6 0 000-.85l-.77-.77 3.42-4.05a.6.6 0 00-.04-.8l-2.14-2.15zm-.45.97l1.62 1.62L9.92 8.4l1.14 1.13-1.54 1.54-4.6-4.6 1.55-1.53L7.6 6.08l4.47-3.77z",
        "fillOpacity": 0.9
      }
    }]
  };
  var pin = vue.defineComponent({
    name: "PinIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-pin", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$14(_objectSpread$14({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$12, finalProps.value);
    }

  });

  function ownKeys$13(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$13(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$13(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$13(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$11 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zm-4.02.23L6.51 10.8a.26.26 0 01-.4-.23V5.42c0-.2.22-.33.4-.23l4.47 2.58c.18.1.18.36 0 .46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var playCircleFilled = vue.defineComponent({
    name: "PlayCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-play-circle-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$13(_objectSpread$13({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$11, finalProps.value);
    }

  });

  function ownKeys$12(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$12(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$12(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$12(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$10 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "fill": "currentColor",
        "opacity": 0.9,
        "fillOpacity": 0.9
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "d": "M11.55 7.74c.2.12.2.4 0 .52l-5.1 2.94a.3.3 0 01-.45-.26V5.06a.3.3 0 01.45-.26l5.1 2.94zM7 6.27v3.46L10 8 7 6.27z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "d": "M8 1a7 7 0 110 14A7 7 0 018 1zm0 1a6 6 0 100 12A6 6 0 008 2z"
        }
      }]
    }]
  };
  var playCircleStroke = vue.defineComponent({
    name: "PlayCircleStrokeIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-play-circle-stroke", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$12(_objectSpread$12({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$10, finalProps.value);
    }

  });

  function ownKeys$11(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$11(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$11(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$11(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$$ = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "fill": "currentColor",
        "opacity": 0.9,
        "fillOpacity": 0.9
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "d": "M11.55 7.74c.2.12.2.4 0 .52l-5.1 2.94a.3.3 0 01-.45-.26V5.06a.3.3 0 01.45-.26l5.1 2.94z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "d": "M8 1a7 7 0 110 14A7 7 0 018 1zm0 1a6 6 0 100 12A6 6 0 008 2z"
        }
      }]
    }]
  };
  var playCircle = vue.defineComponent({
    name: "PlayCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-play-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$11(_objectSpread$11({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$$, finalProps.value);
    }

  });

  function ownKeys$10(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$10(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$10(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$10(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$_ = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.55 7.74c.2.12.2.4 0 .52l-5.1 2.94a.3.3 0 01-.45-.26V5.06a.3.3 0 01.45-.26l5.1 2.94z",
        "fillOpacity": 0.9
      }
    }]
  };
  var play = vue.defineComponent({
    name: "PlayIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-play", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$10(_objectSpread$10({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$_, finalProps.value);
    }

  });

  function ownKeys$$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$$(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$Z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 1v7h1V1h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.5 8.5a6.5 6.5 0 013.47-5.75l.5.87a5.5 5.5 0 105.06 0l.5-.87A6.5 6.5 0 111.5 8.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var poweroff = vue.defineComponent({
    name: "PoweroffIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-poweroff", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$$(_objectSpread$$({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$Z, finalProps.value);
    }

  });

  function ownKeys$_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$_(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$Y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 1.5V5h1V1.5h-1zM6.23 5.53L2.7 1.99l-.71.7 3.54 3.54.7-.7zm3.54 0l3.53-3.54.71.7-3.54 3.54-.7-.7zM9 8a1 1 0 01-1.87.5H1.5v-1h5.63A1 1 0 019 8zM5.53 9.77L1.99 13.3l.7.71 3.54-3.54-.7-.7zm4.94 0l3.54 3.53-.7.71-3.54-3.54.7-.7zM14.5 7.5H11v1h3.5v-1zm-7 7V11h1v3.5h-1z",
        "opacity": 0.9
      }
    }]
  };
  var preciseMonitor = vue.defineComponent({
    name: "PreciseMonitorIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-precise-monitor", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$_(_objectSpread$_({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$Y, finalProps.value);
    }

  });

  function ownKeys$Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Z(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$X = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 14H3V2h1v12zM5.15 8.42a.5.5 0 010-.84L12.23 3a.5.5 0 01.77.42v9.16a.5.5 0 01-.77.42L5.15 8.42zM12 11.66V4.34L6.34 8 12 11.66z",
        "fillOpacity": 0.9
      }
    }]
  };
  var previous = vue.defineComponent({
    name: "PreviousIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-previous", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$Z(_objectSpread$Z({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$X, finalProps.value);
    }

  });

  function ownKeys$Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Y(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$W = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 2v2H3a1 1 0 00-1 1v5a1 1 0 001 1h1v3h8v-3h1a1 1 0 001-1V5a1 1 0 00-1-1h-1V2H4zm7 2H5V3h6v1zM3 5h10v5h-1V8H4v2H3V5zm2 8V9h6v4H5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var print = vue.defineComponent({
    name: "PrintIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-print", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$Y(_objectSpread$Y({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$W, finalProps.value);
    }

  });

  function ownKeys$X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$X(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$V = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 4H4v2h2V4z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.5 2a.5.5 0 00-.5.5v5c0 .28.22.5.5.5h5a.5.5 0 00.5-.5v-5a.5.5 0 00-.5-.5h-5zM3 3h4v4H3V3zM10.5 2a.5.5 0 00-.5.5v3c0 .28.22.5.5.5h3a.5.5 0 00.5-.5v-3a.5.5 0 00-.5-.5h-3zm.5 3V3h2v2h-2zM10 10.5c0-.28.22-.5.5-.5h3c.28 0 .5.22.5.5v3a.5.5 0 01-.5.5h-3a.5.5 0 01-.5-.5v-3zm1 2.5h2v-2h-2v2zM2.5 10a.5.5 0 00-.5.5v3c0 .28.22.5.5.5h3a.5.5 0 00.5-.5v-3a.5.5 0 00-.5-.5h-3zm.5 1h2v2H3v-2zM14 7.5h-4v1h4v-1zM8.5 11v3h-1v-3h1zM8.5 10V9h-1v1h1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var qrcode = vue.defineComponent({
    name: "QrcodeIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-qrcode", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$X(_objectSpread$X({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$V, finalProps.value);
    }

  });

  function ownKeys$W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$W(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$U = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 3h9v9h1V3a1 1 0 00-1-1H4v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.58 9.42v2.91h1V9.42h2.75v-1H7.58V5.67h-1v2.75H3.67v1h2.91z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 13a1 1 0 001 1h8a1 1 0 001-1V5a1 1 0 00-1-1H3a1 1 0 00-1 1v8zm1-8h8v8H3V5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var queue = vue.defineComponent({
    name: "QueueIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-queue", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$W(_objectSpread$W({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$U, finalProps.value);
    }

  });

  function ownKeys$V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$V(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$T = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1V3h10v10H3z",
        "fillOpacity": 0.9,
        "fillRule": "evenodd",
        "clipRule": "evenodd"
      }
    }]
  };
  var rectangle = vue.defineComponent({
    name: "RectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-rectangle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$V(_objectSpread$V({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$T, finalProps.value);
    }

  });

  function ownKeys$U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$U(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$S = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 2.71c2.9 0 5.25 2.36 5.25 5.29h.96a6.2 6.2 0 00-11.5-3.28V2.64h-.96v3.1c0 .29.22.5.5.5h3.09v-.96H3.49A5.25 5.25 0 018 2.71zM1.79 8h.96a5.25 5.25 0 009.76 2.71h-1.85v-.96h3.09c.28 0 .5.22.5.5v3.1h-.96v-2.07A6.2 6.2 0 011.8 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var refresh = vue.defineComponent({
    name: "RefreshIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-refresh", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$U(_objectSpread$U({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$S, finalProps.value);
    }

  });

  function ownKeys$T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$T(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$R = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5.5 5.5v-3a1 1 0 011-1h7a1 1 0 011 1v7a1 1 0 01-1 1h-3v3a1 1 0 01-1 1h-7a1 1 0 01-1-1v-7a1 1 0 011-1h3zm1-3h7v7h-3v-3a1 1 0 00-1-1h-3v-3zm3 8v3h-7v-7h3v3a1 1 0 001 1h3zm0-1h-3v-3h3v3z",
        "fillOpacity": 0.9,
        "fillRule": "evenodd",
        "clipRule": "evenodd"
      }
    }]
  };
  var relativity = vue.defineComponent({
    name: "RelativityIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-relativity", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$T(_objectSpread$T({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$R, finalProps.value);
    }

  });

  function ownKeys$S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$S(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$Q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 7.35h9v1.3h-9v-1.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var remove = vue.defineComponent({
    name: "RemoveIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-remove", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$S(_objectSpread$S({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$Q, finalProps.value);
    }

  });

  function ownKeys$R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$R(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$P = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.2 5l1.65-1.65-.7-.7-2.5 2.5a.5.5 0 000 .7l2.5 2.5.7-.7L4.21 6H10a3 3 0 010 6H5v1h5a4 4 0 100-8H4.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var rollback = vue.defineComponent({
    name: "RollbackIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-rollback", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$R(_objectSpread$R({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$P, finalProps.value);
    }

  });

  function ownKeys$Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Q(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$O = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.09 5l-1.65-1.65.7-.7 2.5 2.5c.2.2.2.5 0 .7l-2.5 2.5-.7-.7L12.09 6h-5.8a3 3 0 100 6h5v1h-5a4 4 0 110-8h5.8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var rollfront = vue.defineComponent({
    name: "RollfrontIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-rollfront", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$Q(_objectSpread$Q({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$O, finalProps.value);
    }

  });

  function ownKeys$P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$P(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$N = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "fill": "currentColor",
        "opacity": 0.9,
        "fillOpacity": 0.9
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "d": "M4.5 5h7v1h-7V5zM9 7.5H4.5v1H9v-1z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "d": "M3 2a1 1 0 00-1 1v10a1 1 0 001 1h10a1 1 0 001-1V3a1 1 0 00-1-1H3zm10 1v10H3V3h10z"
        }
      }]
    }]
  };
  var rootList = vue.defineComponent({
    name: "RootListIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-root-list", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$P(_objectSpread$P({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$N, finalProps.value);
    }

  });

  function ownKeys$O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$O(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$M = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 2h1v6.08A6 6 0 017.92 13H14v1H3a1 1 0 01-1-1V2zm4.9 11A5 5 0 003 9.1V13h3.9z",
        "fillOpacity": 0.9
      }
    }]
  };
  var rotation = vue.defineComponent({
    name: "RotationIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-rotation", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$O(_objectSpread$O({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$M, finalProps.value);
    }

  });

  function ownKeys$N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$N(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$L = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 11.5a3.5 3.5 0 110-7 3.5 3.5 0 010 7zM8 13A5 5 0 108 3a5 5 0 000 10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var round = vue.defineComponent({
    name: "RoundIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-round", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$N(_objectSpread$N({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$L, finalProps.value);
    }

  });

  function ownKeys$M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$M(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$K = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11 2l3 3v8a1 1 0 01-1 1H3a1 1 0 01-1-1V3a1 1 0 011-1h8zm-1 1H6v1.5h4V3zm1 .41V5.5H5V3H3v10h2V8h6v5h2V5.41l-2-2zM10 13V9H6v4h4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var save = vue.defineComponent({
    name: "SaveIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-save", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$M(_objectSpread$M({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$K, finalProps.value);
    }

  });

  function ownKeys$L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$L(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$J = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 3.5H4v3H3v-3a1 1 0 011-1h8a1 1 0 011 1v3h-1v-3zM3 9.5h1v3h8v-3h1v3a1 1 0 01-1 1H4a1 1 0 01-1-1v-3zM14 7.5H2v1h12v-1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var scan = vue.defineComponent({
    name: "ScanIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-scan", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$L(_objectSpread$L({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$J, finalProps.value);
    }

  });

  function ownKeys$K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$K(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$I = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.71-3.54-3.53zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var search = vue.defineComponent({
    name: "SearchIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-search", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$K(_objectSpread$K({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$I, finalProps.value);
    }

  });

  function ownKeys$J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$J(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$H = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.39 9.93l3.57-3.58-.7-.7L7.39 8.5 5.74 6.87l-.7.7 2.35 2.36z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.5 2v7c0 1.42.74 2.73 1.96 3.46L8 14.58l3.54-2.12A4.03 4.03 0 0013.5 9V2h-11zm1 7V3h9v6c0 1.07-.56 2.05-1.47 2.6L8 13.42 4.97 11.6A3.03 3.03 0 013.5 9z",
        "fillOpacity": 0.9
      }
    }]
  };
  var secured = vue.defineComponent({
    name: "SecuredIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-secured", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$J(_objectSpread$J({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$H, finalProps.value);
    }

  });

  function ownKeys$I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$I(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$G = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7 5.25H4v-1h3v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.5 2.5c0-.28.22-.5.5-.5h12c.28 0 .5.22.5.5V7a.5.5 0 01-.5.5H2a.5.5 0 01-.5-.5V2.5zm1 4h11V3h-11v3.5zM4 11.75h3v-1H4v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.5 9c0-.28.23-.5.5-.5h12c.28 0 .5.22.5.5v4.5a.5.5 0 01-.5.5H2a.5.5 0 01-.5-.5V9zm1 4h11V9.5h-11V13z",
        "fillOpacity": 0.9
      }
    }]
  };
  var server = vue.defineComponent({
    name: "ServerIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-server", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$I(_objectSpread$I({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$G, finalProps.value);
    }

  });

  function ownKeys$H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$H(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$F = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.52 6.37a5.5 5.5 0 0110.98.13v4c0 .05 0 .1-.02.15A4.5 4.5 0 019 14.7H8v-1h1a3.5 3.5 0 003.4-2.7h-1.9a.5.5 0 01-.5-.5v-4c0-.28.22-.5.5-.5h1.93a4.5 4.5 0 00-8.86 0H5.5c.28 0 .5.22.5.5v4a.5.5 0 01-.5.5H3a.5.5 0 01-.5-.5v-4c0-.04 0-.09.02-.13zM12.5 7H11v3h1.5V7zm-9 0v3H5V7H3.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var service = vue.defineComponent({
    name: "ServiceIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-service", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$H(_objectSpread$H({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$F, finalProps.value);
    }

  });

  function ownKeys$G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$G(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$E = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11 8a3 3 0 11-6 0 3 3 0 016 0zm-1 0a2 2 0 10-4 0 2 2 0 004 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1.25l6.06 3.38v6.75L8 14.75l-6.06-3.38V4.63L8 1.25zM2.94 5.21v5.58L8 13.6l5.06-2.82V5.2L8 2.4 2.94 5.21z",
        "fillOpacity": 0.9
      }
    }]
  };
  var setting = vue.defineComponent({
    name: "SettingIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-setting", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$G(_objectSpread$G({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$E, finalProps.value);
    }

  });

  function ownKeys$F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$F(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$D = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.93 5.36a2.31 2.31 0 004.02-1.57 2.32 2.32 0 10-4.52.7L6.07 6.45a2.31 2.31 0 00-4.02 1.58A2.32 2.32 0 006.07 9.6l3.36 1.96a2.32 2.32 0 10.5-.87L6.57 8.73a2.32 2.32 0 000-1.41l3.36-1.96zm1.7-2.9a1.32 1.32 0 110 2.64 1.32 1.32 0 010-2.63zM5.5 7.35a.5.5 0 00.03.05 1.31 1.31 0 01-.03 1.33 1.32 1.32 0 110-1.38zm4.83 4.93c0-.22.05-.43.14-.6a.52.52 0 00.07-.13 1.32 1.32 0 11-.21.73z",
        "fillOpacity": 0.9
      }
    }]
  };
  var share = vue.defineComponent({
    name: "ShareIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-share", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$F(_objectSpread$F({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$D, finalProps.value);
    }

  });

  function ownKeys$E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$E(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$C = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1a2.5 2.5 0 00-2.5 2.5V5h-2a.5.5 0 00-.5.5v9c0 .28.22.5.5.5h9a.5.5 0 00.5-.5v-9a.5.5 0 00-.5-.5h-2V3.5A2.5 2.5 0 008 1zm1.5 5v2h1V6H12v8H4V6h1.5v2h1V6h3zm0-1h-3V3.5a1.5 1.5 0 113 0V5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var shop = vue.defineComponent({
    name: "ShopIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-shop", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$E(_objectSpread$E({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$C, finalProps.value);
    }

  });

  function ownKeys$D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$D(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$B = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.07 13.81l7-12.12.86.5-7 12.12-.86-.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var slash = vue.defineComponent({
    name: "SlashIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-slash", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$D(_objectSpread$D({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$B, finalProps.value);
    }

  });

  function ownKeys$C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$C(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$A = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 11l4.24 2.55a.5.5 0 00.76-.43V2.88a.5.5 0 00-.76-.43L4 5H2.1a.6.6 0 00-.6.6v4.8c0 .33.27.6.6.6H4zm1-5.43l3-1.8v8.46l-3-1.8V5.57zM4 10H2.5V6H4v4zM13.52 5.73a6 6 0 00-1.4-1.95l.68-.73c.7.65 1.25 1.42 1.63 2.27a6.6 6.6 0 01-1.63 7.63l-.68-.73a6 6 0 001.4-1.95 5.6 5.6 0 000-4.54z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.5 8c0-.87-.36-1.75-1.07-2.45l.7-.72c.9.88 1.37 2.02 1.37 3.17 0 1.16-.48 2.29-1.38 3.17l-.7-.72A3.44 3.44 0 0011.5 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var sound = vue.defineComponent({
    name: "SoundIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-sound", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$C(_objectSpread$C({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$A, finalProps.value);
    }

  });

  function ownKeys$B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$B(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.6 1.82a.45.45 0 01.8 0l1.8 3.65 4.03.58c.37.05.52.5.25.77l-2.91 2.84.69 4a.45.45 0 01-.66.48L8 12.25l-3.6 1.9a.45.45 0 01-.65-.48l.68-4.01-2.9-2.84a.45.45 0 01.24-.77l4.03-.58 1.8-3.65z",
        "fillOpacity": 0.9
      }
    }]
  };
  var starFilled = vue.defineComponent({
    name: "StarFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-star-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$B(_objectSpread$B({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$z, finalProps.value);
    }

  });

  function ownKeys$A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$A(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.54 6.38L8 3.26 6.46 6.38l-3.44.5L5.5 9.31l-.59 3.43L8 11.12l3.08 1.62-.59-3.43L13 6.88l-3.45-.5zm5-.29a.3.3 0 01.16.52l-3.13 3.05.74 4.3a.3.3 0 01-.44.32L8 12.25l-3.87 2.03a.3.3 0 01-.43-.31l.73-4.31L1.3 6.6a.3.3 0 01.17-.52l4.33-.62 1.93-3.92a.3.3 0 01.54 0l1.94 3.92 4.32.62z",
        "fillOpacity": 0.9
      }
    }]
  };
  var star = vue.defineComponent({
    name: "StarIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-star", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$A(_objectSpread$A({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$y, finalProps.value);
    }

  });

  function ownKeys$z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$z(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$x = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5.5 5.5h5v5h-5v-5z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1a7 7 0 100 14A7 7 0 008 1zm0 1a6 6 0 110 12A6 6 0 018 2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var stopCircle1 = vue.defineComponent({
    name: "StopCircle1Icon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-stop-circle-1", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$z(_objectSpread$z({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$x, finalProps.value);
    }

  });

  function ownKeys$y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$y(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$w = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.11 2.18a7 7 0 117.78 11.64A7 7 0 014.1 2.18zM5.5 5.5v5h5v-5h-5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var stopCircleFilled = vue.defineComponent({
    name: "StopCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-stop-circle-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$y(_objectSpread$y({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$w, finalProps.value);
    }

  });

  function ownKeys$x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$x(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$v = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7 5H6v6h1V5zM10 5H9v6h1V5z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.11 2.18a7 7 0 117.78 11.64A7 7 0 014.1 2.18zm7.22.83A6 6 0 104.67 13 6 6 0 0011.33 3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var stopCircle = vue.defineComponent({
    name: "StopCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-stop-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$x(_objectSpread$x({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$v, finalProps.value);
    }

  });

  function ownKeys$w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$w(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$u = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7 5H6v6h1V5zM10 5H9v6h1V5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var stop = vue.defineComponent({
    name: "StopIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-stop", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$w(_objectSpread$w({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$u, finalProps.value);
    }

  });

  function ownKeys$v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$v(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$t = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.2 9H15v1H2.07a.53.53 0 01-.37-.9l3.95-3.95.7.7L3.21 9z",
        "fillOpacity": 0.9
      }
    }]
  };
  var swapLeft = vue.defineComponent({
    name: "SwapLeftIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-swap-left", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$v(_objectSpread$v({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$t, finalProps.value);
    }

  });

  function ownKeys$u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$u(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$s = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.8 9H1v1h12.93c.47 0 .7-.57.37-.9l-3.95-3.95-.7.7L12.79 9z",
        "fillOpacity": 0.9
      }
    }]
  };
  var swapRight = vue.defineComponent({
    name: "SwapRightIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-swap-right", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$u(_objectSpread$u({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$s, finalProps.value);
    }

  });

  function ownKeys$t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$t(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$r = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.25 6h11.76L9.16 2.25l.7-.71 4.67 4.55c.34.33.1.91-.37.91H1.25V6zM14.75 10H3.02l3.81 3.6-.69.73-4.67-4.41A.53.53 0 011.84 9h12.91v1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var swap = vue.defineComponent({
    name: "SwapIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-swap", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$t(_objectSpread$t({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$r, finalProps.value);
    }

  });

  function ownKeys$s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$s(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 9.77h3.22a1 1 0 00.97-1.24l-1.5-6a1 1 0 00-.97-.76H3a1 1 0 00-1 1v5a1 1 0 001 1h2l2 5h2a1 1 0 001-1v-3zm-4-1.2v-5.8h5.72l1.5 6H9v4H7.68L6 8.57zm-1-.8H3v-5h2v5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var thumbDown = vue.defineComponent({
    name: "ThumbDownIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-thumb-down", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$s(_objectSpread$s({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$q, finalProps.value);
    }

  });

  function ownKeys$r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$r(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$p = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 6h3.22a1 1 0 01.97 1.24l-1.5 6a1 1 0 01-.97.76H3a1 1 0 01-1-1V8a1 1 0 011-1h2l2-5h2a1 1 0 011 1v3zM6 7.2V13h5.72l1.5-6H9V3H7.68L6 7.2zM5 8H3v5h2V8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var thumbUp = vue.defineComponent({
    name: "ThumbUpIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-thumb-up", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$r(_objectSpread$r({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$p, finalProps.value);
    }

  });

  function ownKeys$q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$q(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$o = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.5 5h1v2.97l2.85 2.86-.7.7L7.5 8.4V5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var timeFilled = vue.defineComponent({
    name: "TimeFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-time-filled", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$q(_objectSpread$q({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$o, finalProps.value);
    }

  });

  function ownKeys$p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$p(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$n = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 4v4.39L10 11l.7-.7-2.2-2.33V4h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zm-1 0A6 6 0 102 8a6 6 0 0012 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var time = vue.defineComponent({
    name: "TimeIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-time", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$p(_objectSpread$p({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$n, finalProps.value);
    }

  });

  function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$o(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$m = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1c-1.38 0-2.63.55-3.53 1.47a4.96 4.96 0 000 7.06c.3.32.65.58 1.03.8V12a1 1 0 001 1h3a1 1 0 001-1v-1.67A4.96 4.96 0 0013 6a5 5 0 00-5-5zM5.18 3.17a4 4 0 115.65 5.65v.01c-.3.3-.66.55-1.05.75l-.28.14V12h-3V9.72l-.28-.14A3.96 3.96 0 014 6c0-1.1.44-2.1 1.17-2.82zM5.5 14v1h5v-1h-5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var tips = vue.defineComponent({
    name: "TipsIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-tips", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$o(_objectSpread$o({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$m, finalProps.value);
    }

  });

  function ownKeys$n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$n(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$l = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.75 8.25l.56.15c1 .28 2.09.03 2.85-.73.67-.67.94-1.6.8-2.5l-1.05 1.05a1.5 1.5 0 01-2.12 0l-.43-.42a1.5 1.5 0 010-2.12l1.06-1.06a2.9 2.9 0 00-2.5.8c-.76.77-1.01 1.85-.74 2.85l.16.57-5.8 5.8 1.4 1.41 5.81-5.8zm2.5-6.45c.32.1.64.26.94.46l-2.12 2.12a.5.5 0 000 .71l.42.43c.2.2.52.2.71 0l2.12-2.13a3.92 3.92 0 01-.46 4.98 3.91 3.91 0 01-3.81 1l-5.4 5.4a1 1 0 01-1.41 0l-1.42-1.42a1 1 0 010-1.42l5.4-5.39a3.91 3.91 0 01.99-3.82 3.92 3.92 0 014.03-.92z",
        "fillOpacity": 0.9
      }
    }]
  };
  var tools = vue.defineComponent({
    name: "ToolsIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-tools", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$n(_objectSpread$n({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$l, finalProps.value);
    }

  });

  function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$m(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$k = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.36 2.13L8 5.8l3.64-3.68.72.7L8.43 6.8a.6.6 0 01-.86 0L3.64 2.83l.72-.7zM4.3 13.83l3.7-3.7 3.7 3.7.7-.7-3.98-3.98a.6.6 0 00-.84 0L3.6 13.12l.7.71z",
        "fillOpacity": 0.9
      }
    }]
  };
  var unfoldLess = vue.defineComponent({
    name: "UnfoldLessIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-unfold-less", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$m(_objectSpread$m({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$k, finalProps.value);
    }

  });

  function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$l(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$j = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.64 6.84L8 3.15 4.36 6.84l-.72-.7 3.93-3.98a.6.6 0 01.86 0l3.93 3.98-.72.7zM11.7 9.16L8 12.85l-3.7-3.7-.7.72 3.98 3.97a.6.6 0 00.84 0l3.98-3.97-.7-.71z",
        "fillOpacity": 0.9
      }
    }]
  };
  var unfoldMore = vue.defineComponent({
    name: "UnfoldMoreIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-unfold-more", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$l(_objectSpread$l({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$j, finalProps.value);
    }

  });

  function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$k(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$i = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.74 6.68L7.5 2.9v8.59h1V2.91l3.76 3.77.71-.7-4.62-4.63a.5.5 0 00-.7 0L3.03 5.97l.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 11v2a1 1 0 001 1h10a1 1 0 001-1v-2h-1v2H3v-2H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var upload = vue.defineComponent({
    name: "UploadIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-upload", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$k(_objectSpread$k({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$i, finalProps.value);
    }

  });

  function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$j(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$h = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 6h-2V5h2v1zM8.5 6h2V5h-2v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 8V2.5c0-.28.22-.5.5-.5h7c.28 0 .5.22.5.5V8a1 1 0 011 1v5a1 1 0 01-1 1H4a1 1 0 01-1-1V9a1 1 0 011-1zm1 0h6V3H5v5zM4 9v5h8V9H4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var usb = vue.defineComponent({
    name: "UsbIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-usb", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$j(_objectSpread$j({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$h, finalProps.value);
    }

  });

  function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$i(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$g = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 8.5a3.5 3.5 0 100-7 3.5 3.5 0 000 7zm0-1a2.5 2.5 0 110-5 2.5 2.5 0 010 5zM11.5 10.99a12.77 12.77 0 00-9 .75v1.76h7v1H2a.5.5 0 01-.5-.5v-2.28c0-.37.2-.7.54-.87a13.79 13.79 0 019.46-.9v1.04zM12.75 13.75V16h1v-2.25H16v-1h-2.25V10.5h-1v2.25H10.5v1h2.25z"
      }
    }]
  };
  var userAdd = vue.defineComponent({
    name: "UserAddIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-user-add", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$i(_objectSpread$i({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$g, finalProps.value);
    }

  });

  function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$h(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$f = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 10.5c1.24 0 2.42.31 3.5.88v1.12h1v-1.14a.94.94 0 00-.49-.84 8.48 8.48 0 00-8.02 0 .94.94 0 00-.49.84v1.14h1v-1.12A7.47 7.47 0 018 10.5zM10.5 6a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0zm-1 0a1.5 1.5 0 10-3 0 1.5 1.5 0 003 0z"
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.5 1.5a1 1 0 00-1 1v11a1 1 0 001 1h11a1 1 0 001-1v-11a1 1 0 00-1-1h-11zm11 1v11h-11v-11h11z"
      }
    }]
  };
  var userAvatar = vue.defineComponent({
    name: "UserAvatarIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-user-avatar", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$h(_objectSpread$h({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$f, finalProps.value);
    }

  });

  function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$g(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$e = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "fill": "currentColor",
        "opacity": 0.9
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "d": "M8 9a2.78 2.78 0 100-5.56A2.78 2.78 0 008 9zm0-1a1.78 1.78 0 110-3.56A1.78 1.78 0 018 8z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "d": "M8 15A7 7 0 108 1a7 7 0 000 14zm5-3.68A10.2 10.2 0 008 10c-1.79 0-3.47.48-5 1.32a6 6 0 1110 0zm-.64.8a5.98 5.98 0 01-8.72 0 9.17 9.17 0 018.72 0z"
        }
      }]
    }]
  };
  var userCircle = vue.defineComponent({
    name: "UserCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-user-circle", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$g(_objectSpread$g({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$e, finalProps.value);
    }

  });

  function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$f(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$d = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 8.5a3.5 3.5 0 100-7 3.5 3.5 0 000 7zm0-1a2.5 2.5 0 110-5 2.5 2.5 0 010 5zM10.5 10.75a12.8 12.8 0 00-8 .99v1.76h8v1H2a.5.5 0 01-.5-.5v-2.28c0-.37.2-.7.54-.87a13.79 13.79 0 018.46-1.12v1.02zM11.4 14.3l1.6-1.6-1.6-1.59.71-.7 1.6 1.58 1.58-1.59.71.71-1.6 1.6 1.6 1.58-.7.71-1.6-1.6-1.59 1.6-.7-.7z"
      }
    }]
  };
  var userClear = vue.defineComponent({
    name: "UserClearIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-user-clear", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$f(_objectSpread$f({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$d, finalProps.value);
    }

  });

  function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$e(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$c = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.33 7.83a4 4 0 000-5.66l.7-.7a5 5 0 010 7.07l-.7-.71zM11 5a3.5 3.5 0 11-7 0 3.5 3.5 0 017 0zm-1 0a2.5 2.5 0 10-5 0 2.5 2.5 0 005 0zM13.46 10.85c.34.16.54.5.54.87V14a.5.5 0 01-.5.5h-12A.5.5 0 011 14v-2.28c0-.37.2-.7.54-.87a13.79 13.79 0 0111.92 0zM7.5 10.5c-1.97 0-3.83.45-5.5 1.24v1.76h11v-1.76a12.78 12.78 0 00-5.5-1.24z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.91 3.59a2 2 0 010 2.82l.71.71a3 3 0 000-4.24l-.7.7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var userTalk = vue.defineComponent({
    name: "UserTalkIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-user-talk", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$e(_objectSpread$e({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$c, finalProps.value);
    }

  });

  function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$d(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$b = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.5 5a3.5 3.5 0 11-7 0 3.5 3.5 0 017 0zm-1 0a2.5 2.5 0 10-5 0 2.5 2.5 0 005 0zM13.96 10.85c.34.16.54.5.54.87V14a.5.5 0 01-.5.5H2a.5.5 0 01-.5-.5v-2.28c0-.37.2-.7.54-.87a13.79 13.79 0 0111.92 0zM8 10.5c-1.97 0-3.83.45-5.5 1.24v1.76h11v-1.76A12.78 12.78 0 008 10.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var user = vue.defineComponent({
    name: "UserIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-user", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$d(_objectSpread$d({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$b, finalProps.value);
    }

  });

  function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$c(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$a = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.23 12.75v1.75h1v-1.75h1.75v-1h-1.75V10h-1v1.75h-1.75v1h1.75zM7.46 1.35a3.25 3.25 0 10-1.5 6.15v-1a2.25 2.25 0 11.87-4.34l.63-.81zM5.95 8.22c-1.93 0-3.76.44-5.4 1.22a.96.96 0 00-.55.87v2.19c0 .28.22.5.5.5h2.36v-1H1v-1.67c1.51-.7 3.18-1.1 4.95-1.1v-1z"
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.25 5.06a3.25 3.25 0 11-6.5 0 3.25 3.25 0 016.5 0zm-1 0a2.25 2.25 0 10-4.5 0 2.25 2.25 0 004.5 0zM12 10.6a11.88 11.88 0 00-7 .93v1.97h7v1H4.5A.5.5 0 014 14v-2.48c0-.37.2-.72.54-.87A12.83 12.83 0 0112 9.59v1z"
      }
    }]
  };
  var usergroupAdd = vue.defineComponent({
    name: "UsergroupAddIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-usergroup-add", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$c(_objectSpread$c({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$a, finalProps.value);
    }

  });

  function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$b(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$9 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.46 1.35a3.25 3.25 0 10-1.5 6.15v-1a2.25 2.25 0 11.87-4.34l.63-.81zM5.95 8.22c-1.93 0-3.76.44-5.4 1.22a.96.96 0 00-.55.87v2.19c0 .28.22.5.5.5h2.36v-1H1v-1.67c1.51-.7 3.18-1.1 4.95-1.1v-1z"
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.25 5.06a3.25 3.25 0 11-6.5 0 3.25 3.25 0 016.5 0zm-1 0a2.25 2.25 0 10-4.5 0 2.25 2.25 0 004.5 0zM11 10.47a11.98 11.98 0 00-6 1.06v1.97h5.5v1h-6A.5.5 0 014 14v-2.48c0-.37.2-.72.54-.87A12.83 12.83 0 0111 9.47v1zM13.14 12.34l-1.45 1.45.7.71 1.45-1.45 1.45 1.45.71-.7-1.45-1.46L16 10.9l-.7-.71-1.46 1.45-1.44-1.45-.71.7 1.45 1.45z"
      }
    }]
  };
  var usergroupClear = vue.defineComponent({
    name: "UsergroupClearIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-usergroup-clear", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$b(_objectSpread$b({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$9, finalProps.value);
    }

  });

  function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$8 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 1c.53 0 1.02.12 1.46.35l-.63.8a2.24 2.24 0 00-3.08 2.1c0 1.23.98 2.22 2.2 2.25v1A3.25 3.25 0 016 1zM.54 9.44c1.65-.78 3.48-1.21 5.41-1.22v1c-1.77 0-3.44.4-4.95 1.1V12h1.86v1H.5a.5.5 0 01-.5-.5v-2.2c0-.36.2-.7.54-.86z"
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 8.31a3.25 3.25 0 110-6.5 3.25 3.25 0 010 6.5zm0-1a2.25 2.25 0 100-4.5 2.25 2.25 0 000 4.5zM16 11.52c0-.37-.2-.72-.54-.87a12.83 12.83 0 00-10.92 0 .96.96 0 00-.54.87V14c0 .28.22.5.5.5h11a.5.5 0 00.5-.5v-2.48zm-1 .01v1.97H5v-1.97a11.83 11.83 0 0110 0z"
      }
    }]
  };
  var usergroup = vue.defineComponent({
    name: "UsergroupIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-usergroup", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$a(_objectSpread$a({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$8, finalProps.value);
    }

  });

  function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$7 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.05 7.74c.2.12.2.4 0 .52l-5.1 2.94a.3.3 0 01-.45-.26V5.06a.3.3 0 01.45-.26l5.1 2.94zM6.5 6.27v3.46L9.5 8l-3-1.73z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3a1 1 0 01-1-1V3zm1 0v10h10V3H3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var video = vue.defineComponent({
    name: "VideoIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-video", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$9(_objectSpread$9({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$7, finalProps.value);
    }

  });

  function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$6 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 2v12h1V2h-1zm4 12V2h1v12h-1zm4 0V2h1v12h-1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var viewColumn = vue.defineComponent({
    name: "ViewColumnIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-view-column", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$8(_objectSpread$8({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$6, finalProps.value);
    }

  });

  function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$5 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M14 4.5H2v-1h12v1zM14 8.5H2v-1h12v1zM2 12.5h12v-1H2v1z",
        "fillOpacity": 0.9
      }
    }]
  };
  var viewList = vue.defineComponent({
    name: "ViewListIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-view-list", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$7(_objectSpread$7({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$5, finalProps.value);
    }

  });

  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$4 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 7.5h7v1H4v-1zM10 10H4v1h6v-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3a1 1 0 01-1-1V3zm1 0v2h10V3H3zm0 3v7h10V6H3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var viewModule = vue.defineComponent({
    name: "ViewModuleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-view-module", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$6(_objectSpread$6({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$4, finalProps.value);
    }

  });

  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$3 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11.5 4.5h2a1 1 0 011 1V12a1 1 0 01-1 1h-11a1 1 0 01-1-1V3a1 1 0 011-1h8a1 1 0 011 1v1.5zm-1-1.5h-8v1.5h8V3zm3 2.5h-11V12h11V5.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var wallet = vue.defineComponent({
    name: "WalletIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-wallet", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$5(_objectSpread$5({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$3, finalProps.value);
    }

  });

  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$2 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.15 10.7l.7-.71a4.03 4.03 0 00-2.87-1.3c-1.02 0-2.01.45-2.83 1.27l.7.71a3.03 3.03 0 012.13-.98c.74 0 1.5.32 2.17 1.01zM12.18 8.63l.7-.72a6.83 6.83 0 00-4.9-2.2c-1.77 0-3.49.77-4.86 2.17l.7.72A5.83 5.83 0 018 6.7c1.49 0 2.98.66 4.19 1.92z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M14.13 6.62l.7-.71A9.53 9.53 0 008 2.85a9.53 9.53 0 00-6.82 3.03l.7.71a8.54 8.54 0 016.12-2.74c2.22 0 4.4.97 6.14 2.77zM9 12.5a1 1 0 11-2 0 1 1 0 012 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var wifi = vue.defineComponent({
    name: "WifiIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-wifi", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$4(_objectSpread$4({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$2, finalProps.value);
    }

  });

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element$1 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 7v2h1V7h2V6H7V4H6v2H4v1h2z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.7-3.54-3.52zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var zoomIn = vue.defineComponent({
    name: "ZoomInIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-zoom-in", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$3(_objectSpread$3({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element$1, finalProps.value);
    }

  });

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var element = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9 7H4V6h5v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.7-3.54-3.52zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var zoomOut = vue.defineComponent({
    name: "ZoomOutIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },

    setup(props, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props.size);
      var {
        className,
        style
      } = useSizeProps(propsSize);
      var finalCls = vue.computed(() => ["t-icon", "t-icon-zoom-out", className.value]);
      var finalStyle = vue.computed(() => _objectSpread$2(_objectSpread$2({}, style.value), attrs.style));
      var finalProps = vue.computed(() => ({
        class: finalCls.value,
        style: finalStyle.value,
        onClick: e => {
          var _props$onClick;

          return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
            e
          });
        }
      }));
      return () => renderFn(element, finalProps.value);
    }

  });

  var manifest = [{
    stem: "add-circle",
    icon: "AddCircle"
  }, {
    stem: "add-rectangle",
    icon: "AddRectangle"
  }, {
    stem: "add",
    icon: "Add"
  }, {
    stem: "app",
    icon: "App"
  }, {
    stem: "arrow-down-rectangle",
    icon: "ArrowDownRectangle"
  }, {
    stem: "arrow-down",
    icon: "ArrowDown"
  }, {
    stem: "arrow-left",
    icon: "ArrowLeft"
  }, {
    stem: "arrow-right",
    icon: "ArrowRight"
  }, {
    stem: "arrow-up",
    icon: "ArrowUp"
  }, {
    stem: "attach",
    icon: "Attach"
  }, {
    stem: "backtop-rectangle",
    icon: "BacktopRectangle"
  }, {
    stem: "backtop",
    icon: "Backtop"
  }, {
    stem: "backward",
    icon: "Backward"
  }, {
    stem: "barcode",
    icon: "Barcode"
  }, {
    stem: "books",
    icon: "Books"
  }, {
    stem: "browse-off",
    icon: "BrowseOff"
  }, {
    stem: "browse",
    icon: "Browse"
  }, {
    stem: "bulletpoint",
    icon: "Bulletpoint"
  }, {
    stem: "calendar",
    icon: "Calendar"
  }, {
    stem: "call",
    icon: "Call"
  }, {
    stem: "caret-down-small",
    icon: "CaretDownSmall"
  }, {
    stem: "caret-down",
    icon: "CaretDown"
  }, {
    stem: "caret-left-small",
    icon: "CaretLeftSmall"
  }, {
    stem: "caret-left",
    icon: "CaretLeft"
  }, {
    stem: "caret-right-small",
    icon: "CaretRightSmall"
  }, {
    stem: "caret-right",
    icon: "CaretRight"
  }, {
    stem: "caret-up-small",
    icon: "CaretUpSmall"
  }, {
    stem: "caret-up",
    icon: "CaretUp"
  }, {
    stem: "cart",
    icon: "Cart"
  }, {
    stem: "chart-bar",
    icon: "ChartBar"
  }, {
    stem: "chart-bubble",
    icon: "ChartBubble"
  }, {
    stem: "chart-pie",
    icon: "ChartPie"
  }, {
    stem: "chart",
    icon: "Chart"
  }, {
    stem: "chat",
    icon: "Chat"
  }, {
    stem: "check-circle-filled",
    icon: "CheckCircleFilled"
  }, {
    stem: "check-circle",
    icon: "CheckCircle"
  }, {
    stem: "check-rectangle-filled",
    icon: "CheckRectangleFilled"
  }, {
    stem: "check-rectangle",
    icon: "CheckRectangle"
  }, {
    stem: "check",
    icon: "Check"
  }, {
    stem: "chevron-down-circle",
    icon: "ChevronDownCircle"
  }, {
    stem: "chevron-down-rectangle",
    icon: "ChevronDownRectangle"
  }, {
    stem: "chevron-down",
    icon: "ChevronDown"
  }, {
    stem: "chevron-left-circle",
    icon: "ChevronLeftCircle"
  }, {
    stem: "chevron-left-double",
    icon: "ChevronLeftDouble"
  }, {
    stem: "chevron-left-rectangle",
    icon: "ChevronLeftRectangle"
  }, {
    stem: "chevron-left",
    icon: "ChevronLeft"
  }, {
    stem: "chevron-right-circle",
    icon: "ChevronRightCircle"
  }, {
    stem: "chevron-right-double",
    icon: "ChevronRightDouble"
  }, {
    stem: "chevron-right-rectangle",
    icon: "ChevronRightRectangle"
  }, {
    stem: "chevron-right",
    icon: "ChevronRight"
  }, {
    stem: "chevron-up-circle",
    icon: "ChevronUpCircle"
  }, {
    stem: "chevron-up-rectangle",
    icon: "ChevronUpRectangle"
  }, {
    stem: "chevron-up",
    icon: "ChevronUp"
  }, {
    stem: "circle",
    icon: "Circle"
  }, {
    stem: "clear",
    icon: "Clear"
  }, {
    stem: "close-circle-filled",
    icon: "CloseCircleFilled"
  }, {
    stem: "close-circle",
    icon: "CloseCircle"
  }, {
    stem: "close-rectangle",
    icon: "CloseRectangle"
  }, {
    stem: "close",
    icon: "Close"
  }, {
    stem: "cloud-download",
    icon: "CloudDownload"
  }, {
    stem: "cloud-upload",
    icon: "CloudUpload"
  }, {
    stem: "cloud",
    icon: "Cloud"
  }, {
    stem: "code",
    icon: "Code"
  }, {
    stem: "control-platform",
    icon: "ControlPlatform"
  }, {
    stem: "creditcard",
    icon: "Creditcard"
  }, {
    stem: "dashboard",
    icon: "Dashboard"
  }, {
    stem: "delete",
    icon: "Delete"
  }, {
    stem: "desktop",
    icon: "Desktop"
  }, {
    stem: "discount-filled",
    icon: "DiscountFilled"
  }, {
    stem: "discount",
    icon: "Discount"
  }, {
    stem: "download",
    icon: "Download"
  }, {
    stem: "edit-1",
    icon: "Edit1"
  }, {
    stem: "edit",
    icon: "Edit"
  }, {
    stem: "ellipsis",
    icon: "Ellipsis"
  }, {
    stem: "enter",
    icon: "Enter"
  }, {
    stem: "error-circle-filled",
    icon: "ErrorCircleFilled"
  }, {
    stem: "error-circle",
    icon: "ErrorCircle"
  }, {
    stem: "error",
    icon: "Error"
  }, {
    stem: "file-add",
    icon: "FileAdd"
  }, {
    stem: "file-copy",
    icon: "FileCopy"
  }, {
    stem: "file-excel",
    icon: "FileExcel"
  }, {
    stem: "file-icon",
    icon: "FileIcon"
  }, {
    stem: "file-image",
    icon: "FileImage"
  }, {
    stem: "file-paste",
    icon: "FilePaste"
  }, {
    stem: "file-pdf",
    icon: "FilePdf"
  }, {
    stem: "file-powerpoint",
    icon: "FilePowerpoint"
  }, {
    stem: "file-unknown",
    icon: "FileUnknown"
  }, {
    stem: "file-word",
    icon: "FileWord"
  }, {
    stem: "file",
    icon: "File"
  }, {
    stem: "filter-clear",
    icon: "FilterClear"
  }, {
    stem: "filter",
    icon: "Filter"
  }, {
    stem: "flag",
    icon: "Flag"
  }, {
    stem: "folder-add",
    icon: "FolderAdd"
  }, {
    stem: "folder-open",
    icon: "FolderOpen"
  }, {
    stem: "folder",
    icon: "Folder"
  }, {
    stem: "fork",
    icon: "Fork"
  }, {
    stem: "format-horizontal-align-bottom",
    icon: "FormatHorizontalAlignBottom"
  }, {
    stem: "format-horizontal-align-center",
    icon: "FormatHorizontalAlignCenter"
  }, {
    stem: "format-horizontal-align-top",
    icon: "FormatHorizontalAlignTop"
  }, {
    stem: "format-vertical-align-center",
    icon: "FormatVerticalAlignCenter"
  }, {
    stem: "format-vertical-align-left",
    icon: "FormatVerticalAlignLeft"
  }, {
    stem: "format-vertical-align-right",
    icon: "FormatVerticalAlignRight"
  }, {
    stem: "forward",
    icon: "Forward"
  }, {
    stem: "fullscreen-exit",
    icon: "FullscreenExit"
  }, {
    stem: "fullscreen",
    icon: "Fullscreen"
  }, {
    stem: "gender-female",
    icon: "GenderFemale"
  }, {
    stem: "gender-male",
    icon: "GenderMale"
  }, {
    stem: "gift",
    icon: "Gift"
  }, {
    stem: "heart-filled",
    icon: "HeartFilled"
  }, {
    stem: "heart",
    icon: "Heart"
  }, {
    stem: "help-circle-filled",
    icon: "HelpCircleFilled"
  }, {
    stem: "help-circle",
    icon: "HelpCircle"
  }, {
    stem: "help",
    icon: "Help"
  }, {
    stem: "history",
    icon: "History"
  }, {
    stem: "home",
    icon: "Home"
  }, {
    stem: "hourglass",
    icon: "Hourglass"
  }, {
    stem: "image-error",
    icon: "ImageError"
  }, {
    stem: "image",
    icon: "Image"
  }, {
    stem: "info-circle-filled",
    icon: "InfoCircleFilled"
  }, {
    stem: "info-circle",
    icon: "InfoCircle"
  }, {
    stem: "internet",
    icon: "Internet"
  }, {
    stem: "jump",
    icon: "Jump"
  }, {
    stem: "laptop",
    icon: "Laptop"
  }, {
    stem: "layers",
    icon: "Layers"
  }, {
    stem: "link-unlink",
    icon: "LinkUnlink"
  }, {
    stem: "link",
    icon: "Link"
  }, {
    stem: "loading",
    icon: "Loading"
  }, {
    stem: "location",
    icon: "Location"
  }, {
    stem: "lock-off",
    icon: "LockOff"
  }, {
    stem: "lock-on",
    icon: "LockOn"
  }, {
    stem: "login",
    icon: "Login"
  }, {
    stem: "logo-android",
    icon: "LogoAndroid"
  }, {
    stem: "logo-apple-filled",
    icon: "LogoAppleFilled"
  }, {
    stem: "logo-apple",
    icon: "LogoApple"
  }, {
    stem: "logo-chrome-filled",
    icon: "LogoChromeFilled"
  }, {
    stem: "logo-chrome",
    icon: "LogoChrome"
  }, {
    stem: "logo-codepen",
    icon: "LogoCodepen"
  }, {
    stem: "logo-github-filled",
    icon: "LogoGithubFilled"
  }, {
    stem: "logo-github",
    icon: "LogoGithub"
  }, {
    stem: "logo-ie-filled",
    icon: "LogoIeFilled"
  }, {
    stem: "logo-ie",
    icon: "LogoIe"
  }, {
    stem: "logo-qq",
    icon: "LogoQq"
  }, {
    stem: "logo-wechat",
    icon: "LogoWechat"
  }, {
    stem: "logo-wecom",
    icon: "LogoWecom"
  }, {
    stem: "logo-windows-filled",
    icon: "LogoWindowsFilled"
  }, {
    stem: "logo-windows",
    icon: "LogoWindows"
  }, {
    stem: "logout",
    icon: "Logout"
  }, {
    stem: "mail",
    icon: "Mail"
  }, {
    stem: "menu-fold",
    icon: "MenuFold"
  }, {
    stem: "menu-unfold",
    icon: "MenuUnfold"
  }, {
    stem: "minus-circle-filled",
    icon: "MinusCircleFilled"
  }, {
    stem: "minus-circle",
    icon: "MinusCircle"
  }, {
    stem: "minus-rectangle",
    icon: "MinusRectangle"
  }, {
    stem: "mirror",
    icon: "Mirror"
  }, {
    stem: "mobile-vibrate",
    icon: "MobileVibrate"
  }, {
    stem: "mobile",
    icon: "Mobile"
  }, {
    stem: "money-circle",
    icon: "MoneyCircle"
  }, {
    stem: "more",
    icon: "More"
  }, {
    stem: "move",
    icon: "Move"
  }, {
    stem: "next",
    icon: "Next"
  }, {
    stem: "notification-filled",
    icon: "NotificationFilled"
  }, {
    stem: "notification",
    icon: "Notification"
  }, {
    stem: "order-adjustment-column",
    icon: "OrderAdjustmentColumn"
  }, {
    stem: "order-ascending",
    icon: "OrderAscending"
  }, {
    stem: "order-descending",
    icon: "OrderDescending"
  }, {
    stem: "page-first",
    icon: "PageFirst"
  }, {
    stem: "page-last",
    icon: "PageLast"
  }, {
    stem: "pause-circle-filled",
    icon: "PauseCircleFilled"
  }, {
    stem: "photo",
    icon: "Photo"
  }, {
    stem: "pin-filled",
    icon: "PinFilled"
  }, {
    stem: "pin",
    icon: "Pin"
  }, {
    stem: "play-circle-filled",
    icon: "PlayCircleFilled"
  }, {
    stem: "play-circle-stroke",
    icon: "PlayCircleStroke"
  }, {
    stem: "play-circle",
    icon: "PlayCircle"
  }, {
    stem: "play",
    icon: "Play"
  }, {
    stem: "poweroff",
    icon: "Poweroff"
  }, {
    stem: "precise-monitor",
    icon: "PreciseMonitor"
  }, {
    stem: "previous",
    icon: "Previous"
  }, {
    stem: "print",
    icon: "Print"
  }, {
    stem: "qrcode",
    icon: "Qrcode"
  }, {
    stem: "queue",
    icon: "Queue"
  }, {
    stem: "rectangle",
    icon: "Rectangle"
  }, {
    stem: "refresh",
    icon: "Refresh"
  }, {
    stem: "relativity",
    icon: "Relativity"
  }, {
    stem: "remove",
    icon: "Remove"
  }, {
    stem: "rollback",
    icon: "Rollback"
  }, {
    stem: "rollfront",
    icon: "Rollfront"
  }, {
    stem: "root-list",
    icon: "RootList"
  }, {
    stem: "rotation",
    icon: "Rotation"
  }, {
    stem: "round",
    icon: "Round"
  }, {
    stem: "save",
    icon: "Save"
  }, {
    stem: "scan",
    icon: "Scan"
  }, {
    stem: "search",
    icon: "Search"
  }, {
    stem: "secured",
    icon: "Secured"
  }, {
    stem: "server",
    icon: "Server"
  }, {
    stem: "service",
    icon: "Service"
  }, {
    stem: "setting",
    icon: "Setting"
  }, {
    stem: "share",
    icon: "Share"
  }, {
    stem: "shop",
    icon: "Shop"
  }, {
    stem: "slash",
    icon: "Slash"
  }, {
    stem: "sound",
    icon: "Sound"
  }, {
    stem: "star-filled",
    icon: "StarFilled"
  }, {
    stem: "star",
    icon: "Star"
  }, {
    stem: "stop-circle-1",
    icon: "StopCircle1"
  }, {
    stem: "stop-circle-filled",
    icon: "StopCircleFilled"
  }, {
    stem: "stop-circle",
    icon: "StopCircle"
  }, {
    stem: "stop",
    icon: "Stop"
  }, {
    stem: "swap-left",
    icon: "SwapLeft"
  }, {
    stem: "swap-right",
    icon: "SwapRight"
  }, {
    stem: "swap",
    icon: "Swap"
  }, {
    stem: "thumb-down",
    icon: "ThumbDown"
  }, {
    stem: "thumb-up",
    icon: "ThumbUp"
  }, {
    stem: "time-filled",
    icon: "TimeFilled"
  }, {
    stem: "time",
    icon: "Time"
  }, {
    stem: "tips",
    icon: "Tips"
  }, {
    stem: "tools",
    icon: "Tools"
  }, {
    stem: "unfold-less",
    icon: "UnfoldLess"
  }, {
    stem: "unfold-more",
    icon: "UnfoldMore"
  }, {
    stem: "upload",
    icon: "Upload"
  }, {
    stem: "usb",
    icon: "Usb"
  }, {
    stem: "user-add",
    icon: "UserAdd"
  }, {
    stem: "user-avatar",
    icon: "UserAvatar"
  }, {
    stem: "user-circle",
    icon: "UserCircle"
  }, {
    stem: "user-clear",
    icon: "UserClear"
  }, {
    stem: "user-talk",
    icon: "UserTalk"
  }, {
    stem: "user",
    icon: "User"
  }, {
    stem: "usergroup-add",
    icon: "UsergroupAdd"
  }, {
    stem: "usergroup-clear",
    icon: "UsergroupClear"
  }, {
    stem: "usergroup",
    icon: "Usergroup"
  }, {
    stem: "video",
    icon: "Video"
  }, {
    stem: "view-column",
    icon: "ViewColumn"
  }, {
    stem: "view-list",
    icon: "ViewList"
  }, {
    stem: "view-module",
    icon: "ViewModule"
  }, {
    stem: "wallet",
    icon: "Wallet"
  }, {
    stem: "wifi",
    icon: "Wifi"
  }, {
    stem: "zoom-in",
    icon: "ZoomIn"
  }, {
    stem: "zoom-out",
    icon: "ZoomOut"
  }];

  var props$1 = {
    name: {
      type: String,
      default: "",
      required: true
    },
    size: {
      type: String,
      default: void 0
    },
    tag: {
      type: String,
      default: "i"
    },
    url: {
      type: [String, Array],
      default: void 0
    },
    loadDefaultIcons: {
      type: Boolean,
      default: true
    },
    onClick: Function
  };

  var isServer = typeof window === "undefined";

  function checkScriptAndLoad(url, className) {
    if (isServer) {
      return;
    }

    if (!document || !url || typeof url !== "string") return;

    if (document.querySelectorAll(".".concat(className, "[src=\"").concat(url, "\"]")).length > 0) {
      return;
    }

    var svg = document.createElement("script");
    svg.setAttribute("class", className);
    svg.setAttribute("src", url);
    document.body.appendChild(svg);
  }

  function checkLinkAndLoad(url, className) {
    if (isServer) {
      return;
    }

    if (!document || !url || typeof url !== "string") return;

    if (document.querySelectorAll(".".concat(className, "[href=\"").concat(url, "\"]")).length > 0) {
      return;
    }

    var link = document.createElement("link");
    link.setAttribute("class", className);
    link.setAttribute("href", url);
    link.setAttribute("rel", "stylesheet");
    document.head.appendChild(link);
  }

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var {
    classPrefix: classPrefix$1
  } = ConfigContext$1;
  var CDN_ICONFONT_URL$1 = "https://tdesign.gtimg.com/icon/0.1.2/fonts/index.css";
  var IconFont$1 = vue.defineComponent({
    name: "IconFont",
    props: props$1,

    setup(props2, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props2.size);
      var {
        className: sizeClassName,
        style: sizeStyle
      } = useSizeProps(propsSize);
      var name = vue.computed(() => props2.name || "");
      var isBuiltinIcon = vue.computed(() => props2.url && /^t-icon-(\w|-)+$/.test(props2.name));
      var finalUrl = vue.computed(() => {
        var url = [];
        url = props2.url instanceof Array ? props2.url.concat() : [props2.url];
        if (props2.loadDefaultIcons) url.push(CDN_ICONFONT_URL$1);
        return url;
      });
      var classNames = vue.computed(() => [{
        [name.value]: props2.url,
        ["".concat(classPrefix$1, "-icon")]: !props2.url || isBuiltinIcon.value,
        ["".concat(classPrefix$1, "-icon-").concat(name.value)]: !props2.url
      }, sizeClassName.value]);
      var finalStyle = vue.computed(() => _objectSpread$1(_objectSpread$1({}, sizeStyle.value), attrs.style));
      vue.onMounted(() => {
        Array.from(new Set(finalUrl.value)).forEach(url => {
          checkLinkAndLoad(url, "".concat(classPrefix$1, "-iconfont-stylesheet--unique-class"));
        });
      });
      var finalProps = vue.computed(() => ({
        class: classNames.value,
        style: finalStyle.value,
        onClick: e => {
          var _props2$onClick;

          return (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
            e
          });
        }
      }));
      return () => vue.h(props2.tag || "i", finalProps.value);
    }

  });
  var _Icon$1 = IconFont$1;

  var IconFont = _Icon$1;

  var props = {
    name: {
      type: String,
      default: ""
    },
    size: {
      type: String,
      default: void 0
    },
    url: {
      type: [String, Array],
      default: void 0
    },
    loadDefaultIcons: {
      type: Boolean,
      default: true
    },
    onClick: Function
  };

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var {
    classPrefix
  } = ConfigContext$1;
  var CDN_ICONFONT_URL = "https://tdesign.gtimg.com/icon/0.1.2/fonts/index.js";
  var _Icon = vue.defineComponent({
    name: "Icon",
    props,

    setup(props2, _ref) {
      var {
        attrs
      } = _ref;
      var propsSize = vue.computed(() => props2.size);
      var name = vue.computed(() => props2.name || "");
      var {
        className: sizeClassName,
        style: sizeStyle
      } = useSizeProps(propsSize);
      var finalUrl = vue.computed(() => {
        var url = [];
        url = props2.url instanceof Array ? props2.url.concat() : [props2.url];
        if (props2.loadDefaultIcons) url.push(CDN_ICONFONT_URL);
        return url;
      });
      var classNames = vue.computed(() => ["".concat(classPrefix, "-icon"), "".concat(classPrefix, "-icon-").concat(name.value), sizeClassName.value]);
      var finalStyle = vue.computed(() => _objectSpread(_objectSpread({}, sizeStyle.value), attrs.style));
      vue.onMounted(() => {
        Array.from(new Set(finalUrl.value)).forEach(url => {
          checkScriptAndLoad(url, "".concat(classPrefix, "-svg-js-stylesheet--unique-class"));
        });
      });
      var finalProps = vue.computed(() => ({
        class: classNames.value,
        style: finalStyle.value,
        onClick: e => {
          var _props2$onClick;

          return (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
            e
          });
        }
      }));
      return () => vue.h("svg", finalProps.value, vue.h("use", {
        href: props2.url ? "#".concat(name.value) : "#t-icon-".concat(name.value)
      }));
    }

  });

  var Icon = _Icon;

  exports.AddCircleIcon = addCircle;
  exports.AddIcon = add;
  exports.AddRectangleIcon = addRectangle;
  exports.AppIcon = app;
  exports.ArrowDownIcon = arrowDown;
  exports.ArrowDownRectangleIcon = arrowDownRectangle;
  exports.ArrowLeftIcon = arrowLeft;
  exports.ArrowRightIcon = arrowRight;
  exports.ArrowUpIcon = arrowUp;
  exports.AttachIcon = attach;
  exports.BacktopIcon = backtop;
  exports.BacktopRectangleIcon = backtopRectangle;
  exports.BackwardIcon = backward;
  exports.BarcodeIcon = barcode;
  exports.BooksIcon = books;
  exports.BrowseIcon = browse;
  exports.BrowseOffIcon = browseOff;
  exports.BulletpointIcon = bulletpoint;
  exports.CalendarIcon = calendar;
  exports.CallIcon = call;
  exports.CaretDownIcon = caretDown;
  exports.CaretDownSmallIcon = caretDownSmall;
  exports.CaretLeftIcon = caretLeft;
  exports.CaretLeftSmallIcon = caretLeftSmall;
  exports.CaretRightIcon = caretRight;
  exports.CaretRightSmallIcon = caretRightSmall;
  exports.CaretUpIcon = caretUp;
  exports.CaretUpSmallIcon = caretUpSmall;
  exports.CartIcon = cart;
  exports.ChartBarIcon = chartBar;
  exports.ChartBubbleIcon = chartBubble;
  exports.ChartIcon = chart;
  exports.ChartPieIcon = chartPie;
  exports.ChatIcon = chat;
  exports.CheckCircleFilledIcon = checkCircleFilled;
  exports.CheckCircleIcon = checkCircle;
  exports.CheckIcon = check;
  exports.CheckRectangleFilledIcon = checkRectangleFilled;
  exports.CheckRectangleIcon = checkRectangle;
  exports.ChevronDownCircleIcon = chevronDownCircle;
  exports.ChevronDownIcon = chevronDown;
  exports.ChevronDownRectangleIcon = chevronDownRectangle;
  exports.ChevronLeftCircleIcon = chevronLeftCircle;
  exports.ChevronLeftDoubleIcon = chevronLeftDouble;
  exports.ChevronLeftIcon = chevronLeft;
  exports.ChevronLeftRectangleIcon = chevronLeftRectangle;
  exports.ChevronRightCircleIcon = chevronRightCircle;
  exports.ChevronRightDoubleIcon = chevronRightDouble;
  exports.ChevronRightIcon = chevronRight;
  exports.ChevronRightRectangleIcon = chevronRightRectangle;
  exports.ChevronUpCircleIcon = chevronUpCircle;
  exports.ChevronUpIcon = chevronUp;
  exports.ChevronUpRectangleIcon = chevronUpRectangle;
  exports.CircleIcon = circle;
  exports.ClearIcon = clear;
  exports.CloseCircleFilledIcon = closeCircleFilled;
  exports.CloseCircleIcon = closeCircle;
  exports.CloseIcon = close;
  exports.CloseRectangleIcon = closeRectangle;
  exports.CloudDownloadIcon = cloudDownload;
  exports.CloudIcon = cloud;
  exports.CloudUploadIcon = cloudUpload;
  exports.CodeIcon = code;
  exports.ControlPlatformIcon = controlPlatform;
  exports.CreditcardIcon = creditcard;
  exports.DashboardIcon = dashboard;
  exports.DeleteIcon = _delete;
  exports.DesktopIcon = desktop;
  exports.DiscountFilledIcon = discountFilled;
  exports.DiscountIcon = discount;
  exports.DownloadIcon = download;
  exports.Edit1Icon = edit1;
  exports.EditIcon = edit;
  exports.EllipsisIcon = ellipsis;
  exports.EnterIcon = enter;
  exports.ErrorCircleFilledIcon = errorCircleFilled;
  exports.ErrorCircleIcon = errorCircle;
  exports.ErrorIcon = error;
  exports.FileAddIcon = fileAdd;
  exports.FileCopyIcon = fileCopy;
  exports.FileExcelIcon = fileExcel;
  exports.FileIcon = file;
  exports.FileIconIcon = fileIcon;
  exports.FileImageIcon = fileImage;
  exports.FilePasteIcon = filePaste;
  exports.FilePdfIcon = filePdf;
  exports.FilePowerpointIcon = filePowerpoint;
  exports.FileUnknownIcon = fileUnknown;
  exports.FileWordIcon = fileWord;
  exports.FilterClearIcon = filterClear;
  exports.FilterIcon = filter;
  exports.FlagIcon = flag;
  exports.FolderAddIcon = folderAdd;
  exports.FolderIcon = folder;
  exports.FolderOpenIcon = folderOpen;
  exports.ForkIcon = fork;
  exports.FormatHorizontalAlignBottomIcon = formatHorizontalAlignBottom;
  exports.FormatHorizontalAlignCenterIcon = formatHorizontalAlignCenter;
  exports.FormatHorizontalAlignTopIcon = formatHorizontalAlignTop;
  exports.FormatVerticalAlignCenterIcon = formatVerticalAlignCenter;
  exports.FormatVerticalAlignLeftIcon = formatVerticalAlignLeft;
  exports.FormatVerticalAlignRightIcon = formatVerticalAlignRight;
  exports.ForwardIcon = forward;
  exports.FullscreenExitIcon = fullscreenExit;
  exports.FullscreenIcon = fullscreen;
  exports.GenderFemaleIcon = genderFemale;
  exports.GenderMaleIcon = genderMale;
  exports.GiftIcon = gift;
  exports.HeartFilledIcon = heartFilled;
  exports.HeartIcon = heart;
  exports.HelpCircleFilledIcon = helpCircleFilled;
  exports.HelpCircleIcon = helpCircle;
  exports.HelpIcon = help;
  exports.HistoryIcon = history;
  exports.HomeIcon = home;
  exports.HourglassIcon = hourglass;
  exports.Icon = Icon;
  exports.IconFont = IconFont;
  exports.ImageErrorIcon = imageError;
  exports.ImageIcon = image;
  exports.InfoCircleFilledIcon = infoCircleFilled;
  exports.InfoCircleIcon = infoCircle;
  exports.InternetIcon = internet;
  exports.JumpIcon = jump;
  exports.LaptopIcon = laptop;
  exports.LayersIcon = layers;
  exports.LinkIcon = link;
  exports.LinkUnlinkIcon = linkUnlink;
  exports.LoadingIcon = loading;
  exports.LocationIcon = location;
  exports.LockOffIcon = lockOff;
  exports.LockOnIcon = lockOn;
  exports.LoginIcon = login;
  exports.LogoAndroidIcon = logoAndroid;
  exports.LogoAppleFilledIcon = logoAppleFilled;
  exports.LogoAppleIcon = logoApple;
  exports.LogoChromeFilledIcon = logoChromeFilled;
  exports.LogoChromeIcon = logoChrome;
  exports.LogoCodepenIcon = logoCodepen;
  exports.LogoGithubFilledIcon = logoGithubFilled;
  exports.LogoGithubIcon = logoGithub;
  exports.LogoIeFilledIcon = logoIeFilled;
  exports.LogoIeIcon = logoIe;
  exports.LogoQqIcon = logoQq;
  exports.LogoWechatIcon = logoWechat;
  exports.LogoWecomIcon = logoWecom;
  exports.LogoWindowsFilledIcon = logoWindowsFilled;
  exports.LogoWindowsIcon = logoWindows;
  exports.LogoutIcon = logout;
  exports.MailIcon = mail;
  exports.MenuFoldIcon = menuFold;
  exports.MenuUnfoldIcon = menuUnfold;
  exports.MinusCircleFilledIcon = minusCircleFilled;
  exports.MinusCircleIcon = minusCircle;
  exports.MinusRectangleIcon = minusRectangle;
  exports.MirrorIcon = mirror;
  exports.MobileIcon = mobile;
  exports.MobileVibrateIcon = mobileVibrate;
  exports.MoneyCircleIcon = moneyCircle;
  exports.MoreIcon = more;
  exports.MoveIcon = move;
  exports.NextIcon = next;
  exports.NotificationFilledIcon = notificationFilled;
  exports.NotificationIcon = notification;
  exports.OrderAdjustmentColumnIcon = orderAdjustmentColumn;
  exports.OrderAscendingIcon = orderAscending;
  exports.OrderDescendingIcon = orderDescending;
  exports.PageFirstIcon = pageFirst;
  exports.PageLastIcon = pageLast;
  exports.PauseCircleFilledIcon = pauseCircleFilled;
  exports.PhotoIcon = photo;
  exports.PinFilledIcon = pinFilled;
  exports.PinIcon = pin;
  exports.PlayCircleFilledIcon = playCircleFilled;
  exports.PlayCircleIcon = playCircle;
  exports.PlayCircleStrokeIcon = playCircleStroke;
  exports.PlayIcon = play;
  exports.PoweroffIcon = poweroff;
  exports.PreciseMonitorIcon = preciseMonitor;
  exports.PreviousIcon = previous;
  exports.PrintIcon = print;
  exports.QrcodeIcon = qrcode;
  exports.QueueIcon = queue;
  exports.RectangleIcon = rectangle;
  exports.RefreshIcon = refresh;
  exports.RelativityIcon = relativity;
  exports.RemoveIcon = remove;
  exports.RollbackIcon = rollback;
  exports.RollfrontIcon = rollfront;
  exports.RootListIcon = rootList;
  exports.RotationIcon = rotation;
  exports.RoundIcon = round;
  exports.SaveIcon = save;
  exports.ScanIcon = scan;
  exports.SearchIcon = search;
  exports.SecuredIcon = secured;
  exports.ServerIcon = server;
  exports.ServiceIcon = service;
  exports.SettingIcon = setting;
  exports.ShareIcon = share;
  exports.ShopIcon = shop;
  exports.SlashIcon = slash;
  exports.SoundIcon = sound;
  exports.StarFilledIcon = starFilled;
  exports.StarIcon = star;
  exports.StopCircle1Icon = stopCircle1;
  exports.StopCircleFilledIcon = stopCircleFilled;
  exports.StopCircleIcon = stopCircle;
  exports.StopIcon = stop;
  exports.SwapIcon = swap;
  exports.SwapLeftIcon = swapLeft;
  exports.SwapRightIcon = swapRight;
  exports.ThumbDownIcon = thumbDown;
  exports.ThumbUpIcon = thumbUp;
  exports.TimeFilledIcon = timeFilled;
  exports.TimeIcon = time;
  exports.TipsIcon = tips;
  exports.ToolsIcon = tools;
  exports.UnfoldLessIcon = unfoldLess;
  exports.UnfoldMoreIcon = unfoldMore;
  exports.UploadIcon = upload;
  exports.UsbIcon = usb;
  exports.UserAddIcon = userAdd;
  exports.UserAvatarIcon = userAvatar;
  exports.UserCircleIcon = userCircle;
  exports.UserClearIcon = userClear;
  exports.UserIcon = user;
  exports.UserTalkIcon = userTalk;
  exports.UsergroupAddIcon = usergroupAdd;
  exports.UsergroupClearIcon = usergroupClear;
  exports.UsergroupIcon = usergroup;
  exports.VideoIcon = video;
  exports.ViewColumnIcon = viewColumn;
  exports.ViewListIcon = viewList;
  exports.ViewModuleIcon = viewModule;
  exports.WalletIcon = wallet;
  exports.WifiIcon = wifi;
  exports.ZoomInIcon = zoomIn;
  exports.ZoomOutIcon = zoomOut;
  exports.manifest = manifest;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.js.map
