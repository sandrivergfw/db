{"version":3,"file":"number.js","sources":["../../../../src/_common/js/input-number/number.ts"],"sourcesContent":["/** 普通数相关方法 */\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport {\n  compareNumber,\n  formatENumber,\n  largeNumberToFixed,\n  isInputNumber,\n  largeNumberAdd,\n  largeNumberSubtract,\n} from './large-number';\nimport log from '../log';\n\nexport * from './large-number';\n\nexport type NumberType = number | string;\n\n// 小于最大值，才允许继续添加\nexport function canAddNumber(\n  num: NumberType,\n  max: NumberType,\n  largeNumber = false\n): boolean {\n  if (!num && num !== 0) return true;\n  if (largeNumber && isString(num)) {\n    return compareNumber(num, max, largeNumber) < 0;\n  }\n  return num < max;\n}\n\n// 大于最小值，才允许继续减少\nexport function canReduceNumber(\n  num: NumberType,\n  min: NumberType,\n  largeNumber = false\n): boolean {\n  if (!num && num !== 0) return true;\n  if (largeNumber && isString(num)) {\n    return compareNumber(num, min, largeNumber) > 0;\n  }\n  return num > min;\n}\n\n/**\n * 格式化数字，如：2e3 转换为 2000\n * 如果不是数字，则不允许输入\n * decimalPlaces 小数点处理\n */\nexport function formatToNumber(\n  num: string,\n  extra?: {\n    decimalPlaces?: number;\n    largeNumber?: boolean;\n  }\n): string | number {\n  if (num === undefined || num === null || num === '') return num;\n  if (num === '-') return 0;\n  if (num[num.length - 1] === '.') {\n    return extra?.largeNumber ? num.slice(0, -1) : Number(num.slice(0, -1));\n  }\n  const isLargeNumber = extra?.largeNumber && isString(num);\n  let newNumber: string | number = num;\n  if ((isString(num) && num.includes('e')) || isNumber(num)) {\n    newNumber = isLargeNumber ? formatENumber(num) : Number(num);\n  }\n  if (extra?.decimalPlaces !== undefined) {\n    newNumber = largeNumberToFixed(\n      newNumber,\n      extra.decimalPlaces,\n      extra.largeNumber\n    );\n  }\n  const val = isLargeNumber || extra?.decimalPlaces !== undefined\n    ? newNumber\n    : Number(newNumber);\n  if (String(val) === 'NaN') return undefined;\n  return val;\n}\n\n/**\n * 将数字控制在 max 和 min 之间\n */\nexport function putInRangeNumber(\n  val: NumberType,\n  params: {\n    max?: NumberType;\n    min?: NumberType;\n    lastValue?: NumberType;\n    largeNumber?: boolean;\n  }\n) {\n  if (val === '') return undefined;\n  const { max, min, lastValue, largeNumber } = params;\n  if (!isInputNumber(val)) return lastValue;\n  if (largeNumber && (isString(max) || max === Infinity) && (isString(min) || min === -Infinity)) {\n    if (compareNumber(max, val, largeNumber) < 0) return max;\n    if (compareNumber(min, val, largeNumber) > 0) return min;\n    return val;\n  }\n  return Math.max(Number(min), Math.min(Number(max), Number(val)));\n}\n\n/**\n * 仅支持正数，小数加法精度处理，小数部分和整数部分分开处理\n */\nexport function positiveAdd(num1: number, num2: number): number {\n  if (!num1 || !num2) return (num1 || 0) + (num2 || 0);\n  const r1 = num1.toString().split('.')[1]?.length || 0;\n  const r2 = num2.toString().split('.')[1]?.length || 0;\n  // 整数不存在精度问题，直接返回\n  if (!r1 || !r2) return num1 + num2;\n  let newNumber1 = num1;\n  let newNumber2 = num2;\n  const diff = Math.abs(r1 - r2);\n  const digit = 10 ** Math.max(r1, r2);\n  if (diff > 0) {\n    const cm = 10 ** diff;\n    if (r1 > r2) {\n      newNumber1 = Number(num1.toString().replace('.', ''));\n      newNumber2 = Number(num2.toString().replace('.', '')) * cm;\n    } else {\n      newNumber1 = Number(num1.toString().replace('.', '')) * cm;\n      newNumber2 = Number(num2.toString().replace('.', ''));\n    }\n  } else {\n    newNumber1 = Number(num1.toString().replace('.', ''));\n    newNumber2 = Number(num2.toString().replace('.', ''));\n  }\n  return (newNumber1 + newNumber2) / digit;\n}\n\n/**\n * 正数，小数减法精度处理，小数部分和整数部分分开处理\n */\nexport function positiveSubtract(num1: number, num2: number): number {\n  if (!num1 || !num2) return (num1 || 0) - (num2 || 0);\n  const r1 = num1.toString().split('.')[1]?.length || 0;\n  const r2 = num2.toString().split('.')[1]?.length || 0;\n  const digit = 10 ** Math.max(r1, r2);\n  const n = r1 >= r2 ? r1 : r2;\n  return Number(((num1 * digit - num2 * digit) / digit).toFixed(n));\n}\n\n/**\n * 支持正数、负数、小数等全部数字的加法\n * -0.766 + 1       =>   1 - 0.766\n * -1 + (-0.766)    =>   - (1 + 0.766)\n * 1 + (-0.766)     =>   1 - 0.766\n * 1 + 0.766        =>   1 + 0.766\n */\nexport function add(num1: number, num2: number): number {\n  if (num1 < 0 && num2 > 0) return positiveSubtract(num2, Math.abs(num1));\n  if (num1 < 0 && num2 < 0) return positiveAdd(Math.abs(num1), Math.abs(num2)) * -1;\n  if (num1 > 0 && num2 < 0) return positiveSubtract(num1, Math.abs(num2));\n  return positiveAdd(num1, num2);\n}\n\n/**\n * 支持正数、负数、小数等全部数字的减法\n * -0.766 - 1       =>   - (1 + 0.766)\n * -1 - (-0.766)    =>   0.766 - 1\n * 1 - (-0.766)     =>   1 + 0.766\n * 1 - 0.766        =>   1 - 0.766\n */\nexport function subtract(num1: number, num2: number): number {\n  if (num1 < 0 && num2 > 0) return positiveAdd(Math.abs(num1), num2) * -1;\n  if (num1 < 0 && num2 < 0) return positiveSubtract(Math.abs(num2), Math.abs(num1));\n  if (num1 > 0 && num2 < 0) return positiveAdd(num1, Math.abs(num2));\n  return positiveSubtract(num1, num2);\n}\n\nexport function getStepValue(p: {\n  op: 'add' | 'reduce';\n  step: NumberType;\n  max?: NumberType;\n  min?: NumberType;\n  lastValue?: NumberType;\n  largeNumber?: boolean;\n}) {\n  const { op, step, lastValue, max, min, largeNumber } = p;\n  if (step <= 0) {\n    log.error('InputNumber', 'step must be larger than 0.');\n    return lastValue;\n  }\n  const tStep = isNumber(step) ? String(step) : step;\n  let newVal;\n  if (op === 'add') {\n    if (largeNumber && isString(lastValue)) {\n      newVal = largeNumberAdd(String(lastValue), String(tStep));\n    } else {\n      newVal = add(Number(lastValue || 0), Number(step));\n    }\n  } else if (op === 'reduce') {\n    if (largeNumber && isString(lastValue)) {\n      newVal = largeNumberSubtract(String(lastValue), String(tStep));\n    } else {\n      newVal = subtract(Number(lastValue || 0), Number(step));\n    }\n  }\n  if (lastValue === undefined) {\n    newVal = putInRangeNumber(newVal, { max, min, lastValue, largeNumber });\n  }\n  return largeNumber ? newVal : Number(newVal);\n}\n\nexport type InputNumberErrorType =\n  | 'exceed-maximum'\n  | 'below-minimum'\n  | undefined;\n\n/**\n * 最大值和最小值校验\n */\nexport function getMaxOrMinValidateResult(p: {\n  largeNumber: boolean;\n  value: NumberType;\n  max: NumberType;\n  min: NumberType;\n}): InputNumberErrorType {\n  const { largeNumber, value, max, min } = p;\n  if (largeNumber === undefined) return undefined;\n  if (largeNumber && isNumber(value)) {\n    log.warn('InputNumber', 'largeNumber value must be a string.');\n  }\n  let error: InputNumberErrorType;\n  if (compareNumber(value, max, largeNumber) > 0) {\n    error = 'exceed-maximum';\n  } else if (compareNumber(value, min, largeNumber) < 0) {\n    error = 'below-minimum';\n  } else {\n    error = undefined;\n  }\n  return error;\n}\n\n/**\n * 是否允许输入当前字符，输入字符校验\n */\nexport function canInputNumber(number: string, largeNumber: boolean) {\n  if (!number && typeof number === 'string') return true;\n  const isNumber = (largeNumber && isInputNumber(number)) || !Number.isNaN(Number(number));\n  if (!isNumber && !['-', '.', 'e', 'E'].includes(number.slice(-1))) return false;\n  return true;\n}\n"],"names":["canAddNumber","num","max","largeNumber","isString","compareNumber","canReduceNumber","min","formatToNumber","extra","length","slice","Number","isLargeNumber","newNumber","includes","isNumber","formatENumber","decimalPlaces","largeNumberToFixed","val","String","putInRangeNumber","params","lastValue","isInputNumber","Infinity","Math","positiveAdd","num1","num2","r1","toString","split","r2","newNumber1","newNumber2","diff","abs","digit","cm","replace","positiveSubtract","n","toFixed","add","subtract","getStepValue","p","op","step","log","error","tStep","newVal","largeNumberAdd","largeNumberSubtract","getMaxOrMinValidateResult","value","warn","canInputNumber","number","isNaN"],"mappings":"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"}