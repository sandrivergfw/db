import { TdAffixProps } from './type';
import './style';
export * from './type';
export declare const Affix: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            offsetTop: number;
            container: import("../common").ScrollContainer;
            offsetBottom: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            container: {
                type: import("vue").PropType<import("../common").ScrollContainer>;
                default: () => () => Window & typeof globalThis;
            };
            offsetBottom: {
                type: NumberConstructor;
                default: number;
            };
            offsetTop: {
                type: NumberConstructor;
                default: number;
            };
            zIndex: {
                type: NumberConstructor;
            };
            onFixedChange: import("vue").PropType<(affixed: boolean, context: {
                top: number;
            }) => void>;
        }>> & {
            onFixedChange?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "offsetTop" | "container" | "offsetBottom">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: "fixedChange", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            container: {
                type: import("vue").PropType<import("../common").ScrollContainer>;
                default: () => () => Window & typeof globalThis;
            };
            offsetBottom: {
                type: NumberConstructor;
                default: number;
            };
            offsetTop: {
                type: NumberConstructor;
                default: number;
            };
            zIndex: {
                type: NumberConstructor;
            };
            onFixedChange: import("vue").PropType<(affixed: boolean, context: {
                top: number;
            }) => void>;
        }>> & {
            onFixedChange?: (...args: any[]) => any;
        }, {
            affixWrapRef: import("vue").Ref<HTMLElement>;
            affixRef: import("vue").Ref<HTMLElement>;
            bindScroll: () => Promise<void>;
            unbindScroll: () => void;
            handleScroll: () => void;
            scrollContainer: import("vue").Ref<import("../common").ScrollContainerElement>;
            renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "fixedChange"[], string, {
            offsetTop: number;
            container: import("../common").ScrollContainer;
            offsetBottom: number;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        container: {
            type: import("vue").PropType<import("../common").ScrollContainer>;
            default: () => () => Window & typeof globalThis;
        };
        offsetBottom: {
            type: NumberConstructor;
            default: number;
        };
        offsetTop: {
            type: NumberConstructor;
            default: number;
        };
        zIndex: {
            type: NumberConstructor;
        };
        onFixedChange: import("vue").PropType<(affixed: boolean, context: {
            top: number;
        }) => void>;
    }>> & {
        onFixedChange?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<{
        affixWrapRef: import("vue").Ref<HTMLElement>;
        affixRef: import("vue").Ref<HTMLElement>;
        bindScroll: () => Promise<void>;
        unbindScroll: () => void;
        handleScroll: () => void;
        scrollContainer: import("vue").Ref<import("../common").ScrollContainerElement>;
        renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    container: {
        type: import("vue").PropType<import("../common").ScrollContainer>;
        default: () => () => Window & typeof globalThis;
    };
    offsetBottom: {
        type: NumberConstructor;
        default: number;
    };
    offsetTop: {
        type: NumberConstructor;
        default: number;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onFixedChange: import("vue").PropType<(affixed: boolean, context: {
        top: number;
    }) => void>;
}>> & {
    onFixedChange?: (...args: any[]) => any;
}, {
    affixWrapRef: import("vue").Ref<HTMLElement>;
    affixRef: import("vue").Ref<HTMLElement>;
    bindScroll: () => Promise<void>;
    unbindScroll: () => void;
    handleScroll: () => void;
    scrollContainer: import("vue").Ref<import("../common").ScrollContainerElement>;
    renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "fixedChange"[], "fixedChange", {
    offsetTop: number;
    container: import("../common").ScrollContainer;
    offsetBottom: number;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare type AffixProps = TdAffixProps;
export default Affix;
