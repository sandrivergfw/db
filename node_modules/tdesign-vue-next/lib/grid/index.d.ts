import { TdRowProps, TdColProps } from './type';
import './style';
export * from './type';
export declare type ColProps = TdColProps;
export declare type RowProps = TdRowProps;
export declare const Row: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            tag: string;
            justify: "center" | "end" | "start" | "space-around" | "space-between";
            align: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
            gutter: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            align: {
                type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
                default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
                validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
            };
            gutter: {
                type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
                default: number;
            };
            justify: {
                type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
                default: "center" | "end" | "start" | "space-around" | "space-between";
                validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "tag" | "justify" | "align" | "gutter">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            align: {
                type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
                default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
                validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
            };
            gutter: {
                type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
                default: number;
            };
            justify: {
                type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
                default: "center" | "end" | "start" | "space-around" | "space-between";
                validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            tag: string;
            justify: "center" | "end" | "start" | "space-around" | "space-between";
            align: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
            gutter: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
            default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
            validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
        };
        gutter: {
            type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
            default: number;
        };
        justify: {
            type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
            default: "center" | "end" | "start" | "space-around" | "space-between";
            validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    align: {
        type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
        default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
        validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
    };
    gutter: {
        type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
        default: number;
    };
    justify: {
        type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
        default: "center" | "end" | "start" | "space-around" | "space-between";
        validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    tag: string;
    justify: "center" | "end" | "start" | "space-around" | "space-between";
    align: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
    gutter: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const Col: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            push: number;
            offset: number;
            order: number;
            span: number;
            tag: string;
            pull: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            flex: {
                type: import("vue").PropType<string | number>;
            };
            lg: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            md: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            offset: {
                type: NumberConstructor;
                default: number;
            };
            order: {
                type: NumberConstructor;
                default: number;
            };
            pull: {
                type: NumberConstructor;
                default: number;
            };
            push: {
                type: NumberConstructor;
                default: number;
            };
            sm: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            span: {
                type: NumberConstructor;
                default: number;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            xl: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            xs: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            xxl: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "push" | "offset" | "order" | "span" | "tag" | "pull">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            flex: {
                type: import("vue").PropType<string | number>;
            };
            lg: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            md: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            offset: {
                type: NumberConstructor;
                default: number;
            };
            order: {
                type: NumberConstructor;
                default: number;
            };
            pull: {
                type: NumberConstructor;
                default: number;
            };
            push: {
                type: NumberConstructor;
                default: number;
            };
            sm: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            span: {
                type: NumberConstructor;
                default: number;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            xl: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            xs: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            xxl: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            push: number;
            offset: number;
            order: number;
            span: number;
            tag: string;
            pull: number;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        flex: {
            type: import("vue").PropType<string | number>;
        };
        lg: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        md: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        offset: {
            type: NumberConstructor;
            default: number;
        };
        order: {
            type: NumberConstructor;
            default: number;
        };
        pull: {
            type: NumberConstructor;
            default: number;
        };
        push: {
            type: NumberConstructor;
            default: number;
        };
        sm: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        span: {
            type: NumberConstructor;
            default: number;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        xl: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        xs: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        xxl: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    flex: {
        type: import("vue").PropType<string | number>;
    };
    lg: {
        type: import("vue").PropType<number | import("./type").BaseColProps>;
    };
    md: {
        type: import("vue").PropType<number | import("./type").BaseColProps>;
    };
    offset: {
        type: NumberConstructor;
        default: number;
    };
    order: {
        type: NumberConstructor;
        default: number;
    };
    pull: {
        type: NumberConstructor;
        default: number;
    };
    push: {
        type: NumberConstructor;
        default: number;
    };
    sm: {
        type: import("vue").PropType<number | import("./type").BaseColProps>;
    };
    span: {
        type: NumberConstructor;
        default: number;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    xl: {
        type: import("vue").PropType<number | import("./type").BaseColProps>;
    };
    xs: {
        type: import("vue").PropType<number | import("./type").BaseColProps>;
    };
    xxl: {
        type: import("vue").PropType<number | import("./type").BaseColProps>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    push: number;
    offset: number;
    order: number;
    span: number;
    tag: string;
    pull: number;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
declare const _default: {
    Row: {
        new (...args: any[]): {
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: Partial<{
                tag: string;
                justify: "center" | "end" | "start" | "space-around" | "space-between";
                align: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
                gutter: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
            }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                align: {
                    type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
                    default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
                    validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
                };
                gutter: {
                    type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
                    default: number;
                };
                justify: {
                    type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
                    default: "center" | "end" | "start" | "space-around" | "space-between";
                    validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
                };
                tag: {
                    type: StringConstructor;
                    default: string;
                };
            }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "tag" | "justify" | "align" | "gutter">;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot;
            }>;
            $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
            $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
            $emit: (event: string, ...args: any[]) => void;
            $el: any;
            $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                align: {
                    type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
                    default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
                    validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
                };
                gutter: {
                    type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
                    default: number;
                };
                justify: {
                    type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
                    default: "center" | "end" | "start" | "space-around" | "space-between";
                    validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
                };
                tag: {
                    type: StringConstructor;
                    default: string;
                };
            }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
                tag: string;
                justify: "center" | "end" | "start" | "space-around" | "space-between";
                align: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
                gutter: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
            }, {}, string> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
                renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import("vue").nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
        } & Readonly<import("vue").ExtractPropTypes<{
            align: {
                type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
                default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
                validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
            };
            gutter: {
                type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
                default: number;
            };
            justify: {
                type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
                default: "center" | "end" | "start" | "space-around" | "space-between";
                validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
        }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
            default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
            validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
        };
        gutter: {
            type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
            default: number;
        };
        justify: {
            type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
            default: "center" | "end" | "start" | "space-around" | "space-between";
            validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
        tag: string;
        justify: "center" | "end" | "start" | "space-around" | "space-between";
        align: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
        gutter: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
    }, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
    Col: {
        new (...args: any[]): {
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: Partial<{
                push: number;
                offset: number;
                order: number;
                span: number;
                tag: string;
                pull: number;
            }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                flex: {
                    type: import("vue").PropType<string | number>;
                };
                lg: {
                    type: import("vue").PropType<number | import("./type").BaseColProps>;
                };
                md: {
                    type: import("vue").PropType<number | import("./type").BaseColProps>;
                };
                offset: {
                    type: NumberConstructor;
                    default: number;
                };
                order: {
                    type: NumberConstructor;
                    default: number;
                };
                pull: {
                    type: NumberConstructor;
                    default: number;
                };
                push: {
                    type: NumberConstructor;
                    default: number;
                };
                sm: {
                    type: import("vue").PropType<number | import("./type").BaseColProps>;
                };
                span: {
                    type: NumberConstructor;
                    default: number;
                };
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                xl: {
                    type: import("vue").PropType<number | import("./type").BaseColProps>;
                };
                xs: {
                    type: import("vue").PropType<number | import("./type").BaseColProps>;
                };
                xxl: {
                    type: import("vue").PropType<number | import("./type").BaseColProps>;
                };
            }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "push" | "offset" | "order" | "span" | "tag" | "pull">;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot;
            }>;
            $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
            $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
            $emit: (event: string, ...args: any[]) => void;
            $el: any;
            $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                flex: {
                    type: import("vue").PropType<string | number>;
                };
                lg: {
                    type: import("vue").PropType<number | import("./type").BaseColProps>;
                };
                md: {
                    type: import("vue").PropType<number | import("./type").BaseColProps>;
                };
                offset: {
                    type: NumberConstructor;
                    default: number;
                };
                order: {
                    type: NumberConstructor;
                    default: number;
                };
                pull: {
                    type: NumberConstructor;
                    default: number;
                };
                push: {
                    type: NumberConstructor;
                    default: number;
                };
                sm: {
                    type: import("vue").PropType<number | import("./type").BaseColProps>;
                };
                span: {
                    type: NumberConstructor;
                    default: number;
                };
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                xl: {
                    type: import("vue").PropType<number | import("./type").BaseColProps>;
                };
                xs: {
                    type: import("vue").PropType<number | import("./type").BaseColProps>;
                };
                xxl: {
                    type: import("vue").PropType<number | import("./type").BaseColProps>;
                };
            }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
                push: number;
                offset: number;
                order: number;
                span: number;
                tag: string;
                pull: number;
            }, {}, string> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
                renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import("vue").nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
        } & Readonly<import("vue").ExtractPropTypes<{
            flex: {
                type: import("vue").PropType<string | number>;
            };
            lg: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            md: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            offset: {
                type: NumberConstructor;
                default: number;
            };
            order: {
                type: NumberConstructor;
                default: number;
            };
            pull: {
                type: NumberConstructor;
                default: number;
            };
            push: {
                type: NumberConstructor;
                default: number;
            };
            sm: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            span: {
                type: NumberConstructor;
                default: number;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            xl: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            xs: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            xxl: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
        }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
        flex: {
            type: import("vue").PropType<string | number>;
        };
        lg: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        md: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        offset: {
            type: NumberConstructor;
            default: number;
        };
        order: {
            type: NumberConstructor;
            default: number;
        };
        pull: {
            type: NumberConstructor;
            default: number;
        };
        push: {
            type: NumberConstructor;
            default: number;
        };
        sm: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        span: {
            type: NumberConstructor;
            default: number;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        xl: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        xs: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        xxl: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
        push: number;
        offset: number;
        order: number;
        span: number;
        tag: string;
        pull: number;
    }, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
};
export default _default;
