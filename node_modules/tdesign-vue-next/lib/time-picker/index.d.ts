import { TdTimePickerProps, TdTimeRangePickerProps } from './type';
import './style';
export * from './type';
export declare type TimePickerProps = TdTimePickerProps;
export declare type TimeRangePickerProps = TdTimeRangePickerProps;
export declare const TimePicker: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: string;
            disabled: boolean;
            size: "small" | "medium" | "large";
            placeholder: string;
            format: string;
            modelValue: string;
            steps: (string | number)[];
            defaultValue: string;
            clearable: boolean;
            allowInput: boolean;
            hideDisabledTime: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            allowInput: BooleanConstructor;
            clearable: BooleanConstructor;
            disableTime: {
                type: import("vue").PropType<(h: number, m: number, s: number) => Partial<{
                    hour: number[];
                    minute: number[];
                    second: number[];
                }>>;
            };
            disabled: BooleanConstructor;
            format: {
                type: StringConstructor;
                default: string;
            };
            hideDisabledTime: {
                type: BooleanConstructor;
                default: boolean;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            presets: {
                type: import("vue").PropType<import("./type").PresetTime>;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            steps: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            value: {
                type: StringConstructor;
                default: any;
            };
            modelValue: {
                type: StringConstructor;
                default: any;
            };
            defaultValue: {
                type: StringConstructor;
                default: string;
            };
            onBlur: import("vue").PropType<(context: {
                value: string;
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: string) => void>;
            onClose: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onFocus: import("vue").PropType<(context: {
                value: string;
                e: FocusEvent;
            }) => void>;
            onInput: import("vue").PropType<(context: {
                value: string;
                e: InputEvent;
            }) => void>;
            onOpen: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onPick: import("vue").PropType<(value: string) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "size" | "placeholder" | "format" | "modelValue" | "steps" | "defaultValue" | "clearable" | "allowInput" | "hideDisabledTime">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            allowInput: BooleanConstructor;
            clearable: BooleanConstructor;
            disableTime: {
                type: import("vue").PropType<(h: number, m: number, s: number) => Partial<{
                    hour: number[];
                    minute: number[];
                    second: number[];
                }>>;
            };
            disabled: BooleanConstructor;
            format: {
                type: StringConstructor;
                default: string;
            };
            hideDisabledTime: {
                type: BooleanConstructor;
                default: boolean;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            presets: {
                type: import("vue").PropType<import("./type").PresetTime>;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            steps: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            value: {
                type: StringConstructor;
                default: any;
            };
            modelValue: {
                type: StringConstructor;
                default: any;
            };
            defaultValue: {
                type: StringConstructor;
                default: string;
            };
            onBlur: import("vue").PropType<(context: {
                value: string;
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: string) => void>;
            onClose: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onFocus: import("vue").PropType<(context: {
                value: string;
                e: FocusEvent;
            }) => void>;
            onInput: import("vue").PropType<(context: {
                value: string;
                e: InputEvent;
            }) => void>;
            onOpen: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onPick: import("vue").PropType<(value: string) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: string;
            disabled: boolean;
            size: "small" | "medium" | "large";
            placeholder: string;
            format: string;
            modelValue: string;
            steps: (string | number)[];
            defaultValue: string;
            clearable: boolean;
            allowInput: boolean;
            hideDisabledTime: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<(h: number, m: number, s: number) => Partial<{
                hour: number[];
                minute: number[];
                second: number[];
            }>>;
        };
        disabled: BooleanConstructor;
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").TdInputProps>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetTime>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        steps: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onBlur: import("vue").PropType<(context: {
            value: string;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string) => void>;
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: string;
            e: FocusEvent;
        }) => void>;
        onInput: import("vue").PropType<(context: {
            value: string;
            e: InputEvent;
        }) => void>;
        onOpen: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPick: import("vue").PropType<(value: string) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number) => Partial<{
            hour: number[];
            minute: number[];
            second: number[];
        }>>;
    };
    disabled: BooleanConstructor;
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetTime>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    steps: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onBlur: import("vue").PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string) => void>;
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        value: string;
        e: InputEvent;
    }) => void>;
    onOpen: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPick: import("vue").PropType<(value: string) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: string;
    disabled: boolean;
    size: "small" | "medium" | "large";
    placeholder: string;
    format: string;
    modelValue: string;
    steps: (string | number)[];
    defaultValue: string;
    clearable: boolean;
    allowInput: boolean;
    hideDisabledTime: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const TimeRangePicker: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: import("./type").TimeRangeValue;
            disabled: boolean | boolean[];
            size: "small" | "medium" | "large";
            placeholder: string | string[];
            format: string;
            modelValue: import("./type").TimeRangeValue;
            steps: (string | number)[];
            clearable: boolean;
            allowInput: boolean;
            hideDisabledTime: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            rangeInputProps: ObjectConstructor;
            popupProps: ObjectConstructor;
            allowInput: BooleanConstructor;
            clearable: BooleanConstructor;
            disableTime: {
                type: import("vue").PropType<(h: number, m: number, s: number, context: {
                    partial: import("./type").TimeRangePickerPartial;
                }) => Partial<{
                    hour: number[];
                    minute: number[];
                    second: number[];
                }>>;
            };
            disabled: {
                type: import("vue").PropType<boolean | boolean[]>;
                default: boolean;
            };
            format: {
                type: StringConstructor;
                default: string;
            };
            hideDisabledTime: {
                type: BooleanConstructor;
                default: boolean;
            };
            placeholder: {
                type: import("vue").PropType<string | string[]>;
                default: any;
            };
            presets: {
                type: import("vue").PropType<import("./type").PresetTimeRange>;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            steps: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            value: {
                type: import("vue").PropType<import("./type").TimeRangeValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TimeRangeValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TimeRangeValue>;
            };
            onBlur: import("vue").PropType<(context: {
                value: import("./type").TimeRangeValue;
                e?: FocusEvent;
                position?: import("./type").TimeRangePickerPartial;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").TimeRangeValue) => void>;
            onFocus: import("vue").PropType<(context?: {
                value: import("./type").TimeRangeValue;
                e?: FocusEvent;
                position?: import("./type").TimeRangePickerPartial;
            }) => void>;
            onInput: import("vue").PropType<(context: {
                value: import("./type").TimeRangeValue;
                e?: InputEvent;
                position?: import("./type").TimeRangePickerPartial;
            }) => void>;
            onPick: import("vue").PropType<(value: import("./type").TimeRangeValue, context: {
                position?: import("./type").TimeRangePickerPartial;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "size" | "placeholder" | "format" | "modelValue" | "steps" | "clearable" | "allowInput" | "hideDisabledTime">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            rangeInputProps: ObjectConstructor;
            popupProps: ObjectConstructor;
            allowInput: BooleanConstructor;
            clearable: BooleanConstructor;
            disableTime: {
                type: import("vue").PropType<(h: number, m: number, s: number, context: {
                    partial: import("./type").TimeRangePickerPartial;
                }) => Partial<{
                    hour: number[];
                    minute: number[];
                    second: number[];
                }>>;
            };
            disabled: {
                type: import("vue").PropType<boolean | boolean[]>;
                default: boolean;
            };
            format: {
                type: StringConstructor;
                default: string;
            };
            hideDisabledTime: {
                type: BooleanConstructor;
                default: boolean;
            };
            placeholder: {
                type: import("vue").PropType<string | string[]>;
                default: any;
            };
            presets: {
                type: import("vue").PropType<import("./type").PresetTimeRange>;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            steps: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            value: {
                type: import("vue").PropType<import("./type").TimeRangeValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TimeRangeValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TimeRangeValue>;
            };
            onBlur: import("vue").PropType<(context: {
                value: import("./type").TimeRangeValue;
                e?: FocusEvent;
                position?: import("./type").TimeRangePickerPartial;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").TimeRangeValue) => void>;
            onFocus: import("vue").PropType<(context?: {
                value: import("./type").TimeRangeValue;
                e?: FocusEvent;
                position?: import("./type").TimeRangePickerPartial;
            }) => void>;
            onInput: import("vue").PropType<(context: {
                value: import("./type").TimeRangeValue;
                e?: InputEvent;
                position?: import("./type").TimeRangePickerPartial;
            }) => void>;
            onPick: import("vue").PropType<(value: import("./type").TimeRangeValue, context: {
                position?: import("./type").TimeRangePickerPartial;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: import("./type").TimeRangeValue;
            disabled: boolean | boolean[];
            size: "small" | "medium" | "large";
            placeholder: string | string[];
            format: string;
            modelValue: import("./type").TimeRangeValue;
            steps: (string | number)[];
            clearable: boolean;
            allowInput: boolean;
            hideDisabledTime: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        rangeInputProps: ObjectConstructor;
        popupProps: ObjectConstructor;
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<(h: number, m: number, s: number, context: {
                partial: import("./type").TimeRangePickerPartial;
            }) => Partial<{
                hour: number[];
                minute: number[];
                second: number[];
            }>>;
        };
        disabled: {
            type: import("vue").PropType<boolean | boolean[]>;
            default: boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
            default: any;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetTimeRange>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        steps: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        value: {
            type: import("vue").PropType<import("./type").TimeRangeValue>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TimeRangeValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TimeRangeValue>;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").TimeRangeValue;
            e?: FocusEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TimeRangeValue) => void>;
        onFocus: import("vue").PropType<(context?: {
            value: import("./type").TimeRangeValue;
            e?: FocusEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
        onInput: import("vue").PropType<(context: {
            value: import("./type").TimeRangeValue;
            e?: InputEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
        onPick: import("vue").PropType<(value: import("./type").TimeRangeValue, context: {
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    rangeInputProps: ObjectConstructor;
    popupProps: ObjectConstructor;
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number, context: {
            partial: import("./type").TimeRangePickerPartial;
        }) => Partial<{
            hour: number[];
            minute: number[];
            second: number[];
        }>>;
    };
    disabled: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
        default: any;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetTimeRange>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    steps: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    value: {
        type: import("vue").PropType<import("./type").TimeRangeValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TimeRangeValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TimeRangeValue>;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").TimeRangeValue;
        e?: FocusEvent;
        position?: import("./type").TimeRangePickerPartial;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TimeRangeValue) => void>;
    onFocus: import("vue").PropType<(context?: {
        value: import("./type").TimeRangeValue;
        e?: FocusEvent;
        position?: import("./type").TimeRangePickerPartial;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        value: import("./type").TimeRangeValue;
        e?: InputEvent;
        position?: import("./type").TimeRangePickerPartial;
    }) => void>;
    onPick: import("vue").PropType<(value: import("./type").TimeRangeValue, context: {
        position?: import("./type").TimeRangePickerPartial;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").TimeRangeValue;
    disabled: boolean | boolean[];
    size: "small" | "medium" | "large";
    placeholder: string | string[];
    format: string;
    modelValue: import("./type").TimeRangeValue;
    steps: (string | number)[];
    clearable: boolean;
    allowInput: boolean;
    hideDisabledTime: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const TimePickerPanel: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: string;
            disabled: boolean;
            format: string;
            steps: (string | number)[];
            isShowPanel: boolean;
            hideDisabledTime: boolean;
            isFooterDisplay: boolean;
            isFocus: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            isFooterDisplay: BooleanConstructor;
            handleConfirmClick: FunctionConstructor;
            onChange: FunctionConstructor;
            disabled: {
                default: boolean;
                type: BooleanConstructor;
                validator(v: boolean): boolean;
            };
            isFocus: {
                default: boolean;
                type: BooleanConstructor;
                validator(v: boolean): boolean;
            };
            value: {
                type: StringConstructor;
                default: string;
            };
            format: {
                type: StringConstructor;
                default: string;
            };
            steps: {
                default: number[];
                type: import("vue").PropType<(string | number)[]>;
            };
            isShowPanel: {
                default: boolean;
                type: BooleanConstructor;
                validator(v: boolean): boolean;
            };
            hideDisabledTime: {
                type: BooleanConstructor;
                default: boolean;
            };
            disableTime: {
                type: FunctionConstructor;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "format" | "steps" | "isShowPanel" | "hideDisabledTime" | "isFooterDisplay" | "isFocus">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            isFooterDisplay: BooleanConstructor;
            handleConfirmClick: FunctionConstructor;
            onChange: FunctionConstructor;
            disabled: {
                default: boolean;
                type: BooleanConstructor;
                validator(v: boolean): boolean;
            };
            isFocus: {
                default: boolean;
                type: BooleanConstructor;
                validator(v: boolean): boolean;
            };
            value: {
                type: StringConstructor;
                default: string;
            };
            format: {
                type: StringConstructor;
                default: string;
            };
            steps: {
                default: number[];
                type: import("vue").PropType<(string | number)[]>;
            };
            isShowPanel: {
                default: boolean;
                type: BooleanConstructor;
                validator(v: boolean): boolean;
            };
            hideDisabledTime: {
                type: BooleanConstructor;
                default: boolean;
            };
            disableTime: {
                type: FunctionConstructor;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: string;
            disabled: boolean;
            format: string;
            steps: (string | number)[];
            isShowPanel: boolean;
            hideDisabledTime: boolean;
            isFooterDisplay: boolean;
            isFocus: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        isFooterDisplay: BooleanConstructor;
        handleConfirmClick: FunctionConstructor;
        onChange: FunctionConstructor;
        disabled: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        isFocus: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        steps: {
            default: number[];
            type: import("vue").PropType<(string | number)[]>;
        };
        isShowPanel: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableTime: {
            type: FunctionConstructor;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    isFooterDisplay: BooleanConstructor;
    handleConfirmClick: FunctionConstructor;
    onChange: FunctionConstructor;
    disabled: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    isFocus: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    value: {
        type: StringConstructor;
        default: string;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    steps: {
        default: number[];
        type: import("vue").PropType<(string | number)[]>;
    };
    isShowPanel: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableTime: {
        type: FunctionConstructor;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: string;
    disabled: boolean;
    format: string;
    steps: (string | number)[];
    isShowPanel: boolean;
    hideDisabledTime: boolean;
    isFooterDisplay: boolean;
    isFocus: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default TimePicker;
