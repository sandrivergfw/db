import { TdTextareaProps } from './type';
import './style';
export * from './type';
export declare type TextareaProps = TdTextareaProps;
export declare const Textarea: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            name: string;
            autofocus: boolean;
            disabled: boolean;
            readonly: boolean;
            placeholder: string;
            autosize: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            autofocus: BooleanConstructor;
            autosize: {
                type: import("vue").PropType<boolean | {
                    minRows?: number;
                    maxRows?: number;
                }>;
                default: boolean;
            };
            disabled: BooleanConstructor;
            maxcharacter: {
                type: NumberConstructor;
            };
            maxlength: {
                type: NumberConstructor;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            readonly: BooleanConstructor;
            status: {
                type: import("vue").PropType<"error" | "success" | "warning">;
                validator(val: "error" | "success" | "warning"): boolean;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").TextareaValue>;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TextareaValue>;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TextareaValue>;
            };
            onBlur: import("vue").PropType<(value: import("./type").TextareaValue, context: {
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").TextareaValue, context?: {
                e?: InputEvent;
            }) => void>;
            onFocus: import("vue").PropType<(value: import("./type").TextareaValue, context: {
                e: FocusEvent;
            }) => void>;
            onKeydown: import("vue").PropType<(value: import("./type").TextareaValue, context: {
                e: KeyboardEvent;
            }) => void>;
            onKeypress: import("vue").PropType<(value: import("./type").TextareaValue, context: {
                e: KeyboardEvent;
            }) => void>;
            onKeyup: import("vue").PropType<(value: import("./type").TextareaValue, context: {
                e: KeyboardEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "name" | "autofocus" | "disabled" | "readonly" | "placeholder" | "autosize">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            autofocus: BooleanConstructor;
            autosize: {
                type: import("vue").PropType<boolean | {
                    minRows?: number;
                    maxRows?: number;
                }>;
                default: boolean;
            };
            disabled: BooleanConstructor;
            maxcharacter: {
                type: NumberConstructor;
            };
            maxlength: {
                type: NumberConstructor;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            readonly: BooleanConstructor;
            status: {
                type: import("vue").PropType<"error" | "success" | "warning">;
                validator(val: "error" | "success" | "warning"): boolean;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").TextareaValue>;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TextareaValue>;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TextareaValue>;
            };
            onBlur: import("vue").PropType<(value: import("./type").TextareaValue, context: {
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").TextareaValue, context?: {
                e?: InputEvent;
            }) => void>;
            onFocus: import("vue").PropType<(value: import("./type").TextareaValue, context: {
                e: FocusEvent;
            }) => void>;
            onKeydown: import("vue").PropType<(value: import("./type").TextareaValue, context: {
                e: KeyboardEvent;
            }) => void>;
            onKeypress: import("vue").PropType<(value: import("./type").TextareaValue, context: {
                e: KeyboardEvent;
            }) => void>;
            onKeyup: import("vue").PropType<(value: import("./type").TextareaValue, context: {
                e: KeyboardEvent;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            name: string;
            autofocus: boolean;
            disabled: boolean;
            readonly: boolean;
            placeholder: string;
            autosize: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: boolean;
        };
        disabled: BooleanConstructor;
        maxcharacter: {
            type: NumberConstructor;
        };
        maxlength: {
            type: NumberConstructor;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        readonly: BooleanConstructor;
        status: {
            type: import("vue").PropType<"error" | "success" | "warning">;
            validator(val: "error" | "success" | "warning"): boolean;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").TextareaValue>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TextareaValue>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TextareaValue>;
        };
        onBlur: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TextareaValue, context?: {
            e?: InputEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: FocusEvent;
        }) => void>;
        onKeydown: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeypress: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeyup: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: KeyboardEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autofocus: BooleanConstructor;
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: boolean;
    };
    disabled: BooleanConstructor;
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "success" | "warning">;
        validator(val: "error" | "success" | "warning"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").TextareaValue>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TextareaValue>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TextareaValue>;
    };
    onBlur: import("vue").PropType<(value: import("./type").TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TextareaValue, context?: {
        e?: InputEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: import("./type").TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: import("./type").TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: import("./type").TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    name: string;
    autofocus: boolean;
    disabled: boolean;
    readonly: boolean;
    placeholder: string;
    autosize: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Textarea;
