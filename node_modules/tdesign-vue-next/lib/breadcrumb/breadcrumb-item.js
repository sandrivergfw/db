/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, ref, inject, computed, onMounted, onBeforeUpdate, createVNode, getCurrentInstance, mergeProps, isVNode } from 'vue';
import { ChevronRightIcon } from 'tdesign-icons-vue-next';
import props from './breadcrumb-item-props.js';
import { Tooltip } from '../tooltip/index.js';
import { isNodeOverflow } from '../utils/dom.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { useGlobalIcon } from '../hooks/useGlobalIcon.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import '../tooltip/tooltip.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isFunction';
import '../tooltip/props.js';
import '../popup/props.js';
import '../popup/index.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/typeof';
import '@popperjs/core';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../_common/js/utils/set-style.js';
import '../popup/container.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../hooks/useVModel.js';
import '../utils/withInstall.js';
import '../config-provider/useConfig.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-010ef7cd.js';
import '../utils/easing.js';
import '../tooltip/util.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var localTBreadcrumbOrigin = {
  separator: "",
  theme: "light",
  slots: {
    separator: ""
  },
  maxItemWidth: void 0
};
var _BreadcrumbItem = defineComponent({
  name: "TBreadcrumbItem",
  props: _objectSpread({}, props),
  setup: function setup(props2, _ref) {
    var _localTBreadcrumb$slo;
    var slots = _ref.slots,
      attrs = _ref.attrs;
    var breadcrumbText = ref();
    var localTBreadcrumb = inject("tBreadcrumb", localTBreadcrumbOrigin);
    var themeClassName = ref(localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.theme);
    var isCutOff = ref(false);
    var COMPONENT_NAME = usePrefixClass("breadcrumb__item");
    var separatorClass = usePrefixClass("breadcrumb__separator");
    var disableClass = usePrefixClass("is-disabled");
    var linkClass = usePrefixClass("link");
    var maxLengthClass = usePrefixClass("breadcrumb__inner");
    var textFlowClass = usePrefixClass("breadcrumb--text-overflow");
    var _useGlobalIcon = useGlobalIcon({
        ChevronRightIcon: ChevronRightIcon
      }),
      ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;
    var maxWithStyle = computed(function () {
      var maxItemWidth = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.maxItemWidth;
      var maxWith = props2.maxWidth || maxItemWidth || "120";
      return {
        maxWidth: "".concat(maxWith, "px")
      };
    });
    onMounted(function () {
      isCutOff.value = isNodeOverflow(breadcrumbText.value);
    });
    onBeforeUpdate(function () {
      isCutOff.value = isNodeOverflow(breadcrumbText.value);
    });
    var separatorPropContent = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.separator;
    var separatorSlot = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : (_localTBreadcrumb$slo = localTBreadcrumb.slots) === null || _localTBreadcrumb$slo === void 0 ? void 0 : _localTBreadcrumb$slo.separator;
    var separatorContent = separatorPropContent || separatorSlot || createVNode(ChevronRightIcon$1, {
      color: "rgba(0,0,0,.3)"
    }, null);
    var _getCurrentInstance = getCurrentInstance(),
      proxy = _getCurrentInstance.proxy;
    var bindEvent = function bindEvent(e) {
      if (!props2.disabled) {
        e.preventDefault();
        if (props2.href) {
          window.location.href = props2.href;
        }
        var router = props2.router || proxy.$root.$router;
        if (props2.to && router) {
          props2.replace ? router.replace(props2.to) : router.push(props2.to);
        }
      }
    };
    return function () {
      var renderTNodeJSX = useTNodeJSX();
      var itemClass = [COMPONENT_NAME.value, themeClassName.value];
      var textClass = [textFlowClass.value];
      if (props2.disabled) {
        textClass.push(disableClass.value);
      }
      var listeners = {
        onClick: function onClick(e) {
          var _props2$onClick;
          if (props2.disabled) {
            e.stopPropagation();
            return;
          }
          (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
            e: e
          });
        }
      };
      var textContent = createVNode("span", {
        "class": maxLengthClass.value,
        style: maxWithStyle.value
      }, [renderTNodeJSX("icon"), createVNode("span", {
        "ref": breadcrumbText,
        "class": "".concat(maxLengthClass.value, "-text")
      }, [renderTNodeJSX("default")])]);
      var itemContent = createVNode("span", _objectSpread({
        "class": textClass
      }, listeners), [textContent]);
      if ((props2.href || props2.to) && !props2.disabled) {
        textClass.push(linkClass.value);
        itemContent = createVNode("a", mergeProps({
          "class": textClass,
          "href": props2.href,
          "target": props2.target
        }, listeners, {
          "onClick": bindEvent
        }), [textContent]);
      }
      return createVNode("div", mergeProps({
        "class": itemClass
      }, attrs), [isCutOff.value ? createVNode(Tooltip, {
        "content": function content() {
          return slots === null || slots === void 0 ? void 0 : slots["default"]();
        }
      }, _isSlot(itemContent) ? itemContent : {
        "default": function _default() {
          return [itemContent];
        }
      }) : itemContent, createVNode("span", {
        "class": separatorClass.value
      }, [typeof separatorContent === "function" ? separatorContent() : separatorContent])]);
    };
  }
});

export { _BreadcrumbItem as default };
//# sourceMappingURL=breadcrumb-item.js.map
