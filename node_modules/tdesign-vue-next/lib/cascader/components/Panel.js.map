{"version":3,"file":"Panel.js","sources":["../../../src/cascader/components/Panel.tsx"],"sourcesContent":["import { defineComponent, PropType, computed } from 'vue';\n\nimport Item from './Item';\nimport { TreeNode, CascaderContextType } from '../interface';\nimport CascaderProps from '../props';\nimport { usePrefixClass, useConfig } from '../../hooks/useConfig';\nimport { useTNodeDefault } from '../../hooks/tnode';\n\nimport { getPanels } from '../core/helper';\nimport { expendClickEffect, valueChangeEffect } from '../core/effect';\n\nexport default defineComponent({\n  name: 'TCascaderSubPanel',\n  props: {\n    empty: CascaderProps.empty,\n    trigger: CascaderProps.trigger,\n    onChange: CascaderProps.onChange,\n    loading: CascaderProps.loading,\n    loadingText: CascaderProps.loadingText,\n    cascaderContext: {\n      type: Object as PropType<CascaderContextType>,\n    },\n  },\n\n  setup(props) {\n    const renderTNodeJSXDefault = useTNodeDefault();\n    const COMPONENT_NAME = usePrefixClass('cascader');\n    const { globalConfig, t } = useConfig('cascader');\n\n    const panels = computed(() => getPanels(props.cascaderContext.treeNodes));\n\n    const handleExpand = (node: TreeNode, trigger: 'hover' | 'click') => {\n      const { trigger: propsTrigger, cascaderContext } = props;\n      expendClickEffect(propsTrigger, trigger, node, cascaderContext);\n    };\n\n    const renderItem = (node: TreeNode) => (\n      <Item\n        key={node.value}\n        node={node}\n        cascaderContext={props.cascaderContext}\n        onClick={() => {\n          handleExpand(node, 'click');\n        }}\n        onMouseenter={() => {\n          handleExpand(node, 'hover');\n        }}\n        onChange={() => {\n          valueChangeEffect(node, props.cascaderContext);\n        }}\n      />\n    );\n\n    const renderList = (treeNodes: TreeNode[], isFilter = false, segment = true, key = '1') => (\n      <ul\n        class={[\n          `${COMPONENT_NAME.value}__menu`,\n          'narrow-scrollbar',\n          {\n            [`${COMPONENT_NAME.value}__menu--segment`]: segment,\n            [`${COMPONENT_NAME.value}__menu--filter`]: isFilter,\n          },\n        ]}\n        key={key}\n      >\n        {treeNodes.map((node: TreeNode) => renderItem(node))}\n      </ul>\n    );\n\n    const renderPanels = () => {\n      const { inputVal, treeNodes } = props.cascaderContext;\n      return inputVal\n        ? renderList(treeNodes, true)\n        : panels.value.map((treeNodes, index: number) =>\n            renderList(treeNodes, false, index !== panels.value.length - 1, `${COMPONENT_NAME.value}__menu${index}`),\n          );\n    };\n\n    return () => {\n      let content;\n      if (props.loading) {\n        content = renderTNodeJSXDefault(\n          'loadingText',\n          <div class={`${COMPONENT_NAME.value}__panel--empty`}>{globalConfig.value.loadingText}</div>,\n        );\n      } else {\n        content = panels.value.length\n          ? renderPanels()\n          : renderTNodeJSXDefault(\n              'empty',\n              <div class={`${COMPONENT_NAME.value}__panel--empty`}>{globalConfig.value.empty}</div>,\n            );\n      }\n      return (\n        <div\n          class={[\n            `${COMPONENT_NAME.value}__panel`,\n            { [`${COMPONENT_NAME.value}--normal`]: panels.value.length && !props.loading },\n          ]}\n        >\n          {content}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["defineComponent","name","props","empty","CascaderProps","trigger","onChange","loading","loadingText","cascaderContext","type","Object","setup","renderTNodeJSXDefault","useTNodeDefault","COMPONENT_NAME","usePrefixClass","useConfig","globalConfig","t","panels","computed","getPanels","treeNodes","handleExpand","node","propsTrigger","expendClickEffect","renderItem","_createVNode","value","valueChangeEffect","renderList","isFilter","segment","key","map","renderPanels","inputVal","index","length","content"],"mappings":"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"}