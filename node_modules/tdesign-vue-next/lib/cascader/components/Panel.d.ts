import { PropType } from 'vue';
import { CascaderContextType } from '../interface';
declare const _default: import("vue").DefineComponent<{
    empty: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue)>;
    };
    trigger: {
        type: PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    onChange: PropType<(value: import("../type").CascaderValue<import("../../common").TreeOptionData>, context: import("../type").CascaderChangeContext<import("../../common").TreeOptionData>) => void>;
    loading: BooleanConstructor;
    loadingText: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue)>;
        default: string;
    };
    cascaderContext: {
        type: PropType<CascaderContextType>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    empty: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue)>;
    };
    trigger: {
        type: PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    onChange: PropType<(value: import("../type").CascaderValue<import("../../common").TreeOptionData>, context: import("../type").CascaderChangeContext<import("../../common").TreeOptionData>) => void>;
    loading: BooleanConstructor;
    loadingText: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue)>;
        default: string;
    };
    cascaderContext: {
        type: PropType<CascaderContextType>;
    };
}>>, {
    loading: boolean;
    trigger: "click" | "hover";
    loadingText: string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue);
}>;
export default _default;
