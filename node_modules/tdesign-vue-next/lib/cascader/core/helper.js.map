{"version":3,"file":"helper.js","sources":["../../../src/cascader/core/helper.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport {\n  TreeNode,\n  CascaderContextType,\n  TdCascaderProps,\n  CascaderValue,\n  TreeNodeValue,\n  TreeOptionData,\n} from '../interface';\n\n/**\n * 单选状态下内容\n * @param isHover\n * @param cascaderContext\n * @returns\n */\nexport function getSingleContent(cascaderContext: CascaderContextType): string {\n  const { value, multiple, treeStore, showAllLevels } = cascaderContext;\n  if (multiple || !value) return '';\n\n  if (Array.isArray(value)) return '';\n  const node = treeStore && treeStore.getNodes(value as TreeNodeValue | TreeNode);\n  if (!(node && node.length)) {\n    return value as string;\n  }\n  const path = node && node[0].getPath();\n  if (path && path.length) {\n    return showAllLevels ? path.map((node: TreeNode) => node.label).join(' / ') : path[path.length - 1].label;\n  }\n  return value as string;\n}\n\n/**\n * 多选状态下选中内容\n * @param isHover\n * @param cascaderContext\n * @returns\n */\nexport function getMultipleContent(cascaderContext: CascaderContextType) {\n  const { value, multiple, treeStore, showAllLevels } = cascaderContext;\n\n  if (!multiple) return [];\n  if (multiple && !Array.isArray(value)) return [];\n\n  const node = treeStore && treeStore.getNodes(value as TreeNodeValue | TreeNode);\n  if (!node) return [];\n\n  return (value as TreeNodeValue[])\n    .map((item: TreeNodeValue) => {\n      const node = treeStore.getNodes(item);\n      return showAllLevels ? getFullPathLabel(node[0]) : node[0].label;\n    })\n    .filter((item) => !!item);\n}\n\n/**\n * 面板数据计算方法\n * @param treeNodes\n * @returns\n */\nexport function getPanels(treeNodes: CascaderContextType['treeNodes']) {\n  const panels: TreeNode[][] = [];\n  treeNodes.forEach((node: TreeNode) => {\n    if (panels[node.level]) {\n      panels[node.level].push(node);\n    } else {\n      panels[node.level] = [node];\n    }\n  });\n  return panels;\n}\n\n/**\n * 获取node的全部路径\n * @param node\n * @returns\n */\nexport function getFullPathLabel(node: TreeNode, separator = '/') {\n  return node\n    ?.getPath()\n    .map((node: TreeNode) => node.label)\n    .join(separator);\n}\n\n/**\n * treeValue计算方法\n * @param value\n * @returns\n */\nexport const getTreeValue = (value: CascaderContextType['value']) => {\n  let treeValue: TreeNodeValue[] = [];\n  if (Array.isArray(value)) {\n    if (value.length > 0 && typeof value[0] === 'object') {\n      treeValue = (value as TreeOptionData[]).map((val) => val.value);\n    } else if (value.length) {\n      treeValue = value as TreeNodeValue[];\n    }\n  } else if (value) {\n    if (typeof value === 'object') {\n      treeValue = [(value as TreeOptionData).value];\n    } else {\n      treeValue = [value];\n    }\n  }\n  return treeValue;\n};\n\n/**\n * 按数据类型计算通用数值\n * @param value\n * @param showAllLevels\n * @param multiple\n * @returns\n */\nexport const getCascaderValue = (value: CascaderValue, valueType: TdCascaderProps['valueType'], multiple: boolean) => {\n  if (valueType === 'single') {\n    return value;\n  }\n  if (multiple) {\n    return (value as Array<CascaderValue>).map((item: TreeNodeValue[]) => item[item.length - 1]);\n  }\n  return value[(value as Array<CascaderValue>).length - 1];\n};\n\n/**\n * 空值校验\n * 补充value为Number时的空值校验逻辑，排除NaN\n * @param value\n * @returns\n */\nexport function isEmptyValues(value: unknown): boolean {\n  if (typeof value === 'number' && !isNaN(value)) return false;\n  return isEmpty(value);\n}\n\n/**\n * 初始化数据校验\n * @param value\n * @param cascaderContext\n * @returns boolean\n */\nexport function isValueInvalid(value: CascaderValue, cascaderContext: CascaderContextType) {\n  const { multiple, showAllLevels } = cascaderContext;\n  return (multiple && !Array.isArray(value)) || (!multiple && Array.isArray(value) && !showAllLevels);\n}\n"],"names":["getSingleContent","cascaderContext","value","multiple","treeStore","showAllLevels","Array","isArray","node","getNodes","length","path","getPath","map","label","join","getMultipleContent","item","getFullPathLabel","filter","getPanels","treeNodes","panels","forEach","level","push","separator","getTreeValue","treeValue","val","getCascaderValue","valueType","isEmptyValues","isNaN","isEmpty","isValueInvalid"],"mappings":"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"}