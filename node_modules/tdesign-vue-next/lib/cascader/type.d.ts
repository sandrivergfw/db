import { CheckboxProps } from '../checkbox';
import { InputProps } from '../input';
import { PopupProps } from '../popup';
import { SelectInputProps } from '../select-input';
import { TagInputProps } from '../tag-input';
import { TagProps } from '../tag';
import { TreeNodeModel } from '../tree';
import { PopupVisibleChangeContext } from '../popup';
import { TNode, TreeOptionData, SizeEnum } from '../common';
export interface TdCascaderProps<CascaderOption extends TreeOptionData = TreeOptionData> {
    checkProps?: CheckboxProps;
    checkStrictly?: boolean;
    clearable?: boolean;
    collapsedItems?: TNode<{
        value: CascaderOption[];
        collapsedSelectedItems: CascaderOption[];
        count: number;
    }>;
    disabled?: boolean;
    empty?: string | TNode;
    filter?: (filterWords: string, node: TreeNodeModel) => boolean | Promise<boolean>;
    filterable?: boolean;
    inputProps?: InputProps;
    keys?: CascaderKeysType;
    lazy?: boolean;
    load?: (node: TreeNodeModel<CascaderOption>) => Promise<Array<CascaderOption>>;
    loading?: boolean;
    loadingText?: string | TNode;
    max?: number;
    minCollapsedNum?: number;
    multiple?: boolean;
    options?: Array<CascaderOption>;
    placeholder?: string;
    popupProps?: PopupProps;
    popupVisible?: boolean;
    readonly?: boolean;
    selectInputProps?: SelectInputProps;
    showAllLevels?: boolean;
    size?: SizeEnum;
    status?: 'default' | 'success' | 'warning' | 'error';
    tagInputProps?: TagInputProps;
    tagProps?: TagProps;
    tips?: string | TNode;
    trigger?: 'click' | 'hover';
    value?: CascaderValue<CascaderOption>;
    defaultValue?: CascaderValue<CascaderOption>;
    modelValue?: CascaderValue<CascaderOption>;
    valueMode?: 'onlyLeaf' | 'parentFirst' | 'all';
    valueType?: 'single' | 'full';
    onBlur?: (context: {
        value: CascaderValue<CascaderOption>;
        e: FocusEvent;
    }) => void;
    onChange?: (value: CascaderValue<CascaderOption>, context: CascaderChangeContext<CascaderOption>) => void;
    onFocus?: (context: {
        value: CascaderValue<CascaderOption>;
        e: FocusEvent;
    }) => void;
    onPopupVisibleChange?: (visible: boolean, context: PopupVisibleChangeContext) => void;
    onRemove?: (context: RemoveContext<CascaderOption>) => void;
}
export interface CascaderKeysType {
    value?: string;
    label?: string;
    children?: string | boolean;
}
export declare type CascaderValue<T extends TreeOptionData = TreeOptionData> = string | number | T | Array<CascaderValue<T>>;
export interface CascaderChangeContext<CascaderOption> {
    node?: TreeNodeModel<CascaderOption>;
    source: CascaderChangeSource;
}
export declare type CascaderChangeSource = 'invalid-value' | 'check' | 'clear' | 'uncheck';
export interface RemoveContext<T> {
    value: CascaderValue<T>;
    node: TreeNodeModel<T>;
}
