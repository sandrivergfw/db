{"version":3,"file":"hooks.js","sources":["../../src/cascader/hooks.ts"],"sourcesContent":["import { Ref, reactive, computed, toRefs, watch, nextTick } from 'vue';\nimport isEqual from 'lodash/isEqual';\nimport isFunction from 'lodash/isFunction';\n\nimport TreeStore from '../_common/js/tree/tree-store';\nimport { useFormDisabled } from '../form/hooks';\nimport useVModel from '../hooks/useVModel';\nimport useDefaultValue from '../hooks/useDefaultValue';\nimport { getTreeValue, getCascaderValue, isEmptyValues, isValueInvalid } from './core/helper';\nimport { treeNodesEffect, treeStoreExpendEffect } from './core/effect';\n\nimport {\n  TreeNode,\n  TreeNodeValue,\n  TdCascaderProps,\n  TreeNodeModel,\n  CascaderChangeSource,\n  CascaderValue,\n} from './interface';\n\n// 全局状态\nexport const useContext = (\n  props: TdCascaderProps,\n  setInnerValue: TdCascaderProps['onChange'],\n  innerPopupVisible: Ref<TdCascaderProps['popupVisible']>,\n  setPopupVisible: TdCascaderProps['onPopupVisibleChange'],\n) => {\n  const statusContext = reactive({\n    treeStore: null,\n    inputVal: null,\n    scopeVal: undefined,\n    treeNodes: [],\n    expend: [],\n  });\n\n  return {\n    statusContext,\n    cascaderContext: computed(() => {\n      const {\n        size,\n        checkStrictly,\n        lazy,\n        multiple,\n        filterable,\n        clearable,\n        checkProps,\n        max,\n        disabled,\n        showAllLevels,\n        minCollapsedNum,\n        valueType,\n      } = props;\n      return {\n        value: statusContext.scopeVal,\n        size,\n        checkStrictly,\n        lazy,\n        multiple,\n        filterable,\n        clearable,\n        checkProps,\n        max,\n        disabled,\n        showAllLevels,\n        minCollapsedNum,\n        valueType,\n        visible: innerPopupVisible.value,\n        ...statusContext,\n        setTreeNodes: (nodes: TreeNode[]) => {\n          statusContext.treeNodes = nodes;\n        },\n        setValue: (val: CascaderValue, source: CascaderChangeSource, node?: TreeNodeModel) => {\n          if (isEqual(val, statusContext.scopeVal)) return;\n          setInnerValue(val, { source, node });\n        },\n        setVisible: setPopupVisible,\n        setInputVal: (val: string) => {\n          statusContext.inputVal = val;\n        },\n        setExpend: (val: TreeNodeValue[]) => {\n          statusContext.expend = val;\n        },\n      };\n    }),\n  };\n};\n\n// 内聚组件核心的副作用与状态处理\nexport const useCascaderContext = (props: TdCascaderProps) => {\n  const disabled = useFormDisabled();\n  const { value, modelValue, popupVisible } = toRefs(props);\n  const [innerValue, setInnerValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n  const [innerPopupVisible, setPopupVisible] = useDefaultValue(\n    popupVisible,\n    false,\n    props.onPopupVisibleChange,\n    'popupVisible',\n  );\n  const { cascaderContext, statusContext } = useContext(props, setInnerValue, innerPopupVisible, setPopupVisible);\n\n  const isFilterable = computed(() => {\n    return Boolean(props.filterable || isFunction(props.filter));\n  });\n\n  // 更新treeNodes\n  const updatedTreeNodes = () => {\n    const { inputVal, treeStore, setTreeNodes } = cascaderContext.value;\n    treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter);\n  };\n\n  // 更新节点展开状态\n  const updateExpend = () => {\n    const { value, treeStore } = cascaderContext.value;\n    const { expend } = statusContext;\n    treeStoreExpendEffect(treeStore, value, expend);\n    treeStore.replaceChecked(getTreeValue(value));\n  };\n\n  watch(\n    () => props.options,\n    () => {\n      const { options, keys = {}, checkStrictly, lazy, load, valueMode } = props;\n      const { treeStore } = statusContext;\n\n      if (!options.length && !treeStore) return;\n\n      if (!treeStore) {\n        const store = new TreeStore({\n          keys: {\n            ...keys,\n            children: typeof keys.children === 'string' ? keys.children : 'children',\n          },\n          checkable: true,\n          expandMutex: true,\n          expandParent: true,\n          lazy,\n          load,\n          valueMode,\n          checkStrictly,\n          onLoad: () => {\n            nextTick(() => {\n              store.refreshNodes();\n              updatedTreeNodes();\n            });\n          },\n        });\n        store.append(options);\n        statusContext.treeStore = store;\n      } else {\n        treeStore.reload(options);\n        treeStore.refreshNodes();\n      }\n      updateExpend();\n      updatedTreeNodes();\n    },\n    { immediate: true },\n  );\n\n  // tree插件配置变化\n  watch(\n    () => {\n      const { checkStrictly, lazy, load, valueMode } = props;\n      return JSON.stringify({\n        valueMode,\n        checkStrictly,\n        lazy,\n        load,\n      });\n    },\n    () => {\n      const { treeStore } = statusContext;\n      if (!treeStore) return;\n      const { checkStrictly, lazy, load, valueMode } = props;\n      const treeProps = {\n        checkStrictly,\n        disabled,\n        load,\n        lazy,\n        valueMode,\n      };\n      treeStore.setConfig(treeProps);\n    },\n    { immediate: true },\n  );\n\n  watch(\n    innerValue,\n    () => {\n      // 初始化判断 value 逻辑\n      const { setValue, multiple, valueType } = cascaderContext.value;\n\n      if (isValueInvalid(innerValue.value, cascaderContext.value)) {\n        setValue(multiple ? [] : '', 'invalid-value');\n      } else {\n        statusContext.scopeVal = multiple ? [] : '';\n      }\n\n      if (!isEmptyValues(innerValue)) {\n        statusContext.scopeVal = getCascaderValue(innerValue.value, valueType, multiple);\n      }\n\n      if (!statusContext.treeStore) return;\n      updateExpend();\n      updatedTreeNodes();\n    },\n    { immediate: true },\n  );\n\n  watch(\n    () => innerPopupVisible.value && isFilterable.value,\n    (visible) => {\n      const { setInputVal } = cascaderContext.value;\n      if (visible) {\n        setInputVal('');\n      }\n    },\n  );\n\n  watch(\n    () => statusContext.inputVal,\n    () => {\n      updatedTreeNodes();\n    },\n  );\n\n  return {\n    cascaderContext,\n    isFilterable,\n  };\n};\n"],"names":["useContext","props","setInnerValue","innerPopupVisible","setPopupVisible","statusContext","reactive","treeStore","inputVal","scopeVal","treeNodes","expend","cascaderContext","computed","size","checkStrictly","lazy","multiple","filterable","clearable","checkProps","max","disabled","showAllLevels","minCollapsedNum","valueType","value","visible","setTreeNodes","nodes","setValue","val","source","node","isEqual","setVisible","setInputVal","setExpend","useCascaderContext","useFormDisabled","toRefs","modelValue","popupVisible","useVModel","defaultValue","onChange","innerValue","useDefaultValue","onPopupVisibleChange","isFilterable","Boolean","isFunction","filter","updatedTreeNodes","treeNodesEffect","updateExpend","treeStoreExpendEffect","replaceChecked","getTreeValue","watch","options","keys","load","valueMode","length","store","TreeStore","children","checkable","expandMutex","expandParent","onLoad","nextTick","refreshNodes","append","reload","immediate","JSON","stringify","treeProps","setConfig","isValueInvalid","isEmptyValues","getCascaderValue"],"mappings":"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"}