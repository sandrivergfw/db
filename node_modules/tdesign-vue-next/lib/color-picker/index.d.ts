import { TdColorPickerProps } from './type';
import './style';
export * from './type';
export declare type ColorPickerProps = TdColorPickerProps;
export declare const ColorPickerPanel: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: string;
            disabled: boolean;
            multiple: boolean;
            format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
            modelValue: string;
            defaultValue: string;
            closeBtn: string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            colorModes: ("monochrome" | "linear-gradient")[];
            recentColors: boolean | string[];
            defaultRecentColors: boolean | string[];
            enableAlpha: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            closeBtn: {
                type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            colorModes: {
                type: import("vue").PropType<("monochrome" | "linear-gradient")[]>;
                default: string[];
            };
            disabled: BooleanConstructor;
            enableAlpha: BooleanConstructor;
            format: {
                type: import("vue").PropType<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
                default: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
                validator(val: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS"): boolean;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            multiple: BooleanConstructor;
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            recentColors: {
                type: import("vue").PropType<boolean | string[]>;
                default: any;
            };
            defaultRecentColors: {
                type: import("vue").PropType<boolean | string[]>;
                default: () => boolean | string[];
            };
            selectInputProps: {
                type: import("vue").PropType<import("..").TdSelectInputProps>;
            };
            swatchColors: {
                type: import("vue").PropType<string[]>;
            };
            value: {
                type: StringConstructor;
                default: any;
            };
            modelValue: {
                type: StringConstructor;
                default: any;
            };
            defaultValue: {
                type: StringConstructor;
                default: string;
            };
            onChange: import("vue").PropType<(value: string, context: {
                color: import("./type").ColorObject;
                trigger: import("./type").ColorPickerChangeTrigger;
            }) => void>;
            onPaletteBarChange: import("vue").PropType<(context: {
                color: import("./type").ColorObject;
            }) => void>;
            onRecentColorsChange: import("vue").PropType<(value: string[]) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "multiple" | "format" | "modelValue" | "defaultValue" | "closeBtn" | "colorModes" | "recentColors" | "defaultRecentColors" | "enableAlpha">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            closeBtn: {
                type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            colorModes: {
                type: import("vue").PropType<("monochrome" | "linear-gradient")[]>;
                default: string[];
            };
            disabled: BooleanConstructor;
            enableAlpha: BooleanConstructor;
            format: {
                type: import("vue").PropType<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
                default: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
                validator(val: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS"): boolean;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            multiple: BooleanConstructor;
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            recentColors: {
                type: import("vue").PropType<boolean | string[]>;
                default: any;
            };
            defaultRecentColors: {
                type: import("vue").PropType<boolean | string[]>;
                default: () => boolean | string[];
            };
            selectInputProps: {
                type: import("vue").PropType<import("..").TdSelectInputProps>;
            };
            swatchColors: {
                type: import("vue").PropType<string[]>;
            };
            value: {
                type: StringConstructor;
                default: any;
            };
            modelValue: {
                type: StringConstructor;
                default: any;
            };
            defaultValue: {
                type: StringConstructor;
                default: string;
            };
            onChange: import("vue").PropType<(value: string, context: {
                color: import("./type").ColorObject;
                trigger: import("./type").ColorPickerChangeTrigger;
            }) => void>;
            onPaletteBarChange: import("vue").PropType<(context: {
                color: import("./type").ColorObject;
            }) => void>;
            onRecentColorsChange: import("vue").PropType<(value: string[]) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: string;
            disabled: boolean;
            multiple: boolean;
            format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
            modelValue: string;
            defaultValue: string;
            closeBtn: string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            colorModes: ("monochrome" | "linear-gradient")[];
            recentColors: boolean | string[];
            defaultRecentColors: boolean | string[];
            enableAlpha: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        closeBtn: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean;
        };
        colorModes: {
            type: import("vue").PropType<("monochrome" | "linear-gradient")[]>;
            default: string[];
        };
        disabled: BooleanConstructor;
        enableAlpha: BooleanConstructor;
        format: {
            type: import("vue").PropType<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
            default: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
            validator(val: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS"): boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").TdInputProps>;
        };
        multiple: BooleanConstructor;
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        recentColors: {
            type: import("vue").PropType<boolean | string[]>;
            default: any;
        };
        defaultRecentColors: {
            type: import("vue").PropType<boolean | string[]>;
            default: () => boolean | string[];
        };
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        swatchColors: {
            type: import("vue").PropType<string[]>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onChange: import("vue").PropType<(value: string, context: {
            color: import("./type").ColorObject;
            trigger: import("./type").ColorPickerChangeTrigger;
        }) => void>;
        onPaletteBarChange: import("vue").PropType<(context: {
            color: import("./type").ColorObject;
        }) => void>;
        onRecentColorsChange: import("vue").PropType<(value: string[]) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    closeBtn: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    colorModes: {
        type: import("vue").PropType<("monochrome" | "linear-gradient")[]>;
        default: string[];
    };
    disabled: BooleanConstructor;
    enableAlpha: BooleanConstructor;
    format: {
        type: import("vue").PropType<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
        default: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
        validator(val: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS"): boolean;
    };
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    multiple: BooleanConstructor;
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    recentColors: {
        type: import("vue").PropType<boolean | string[]>;
        default: any;
    };
    defaultRecentColors: {
        type: import("vue").PropType<boolean | string[]>;
        default: () => boolean | string[];
    };
    selectInputProps: {
        type: import("vue").PropType<import("..").TdSelectInputProps>;
    };
    swatchColors: {
        type: import("vue").PropType<string[]>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onChange: import("vue").PropType<(value: string, context: {
        color: import("./type").ColorObject;
        trigger: import("./type").ColorPickerChangeTrigger;
    }) => void>;
    onPaletteBarChange: import("vue").PropType<(context: {
        color: import("./type").ColorObject;
    }) => void>;
    onRecentColorsChange: import("vue").PropType<(value: string[]) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: string;
    disabled: boolean;
    multiple: boolean;
    format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
    modelValue: string;
    defaultValue: string;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    colorModes: ("monochrome" | "linear-gradient")[];
    recentColors: boolean | string[];
    defaultRecentColors: boolean | string[];
    enableAlpha: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const ColorPicker: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: string;
            disabled: boolean;
            multiple: boolean;
            format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
            modelValue: string;
            defaultValue: string;
            closeBtn: string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            colorModes: ("monochrome" | "linear-gradient")[];
            recentColors: boolean | string[];
            defaultRecentColors: boolean | string[];
            enableAlpha: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            closeBtn: {
                type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            colorModes: {
                type: import("vue").PropType<("monochrome" | "linear-gradient")[]>;
                default: string[];
            };
            disabled: BooleanConstructor;
            enableAlpha: BooleanConstructor;
            format: {
                type: import("vue").PropType<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
                default: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
                validator(val: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS"): boolean;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            multiple: BooleanConstructor;
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            recentColors: {
                type: import("vue").PropType<boolean | string[]>;
                default: any;
            };
            defaultRecentColors: {
                type: import("vue").PropType<boolean | string[]>;
                default: () => boolean | string[];
            };
            selectInputProps: {
                type: import("vue").PropType<import("..").TdSelectInputProps>;
            };
            swatchColors: {
                type: import("vue").PropType<string[]>;
            };
            value: {
                type: StringConstructor;
                default: any;
            };
            modelValue: {
                type: StringConstructor;
                default: any;
            };
            defaultValue: {
                type: StringConstructor;
                default: string;
            };
            onChange: import("vue").PropType<(value: string, context: {
                color: import("./type").ColorObject;
                trigger: import("./type").ColorPickerChangeTrigger;
            }) => void>;
            onPaletteBarChange: import("vue").PropType<(context: {
                color: import("./type").ColorObject;
            }) => void>;
            onRecentColorsChange: import("vue").PropType<(value: string[]) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "multiple" | "format" | "modelValue" | "defaultValue" | "closeBtn" | "colorModes" | "recentColors" | "defaultRecentColors" | "enableAlpha">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            closeBtn: {
                type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            colorModes: {
                type: import("vue").PropType<("monochrome" | "linear-gradient")[]>;
                default: string[];
            };
            disabled: BooleanConstructor;
            enableAlpha: BooleanConstructor;
            format: {
                type: import("vue").PropType<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
                default: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
                validator(val: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS"): boolean;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            multiple: BooleanConstructor;
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            recentColors: {
                type: import("vue").PropType<boolean | string[]>;
                default: any;
            };
            defaultRecentColors: {
                type: import("vue").PropType<boolean | string[]>;
                default: () => boolean | string[];
            };
            selectInputProps: {
                type: import("vue").PropType<import("..").TdSelectInputProps>;
            };
            swatchColors: {
                type: import("vue").PropType<string[]>;
            };
            value: {
                type: StringConstructor;
                default: any;
            };
            modelValue: {
                type: StringConstructor;
                default: any;
            };
            defaultValue: {
                type: StringConstructor;
                default: string;
            };
            onChange: import("vue").PropType<(value: string, context: {
                color: import("./type").ColorObject;
                trigger: import("./type").ColorPickerChangeTrigger;
            }) => void>;
            onPaletteBarChange: import("vue").PropType<(context: {
                color: import("./type").ColorObject;
            }) => void>;
            onRecentColorsChange: import("vue").PropType<(value: string[]) => void>;
        }>>, {
            baseClassName: import("vue").ComputedRef<string>;
            innerValue: import("vue").Ref<string>;
            visible: import("vue").Ref<boolean>;
            refTrigger: import("vue").Ref<HTMLElement>;
            renderPopupContent: () => JSX.Element;
            setVisible: (value: boolean) => boolean;
            setInnerValue: import("../hooks").ChangeHandler<string>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: string;
            disabled: boolean;
            multiple: boolean;
            format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
            modelValue: string;
            defaultValue: string;
            closeBtn: string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            colorModes: ("monochrome" | "linear-gradient")[];
            recentColors: boolean | string[];
            defaultRecentColors: boolean | string[];
            enableAlpha: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        closeBtn: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean;
        };
        colorModes: {
            type: import("vue").PropType<("monochrome" | "linear-gradient")[]>;
            default: string[];
        };
        disabled: BooleanConstructor;
        enableAlpha: BooleanConstructor;
        format: {
            type: import("vue").PropType<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
            default: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
            validator(val: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS"): boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").TdInputProps>;
        };
        multiple: BooleanConstructor;
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        recentColors: {
            type: import("vue").PropType<boolean | string[]>;
            default: any;
        };
        defaultRecentColors: {
            type: import("vue").PropType<boolean | string[]>;
            default: () => boolean | string[];
        };
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        swatchColors: {
            type: import("vue").PropType<string[]>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onChange: import("vue").PropType<(value: string, context: {
            color: import("./type").ColorObject;
            trigger: import("./type").ColorPickerChangeTrigger;
        }) => void>;
        onPaletteBarChange: import("vue").PropType<(context: {
            color: import("./type").ColorObject;
        }) => void>;
        onRecentColorsChange: import("vue").PropType<(value: string[]) => void>;
    }>> & import("vue").ShallowUnwrapRef<{
        baseClassName: import("vue").ComputedRef<string>;
        innerValue: import("vue").Ref<string>;
        visible: import("vue").Ref<boolean>;
        refTrigger: import("vue").Ref<HTMLElement>;
        renderPopupContent: () => JSX.Element;
        setVisible: (value: boolean) => boolean;
        setInnerValue: import("../hooks").ChangeHandler<string>;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    closeBtn: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    colorModes: {
        type: import("vue").PropType<("monochrome" | "linear-gradient")[]>;
        default: string[];
    };
    disabled: BooleanConstructor;
    enableAlpha: BooleanConstructor;
    format: {
        type: import("vue").PropType<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
        default: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
        validator(val: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS"): boolean;
    };
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    multiple: BooleanConstructor;
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    recentColors: {
        type: import("vue").PropType<boolean | string[]>;
        default: any;
    };
    defaultRecentColors: {
        type: import("vue").PropType<boolean | string[]>;
        default: () => boolean | string[];
    };
    selectInputProps: {
        type: import("vue").PropType<import("..").TdSelectInputProps>;
    };
    swatchColors: {
        type: import("vue").PropType<string[]>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onChange: import("vue").PropType<(value: string, context: {
        color: import("./type").ColorObject;
        trigger: import("./type").ColorPickerChangeTrigger;
    }) => void>;
    onPaletteBarChange: import("vue").PropType<(context: {
        color: import("./type").ColorObject;
    }) => void>;
    onRecentColorsChange: import("vue").PropType<(value: string[]) => void>;
}>>, {
    baseClassName: import("vue").ComputedRef<string>;
    innerValue: import("vue").Ref<string>;
    visible: import("vue").Ref<boolean>;
    refTrigger: import("vue").Ref<HTMLElement>;
    renderPopupContent: () => JSX.Element;
    setVisible: (value: boolean) => boolean;
    setInnerValue: import("../hooks").ChangeHandler<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: string;
    disabled: boolean;
    multiple: boolean;
    format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
    modelValue: string;
    defaultValue: string;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    colorModes: ("monochrome" | "linear-gradient")[];
    recentColors: boolean | string[];
    defaultRecentColors: boolean | string[];
    enableAlpha: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
