import { TdTreeProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    activable: BooleanConstructor;
    actived: {
        type: PropType<import("./type").TreeNodeValue[]>;
        default: any;
    };
    defaultActived: {
        type: PropType<import("./type").TreeNodeValue[]>;
    };
    activeMultiple: BooleanConstructor;
    allowFoldNodeOnFilter: BooleanConstructor;
    checkable: BooleanConstructor;
    checkProps: {
        type: PropType<import("..").TdCheckboxProps>;
    };
    checkStrictly: BooleanConstructor;
    data: {
        type: PropType<import("../common").TreeOptionData[]>;
        default: () => TdTreeProps['data'];
    };
    disableCheck: {
        type: PropType<boolean | ((node: import("./type").TreeNodeModel<import("../common").TreeOptionData>) => boolean)>;
        default: boolean;
    };
    disabled: BooleanConstructor;
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    empty: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    expandAll: BooleanConstructor;
    expanded: {
        type: PropType<import("./type").TreeNodeValue[]>;
        default: any;
    };
    defaultExpanded: {
        type: PropType<import("./type").TreeNodeValue[]>;
        default: () => TdTreeProps['defaultExpanded'];
    };
    expandLevel: {
        type: NumberConstructor;
        default: number;
    };
    expandMutex: BooleanConstructor;
    expandOnClickNode: BooleanConstructor;
    expandParent: BooleanConstructor;
    filter: {
        type: PropType<(node: import("./type").TreeNodeModel<import("../common").TreeOptionData>) => boolean>;
    };
    hover: BooleanConstructor;
    icon: {
        type: PropType<boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("../common").TreeOptionData>) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    keys: {
        type: PropType<import("./type").TreeKeysType>;
    };
    label: {
        type: PropType<string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("../common").TreeOptionData>) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    line: {
        type: PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    load: {
        type: PropType<(node: import("./type").TreeNodeModel<import("../common").TreeOptionData>) => Promise<import("../common").TreeOptionData[]>>;
    };
    operations: {
        type: PropType<(h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("../common").TreeOptionData>) => import("../common").SlotReturnValue>;
    };
    transition: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: PropType<import("./type").TreeNodeValue[]>;
        default: any;
    };
    modelValue: {
        type: PropType<import("./type").TreeNodeValue[]>;
        default: any;
    };
    defaultValue: {
        type: PropType<import("./type").TreeNodeValue[]>;
        default: () => TdTreeProps['defaultValue'];
    };
    valueMode: {
        type: PropType<"all" | "onlyLeaf" | "parentFirst">;
        default: "all" | "onlyLeaf" | "parentFirst";
        validator(val: TdTreeProps['valueMode']): boolean;
    };
    onActive: PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<import("../common").TreeOptionData>;
    }) => void>;
    onChange: PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<import("../common").TreeOptionData>;
    }) => void>;
    onClick: PropType<(context: {
        node: import("./type").TreeNodeModel<import("../common").TreeOptionData>;
        e: MouseEvent;
    }) => void>;
    onExpand: PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<import("../common").TreeOptionData>;
        e: MouseEvent;
    }) => void>;
    onLoad: PropType<(context: {
        node: import("./type").TreeNodeModel<import("../common").TreeOptionData>;
    }) => void>;
};
export default _default;
