import { TdBadgeProps } from './type';
import './style';
export * from './type';
export declare type BadgeProps = TdBadgeProps;
export declare const Badge: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            color: string;
            size: "small" | "medium";
            dot: boolean;
            shape: "round" | "circle";
            count: string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            maxCount: number;
            showZero: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            color: {
                type: StringConstructor;
                default: string;
            };
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            count: {
                type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: number;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            dot: BooleanConstructor;
            maxCount: {
                type: NumberConstructor;
                default: number;
            };
            offset: {
                type: import("vue").PropType<(string | number)[]>;
            };
            shape: {
                type: import("vue").PropType<"round" | "circle">;
                default: "round" | "circle";
                validator(val: "round" | "circle"): boolean;
            };
            showZero: BooleanConstructor;
            size: {
                type: import("vue").PropType<"small" | "medium">;
                default: "small" | "medium";
                validator(val: "small" | "medium"): boolean;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "color" | "size" | "dot" | "shape" | "count" | "maxCount" | "showZero">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            color: {
                type: StringConstructor;
                default: string;
            };
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            count: {
                type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: number;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            dot: BooleanConstructor;
            maxCount: {
                type: NumberConstructor;
                default: number;
            };
            offset: {
                type: import("vue").PropType<(string | number)[]>;
            };
            shape: {
                type: import("vue").PropType<"round" | "circle">;
                default: "round" | "circle";
                validator(val: "round" | "circle"): boolean;
            };
            showZero: BooleanConstructor;
            size: {
                type: import("vue").PropType<"small" | "medium">;
                default: "small" | "medium";
                validator(val: "small" | "medium"): boolean;
            };
        }>>, {
            content: import("vue").ComputedRef<any>;
            inlineStyle: import("vue").ComputedRef<{
                background: string;
                right: string | number;
                top: string | number;
            }>;
            badgeClassNames: import("vue").ComputedRef<{
                [x: string]: boolean;
            }[]>;
            isHidden: import("vue").ComputedRef<boolean>;
            renderChildren: () => any;
            name: string;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            color: string;
            size: "small" | "medium";
            dot: boolean;
            shape: "round" | "circle";
            count: string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            maxCount: number;
            showZero: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        count: {
            type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: number;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        dot: BooleanConstructor;
        maxCount: {
            type: NumberConstructor;
            default: number;
        };
        offset: {
            type: import("vue").PropType<(string | number)[]>;
        };
        shape: {
            type: import("vue").PropType<"round" | "circle">;
            default: "round" | "circle";
            validator(val: "round" | "circle"): boolean;
        };
        showZero: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium">;
            default: "small" | "medium";
            validator(val: "small" | "medium"): boolean;
        };
    }>> & import("vue").ShallowUnwrapRef<{
        content: import("vue").ComputedRef<any>;
        inlineStyle: import("vue").ComputedRef<{
            background: string;
            right: string | number;
            top: string | number;
        }>;
        badgeClassNames: import("vue").ComputedRef<{
            [x: string]: boolean;
        }[]>;
        isHidden: import("vue").ComputedRef<boolean>;
        renderChildren: () => any;
        name: string;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    count: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: number;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    dot: BooleanConstructor;
    maxCount: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
    };
    shape: {
        type: import("vue").PropType<"round" | "circle">;
        default: "round" | "circle";
        validator(val: "round" | "circle"): boolean;
    };
    showZero: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium">;
        default: "small" | "medium";
        validator(val: "small" | "medium"): boolean;
    };
}>>, {
    content: import("vue").ComputedRef<any>;
    inlineStyle: import("vue").ComputedRef<{
        background: string;
        right: string | number;
        top: string | number;
    }>;
    badgeClassNames: import("vue").ComputedRef<{
        [x: string]: boolean;
    }[]>;
    isHidden: import("vue").ComputedRef<boolean>;
    renderChildren: () => any;
    name: string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    color: string;
    size: "small" | "medium";
    dot: boolean;
    shape: "round" | "circle";
    count: string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    maxCount: number;
    showZero: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Badge;
