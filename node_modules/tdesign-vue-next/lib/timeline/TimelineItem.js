/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, inject, h, createVNode } from 'vue';
import TimeLineItemProps from './time-line-item-props.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { useContent, useTNodeJSX } from '../hooks/tnode.js';
import { TimelineInjectKey } from './hooks.js';
import { Loading } from '../loading/index.js';
import '../config-provider/useConfig.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../loading/directive.js';
import '../loading/plugin.js';
import '../loading/loading.js';
import '@babel/runtime/helpers/slicedToArray';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../utils/dom.js';
import '../_chunks/dep-010ef7cd.js';
import '../utils/easing.js';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import '../utils/withInstall.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DefaultTheme = ["default", "primary", "success", "warning", "error"];
var _TimelineItem = defineComponent({
  name: "TTimelineItem",
  props: _objectSpread(_objectSpread({}, TimeLineItemProps), {}, {
    index: {
      type: Number
    }
  }),
  setup: function setup(props) {
    var COMPONENT_NAME = usePrefixClass("timeline-item");
    var TimelineProvider = inject(TimelineInjectKey);
    var renderContent = useContent();
    var renderTNodeJSX = useTNodeJSX();
    var getPositionClassName = function getPositionClassName(index) {
      var _TimelineProvider$val = TimelineProvider.value,
        layout = _TimelineProvider$val.layout,
        renderAlign = _TimelineProvider$val.renderAlign;
      var left = layout === "horizontal" ? "top" : "left";
      var right = layout === "horizontal" ? "bottom" : "right";
      if (renderAlign === "alternate") {
        return props.labelAlign || index % 2 === 0 ? "".concat(COMPONENT_NAME.value, "-").concat(left) : "".concat(COMPONENT_NAME.value, "-").concat(right);
      }
      if (renderAlign === "left" || renderAlign === "top") {
        return "".concat(COMPONENT_NAME.value, "-").concat(left);
      }
      if (renderAlign === "right" || renderAlign === "bottom") {
        return "".concat(COMPONENT_NAME.value, "-").concat(right);
      }
      return "";
    };
    return function () {
      var _ref, _ref2;
      var _TimelineProvider$val2 = TimelineProvider.value,
        mode = _TimelineProvider$val2.mode,
        theme = _TimelineProvider$val2.theme,
        itemsStatus = _TimelineProvider$val2.itemsStatus,
        reverse = _TimelineProvider$val2.reverse;
      var label = props.label,
        loading = props.loading,
        dotColor = props.dotColor,
        index = props.index;
      var dotElement = renderTNodeJSX("dot");
      if (dotElement) {
        dotElement = h(renderTNodeJSX("dot"), {
          "class": "".concat(COMPONENT_NAME.value, "__dot-content")
        });
      }
      return createVNode("li", {
        "class": ["".concat(COMPONENT_NAME.value), "".concat(getPositionClassName(props.index))]
      }, [mode === "alternate" && label && createVNode("div", {
        "class": ["".concat(COMPONENT_NAME.value, "__label"), "".concat(COMPONENT_NAME.value, "__label--").concat(mode)]
      }, [label]), createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__wrapper")
      }, [createVNode("div", {
        "class": (_ref = {}, _defineProperty(_ref, "".concat(COMPONENT_NAME.value, "__dot"), true), _defineProperty(_ref, "".concat(COMPONENT_NAME.value, "__dot--custom"), !!dotElement || !dotElement && loading), _defineProperty(_ref, "".concat(COMPONENT_NAME.value, "__dot--").concat(dotColor), DefaultTheme.includes(dotColor)), _ref),
        "style": {
          borderColor: !DefaultTheme.includes(dotColor) && dotColor
        }
      }, [!dotElement && loading && createVNode(Loading, {
        "size": "12px",
        "class": "".concat(COMPONENT_NAME.value, "__dot-content")
      }, null), dotElement]), createVNode("div", {
        "class": (_ref2 = {}, _defineProperty(_ref2, "".concat(COMPONENT_NAME.value, "__tail"), true), _defineProperty(_ref2, "".concat(COMPONENT_NAME.value, "__tail--theme-").concat(theme), true), _defineProperty(_ref2, "".concat(COMPONENT_NAME.value, "__tail--status-").concat(itemsStatus[index]), reverse), _ref2)
      }, null)]), createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__content")
      }, [renderContent("default", "content"), mode === "same" && label && createVNode("div", {
        "class": ["".concat(COMPONENT_NAME.value, "__label"), "".concat(COMPONENT_NAME.value, "__label--").concat(mode)]
      }, [label])])]);
    };
  }
});

export { _TimelineItem as default };
//# sourceMappingURL=TimelineItem.js.map
