{"version":3,"file":"useSorter.js","sources":["../../../src/table/hooks/useSorter.tsx"],"sourcesContent":["import { SetupContext, computed, toRefs, ref } from 'vue';\nimport isFunction from 'lodash/isFunction';\nimport { SortInfo, TdPrimaryTableProps, PrimaryTableCol, TableRowData } from '../type';\nimport SorterButton from '../sorter-button';\nimport useDefaultValue from '../../hooks/useDefaultValue';\n\nexport type SortMap = Record<string, SortInfo & { index: number }>;\n\nexport default function useSorter(props: TdPrimaryTableProps, { emit, slots }: SetupContext) {\n  const { sort, data } = toRefs(props);\n  const originalData = ref();\n  const [tSortInfo, setTSortInfo] = useDefaultValue(sort, props.defaultSort, props.onSortChange, 'sort');\n  const [tData, setTData] = useDefaultValue(data, [], props.onDataChange, 'data');\n  // 本地数据排序：用于记录哪些字段是自定义排序函数\n  const sorterFuncMap = computed(() => getSorterFuncMap(props.columns));\n\n  const sortArray = computed<Array<SortInfo>>(() => {\n    const sort = tSortInfo.value;\n    if (!sort) return [];\n    return Array.isArray(sort) ? sort : [sort];\n  });\n\n  const sortMap = computed<SortMap>(() => {\n    const sortMap = {};\n    sortArray.value.forEach((info, index) => {\n      const { sortBy } = info;\n      sortMap[sortBy] = { index, ...info };\n    });\n    return sortMap;\n  });\n\n  function getSorterFuncMap(columns: PrimaryTableCol[], map: { [key: string]: Function } = {}) {\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const col = columns[i];\n      if (isFunction(col.sorter)) {\n        // eslint-disable-next-line no-param-reassign\n        map[col.colKey] = col.sorter;\n      }\n      // 多级表头中的排序功能\n      if (col.children?.length) {\n        getSorterFuncMap(col.children, map);\n      }\n    }\n    return map;\n  }\n\n  function handleDataSort(sortInfo: SortInfo | Array<SortInfo>) {\n    const sort = sortInfo;\n    if (!Object.keys(sorterFuncMap.value).length) return;\n    if (!originalData.value) {\n      originalData.value = tData.value;\n    }\n    const isEmptyArraySort = !sort || (sort instanceof Array && !sort.length);\n    const isEmptyObjectSort = !(sort instanceof Array) && !sort?.sortBy;\n    if (isEmptyArraySort || isEmptyObjectSort) {\n      setTData(originalData.value, { trigger: 'sort' });\n      return originalData.value;\n    }\n    const formatedSort = sort instanceof Array ? sort : [sort];\n    // data 为受控属性，data.slice() 浅拷贝，防止 sort 导致原数据变异\n    const newData: TableRowData[] = tData.value.slice().sort((a: TableRowData, b: TableRowData) => {\n      let sortResult = 0;\n      for (let i = 0, len = formatedSort.length; i < len; i++) {\n        const item = formatedSort[i];\n        const sortFunc = sorterFuncMap.value[item.sortBy];\n        // 上一个排序字段值相同时才会进行下一个字段的大小对比\n        if (sortResult === 0 && sortFunc) {\n          sortResult = item.descending ? sortFunc(b, a) : sortFunc(a, b);\n        } else {\n          break;\n        }\n      }\n      return sortResult;\n    });\n    // Data 变化返回的是数据引用，为避免死循环，特此检测排序数据前后是否相同，如果相同则不再触发事件\n    if (JSON.stringify(newData) === JSON.stringify(tData.value)) return;\n    setTData(newData, { trigger: 'sort' });\n    return newData;\n  }\n\n  function handleSortHeaderClick(col: PrimaryTableCol<TableRowData>, p: { descending: boolean }) {\n    let sortInfo: SortInfo | Array<SortInfo>;\n    if (props.multipleSort) {\n      sortInfo = getMultipleNextSort(col, p);\n    } else {\n      const sort = tSortInfo.value instanceof Array ? tSortInfo.value[0] : tSortInfo.value;\n      sortInfo = getSingleNextSort(col, sort, p);\n    }\n    // 本地数据 data 排序，需同时抛出 data-change\n    const newData = handleDataSort(sortInfo);\n    const currentData = newData || tData.value;\n    const currentDataSource = currentData;\n    setTSortInfo(sortInfo, { currentDataSource, col });\n    props.onChange?.({ sorter: sortInfo }, { currentData, trigger: 'sorter' });\n  }\n\n  function getSortOrder(descending: boolean) {\n    if (descending === undefined) return;\n    return descending ? 'desc' : 'asc';\n  }\n\n  // 点击新排序字段，则默认按照降序排序；点击原字段，则排序字段不变仅切换排序方式\n  function getSingleNextSort(col: PrimaryTableCol, sortInfo: SortInfo, p: { descending: boolean }): SortInfo {\n    // 排序字段和排序方式均相同，则取消排序\n    if (sortInfo && sortInfo.sortBy === col.colKey && sortInfo.descending === p.descending) {\n      return undefined;\n    }\n    return { sortBy: col.colKey, descending: p.descending };\n  }\n\n  function getMultipleNextSort(col: PrimaryTableCol<TableRowData>, p: { descending: boolean }): Array<SortInfo> {\n    const sort = tSortInfo.value;\n    if (!(sort instanceof Array)) return;\n    const { colKey } = col;\n    const result = [...sort];\n    for (let i = 0, len = sort.length; i < len; i++) {\n      if (sort[i].sortBy === colKey) {\n        const next = getSingleNextSort(col, sort[i], p);\n        next ? (result[i] = next) : result.splice(i, 1);\n        return result;\n      }\n    }\n    result.push({ sortBy: colKey, descending: p.descending });\n    return result;\n  }\n\n  function renderSortIcon({ col }: { col: PrimaryTableCol<TableRowData>; colIndex: number }) {\n    if (!col.sorter) return null;\n    const sorterButtonsProps = {\n      sortType: col.sortType,\n      sortOrder: getSortOrder(sortMap.value[col.colKey]?.descending),\n      sortIcon: props.sortIcon,\n      hideSortTips: props.hideSortTips,\n    };\n    return (\n      <SorterButton\n        v-slots={{ sortIcon: slots.sortIcon }}\n        {...sorterButtonsProps}\n        onSortIconClick={(_: MouseEvent, p: { descending: boolean }) => handleSortHeaderClick(col, p)}\n      />\n    );\n  }\n\n  return {\n    renderSortIcon,\n  };\n}\n"],"names":["useSorter","props","emit","slots","toRefs","sort","data","originalData","ref","useDefaultValue","defaultSort","onSortChange","tSortInfo","setTSortInfo","onDataChange","tData","setTData","sorterFuncMap","computed","getSorterFuncMap","columns","sortArray","value","Array","isArray","sortMap","forEach","info","index","sortBy","map","i","len","length","col","isFunction","sorter","colKey","children","handleDataSort","sortInfo","Object","keys","isEmptyArraySort","isEmptyObjectSort","trigger","formatedSort","newData","slice","a","b","sortResult","item","sortFunc","descending","JSON","stringify","handleSortHeaderClick","p","multipleSort","getMultipleNextSort","getSingleNextSort","currentData","currentDataSource","onChange","getSortOrder","result","next","splice","push","renderSortIcon","sorterButtonsProps","sortType","sortOrder","sortIcon","hideSortTips","_createVNode","_mergeProps","_"],"mappings":"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"}