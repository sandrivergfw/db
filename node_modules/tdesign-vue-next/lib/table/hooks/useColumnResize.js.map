{"version":3,"file":"useColumnResize.js","sources":["../../../src/table/hooks/useColumnResize.ts"],"sourcesContent":["import { ref, Ref, reactive, CSSProperties } from 'vue';\nimport isNumber from 'lodash/isNumber';\nimport { BaseTableCol, TableRowData } from '../type';\nimport { RecalculateColumnWidthFunc } from '../interface';\nimport setThWidthListByColumnDrag from '../../_common/js/table/set-column-width-by-drag';\nimport recalculateColumnWidth from '../../_common/js/table/recalculate-column-width';\n\nconst DEFAULT_MIN_WIDTH = 80;\nconst DEFAULT_MAX_WIDTH = 600;\n\nexport default function useColumnResize(\n  tableContentRef: Ref<HTMLDivElement>,\n  refreshTable: () => void,\n  getThWidthList: () => { [colKeys: string]: number },\n  updateThWidthList: (data: { [colKeys: string]: number }) => void,\n) {\n  const resizeLineRef = ref<HTMLDivElement>();\n  const notCalculateWidthCols = ref<string[]>([]);\n  const effectColMap = ref<{ [colKey: string]: any }>({});\n\n  // 递归查找列宽度变化后，受影响的相关列\n  const setEffectColMap = (nodes: BaseTableCol<TableRowData>[], parent: BaseTableCol<TableRowData> | null) => {\n    if (!nodes) return;\n    nodes.forEach((n, index) => {\n      const parentPrevCol = parent ? effectColMap.value[parent.colKey].prev : nodes[index + 1];\n      const parentNextCol = parent ? effectColMap.value[parent.colKey].next : nodes[index - 1];\n      const prev = index === 0 ? parentPrevCol : nodes[index - 1];\n      const next = index === nodes.length - 1 ? parentNextCol : nodes[index + 1];\n      effectColMap.value[n.colKey] = {\n        prev,\n        next,\n      };\n      setEffectColMap(n.children, n);\n    });\n  };\n\n  const resizeLineParams = {\n    isDragging: false,\n    draggingCol: null as HTMLElement,\n    draggingStart: 0,\n    effectCol: null as 'next' | 'prev' | null,\n  };\n\n  const resizeLineStyle = reactive({\n    display: 'none',\n    left: '10px',\n    height: '10px',\n    bottom: '0',\n  });\n\n  const setNotCalculateWidthCols = (colKeys: string[]) => {\n    notCalculateWidthCols.value = colKeys;\n  };\n\n  // 表格列宽拖拽事件\n  // 只在表头显示拖拽图标\n  const onColumnMouseover = (e: MouseEvent, col: BaseTableCol<TableRowData>) => {\n    if (!resizeLineRef.value) return;\n\n    const target = (e.target as HTMLElement).closest('th');\n    const targetBoundRect = target.getBoundingClientRect();\n    if (!resizeLineParams.isDragging) {\n      // 当离右边框的距离不超过 8 时，显示拖拽图标\n      const distance = 8;\n      if (targetBoundRect.right - e.pageX <= distance) {\n        const colResizable = col.resizable ?? true;\n        if (colResizable) {\n          target.style.cursor = 'col-resize';\n          resizeLineParams.draggingCol = target;\n          resizeLineParams.effectCol = 'next';\n          return;\n        }\n      } else if (e.pageX - targetBoundRect.left <= distance) {\n        const prevEl = target.previousElementSibling;\n        if (prevEl) {\n          const effectPrevCol = effectColMap.value[col.colKey].prev;\n          const colResizable = effectPrevCol.resizable ?? true;\n          if (colResizable) {\n            target.style.cursor = 'col-resize';\n            resizeLineParams.draggingCol = prevEl as HTMLElement;\n            resizeLineParams.effectCol = 'prev';\n            return;\n          }\n        }\n      }\n      // 重置记录值\n      target.style.cursor = '';\n      resizeLineParams.draggingCol = null;\n      resizeLineParams.effectCol = null;\n    }\n  };\n\n  // 调整表格列宽\n  const onColumnMousedown = (e: MouseEvent, col: BaseTableCol<TableRowData>) => {\n    // 非 resize 的点击，不做处理\n    if (!resizeLineParams.draggingCol) return;\n\n    const getMinMaxColWidth = (col: BaseTableCol<TableRowData>, effectPrevCol: BaseTableCol<TableRowData>) => {\n      let targetCol = null;\n      if (resizeLineParams.effectCol === 'next') {\n        targetCol = col;\n      } else {\n        targetCol = effectPrevCol;\n      }\n      const propMinWidth = isNumber(targetCol.minWidth) ? targetCol.minWidth : parseFloat(targetCol.minWidth);\n      return {\n        minColWidth: Math.max(targetCol.resize?.minWidth || DEFAULT_MIN_WIDTH, propMinWidth || DEFAULT_MIN_WIDTH),\n        maxColWidth: targetCol.resize?.maxWidth || DEFAULT_MAX_WIDTH,\n      };\n    };\n\n    const target = resizeLineParams.draggingCol;\n    const targetBoundRect = target.getBoundingClientRect();\n    const tableBoundRect = tableContentRef.value?.getBoundingClientRect();\n    const resizeLinePos = targetBoundRect.right - tableBoundRect.left;\n    const colLeft = targetBoundRect.left - tableBoundRect.left;\n    const effectNextCol = effectColMap.value[col.colKey].next;\n    const effectPrevCol = effectColMap.value[col.colKey].prev;\n    const { minColWidth, maxColWidth } = getMinMaxColWidth(col, effectPrevCol);\n    const minResizeLineLeft = colLeft + minColWidth;\n    const maxResizeLineLeft = colLeft + maxColWidth;\n\n    // 开始拖拽，记录下鼠标起始位置\n    resizeLineParams.isDragging = true;\n    resizeLineParams.draggingStart = e.x;\n\n    // 初始化 resizeLine 标记线\n    if (resizeLineRef?.value) {\n      resizeLineStyle.display = 'block';\n      resizeLineStyle.left = `${resizeLinePos}px`;\n      resizeLineStyle.height = `${tableBoundRect.bottom - targetBoundRect.top}px`;\n      const parent = tableContentRef.value.parentElement.getBoundingClientRect();\n      resizeLineStyle.bottom = `${parent.bottom - tableBoundRect.bottom}px`;\n    }\n\n    // 拖拽时鼠标可能会超出 table 范围，需要给 document 绑定拖拽相关事件\n    const onDragEnd = () => {\n      if (resizeLineParams.isDragging) {\n        // 结束拖拽，更新列宽\n        let width = Math.ceil(parseInt(resizeLineStyle.left, 10) - colLeft) || 0;\n        // 为了避免精度问题，导致 width 宽度超出 [minColWidth, maxColWidth] 的范围，需要对比目标宽度和最小/最大宽度\n        if (width <= minColWidth) {\n          width = minColWidth;\n        } else if (width >= maxColWidth) {\n          width = maxColWidth;\n        }\n        // 更新列宽\n        if (resizeLineParams.effectCol === 'next') {\n          setThWidthListByColumnDrag<BaseTableCol<TableRowData>>(\n            col,\n            width,\n            effectNextCol,\n            { getThWidthList, DEFAULT_MIN_WIDTH },\n            (updateMap, notCalculateCols) => {\n              updateThWidthList(updateMap);\n              setNotCalculateWidthCols(notCalculateCols);\n            },\n          );\n        } else if (resizeLineParams.effectCol === 'prev') {\n          setThWidthListByColumnDrag<BaseTableCol<TableRowData>>(\n            effectPrevCol,\n            width,\n            col,\n            { getThWidthList, DEFAULT_MIN_WIDTH },\n            (updateMap, notCalculateCols) => {\n              updateThWidthList(updateMap);\n              setNotCalculateWidthCols(notCalculateCols);\n            },\n          );\n        }\n\n        // 恢复设置\n        resizeLineParams.isDragging = false;\n        resizeLineParams.draggingCol = null;\n        resizeLineParams.effectCol = null;\n        target.style.cursor = '';\n        resizeLineStyle.display = 'none';\n        resizeLineStyle.left = '0';\n        document.removeEventListener('mousemove', onDragOver);\n        document.removeEventListener('mouseup', onDragEnd);\n        document.onselectstart = null;\n        document.ondragstart = null;\n      }\n\n      refreshTable();\n    };\n\n    const onDragOver = (e: MouseEvent) => {\n      // 计算新的列宽，新列宽不得小于最小列宽\n      if (resizeLineParams.isDragging) {\n        const left = resizeLinePos + e.x - resizeLineParams.draggingStart;\n        resizeLineStyle.left = `${Math.min(Math.max(left, minResizeLineLeft), maxResizeLineLeft)}px`;\n      }\n    };\n\n    document.addEventListener('mouseup', onDragEnd);\n    document.addEventListener('mousemove', onDragOver);\n\n    // 禁用鼠标的选中文字和拖放\n    document.onselectstart = () => false;\n    document.ondragstart = () => false;\n  };\n\n  const recalculateColWidth: RecalculateColumnWidthFunc = (\n    columns: BaseTableCol<TableRowData>[],\n    thWidthList: { [colKey: string]: number },\n    tableLayout: string,\n    tableElmWidth: number,\n  ): void => {\n    recalculateColumnWidth<BaseTableCol<TableRowData>>(\n      columns,\n      thWidthList,\n      tableLayout,\n      tableElmWidth,\n      notCalculateWidthCols.value,\n      (widthMap) => {\n        updateThWidthList(widthMap);\n        if (notCalculateWidthCols.value.length) {\n          notCalculateWidthCols.value = [];\n        }\n      },\n    );\n  };\n\n  return {\n    resizeLineRef,\n    resizeLineStyle,\n    onColumnMouseover,\n    onColumnMousedown,\n    recalculateColWidth,\n    setEffectColMap,\n  };\n}\n"],"names":["DEFAULT_MIN_WIDTH","DEFAULT_MAX_WIDTH","useColumnResize","tableContentRef","refreshTable","getThWidthList","updateThWidthList","resizeLineRef","ref","notCalculateWidthCols","effectColMap","setEffectColMap","nodes","parent","forEach","n","index","parentPrevCol","value","colKey","prev","parentNextCol","next","length","children","resizeLineParams","isDragging","draggingCol","draggingStart","effectCol","resizeLineStyle","reactive","display","left","height","bottom","setNotCalculateWidthCols","colKeys","onColumnMouseover","e","col","target","closest","targetBoundRect","getBoundingClientRect","distance","right","pageX","colResizable","resizable","style","cursor","prevEl","previousElementSibling","effectPrevCol","onColumnMousedown","getMinMaxColWidth","targetCol","propMinWidth","isNumber","minWidth","parseFloat","minColWidth","Math","max","resize","maxColWidth","maxWidth","tableBoundRect","resizeLinePos","colLeft","effectNextCol","minResizeLineLeft","maxResizeLineLeft","x","top","parentElement","onDragEnd","width","ceil","parseInt","setThWidthListByColumnDrag","updateMap","notCalculateCols","document","removeEventListener","onDragOver","onselectstart","ondragstart","min","addEventListener","recalculateColWidth","columns","thWidthList","tableLayout","tableElmWidth","recalculateColumnWidth","widthMap"],"mappings":"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"}