/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _typeof from '@babel/runtime/helpers/typeof';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, ref, createVNode, h, mergeProps } from 'vue';
import { FilterIcon } from 'tdesign-icons-vue-next';
import isEmpty from 'lodash/isEmpty';
import { Popup } from '../popup/index.js';
import { CheckboxGroup } from '../checkbox/index.js';
import { RadioGroup } from '../radio/index.js';
import { Input } from '../input/index.js';
import { Button } from '../button/index.js';
import { useTNodeDefault } from '../hooks/tnode.js';
import { useConfig } from '../config-provider/useConfig.js';
import { useGlobalIcon } from '../hooks/useGlobalIcon.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/slicedToArray';
import '@popperjs/core';
import '../hooks/useConfig.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../utils/dom.js';
import '../_chunks/dep-010ef7cd.js';
import 'lodash/isString';
import '../utils/easing.js';
import '../utils/render-tnode.js';
import 'lodash/isFunction';
import 'lodash/isObject';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../_common/js/utils/set-style.js';
import '../popup/props.js';
import '../popup/container.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../hooks/useVModel.js';
import '../utils/withInstall.js';
import '../checkbox/checkbox.js';
import '../checkbox/props.js';
import '../form/hooks.js';
import '../hooks/useRipple.js';
import '../hooks/useKeepAnimation.js';
import '../utils/set-style.js';
import '../checkbox/constants.js';
import '../checkbox/group.js';
import 'lodash/intersection';
import '../checkbox/checkbox-group-props.js';
import '../hooks/slot.js';
import '../radio/radio.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../radio/props.js';
import '../radio/constants.js';
import '../radio/group.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import 'lodash/isNumber';
import 'lodash/isNil';
import '../radio/radio-group-props.js';
import '../radio/radio-button.js';
import '../input/input.js';
import '../input/props.js';
import '../input/useInput.js';
import '../form/const.js';
import '../input/useLengthLimit.js';
import '../_common/js/log/log.js';
import '../_common/js/utils/helper.js';
import '../input/useInputEventHandler.js';
import '../input/useInputWidth.js';
import '../input/input-group.js';
import '../button/button.js';
import '../loading/index.js';
import '../loading/directive.js';
import '../loading/plugin.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import '../button/props.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var TableFilterController = defineComponent({
  name: "TableFilterController",
  props: {
    column: Object,
    tFilterValue: Object,
    innerFilterValue: Object,
    tableFilterClasses: Object,
    isFocusClass: String,
    primaryTableElement: {},
    onVisibleChange: Function
  },
  emits: ["inner-filter-change", "reset", "confirm"],
  setup: function setup(props) {
    var triggerElementRef = ref(null);
    var renderTNode = useTNodeDefault();
    var _useConfig = useConfig("table"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        FilterIcon: FilterIcon
      }),
      FilterIcon$1 = _useGlobalIcon.FilterIcon;
    var filterPopupVisible = ref(false);
    var onFilterPopupVisibleChange = function onFilterPopupVisibleChange(visible) {
      var _props$onVisibleChang;
      filterPopupVisible.value = visible;
      (_props$onVisibleChang = props.onVisibleChange) === null || _props$onVisibleChang === void 0 ? void 0 : _props$onVisibleChang.call(props, visible);
    };
    return {
      t: t,
      globalConfig: globalConfig,
      FilterIcon: FilterIcon$1,
      filterPopupVisible: filterPopupVisible,
      triggerElementRef: triggerElementRef,
      renderTNode: renderTNode,
      onFilterPopupVisibleChange: onFilterPopupVisibleChange
    };
  },
  render: function render() {
    var _this = this,
      _this$tFilterValue;
    var getFilterContent = function getFilterContent(column2) {
      var _column2$filter, _column2$filter2, _this$innerFilterValu;
      var types = ["single", "multiple", "input"];
      if (column2.type && !types.includes(column2.filter.type)) {
        console.error("TDesign Table Error: column.filter.type must be the following: ".concat(JSON.stringify(types)));
        return;
      }
      var component = {
        single: RadioGroup,
        multiple: CheckboxGroup,
        input: Input
      }[column2.filter.type] || column2.filter.component;
      if (!component && !column2.filter.component) return;
      var filterComponentProps = _objectSpread(_objectSpread({
        options: ["single", "multiple"].includes(column2.filter.type) ? (_column2$filter = column2.filter) === null || _column2$filter === void 0 ? void 0 : _column2$filter.list : void 0
      }, ((_column2$filter2 = column2.filter) === null || _column2$filter2 === void 0 ? void 0 : _column2$filter2.props) || {}), {}, {
        value: (_this$innerFilterValu = _this.innerFilterValue) === null || _this$innerFilterValu === void 0 ? void 0 : _this$innerFilterValu[column2.colKey],
        onChange: function onChange(val) {
          _this.$emit("inner-filter-change", val, column2);
        }
      });
      if (column2.filter.confirmEvents) {
        column2.filter.confirmEvents.forEach(function (event) {
          filterComponentProps[event] = function () {
            _this.$emit("confirm", column2);
            _this.filterPopupVisible = false;
          };
        });
      }
      var renderComponent = function renderComponent() {
        var _this$innerFilterValu2;
        if (!component) return null;
        var isVueComponent = !!component.setup;
        if (typeof column2.filter.component === "function" && !isVueComponent) {
          return column2.filter.component(function (v, b) {
            var tProps = _typeof(b) === "object" && "attrs" in b ? b.attrs : {};
            return h(v, {
              props: _objectSpread(_objectSpread({}, filterComponentProps), tProps)
            });
          });
        }
        return createVNode(component, mergeProps({
          "value": (_this$innerFilterValu2 = _this.innerFilterValue) === null || _this$innerFilterValu2 === void 0 ? void 0 : _this$innerFilterValu2[column2.colKey]
        }, filterComponentProps), null);
      };
      return createVNode("div", {
        "class": _this.tableFilterClasses.contentInner
      }, [renderComponent()]);
    };
    var getBottomButtons = function getBottomButtons(column2) {
      if (!column2.filter.showConfirmAndReset) return;
      return createVNode("div", {
        "class": _this.tableFilterClasses.bottomButtons
      }, [createVNode(Button, {
        "theme": "default",
        "size": "small",
        "onClick": function onClick() {
          _this.$emit("reset", column2);
          _this.filterPopupVisible = false;
        }
      }, {
        "default": function _default() {
          return [_this.globalConfig.resetText];
        }
      }), createVNode(Button, {
        "theme": "primary",
        "size": "small",
        "onClick": function onClick() {
          _this.$emit("confirm", column2);
          _this.filterPopupVisible = false;
        }
      }, {
        "default": function _default() {
          return [_this.globalConfig.confirmText];
        }
      })]);
    };
    var column = this.column;
    var FilterIcon = this.FilterIcon;
    if (!column.filter || column.filter && !Object.keys(column.filter).length) return null;
    var defaultFilterIcon = this.t(this.globalConfig.filterIcon) || createVNode(FilterIcon, null, null);
    var filterValue = (_this$tFilterValue = this.tFilterValue) === null || _this$tFilterValue === void 0 ? void 0 : _this$tFilterValue[column.colKey];
    var isObjectTrue = _typeof(filterValue) === "object" && !isEmpty(filterValue);
    var isValueTrue = filterValue && _typeof(filterValue) !== "object";
    return createVNode(Popup, {
      "attach": this.primaryTableElement ? function () {
        return _this.primaryTableElement;
      } : void 0,
      "visible": this.filterPopupVisible,
      "destroyOnClose": true,
      "trigger": "click",
      "placement": "bottom-right",
      "showArrow": true,
      "overlayClassName": this.tableFilterClasses.popup,
      "onVisibleChange": function onVisibleChange(val) {
        return _this.onFilterPopupVisibleChange(val);
      },
      "class": [this.tableFilterClasses.icon, _defineProperty({}, this.isFocusClass, isObjectTrue || isValueTrue)],
      "content": function content() {
        return createVNode("div", {
          "class": _this.tableFilterClasses.popupContent
        }, [getFilterContent(column), getBottomButtons(column)]);
      }
    }, {
      "default": function _default() {
        return [createVNode("div", {
          "ref": "triggerElementRef"
        }, [_this.renderTNode("filterIcon", defaultFilterIcon)])];
      }
    });
  }
});

export { TableFilterController as default };
//# sourceMappingURL=filter-controller.js.map
