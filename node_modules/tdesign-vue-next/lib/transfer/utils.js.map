{"version":3,"file":"utils.js","sources":["../../src/transfer/utils.ts"],"sourcesContent":["import { ComponentPublicInstance } from 'vue';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { TransferListOptionBase, TransferItemOption, TdTransferProps, TransferValue, DataOption } from './interface';\n\nexport { emitEvent } from '../utils/event';\n\nexport const TRANSFER_NAME = 'TTransfer';\n\ninterface TreeNode {\n  children?: Array<TreeNode>;\n}\n\nfunction findTopNode(vm: ComponentPublicInstance): ComponentPublicInstance {\n  // 找到t-transfer这层父节点\n  if (vm.$options.name === 't-transfer') {\n    return vm;\n  }\n  if (vm.$parent) {\n    return findTopNode(vm.$parent);\n  }\n  return vm;\n}\n\nfunction getTransferListOption<T>(prop: T | Array<T>): TransferListOptionBase<T> {\n  if (Array.isArray(prop)) {\n    return {\n      source: prop[0],\n      target: prop[1],\n    };\n  }\n  return {\n    source: prop,\n    target: prop,\n  };\n}\n\nfunction getDataValues(\n  data: Array<TransferItemOption>,\n  filterValues: Array<TransferValue>,\n  {\n    isTreeMode = false,\n    include = true, // true=保留filterValues，false=删除filterValues中元素\n  } = {},\n): Array<TransferValue> {\n  // 用于处理 tree 组件这种数据结构是树形的\n  if (isTreeMode) {\n    let result: Array<TransferValue> = [];\n    if (data) {\n      for (let i = 0; i < data.length; i++) {\n        const item = data[i];\n        const isInclude = filterValues.includes(item.value);\n        if (!include && isInclude) {\n          continue; // 排除模式下子元素一律排除\n        }\n\n        // 只找叶子节点\n        if (item.children && item.children.length > 0) {\n          const childResult = getDataValues(item.children, filterValues, {\n            isTreeMode,\n            include,\n          });\n          result = result.concat(childResult);\n        } else if ((include && isInclude) || (!include && !isInclude)) {\n          result.push(item.value);\n        }\n      }\n    }\n    return result;\n  }\n  return data\n    .filter((item) => {\n      if (!item) return false;\n      const isInclude = filterValues.includes(item.value);\n      return ((include && isInclude) || (!include && !isInclude)) && !item.disabled;\n    })\n    .map((item) => item.value);\n}\n\nfunction getTransferData(\n  data: Array<DataOption>,\n  keys: TdTransferProps['keys'],\n  isTreeMode = false,\n): Array<TransferItemOption> {\n  const list: Array<TransferItemOption> = data.map((transferDataItem, index): TransferItemOption => {\n    const labelKey = keys?.label || 'label';\n    const valueKey = keys?.value || 'value';\n    if (transferDataItem[labelKey] === undefined) {\n      throw new Error(`${labelKey} is not in DataOption ${JSON.stringify(transferDataItem)}`);\n    }\n    if (transferDataItem[valueKey] === undefined) {\n      throw new Error(`${valueKey} is not in DataOption ${JSON.stringify(transferDataItem)}`);\n    }\n    const result: TransferItemOption = {\n      label: transferDataItem[labelKey] as string,\n      value: transferDataItem[valueKey],\n      key: `key__value_${transferDataItem[valueKey]}_index_${index}`,\n      disabled: transferDataItem.disabled ?? false,\n      data: transferDataItem,\n    };\n    if (isTreeMode && transferDataItem.children) {\n      result.children = getTransferData(transferDataItem.children, keys, true);\n    }\n    return result;\n  });\n  return list;\n}\n\nfunction isAllNodeValid(data: TransferItemOption, filterValues: Array<TransferValue>, needMatch: boolean): boolean {\n  if (filterValues.includes(data.value)) {\n    return needMatch;\n  }\n  return false;\n}\n\nfunction isTreeNodeValid(data: TransferItemOption, filterValues: Array<TransferValue>, needMatch: boolean): boolean {\n  if (!data) return !needMatch;\n\n  if (filterValues.includes(data.value)) {\n    return needMatch;\n  }\n\n  if (data.children?.length) {\n    return data.children.some((item) => isTreeNodeValid(item, filterValues, needMatch));\n  }\n  return !needMatch;\n}\n\n// 复制树并过滤节点\nfunction cloneTreeWithFilter(\n  sourceTree: TransferItemOption[],\n  targetTree: TransferItemOption[],\n  filterValues: Array<TransferValue>,\n  needMatch: boolean,\n) {\n  sourceTree.forEach((item) => {\n    let newNode: TransferItemOption;\n    if (isAllNodeValid(item, filterValues, needMatch)) {\n      // 如果当前节点直接命中，则复制所有子节点\n      newNode = cloneDeep<TransferItemOption>(item);\n      targetTree.push(newNode);\n    } else if (isTreeNodeValid(item, filterValues, needMatch)) {\n      // 如果有合法子节点，就复制这个节点\n      newNode = {\n        ...item,\n      };\n      delete newNode.children;\n      targetTree.push(newNode);\n      if (item.children) {\n        newNode.children = [];\n        cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);\n        if (newNode.children.length === 0) {\n          delete newNode.children;\n        }\n      }\n    }\n  });\n}\n\n// 过滤列表，如果是树的话需要保持树的结构\nfunction filterTransferData(\n  data: Array<TransferItemOption>,\n  filterValues: Array<TransferValue>,\n  needMatch = true,\n  isTreeMode = false,\n) {\n  if (!isTreeMode) {\n    if (needMatch) {\n      // 正向过滤。要保持filterValues顺序\n      return filterValues.map((value) => data.find((item) => item.value === value)).filter((item) => !!item);\n    }\n    // 反向过滤\n    return data.filter((item) => {\n      const isMatch = filterValues.includes(item.value);\n      return !isMatch;\n    });\n  }\n\n  const result: Array<TransferItemOption> = [];\n  cloneTreeWithFilter(data, result, filterValues, needMatch);\n  return result;\n}\n\n// 获取树节点的叶子数量\nfunction getLefCount(nodes: Array<TreeNode>): number {\n  let total = 0;\n  nodes.forEach((child) => {\n    if (child.children && child.children.length > 0) {\n      total += getLefCount(child.children);\n    } else {\n      total += 1;\n    }\n  });\n  return total;\n}\n\nexport {\n  findTopNode,\n  getTransferListOption,\n  getDataValues,\n  getTransferData,\n  cloneTreeWithFilter,\n  filterTransferData,\n  getLefCount,\n};\n"],"names":["TRANSFER_NAME","findTopNode","vm","$options","name","$parent","getTransferListOption","prop","Array","isArray","source","target","getDataValues","data","filterValues","isTreeMode","include","result","i","length","item","isInclude","includes","value","children","childResult","concat","push","filter","disabled","map","getTransferData","keys","list","transferDataItem","index","labelKey","label","valueKey","Error","JSON","stringify","key","isAllNodeValid","needMatch","isTreeNodeValid","some","cloneTreeWithFilter","sourceTree","targetTree","forEach","newNode","cloneDeep","filterTransferData","find","isMatch","getLefCount","nodes","total","child"],"mappings":";;;;;;;;;;;;;;;;AAOO,IAAMA,aAAgB,GAAA,YAAA;AAM7B,SAASC,YAAYC,EAAsD,EAAA;AAErE,EAAA,IAAAA,EAAA,CAAGC,QAAS,CAAAC,IAAA,KAAS,YAAc,EAAA;AAC9B,IAAA,OAAAF,EAAA,CAAA;AACT,GAAA;EACA,IAAIA,GAAGG,OAAS,EAAA;AACP,IAAA,OAAAJ,WAAA,CAAYC,GAAGG,OAAO,CAAA,CAAA;AAC/B,GAAA;AACO,EAAA,OAAAH,EAAA,CAAA;AACT,CAAA;AAEA,SAASI,sBAAyBC,IAA+C,EAAA;AAC3E,EAAA,IAAAC,KAAA,CAAMC,OAAQ,CAAAF,IAAI,CAAG,EAAA;IAChB,OAAA;AACLG,MAAAA,QAAQH,IAAK,CAAA,CAAA,CAAA;MACbI,QAAQJ,IAAK,CAAA,CAAA,CAAA;KACf,CAAA;AACF,GAAA;EACO,OAAA;AACLG,IAAAA,MAAQ,EAAAH,IAAA;AACRI,IAAAA,MAAQ,EAAAJ,IAAAA;GACV,CAAA;AACF,CAAA;AAEA,SAASK,aAAA,CACPC,MACAC,YACA,EAIsB;AAAA,EAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADlB,EACkB;AAAA,IAAA,eAAA,GAAA,IAAA,CAHpBC,UAAa;AAAbA,IAAAA,UAAa,gCAAA,KAAA,GAAA,eAAA;AAAA,IAAA,YAAA,GAAA,IAAA,CACbC,OAAU;AAAVA,IAAAA,OAAU,6BAAA,IAAA,GAAA,YAAA,CAAA;AAIZ,EAAA,IAAID,UAAY,EAAA;IACd,IAAIE,SAA+B,EAAC,CAAA;AACpC,IAAA,IAAIJ,IAAM,EAAA;AACR,MAAA,KAAA,IAASK,CAAI,GAAA,CAAA,EAAGA,CAAI,GAAAL,IAAA,CAAKM,QAAQD,CAAK,EAAA,EAAA;AACpC,QAAA,IAAME,OAAOP,IAAK,CAAAK,CAAA,CAAA,CAAA;QAClB,IAAMG,SAAY,GAAAP,YAAA,CAAaQ,QAAS,CAAAF,IAAA,CAAKG,KAAK,CAAA,CAAA;AAC9C,QAAA,IAAA,CAACP,WAAWK,SAAW,EAAA;AACzB,UAAA,SAAA;AACF,SAAA;QAGA,IAAID,IAAK,CAAAI,QAAA,IAAYJ,IAAK,CAAAI,QAAA,CAASL,SAAS,CAAG,EAAA;UAC7C,IAAMM,WAAc,GAAAb,aAAA,CAAcQ,IAAK,CAAAI,QAAA,EAAUV,YAAc,EAAA;AAC7DC,YAAAA,UAAA,EAAAA,UAAA;AACAC,YAAAA,OAAA,EAAAA,OAAAA;AACF,WAAC,CAAA,CAAA;AACQC,UAAAA,MAAA,GAAAA,MAAA,CAAOS,OAAOD,WAAW,CAAA,CAAA;mBACxBT,OAAW,IAAAK,SAAA,IAAe,CAACL,OAAA,IAAW,CAACK,SAAY,EAAA;AACtDJ,UAAAA,MAAA,CAAAU,IAAA,CAAKP,KAAKG,KAAK,CAAA,CAAA;AACxB,SAAA;AACF,OAAA;AACF,KAAA;AACO,IAAA,OAAAN,MAAA,CAAA;AACT,GAAA;AACO,EAAA,OAAAJ,IAAA,CACJe,MAAO,CAAA,UAACR,IAAS,EAAA;AAChB,IAAA,IAAI,CAACA,IAAA,EAAa,OAAA,KAAA,CAAA;IAClB,IAAMC,SAAY,GAAAP,YAAA,CAAaQ,QAAS,CAAAF,IAAA,CAAKG,KAAK,CAAA,CAAA;AAClD,IAAA,OAAA,CAASP,WAAWK,SAAe,IAAA,CAACL,WAAW,CAACK,SAAA,KAAe,CAACD,IAAK,CAAAS,QAAA,CAAA;AACvE,GAAC,CACA,CAAAC,GAAA,CAAI,UAACV,IAAA,EAAA;IAAA,OAASA,KAAKG,KAAK,CAAA;GAAA,CAAA,CAAA;AAC7B,CAAA;AAEA,SAASQ,eACP,CAAAlB,IAAA,EACAmB,IACA,EAC2B;EAAA,IAD3BjB,UAAA,uEAAa,KACc,CAAA;EAC3B,IAAMkB,IAAkC,GAAApB,IAAA,CAAKiB,GAAI,CAAA,UAACI,kBAAkBC,KAA8B,EAAA;AAAA,IAAA,IAAA,qBAAA,CAAA;IAC1F,IAAAC,QAAA,GAAW,CAAAJ,iBAAAA,2BAAAA,KAAMK,KAAS,KAAA,OAAA,CAAA;IAC1B,IAAAC,QAAA,GAAW,CAAAN,iBAAAA,2BAAAA,KAAMT,KAAS,KAAA,OAAA,CAAA;AAC5B,IAAA,IAAAW,gBAAA,CAAiBE,cAAc,KAAW,CAAA,EAAA;MAC5C,MAAM,IAAIG,KAAM,CAAA,EAAA,CAAA,MAAA,CAAGH,2CAAiCI,IAAK,CAAAC,SAAA,CAAUP,gBAAgB,CAAG,CAAA,CAAA,CAAA;AACxF,KAAA;AACI,IAAA,IAAAA,gBAAA,CAAiBI,cAAc,KAAW,CAAA,EAAA;MAC5C,MAAM,IAAIC,KAAM,CAAA,EAAA,CAAA,MAAA,CAAGD,2CAAiCE,IAAK,CAAAC,SAAA,CAAUP,gBAAgB,CAAG,CAAA,CAAA,CAAA;AACxF,KAAA;AACA,IAAA,IAAMjB,MAA6B,GAAA;AACjCoB,MAAAA,OAAOH,gBAAiB,CAAAE,QAAA,CAAA;AACxBb,MAAAA,OAAOW,gBAAiB,CAAAI,QAAA,CAAA;AACxBI,MAAAA,GAAA,uBAAmBR,gBAAA,CAAiBI,QAAmB,CAAA,EAAA,SAAA,CAAA,CAAA,MAAA,CAAAH,KAAA,CAAA;AACvDN,MAAAA,QAAA,EAAUK,CAAAA,qBAAAA,GAAAA,iBAAiBL,QAAY,yEAAA,KAAA;AACvChB,MAAAA,IAAM,EAAAqB,gBAAAA;KACR,CAAA;AACI,IAAA,IAAAnB,UAAA,IAAcmB,iBAAiBV,QAAU,EAAA;AAC3CP,MAAAA,MAAA,CAAOO,QAAW,GAAAO,eAAA,CAAgBG,gBAAiB,CAAAV,QAAA,EAAUQ,MAAM,IAAI,CAAA,CAAA;AACzE,KAAA;AACO,IAAA,OAAAf,MAAA,CAAA;AACT,GAAC,CAAA,CAAA;AACM,EAAA,OAAAgB,IAAA,CAAA;AACT,CAAA;AAEA,SAASU,cAAA,CAAe9B,IAA0B,EAAAC,YAAA,EAAoC8B,SAA6B,EAAA;EACjH,IAAI9B,YAAa,CAAAQ,QAAA,CAAST,IAAK,CAAAU,KAAK,CAAG,EAAA;AAC9B,IAAA,OAAAqB,SAAA,CAAA;AACT,GAAA;AACO,EAAA,OAAA,KAAA,CAAA;AACT,CAAA;AAEA,SAASC,eAAA,CAAgBhC,IAA0B,EAAAC,YAAA,EAAoC8B,SAA6B,EAAA;AAAA,EAAA,IAAA,cAAA,CAAA;AAClH,EAAA,IAAI,CAAC/B,IAAA,EAAM,OAAO,CAAC+B,SAAA,CAAA;EAEnB,IAAI9B,YAAa,CAAAQ,QAAA,CAAST,IAAK,CAAAU,KAAK,CAAG,EAAA;AAC9B,IAAA,OAAAqB,SAAA,CAAA;AACT,GAAA;AAEI,EAAA,IAAA,CAAA,cAAA,GAAA/B,IAAA,CAAKW,cAAL,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,IAAA,cAAA,CAAeL,MAAQ,EAAA;AAClB,IAAA,OAAAN,IAAA,CAAKW,SAASsB,IAAK,CAAA,UAAC1B;aAASyB,eAAgB,CAAAzB,IAAA,EAAMN,YAAc,EAAA8B,SAAS,CAAC,CAAA;KAAA,CAAA,CAAA;AACpF,GAAA;AACA,EAAA,OAAO,CAACA,SAAA,CAAA;AACV,CAAA;AAGA,SAASG,mBACP,CAAAC,UAAA,EACAC,UACA,EAAAnC,YAAA,EACA8B,SACA,EAAA;AACWI,EAAAA,UAAA,CAAAE,OAAA,CAAQ,UAAC9B,IAAS,EAAA;AACvB,IAAA,IAAA+B,OAAA,CAAA;IACJ,IAAIR,cAAe,CAAAvB,IAAA,EAAMN,YAAc,EAAA8B,SAAS,CAAG,EAAA;AAEjDO,MAAAA,OAAA,GAAUC,UAA8BhC,IAAI,CAAA,CAAA;AAC5C6B,MAAAA,UAAA,CAAWtB,KAAKwB,OAAO,CAAA,CAAA;KACd,MAAA,IAAAN,eAAA,CAAgBzB,IAAM,EAAAN,YAAA,EAAc8B,SAAS,CAAG,EAAA;MAE/CO,OAAA,GAAA,aAAA,CAAA,EAAA,EACL/B,IAAA,CACL,CAAA;MACA,OAAO+B,OAAQ,CAAA3B,QAAA,CAAA;AACfyB,MAAAA,UAAA,CAAWtB,KAAKwB,OAAO,CAAA,CAAA;MACvB,IAAI/B,KAAKI,QAAU,EAAA;QACjB2B,OAAA,CAAQ3B,WAAW,EAAC,CAAA;AACpBuB,QAAAA,mBAAA,CAAoB3B,IAAK,CAAAI,QAAA,EAAU2B,OAAQ,CAAA3B,QAAA,EAAUV,cAAc8B,SAAS,CAAA,CAAA;AACxE,QAAA,IAAAO,OAAA,CAAQ3B,QAAS,CAAAL,MAAA,KAAW,CAAG,EAAA;UACjC,OAAOgC,OAAQ,CAAA3B,QAAA,CAAA;AACjB,SAAA;AACF,OAAA;AACF,KAAA;AACF,GAAC,CAAA,CAAA;AACH,CAAA;AAGA,SAAS6B,mBACPxC,IACA,EAAAC,YAAA,EAGA;EAAA,IAFA8B,SAAY,uEAAA,IAAA,CAAA;EAAA,IACZ7B,iFAAa,KACb,CAAA;EACA,IAAI,CAACA,UAAY,EAAA;AACf,IAAA,IAAI6B,SAAW,EAAA;AAEb,MAAA,OAAO9B,aAAagB,GAAI,CAAA,UAACP;eAAUV,IAAK,CAAAyC,IAAA,CAAK,UAAClC,IAAS,EAAA;AAAA,UAAA,OAAAA,IAAA,CAAKG,KAAU,KAAAA,KAAK,CAAA;SAAC,CAAA,CAAA;AAAA,OAAA,CAAE,CAAAK,MAAA,CAAO,UAACR,IAAS,EAAA;QAAA,OAAA,CAAC,CAACA,IAAI,CAAA;OAAA,CAAA,CAAA;AACvG,KAAA;AAEO,IAAA,OAAAP,IAAA,CAAKe,MAAO,CAAA,UAACR,IAAS,EAAA;MAC3B,IAAMmC,OAAU,GAAAzC,YAAA,CAAaQ,QAAS,CAAAF,IAAA,CAAKG,KAAK,CAAA,CAAA;AAChD,MAAA,OAAO,CAACgC,OAAA,CAAA;AACV,KAAC,CAAA,CAAA;AACH,GAAA;EAEA,IAAMtC,SAAoC,EAAC,CAAA;EACvB8B,mBAAA,CAAAlC,IAAA,EAAMI,MAAQ,EAAAH,YAAA,EAAc8B,SAAS,CAAA,CAAA;AAClD,EAAA,OAAA3B,MAAA,CAAA;AACT,CAAA;AAGA,SAASuC,YAAYC,KAAgC,EAAA;EACnD,IAAIC,KAAQ,GAAA,CAAA,CAAA;AACND,EAAAA,KAAA,CAAAP,OAAA,CAAQ,UAACS,KAAU,EAAA;IACvB,IAAIA,KAAM,CAAAnC,QAAA,IAAYmC,KAAM,CAAAnC,QAAA,CAASL,SAAS,CAAG,EAAA;AACtCuC,MAAAA,KAAA,IAAAF,WAAA,CAAYG,MAAMnC,QAAQ,CAAA,CAAA;AACrC,KAAO,MAAA;AACIkC,MAAAA,KAAA,IAAA,CAAA,CAAA;AACX,KAAA;AACF,GAAC,CAAA,CAAA;AACM,EAAA,OAAAA,KAAA,CAAA;AACT;;;;"}