import { TdSwiperProps } from './type';
import './style';
export * from './type';
export declare type SwiperProps = TdSwiperProps;
export declare const Swiper: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            type: "default" | "card";
            interval: number;
            animation: "fade" | "slide";
            direction: "horizontal" | "vertical";
            duration: number;
            autoplay: boolean;
            loop: boolean;
            trigger: "click" | "hover";
            current: number;
            theme: "dark" | "light";
            defaultCurrent: number;
            stopOnHover: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            animation: {
                type: import("vue").PropType<"fade" | "slide">;
                default: "fade" | "slide";
                validator(val: "fade" | "slide"): boolean;
            };
            autoplay: {
                type: BooleanConstructor;
                default: boolean;
            };
            current: {
                type: NumberConstructor;
                default: number;
            };
            defaultCurrent: {
                type: NumberConstructor;
                default: number;
            };
            direction: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            duration: {
                type: NumberConstructor;
                default: number;
            };
            height: {
                type: NumberConstructor;
            };
            interval: {
                type: NumberConstructor;
                default: number;
            };
            loop: {
                type: BooleanConstructor;
                default: boolean;
            };
            navigation: {
                type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("./type").SwiperNavigation>;
            };
            stopOnHover: {
                type: BooleanConstructor;
                default: boolean;
            };
            theme: {
                type: import("vue").PropType<"dark" | "light">;
                default: "dark" | "light";
                validator(val: "dark" | "light"): boolean;
            };
            trigger: {
                type: import("vue").PropType<"click" | "hover">;
                default: "click" | "hover";
                validator(val: "click" | "hover"): boolean;
            };
            type: {
                type: import("vue").PropType<"default" | "card">;
                default: "default" | "card";
                validator(val: "default" | "card"): boolean;
            };
            onChange: import("vue").PropType<(current: number, context: {
                source: import("./type").SwiperChangeSource;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "type" | "interval" | "animation" | "direction" | "duration" | "autoplay" | "loop" | "trigger" | "current" | "theme" | "defaultCurrent" | "stopOnHover">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            animation: {
                type: import("vue").PropType<"fade" | "slide">;
                default: "fade" | "slide";
                validator(val: "fade" | "slide"): boolean;
            };
            autoplay: {
                type: BooleanConstructor;
                default: boolean;
            };
            current: {
                type: NumberConstructor;
                default: number;
            };
            defaultCurrent: {
                type: NumberConstructor;
                default: number;
            };
            direction: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            duration: {
                type: NumberConstructor;
                default: number;
            };
            height: {
                type: NumberConstructor;
            };
            interval: {
                type: NumberConstructor;
                default: number;
            };
            loop: {
                type: BooleanConstructor;
                default: boolean;
            };
            navigation: {
                type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("./type").SwiperNavigation>;
            };
            stopOnHover: {
                type: BooleanConstructor;
                default: boolean;
            };
            theme: {
                type: import("vue").PropType<"dark" | "light">;
                default: "dark" | "light";
                validator(val: "dark" | "light"): boolean;
            };
            trigger: {
                type: import("vue").PropType<"click" | "hover">;
                default: "click" | "hover";
                validator(val: "click" | "hover"): boolean;
            };
            type: {
                type: import("vue").PropType<"default" | "card">;
                default: "default" | "card";
                validator(val: "default" | "card"): boolean;
            };
            onChange: import("vue").PropType<(current: number, context: {
                source: import("./type").SwiperChangeSource;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            type: "default" | "card";
            interval: number;
            animation: "fade" | "slide";
            direction: "horizontal" | "vertical";
            duration: number;
            autoplay: boolean;
            loop: boolean;
            trigger: "click" | "hover";
            current: number;
            theme: "dark" | "light";
            defaultCurrent: number;
            stopOnHover: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<"fade" | "slide">;
            default: "fade" | "slide";
            validator(val: "fade" | "slide"): boolean;
        };
        autoplay: {
            type: BooleanConstructor;
            default: boolean;
        };
        current: {
            type: NumberConstructor;
            default: number;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        direction: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        height: {
            type: NumberConstructor;
        };
        interval: {
            type: NumberConstructor;
            default: number;
        };
        loop: {
            type: BooleanConstructor;
            default: boolean;
        };
        navigation: {
            type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("./type").SwiperNavigation>;
        };
        stopOnHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<"dark" | "light">;
            default: "dark" | "light";
            validator(val: "dark" | "light"): boolean;
        };
        trigger: {
            type: import("vue").PropType<"click" | "hover">;
            default: "click" | "hover";
            validator(val: "click" | "hover"): boolean;
        };
        type: {
            type: import("vue").PropType<"default" | "card">;
            default: "default" | "card";
            validator(val: "default" | "card"): boolean;
        };
        onChange: import("vue").PropType<(current: number, context: {
            source: import("./type").SwiperChangeSource;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: import("vue").PropType<"fade" | "slide">;
        default: "fade" | "slide";
        validator(val: "fade" | "slide"): boolean;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    current: {
        type: NumberConstructor;
        default: number;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: NumberConstructor;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigation: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("./type").SwiperNavigation>;
    };
    stopOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"dark" | "light">;
        default: "dark" | "light";
        validator(val: "dark" | "light"): boolean;
    };
    trigger: {
        type: import("vue").PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    type: {
        type: import("vue").PropType<"default" | "card">;
        default: "default" | "card";
        validator(val: "default" | "card"): boolean;
    };
    onChange: import("vue").PropType<(current: number, context: {
        source: import("./type").SwiperChangeSource;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    type: "default" | "card";
    interval: number;
    animation: "fade" | "slide";
    direction: "horizontal" | "vertical";
    duration: number;
    autoplay: boolean;
    loop: boolean;
    trigger: "click" | "hover";
    current: number;
    theme: "dark" | "light";
    defaultCurrent: number;
    stopOnHover: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const SwiperItem: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            type: "default" | "card";
            interval: number;
            animation: "fade" | "slide";
            direction: "horizontal" | "vertical";
            duration: number;
            autoplay: boolean;
            loop: boolean;
            trigger: "click" | "hover";
            current: number;
            theme: "dark" | "light";
            defaultCurrent: number;
            isSwitching: boolean;
            swiperItemLength: number;
            stopOnHover: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            index: {
                type: NumberConstructor;
            };
            currentIndex: {
                type: NumberConstructor;
            };
            isSwitching: {
                type: BooleanConstructor;
                default: boolean;
            };
            getWrapAttribute: {
                type: FunctionConstructor;
            };
            swiperItemLength: {
                type: NumberConstructor;
                default: number;
            };
            animation: {
                type: import("vue").PropType<"fade" | "slide">;
                default: "fade" | "slide";
                validator(val: "fade" | "slide"): boolean;
            };
            autoplay: {
                type: BooleanConstructor;
                default: boolean;
            };
            current: {
                type: NumberConstructor;
                default: number;
            };
            defaultCurrent: {
                type: NumberConstructor;
                default: number;
            };
            direction: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            duration: {
                type: NumberConstructor;
                default: number;
            };
            height: {
                type: NumberConstructor;
            };
            interval: {
                type: NumberConstructor;
                default: number;
            };
            loop: {
                type: BooleanConstructor;
                default: boolean;
            };
            navigation: {
                type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("./type").SwiperNavigation>;
            };
            stopOnHover: {
                type: BooleanConstructor;
                default: boolean;
            };
            theme: {
                type: import("vue").PropType<"dark" | "light">;
                default: "dark" | "light";
                validator(val: "dark" | "light"): boolean;
            };
            trigger: {
                type: import("vue").PropType<"click" | "hover">;
                default: "click" | "hover";
                validator(val: "click" | "hover"): boolean;
            };
            type: {
                type: import("vue").PropType<"default" | "card">;
                default: "default" | "card";
                validator(val: "default" | "card"): boolean;
            };
            onChange: import("vue").PropType<(current: number, context: {
                source: import("./type").SwiperChangeSource;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "type" | "interval" | "animation" | "direction" | "duration" | "autoplay" | "loop" | "trigger" | "current" | "theme" | "defaultCurrent" | "isSwitching" | "swiperItemLength" | "stopOnHover">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            index: {
                type: NumberConstructor;
            };
            currentIndex: {
                type: NumberConstructor;
            };
            isSwitching: {
                type: BooleanConstructor;
                default: boolean;
            };
            getWrapAttribute: {
                type: FunctionConstructor;
            };
            swiperItemLength: {
                type: NumberConstructor;
                default: number;
            };
            animation: {
                type: import("vue").PropType<"fade" | "slide">;
                default: "fade" | "slide";
                validator(val: "fade" | "slide"): boolean;
            };
            autoplay: {
                type: BooleanConstructor;
                default: boolean;
            };
            current: {
                type: NumberConstructor;
                default: number;
            };
            defaultCurrent: {
                type: NumberConstructor;
                default: number;
            };
            direction: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            duration: {
                type: NumberConstructor;
                default: number;
            };
            height: {
                type: NumberConstructor;
            };
            interval: {
                type: NumberConstructor;
                default: number;
            };
            loop: {
                type: BooleanConstructor;
                default: boolean;
            };
            navigation: {
                type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("./type").SwiperNavigation>;
            };
            stopOnHover: {
                type: BooleanConstructor;
                default: boolean;
            };
            theme: {
                type: import("vue").PropType<"dark" | "light">;
                default: "dark" | "light";
                validator(val: "dark" | "light"): boolean;
            };
            trigger: {
                type: import("vue").PropType<"click" | "hover">;
                default: "click" | "hover";
                validator(val: "click" | "hover"): boolean;
            };
            type: {
                type: import("vue").PropType<"default" | "card">;
                default: "default" | "card";
                validator(val: "default" | "card"): boolean;
            };
            onChange: import("vue").PropType<(current: number, context: {
                source: import("./type").SwiperChangeSource;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            type: "default" | "card";
            interval: number;
            animation: "fade" | "slide";
            direction: "horizontal" | "vertical";
            duration: number;
            autoplay: boolean;
            loop: boolean;
            trigger: "click" | "hover";
            current: number;
            theme: "dark" | "light";
            defaultCurrent: number;
            isSwitching: boolean;
            swiperItemLength: number;
            stopOnHover: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        index: {
            type: NumberConstructor;
        };
        currentIndex: {
            type: NumberConstructor;
        };
        isSwitching: {
            type: BooleanConstructor;
            default: boolean;
        };
        getWrapAttribute: {
            type: FunctionConstructor;
        };
        swiperItemLength: {
            type: NumberConstructor;
            default: number;
        };
        animation: {
            type: import("vue").PropType<"fade" | "slide">;
            default: "fade" | "slide";
            validator(val: "fade" | "slide"): boolean;
        };
        autoplay: {
            type: BooleanConstructor;
            default: boolean;
        };
        current: {
            type: NumberConstructor;
            default: number;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        direction: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        height: {
            type: NumberConstructor;
        };
        interval: {
            type: NumberConstructor;
            default: number;
        };
        loop: {
            type: BooleanConstructor;
            default: boolean;
        };
        navigation: {
            type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("./type").SwiperNavigation>;
        };
        stopOnHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<"dark" | "light">;
            default: "dark" | "light";
            validator(val: "dark" | "light"): boolean;
        };
        trigger: {
            type: import("vue").PropType<"click" | "hover">;
            default: "click" | "hover";
            validator(val: "click" | "hover"): boolean;
        };
        type: {
            type: import("vue").PropType<"default" | "card">;
            default: "default" | "card";
            validator(val: "default" | "card"): boolean;
        };
        onChange: import("vue").PropType<(current: number, context: {
            source: import("./type").SwiperChangeSource;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    index: {
        type: NumberConstructor;
    };
    currentIndex: {
        type: NumberConstructor;
    };
    isSwitching: {
        type: BooleanConstructor;
        default: boolean;
    };
    getWrapAttribute: {
        type: FunctionConstructor;
    };
    swiperItemLength: {
        type: NumberConstructor;
        default: number;
    };
    animation: {
        type: import("vue").PropType<"fade" | "slide">;
        default: "fade" | "slide";
        validator(val: "fade" | "slide"): boolean;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    current: {
        type: NumberConstructor;
        default: number;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: NumberConstructor;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigation: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("./type").SwiperNavigation>;
    };
    stopOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"dark" | "light">;
        default: "dark" | "light";
        validator(val: "dark" | "light"): boolean;
    };
    trigger: {
        type: import("vue").PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    type: {
        type: import("vue").PropType<"default" | "card">;
        default: "default" | "card";
        validator(val: "default" | "card"): boolean;
    };
    onChange: import("vue").PropType<(current: number, context: {
        source: import("./type").SwiperChangeSource;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    type: "default" | "card";
    interval: number;
    animation: "fade" | "slide";
    direction: "horizontal" | "vertical";
    duration: number;
    autoplay: boolean;
    loop: boolean;
    trigger: "click" | "hover";
    current: number;
    theme: "dark" | "light";
    defaultCurrent: number;
    isSwitching: boolean;
    swiperItemLength: number;
    stopOnHover: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Swiper;
