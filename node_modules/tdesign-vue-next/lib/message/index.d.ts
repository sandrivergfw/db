import { TdMessageProps } from './type';
import './style';
export * from './type';
export * from './plugin';
export declare type MessageProps = TdMessageProps;
export declare const Message: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            icon: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            duration: number;
            theme: import("./type").MessageThemeList;
            closeBtn: string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            placement: StringConstructor;
            closeBtn: {
                type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: any;
            };
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            duration: {
                type: NumberConstructor;
                default: number;
            };
            icon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            theme: {
                type: import("vue").PropType<import("./type").MessageThemeList>;
                default: import("./type").MessageThemeList;
                validator(val: import("./type").MessageThemeList): boolean;
            };
            onCloseBtnClick: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onDurationEnd: import("vue").PropType<() => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "icon" | "duration" | "theme" | "closeBtn">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            placement: StringConstructor;
            closeBtn: {
                type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: any;
            };
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            duration: {
                type: NumberConstructor;
                default: number;
            };
            icon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            theme: {
                type: import("vue").PropType<import("./type").MessageThemeList>;
                default: import("./type").MessageThemeList;
                validator(val: import("./type").MessageThemeList): boolean;
            };
            onCloseBtnClick: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onDurationEnd: import("vue").PropType<() => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            icon: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            duration: number;
            theme: import("./type").MessageThemeList;
            closeBtn: string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        placement: StringConstructor;
        closeBtn: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: any;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        icon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<import("./type").MessageThemeList>;
            default: import("./type").MessageThemeList;
            validator(val: import("./type").MessageThemeList): boolean;
        };
        onCloseBtnClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onDurationEnd: import("vue").PropType<() => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    placement: StringConstructor;
    closeBtn: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    icon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<import("./type").MessageThemeList>;
        default: import("./type").MessageThemeList;
        validator(val: import("./type").MessageThemeList): boolean;
    };
    onCloseBtnClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onDurationEnd: import("vue").PropType<() => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    icon: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    duration: number;
    theme: import("./type").MessageThemeList;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export { default as MessagePlugin } from './plugin';
export default Message;
