/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _typeof from '@babel/runtime/helpers/typeof';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { createApp, nextTick } from 'vue';
import { MessageList, DEFAULT_Z_INDEX } from './messageList.js';
import { getAttach } from '../utils/dom.js';
import './const.js';
import './message.js';
import 'tdesign-icons-vue-next';
import '../loading/index.js';
import '../loading/directive.js';
import '../loading/plugin.js';
import '../loading/loading.js';
import '@babel/runtime/helpers/slicedToArray';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../hooks/useConfig.js';
import '../config-provider/useConfig.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import '../_chunks/dep-010ef7cd.js';
import '../utils/easing.js';
import '../utils/withInstall.js';
import './props.js';
import '../hooks/useGlobalIcon.js';
import './animation.js';
import '../hooks/tnode.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var instanceMap = /* @__PURE__ */new Map();
function handleParams(params) {
  var options = _objectSpread({
    duration: 3e3,
    attach: "body",
    zIndex: DEFAULT_Z_INDEX,
    placement: "top"
  }, params);
  options.content = params.content;
  return options;
}
var MessageFunction = function MessageFunction(props) {
  var options = handleParams(props);
  var attach = options.attach,
    placement = options.placement;
  var attachDom = getAttach(attach);
  if (!instanceMap.get(attachDom)) {
    instanceMap.set(attachDom, {});
  }
  var p = instanceMap.get(attachDom)[placement];
  if (!p) {
    var wrapper = document.createElement("div");
    var instance = createApp(MessageList, {
      zIndex: options.zIndex,
      placement: options.placement
    }).mount(wrapper);
    instance.add(options);
    instanceMap.get(attachDom)[placement] = instance;
    attachDom.appendChild(wrapper);
  } else {
    p.add(options);
  }
  return new Promise(function (resolve) {
    var ins = instanceMap.get(attachDom)[placement];
    nextTick(function () {
      var msg = ins.messageList;
      resolve(msg[msg.length - 1]);
    });
  });
};
var showThemeMessage = function showThemeMessage(theme, params, duration) {
  var options = {
    theme: theme
  };
  if (typeof params === "string") {
    options.content = params;
  } else if (_typeof(params) === "object" && !(params instanceof Array)) {
    options = _objectSpread(_objectSpread({}, options), params);
  }
  (duration || duration === 0) && (options.duration = duration);
  return MessageFunction(options);
};
var extraApi = {
  info: function info(params, duration) {
    return showThemeMessage("info", params, duration);
  },
  success: function success(params, duration) {
    return showThemeMessage("success", params, duration);
  },
  warning: function warning(params, duration) {
    return showThemeMessage("warning", params, duration);
  },
  error: function error(params, duration) {
    return showThemeMessage("error", params, duration);
  },
  question: function question(params, duration) {
    return showThemeMessage("question", params, duration);
  },
  loading: function loading(params, duration) {
    return showThemeMessage("loading", params, duration);
  },
  close: function close(promise) {
    promise.then(function (instance) {
      return instance.close();
    });
  },
  closeAll: function closeAll() {
    if (instanceMap instanceof Map) {
      instanceMap.forEach(function (attach) {
        Object.keys(attach).forEach(function (placement) {
          var instance = attach[placement];
          instance.list = [];
        });
      });
    }
  }
};
var MessagePlugin = showThemeMessage;
MessagePlugin.install = function (app) {
  app.config.globalProperties.$message = showThemeMessage;
  Object.keys(extraApi).forEach(function (funcName) {
    app.config.globalProperties.$message[funcName] = extraApi[funcName];
  });
};
Object.keys(extraApi).forEach(function (funcName) {
  MessagePlugin[funcName] = extraApi[funcName];
});

export { MessagePlugin as default };
//# sourceMappingURL=plugin.js.map
