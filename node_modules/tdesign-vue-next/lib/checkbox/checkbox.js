/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, ref, toRefs, inject, computed, createVNode } from 'vue';
import props from './props.js';
import useVModel from '../hooks/useVModel.js';
import { useFormDisabled } from '../form/hooks.js';
import useRipple from '../hooks/useRipple.js';
import { useContent } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { CheckboxGroupInjectionKey } from './constants.js';
import 'lodash/kebabCase';
import '../hooks/useKeepAnimation.js';
import '../config-provider/useConfig.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../utils/set-style.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _Checkbox = defineComponent({
  name: "TCheckbox",
  props: _objectSpread(_objectSpread({}, props), {}, {
    needRipple: Boolean,
    stopLabelTrigger: Boolean
  }),
  setup: function setup(props2) {
    var labelRef = ref();
    if (props2.needRipple) {
      useRipple(labelRef);
    }
    var _toRefs = toRefs(props2),
      checked = _toRefs.checked,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerChecked = _useVModel2[0],
      setInnerChecked = _useVModel2[1];
    var checkboxGroup = inject(CheckboxGroupInjectionKey, void 0);
    var GroupDisabled = computed(function () {
      return props2.disabled || !!(checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.disabled);
    });
    var formDisabled = useFormDisabled(GroupDisabled);
    var name = computed(function () {
      return props2.name || (checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.name);
    });
    var selfChecked = computed(function () {
      if (props2.checkAll) return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.isCheckAll;
      return checkboxGroup ? !!checkboxGroup.checkedMap[props2.value] : innerChecked.value;
    });
    var disabled = computed(function () {
      if (formDisabled) return formDisabled.value;
      if (!props2.checkAll && !selfChecked.value && checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.maxExceeded) {
        return true;
      }
      if (props2.disabled !== void 0) return props2.disabled;
      return !!(checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.disabled);
    });
    var selfIndeterminate = computed(function () {
      if (props2.checkAll) return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.indeterminate;
      return props2.indeterminate;
    });
    var classPrefix = usePrefixClass();
    var COMPONENT_NAME = usePrefixClass("checkbox");
    var labelClasses = computed(function () {
      var _ref;
      return ["".concat(COMPONENT_NAME.value), (_ref = {}, _defineProperty(_ref, "".concat(classPrefix.value, "-is-checked"), selfChecked.value), _defineProperty(_ref, "".concat(classPrefix.value, "-is-disabled"), disabled.value), _defineProperty(_ref, "".concat(classPrefix.value, "-is-indeterminate"), selfIndeterminate.value), _ref)];
    });
    var handleChange = function handleChange(e) {
      if (props2.readonly) return;
      var checked2 = !selfChecked.value;
      setInnerChecked(checked2, {
        e: e
      });
      if (checkboxGroup && checkboxGroup.handleCheckboxChange) {
        checkboxGroup.onCheckedChange({
          checked: checked2,
          checkAll: props2.checkAll,
          e: e,
          option: props2
        });
      }
    };
    var renderContent = useContent();
    var handleLabelClick = function handleLabelClick(e) {
      if (props2.stopLabelTrigger) e.preventDefault();
    };
    return function () {
      return createVNode("label", {
        "class": labelClasses.value,
        "ref": "labelRef"
      }, [createVNode("input", {
        "type": "checkbox",
        "class": "".concat(COMPONENT_NAME.value, "__former"),
        "disabled": disabled.value,
        "readonly": props2.readonly,
        "indeterminate": props2.indeterminate,
        "name": name.value,
        "value": props2.value,
        "checked": selfChecked.value,
        "onChange": handleChange
      }, null), createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__input")
      }, null), createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__label"),
        "onClick": handleLabelClick
      }, [renderContent("default", "label")])]);
    };
  }
});

export { _Checkbox as default };
//# sourceMappingURL=checkbox.js.map
