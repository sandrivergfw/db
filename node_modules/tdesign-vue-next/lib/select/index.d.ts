import { TdSelectProps, TdOptionProps, TdOptionGroupProps } from './type';
import './style';
export * from './type';
export declare type SelectProps = TdSelectProps;
export declare type OptionProps = TdOptionProps;
export declare type OptionGroupProps = TdOptionGroupProps;
export declare const Select: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            max: number;
            value: any;
            loading: boolean;
            disabled: boolean;
            multiple: boolean;
            options: import("./type").SelectOption[];
            size: import("../common").SizeEnum;
            readonly: boolean;
            placeholder: string;
            modelValue: any;
            showArrow: boolean;
            autoWidth: boolean;
            clearable: boolean;
            inputValue: string;
            minCollapsedNum: number;
            borderless: boolean;
            popupVisible: boolean;
            reserveKeyword: boolean;
            valueType: "object" | "value";
            creatable: boolean;
            filterable: boolean;
            bordered: boolean;
            defaultPopupVisible: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            autoWidth: BooleanConstructor;
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            borderless: BooleanConstructor;
            clearable: BooleanConstructor;
            collapsedItems: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: {
                    value: import("./type").SelectOption[];
                    collapsedSelectedItems: import("./type").SelectOption[];
                    count: number;
                }) => import("../common").SlotReturnValue>;
            };
            creatable: BooleanConstructor;
            disabled: BooleanConstructor;
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            filter: {
                type: import("vue").PropType<(filterWords: string, option: import("./type").SelectOption) => boolean | Promise<boolean>>;
            };
            filterable: BooleanConstructor;
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            inputValue: {
                type: import("vue").PropType<string>;
                default: any;
            };
            defaultInputValue: {
                type: import("vue").PropType<string>;
            };
            keys: {
                type: import("vue").PropType<import("./type").SelectKeysType>;
            };
            loading: BooleanConstructor;
            loadingText: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            max: {
                type: NumberConstructor;
                default: number;
            };
            minCollapsedNum: {
                type: NumberConstructor;
                default: number;
            };
            multiple: BooleanConstructor;
            options: {
                type: import("vue").PropType<import("./type").SelectOption[]>;
                default: () => import("./type").SelectOption[];
            };
            panelBottomContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            panelTopContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            popupVisible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultPopupVisible: BooleanConstructor;
            prefixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            readonly: BooleanConstructor;
            reserveKeyword: BooleanConstructor;
            scroll: {
                type: import("vue").PropType<import("../common").TScroll>;
            };
            selectInputProps: {
                type: import("vue").PropType<import("..").TdSelectInputProps>;
            };
            showArrow: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            tagInputProps: {
                type: import("vue").PropType<import("..").TdTagInputProps>;
            };
            tagProps: {
                type: import("vue").PropType<import("..").TdTagProps>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").SelectValue<import("./type").SelectOption>>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").SelectValue<import("./type").SelectOption>>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").SelectValue<import("./type").SelectOption>>;
            };
            valueDisplay: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                    value: import("./type").SelectValue<import("./type").SelectOption>;
                    onClose: (index: number, item?: any) => void;
                }) => import("../common").SlotReturnValue)>;
            };
            valueType: {
                type: import("vue").PropType<"object" | "value">;
                default: "object" | "value";
                validator(val: "object" | "value"): boolean;
            };
            onBlur: import("vue").PropType<(context: {
                value: import("./type").SelectValue<import("./type").SelectOption>;
                e: FocusEvent | KeyboardEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").SelectValue<import("./type").SelectOption>, context: {
                selectedOptions: import("./type").SelectOption[];
                trigger: import("./type").SelectValueChangeTrigger;
                e?: MouseEvent | KeyboardEvent;
            }) => void>;
            onClear: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onCreate: import("vue").PropType<(value: string | number) => void>;
            onEnter: import("vue").PropType<(context: {
                inputValue: string;
                e: KeyboardEvent;
                value: import("./type").SelectValue<import("./type").SelectOption>;
            }) => void>;
            onFocus: import("vue").PropType<(context: {
                value: import("./type").SelectValue<import("./type").SelectOption>;
                e: FocusEvent | KeyboardEvent;
            }) => void>;
            onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
            onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
            onRemove: import("vue").PropType<(options: import("./type").SelectRemoveContext<import("./type").SelectOption>) => void>;
            onSearch: import("vue").PropType<(filterWords: string) => void>;
            onVisibleChange: import("vue").PropType<(visible: boolean) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "max" | "value" | "loading" | "disabled" | "multiple" | "options" | "size" | "readonly" | "placeholder" | "modelValue" | "showArrow" | "autoWidth" | "clearable" | "inputValue" | "minCollapsedNum" | "borderless" | "popupVisible" | "reserveKeyword" | "valueType" | "creatable" | "filterable" | "bordered" | "defaultPopupVisible">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            autoWidth: BooleanConstructor;
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            borderless: BooleanConstructor;
            clearable: BooleanConstructor;
            collapsedItems: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: {
                    value: import("./type").SelectOption[];
                    collapsedSelectedItems: import("./type").SelectOption[];
                    count: number;
                }) => import("../common").SlotReturnValue>;
            };
            creatable: BooleanConstructor;
            disabled: BooleanConstructor;
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            filter: {
                type: import("vue").PropType<(filterWords: string, option: import("./type").SelectOption) => boolean | Promise<boolean>>;
            };
            filterable: BooleanConstructor;
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            inputValue: {
                type: import("vue").PropType<string>;
                default: any;
            };
            defaultInputValue: {
                type: import("vue").PropType<string>;
            };
            keys: {
                type: import("vue").PropType<import("./type").SelectKeysType>;
            };
            loading: BooleanConstructor;
            loadingText: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            max: {
                type: NumberConstructor;
                default: number;
            };
            minCollapsedNum: {
                type: NumberConstructor;
                default: number;
            };
            multiple: BooleanConstructor;
            options: {
                type: import("vue").PropType<import("./type").SelectOption[]>;
                default: () => import("./type").SelectOption[];
            };
            panelBottomContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            panelTopContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            popupVisible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultPopupVisible: BooleanConstructor;
            prefixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            readonly: BooleanConstructor;
            reserveKeyword: BooleanConstructor;
            scroll: {
                type: import("vue").PropType<import("../common").TScroll>;
            };
            selectInputProps: {
                type: import("vue").PropType<import("..").TdSelectInputProps>;
            };
            showArrow: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            tagInputProps: {
                type: import("vue").PropType<import("..").TdTagInputProps>;
            };
            tagProps: {
                type: import("vue").PropType<import("..").TdTagProps>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").SelectValue<import("./type").SelectOption>>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").SelectValue<import("./type").SelectOption>>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").SelectValue<import("./type").SelectOption>>;
            };
            valueDisplay: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                    value: import("./type").SelectValue<import("./type").SelectOption>;
                    onClose: (index: number, item?: any) => void;
                }) => import("../common").SlotReturnValue)>;
            };
            valueType: {
                type: import("vue").PropType<"object" | "value">;
                default: "object" | "value";
                validator(val: "object" | "value"): boolean;
            };
            onBlur: import("vue").PropType<(context: {
                value: import("./type").SelectValue<import("./type").SelectOption>;
                e: FocusEvent | KeyboardEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").SelectValue<import("./type").SelectOption>, context: {
                selectedOptions: import("./type").SelectOption[];
                trigger: import("./type").SelectValueChangeTrigger;
                e?: MouseEvent | KeyboardEvent;
            }) => void>;
            onClear: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onCreate: import("vue").PropType<(value: string | number) => void>;
            onEnter: import("vue").PropType<(context: {
                inputValue: string;
                e: KeyboardEvent;
                value: import("./type").SelectValue<import("./type").SelectOption>;
            }) => void>;
            onFocus: import("vue").PropType<(context: {
                value: import("./type").SelectValue<import("./type").SelectOption>;
                e: FocusEvent | KeyboardEvent;
            }) => void>;
            onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
            onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
            onRemove: import("vue").PropType<(options: import("./type").SelectRemoveContext<import("./type").SelectOption>) => void>;
            onSearch: import("vue").PropType<(filterWords: string) => void>;
            onVisibleChange: import("vue").PropType<(visible: boolean) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            max: number;
            value: any;
            loading: boolean;
            disabled: boolean;
            multiple: boolean;
            options: import("./type").SelectOption[];
            size: import("../common").SizeEnum;
            readonly: boolean;
            placeholder: string;
            modelValue: any;
            showArrow: boolean;
            autoWidth: boolean;
            clearable: boolean;
            inputValue: string;
            minCollapsedNum: number;
            borderless: boolean;
            popupVisible: boolean;
            reserveKeyword: boolean;
            valueType: "object" | "value";
            creatable: boolean;
            filterable: boolean;
            bordered: boolean;
            defaultPopupVisible: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("./type").SelectOption[];
                collapsedSelectedItems: import("./type").SelectOption[];
                count: number;
            }) => import("../common").SlotReturnValue>;
        };
        creatable: BooleanConstructor;
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, option: import("./type").SelectOption) => boolean | Promise<boolean>>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").TdInputProps>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
        };
        keys: {
            type: import("vue").PropType<import("./type").SelectKeysType>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<import("./type").SelectOption[]>;
            default: () => import("./type").SelectOption[];
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").SelectValue<import("./type").SelectOption>>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").SelectValue<import("./type").SelectOption>>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").SelectValue<import("./type").SelectOption>>;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").SelectValue<import("./type").SelectOption>;
                onClose: (index: number, item?: any) => void;
            }) => import("../common").SlotReturnValue)>;
        };
        valueType: {
            type: import("vue").PropType<"object" | "value">;
            default: "object" | "value";
            validator(val: "object" | "value"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").SelectValue<import("./type").SelectOption>;
            e: FocusEvent | KeyboardEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").SelectValue<import("./type").SelectOption>, context: {
            selectedOptions: import("./type").SelectOption[];
            trigger: import("./type").SelectValueChangeTrigger;
            e?: MouseEvent | KeyboardEvent;
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onCreate: import("vue").PropType<(value: string | number) => void>;
        onEnter: import("vue").PropType<(context: {
            inputValue: string;
            e: KeyboardEvent;
            value: import("./type").SelectValue<import("./type").SelectOption>;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").SelectValue<import("./type").SelectOption>;
            e: FocusEvent | KeyboardEvent;
        }) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(options: import("./type").SelectRemoveContext<import("./type").SelectOption>) => void>;
        onSearch: import("vue").PropType<(filterWords: string) => void>;
        onVisibleChange: import("vue").PropType<(visible: boolean) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autoWidth: BooleanConstructor;
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("./type").SelectOption[];
            collapsedSelectedItems: import("./type").SelectOption[];
            count: number;
        }) => import("../common").SlotReturnValue>;
    };
    creatable: BooleanConstructor;
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filter: {
        type: import("vue").PropType<(filterWords: string, option: import("./type").SelectOption) => boolean | Promise<boolean>>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<string>;
    };
    keys: {
        type: import("vue").PropType<import("./type").SelectKeysType>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<import("./type").SelectOption[]>;
        default: () => import("./type").SelectOption[];
    };
    panelBottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    panelTopContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultPopupVisible: BooleanConstructor;
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    reserveKeyword: BooleanConstructor;
    scroll: {
        type: import("vue").PropType<import("../common").TScroll>;
    };
    selectInputProps: {
        type: import("vue").PropType<import("..").TdSelectInputProps>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    tagInputProps: {
        type: import("vue").PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").SelectValue<import("./type").SelectOption>>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").SelectValue<import("./type").SelectOption>>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").SelectValue<import("./type").SelectOption>>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").SelectValue<import("./type").SelectOption>;
            onClose: (index: number, item?: any) => void;
        }) => import("../common").SlotReturnValue)>;
    };
    valueType: {
        type: import("vue").PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: "object" | "value"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").SelectValue<import("./type").SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").SelectValue<import("./type").SelectOption>, context: {
        selectedOptions: import("./type").SelectOption[];
        trigger: import("./type").SelectValueChangeTrigger;
        e?: MouseEvent | KeyboardEvent;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCreate: import("vue").PropType<(value: string | number) => void>;
    onEnter: import("vue").PropType<(context: {
        inputValue: string;
        e: KeyboardEvent;
        value: import("./type").SelectValue<import("./type").SelectOption>;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").SelectValue<import("./type").SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onRemove: import("vue").PropType<(options: import("./type").SelectRemoveContext<import("./type").SelectOption>) => void>;
    onSearch: import("vue").PropType<(filterWords: string) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    max: number;
    value: any;
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    options: import("./type").SelectOption[];
    size: import("../common").SizeEnum;
    readonly: boolean;
    placeholder: string;
    modelValue: any;
    showArrow: boolean;
    autoWidth: boolean;
    clearable: boolean;
    inputValue: string;
    minCollapsedNum: number;
    borderless: boolean;
    popupVisible: boolean;
    reserveKeyword: boolean;
    valueType: "object" | "value";
    creatable: boolean;
    filterable: boolean;
    bordered: boolean;
    defaultPopupVisible: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const Option: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            label: string;
            disabled: boolean;
            multiple: boolean;
            checkAll: boolean;
            createAble: boolean;
            isVirtual: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            createAble: BooleanConstructor;
            multiple: BooleanConstructor;
            index: NumberConstructor;
            rowIndex: NumberConstructor;
            trs: MapConstructor;
            scrollType: StringConstructor;
            isVirtual: BooleanConstructor;
            bufferSize: NumberConstructor;
            checkAll: BooleanConstructor;
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            label: {
                type: StringConstructor;
                default: string;
            };
            value: {
                type: import("vue").PropType<string | number>;
            };
        }>> & {
            "onRow-mounted"?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "label" | "disabled" | "multiple" | "checkAll" | "createAble" | "isVirtual">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: "row-mounted", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            createAble: BooleanConstructor;
            multiple: BooleanConstructor;
            index: NumberConstructor;
            rowIndex: NumberConstructor;
            trs: MapConstructor;
            scrollType: StringConstructor;
            isVirtual: BooleanConstructor;
            bufferSize: NumberConstructor;
            checkAll: BooleanConstructor;
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            label: {
                type: StringConstructor;
                default: string;
            };
            value: {
                type: import("vue").PropType<string | number>;
            };
        }>> & {
            "onRow-mounted"?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "row-mounted"[], string, {
            label: string;
            disabled: boolean;
            multiple: boolean;
            checkAll: boolean;
            createAble: boolean;
            isVirtual: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        createAble: BooleanConstructor;
        multiple: BooleanConstructor;
        index: NumberConstructor;
        rowIndex: NumberConstructor;
        trs: MapConstructor;
        scrollType: StringConstructor;
        isVirtual: BooleanConstructor;
        bufferSize: NumberConstructor;
        checkAll: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        label: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: import("vue").PropType<string | number>;
        };
    }>> & {
        "onRow-mounted"?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    createAble: BooleanConstructor;
    multiple: BooleanConstructor;
    index: NumberConstructor;
    rowIndex: NumberConstructor;
    trs: MapConstructor;
    scrollType: StringConstructor;
    isVirtual: BooleanConstructor;
    bufferSize: NumberConstructor;
    checkAll: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    label: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<string | number>;
    };
}>> & {
    "onRow-mounted"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "row-mounted"[], "row-mounted", {
    label: string;
    disabled: boolean;
    multiple: boolean;
    checkAll: boolean;
    createAble: boolean;
    isVirtual: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const OptionGroup: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            label: string;
            divider: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            divider: {
                type: BooleanConstructor;
                default: boolean;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "label" | "divider">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            divider: {
                type: BooleanConstructor;
                default: boolean;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            label: string;
            divider: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        divider: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    divider: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    label: string;
    divider: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
