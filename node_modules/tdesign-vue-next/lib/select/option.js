/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, inject, ref, computed, onMounted, onBeforeUnmount, createVNode, isVNode } from 'vue';
import props from './option-props.js';
import { Checkbox } from '../checkbox/index.js';
import { useFormDisabled } from '../form/hooks.js';
import useRipple from '../hooks/useRipple.js';
import { useContent } from '../hooks/tnode.js';
import { usePrefixClass, useCommonClassName } from '../hooks/useConfig.js';
import { selectInjectKey, getNewMultipleValue } from './helper.js';
import '../checkbox/checkbox.js';
import '@babel/runtime/helpers/slicedToArray';
import '../checkbox/props.js';
import '../hooks/useVModel.js';
import 'lodash/kebabCase';
import '../checkbox/constants.js';
import '../hooks/useKeepAnimation.js';
import '../config-provider/useConfig.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../utils/set-style.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../checkbox/group.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/typeof';
import 'lodash/intersection';
import '../checkbox/checkbox-group-props.js';
import '../hooks/slot.js';
import '../utils/withInstall.js';
import 'lodash/cloneDeep';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var _Option = defineComponent({
  name: "TOption",
  props: _objectSpread(_objectSpread({}, props), {}, {
    createAble: Boolean,
    multiple: Boolean,
    index: Number,
    rowIndex: Number,
    trs: Map,
    scrollType: String,
    isVirtual: Boolean,
    bufferSize: Number,
    checkAll: Boolean
  }),
  emits: ["row-mounted"],
  setup: function setup(props2, context) {
    var selectProvider = inject(selectInjectKey);
    var formDisabled = useFormDisabled();
    ref(null);
    var disabled = computed(function () {
      return formDisabled.value || props2.multiple && selectProvider.value.max <= selectProvider.value.selectValue.length && selectProvider.value.max !== 0;
    });
    var renderContent = useContent();
    var selectName = usePrefixClass("select");
    var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS,
      SIZE = _useCommonClassName.SIZE;
    var liRef = ref();
    var isHover = ref(false);
    var isSelected = computed(function () {
      if (selectProvider.value.isCheckAll && !props2.disabled) return true;
      return !props2.multiple ? selectProvider.value.selectValue === props2.value : selectProvider.value.selectValue.includes(props2.value);
    });
    var isIndeterminate = computed(function () {
      if (!props2.checkAll) return false;
      return selectProvider.value.indeterminate;
    });
    var classes = computed(function () {
      var _ref;
      return ["".concat(selectName.value, "-option"), [SIZE.value[selectProvider.value.size]], (_ref = {}, _defineProperty(_ref, STATUS.value.disabled, disabled.value), _defineProperty(_ref, STATUS.value.selected, isSelected.value), _defineProperty(_ref, "".concat(selectName.value, "-option__hover"), (isHover.value || selectProvider.value.hoverIndex === props2.index) && !disabled.value && !isSelected.value), _ref)];
    });
    var labelText = computed(function () {
      return props2.label || props2.value;
    });
    var handleClick = function handleClick(e) {
      if (props2.multiple || props2.disabled) return;
      e.stopPropagation();
      if (props2.createAble) {
        var _selectProvider$value, _selectProvider$value2;
        (_selectProvider$value = (_selectProvider$value2 = selectProvider.value).handleCreate) === null || _selectProvider$value === void 0 ? void 0 : _selectProvider$value.call(_selectProvider$value2, props2.value);
        if (selectProvider.value.multiple) {
          selectProvider.value.selectValue.push(props2.value);
          selectProvider.value.handleValueChange(selectProvider.value.selectValue, {
            selectedOptions: selectProvider.value.getSelectedOptions(),
            trigger: "check",
            e: e
          });
          return;
        }
      }
      selectProvider.value.handleValueChange(props2.value, {
        selectedOptions: selectProvider.value.getSelectedOptions(props2.value),
        trigger: "check",
        e: e
      });
      selectProvider.value.handlePopupVisibleChange(false, {
        e: e
      });
    };
    var handleCheckboxClick = function handleCheckboxClick(val, context2) {
      if (props2.checkAll) {
        selectProvider.value.onCheckAllChange(val);
        return;
      }
      var newValue = getNewMultipleValue(selectProvider.value.selectValue, props2.value);
      selectProvider.value.handleValueChange(newValue.value, {
        selectedOptions: selectProvider.value.getSelectedOptions(newValue.value),
        trigger: val ? "check" : "uncheck",
        e: context2.e
      });
      if (!selectProvider.value.reserveKeyword) {
        selectProvider.value.handlerInputChange("");
      }
    };
    onMounted(function () {
      var trs = props2.trs,
        rowIndex = props2.rowIndex,
        isVirtual = props2.isVirtual;
      if (isVirtual) {
        trs.set(rowIndex, liRef.value);
        context.emit("row-mounted");
      }
    });
    onBeforeUnmount(function () {
      if (props2.isVirtual) {
        var trs = props2.trs,
          rowIndex = props2.rowIndex;
        trs["delete"](rowIndex);
      }
    });
    useRipple(liRef);
    return function () {
      var optionChild = renderContent("default", "content") || labelText.value;
      return createVNode("li", {
        "ref": liRef,
        "class": classes.value,
        "title": "".concat(labelText.value),
        "onMouseenter": function onMouseenter() {
          return isHover.value = true;
        },
        "onMouseleave": function onMouseleave() {
          return isHover.value = false;
        },
        "onClick": handleClick
      }, [selectProvider && props2.multiple ? createVNode(Checkbox, {
        "checked": isSelected.value,
        "disabled": disabled.value && !isSelected.value,
        "onChange": handleCheckboxClick,
        "indeterminate": isIndeterminate.value
      }, _isSlot(optionChild) ? optionChild : {
        "default": function _default() {
          return [optionChild];
        }
      }) : createVNode("span", null, [optionChild])]);
    };
  }
});

export { _Option as default };
//# sourceMappingURL=option.js.map
