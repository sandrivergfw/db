import { TdSelectProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    autoWidth: BooleanConstructor;
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: PropType<(h: typeof import("vue").h, props: {
            value: import("./type").SelectOption[];
            collapsedSelectedItems: import("./type").SelectOption[];
            count: number;
        }) => import("../common").SlotReturnValue>;
    };
    creatable: BooleanConstructor;
    disabled: BooleanConstructor;
    empty: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filter: {
        type: PropType<(filterWords: string, option: import("./type").SelectOption) => boolean | Promise<boolean>>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: PropType<import("..").TdInputProps>;
    };
    inputValue: {
        type: PropType<string>;
        default: any;
    };
    defaultInputValue: {
        type: PropType<string>;
    };
    keys: {
        type: PropType<import("./type").SelectKeysType>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    options: {
        type: PropType<import("./type").SelectOption[]>;
        default: () => TdSelectProps['options'];
    };
    panelBottomContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    panelTopContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: PropType<import("..").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultPopupVisible: BooleanConstructor;
    prefixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    reserveKeyword: BooleanConstructor;
    scroll: {
        type: PropType<import("../common").TScroll>;
    };
    selectInputProps: {
        type: PropType<import("..").TdSelectInputProps>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: TdSelectProps['size']): boolean;
    };
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        validator(val: TdSelectProps['status']): boolean;
    };
    tagInputProps: {
        type: PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: PropType<import("..").TdTagProps>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: PropType<import("./type").SelectValue<import("./type").SelectOption>>;
        default: any;
    };
    modelValue: {
        type: PropType<import("./type").SelectValue<import("./type").SelectOption>>;
        default: any;
    };
    defaultValue: {
        type: PropType<import("./type").SelectValue<import("./type").SelectOption>>;
    };
    valueDisplay: {
        type: PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").SelectValue<import("./type").SelectOption>;
            onClose: (index: number, item?: any) => void;
        }) => import("../common").SlotReturnValue)>;
    };
    valueType: {
        type: PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: TdSelectProps['valueType']): boolean;
    };
    onBlur: PropType<(context: {
        value: import("./type").SelectValue<import("./type").SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onChange: PropType<(value: import("./type").SelectValue<import("./type").SelectOption>, context: {
        selectedOptions: import("./type").SelectOption[];
        trigger: import("./type").SelectValueChangeTrigger;
        e?: MouseEvent | KeyboardEvent;
    }) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCreate: PropType<(value: string | number) => void>;
    onEnter: PropType<(context: {
        inputValue: string;
        e: KeyboardEvent;
        value: import("./type").SelectValue<import("./type").SelectOption>;
    }) => void>;
    onFocus: PropType<(context: {
        value: import("./type").SelectValue<import("./type").SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onInputChange: PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
    onPopupVisibleChange: PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onRemove: PropType<(options: import("./type").SelectRemoveContext<import("./type").SelectOption>) => void>;
    onSearch: PropType<(filterWords: string) => void>;
    onVisibleChange: PropType<(visible: boolean) => void>;
};
export default _default;
