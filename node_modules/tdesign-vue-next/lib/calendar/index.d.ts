import { TdCalendarProps } from './type';
import './style';
export * from './type';
export declare type CalendarProps = TdCalendarProps;
export declare const Calendar: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            mode: "month" | "year";
            format: string;
            theme: "full" | "card";
            controllerConfig: any;
            isShowWeekendDefault: boolean;
            fillWithZero: boolean;
            preventCellContextmenu: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            cell: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").CalendarCell) => import("../common").SlotReturnValue)>;
            };
            cellAppend: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").CalendarCell) => import("../common").SlotReturnValue)>;
            };
            controllerConfig: {
                type: import("vue").PropType<boolean | import("./type").CalendarController>;
                default: any;
            };
            fillWithZero: {
                type: BooleanConstructor;
                default: any;
            };
            firstDayOfWeek: {
                type: NumberConstructor;
                validator(val: number): boolean;
            };
            format: {
                type: StringConstructor;
                default: string;
            };
            head: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").ControllerOptions) => import("../common").SlotReturnValue)>;
            };
            isShowWeekendDefault: {
                type: BooleanConstructor;
                default: boolean;
            };
            mode: {
                type: import("vue").PropType<"month" | "year">;
                default: "month" | "year";
                validator(val: "month" | "year"): boolean;
            };
            month: {
                type: import("vue").PropType<string | number>;
            };
            preventCellContextmenu: BooleanConstructor;
            range: {
                type: import("vue").PropType<import("./type").CalendarValue[]>;
            };
            theme: {
                type: import("vue").PropType<"full" | "card">;
                default: "full" | "card";
                validator(val: "full" | "card"): boolean;
            };
            value: {
                type: import("vue").PropType<import("./type").CalendarValue>;
            };
            week: {
                type: import("vue").PropType<string[] | ((h: typeof import("vue").h, props: import("./type").CalendarWeek) => import("../common").SlotReturnValue)>;
            };
            year: {
                type: import("vue").PropType<string | number>;
            };
            onCellClick: import("vue").PropType<(options: {
                cell: import("./type").CalendarCell;
                e: MouseEvent;
            }) => void>;
            onCellDoubleClick: import("vue").PropType<(options: {
                cell: import("./type").CalendarCell;
                e: MouseEvent;
            }) => void>;
            onCellRightClick: import("vue").PropType<(options: {
                cell: import("./type").CalendarCell;
                e: MouseEvent;
            }) => void>;
            onControllerChange: import("vue").PropType<(options: import("./type").ControllerOptions) => void>;
            onMonthChange: import("vue").PropType<(options: {
                month: string;
                year: string;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "mode" | "format" | "theme" | "controllerConfig" | "isShowWeekendDefault" | "fillWithZero" | "preventCellContextmenu">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            cell: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").CalendarCell) => import("../common").SlotReturnValue)>;
            };
            cellAppend: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").CalendarCell) => import("../common").SlotReturnValue)>;
            };
            controllerConfig: {
                type: import("vue").PropType<boolean | import("./type").CalendarController>;
                default: any;
            };
            fillWithZero: {
                type: BooleanConstructor;
                default: any;
            };
            firstDayOfWeek: {
                type: NumberConstructor;
                validator(val: number): boolean;
            };
            format: {
                type: StringConstructor;
                default: string;
            };
            head: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").ControllerOptions) => import("../common").SlotReturnValue)>;
            };
            isShowWeekendDefault: {
                type: BooleanConstructor;
                default: boolean;
            };
            mode: {
                type: import("vue").PropType<"month" | "year">;
                default: "month" | "year";
                validator(val: "month" | "year"): boolean;
            };
            month: {
                type: import("vue").PropType<string | number>;
            };
            preventCellContextmenu: BooleanConstructor;
            range: {
                type: import("vue").PropType<import("./type").CalendarValue[]>;
            };
            theme: {
                type: import("vue").PropType<"full" | "card">;
                default: "full" | "card";
                validator(val: "full" | "card"): boolean;
            };
            value: {
                type: import("vue").PropType<import("./type").CalendarValue>;
            };
            week: {
                type: import("vue").PropType<string[] | ((h: typeof import("vue").h, props: import("./type").CalendarWeek) => import("../common").SlotReturnValue)>;
            };
            year: {
                type: import("vue").PropType<string | number>;
            };
            onCellClick: import("vue").PropType<(options: {
                cell: import("./type").CalendarCell;
                e: MouseEvent;
            }) => void>;
            onCellDoubleClick: import("vue").PropType<(options: {
                cell: import("./type").CalendarCell;
                e: MouseEvent;
            }) => void>;
            onCellRightClick: import("vue").PropType<(options: {
                cell: import("./type").CalendarCell;
                e: MouseEvent;
            }) => void>;
            onControllerChange: import("vue").PropType<(options: import("./type").ControllerOptions) => void>;
            onMonthChange: import("vue").PropType<(options: {
                month: string;
                year: string;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            mode: "month" | "year";
            format: string;
            theme: "full" | "card";
            controllerConfig: any;
            isShowWeekendDefault: boolean;
            fillWithZero: boolean;
            preventCellContextmenu: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        cell: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").CalendarCell) => import("../common").SlotReturnValue)>;
        };
        cellAppend: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").CalendarCell) => import("../common").SlotReturnValue)>;
        };
        controllerConfig: {
            type: import("vue").PropType<boolean | import("./type").CalendarController>;
            default: any;
        };
        fillWithZero: {
            type: BooleanConstructor;
            default: any;
        };
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        head: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").ControllerOptions) => import("../common").SlotReturnValue)>;
        };
        isShowWeekendDefault: {
            type: BooleanConstructor;
            default: boolean;
        };
        mode: {
            type: import("vue").PropType<"month" | "year">;
            default: "month" | "year";
            validator(val: "month" | "year"): boolean;
        };
        month: {
            type: import("vue").PropType<string | number>;
        };
        preventCellContextmenu: BooleanConstructor;
        range: {
            type: import("vue").PropType<import("./type").CalendarValue[]>;
        };
        theme: {
            type: import("vue").PropType<"full" | "card">;
            default: "full" | "card";
            validator(val: "full" | "card"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").CalendarValue>;
        };
        week: {
            type: import("vue").PropType<string[] | ((h: typeof import("vue").h, props: import("./type").CalendarWeek) => import("../common").SlotReturnValue)>;
        };
        year: {
            type: import("vue").PropType<string | number>;
        };
        onCellClick: import("vue").PropType<(options: {
            cell: import("./type").CalendarCell;
            e: MouseEvent;
        }) => void>;
        onCellDoubleClick: import("vue").PropType<(options: {
            cell: import("./type").CalendarCell;
            e: MouseEvent;
        }) => void>;
        onCellRightClick: import("vue").PropType<(options: {
            cell: import("./type").CalendarCell;
            e: MouseEvent;
        }) => void>;
        onControllerChange: import("vue").PropType<(options: import("./type").ControllerOptions) => void>;
        onMonthChange: import("vue").PropType<(options: {
            month: string;
            year: string;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    cell: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").CalendarCell) => import("../common").SlotReturnValue)>;
    };
    cellAppend: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").CalendarCell) => import("../common").SlotReturnValue)>;
    };
    controllerConfig: {
        type: import("vue").PropType<boolean | import("./type").CalendarController>;
        default: any;
    };
    fillWithZero: {
        type: BooleanConstructor;
        default: any;
    };
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    head: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").ControllerOptions) => import("../common").SlotReturnValue)>;
    };
    isShowWeekendDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    mode: {
        type: import("vue").PropType<"month" | "year">;
        default: "month" | "year";
        validator(val: "month" | "year"): boolean;
    };
    month: {
        type: import("vue").PropType<string | number>;
    };
    preventCellContextmenu: BooleanConstructor;
    range: {
        type: import("vue").PropType<import("./type").CalendarValue[]>;
    };
    theme: {
        type: import("vue").PropType<"full" | "card">;
        default: "full" | "card";
        validator(val: "full" | "card"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").CalendarValue>;
    };
    week: {
        type: import("vue").PropType<string[] | ((h: typeof import("vue").h, props: import("./type").CalendarWeek) => import("../common").SlotReturnValue)>;
    };
    year: {
        type: import("vue").PropType<string | number>;
    };
    onCellClick: import("vue").PropType<(options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellDoubleClick: import("vue").PropType<(options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellRightClick: import("vue").PropType<(options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void>;
    onControllerChange: import("vue").PropType<(options: import("./type").ControllerOptions) => void>;
    onMonthChange: import("vue").PropType<(options: {
        month: string;
        year: string;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    mode: "month" | "year";
    format: string;
    theme: "full" | "card";
    controllerConfig: any;
    isShowWeekendDefault: boolean;
    fillWithZero: boolean;
    preventCellContextmenu: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Calendar;
