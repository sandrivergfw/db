import { TdAutoCompleteProps } from './type';
import './style';
export * from './type';
export declare type AutoCompleteProps = TdAutoCompleteProps;
export declare const AutoComplete: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: string;
            disabled: boolean;
            size: import("../common").SizeEnum;
            readonly: boolean;
            placeholder: string;
            autoFocus: boolean;
            modelValue: string;
            defaultValue: string;
            clearable: boolean;
            filterable: boolean;
            highlightKeyword: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            autoFocus: BooleanConstructor;
            clearable: BooleanConstructor;
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            filter: {
                type: import("vue").PropType<(filterWords: string, option: import("./type").AutoCompleteOption) => boolean | Promise<boolean>>;
            };
            filterable: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightKeyword: {
                type: BooleanConstructor;
                default: boolean;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            options: {
                type: import("vue").PropType<import("./type").AutoCompleteOption[]>;
            };
            panelBottomContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            panelTopContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            readonly: BooleanConstructor;
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            textareaProps: {
                type: import("vue").PropType<import("..").TdTextareaProps>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            triggerElement: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: StringConstructor;
                default: any;
            };
            modelValue: {
                type: StringConstructor;
                default: any;
            };
            defaultValue: {
                type: StringConstructor;
                default: string;
            };
            onBlur: import("vue").PropType<(context: {
                e: FocusEvent;
                value: string;
            }) => void>;
            onChange: import("vue").PropType<(value: string, context?: {
                e?: MouseEvent | InputEvent | KeyboardEvent;
            }) => void>;
            onClear: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onCompositionend: import("vue").PropType<(context: {
                e: CompositionEvent;
                value: string;
            }) => void>;
            onCompositionstart: import("vue").PropType<(context: {
                e: CompositionEvent;
                value: string;
            }) => void>;
            onEnter: import("vue").PropType<(context: {
                e: KeyboardEvent;
                value: string;
            }) => void>;
            onFocus: import("vue").PropType<(context: {
                e: FocusEvent;
                value: string;
            }) => void>;
            onSelect: import("vue").PropType<(value: string, context: {
                e: MouseEvent | KeyboardEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "size" | "readonly" | "placeholder" | "autoFocus" | "modelValue" | "defaultValue" | "clearable" | "filterable" | "highlightKeyword">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            autoFocus: BooleanConstructor;
            clearable: BooleanConstructor;
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            filter: {
                type: import("vue").PropType<(filterWords: string, option: import("./type").AutoCompleteOption) => boolean | Promise<boolean>>;
            };
            filterable: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightKeyword: {
                type: BooleanConstructor;
                default: boolean;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            options: {
                type: import("vue").PropType<import("./type").AutoCompleteOption[]>;
            };
            panelBottomContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            panelTopContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            readonly: BooleanConstructor;
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            textareaProps: {
                type: import("vue").PropType<import("..").TdTextareaProps>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            triggerElement: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: StringConstructor;
                default: any;
            };
            modelValue: {
                type: StringConstructor;
                default: any;
            };
            defaultValue: {
                type: StringConstructor;
                default: string;
            };
            onBlur: import("vue").PropType<(context: {
                e: FocusEvent;
                value: string;
            }) => void>;
            onChange: import("vue").PropType<(value: string, context?: {
                e?: MouseEvent | InputEvent | KeyboardEvent;
            }) => void>;
            onClear: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onCompositionend: import("vue").PropType<(context: {
                e: CompositionEvent;
                value: string;
            }) => void>;
            onCompositionstart: import("vue").PropType<(context: {
                e: CompositionEvent;
                value: string;
            }) => void>;
            onEnter: import("vue").PropType<(context: {
                e: KeyboardEvent;
                value: string;
            }) => void>;
            onFocus: import("vue").PropType<(context: {
                e: FocusEvent;
                value: string;
            }) => void>;
            onSelect: import("vue").PropType<(value: string, context: {
                e: MouseEvent | KeyboardEvent;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: string;
            disabled: boolean;
            size: import("../common").SizeEnum;
            readonly: boolean;
            placeholder: string;
            autoFocus: boolean;
            modelValue: string;
            defaultValue: string;
            clearable: boolean;
            filterable: boolean;
            highlightKeyword: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        autoFocus: BooleanConstructor;
        clearable: BooleanConstructor;
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        filter: {
            type: import("vue").PropType<(filterWords: string, option: import("./type").AutoCompleteOption) => boolean | Promise<boolean>>;
        };
        filterable: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightKeyword: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").TdInputProps>;
        };
        options: {
            type: import("vue").PropType<import("./type").AutoCompleteOption[]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        readonly: BooleanConstructor;
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        textareaProps: {
            type: import("vue").PropType<import("..").TdTextareaProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onBlur: import("vue").PropType<(context: {
            e: FocusEvent;
            value: string;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context?: {
            e?: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onCompositionend: import("vue").PropType<(context: {
            e: CompositionEvent;
            value: string;
        }) => void>;
        onCompositionstart: import("vue").PropType<(context: {
            e: CompositionEvent;
            value: string;
        }) => void>;
        onEnter: import("vue").PropType<(context: {
            e: KeyboardEvent;
            value: string;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            e: FocusEvent;
            value: string;
        }) => void>;
        onSelect: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autoFocus: BooleanConstructor;
    clearable: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    filter: {
        type: import("vue").PropType<(filterWords: string, option: import("./type").AutoCompleteOption) => boolean | Promise<boolean>>;
    };
    filterable: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightKeyword: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    options: {
        type: import("vue").PropType<import("./type").AutoCompleteOption[]>;
    };
    panelBottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    panelTopContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    textareaProps: {
        type: import("vue").PropType<import("..").TdTextareaProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onBlur: import("vue").PropType<(context: {
        e: FocusEvent;
        value: string;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context?: {
        e?: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCompositionend: import("vue").PropType<(context: {
        e: CompositionEvent;
        value: string;
    }) => void>;
    onCompositionstart: import("vue").PropType<(context: {
        e: CompositionEvent;
        value: string;
    }) => void>;
    onEnter: import("vue").PropType<(context: {
        e: KeyboardEvent;
        value: string;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        e: FocusEvent;
        value: string;
    }) => void>;
    onSelect: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: string;
    disabled: boolean;
    size: import("../common").SizeEnum;
    readonly: boolean;
    placeholder: string;
    autoFocus: boolean;
    modelValue: string;
    defaultValue: string;
    clearable: boolean;
    filterable: boolean;
    highlightKeyword: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const HighlightOption: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{}> & Omit<Readonly<import("vue").ExtractPropTypes<{
            content: StringConstructor;
            keyword: StringConstructor;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            content: StringConstructor;
            keyword: StringConstructor;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        content: StringConstructor;
        keyword: StringConstructor;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: StringConstructor;
    keyword: StringConstructor;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default AutoComplete;
