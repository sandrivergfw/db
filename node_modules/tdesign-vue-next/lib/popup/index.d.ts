import { TdPopupProps } from './type';
import './style';
export * from './type';
export declare type PopupProps = TdPopupProps;
export declare const Popup: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            visible: boolean;
            disabled: boolean;
            trigger: "click" | "focus" | "context-menu" | "hover";
            modelValue: boolean;
            placement: string;
            attach: import("../common").AttachNode;
            expandAnimation: boolean;
            destroyOnClose: boolean;
            hideEmptyPopup: boolean;
            showArrow: boolean;
            defaultVisible: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            expandAnimation: {
                type: BooleanConstructor;
            };
            attach: {
                type: import("vue").PropType<import("../common").AttachNode>;
                default: string;
            };
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            delay: {
                type: import("vue").PropType<number | number[]>;
            };
            destroyOnClose: BooleanConstructor;
            disabled: BooleanConstructor;
            hideEmptyPopup: BooleanConstructor;
            overlayClassName: {
                type: import("vue").PropType<import("../common").ClassName>;
            };
            overlayInnerClassName: {
                type: import("vue").PropType<import("../common").ClassName>;
            };
            overlayInnerStyle: {
                type: import("vue").PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
            };
            overlayStyle: {
                type: import("vue").PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
            };
            placement: {
                type: StringConstructor;
                default: string;
            };
            showArrow: BooleanConstructor;
            trigger: {
                type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
                default: "click" | "focus" | "context-menu" | "hover";
                validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
            };
            triggerElement: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            visible: {
                type: BooleanConstructor;
                default: any;
            };
            modelValue: {
                type: BooleanConstructor;
                default: any;
            };
            defaultVisible: BooleanConstructor;
            zIndex: {
                type: NumberConstructor;
            };
            onScroll: import("vue").PropType<(context: {
                e: WheelEvent;
            }) => void>;
            onVisibleChange: import("vue").PropType<(visible: boolean, context: import("./type").PopupVisibleChangeContext) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "visible" | "disabled" | "trigger" | "modelValue" | "placement" | "attach" | "expandAnimation" | "destroyOnClose" | "hideEmptyPopup" | "showArrow" | "defaultVisible">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            expandAnimation: {
                type: BooleanConstructor;
            };
            attach: {
                type: import("vue").PropType<import("../common").AttachNode>;
                default: string;
            };
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            delay: {
                type: import("vue").PropType<number | number[]>;
            };
            destroyOnClose: BooleanConstructor;
            disabled: BooleanConstructor;
            hideEmptyPopup: BooleanConstructor;
            overlayClassName: {
                type: import("vue").PropType<import("../common").ClassName>;
            };
            overlayInnerClassName: {
                type: import("vue").PropType<import("../common").ClassName>;
            };
            overlayInnerStyle: {
                type: import("vue").PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
            };
            overlayStyle: {
                type: import("vue").PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
            };
            placement: {
                type: StringConstructor;
                default: string;
            };
            showArrow: BooleanConstructor;
            trigger: {
                type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
                default: "click" | "focus" | "context-menu" | "hover";
                validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
            };
            triggerElement: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            visible: {
                type: BooleanConstructor;
                default: any;
            };
            modelValue: {
                type: BooleanConstructor;
                default: any;
            };
            defaultVisible: BooleanConstructor;
            zIndex: {
                type: NumberConstructor;
            };
            onScroll: import("vue").PropType<(context: {
                e: WheelEvent;
            }) => void>;
            onVisibleChange: import("vue").PropType<(visible: boolean, context: import("./type").PopupVisibleChangeContext) => void>;
        }>>, {
            containerRef: import("vue").Ref<import("vue").DefineComponent<{
                parent: ObjectConstructor;
                visible: BooleanConstructor;
                attach: {
                    type: import("vue").PropType<import("../common").AttachNode>;
                    default: string;
                };
                forwardRef: import("vue").PropType<(el: HTMLElement) => void>;
            }, {
                mountContent: import("vue").Ref<boolean>;
                triggerRef: import("vue").Ref<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }> & {
                    $el: HTMLElement;
                }>;
                unmountContent(): void;
                emitResize: () => void;
                emitContentMounted: () => void;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("resize" | "contentMounted")[], "resize" | "contentMounted", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                parent: ObjectConstructor;
                visible: BooleanConstructor;
                attach: {
                    type: import("vue").PropType<import("../common").AttachNode>;
                    default: string;
                };
                forwardRef: import("vue").PropType<(el: HTMLElement) => void>;
            }>> & {
                onResize?: (...args: any[]) => any;
                onContentMounted?: (...args: any[]) => any;
            }, {
                visible: boolean;
                attach: import("../common").AttachNode;
            }>>;
            innerVisible: import("vue").Ref<boolean>;
            triggerEl: import("vue").Ref<HTMLElement>;
            overlayEl: import("vue").Ref<HTMLElement>;
            popperEl: import("vue").Ref<HTMLElement>;
            prefixCls: import("vue").ComputedRef<string>;
            overlayCls: any;
            hasTrigger: import("vue").ComputedRef<Readonly<Record<"click" | "focus" | "context-menu" | "hover", boolean>>>;
            contentClicked: import("vue").Ref<boolean>;
            updatePopper: () => void;
            destroyPopper: () => void;
            getOverlayStyle: () => import("../common").Styles;
            updateOverlayInnerStyle: () => void;
            emitVisible: (visible: boolean, context: import("./type").PopupVisibleChangeContext) => void;
            onMouseEnter: () => void;
            onMouseLeave: (ev: MouseEvent) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            visible: boolean;
            disabled: boolean;
            trigger: "click" | "focus" | "context-menu" | "hover";
            modelValue: boolean;
            placement: string;
            attach: import("../common").AttachNode;
            expandAnimation: boolean;
            destroyOnClose: boolean;
            hideEmptyPopup: boolean;
            showArrow: boolean;
            defaultVisible: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        expandAnimation: {
            type: BooleanConstructor;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
            default: string;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        delay: {
            type: import("vue").PropType<number | number[]>;
        };
        destroyOnClose: BooleanConstructor;
        disabled: BooleanConstructor;
        hideEmptyPopup: BooleanConstructor;
        overlayClassName: {
            type: import("vue").PropType<import("../common").ClassName>;
        };
        overlayInnerClassName: {
            type: import("vue").PropType<import("../common").ClassName>;
        };
        overlayInnerStyle: {
            type: import("vue").PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
        };
        overlayStyle: {
            type: import("vue").PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
        };
        placement: {
            type: StringConstructor;
            default: string;
        };
        showArrow: BooleanConstructor;
        trigger: {
            type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
            default: "click" | "focus" | "context-menu" | "hover";
            validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: BooleanConstructor;
        zIndex: {
            type: NumberConstructor;
        };
        onScroll: import("vue").PropType<(context: {
            e: WheelEvent;
        }) => void>;
        onVisibleChange: import("vue").PropType<(visible: boolean, context: import("./type").PopupVisibleChangeContext) => void>;
    }>> & import("vue").ShallowUnwrapRef<{
        containerRef: import("vue").Ref<import("vue").DefineComponent<{
            parent: ObjectConstructor;
            visible: BooleanConstructor;
            attach: {
                type: import("vue").PropType<import("../common").AttachNode>;
                default: string;
            };
            forwardRef: import("vue").PropType<(el: HTMLElement) => void>;
        }, {
            mountContent: import("vue").Ref<boolean>;
            triggerRef: import("vue").Ref<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> & {
                $el: HTMLElement;
            }>;
            unmountContent(): void;
            emitResize: () => void;
            emitContentMounted: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("resize" | "contentMounted")[], "resize" | "contentMounted", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            parent: ObjectConstructor;
            visible: BooleanConstructor;
            attach: {
                type: import("vue").PropType<import("../common").AttachNode>;
                default: string;
            };
            forwardRef: import("vue").PropType<(el: HTMLElement) => void>;
        }>> & {
            onResize?: (...args: any[]) => any;
            onContentMounted?: (...args: any[]) => any;
        }, {
            visible: boolean;
            attach: import("../common").AttachNode;
        }>>;
        innerVisible: import("vue").Ref<boolean>;
        triggerEl: import("vue").Ref<HTMLElement>;
        overlayEl: import("vue").Ref<HTMLElement>;
        popperEl: import("vue").Ref<HTMLElement>;
        prefixCls: import("vue").ComputedRef<string>;
        overlayCls: any;
        hasTrigger: import("vue").ComputedRef<Readonly<Record<"click" | "focus" | "context-menu" | "hover", boolean>>>;
        contentClicked: import("vue").Ref<boolean>;
        updatePopper: () => void;
        destroyPopper: () => void;
        getOverlayStyle: () => import("../common").Styles;
        updateOverlayInnerStyle: () => void;
        emitVisible: (visible: boolean, context: import("./type").PopupVisibleChangeContext) => void;
        onMouseEnter: () => void;
        onMouseLeave: (ev: MouseEvent) => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    expandAnimation: {
        type: BooleanConstructor;
    };
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    delay: {
        type: import("vue").PropType<number | number[]>;
    };
    destroyOnClose: BooleanConstructor;
    disabled: BooleanConstructor;
    hideEmptyPopup: BooleanConstructor;
    overlayClassName: {
        type: import("vue").PropType<import("../common").ClassName>;
    };
    overlayInnerClassName: {
        type: import("vue").PropType<import("../common").ClassName>;
    };
    overlayInnerStyle: {
        type: import("vue").PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
    };
    overlayStyle: {
        type: import("vue").PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
    };
    placement: {
        type: StringConstructor;
        default: string;
    };
    showArrow: BooleanConstructor;
    trigger: {
        type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
        default: "click" | "focus" | "context-menu" | "hover";
        validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onScroll: import("vue").PropType<(context: {
        e: WheelEvent;
    }) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, context: import("./type").PopupVisibleChangeContext) => void>;
}>>, {
    containerRef: import("vue").Ref<import("vue").DefineComponent<{
        parent: ObjectConstructor;
        visible: BooleanConstructor;
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
            default: string;
        };
        forwardRef: import("vue").PropType<(el: HTMLElement) => void>;
    }, {
        mountContent: import("vue").Ref<boolean>;
        triggerRef: import("vue").Ref<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> & {
            $el: HTMLElement;
        }>;
        unmountContent(): void;
        emitResize: () => void;
        emitContentMounted: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("resize" | "contentMounted")[], "resize" | "contentMounted", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        parent: ObjectConstructor;
        visible: BooleanConstructor;
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
            default: string;
        };
        forwardRef: import("vue").PropType<(el: HTMLElement) => void>;
    }>> & {
        onResize?: (...args: any[]) => any;
        onContentMounted?: (...args: any[]) => any;
    }, {
        visible: boolean;
        attach: import("../common").AttachNode;
    }>>;
    innerVisible: import("vue").Ref<boolean>;
    triggerEl: import("vue").Ref<HTMLElement>;
    overlayEl: import("vue").Ref<HTMLElement>;
    popperEl: import("vue").Ref<HTMLElement>;
    prefixCls: import("vue").ComputedRef<string>;
    overlayCls: any;
    hasTrigger: import("vue").ComputedRef<Readonly<Record<"click" | "focus" | "context-menu" | "hover", boolean>>>;
    contentClicked: import("vue").Ref<boolean>;
    updatePopper: () => void;
    destroyPopper: () => void;
    getOverlayStyle: () => import("../common").Styles;
    updateOverlayInnerStyle: () => void;
    emitVisible: (visible: boolean, context: import("./type").PopupVisibleChangeContext) => void;
    onMouseEnter: () => void;
    onMouseLeave: (ev: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    visible: boolean;
    disabled: boolean;
    trigger: "click" | "focus" | "context-menu" | "hover";
    modelValue: boolean;
    placement: string;
    attach: import("../common").AttachNode;
    expandAnimation: boolean;
    destroyOnClose: boolean;
    hideEmptyPopup: boolean;
    showArrow: boolean;
    defaultVisible: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Popup;
