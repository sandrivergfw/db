/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import { defineComponent, Text, createVNode, ref, onMounted, watch, Fragment, mergeProps, Teleport, isVNode, onUnmounted } from 'vue';
import { getAttach } from '../utils/dom.js';
import popupProps from './props.js';
import '../_chunks/dep-010ef7cd.js';
import 'lodash/isString';
import '../utils/easing.js';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
function filterEmpty() {
  var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var vnodes = [];
  children.forEach(function (child) {
    if (Array.isArray(child)) {
      vnodes.push.apply(vnodes, _toConsumableArray(child));
    } else if (child.type === Fragment) {
      vnodes.push.apply(vnodes, _toConsumableArray(filterEmpty(child.children)));
    } else {
      vnodes.push(child);
    }
  });
  return vnodes.filter(function (c) {
    return !(c && (typeof Comment !== "undefined" && c.type === Comment || c.type === Fragment && c.children.length === 0 || c.type === Text && c.children.trim() === ""));
  });
}
function isContentRectChanged(rect1, rect2) {
  if (!rect1 || !rect2) return;
  if (["width", "height", "x", "y"].some(function (k) {
    return rect1[k] !== rect2[k];
  })) {
    return true;
  }
  return false;
}
function observeResize(elm, cb) {
  var _window;
  if (!((_window = window) !== null && _window !== void 0 && _window.ResizeObserver) || !elm) return;
  var prevContentRect = null;
  var ro = new ResizeObserver(function () {
    var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var _ref = entries[0] || {},
      contentRect = _ref.contentRect;
    if (isContentRectChanged(contentRect, prevContentRect)) {
      prevContentRect = contentRect;
      cb(contentRect);
      return;
    }
    if (!prevContentRect) {
      prevContentRect = contentRect;
    }
  });
  if (elm.nodeType !== 1) return;
  ro.observe(elm);
  return function () {
    ro.unobserve(elm);
  };
}
function useObserveResize(elm, cb) {
  var cleanOR;
  onMounted(function () {
    cleanOR = observeResize(elm(), cb);
  });
  onUnmounted(function () {
    var _cleanOR;
    (_cleanOR = cleanOR) === null || _cleanOR === void 0 ? void 0 : _cleanOR();
  });
}
var Trigger = defineComponent({
  emits: ["resize"],
  data: function data() {
    return {
      cleanOR: null
    };
  },
  mounted: function mounted() {
    var _this = this;
    this.cleanOR = observeResize(this.$el, function () {
      _this.$emit("resize");
    });
  },
  unmounted: function unmounted() {
    var _this$cleanOR;
    (_this$cleanOR = this.cleanOR) === null || _this$cleanOR === void 0 ? void 0 : _this$cleanOR.call(this);
  },
  render: function render() {
    var _children$;
    var children = filterEmpty(this.$slots["default"]());
    if (children.length > 1 || ((_children$ = children[0]) === null || _children$ === void 0 ? void 0 : _children$.type) === Text) {
      return createVNode("span", null, [children]);
    }
    return children[0];
  }
});
var Content = defineComponent({
  emits: ["resize"],
  setup: function setup(props2, _ref2) {
    var emit = _ref2.emit;
    var el = ref(null);
    useObserveResize(function () {
      return el.value.children[0];
    }, function () {
      emit("resize");
    });
    return {
      el: el
    };
  },
  render: function render() {
    return createVNode("div", {
      "ref": "el",
      "style": "position: absolute; top: 0px; left: 0px; width: 100%"
    }, [this.$slots["default"]()]);
  }
});
var Container = defineComponent({
  inheritAttrs: false,
  props: {
    parent: Object,
    visible: Boolean,
    attach: popupProps.attach,
    forwardRef: Function
  },
  emits: ["resize", "contentMounted"],
  setup: function setup(props2, _ref3) {
    var emit = _ref3.emit;
    var triggerRef = ref(null);
    var mountContent = ref(false);
    onMounted(function () {
      requestAnimationFrame(function () {
        mountContent.value = props2.visible;
      });
      props2.forwardRef(triggerRef.value.$el);
    });
    watch(function () {
      return props2.visible;
    }, function (visible) {
      if (visible) {
        mountContent.value = props2.visible;
      }
    });
    return {
      mountContent: mountContent,
      triggerRef: triggerRef,
      unmountContent: function unmountContent() {
        mountContent.value = false;
      },
      emitResize: function emitResize() {
        emit("resize");
      },
      emitContentMounted: function emitContentMounted() {
        emit("contentMounted");
      }
    };
  },
  render: function render() {
    var _this$triggerRef,
      _this2 = this;
    var _slot;
    return createVNode(Fragment, null, [createVNode(Trigger, mergeProps({
      "class": this.$attrs["class"]
    }, {
      "ref": "triggerRef",
      "onResize": this.emitResize
    }), _isSlot(_slot = this.$slots["default"]()) ? _slot : {
      "default": function _default() {
        return [_slot];
      }
    }), this.mountContent && createVNode(Teleport, {
      "to": getAttach(this.attach, (_this$triggerRef = this.triggerRef) === null || _this$triggerRef === void 0 ? void 0 : _this$triggerRef.$el)
    }, {
      "default": function _default() {
        return [createVNode(Content, {
          "onResize": _this2.emitResize,
          "onVnodeMounted": _this2.emitContentMounted
        }, {
          "default": function _default() {
            return [_this2.$slots.content && _this2.$slots.content()];
          }
        })];
      }
    })]);
  }
});

export { Container as default };
//# sourceMappingURL=container.js.map
