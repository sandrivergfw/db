/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, inject, computed, createVNode, h } from 'vue';
import isFunction from 'lodash/isFunction';
import { CheckIcon, CloseIcon } from 'tdesign-icons-vue-next';
import stepItemProps from './step-item-props.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { useGlobalIcon } from '../hooks/useGlobalIcon.js';
import { useConfig } from '../config-provider/useConfig.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _StepItem = defineComponent({
  name: "TStepItem",
  props: _objectSpread(_objectSpread({}, stepItemProps), {}, {
    index: Number
  }),
  setup: function setup(props2) {
    var stepsState = inject("StepsState", void 0);
    var stepsProps = inject("StepsProps", void 0);
    var _useConfig = useConfig("steps"),
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        CheckIcon: CheckIcon,
        CloseIcon: CloseIcon
      }),
      CheckIcon$1 = _useGlobalIcon.CheckIcon,
      CloseIcon$1 = _useGlobalIcon.CloseIcon;
    var canClick = computed(function () {
      return props2.status !== "process" && !(stepsProps !== null && stepsProps !== void 0 && stepsProps.readonly);
    });
    var onStepClick = function onStepClick(e) {
      if (!canClick.value) return;
      var val = props2.value === void 0 ? props2.index : props2.value;
      stepsState.setCurrent(val, stepsState.current, {
        e: e
      });
    };
    var COMPONENT_NAME = usePrefixClass("steps-item");
    var statusClass = computed(function () {
      return _defineProperty({}, "".concat(COMPONENT_NAME.value, "--").concat(props2.status), props2.status);
    });
    var baseClass = computed(function () {
      return [COMPONENT_NAME.value, statusClass.value];
    });
    var iconClass = computed(function () {
      return ["".concat(COMPONENT_NAME.value, "__icon"), statusClass.value];
    });
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var renderIcon = function renderIcon() {
      var defaultIcon;
      if (stepsProps.theme === "default") {
        var icon = "";
        switch (props2.status) {
          case "finish":
            icon = createVNode(CheckIcon$1, null, null);
            break;
          case "error":
            if (isFunction(globalConfig.value.errorIcon)) {
              icon = globalConfig.value.errorIcon(h);
            } else {
              icon = createVNode(CloseIcon$1, null, null);
            }
            break;
          default:
            icon = String(props2.index + 1);
            break;
        }
        defaultIcon = createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__icon--number")
        }, [icon]);
      }
      return renderTNodeJSX("icon", defaultIcon);
    };
    return function () {
      return createVNode("div", {
        "class": baseClass.value
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__inner ").concat(canClick.value ? "".concat(COMPONENT_NAME.value, "--clickable") : ""),
        "onClick": onStepClick
      }, [createVNode("div", {
        "class": iconClass.value
      }, [renderIcon()]), createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__content")
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__title")
      }, [renderTNodeJSX("title")]), createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__description")
      }, [renderContent("default", "content")]), createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__extra")
      }, [renderTNodeJSX("extra")])])])]);
    };
  }
});

export { _StepItem as default };
//# sourceMappingURL=step-item.js.map
