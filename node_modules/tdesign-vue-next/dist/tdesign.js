/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TDesign = {}, global.Vue));
})(this, (function (exports, vue) { 'use strict';

  function _arrayLikeToArray$4(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$4(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray$4(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$4(arr) || _nonIterableSpread();
  }

  function _defineProperty$3(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$4(arr, i) || _nonIterableRest();
  }

  function setStyle$1(el, styles) {
    var keys = Object.keys(styles);
    keys.forEach(function (key) {
      el.style[key] = styles[key];
    });
  }

  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }

  function _objectWithoutProperties$1(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$1(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }

  function getIEVersion() {
    var _navigator = navigator,
      userAgent = _navigator.userAgent;
    var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1;
    var isIE11 = userAgent.indexOf("Trident") > -1 && userAgent.indexOf("rv:11.0") > -1;
    if (isIE) {
      var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
      var match = userAgent.match(reIE);
      if (!match) return -1;
      var fIEVersion = parseFloat(match[1]);
      return fIEVersion < 7 ? 6 : fIEVersion;
    }
    if (isIE11) {
      return 11;
    }
    return Number.MAX_SAFE_INTEGER;
  }
  function getCharacterLength$1(str, maxCharacter) {
    var hasMaxCharacter = typeof maxCharacter === "number";
    if (!str || str.length === 0) {
      if (hasMaxCharacter) {
        return {
          length: 0,
          characters: str
        };
      }
      return 0;
    }
    var len = 0;
    for (var i = 0; i < str.length; i++) {
      var currentStringLength = 0;
      if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {
        currentStringLength = 2;
      } else {
        currentStringLength = 1;
      }
      if (hasMaxCharacter && len + currentStringLength > maxCharacter) {
        return {
          length: len,
          characters: str.slice(0, i)
        };
      }
      len += currentStringLength;
    }
    if (hasMaxCharacter) {
      return {
        length: len,
        characters: str
      };
    }
    return len;
  }
  function getUnicodeLength(str) {
    return _toConsumableArray(str !== null && str !== void 0 ? str : "").length;
  }
  function limitUnicodeMaxLength(str, maxLength, oldStr) {
    if (_toConsumableArray(oldStr !== null && oldStr !== void 0 ? oldStr : "").slice().length === maxLength) return oldStr || "";
    return _toConsumableArray(str !== null && str !== void 0 ? str : "").slice(0, maxLength).join("");
  }

  function ownKeys$38(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$37(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$38(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$38(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function circleAdapter(circleElem) {
    var _window, _window$getComputedSt2, _window2, _window2$navigator;
    var basicStyle = {};
    if (!circleElem) {
      return;
    }
    var _window$getComputedSt = (_window = window) === null || _window === void 0 ? void 0 : (_window$getComputedSt2 = _window.getComputedStyle) === null || _window$getComputedSt2 === void 0 ? void 0 : _window$getComputedSt2.call(_window, circleElem),
      color = _window$getComputedSt.color,
      fontSize = _window$getComputedSt.fontSize;
    var ua = (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$navigator = _window2.navigator) === null || _window2$navigator === void 0 ? void 0 : _window2$navigator.userAgent;
    var isSafari = /Safari/.test(ua) && !/Chrome/.test(ua);
    var isIosWechat = /(?=.*iPhone)[?=.*MicroMessenger]/.test(ua) && !/Chrome/.test(ua);
    if (isSafari || isIosWechat) {
      basicStyle = {
        transformOrigin: "-1px -1px",
        transform: "scale(".concat(parseInt(fontSize, 10) / 14, ")")
      };
    }
    if (color && getIEVersion() > 11) {
      var matched = color.match(/[\d.]+/g);
      var endColor = matched ? "rgba(".concat(matched[0], ", ").concat(matched[1], ", ").concat(matched[2], ", 0)") : "";
      setStyle$1(circleElem, _objectSpread$37(_objectSpread$37({}, basicStyle), {}, {
        background: "conic-gradient(from 90deg at 50% 50%,".concat(endColor, " 0deg, ").concat(color, " 360deg)")
      }));
    } else {
      setStyle$1(circleElem, _objectSpread$37(_objectSpread$37({}, basicStyle), {}, {
        background: ""
      }));
    }
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear$1() {
    this.__data__ = [];
    this.size = 0;
  }
  var _listCacheClear = listCacheClear$1;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq$6(value, other) {
    return value === other || value !== value && other !== other;
  }
  var eq_1 = eq$6;

  var eq$5 = eq_1;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf$4(array, key) {
    var length = array.length;
    while (length--) {
      if (eq$5(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  var _assocIndexOf = assocIndexOf$4;

  var assocIndexOf$3 = _assocIndexOf;

  /** Used for built-in method references. */
  var arrayProto = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete$1(key) {
    var data = this.__data__,
      index = assocIndexOf$3(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  var _listCacheDelete = listCacheDelete$1;

  var assocIndexOf$2 = _assocIndexOf;

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet$1(key) {
    var data = this.__data__,
      index = assocIndexOf$2(data, key);
    return index < 0 ? undefined : data[index][1];
  }
  var _listCacheGet = listCacheGet$1;

  var assocIndexOf$1 = _assocIndexOf;

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas$1(key) {
    return assocIndexOf$1(this.__data__, key) > -1;
  }
  var _listCacheHas = listCacheHas$1;

  var assocIndexOf = _assocIndexOf;

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet$1(key, value) {
    var data = this.__data__,
      index = assocIndexOf(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  var _listCacheSet = listCacheSet$1;

  var listCacheClear = _listCacheClear,
    listCacheDelete = _listCacheDelete,
    listCacheGet = _listCacheGet,
    listCacheHas = _listCacheHas,
    listCacheSet = _listCacheSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache$4(entries) {
    var index = -1,
      length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache$4.prototype.clear = listCacheClear;
  ListCache$4.prototype['delete'] = listCacheDelete;
  ListCache$4.prototype.get = listCacheGet;
  ListCache$4.prototype.has = listCacheHas;
  ListCache$4.prototype.set = listCacheSet;
  var _ListCache = ListCache$4;

  var ListCache$3 = _ListCache;

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear$1() {
    this.__data__ = new ListCache$3();
    this.size = 0;
  }
  var _stackClear = stackClear$1;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete$1(key) {
    var data = this.__data__,
      result = data['delete'](key);
    this.size = data.size;
    return result;
  }
  var _stackDelete = stackDelete$1;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet$1(key) {
    return this.__data__.get(key);
  }
  var _stackGet = stackGet$1;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas$1(key) {
    return this.__data__.has(key);
  }
  var _stackHas = stackHas$1;

  function _typeof$2(obj) {
    "@babel/helpers - typeof";

    return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof$2(obj);
  }

  var freeGlobal$1 = _typeof$2(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var _freeGlobal = freeGlobal$1;

  var freeGlobal = _freeGlobal;

  /** Detect free variable `self`. */
  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof$2(self)) == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root$a = freeGlobal || freeSelf || Function('return this')();
  var _root = root$a;

  var root$9 = _root;

  /** Built-in value references. */
  var _Symbol2 = root$9.Symbol;
  var _Symbol$6 = _Symbol2;

  var _Symbol$5 = _Symbol$6;

  /** Used for built-in method references. */
  var objectProto$i = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$g = objectProto$i.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$i.toString;

  /** Built-in value references. */
  var symToStringTag$1 = _Symbol$5 ? _Symbol$5.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag$1(value) {
    var isOwn = hasOwnProperty$g.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];
    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }
  var _getRawTag = getRawTag$1;

  /** Used for built-in method references. */
  var objectProto$h = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto$h.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString$1(value) {
    return nativeObjectToString.call(value);
  }
  var _objectToString = objectToString$1;

  var _Symbol$4 = _Symbol$6,
    getRawTag = _getRawTag,
    objectToString = _objectToString;

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag = _Symbol$4 ? _Symbol$4.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag$a(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  var _baseGetTag = baseGetTag$a;

  function isObject$c(value) {
    var type = _typeof$2(value);
    return value != null && (type == 'object' || type == 'function');
  }
  var isObject_1 = isObject$c;

  var baseGetTag$9 = _baseGetTag,
    isObject$b = isObject_1;

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$3(value) {
    if (!isObject$b(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag$9(value);
    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
  }
  var isFunction_1 = isFunction$3;

  var root$8 = _root;

  /** Used to detect overreaching core-js shims. */
  var coreJsData$1 = root$8['__core-js_shared__'];
  var _coreJsData = coreJsData$1;

  var coreJsData = _coreJsData;

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked$1(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  var _isMasked = isMasked$1;

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$2 = funcProto$2.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource$2(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func);
      } catch (e) {}
      try {
        return func + '';
      } catch (e) {}
    }
    return '';
  }
  var _toSource = toSource$2;

  var isFunction$2 = isFunction_1,
    isMasked = _isMasked,
    isObject$a = isObject_1,
    toSource$1 = _toSource;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
    objectProto$g = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$f = objectProto$g.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$f).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative$1(value) {
    if (!isObject$a(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource$1(value));
  }
  var _baseIsNative = baseIsNative$1;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue$1(object, key) {
    return object == null ? undefined : object[key];
  }
  var _getValue = getValue$1;

  var baseIsNative = _baseIsNative,
    getValue = _getValue;

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative$7(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }
  var _getNative = getNative$7;

  var getNative$6 = _getNative,
    root$7 = _root;

  /* Built-in method references that are verified to be native. */
  var Map$4 = getNative$6(root$7, 'Map');
  var _Map = Map$4;

  var getNative$5 = _getNative;

  /* Built-in method references that are verified to be native. */
  var nativeCreate$4 = getNative$5(Object, 'create');
  var _nativeCreate = nativeCreate$4;

  var nativeCreate$3 = _nativeCreate;

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear$1() {
    this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
    this.size = 0;
  }
  var _hashClear = hashClear$1;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete$1(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  var _hashDelete = hashDelete$1;

  var nativeCreate$2 = _nativeCreate;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$f = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$e = objectProto$f.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet$1(key) {
    var data = this.__data__;
    if (nativeCreate$2) {
      var result = data[key];
      return result === HASH_UNDEFINED$2 ? undefined : result;
    }
    return hasOwnProperty$e.call(data, key) ? data[key] : undefined;
  }
  var _hashGet = hashGet$1;

  var nativeCreate$1 = _nativeCreate;

  /** Used for built-in method references. */
  var objectProto$e = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$d = objectProto$e.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas$1(key) {
    var data = this.__data__;
    return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$d.call(data, key);
  }
  var _hashHas = hashHas$1;

  var nativeCreate = _nativeCreate;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet$1(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
    return this;
  }
  var _hashSet = hashSet$1;

  var hashClear = _hashClear,
    hashDelete = _hashDelete,
    hashGet = _hashGet,
    hashHas = _hashHas,
    hashSet = _hashSet;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash$1(entries) {
    var index = -1,
      length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash$1.prototype.clear = hashClear;
  Hash$1.prototype['delete'] = hashDelete;
  Hash$1.prototype.get = hashGet;
  Hash$1.prototype.has = hashHas;
  Hash$1.prototype.set = hashSet;
  var _Hash = Hash$1;

  var Hash = _Hash,
    ListCache$2 = _ListCache,
    Map$3 = _Map;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear$1() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map$3 || ListCache$2)(),
      'string': new Hash()
    };
  }
  var _mapCacheClear = mapCacheClear$1;

  function isKeyable$1(value) {
    var type = _typeof$2(value);
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }
  var _isKeyable = isKeyable$1;

  var isKeyable = _isKeyable;

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData$4(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }
  var _getMapData = getMapData$4;

  var getMapData$3 = _getMapData;

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete$1(key) {
    var result = getMapData$3(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  var _mapCacheDelete = mapCacheDelete$1;

  var getMapData$2 = _getMapData;

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet$1(key) {
    return getMapData$2(this, key).get(key);
  }
  var _mapCacheGet = mapCacheGet$1;

  var getMapData$1 = _getMapData;

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas$1(key) {
    return getMapData$1(this, key).has(key);
  }
  var _mapCacheHas = mapCacheHas$1;

  var getMapData = _getMapData;

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet$1(key, value) {
    var data = getMapData(this, key),
      size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  var _mapCacheSet = mapCacheSet$1;

  var mapCacheClear = _mapCacheClear,
    mapCacheDelete = _mapCacheDelete,
    mapCacheGet = _mapCacheGet,
    mapCacheHas = _mapCacheHas,
    mapCacheSet = _mapCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache$3(entries) {
    var index = -1,
      length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache$3.prototype.clear = mapCacheClear;
  MapCache$3.prototype['delete'] = mapCacheDelete;
  MapCache$3.prototype.get = mapCacheGet;
  MapCache$3.prototype.has = mapCacheHas;
  MapCache$3.prototype.set = mapCacheSet;
  var _MapCache = MapCache$3;

  var ListCache$1 = _ListCache,
    Map$2 = _Map,
    MapCache$2 = _MapCache;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE$1 = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet$1(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache$1) {
      var pairs = data.__data__;
      if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache$2(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  var _stackSet = stackSet$1;

  var ListCache = _ListCache,
    stackClear = _stackClear,
    stackDelete = _stackDelete,
    stackGet = _stackGet,
    stackHas = _stackHas,
    stackSet = _stackSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack$3(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack$3.prototype.clear = stackClear;
  Stack$3.prototype['delete'] = stackDelete;
  Stack$3.prototype.get = stackGet;
  Stack$3.prototype.has = stackHas;
  Stack$3.prototype.set = stackSet;
  var _Stack = Stack$3;

  var getNative$4 = _getNative;
  var defineProperty$2 = function () {
    try {
      var func = getNative$4(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();
  var _defineProperty$2 = defineProperty$2;

  var defineProperty$1 = _defineProperty$2;

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue$3(object, key, value) {
    if (key == '__proto__' && defineProperty$1) {
      defineProperty$1(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }
  var _baseAssignValue = baseAssignValue$3;

  var baseAssignValue$2 = _baseAssignValue,
    eq$4 = eq_1;

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignMergeValue$2(object, key, value) {
    if (value !== undefined && !eq$4(object[key], value) || value === undefined && !(key in object)) {
      baseAssignValue$2(object, key, value);
    }
  }
  var _assignMergeValue = assignMergeValue$2;

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor$1(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;
      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  var _createBaseFor = createBaseFor$1;

  var createBaseFor = _createBaseFor;

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor$1 = createBaseFor();
  var _baseFor = baseFor$1;

  var _cloneBuffer = {exports: {}};

  (function (module, exports) {
    var root = _root;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  })(_cloneBuffer, _cloneBuffer.exports);

  var root$6 = _root;

  /** Built-in value references. */
  var Uint8Array$2 = root$6.Uint8Array;
  var _Uint8Array = Uint8Array$2;

  var Uint8Array$1 = _Uint8Array;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer$3(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
    return result;
  }
  var _cloneArrayBuffer = cloneArrayBuffer$3;

  var cloneArrayBuffer$2 = _cloneArrayBuffer;

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray$2(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  var _cloneTypedArray = cloneTypedArray$2;

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray$2(source, array) {
    var index = -1,
      length = source.length;
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }
  var _copyArray = copyArray$2;

  var isObject$9 = isObject_1;

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate$1 = function () {
    function object() {}
    return function (proto) {
      if (!isObject$9(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();
  var _baseCreate = baseCreate$1;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg$2(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }
  var _overArg = overArg$2;

  var overArg$1 = _overArg;

  /** Built-in value references. */
  var getPrototype$3 = overArg$1(Object.getPrototypeOf, Object);
  var _getPrototype = getPrototype$3;

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype$4(value) {
    var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$d;
    return value === proto;
  }
  var _isPrototype = isPrototype$4;

  var baseCreate = _baseCreate,
    getPrototype$2 = _getPrototype,
    isPrototype$3 = _isPrototype;

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject$2(object) {
    return typeof object.constructor == 'function' && !isPrototype$3(object) ? baseCreate(getPrototype$2(object)) : {};
  }
  var _initCloneObject = initCloneObject$2;

  function isObjectLike$d(value) {
    return value != null && _typeof$2(value) == 'object';
  }
  var isObjectLike_1 = isObjectLike$d;

  var baseGetTag$8 = _baseGetTag,
    isObjectLike$c = isObjectLike_1;

  /** `Object#toString` result references. */
  var argsTag$3 = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments$1(value) {
    return isObjectLike$c(value) && baseGetTag$8(value) == argsTag$3;
  }
  var _baseIsArguments = baseIsArguments$1;

  var baseIsArguments = _baseIsArguments,
    isObjectLike$b = isObjectLike_1;

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$c = objectProto$c.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$c.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments$5 = baseIsArguments(function () {
    return arguments;
  }()) ? baseIsArguments : function (value) {
    return isObjectLike$b(value) && hasOwnProperty$c.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee');
  };
  var isArguments_1 = isArguments$5;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$c = Array.isArray;
  var isArray_1 = isArray$c;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$2 = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength$3(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$2;
  }
  var isLength_1 = isLength$3;

  var isFunction$1 = isFunction_1,
    isLength$2 = isLength_1;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike$5(value) {
    return value != null && isLength$2(value.length) && !isFunction$1(value);
  }
  var isArrayLike_1 = isArrayLike$5;

  var isArrayLike$4 = isArrayLike_1,
    isObjectLike$a = isObjectLike_1;

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject$3(value) {
    return isObjectLike$a(value) && isArrayLike$4(value);
  }
  var isArrayLikeObject_1 = isArrayLikeObject$3;

  var isBuffer$5 = {exports: {}};

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }
  var stubFalse_1 = stubFalse;

  (function (module, exports) {
    var root = _root,
      stubFalse = stubFalse_1;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  })(isBuffer$5, isBuffer$5.exports);

  var baseGetTag$7 = _baseGetTag,
    getPrototype$1 = _getPrototype,
    isObjectLike$9 = isObjectLike_1;

  /** `Object#toString` result references. */
  var objectTag$4 = '[object Object]';

  /** Used for built-in method references. */
  var funcProto = Function.prototype,
    objectProto$b = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$b = objectProto$b.hasOwnProperty;

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString.call(Object);

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject$3(value) {
    if (!isObjectLike$9(value) || baseGetTag$7(value) != objectTag$4) {
      return false;
    }
    var proto = getPrototype$1(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty$b.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }
  var isPlainObject_1 = isPlainObject$3;

  var baseGetTag$6 = _baseGetTag,
    isLength$1 = isLength_1,
    isObjectLike$8 = isObjectLike_1;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    boolTag$4 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    errorTag$3 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$6 = '[object Map]',
    numberTag$4 = '[object Number]',
    objectTag$3 = '[object Object]',
    regexpTag$3 = '[object RegExp]',
    setTag$6 = '[object Set]',
    stringTag$4 = '[object String]',
    weakMapTag$2 = '[object WeakMap]';
  var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$4] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$3] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$4] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] = typedArrayTags[weakMapTag$2] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray$1(value) {
    return isObjectLike$8(value) && isLength$1(value.length) && !!typedArrayTags[baseGetTag$6(value)];
  }
  var _baseIsTypedArray = baseIsTypedArray$1;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary$5(func) {
    return function (value) {
      return func(value);
    };
  }
  var _baseUnary = baseUnary$5;

  var _nodeUtil = {exports: {}};

  (function (module, exports) {
    var freeGlobal = _freeGlobal;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = function () {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;
        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();
    module.exports = nodeUtil;
  })(_nodeUtil, _nodeUtil.exports);

  var baseIsTypedArray = _baseIsTypedArray,
    baseUnary$4 = _baseUnary,
    nodeUtil$2 = _nodeUtil.exports;

  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray$4 = nodeIsTypedArray ? baseUnary$4(nodeIsTypedArray) : baseIsTypedArray;
  var isTypedArray_1 = isTypedArray$4;

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet$2(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }
    if (key == '__proto__') {
      return;
    }
    return object[key];
  }
  var _safeGet = safeGet$2;

  var baseAssignValue$1 = _baseAssignValue,
    eq$3 = eq_1;

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$a.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue$3(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$a.call(object, key) && eq$3(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue$1(object, key, value);
    }
  }
  var _assignValue = assignValue$3;

  var assignValue$2 = _assignValue,
    baseAssignValue = _baseAssignValue;

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject$7(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
      length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue$2(object, key, newValue);
      }
    }
    return object;
  }
  var _copyObject = copyObject$7;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes$1(n, iteratee) {
    var index = -1,
      result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  var _baseTimes = baseTimes$1;

  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex$4(value, length) {
    var type = _typeof$2(value);
    length = length == null ? MAX_SAFE_INTEGER$1 : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }
  var _isIndex = isIndex$4;

  var baseTimes = _baseTimes,
    isArguments$4 = isArguments_1,
    isArray$b = isArray_1,
    isBuffer$4 = isBuffer$5.exports,
    isIndex$3 = _isIndex,
    isTypedArray$3 = isTypedArray_1;

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$9.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys$2(value, inherited) {
    var isArr = isArray$b(value),
      isArg = !isArr && isArguments$4(value),
      isBuff = !isArr && !isArg && isBuffer$4(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray$3(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty$9.call(value, key)) && !(skipIndexes && (
      // Safari 9 has enumerable `arguments.length` in strict mode.
      key == 'length' ||
      // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == 'offset' || key == 'parent') ||
      // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
      // Skip index properties.
      isIndex$3(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  var _arrayLikeKeys = arrayLikeKeys$2;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn$1(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }
  var _nativeKeysIn = nativeKeysIn$1;

  var isObject$8 = isObject_1,
    isPrototype$2 = _isPrototype,
    nativeKeysIn = _nativeKeysIn;

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$8.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn$1(object) {
    if (!isObject$8(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype$2(object),
      result = [];
    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$8.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  var _baseKeysIn = baseKeysIn$1;

  var arrayLikeKeys$1 = _arrayLikeKeys,
    baseKeysIn = _baseKeysIn,
    isArrayLike$3 = isArrayLike_1;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn$6(object) {
    return isArrayLike$3(object) ? arrayLikeKeys$1(object, true) : baseKeysIn(object);
  }
  var keysIn_1 = keysIn$6;

  var copyObject$6 = _copyObject,
    keysIn$5 = keysIn_1;

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject$1(value) {
    return copyObject$6(value, keysIn$5(value));
  }
  var toPlainObject_1 = toPlainObject$1;

  var assignMergeValue$1 = _assignMergeValue,
    cloneBuffer$1 = _cloneBuffer.exports,
    cloneTypedArray$1 = _cloneTypedArray,
    copyArray$1 = _copyArray,
    initCloneObject$1 = _initCloneObject,
    isArguments$3 = isArguments_1,
    isArray$a = isArray_1,
    isArrayLikeObject$2 = isArrayLikeObject_1,
    isBuffer$3 = isBuffer$5.exports,
    isFunction = isFunction_1,
    isObject$7 = isObject_1,
    isPlainObject$2 = isPlainObject_1,
    isTypedArray$2 = isTypedArray_1,
    safeGet$1 = _safeGet,
    toPlainObject = toPlainObject_1;

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet$1(object, key),
      srcValue = safeGet$1(source, key),
      stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue$1(object, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
    var isCommon = newValue === undefined;
    if (isCommon) {
      var isArr = isArray$a(srcValue),
        isBuff = !isArr && isBuffer$3(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray$2(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray$a(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject$2(objValue)) {
          newValue = copyArray$1(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer$1(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray$1(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject$2(srcValue) || isArguments$3(srcValue)) {
        newValue = objValue;
        if (isArguments$3(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject$7(objValue) || isFunction(objValue)) {
          newValue = initCloneObject$1(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }
    assignMergeValue$1(object, key, newValue);
  }
  var _baseMergeDeep = baseMergeDeep$1;

  var Stack$2 = _Stack,
    assignMergeValue = _assignMergeValue,
    baseFor = _baseFor,
    baseMergeDeep = _baseMergeDeep,
    isObject$6 = isObject_1,
    keysIn$4 = keysIn_1,
    safeGet = _safeGet;

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMerge$2(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function (srcValue, key) {
      stack || (stack = new Stack$2());
      if (isObject$6(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge$2, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
        if (newValue === undefined) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn$4);
  }
  var _baseMerge = baseMerge$2;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity$2(value) {
    return value;
  }
  var identity_1 = identity$2;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply$2(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  var _apply = apply$2;

  var apply$1 = _apply;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$3 = Math.max;

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest$2(func, start, transform) {
    start = nativeMax$3(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
        index = -1,
        length = nativeMax$3(args.length - start, 0),
        array = Array(length);
      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply$1(func, this, otherArgs);
    };
  }
  var _overRest = overRest$2;

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant$1(value) {
    return function () {
      return value;
    };
  }
  var constant_1 = constant$1;

  var constant = constant_1,
    defineProperty = _defineProperty$2,
    identity$1 = identity_1;

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString$1 = !defineProperty ? identity$1 : function (func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };
  var _baseSetToString = baseSetToString$1;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
    HOT_SPAN = 16;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now;

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut$1(func) {
    var count = 0,
      lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }
  var _shortOut = shortOut$1;

  var baseSetToString = _baseSetToString,
    shortOut = _shortOut;

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString$2 = shortOut(baseSetToString);
  var _setToString = setToString$2;

  var identity = identity_1,
    overRest$1 = _overRest,
    setToString$1 = _setToString;

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest$4(func, start) {
    return setToString$1(overRest$1(func, start, identity), func + '');
  }
  var _baseRest = baseRest$4;

  var eq$2 = eq_1,
    isArrayLike$2 = isArrayLike_1,
    isIndex$2 = _isIndex,
    isObject$5 = isObject_1;

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall$4(value, index, object) {
    if (!isObject$5(object)) {
      return false;
    }
    var type = _typeof$2(index);
    if (type == 'number' ? isArrayLike$2(object) && isIndex$2(index, object.length) : type == 'string' && index in object) {
      return eq$2(object[index], value);
    }
    return false;
  }
  var _isIterateeCall = isIterateeCall$4;

  var baseRest$3 = _baseRest,
    isIterateeCall$3 = _isIterateeCall;

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner$3(assigner) {
    return baseRest$3(function (object, sources) {
      var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;
      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
      if (guard && isIterateeCall$3(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }
  var _createAssigner = createAssigner$3;

  var baseMerge$1 = _baseMerge,
    createAssigner$2 = _createAssigner;

  /**
   * This method is like `_.merge` except that it accepts `customizer` which
   * is invoked to produce the merged values of the destination and source
   * properties. If `customizer` returns `undefined`, merging is handled by the
   * method instead. The `customizer` is invoked with six arguments:
   * (objValue, srcValue, key, object, source, stack).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} customizer The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   if (_.isArray(objValue)) {
   *     return objValue.concat(srcValue);
   *   }
   * }
   *
   * var object = { 'a': [1], 'b': [2] };
   * var other = { 'a': [3], 'b': [4] };
   *
   * _.mergeWith(object, other, customizer);
   * // => { 'a': [1, 3], 'b': [2, 4] }
   */
  var mergeWith$1 = createAssigner$2(function (object, source, srcIndex, customizer) {
    baseMerge$1(object, source, srcIndex, customizer);
  });
  var mergeWith_1 = mergeWith$1;

  var baseMerge = _baseMerge,
    createAssigner$1 = _createAssigner;

  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */
  var merge$1 = createAssigner$1(function (object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });
  var merge_1 = merge$1;

  var defaultConfig = {
    classPrefix: "t",
    animation: {
      include: ["ripple", "expand", "fade"],
      exclude: []
    },
    calendar: {
      firstDayOfWeek: 1,
      fillWithZero: true,
      controllerConfig: void 0
    },
    icon: {},
    input: {
      autocomplete: ""
    },
    dialog: {
      closeOnEscKeydown: true,
      closeOnOverlayClick: true,
      confirmBtnTheme: {
        "default": "primary",
        info: "primary",
        warning: "primary",
        danger: "primary",
        success: "primary"
      }
    },
    popconfirm: {
      confirmBtnTheme: {
        "default": "primary",
        warning: "primary",
        danger: "primary"
      }
    },
    table: {
      expandIcon: void 0,
      sortIcon: void 0,
      filterIcon: void 0,
      treeExpandAndFoldIcon: void 0,
      hideSortTips: false
    },
    select: {
      clearIcon: void 0,
      filterable: false
    },
    drawer: {
      closeOnEscKeydown: true,
      closeOnOverlayClick: true,
      size: "small"
    },
    tree: {
      folderIcon: void 0
    },
    datePicker: {
      firstDayOfWeek: 1
    },
    steps: {
      errorIcon: void 0
    },
    tag: {
      closeIcon: void 0
    },
    form: {
      requiredMark: void 0
    }
  };

  var defaultZhLocale = {
    pagination: {
      itemsPerPage: "{size} \u6761/\u9875",
      jumpTo: "\u8DF3\u81F3",
      page: "\u9875",
      total: "\u5171 {total} \u9879\u6570\u636E"
    },
    cascader: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    calendar: {
      yearSelection: "{year} \u5E74",
      monthSelection: "{month} \u6708",
      yearRadio: "\u5E74",
      monthRadio: "\u6708",
      hideWeekend: "\u9690\u85CF\u5468\u672B",
      showWeekend: "\u663E\u793A\u5468\u672B",
      today: "\u4ECA\u5929",
      thisMonth: "\u672C\u6708",
      week: "\u4E00,\u4E8C,\u4E09,\u56DB,\u4E94,\u516D,\u65E5",
      cellMonth: "1 \u6708,2 \u6708,3 \u6708,4 \u6708,5 \u6708,6 \u6708,7 \u6708,8 \u6708,9 \u6708,10 \u6708,11 \u6708,12 \u6708"
    },
    transfer: {
      title: "{checked} / {total} \u9879",
      empty: "\u6682\u65E0\u6570\u636E",
      placeholder: "\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\u641C\u7D22"
    },
    timePicker: {
      now: "\u6B64\u523B",
      confirm: "\u786E\u5B9A",
      anteMeridiem: "\u4E0A\u5348",
      postMeridiem: "\u4E0B\u5348",
      placeholder: "\u9009\u62E9\u65F6\u95F4"
    },
    dialog: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    drawer: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    popconfirm: {
      confirm: {
        content: "\u786E\u5B9A"
      },
      cancel: {
        content: "\u53D6\u6D88"
      }
    },
    table: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E",
      loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A",
      filterInputPlaceholder: "\u8BF7\u8F93\u5165\u5185\u5BB9\uFF08\u65E0\u9ED8\u8BA4\u503C\uFF09",
      sortAscendingOperationText: "\u70B9\u51FB\u5347\u5E8F",
      sortCancelOperationText: "\u70B9\u51FB\u53D6\u6D88\u6392\u5E8F",
      sortDescendingOperationText: "\u70B9\u51FB\u964D\u5E8F",
      clearFilterResultButtonText: "\u6E05\u7A7A\u7B5B\u9009",
      columnConfigButtonText: "\u5217\u914D\u7F6E",
      columnConfigTitleText: "\u8868\u683C\u5217\u914D\u7F6E",
      columnConfigDescriptionText: "\u8BF7\u9009\u62E9\u9700\u8981\u5728\u8868\u683C\u4E2D\u663E\u793A\u7684\u6570\u636E\u5217",
      confirmText: "\u786E\u8BA4",
      cancelText: "\u53D6\u6D88",
      resetText: "\u91CD\u7F6E",
      selectAllText: "\u5168\u9009",
      searchResultText: "\u641C\u7D22\u201C{result}\u201D\uFF0C\u627E\u5230 {count} \u6761\u7ED3\u679C"
    },
    select: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    tree: {
      empty: "\u6682\u65E0\u6570\u636E"
    },
    treeSelect: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    datePicker: {
      placeholder: {
        date: "\u8BF7\u9009\u62E9\u65E5\u671F",
        month: "\u8BF7\u9009\u62E9\u6708\u4EFD",
        year: "\u8BF7\u9009\u62E9\u5E74\u4EFD"
      },
      weekdays: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"],
      months: ["1 \u6708", "2 \u6708", "3 \u6708", "4 \u6708", "5 \u6708", "6 \u6708", "7 \u6708", "8 \u6708", "9 \u6708", "10 \u6708", "11 \u6708", "12 \u6708"],
      quarters: ["\u4E00\u5B63\u5EA6", "\u4E8C\u5B63\u5EA6", "\u4E09\u5B63\u5EA6", "\u56DB\u5B63\u5EA6"],
      rangeSeparator: " - ",
      direction: "ltr",
      format: "YYYY-MM-DD",
      dayAriaLabel: "\u65E5",
      weekAbbreviation: "\u5468",
      yearAriaLabel: "\u5E74",
      monthAriaLabel: "\u6708",
      confirm: "\u786E\u5B9A",
      selectTime: "\u9009\u62E9\u65F6\u95F4",
      selectDate: "\u9009\u62E9\u65E5\u671F",
      nextYear: "\u4E0B\u4E00\u5E74",
      preYear: "\u4E0A\u4E00\u5E74",
      nextMonth: "\u4E0B\u4E2A\u6708",
      preMonth: "\u4E0A\u4E2A\u6708",
      preDecade: "\u4E0A\u4E2A\u5341\u5E74",
      nextDecade: "\u4E0B\u4E2A\u5341\u5E74",
      now: "\u5F53\u524D"
    },
    upload: {
      sizeLimitMessage: "\u6587\u4EF6\u5927\u5C0F\u4E0D\u80FD\u8D85\u8FC7 {sizeLimit}",
      cancelUploadText: "\u53D6\u6D88\u4E0A\u4F20",
      triggerUploadText: {
        fileInput: "\u9009\u62E9\u6587\u4EF6",
        image: "\u70B9\u51FB\u4E0A\u4F20\u56FE\u7247",
        normal: "\u70B9\u51FB\u4E0A\u4F20",
        reupload: "\u91CD\u65B0\u9009\u62E9",
        continueUpload: "\u7EE7\u7EED\u9009\u62E9",
        "delete": "\u5220\u9664",
        uploading: "\u4E0A\u4F20\u4E2D"
      },
      dragger: {
        dragDropText: "\u91CA\u653E\u9F20\u6807",
        draggingText: "\u62D6\u62FD\u5230\u6B64\u533A\u57DF",
        clickAndDragText: "\u70B9\u51FB\u4E0A\u65B9\u201C\u9009\u62E9\u6587\u4EF6\u201D\u6216\u5C06\u6587\u4EF6\u62D6\u62FD\u5230\u6B64\u533A\u57DF"
      },
      file: {
        fileNameText: "\u6587\u4EF6\u540D",
        fileSizeText: "\u6587\u4EF6\u5927\u5C0F",
        fileStatusText: "\u72B6\u6001",
        fileOperationText: "\u64CD\u4F5C",
        fileOperationDateText: "\u4E0A\u4F20\u65E5\u671F"
      },
      progress: {
        uploadingText: "\u4E0A\u4F20\u4E2D",
        waitingText: "\u5F85\u4E0A\u4F20",
        failText: "\u4E0A\u4F20\u5931\u8D25",
        successText: "\u4E0A\u4F20\u6210\u529F"
      }
    },
    form: {
      errorMessage: {
        date: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        url: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        required: "${name}\u5FC5\u586B",
        max: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u8D85\u8FC7 ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        min: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        len: "${name}\u5B57\u7B26\u957F\u5EA6\u5FC5\u987B\u662F ${validate}",
        "enum": "${name}\u53EA\u80FD\u662F${validate}\u7B49",
        idcard: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        telnumber: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        pattern: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        validator: "${name}\u4E0D\u7B26\u5408\u8981\u6C42",
        "boolean": "${name}\u6570\u636E\u7C7B\u578B\u5FC5\u987B\u662F\u5E03\u5C14\u7C7B\u578B",
        number: "${name}\u5FC5\u987B\u662F\u6570\u5B57"
      }
    },
    input: {
      placeholder: "\u8BF7\u8F93\u5165"
    },
    list: {
      loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u7B49",
      loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A"
    },
    alert: {
      expandText: "\u5C55\u5F00\u66F4\u591A",
      collapseText: "\u6536\u8D77"
    },
    anchor: {
      copySuccessText: "\u94FE\u63A5\u590D\u5236\u6210\u529F",
      copyText: "\u590D\u5236\u94FE\u63A5"
    },
    colorPicker: {
      swatchColorTitle: "\u7CFB\u7EDF\u9884\u8BBE\u989C\u8272",
      recentColorTitle: "\u6700\u8FD1\u4F7F\u7528\u989C\u8272",
      clearConfirmText: "\u786E\u5B9A\u6E05\u7A7A\u6700\u8FD1\u4F7F\u7528\u7684\u989C\u8272\u5417\uFF1F"
    }
  };

  var EAnimationType = /* @__PURE__ */function (EAnimationType2) {
    EAnimationType2["ripple"] = "ripple";
    EAnimationType2["expand"] = "expand";
    EAnimationType2["fade"] = "fade";
    return EAnimationType2;
  }(EAnimationType || {});
  var defaultGlobalConfig = merge_1(defaultConfig, defaultZhLocale);
  var configProviderInjectKey = Symbol("configProvide");
  var mergeWith = function mergeWith(defaultGlobalConfig2, injectConfig) {
    return mergeWith_1(defaultGlobalConfig2, injectConfig, function (objValue, srcValue) {
      if (Array.isArray(objValue)) {
        return srcValue;
      }
    });
  };

  function useConfig(componentName) {
    var injectGlobalConfig = vue.inject(configProviderInjectKey, null);
    var mergedGlobalConfig = vue.computed(function () {
      return (injectGlobalConfig === null || injectGlobalConfig === void 0 ? void 0 : injectGlobalConfig.value) || defaultGlobalConfig;
    });
    var globalConfig = vue.computed(function () {
      return mergedGlobalConfig.value[componentName];
    });
    var classPrefix = vue.computed(function () {
      return mergedGlobalConfig.value.classPrefix;
    });
    var t = function t(pattern) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var data = args[0];
      if (typeof pattern === "string") {
        if (!data) return pattern;
        var regular = /\{\s*([\w-]+)\s*\}/g;
        var translated = pattern.replace(regular, function (match, key) {
          if (data) {
            return String(data[key]);
          }
          return "";
        });
        return translated;
      }
      if (typeof pattern === "function") {
        if (!args.length) return pattern(vue.h);
        return pattern.apply(void 0, args);
      }
      return "";
    };
    return {
      t: t,
      global: globalConfig,
      globalConfig: globalConfig,
      classPrefix: classPrefix
    };
  }

  function usePrefixClass(componentName) {
    var _useConfig = useConfig("classPrefix"),
      classPrefix = _useConfig.classPrefix;
    return vue.computed(function () {
      return componentName ? "".concat(classPrefix.value, "-").concat(componentName) : classPrefix.value;
    });
  }
  function useCommonClassName$2() {
    var _useConfig2 = useConfig("classPrefix"),
      classPrefix = _useConfig2.classPrefix;
    return {
      SIZE: vue.computed(function () {
        return {
          small: "".concat(classPrefix.value, "-size-s"),
          medium: "".concat(classPrefix.value, "-size-m"),
          large: "".concat(classPrefix.value, "-size-l"),
          "default": "",
          xs: "".concat(classPrefix.value, "-size-xs"),
          xl: "".concat(classPrefix.value, "-size-xl"),
          block: "".concat(classPrefix.value, "-size-full-width")
        };
      }),
      STATUS: vue.computed(function () {
        return {
          loading: "".concat(classPrefix.value, "-is-loading"),
          loadMore: "".concat(classPrefix.value, "-is-load-more"),
          disabled: "".concat(classPrefix.value, "-is-disabled"),
          focused: "".concat(classPrefix.value, "-is-focused"),
          success: "".concat(classPrefix.value, "-is-success"),
          error: "".concat(classPrefix.value, "-is-error"),
          warning: "".concat(classPrefix.value, "-is-warning"),
          selected: "".concat(classPrefix.value, "-is-selected"),
          active: "".concat(classPrefix.value, "-is-active"),
          checked: "".concat(classPrefix.value, "-is-checked"),
          current: "".concat(classPrefix.value, "-is-current"),
          hidden: "".concat(classPrefix.value, "-is-hidden"),
          visible: "".concat(classPrefix.value, "-is-visible"),
          expanded: "".concat(classPrefix.value, "-is-expanded"),
          indeterminate: "".concat(classPrefix.value, "-is-indeterminate")
        };
      })
    };
  }

  var GradientIcon = vue.defineComponent({
    name: "TLoadingGradient",
    setup: function setup() {
      var classPrefix = usePrefixClass();
      vue.onMounted(function () {
        var circleElem = vue.getCurrentInstance().refs.circle;
        circleAdapter(circleElem);
      });
      return {
        classPrefix: classPrefix
      };
    },
    render: function render() {
      var classPrefix = this.classPrefix;
      var name = "".concat(classPrefix, "-loading__gradient");
      var classes = [name, "".concat(classPrefix, "-icon-loading")];
      return vue.createVNode("svg", {
        "class": classes,
        "viewBox": "0 0 14 14",
        "version": "1.1",
        "width": "1em",
        "height": "1em",
        "xmlns": "http://www.w3.org/2000/svg"
      }, [vue.createVNode("foreignObject", {
        "x": "1",
        "y": "1",
        "width": "12",
        "height": "12"
      }, [vue.createVNode("div", {
        "class": "".concat(name, "-conic"),
        "ref": "circle"
      }, null)])]);
    }
  });

  var raf$2 = {exports: {}};

  var performanceNow = {exports: {}};

  // Generated by CoffeeScript 1.12.2
  (function () {
    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
    if (typeof performance !== "undefined" && performance !== null && performance.now) {
      performanceNow.exports = function () {
        return performance.now();
      };
    } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
      performanceNow.exports = function () {
        return (getNanoSeconds() - nodeLoadTime) / 1e6;
      };
      hrtime = process.hrtime;
      getNanoSeconds = function getNanoSeconds() {
        var hr;
        hr = hrtime();
        return hr[0] * 1e9 + hr[1];
      };
      moduleLoadTime = getNanoSeconds();
      upTime = process.uptime() * 1e9;
      nodeLoadTime = moduleLoadTime - upTime;
    } else if (Date.now) {
      performanceNow.exports = function () {
        return Date.now() - loadTime;
      };
      loadTime = Date.now();
    } else {
      performanceNow.exports = function () {
        return new Date().getTime() - loadTime;
      };
      loadTime = new Date().getTime();
    }
  }).call(commonjsGlobal);

  var now$2 = performanceNow.exports,
    root$5 = typeof window === 'undefined' ? commonjsGlobal : window,
    vendors = ['moz', 'webkit'],
    suffix = 'AnimationFrame',
    raf = root$5['request' + suffix],
    caf = root$5['cancel' + suffix] || root$5['cancelRequest' + suffix];
  for (var i = 0; !raf && i < vendors.length; i++) {
    raf = root$5[vendors[i] + 'Request' + suffix];
    caf = root$5[vendors[i] + 'Cancel' + suffix] || root$5[vendors[i] + 'CancelRequest' + suffix];
  }

  // Some versions of FF have rAF but not cAF
  if (!raf || !caf) {
    var last$2 = 0,
      id = 0,
      queue = [],
      frameDuration = 1000 / 60;
    raf = function raf(callback) {
      if (queue.length === 0) {
        var _now = now$2(),
          next = Math.max(0, frameDuration - (_now - last$2));
        last$2 = next + _now;
        setTimeout(function () {
          var cp = queue.slice(0);
          // Clear queue here to prevent
          // callbacks from appending listeners
          // to the current frame's queue
          queue.length = 0;
          for (var i = 0; i < cp.length; i++) {
            if (!cp[i].cancelled) {
              try {
                cp[i].callback(last$2);
              } catch (e) {
                setTimeout(function () {
                  throw e;
                }, 0);
              }
            }
          }
        }, Math.round(next));
      }
      queue.push({
        handle: ++id,
        callback: callback,
        cancelled: false
      });
      return id;
    };
    caf = function caf(handle) {
      for (var i = 0; i < queue.length; i++) {
        if (queue[i].handle === handle) {
          queue[i].cancelled = true;
        }
      }
    };
  }
  raf$2.exports = function (fn) {
    // Wrap in a new function to prevent
    // `cancel` potentially being assigned
    // to the native rAF function
    return raf.call(root$5, fn);
  };
  raf$2.exports.cancel = function () {
    caf.apply(root$5, arguments);
  };
  raf$2.exports.polyfill = function (object) {
    if (!object) {
      object = root$5;
    }
    object.requestAnimationFrame = raf;
    object.cancelAnimationFrame = caf;
  };
  var raf$1 = raf$2.exports;

  var baseGetTag$5 = _baseGetTag,
    isArray$9 = isArray_1,
    isObjectLike$7 = isObjectLike_1;

  /** `Object#toString` result references. */
  var stringTag$3 = '[object String]';

  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString(value) {
    return typeof value == 'string' || !isArray$9(value) && isObjectLike$7(value) && baseGetTag$5(value) == stringTag$3;
  }
  var isString_1 = isString;

  var easeInOutCubic = function easeInOutCubic(current, start, end, duration) {
    var change = (end - start) / 2;
    var time = current / (duration / 2);
    if (time < 1) {
      return change * time * time * time + start;
    }
    time -= 2;
    return change * (time * time * time + 2) + start;
  };

  var isServer$1 = typeof window === "undefined";
  var trim = function trim(str) {
    return (str || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
  };
  var on$1 = function () {
    if (!isServer$1 && document.addEventListener) {
      return function (element, event, handler, options) {
        if (element && event && handler) {
          element.addEventListener(event, handler, options);
        }
      };
    }
    return function (element, event, handler) {
      if (element && event && handler) {
        element.attachEvent("on".concat(event), handler);
      }
    };
  }();
  var off$1 = function () {
    if (!isServer$1 && document.removeEventListener) {
      return function (element, event, handler, options) {
        if (element && event) {
          element.removeEventListener(event, handler, options);
        }
      };
    }
    return function (element, event, handler) {
      if (element && event) {
        element.detachEvent("on".concat(event), handler);
      }
    };
  }();
  function once(element, event, handler, options) {
    var handlerFn = typeof handler === "function" ? handler : handler.handleEvent;
    var callback = function callback(evt) {
      handlerFn(evt);
      off$1(element, event, callback, options);
    };
    on$1(element, event, callback, options);
  }
  function hasClass(el, cls) {
    if (!el || !cls) return false;
    if (cls.indexOf(" ") !== -1) throw new Error("className should not contain space.");
    if (el.classList) {
      return el.classList.contains(cls);
    }
    return " ".concat(el.className, " ").indexOf(" ".concat(cls, " ")) > -1;
  }
  function addClass(el, cls) {
    if (!el) return;
    var curClass = el.className;
    var classes = (cls || "").split(" ");
    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;
      if (el.classList) {
        el.classList.add(clsName);
      } else if (!hasClass(el, clsName)) {
        curClass += " ".concat(clsName);
      }
    }
    if (!el.classList) {
      el.className = curClass;
    }
  }
  function removeClass(el, cls) {
    if (!el || !cls) return;
    var classes = cls.split(" ");
    var curClass = " ".concat(el.className, " ");
    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;
      if (el.classList) {
        el.classList.remove(clsName);
      } else if (hasClass(el, clsName)) {
        curClass = curClass.replace(" ".concat(clsName, " "), " ");
      }
    }
    if (!el.classList) {
      el.className = trim(curClass);
    }
  }
  var getAttach = function getAttach(node, triggerNode) {
    var attachNode = typeof node === "function" ? node(triggerNode) : node;
    if (!attachNode) {
      return document.body;
    }
    if (isString_1(attachNode)) {
      return document.querySelector(attachNode);
    }
    if (attachNode instanceof HTMLElement) {
      return attachNode;
    }
    return document.body;
  };
  var getScrollContainer = function getScrollContainer() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "body";
    if (isString_1(container)) {
      return document.querySelector(container);
    }
    if (typeof container === "function") {
      return container();
    }
    return container;
  };
  function isWindow(obj) {
    return obj && obj === obj.window;
  }
  function getScroll(target, isLeft) {
    if (isServer$1 || !target) {
      return 0;
    }
    var method = isLeft ? "scrollLeft" : "scrollTop";
    var result = 0;
    if (isWindow(target)) {
      result = target[isLeft ? "pageXOffset" : "pageYOffset"];
    } else if (target instanceof Document) {
      result = target.documentElement[method];
    } else if (target) {
      result = target[method];
    }
    return result;
  }
  function scrollTo(target, opt) {
    var _opt$container = opt.container,
      container = _opt$container === void 0 ? window : _opt$container,
      _opt$duration = opt.duration,
      duration = _opt$duration === void 0 ? 450 : _opt$duration,
      _opt$easing = opt.easing,
      easing = _opt$easing === void 0 ? easeInOutCubic : _opt$easing;
    var scrollTop = getScroll(container);
    var startTime = Date.now();
    return new Promise(function (res) {
      var fnc = function fnc() {
        var timestamp = Date.now();
        var time = timestamp - startTime;
        var nextScrollTop = easing(Math.min(time, duration), scrollTop, target, duration);
        if (isWindow(container)) {
          container.scrollTo(window.pageXOffset, nextScrollTop);
        } else if (container instanceof Document || container.constructor.name === "HTMLDocument") {
          container.documentElement.scrollTop = nextScrollTop;
        } else {
          container.scrollTop = nextScrollTop;
        }
        if (time < duration) {
          raf$1(fnc);
        } else {
          raf$1(res);
        }
      };
      raf$1(fnc);
    });
  }
  var isNodeOverflow = function isNodeOverflow(ele) {
    var _ele$clientWidth = ele.clientWidth,
      clientWidth = _ele$clientWidth === void 0 ? 0 : _ele$clientWidth,
      _ele$scrollWidth = ele.scrollWidth,
      scrollWidth = _ele$scrollWidth === void 0 ? 0 : _ele$scrollWidth;
    return scrollWidth > clientWidth;
  };
  var requestSubmit = function requestSubmit(target) {
    if (!(target instanceof HTMLFormElement)) {
      throw new Error("target must be HTMLFormElement");
    }
    var submitter = document.createElement("input");
    submitter.type = "submit";
    submitter.hidden = true;
    target.appendChild(submitter);
    submitter.click();
    target.removeChild(submitter);
  };
  function elementInViewport(elm, parent) {
    var rect = elm.getBoundingClientRect();
    if (parent) {
      var parentRect = parent.getBoundingClientRect();
      return rect.top >= parentRect.top && rect.left >= parentRect.left && rect.bottom <= parentRect.bottom && rect.right <= parentRect.right;
    }
    return rect.top >= 0 && rect.left >= 0 && rect.bottom + 80 <= window.innerHeight && rect.right <= window.innerWidth;
  }
  function getElmCssPropValue(element, propName) {
    var propValue = "";
    if (document.defaultView && document.defaultView.getComputedStyle) {
      propValue = document.defaultView.getComputedStyle(element, null).getPropertyValue(propName);
    }
    if (propValue && propValue.toLowerCase) {
      return propValue.toLowerCase();
    }
    return propValue;
  }
  function isFixed(element) {
    var p = element.parentNode;
    if (!p || p.nodeName === "HTML") {
      return false;
    }
    if (getElmCssPropValue(element, "position") === "fixed") {
      return true;
    }
    return isFixed(p);
  }
  function getWindowScroll$1() {
    var _document = document,
      body = _document.body;
    var docElm = document.documentElement;
    var scrollTop = window.pageYOffset || docElm.scrollTop || body.scrollTop;
    var scrollLeft = window.pageXOffset || docElm.scrollLeft || body.scrollLeft;
    return {
      scrollTop: scrollTop,
      scrollLeft: scrollLeft
    };
  }
  function getWindowSize() {
    if (window.innerWidth !== void 0) {
      return {
        width: window.innerWidth,
        height: window.innerHeight
      };
    }
    var doc = document.documentElement;
    return {
      width: doc.clientWidth,
      height: doc.clientHeight
    };
  }

  var overArg = _overArg;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys$1 = overArg(Object.keys, Object);
  var _nativeKeys = nativeKeys$1;

  var isPrototype$1 = _isPrototype,
    nativeKeys = _nativeKeys;

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$7.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys$2(object) {
    if (!isPrototype$1(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }
  var _baseKeys = baseKeys$2;

  var getNative$3 = _getNative,
    root$4 = _root;

  /* Built-in method references that are verified to be native. */
  var DataView$1 = getNative$3(root$4, 'DataView');
  var _DataView = DataView$1;

  var getNative$2 = _getNative,
    root$3 = _root;

  /* Built-in method references that are verified to be native. */
  var Promise$2 = getNative$2(root$3, 'Promise');
  var _Promise = Promise$2;

  var getNative$1 = _getNative,
    root$2 = _root;

  /* Built-in method references that are verified to be native. */
  var Set$2 = getNative$1(root$2, 'Set');
  var _Set = Set$2;

  var getNative = _getNative,
    root$1 = _root;

  /* Built-in method references that are verified to be native. */
  var WeakMap$2 = getNative(root$1, 'WeakMap');
  var _WeakMap = WeakMap$2;

  var DataView = _DataView,
    Map$1 = _Map,
    Promise$1 = _Promise,
    Set$1 = _Set,
    WeakMap$1 = _WeakMap,
    baseGetTag$4 = _baseGetTag,
    toSource = _toSource;

  /** `Object#toString` result references. */
  var mapTag$5 = '[object Map]',
    objectTag$2 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$5 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]';
  var dataViewTag$3 = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map$1),
    promiseCtorString = toSource(Promise$1),
    setCtorString = toSource(Set$1),
    weakMapCtorString = toSource(WeakMap$1);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag$5 = baseGetTag$4;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if (DataView && getTag$5(new DataView(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag$5(new Map$1()) != mapTag$5 || Promise$1 && getTag$5(Promise$1.resolve()) != promiseTag || Set$1 && getTag$5(new Set$1()) != setTag$5 || WeakMap$1 && getTag$5(new WeakMap$1()) != weakMapTag$1) {
    getTag$5 = function getTag(value) {
      var result = baseGetTag$4(value),
        Ctor = result == objectTag$2 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$3;
          case mapCtorString:
            return mapTag$5;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag$5;
          case weakMapCtorString:
            return weakMapTag$1;
        }
      }
      return result;
    };
  }
  var _getTag = getTag$5;

  var baseKeys$1 = _baseKeys,
    getTag$4 = _getTag,
    isArguments$2 = isArguments_1,
    isArray$8 = isArray_1,
    isArrayLike$1 = isArrayLike_1,
    isBuffer$2 = isBuffer$5.exports,
    isPrototype = _isPrototype,
    isTypedArray$1 = isTypedArray_1;

  /** `Object#toString` result references. */
  var mapTag$4 = '[object Map]',
    setTag$4 = '[object Set]';

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$6.hasOwnProperty;

  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike$1(value) && (isArray$8(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer$2(value) || isTypedArray$1(value) || isArguments$2(value))) {
      return !value.length;
    }
    var tag = getTag$4(value);
    if (tag == mapTag$4 || tag == setTag$4) {
      return !value.size;
    }
    if (isPrototype(value)) {
      return !baseKeys$1(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty$6.call(value, key)) {
        return false;
      }
    }
    return true;
  }
  var isEmpty_1 = isEmpty;

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap$6(array, iteratee) {
    var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  var _arrayMap = arrayMap$6;

  var baseGetTag$3 = _baseGetTag,
    isObjectLike$6 = isObjectLike_1;

  /** `Object#toString` result references. */
  var symbolTag$3 = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol$4(value) {
    return _typeof$2(value) == 'symbol' || isObjectLike$6(value) && baseGetTag$3(value) == symbolTag$3;
  }
  var isSymbol_1 = isSymbol$4;

  var _Symbol$3 = _Symbol$6,
    arrayMap$5 = _arrayMap,
    isArray$7 = isArray_1,
    isSymbol$3 = isSymbol_1;

  /** Used as references for various `Number` constants. */
  var INFINITY$2 = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$2 = _Symbol$3 ? _Symbol$3.prototype : undefined,
    symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString$2(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray$7(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap$5(value, baseToString$2) + '';
    }
    if (isSymbol$3(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$2 ? '-0' : result;
  }
  var _baseToString = baseToString$2;

  var baseToString$1 = _baseToString;

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString$9(value) {
    return value == null ? '' : baseToString$1(value);
  }
  var toString_1 = toString$9;

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice$3(array, start, end) {
    var index = -1,
      length = array.length;
    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }
  var _baseSlice = baseSlice$3;

  var baseSlice$2 = _baseSlice;

  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */
  function castSlice$2(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : baseSlice$2(array, start, end);
  }
  var _castSlice = castSlice$2;

  /** Used to compose unicode character classes. */
  var rsAstralRange$3 = "\\ud800-\\udfff",
    rsComboMarksRange$4 = "\\u0300-\\u036f",
    reComboHalfMarksRange$4 = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange$4 = "\\u20d0-\\u20ff",
    rsComboRange$4 = rsComboMarksRange$4 + reComboHalfMarksRange$4 + rsComboSymbolsRange$4,
    rsVarRange$3 = "\\ufe0e\\ufe0f";

  /** Used to compose unicode capture groups. */
  var rsZWJ$3 = "\\u200d";

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ$3 + rsAstralRange$3 + rsComboRange$4 + rsVarRange$3 + ']');

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode$4(string) {
    return reHasUnicode.test(string);
  }
  var _hasUnicode = hasUnicode$4;

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray$1(string) {
    return string.split('');
  }
  var _asciiToArray = asciiToArray$1;

  /** Used to compose unicode character classes. */
  var rsAstralRange$2 = "\\ud800-\\udfff",
    rsComboMarksRange$3 = "\\u0300-\\u036f",
    reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange$3 = "\\u20d0-\\u20ff",
    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
    rsVarRange$2 = "\\ufe0e\\ufe0f";

  /** Used to compose unicode capture groups. */
  var rsAstral$1 = '[' + rsAstralRange$2 + ']',
    rsCombo$3 = '[' + rsComboRange$3 + ']',
    rsFitz$2 = "\\ud83c[\\udffb-\\udfff]",
    rsModifier$2 = '(?:' + rsCombo$3 + '|' + rsFitz$2 + ')',
    rsNonAstral$2 = '[^' + rsAstralRange$2 + ']',
    rsRegional$2 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    rsSurrPair$2 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    rsZWJ$2 = "\\u200d";

  /** Used to compose unicode regexes. */
  var reOptMod$2 = rsModifier$2 + '?',
    rsOptVar$2 = '[' + rsVarRange$2 + ']?',
    rsOptJoin$2 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$2, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsOptVar$2 + reOptMod$2 + ')*',
    rsSeq$2 = rsOptVar$2 + reOptMod$2 + rsOptJoin$2,
    rsSymbol$1 = '(?:' + [rsNonAstral$2 + rsCombo$3 + '?', rsCombo$3, rsRegional$2, rsSurrPair$2, rsAstral$1].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode$1 = RegExp(rsFitz$2 + '(?=' + rsFitz$2 + ')|' + rsSymbol$1 + rsSeq$2, 'g');

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray$1(string) {
    return string.match(reUnicode$1) || [];
  }
  var _unicodeToArray = unicodeToArray$1;

  var asciiToArray = _asciiToArray,
    hasUnicode$3 = _hasUnicode,
    unicodeToArray = _unicodeToArray;

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray$2(string) {
    return hasUnicode$3(string) ? unicodeToArray(string) : asciiToArray(string);
  }
  var _stringToArray = stringToArray$2;

  var castSlice$1 = _castSlice,
    hasUnicode$2 = _hasUnicode,
    stringToArray$1 = _stringToArray,
    toString$8 = toString_1;

  /**
   * Creates a function like `_.lowerFirst`.
   *
   * @private
   * @param {string} methodName The name of the `String` case method to use.
   * @returns {Function} Returns the new case function.
   */
  function createCaseFirst$1(methodName) {
    return function (string) {
      string = toString$8(string);
      var strSymbols = hasUnicode$2(string) ? stringToArray$1(string) : undefined;
      var chr = strSymbols ? strSymbols[0] : string.charAt(0);
      var trailing = strSymbols ? castSlice$1(strSymbols, 1).join('') : string.slice(1);
      return chr[methodName]() + trailing;
    };
  }
  var _createCaseFirst = createCaseFirst$1;

  var createCaseFirst = _createCaseFirst;

  /**
   * Converts the first character of `string` to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.upperFirst('fred');
   * // => 'Fred'
   *
   * _.upperFirst('FRED');
   * // => 'FRED'
   */
  var upperFirst$1 = createCaseFirst('toUpperCase');
  var upperFirst_1 = upperFirst$1;

  var toString$7 = toString_1,
    upperFirst = upperFirst_1;

  /**
   * Converts the first character of `string` to upper case and the remaining
   * to lower case.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to capitalize.
   * @returns {string} Returns the capitalized string.
   * @example
   *
   * _.capitalize('FRED');
   * // => 'Fred'
   */
  function capitalize$1(string) {
    return upperFirst(toString$7(string).toLowerCase());
  }
  var capitalize_1 = capitalize$1;

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce$1(array, iteratee, accumulator, initAccum) {
    var index = -1,
      length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }
  var _arrayReduce = arrayReduce$1;

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf$2(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }
  var _basePropertyOf = basePropertyOf$2;

  var basePropertyOf$1 = _basePropertyOf;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    "\u0100": 'A',
    "\u0102": 'A',
    "\u0104": 'A',
    "\u0101": 'a',
    "\u0103": 'a',
    "\u0105": 'a',
    "\u0106": 'C',
    "\u0108": 'C',
    "\u010A": 'C',
    "\u010C": 'C',
    "\u0107": 'c',
    "\u0109": 'c',
    "\u010B": 'c',
    "\u010D": 'c',
    "\u010E": 'D',
    "\u0110": 'D',
    "\u010F": 'd',
    "\u0111": 'd',
    "\u0112": 'E',
    "\u0114": 'E',
    "\u0116": 'E',
    "\u0118": 'E',
    "\u011A": 'E',
    "\u0113": 'e',
    "\u0115": 'e',
    "\u0117": 'e',
    "\u0119": 'e',
    "\u011B": 'e',
    "\u011C": 'G',
    "\u011E": 'G',
    "\u0120": 'G',
    "\u0122": 'G',
    "\u011D": 'g',
    "\u011F": 'g',
    "\u0121": 'g',
    "\u0123": 'g',
    "\u0124": 'H',
    "\u0126": 'H',
    "\u0125": 'h',
    "\u0127": 'h',
    "\u0128": 'I',
    "\u012A": 'I',
    "\u012C": 'I',
    "\u012E": 'I',
    "\u0130": 'I',
    "\u0129": 'i',
    "\u012B": 'i',
    "\u012D": 'i',
    "\u012F": 'i',
    "\u0131": 'i',
    "\u0134": 'J',
    "\u0135": 'j',
    "\u0136": 'K',
    "\u0137": 'k',
    "\u0138": 'k',
    "\u0139": 'L',
    "\u013B": 'L',
    "\u013D": 'L',
    "\u013F": 'L',
    "\u0141": 'L',
    "\u013A": 'l',
    "\u013C": 'l',
    "\u013E": 'l',
    "\u0140": 'l',
    "\u0142": 'l',
    "\u0143": 'N',
    "\u0145": 'N',
    "\u0147": 'N',
    "\u014A": 'N',
    "\u0144": 'n',
    "\u0146": 'n',
    "\u0148": 'n',
    "\u014B": 'n',
    "\u014C": 'O',
    "\u014E": 'O',
    "\u0150": 'O',
    "\u014D": 'o',
    "\u014F": 'o',
    "\u0151": 'o',
    "\u0154": 'R',
    "\u0156": 'R',
    "\u0158": 'R',
    "\u0155": 'r',
    "\u0157": 'r',
    "\u0159": 'r',
    "\u015A": 'S',
    "\u015C": 'S',
    "\u015E": 'S',
    "\u0160": 'S',
    "\u015B": 's',
    "\u015D": 's',
    "\u015F": 's',
    "\u0161": 's',
    "\u0162": 'T',
    "\u0164": 'T',
    "\u0166": 'T',
    "\u0163": 't',
    "\u0165": 't',
    "\u0167": 't',
    "\u0168": 'U',
    "\u016A": 'U',
    "\u016C": 'U',
    "\u016E": 'U',
    "\u0170": 'U',
    "\u0172": 'U',
    "\u0169": 'u',
    "\u016B": 'u',
    "\u016D": 'u',
    "\u016F": 'u',
    "\u0171": 'u',
    "\u0173": 'u',
    "\u0174": 'W',
    "\u0175": 'w',
    "\u0176": 'Y',
    "\u0177": 'y',
    "\u0178": 'Y',
    "\u0179": 'Z',
    "\u017B": 'Z',
    "\u017D": 'Z',
    "\u017A": 'z',
    "\u017C": 'z',
    "\u017E": 'z',
    "\u0132": 'IJ',
    "\u0133": 'ij',
    "\u0152": 'Oe',
    "\u0153": 'oe',
    "\u0149": "'n",
    "\u017F": 's'
  };

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter$1 = basePropertyOf$1(deburredLetters);
  var _deburrLetter = deburrLetter$1;

  var deburrLetter = _deburrLetter,
    toString$6 = toString_1;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to compose unicode character classes. */
  var rsComboMarksRange$2 = "\\u0300-\\u036f",
    reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange$2 = "\\u20d0-\\u20ff",
    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;

  /** Used to compose unicode capture groups. */
  var rsCombo$2 = '[' + rsComboRange$2 + ']';

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo$2, 'g');

  /**
   * Deburrs `string` by converting
   * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
   * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
   * letters to basic Latin letters and removing
   * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to deburr.
   * @returns {string} Returns the deburred string.
   * @example
   *
   * _.deburr('déjà vu');
   * // => 'deja vu'
   */
  function deburr$1(string) {
    string = toString$6(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
  }
  var deburr_1 = deburr$1;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords$1(string) {
    return string.match(reAsciiWord) || [];
  }
  var _asciiWords = asciiWords$1;

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord$1(string) {
    return reHasUnicodeWord.test(string);
  }
  var _hasUnicodeWord = hasUnicodeWord$1;

  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = "\\ud800-\\udfff",
    rsComboMarksRange$1 = "\\u0300-\\u036f",
    reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange$1 = "\\u20d0-\\u20ff",
    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
    rsDingbatRange = "\\u2700-\\u27bf",
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = "\\u2000-\\u206f",
    rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange$1 = "\\ufe0e\\ufe0f",
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos$1 = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo$1 = '[' + rsComboRange$1 + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange$1 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz$1 = "\\ud83c[\\udffb-\\udfff]",
    rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
    rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
    rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ$1 = "\\u200d";

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod$1 = rsModifier$1 + '?',
    rsOptVar$1 = '[' + rsVarRange$1 + ']?',
    rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
    rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords$1(string) {
    return string.match(reUnicodeWord) || [];
  }
  var _unicodeWords = unicodeWords$1;

  var asciiWords = _asciiWords,
    hasUnicodeWord = _hasUnicodeWord,
    toString$5 = toString_1,
    unicodeWords = _unicodeWords;

  /**
   * Splits `string` into an array of its words.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {RegExp|string} [pattern] The pattern to match words.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the words of `string`.
   * @example
   *
   * _.words('fred, barney, & pebbles');
   * // => ['fred', 'barney', 'pebbles']
   *
   * _.words('fred, barney, & pebbles', /[^, ]+/g);
   * // => ['fred', 'barney', '&', 'pebbles']
   */
  function words$1(string, pattern, guard) {
    string = toString$5(string);
    pattern = guard ? undefined : pattern;
    if (pattern === undefined) {
      return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    }
    return string.match(pattern) || [];
  }
  var words_1 = words$1;

  var arrayReduce = _arrayReduce,
    deburr = deburr_1,
    words = words_1;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]";

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Creates a function like `_.camelCase`.
   *
   * @private
   * @param {Function} callback The function to combine each word.
   * @returns {Function} Returns the new compounder function.
   */
  function createCompounder$3(callback) {
    return function (string) {
      return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
  }
  var _createCompounder = createCompounder$3;

  var capitalize = capitalize_1,
    createCompounder$2 = _createCompounder;

  /**
   * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the camel cased string.
   * @example
   *
   * _.camelCase('Foo Bar');
   * // => 'fooBar'
   *
   * _.camelCase('--foo-bar--');
   * // => 'fooBar'
   *
   * _.camelCase('__FOO_BAR__');
   * // => 'fooBar'
   */
  var camelCase = createCompounder$2(function (result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize(word) : word);
  });
  var camelCase_1 = camelCase;

  var createCompounder$1 = _createCompounder;

  /**
   * Converts `string` to
   * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the kebab cased string.
   * @example
   *
   * _.kebabCase('Foo Bar');
   * // => 'foo-bar'
   *
   * _.kebabCase('fooBar');
   * // => 'foo-bar'
   *
   * _.kebabCase('__FOO_BAR__');
   * // => 'foo-bar'
   */
  var kebabCase = createCompounder$1(function (result, word, index) {
    return result + (index ? '-' : '') + word.toLowerCase();
  });
  var kebabCase_1 = kebabCase;

  function getDefaultNode(options) {
    var defaultNode;
    if (isObject_1(options) && "defaultNode" in options) {
      defaultNode = options.defaultNode;
    } else if (vue.isVNode(options) || isString_1(options)) {
      defaultNode = options;
    }
    return defaultNode;
  }
  function getParams(options) {
    return isObject_1(options) && "params" in options ? options.params : {};
  }
  function handleSlots$1(instance, params, name) {
    var _instance$$slots$came, _instance$$slots, _instance$$slots$keba, _instance$$slots2;
    var node = (_instance$$slots$came = (_instance$$slots = instance.$slots)[camelCase_1(name)]) === null || _instance$$slots$came === void 0 ? void 0 : _instance$$slots$came.call(_instance$$slots, params);
    if (node) return node;
    node = (_instance$$slots$keba = (_instance$$slots2 = instance.$slots)[kebabCase_1(name)]) === null || _instance$$slots$keba === void 0 ? void 0 : _instance$$slots$keba.call(_instance$$slots2, params);
    if (node) return node;
    return null;
  }
  var renderTNodeJSX = function renderTNodeJSX(instance, name, options) {
    var params = getParams(options);
    var defaultNode = getDefaultNode(options);
    var propsNode;
    if (name in instance) {
      propsNode = instance[name];
    }
    if (propsNode === false) return;
    if (propsNode === true && defaultNode) {
      return handleSlots$1(instance, params, name) || defaultNode;
    }
    if (isFunction_1(propsNode)) return propsNode(vue.h, params);
    var isPropsEmpty = [void 0, params, ""].includes(propsNode);
    if (isPropsEmpty && (instance.$slots[camelCase_1(name)] || instance.$slots[kebabCase_1(name)])) {
      return handleSlots$1(instance, params, name);
    }
    return propsNode;
  };
  var renderTNodeJSXDefault = function renderTNodeJSXDefault(vm, name, options) {
    var defaultNode = getDefaultNode(options);
    return renderTNodeJSX(vm, name, options) || defaultNode;
  };
  var renderContent = function renderContent(vm, name1, name2, options) {
    var params = getParams(options);
    var defaultNode = getDefaultNode(options);
    var toParams = params ? {
      params: params
    } : void 0;
    var node1 = renderTNodeJSX(vm, name1, toParams);
    var node2 = renderTNodeJSX(vm, name2, toParams);
    var res = isEmpty_1(node1) ? node2 : node1;
    return isEmpty_1(res) ? defaultNode : res;
  };

  var TransferDom = {
    mounted: function mounted(el, binding) {
      if (!binding.value) return;
      var parentNode = getAttach(binding.value);
      parentNode === null || parentNode === void 0 ? void 0 : parentNode.appendChild(el);
    }
  };

  var props$1j = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    delay: {
      type: Number,
      "default": 0
    },
    fullscreen: Boolean,
    indicator: {
      type: [Boolean, Function],
      "default": true
    },
    inheritColor: Boolean,
    loading: {
      type: Boolean,
      "default": true
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showOverlay: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium"
    },
    text: {
      type: [String, Function]
    },
    zIndex: {
      type: Number
    }
  };

  var useComponentClassName$2 = function useComponentClassName() {
    return {
      name: usePrefixClass("loading"),
      centerClass: usePrefixClass("loading--center"),
      fullscreenClass: usePrefixClass("loading__fullscreen"),
      lockClass: usePrefixClass("loading--lock"),
      overlayClass: usePrefixClass("loading__overlay"),
      relativeClass: usePrefixClass("loading__parent"),
      fullClass: usePrefixClass("loading--full"),
      inheritColorClass: usePrefixClass("loading--inherit-color")
    };
  };
  var _Loading = vue.defineComponent({
    name: "TLoading",
    directives: {
      TransferDom: TransferDom
    },
    props: props$1j,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var delayShowLoading = vue.ref(false);
      var _useComponentClassNam = useComponentClassName$2(),
        name = _useComponentClassNam.name,
        centerClass = _useComponentClassNam.centerClass,
        fullscreenClass = _useComponentClassNam.fullscreenClass,
        lockClass = _useComponentClassNam.lockClass,
        overlayClass = _useComponentClassNam.overlayClass,
        relativeClass = _useComponentClassNam.relativeClass,
        fullClass = _useComponentClassNam.fullClass,
        inheritColorClass = _useComponentClassNam.inheritColorClass;
      var classPrefix = usePrefixClass();
      var _useCommonClassName = useCommonClassName$2(),
        SIZE = _useCommonClassName.SIZE;
      var countDelay = function countDelay() {
        delayShowLoading.value = false;
        var timer = setTimeout(function () {
          delayShowLoading.value = true;
          clearTimeout(timer);
        }, props2.delay);
      };
      var delayCounted = vue.computed(function () {
        return Boolean(!props2.delay || props2.delay && delayShowLoading.value);
      });
      var styles = vue.computed(function () {
        var styles2 = {};
        if (props2.zIndex !== void 0) {
          styles2.zIndex = props2.zIndex;
        }
        if (!["small", "medium", "large"].includes(props2.size)) {
          styles2["font-size"] = props2.size;
        }
        return styles2;
      });
      var hasContent = vue.computed(function () {
        return Boolean(props2["default"] || slots["default"] || props2.content || slots.content);
      });
      var lockFullscreen = vue.computed(function () {
        return props2.preventScrollThrough && props2.fullscreen;
      });
      var showText = vue.computed(function () {
        return Boolean(props2.text || slots.text);
      });
      var showWrapLoading = vue.computed(function () {
        return hasContent.value && props2.loading && delayCounted.value;
      });
      var showFullScreenLoading = vue.computed(function () {
        return props2.fullscreen && props2.loading && delayCounted.value;
      });
      var showNormalLoading = vue.computed(function () {
        return props2.attach && props2.loading && delayCounted.value;
      });
      var showAttachedLoading = vue.computed(function () {
        return props2.attach && props2.loading && delayCounted.value;
      });
      var classes = vue.computed(function () {
        var baseClasses = [centerClass.value, SIZE.value[props2.size], _defineProperty$3({}, inheritColorClass.value, props2.inheritColor)];
        var fullScreenClasses = [name.value, fullscreenClass.value, centerClass.value, overlayClass.value];
        return {
          baseClasses: baseClasses,
          attachClasses: baseClasses.concat([name.value, fullClass.value, _defineProperty$3({}, overlayClass.value, props2.showOverlay)]),
          withContentClasses: baseClasses.concat([name.value, fullClass.value, _defineProperty$3({}, overlayClass.value, props2.showOverlay)]),
          fullScreenClasses: fullScreenClasses,
          normalClasses: baseClasses.concat([name.value])
        };
      });
      var _toRefs = vue.toRefs(props2),
        loading = _toRefs.loading;
      vue.watch([loading], function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 1),
          isLoading = _ref6[0];
        if (isLoading) {
          countDelay();
          lockFullscreen.value && addClass(document.body, lockClass.value);
        } else {
          lockFullscreen.value && removeClass(document.body, lockClass.value);
        }
      });
      vue.onMounted(function () {
        props2.delay && countDelay();
      });
      return {
        classPrefix: classPrefix,
        relativeClass: relativeClass,
        delayShowLoading: delayShowLoading,
        styles: styles,
        showText: showText,
        hasContent: hasContent,
        classes: classes,
        lockFullscreen: lockFullscreen,
        showWrapLoading: showWrapLoading,
        showNormalLoading: showNormalLoading,
        showFullScreenLoading: showFullScreenLoading,
        showAttachedLoading: showAttachedLoading
      };
    },
    render: function render() {
      var _this$classes = this.classes,
        fullScreenClasses = _this$classes.fullScreenClasses,
        baseClasses = _this$classes.baseClasses,
        withContentClasses = _this$classes.withContentClasses,
        attachClasses = _this$classes.attachClasses,
        normalClasses = _this$classes.normalClasses;
      var defaultIndicator = vue.createVNode(GradientIcon, {
        "size": this.size
      }, null);
      var indicator = this.loading && renderTNodeJSX(this, "indicator", defaultIndicator);
      var text = this.showText && vue.createVNode("div", {
        "class": "".concat(this.classPrefix, "-loading__text")
      }, [renderTNodeJSX(this, "text")]);
      if (this.fullscreen) {
        if (!this.showFullScreenLoading) return null;
        return vue.withDirectives(vue.createVNode("div", {
          "class": fullScreenClasses,
          "style": this.styles
        }, [vue.createVNode("div", {
          "class": baseClasses
        }, [indicator, text])]), [[vue.resolveDirective("transfer-dom"), this.attach]]);
      }
      if (this.hasContent) {
        return vue.createVNode("div", {
          "class": this.relativeClass
        }, [renderContent(this, "default", "content"), this.showWrapLoading && vue.createVNode("div", {
          "class": withContentClasses,
          "style": this.styles
        }, [indicator, text])]);
      }
      if (this.attach) {
        if (!this.showAttachedLoading) return null;
        return vue.withDirectives(vue.createVNode("div", {
          "class": attachClasses,
          "style": this.styles
        }, [indicator, text]), [[vue.resolveDirective("transfer-dom"), this.attach]]);
      }
      return vue.createVNode("div", {
        "class": normalClasses,
        "style": this.styles
      }, [indicator, text]);
    }
  });

  function ownKeys$37(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$36(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$37(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$37(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var fullScreenLoadingInstance = null;
  function createLoading(props) {
    var component = vue.defineComponent({
      setup: function setup() {
        var loadingOptions = vue.reactive(props);
        return {
          loadingOptions: loadingOptions
        };
      },
      render: function render() {
        return vue.h(_Loading, _objectSpread$36({}, this.loadingOptions));
      }
    });
    var attach = getAttach(props.attach);
    var loading = vue.createApp(component).mount(document.createElement("div"));
    var parentRelativeClass = usePrefixClass("loading__parent--relative").value;
    if (attach) {
      attach.appendChild(loading.$el);
      addClass(attach, parentRelativeClass);
    } else {
      console.error("attach is not exist");
    }
    var loadingInstance = {
      hide: function hide() {
        var _loading$$el$parentNo;
        loading.loading = false;
        (_loading$$el$parentNo = loading.$el.parentNode) === null || _loading$$el$parentNo === void 0 ? void 0 : _loading$$el$parentNo.removeChild(loading.$el);
        removeClass(attach, parentRelativeClass);
      }
    };
    return loadingInstance;
  }
  function produceLoading(props) {
    var lockClass = usePrefixClass("loading--lock");
    if (props === true) {
      fullScreenLoadingInstance = createLoading({
        fullscreen: true,
        loading: true,
        attach: "body"
      });
      return fullScreenLoadingInstance;
    }
    removeClass(document.body, lockClass.value);
    if (props === false) {
      removeClass(document.body, lockClass.value);
      fullScreenLoadingInstance.hide();
      fullScreenLoadingInstance = null;
      return;
    }
    return createLoading(props);
  }
  var LoadingPlugin = produceLoading;
  LoadingPlugin.install = function (app) {
    app.config.globalProperties.$loading = produceLoading;
  };

  var INSTANCE_KEY = Symbol("TdLoading");
  var createInstance = function createInstance(el, binding) {
    var _binding$modifiers = binding.modifiers,
      fullscreen = _binding$modifiers.fullscreen,
      inheritColor = _binding$modifiers.inheritColor;
    var options = {
      attach: function attach() {
        return el;
      },
      fullscreen: fullscreen !== null && fullscreen !== void 0 ? fullscreen : false,
      inheritColor: inheritColor !== null && inheritColor !== void 0 ? inheritColor : false,
      loading: binding.value
    };
    el[INSTANCE_KEY] = {
      options: options,
      instance: LoadingPlugin(options)
    };
  };
  var vLoading = {
    mounted: function mounted(el, binding) {
      if (binding.value) {
        createInstance(el, binding);
      }
    },
    updated: function updated(el, binding) {
      var instance = el[INSTANCE_KEY];
      var value = binding.value,
        oldValue = binding.oldValue;
      if (!!oldValue !== !!value) {
        if (value) {
          createInstance(el, binding);
        } else {
          instance === null || instance === void 0 ? void 0 : instance.instance.hide();
        }
      }
    },
    unmounted: function unmounted(el) {
      var _el$INSTANCE_KEY;
      (_el$INSTANCE_KEY = el[INSTANCE_KEY]) === null || _el$INSTANCE_KEY === void 0 ? void 0 : _el$INSTANCE_KEY.instance.hide();
    }
  };

  function withInstall(comp, alias, directive) {
    var componentPlugin = comp;
    componentPlugin.install = function (app, name) {
      app.component(alias || name || componentPlugin.name, comp);
      directive && app.directive(directive.name, directive.comp);
    };
    return componentPlugin;
  }

  var Loading = withInstall(_Loading, _Loading.name, {
    name: "loading",
    comp: vLoading
  });

  var props$1i = {
    block: Boolean,
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    ghost: Boolean,
    href: String,
    icon: {
      type: Function
    },
    loading: Boolean,
    shape: {
      type: String,
      "default": "rectangle",
      validator: function validator(val) {
        if (!val) return true;
        return ["rectangle", "square", "round", "circle"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    suffix: {
      type: Function
    },
    tag: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["button", "a", "div"].includes(val);
      }
    },
    theme: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "primary", "danger", "warning", "success"].includes(val);
      }
    },
    type: {
      type: String,
      "default": "button",
      validator: function validator(val) {
        if (!val) return true;
        return ["submit", "reset", "button"].includes(val);
      }
    },
    variant: {
      type: String,
      "default": "base",
      validator: function validator(val) {
        if (!val) return true;
        return ["base", "outline", "dashed", "text"].includes(val);
      }
    },
    onClick: Function
  };

  var expand = EAnimationType.expand,
    ripple = EAnimationType.ripple,
    fade = EAnimationType.fade;
  function useKeepAnimation() {
    var _useConfig = useConfig("animation"),
      globalConfig = _useConfig.globalConfig;
    var keepAnimation = function keepAnimation(type) {
      var _animationConfig$excl, _animationConfig$incl;
      var animationConfig = globalConfig.value;
      return animationConfig && !((_animationConfig$excl = animationConfig.exclude) !== null && _animationConfig$excl !== void 0 && _animationConfig$excl.includes(type)) && ((_animationConfig$incl = animationConfig.include) === null || _animationConfig$incl === void 0 ? void 0 : _animationConfig$incl.includes(type));
    };
    return {
      keepExpand: keepAnimation(expand),
      keepRipple: keepAnimation(ripple),
      keepFade: keepAnimation(fade)
    };
  }

  function setStyle(el, styles) {
    var keys = Object.keys(styles);
    keys.forEach(function (key) {
      el.style[key] = styles[key];
    });
  }

  var period = 200;
  var noneRippleBg = "rgba(0, 0, 0, 0)";
  var defaultRippleColor = "rgba(0, 0, 0, 0.35)";
  var getRippleColor = function getRippleColor(el, fixedRippleColor) {
    var _el$dataset;
    if (fixedRippleColor) {
      return fixedRippleColor;
    }
    if (el !== null && el !== void 0 && (_el$dataset = el.dataset) !== null && _el$dataset !== void 0 && _el$dataset.ripple) {
      var rippleColor = el.dataset.ripple;
      return rippleColor;
    }
    var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");
    if (cssVariable) {
      return cssVariable;
    }
    return defaultRippleColor;
  };
  function useRipple(el, fixedRippleColor) {
    var rippleContainer = vue.ref(null);
    var classPrefix = usePrefixClass();
    var _useKeepAnimation = useKeepAnimation(),
      keepRipple = _useKeepAnimation.keepRipple;
    var handleAddRipple = function handleAddRipple(e) {
      var dom = el.value;
      var rippleColor = getRippleColor(dom, fixedRippleColor === null || fixedRippleColor === void 0 ? void 0 : fixedRippleColor.value);
      if (e.button !== 0 || !el || !keepRipple) return;
      if (dom.classList.contains("".concat(classPrefix.value, "-is-active")) || dom.classList.contains("".concat(classPrefix.value, "-is-disabled")) || dom.classList.contains("".concat(classPrefix.value, "-is-checked")) || dom.classList.contains("".concat(classPrefix.value, "-is-loading"))) return;
      var elStyle = getComputedStyle(dom);
      var elBorder = parseInt(elStyle.borderWidth, 10);
      var border = elBorder > 0 ? elBorder : 0;
      var width = dom.offsetWidth;
      var height = dom.offsetHeight;
      if (rippleContainer.value.parentNode === null) {
        setStyle(rippleContainer.value, {
          position: "absolute",
          left: "".concat(0 - border, "px"),
          top: "".concat(0 - border, "px"),
          width: "".concat(width, "px"),
          height: "".concat(height, "px"),
          borderRadius: elStyle.borderRadius,
          pointerEvents: "none",
          overflow: "hidden"
        });
        dom.appendChild(rippleContainer.value);
      }
      var ripple = document.createElement("div");
      setStyle(ripple, {
        marginTop: "0",
        marginLeft: "0",
        right: "".concat(width, "px"),
        width: "".concat(width + 20, "px"),
        height: "100%",
        transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
        transform: "skewX(-8deg)",
        pointerEvents: "none",
        position: "absolute",
        zIndex: 0,
        backgroundColor: rippleColor,
        opacity: "0.9"
      });
      var elMap = /* @__PURE__ */new WeakMap();
      for (var n = dom.children.length, i = 0; i < n; ++i) {
        var child = dom.children[i];
        if (child.style.zIndex === "" && child !== rippleContainer.value) {
          child.style.zIndex = "1";
          elMap.set(child, true);
        }
      }
      var initPosition = dom.style.position ? dom.style.position : getComputedStyle(dom).position;
      if (initPosition === "" || initPosition === "static") {
        dom.style.position = "relative";
      }
      rippleContainer.value.insertBefore(ripple, rippleContainer.value.firstChild);
      setTimeout(function () {
        ripple.style.transform = "translateX(".concat(width, "px)");
      }, 0);
      var handleClearRipple = function handleClearRipple() {
        ripple.style.backgroundColor = noneRippleBg;
        if (!el.value) return;
        el.value.removeEventListener("pointerup", handleClearRipple, false);
        el.value.removeEventListener("pointerleave", handleClearRipple, false);
        setTimeout(function () {
          ripple.remove();
          if (rippleContainer.value.children.length === 0) rippleContainer.value.remove();
        }, period * 2 + 100);
      };
      el.value.addEventListener("pointerup", handleClearRipple, false);
      el.value.addEventListener("pointerleave", handleClearRipple, false);
    };
    vue.onMounted(function () {
      var dom = el === null || el === void 0 ? void 0 : el.value;
      if (!dom) return;
      rippleContainer.value = document.createElement("div");
      dom.addEventListener("pointerdown", handleAddRipple, false);
    });
    vue.onUnmounted(function () {
      var _el$value;
      el === null || el === void 0 ? void 0 : (_el$value = el.value) === null || _el$value === void 0 ? void 0 : _el$value.removeEventListener("pointerdown", handleAddRipple, false);
    });
  }

  function useFormDisabled(extend) {
    var ctx = vue.getCurrentInstance();
    var propsDisabled = vue.computed(function () {
      return ctx.props.disabled;
    });
    var _inject = vue.inject("formDisabled", /* @__PURE__ */Object.create(null)),
      disabled = _inject.disabled;
    return vue.computed(function () {
      return propsDisabled.value || (disabled === null || disabled === void 0 ? void 0 : disabled.value) || (extend === null || extend === void 0 ? void 0 : extend.value) || false;
    });
  }

  function handleSlots(instance, name, params) {
    var _instance$slots$camel, _instance$slots, _instance$slots$kebab, _instance$slots2;
    var node = (_instance$slots$camel = (_instance$slots = instance.slots)[camelCase_1(name)]) === null || _instance$slots$camel === void 0 ? void 0 : _instance$slots$camel.call(_instance$slots, params);
    if (node) return node;
    node = (_instance$slots$kebab = (_instance$slots2 = instance.slots)[kebabCase_1(name)]) === null || _instance$slots$kebab === void 0 ? void 0 : _instance$slots$kebab.call(_instance$slots2, params);
    if (node) return node;
    return null;
  }
  function isEmptyNode(node) {
    if ([void 0, null, ""].includes(node)) return true;
    var innerNodes = node instanceof Array ? node : [node];
    var r = innerNodes.filter(function (node2) {
      var _node2$type;
      return (node2 === null || node2 === void 0 ? void 0 : (_node2$type = node2.type) === null || _node2$type === void 0 ? void 0 : _node2$type.toString()) !== "Symbol(Comment)";
    });
    return !r.length;
  }
  var useTNodeJSX = function useTNodeJSX() {
    var instance = vue.getCurrentInstance();
    return function (name, options) {
      var params = getParams(options);
      var defaultNode = getDefaultNode(options);
      var propsNode;
      if (Object.keys(instance.props).includes(name)) {
        propsNode = instance.props[name];
      }
      if (propsNode === false) return;
      if (propsNode === true) {
        return handleSlots(instance, name, params) || defaultNode;
      }
      if (isFunction_1(propsNode)) return propsNode(vue.h, params);
      var isPropsEmpty = [void 0, params, ""].includes(propsNode);
      if (isPropsEmpty && (instance.slots[camelCase_1(name)] || instance.slots[kebabCase_1(name)])) {
        return handleSlots(instance, name, params);
      }
      return propsNode;
    };
  };
  var useTNodeDefault = function useTNodeDefault() {
    var renderTNodeJSX = useTNodeJSX();
    return function (name, options) {
      var defaultNode = getDefaultNode(options);
      return renderTNodeJSX(name, options) || defaultNode;
    };
  };
  var useContent = function useContent() {
    var renderTNodeJSX = useTNodeJSX();
    return function (name1, name2, options) {
      var params = getParams(options);
      var defaultNode = getDefaultNode(options);
      var toParams = params ? {
        params: params
      } : void 0;
      var node1 = renderTNodeJSX(name1, toParams);
      var node2 = renderTNodeJSX(name2, toParams);
      var res = isEmptyNode(node1) ? node2 : node1;
      return isEmptyNode(res) ? defaultNode : res;
    };
  };

  function ownKeys$36(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$35(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$36(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$36(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TButton = vue.defineComponent({
    name: "TButton",
    props: props$1i,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs,
        slots = _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var COMPONENT_NAME = usePrefixClass("button");
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var disabled = useFormDisabled();
      var btnRef = vue.ref();
      useRipple(btnRef);
      var isDisabled = vue.computed(function () {
        return props2.disabled || props2.loading || disabled.value;
      });
      var mergeTheme = vue.computed(function () {
        var theme = props2.theme,
          variant = props2.variant;
        if (theme) return theme;
        if (variant === "base") return "primary";
        return "default";
      });
      var buttonClass = vue.computed(function () {
        var _ref2;
        return ["".concat(COMPONENT_NAME.value), SIZE.value[props2.size], "".concat(COMPONENT_NAME.value, "--variant-").concat(props2.variant), "".concat(COMPONENT_NAME.value, "--theme-").concat(mergeTheme.value), (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.disabled, props2.disabled || disabled.value), _defineProperty$3(_ref2, STATUS.value.loading, props2.loading), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--shape-").concat(props2.shape), props2.shape !== "rectangle"), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--ghost"), props2.ghost), _defineProperty$3(_ref2, SIZE.value.block, props2.block), _ref2)];
      });
      return function () {
        var buttonContent = renderContent("default", "content");
        var icon = props2.loading ? vue.createVNode(Loading, {
          "inheritColor": true
        }, null) : renderTNodeJSX("icon");
        var iconOnly = icon && !buttonContent;
        var suffix = props2.suffix || slots.suffix ? vue.createVNode("span", {
          "className": "".concat(COMPONENT_NAME.value, "__suffix")
        }, [renderTNodeJSX("suffix")]) : null;
        buttonContent = buttonContent ? vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__text")
        }, [buttonContent]) : "";
        if (icon) {
          buttonContent = [icon, buttonContent];
        }
        if (suffix) {
          buttonContent = [buttonContent].concat(suffix);
        }
        var renderTag = function renderTag() {
          if (!props2.tag && props2.href) return "a";
          return props2.tag || "button";
        };
        var buttonAttrs = {
          "class": [].concat(_toConsumableArray(buttonClass.value), [_defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--icon-only"), iconOnly)]),
          type: props2.type,
          disabled: isDisabled.value,
          href: props2.href
        };
        return vue.h(renderTag(), _objectSpread$35(_objectSpread$35(_objectSpread$35({
          ref: btnRef
        }, attrs), buttonAttrs), {}, {
          onClick: props2.onClick
        }), [buttonContent]);
      };
    }
  });

  var Button = withInstall(TButton);

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  function ownKeys$35(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$34(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$35(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$35(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function camel2Kebab(camelString) {
    var covertArr = ["fillOpacity", "fillRule", "clipRule"];
    if (covertArr.includes(camelString)) {
      return camelString.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase();
    }
    return camelString;
  }
  function renderFn(node, props) {
    var kebabAttrs = Object.keys(node.attrs).reduce(function (result, key) {
      result[camel2Kebab(key)] = node.attrs[key];
      return result;
    }, {});
    return vue.h(node.tag, _objectSpread$34(_objectSpread$34({}, kebabAttrs), props), (node.children || []).map(function (child) {
      return renderFn(child, {});
    }));
  }

  var DEFAULT_CLASS_PREFIX = "t";
  var DEFAULT_LOCALE = "zh-CN";
  var ConfigContext = {
    classPrefix: DEFAULT_CLASS_PREFIX,
    locale: DEFAULT_LOCALE
  };

  function useCommonClassName$1() {
    var classPrefix = ConfigContext.classPrefix;
    return {
      SIZE: {
        "default": "",
        xs: "".concat(classPrefix, "-size-xs"),
        small: "".concat(classPrefix, "-size-s"),
        medium: "".concat(classPrefix, "-size-m"),
        large: "".concat(classPrefix, "-size-l"),
        xl: "".concat(classPrefix, "-size-xl"),
        block: "".concat(classPrefix, "-size-full-width")
      },
      STATUS: {
        loading: "".concat(classPrefix, "-is-loading"),
        disabled: "".concat(classPrefix, "-is-disabled"),
        focused: "".concat(classPrefix, "-is-focused"),
        success: "".concat(classPrefix, "-is-success"),
        error: "".concat(classPrefix, "-is-error"),
        warning: "".concat(classPrefix, "-is-warning"),
        selected: "".concat(classPrefix, "-is-selected"),
        active: "".concat(classPrefix, "-is-active"),
        checked: "".concat(classPrefix, "-is-checked"),
        current: "".concat(classPrefix, "-is-current"),
        hidden: "".concat(classPrefix, "-is-hidden"),
        visible: "".concat(classPrefix, "-is-visible"),
        expanded: "".concat(classPrefix, "-is-expanded"),
        indeterminate: "".concat(classPrefix, "-is-indeterminate")
      }
    };
  }

  function useSizeProps(size) {
    var COMMON_SIZE_CLASS_NAMES = useCommonClassName$1().SIZE;
    var className = vue.computed(function () {
      if (size.value in COMMON_SIZE_CLASS_NAMES) {
        return COMMON_SIZE_CLASS_NAMES[size.value];
      }
      return "";
    });
    var style = vue.computed(function () {
      if (size.value === void 0 || size.value in COMMON_SIZE_CLASS_NAMES) {
        return {};
      }
      return {
        fontSize: size.value
      };
    });
    return {
      style: style,
      className: className
    };
  }

  function ownKeys$34(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$33(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$34(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$34(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$H = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 11V8.5H5v-1h2.5V5h1v2.5H11v1H8.5V11h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var addRectangle = vue.defineComponent({
    name: "AddRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-add-rectangle", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$33(_objectSpread$33({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$H, finalProps.value);
      };
    }
  });

  function ownKeys$33(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$32(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$33(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$33(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$G = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.35 8.65v3.85h1.3V8.65h3.85v-1.3H8.65V3.5h-1.3v3.85H3.5v1.3h3.85z",
        "fillOpacity": 0.9
      }
    }]
  };
  var add$1 = vue.defineComponent({
    name: "AddIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-add", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$32(_objectSpread$32({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$G, finalProps.value);
      };
    }
  });

  function ownKeys$32(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$31(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$32(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$32(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$F = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.77 11.98l1.38 1.37.7-.7-9.7-9.7-.7.7 1.2 1.21a7.9 7.9 0 00-2.53 2.91L1 8l.12.23a7.72 7.72 0 009.65 3.75zM10 11.2A6.67 6.67 0 012.11 8c.56-1 1.34-1.83 2.26-2.43l1.08 1.09a2.88 2.88 0 003.9 3.9l.64.64zM6.21 7.42l2.37 2.37a1.88 1.88 0 01-2.37-2.37zM14.88 8.23L15 8l-.12-.23a7.73 7.73 0 00-9.35-3.86l.8.8A6.7 6.7 0 0113.9 8a6.87 6.87 0 01-2.02 2.26l.7.7a7.9 7.9 0 002.3-2.73z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8c0 .37-.07.73-.2 1.06l-.82-.82.02-.24a1.88 1.88 0 00-2.12-1.86l-.82-.82A2.87 2.87 0 0110.88 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var browseOff = vue.defineComponent({
    name: "BrowseOffIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-browse-off", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$31(_objectSpread$31({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$F, finalProps.value);
      };
    }
  });

  function ownKeys$31(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$30(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$31(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$31(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$E = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8a2.88 2.88 0 11-5.76 0 2.88 2.88 0 015.76 0zm-1 0a1.88 1.88 0 10-3.76 0 1.88 1.88 0 003.76 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.12 8.23A7.72 7.72 0 008 12.5c2.9 0 5.54-1.63 6.88-4.27L15 8l-.12-.23A7.73 7.73 0 008 3.5a7.74 7.74 0 00-6.88 4.27L1 8l.12.23zM8 11.5A6.73 6.73 0 012.11 8 6.73 6.73 0 0113.9 8 6.74 6.74 0 018 11.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var browse = vue.defineComponent({
    name: "BrowseIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-browse", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$30(_objectSpread$30({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$E, finalProps.value);
      };
    }
  });

  function ownKeys$30(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2$(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$30(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$30(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$D = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 3H6V1.5H5V3H3a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V4a1 1 0 00-1-1h-2V1.5h-1V3zM5 5h1V4h4v1h1V4h2v2H3V4h2v1zM3 7h10v6H3V7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var calendar = vue.defineComponent({
    name: "CalendarIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-calendar", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2$(_objectSpread$2$({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$D, finalProps.value);
      };
    }
  });

  function ownKeys$2$(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2_(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2$(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2$(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$C = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 5v6l4.5-3L6 5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var caretRightSmall = vue.defineComponent({
    name: "CaretRightSmallIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-caret-right-small", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2_(_objectSpread$2_({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$C, finalProps.value);
      };
    }
  });

  function ownKeys$2_(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2Z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2_(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2_(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$B = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM4.5 8.2l.7-.7L7 9.3l3.8-3.8.7.7L7 10.7 4.5 8.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var checkCircleFilled = vue.defineComponent({
    name: "CheckCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-check-circle-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2Z(_objectSpread$2Z({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$B, finalProps.value);
      };
    }
  });

  function ownKeys$2Z(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2Y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Z(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$A = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.43 9.92l6.23-6.22.92.92-7.15 7.14L1.97 7.3l.92-.92 3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var check = vue.defineComponent({
    name: "CheckIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-check", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2Y(_objectSpread$2Y({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$A, finalProps.value);
      };
    }
  });

  function ownKeys$2Y(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2X(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Y(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.54 6.46l.92-.92L8 9.08l3.54-3.54.92.92L8 10.92 3.54 6.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronDown = vue.defineComponent({
    name: "ChevronDownIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-down", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2X(_objectSpread$2X({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$z, finalProps.value);
      };
    }
  });

  function ownKeys$2X(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2W(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2X(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2X(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.04 4.46l-.92-.92L7.66 8l4.46 4.46.92-.92L9.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.04 4.46l-.92-.92L2.66 8l4.46 4.46.92-.92L4.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronLeftDouble = vue.defineComponent({
    name: "ChevronLeftDoubleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-left-double", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2W(_objectSpread$2W({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$y, finalProps.value);
      };
    }
  });

  function ownKeys$2W(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2V(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2W(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2W(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$x = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.54 3.54l.92.92L6.92 8l3.54 3.54-.92.92L5.08 8l4.46-4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronLeft = vue.defineComponent({
    name: "ChevronLeftIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-left", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2V(_objectSpread$2V({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$x, finalProps.value);
      };
    }
  });

  function ownKeys$2V(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2U(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2V(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2V(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$w = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.2 5.2L9 8l-2.8 2.8.71.7 3.5-3.5-3.5-3.5-.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 118 1a7 7 0 010 14zm0-1A6 6 0 108 2a6 6 0 000 12z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronRightCircle = vue.defineComponent({
    name: "ChevronRightCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-right-circle", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2U(_objectSpread$2U({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$w, finalProps.value);
      };
    }
  });

  function ownKeys$2U(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2T(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2U(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2U(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$v = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.96 11.54l.92.92L8.34 8 3.88 3.54l-.92.92L6.5 8l-3.54 3.54zm5 0l.92.92L13.34 8 8.88 3.54l-.92.92L11.5 8l-3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronRightDouble = vue.defineComponent({
    name: "ChevronRightDoubleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-right-double", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2T(_objectSpread$2T({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$v, finalProps.value);
      };
    }
  });

  function ownKeys$2T(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2S(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2T(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2T(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$u = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.46 12.46l-.92-.92L9.08 8 5.54 4.46l.92-.92L10.92 8l-4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronRight = vue.defineComponent({
    name: "ChevronRightIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-right", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2S(_objectSpread$2S({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$u, finalProps.value);
      };
    }
  });

  function ownKeys$2S(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2R(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2S(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2S(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$t = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.46 9.54l-.92.92L8 6.92l-3.54 3.54-.92-.92L8 5.08l4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronUp = vue.defineComponent({
    name: "ChevronUpIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-up", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2R(_objectSpread$2R({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$t, finalProps.value);
      };
    }
  });

  function ownKeys$2R(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2Q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2R(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2R(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$s = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.67 4.95L8 7.29l2.33-2.34.7.7L8.7 8l2.34 2.35-.71.7L8 8.71l-2.33 2.34-.7-.7L7.3 8 4.96 5.65l.71-.7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var closeCircleFilled = vue.defineComponent({
    name: "CloseCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-close-circle-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2Q(_objectSpread$2Q({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$s, finalProps.value);
      };
    }
  });

  function ownKeys$2Q(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2P(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Q(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$r = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 8.92L11.08 12l.92-.92L8.92 8 12 4.92 11.08 4 8 7.08 4.92 4 4 4.92 7.08 8 4 11.08l.92.92L8 8.92z",
        "fillOpacity": 0.9
      }
    }]
  };
  var close = vue.defineComponent({
    name: "CloseIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-close", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2P(_objectSpread$2P({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$r, finalProps.value);
      };
    }
  });

  function ownKeys$2P(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2O(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2P(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2P(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 12V6h1v6H6zM9 6v6h1V6H9z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.5 3H14v1h-1v10a1 1 0 01-1 1H4a1 1 0 01-1-1V4H2V3h3.5V1.8c0-.44.36-.8.8-.8h3.4c.44 0 .8.36.8.8V3zm-4 0h3V2h-3v1zM4 4v10h8V4H4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var _delete = vue.defineComponent({
    name: "DeleteIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-delete", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2O(_objectSpread$2O({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$q, finalProps.value);
      };
    }
  });

  function ownKeys$2O(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2N(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2O(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2O(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$p = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.26 5.81L8.5 9.58V.5h-1v9.08L3.74 5.8l-.71.71 4.62 4.62c.2.2.5.2.7 0l4.62-4.62-.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 11v2a1 1 0 001 1h10a1 1 0 001-1v-2h-1v2H3v-2H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var download = vue.defineComponent({
    name: "DownloadIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-download", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2N(_objectSpread$2N({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$p, finalProps.value);
      };
    }
  });

  function ownKeys$2N(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2M(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2N(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2N(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$o = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "fill": "currentColor",
        "opacity": 0.9,
        "fillOpacity": 0.9
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "d": "M14.13 4.95L10.9 1.71l.7-.71 3.25 3.24-.7.71zM5.97 13.11l-3.61.72a.3.3 0 01-.35-.35l.72-3.61 7.3-7.3 3.24 3.24-7.3 7.3zm5.89-7.3l-1.83-1.83-6.38 6.38-.46 2.29 2.29-.46 6.38-6.38zM15 11h-4v1h4v-1zM15 13H8.5v1H15v-1z"
        }
      }]
    }]
  };
  var edit1 = vue.defineComponent({
    name: "Edit1Icon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-edit-1", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2M(_objectSpread$2M({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$o, finalProps.value);
      };
    }
  });

  function ownKeys$2M(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2L(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2M(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2M(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$n = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 9a1 1 0 110-2 1 1 0 010 2zM7 8a1 1 0 102 0 1 1 0 00-2 0zM12 8a1 1 0 102 0 1 1 0 00-2 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ellipsis = vue.defineComponent({
    name: "EllipsisIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-ellipsis", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2L(_objectSpread$2L({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$n, finalProps.value);
      };
    }
  });

  function ownKeys$2L(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2K(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2L(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2L(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$m = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM8.5 4v5.5h-1V4h1zm-1.1 7h1.2v1.2H7.4V11z",
        "fillOpacity": 0.9
      }
    }]
  };
  var errorCircleFilled = vue.defineComponent({
    name: "ErrorCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-error-circle-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2K(_objectSpread$2K({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$m, finalProps.value);
      };
    }
  });

  function ownKeys$2K(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2J(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2K(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2K(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$l = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.5 2h-1v9h1V2zm.1 10.8H7.4V14h1.2v-1.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var error = vue.defineComponent({
    name: "ErrorIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-error", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2J(_objectSpread$2J({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$l, finalProps.value);
      };
    }
  });

  function ownKeys$2J(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2I(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2J(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2J(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$k = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 1.92C4 1.34 4.52 1 5 1h4.37a1 1 0 01.71.3L13.71 5a1 1 0 01.29.7v6.38c0 .58-.52.92-1 .92H5c-.48 0-1-.34-1-.92V1.92zM5 2v10h8V6.01H9V2H5zm5 .65V5h2.32L10 2.65z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 5v9.01a1 1 0 001 1h8v-1H3V5H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var fileCopy = vue.defineComponent({
    name: "FileCopyIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-file-copy", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2I(_objectSpread$2I({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$k, finalProps.value);
      };
    }
  });

  function ownKeys$2I(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2H(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2I(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2I(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$j = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v1.79l-4.25 2.5V14h-3.5V7.29L2 4.79V3zm11 0H3v1.21l4.25 2.5V13h1.5V6.71L13 4.21V3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var filter = vue.defineComponent({
    name: "FilterIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-filter", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2H(_objectSpread$2H({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$j, finalProps.value);
      };
    }
  });

  function ownKeys$2H(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2G(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2H(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2H(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$i = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.8 6.63a2.2 2.2 0 014.39 0c0 .97-.75 1.72-1.49 2.02a.34.34 0 00-.2.32v.8h-1v-.8c0-.56.33-1.04.82-1.24.5-.2.87-.66.87-1.1a1.2 1.2 0 00-2.39 0h-1zm1.67 4.54a.53.53 0 111.05 0 .53.53 0 01-1.05 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var helpCircleFilled = vue.defineComponent({
    name: "HelpCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-help-circle-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2G(_objectSpread$2G({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$i, finalProps.value);
      };
    }
  });

  function ownKeys$2G(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2F(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2G(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2G(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$h = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 13V8h1v2.3l3-3 5.7 5.7H13V3H8V2h5a1 1 0 011 1v10a1 1 0 01-1 1H3a1 1 0 01-1-1zm4-4.3l-3 3V13h7.3L6 8.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 6a2 2 0 11-4 0 2 2 0 014 0zm-1 0a1 1 0 10-2 0 1 1 0 002 0zM6.28 5.56l-.7.7-1.42-1.4-1.41 1.4-.71-.7 1.41-1.41-1.41-1.42.7-.7 1.42 1.4 1.41-1.4.71.7-1.41 1.42 1.41 1.4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var imageError = vue.defineComponent({
    name: "ImageErrorIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-image-error", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2F(_objectSpread$2F({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$h, finalProps.value);
      };
    }
  });

  function ownKeys$2F(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2E(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2F(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2F(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$g = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 8a2 2 0 100-4 2 2 0 000 4zm0-1a1 1 0 100-2 1 1 0 000 2z",
        "fillOpacity": 0.9,
        "fillRule": "evenodd",
        "clipRule": "evenodd"
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 13a1 1 0 001 1h10a1 1 0 001-1V3a1 1 0 00-1-1H3a1 1 0 00-1 1v10zm1-1.3l3-3 4.3 4.3H3v-1.3zm0-1.4V3h10v10h-1.3L6 7.3l-3 3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var image = vue.defineComponent({
    name: "ImageIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-image", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2E(_objectSpread$2E({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$g, finalProps.value);
      };
    }
  });

  function ownKeys$2E(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2D(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2E(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2E(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$f = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.4 4h1.2v1.2H7.4V4zm.1 2.5h1V12h-1V6.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var infoCircleFilled = vue.defineComponent({
    name: "InfoCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-info-circle-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2D(_objectSpread$2D({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$f, finalProps.value);
      };
    }
  });

  function ownKeys$2D(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2C(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2D(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2D(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$e = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5 8.5h6v-1H5v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var minusRectangle = vue.defineComponent({
    name: "MinusRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-minus-rectangle", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2C(_objectSpread$2C({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$e, finalProps.value);
      };
    }
  });

  function ownKeys$2C(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2B(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2C(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2C(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$d = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 1h1v14h-1V1zM14.72 12.44a.5.5 0 01-.35.54c-.07.02-.17.02-.38.02h-3.34l-.27-.01a.5.5 0 01-.37-.37l-.01-.27V5c0-.53 0-.8.04-.89a.5.5 0 01.8-.17c.07.07.18.3.4.8l3.34 7.34c.09.19.13.28.14.36zM11 12h2.45L11 6.62V12zM1.63 12.98c.07.02.17.02.38.02h3.34l.27-.01a.5.5 0 00.37-.37l.01-.27V5c0-.53 0-.8-.04-.89a.5.5 0 00-.8-.17c-.07.07-.18.3-.4.8l-3.34 7.34c-.09.19-.13.28-.14.36a.5.5 0 00.35.54zM5 6.62V12H2.55L5 6.62z",
        "fillOpacity": 0.9
      }
    }]
  };
  var mirror = vue.defineComponent({
    name: "MirrorIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-mirror", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2B(_objectSpread$2B({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$d, finalProps.value);
      };
    }
  });

  function ownKeys$2B(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2A(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2B(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2B(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$c = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.4 4.46l-.91-.92L7.03 8l4.46 4.46.92-.92L8.86 8l3.55-3.54zM4.8 4v8h1.3V4H4.8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var pageFirst = vue.defineComponent({
    name: "PageFirstIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-page-first", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2A(_objectSpread$2A({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$c, finalProps.value);
      };
    }
  });

  function ownKeys$2A(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2A(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2A(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$b = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.6 11.54l.91.92L8.97 8 4.51 3.54l-.92.92L7.14 8l-3.55 3.54zm7.6.46V4H9.9v8h1.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var pageLast = vue.defineComponent({
    name: "PageLastIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-page-last", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2z(_objectSpread$2z({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$b, finalProps.value);
      };
    }
  });

  function ownKeys$2z(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2z(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$a = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 7.35h9v1.3h-9v-1.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var remove = vue.defineComponent({
    name: "RemoveIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-remove", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2y(_objectSpread$2y({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$a, finalProps.value);
      };
    }
  });

  function ownKeys$2y(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2x(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2y(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$9 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 2h1v6.08A6 6 0 017.92 13H14v1H3a1 1 0 01-1-1V2zm4.9 11A5 5 0 003 9.1V13h3.9z",
        "fillOpacity": 0.9
      }
    }]
  };
  var rotation = vue.defineComponent({
    name: "RotationIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-rotation", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2x(_objectSpread$2x({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$9, finalProps.value);
      };
    }
  });

  function ownKeys$2x(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2w(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2x(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2x(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$8 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 11.5a3.5 3.5 0 110-7 3.5 3.5 0 010 7zM8 13A5 5 0 108 3a5 5 0 000 10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var round$1 = vue.defineComponent({
    name: "RoundIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-round", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2w(_objectSpread$2w({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$8, finalProps.value);
      };
    }
  });

  function ownKeys$2w(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2v(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2w(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2w(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$7 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.71-3.54-3.53zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var search = vue.defineComponent({
    name: "SearchIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-search", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2v(_objectSpread$2v({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$7, finalProps.value);
      };
    }
  });

  function ownKeys$2v(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2u(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2v(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2v(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$6 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11 8a3 3 0 11-6 0 3 3 0 016 0zm-1 0a2 2 0 10-4 0 2 2 0 004 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1.25l6.06 3.38v6.75L8 14.75l-6.06-3.38V4.63L8 1.25zM2.94 5.21v5.58L8 13.6l5.06-2.82V5.2L8 2.4 2.94 5.21z",
        "fillOpacity": 0.9
      }
    }]
  };
  var setting = vue.defineComponent({
    name: "SettingIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-setting", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2u(_objectSpread$2u({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$6, finalProps.value);
      };
    }
  });

  function ownKeys$2u(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2t(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2u(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2u(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$5 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.6 1.82a.45.45 0 01.8 0l1.8 3.65 4.03.58c.37.05.52.5.25.77l-2.91 2.84.69 4a.45.45 0 01-.66.48L8 12.25l-3.6 1.9a.45.45 0 01-.65-.48l.68-4.01-2.9-2.84a.45.45 0 01.24-.77l4.03-.58 1.8-3.65z",
        "fillOpacity": 0.9
      }
    }]
  };
  var starFilled = vue.defineComponent({
    name: "StarFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-star-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2t(_objectSpread$2t({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$5, finalProps.value);
      };
    }
  });

  function ownKeys$2t(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2s(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2t(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2t(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$4 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.5 5h1v2.97l2.85 2.86-.7.7L7.5 8.4V5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var timeFilled = vue.defineComponent({
    name: "TimeFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-time-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2s(_objectSpread$2s({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$4, finalProps.value);
      };
    }
  });

  function ownKeys$2s(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2r(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2s(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2s(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$3 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 4v4.39L10 11l.7-.7-2.2-2.33V4h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zm-1 0A6 6 0 102 8a6 6 0 0012 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var time = vue.defineComponent({
    name: "TimeIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-time", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2r(_objectSpread$2r({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$3, finalProps.value);
      };
    }
  });

  function ownKeys$2r(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2r(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2r(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$2 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.74 6.68L7.5 2.9v8.59h1V2.91l3.76 3.77.71-.7-4.62-4.63a.5.5 0 00-.7 0L3.03 5.97l.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 11v2a1 1 0 001 1h10a1 1 0 001-1v-2h-1v2H3v-2H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var upload$1 = vue.defineComponent({
    name: "UploadIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-upload", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2q(_objectSpread$2q({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$2, finalProps.value);
      };
    }
  });

  function ownKeys$2q(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2p(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2q(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$1 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 7v2h1V7h2V6H7V4H6v2H4v1h2z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.7-3.54-3.52zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var zoomIn = vue.defineComponent({
    name: "ZoomInIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-zoom-in", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2p(_objectSpread$2p({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$1, finalProps.value);
      };
    }
  });

  function ownKeys$2p(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2o(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2p(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2p(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9 7H4V6h5v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.7-3.54-3.52zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var zoomOut = vue.defineComponent({
    name: "ZoomOutIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-zoom-out", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2o(_objectSpread$2o({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element, finalProps.value);
      };
    }
  });

  var isServer = typeof window === "undefined";
  function checkScriptAndLoad(url, className) {
    if (isServer) {
      return;
    }
    if (!document || !url || typeof url !== "string") return;
    if (document.querySelectorAll(".".concat(className, "[src=\"").concat(url, "\"]")).length > 0) {
      return;
    }
    var svg = document.createElement("script");
    svg.setAttribute("class", className);
    svg.setAttribute("src", url);
    document.body.appendChild(svg);
  }

  var props$1h = {
    name: {
      type: String,
      "default": ""
    },
    size: {
      type: String,
      "default": void 0
    },
    url: {
      type: [String, Array],
      "default": void 0
    },
    loadDefaultIcons: {
      type: Boolean,
      "default": true
    },
    onClick: Function
  };

  function ownKeys$2o(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2n(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2o(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2o(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var classPrefix = ConfigContext.classPrefix;
  var CDN_ICONFONT_URL = "https://tdesign.gtimg.com/icon/0.1.2/fonts/index.js";
  var _Icon = vue.defineComponent({
    name: "Icon",
    props: props$1h,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props2.size;
      });
      var name = vue.computed(function () {
        return props2.name || "";
      });
      var _useSizeProps = useSizeProps(propsSize),
        sizeClassName = _useSizeProps.className,
        sizeStyle = _useSizeProps.style;
      var finalUrl = vue.computed(function () {
        var url = [];
        url = props2.url instanceof Array ? props2.url.concat() : [props2.url];
        if (props2.loadDefaultIcons) url.push(CDN_ICONFONT_URL);
        return url;
      });
      var classNames = vue.computed(function () {
        return ["".concat(classPrefix, "-icon"), "".concat(classPrefix, "-icon-").concat(name.value), sizeClassName.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2n(_objectSpread$2n({}, sizeStyle.value), attrs.style);
      });
      vue.onMounted(function () {
        Array.from(new Set(finalUrl.value)).forEach(function (url) {
          checkScriptAndLoad(url, "".concat(classPrefix, "-svg-js-stylesheet--unique-class"));
        });
      });
      var finalProps = vue.computed(function () {
        return {
          "class": classNames.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props2$onClick;
            return (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
              e: e
            });
          }
        };
      });
      return function () {
        return vue.h("svg", finalProps.value, vue.h("use", {
          href: props2.url ? "#".concat(name.value) : "#t-icon-".concat(name.value)
        }));
      };
    }
  });

  var Icon$1 = _Icon;

  var Icon = withInstall(Icon$1, "TIcon");

  var props$1g = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    hover: {
      type: String,
      "default": "underline",
      validator: function validator(val) {
        if (!val) return true;
        return ["color", "underline"].includes(val);
      }
    },
    href: {
      type: String,
      "default": ""
    },
    prefixIcon: {
      type: Function
    },
    size: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    suffixIcon: {
      type: Function
    },
    target: {
      type: String,
      "default": ""
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "primary", "danger", "warning", "success"].includes(val);
      }
    },
    underline: Boolean,
    onClick: Function
  };

  function ownKeys$2n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2n(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Link = vue.defineComponent({
    name: "TLink",
    props: _objectSpread$2m({}, props$1g),
    emits: ["click"],
    setup: function setup(props2, _ref) {
      var emit = _ref.emit;
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("link");
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;
      var linkClass = vue.computed(function () {
        var _ref2;
        return ["".concat(COMPONENT_NAME.value), SIZE.value[props2.size], "".concat(COMPONENT_NAME.value, "--theme-").concat(props2.theme), (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.disabled, props2.disabled), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-underline"), props2.underline), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--hover-").concat(props2.hover), !props2.disabled), _ref2)];
      });
      var handleClick = function handleClick(event) {
        if (!props2.disabled) emit("click", event);
      };
      return function () {
        var linkContent = renderContent("default", "content");
        var prefix = renderTNodeJSX("prefixIcon");
        var suffix = renderTNodeJSX("suffixIcon");
        return vue.createVNode("a", {
          "class": _toConsumableArray(linkClass.value),
          "href": props2.disabled || !props2.href ? void 0 : props2.href,
          "target": props2.target,
          "onClick": handleClick
        }, [prefix ? vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__prefix-icon")
        }, [prefix]) : null, linkContent, suffix ? vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__suffix-icon")
        }, [suffix]) : null]);
      };
    }
  });

  var Link = withInstall(_Link);

  var props$1f = {
    align: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        if (!val) return true;
        return ["start", "end", "center", "stretch", "baseline", "top", "middle", "bottom"].includes(val);
      }
    },
    gutter: {
      type: [Number, Object, Array],
      "default": 0
    },
    justify: {
      type: String,
      "default": "start",
      validator: function validator(val) {
        if (!val) return true;
        return ["start", "end", "center", "space-around", "space-between"].includes(val);
      }
    },
    tag: {
      type: String,
      "default": "div"
    }
  };

  var calcSize = function calcSize(width) {
    var size = "xs";
    if (width < 768) {
      size = "xs";
    } else if (width >= 768 && width < 992) {
      size = "sm";
    } else if (width >= 992 && width < 1200) {
      size = "md";
    } else if (width >= 1200 && width < 1400) {
      size = "lg";
    } else if (width >= 1400 && width < 1880) {
      size = "xl";
    } else {
      size = "xxl";
    }
    return size;
  };

  function useListener(type, listener) {
    vue.onMounted(function () {
      window.addEventListener(type, listener);
    });
    vue.onBeforeUnmount(function () {
      window.removeEventListener(type, listener);
    });
  }
  function useResize(listener, observer) {
    useListener("resize", listener);
    var resizeObserver = null;
    vue.onMounted(function () {
      if (!window.ResizeObserver || !observer) return;
      resizeObserver = new window.ResizeObserver(listener);
      resizeObserver.observe(observer);
    });
    vue.onBeforeUnmount(function () {
      var _resizeObserver;
      (_resizeObserver = resizeObserver) === null || _resizeObserver === void 0 ? void 0 : _resizeObserver.disconnect();
    });
  }

  function ownKeys$2m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2m(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useRowSize() {
    var size = vue.ref(calcSize(isServer$1 ? 0 : window.innerWidth));
    var updateSize = function updateSize() {
      size.value = calcSize(isServer$1 ? 0 : window.innerWidth);
    };
    useListener("resize", updateSize);
    return size;
  }
  function getRowClasses(name, props) {
    var _ref;
    var justify = props.justify,
      align = props.align;
    return [name, (_ref = {}, _defineProperty$3(_ref, "".concat(name, "--").concat(justify), justify), _defineProperty$3(_ref, "".concat(name, "--align-").concat(align), align), _ref)];
  }
  function calcRowStyle(gutter, currentSize) {
    var rowStyle = {};
    var getMarginStyle = function getMarginStyle(gutter2) {
      return Object.assign(rowStyle, {
        marginLeft: "".concat(gutter2 / -2, "px"),
        marginRight: "".concat(gutter2 / -2, "px")
      });
    };
    var getRowGapStyle = function getRowGapStyle(gutter2) {
      return Object.assign(rowStyle, {
        rowGap: "".concat(gutter2, "px")
      });
    };
    var strategyMap = {
      isNumber: function isNumber(gutter2) {
        if (typeof gutter2 === "number") {
          getMarginStyle(gutter2);
        }
      },
      isArray: function isArray(gutter2) {
        if (Array.isArray(gutter2) && gutter2.length) {
          strategyMap.isNumber(gutter2[0]);
          if (typeof gutter2[1] === "number") {
            getRowGapStyle(gutter2[1]);
          }
          if (isObject_1(gutter2[0]) && gutter2[0][currentSize] !== void 0) {
            getMarginStyle(gutter2[0][currentSize]);
          }
          if (isObject_1(gutter2[1]) && gutter2[1][currentSize] !== void 0) {
            getRowGapStyle(gutter2[1][currentSize]);
          }
        }
      },
      isObject: function isObject(gutter2) {
        if (isObject_1(gutter2) && gutter2[currentSize]) {
          if (Array.isArray(gutter2) && gutter2.length) {
            getMarginStyle(gutter2[currentSize][0]);
            getRowGapStyle(gutter2[currentSize][1]);
          } else {
            getMarginStyle(gutter2[currentSize]);
          }
        }
      }
    };
    Object.keys(strategyMap).forEach(function (item) {
      strategyMap[item](gutter);
    });
    return rowStyle;
  }
  function parseFlex(flex) {
    if (typeof flex === "number") {
      return "".concat(flex, " ").concat(flex, " 0");
    }
    if (/^\d+(\.\d+)?(px|r?em|%)$/.test(flex)) {
      return "0 0 ".concat(flex);
    }
    return flex;
  }
  function calcColPadding(gutter, currentSize) {
    var paddingObj = {};
    var getPaddingStyle = function getPaddingStyle(gutter2) {
      return Object.assign(paddingObj, {
        paddingLeft: "".concat(gutter2 / 2, "px"),
        paddingRight: "".concat(gutter2 / 2, "px")
      });
    };
    var strategyMap = {
      isNumber: function isNumber(gutter2) {
        if (typeof gutter2 === "number") {
          getPaddingStyle(gutter2);
        }
      },
      isArray: function isArray(gutter2) {
        if (Array.isArray(gutter2) && gutter2.length) {
          if (typeof gutter2[0] === "number") {
            getPaddingStyle(gutter2[0]);
          }
          if (isObject_1(gutter2[0]) && gutter2[0][currentSize]) {
            getPaddingStyle(gutter2[0][currentSize]);
          }
        }
      },
      isObject: function isObject(gutter2) {
        if (isObject_1(gutter2) && gutter2[currentSize]) {
          getPaddingStyle(gutter2[currentSize]);
        }
      }
    };
    Object.keys(strategyMap).forEach(function (item) {
      strategyMap[item](gutter);
    });
    return paddingObj;
  }
  function getColClasses(name, props) {
    var _objectSpread3;
    var span = props.span,
      order = props.order,
      offset = props.offset,
      push = props.push,
      pull = props.pull;
    var allSizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
    var ColSizeClasses = allSizes.reduce(function (acc, currSize) {
      var _objectSpread2;
      var sizeProp = props[currSize];
      var sizeObject = {};
      if (typeof sizeProp === "number") {
        sizeObject.span = sizeProp;
      } else if (isObject_1(sizeProp)) {
        sizeObject = sizeProp || {};
      }
      return _objectSpread$2l(_objectSpread$2l({}, acc), {}, (_objectSpread2 = {}, _defineProperty$3(_objectSpread2, "".concat(name, "-").concat(currSize, "-").concat(sizeObject.span), sizeObject.span !== void 0), _defineProperty$3(_objectSpread2, "".concat(name, "-").concat(currSize, "-order-").concat(sizeObject.order), parseInt(sizeObject.order, 10) >= 0), _defineProperty$3(_objectSpread2, "".concat(name, "-").concat(currSize, "-offset-").concat(sizeObject.offset), parseInt(sizeObject.offset, 10) >= 0), _defineProperty$3(_objectSpread2, "".concat(name, "-").concat(currSize, "-push-").concat(sizeObject.push), parseInt(sizeObject.push, 10) >= 0), _defineProperty$3(_objectSpread2, "".concat(name, "-").concat(currSize, "-pull-").concat(sizeObject.pull), parseInt(sizeObject.pull, 10) >= 0), _objectSpread2));
    }, {});
    return _objectSpread$2l((_objectSpread3 = {}, _defineProperty$3(_objectSpread3, "".concat(name), true), _defineProperty$3(_objectSpread3, "".concat(name, "-").concat(span), span !== void 0), _defineProperty$3(_objectSpread3, "".concat(name, "-order-").concat(order), order), _defineProperty$3(_objectSpread3, "".concat(name, "-offset-").concat(offset), offset), _defineProperty$3(_objectSpread3, "".concat(name, "-push-").concat(push), push), _defineProperty$3(_objectSpread3, "".concat(name, "-pull-").concat(pull), pull), _objectSpread3), ColSizeClasses);
  }

  function ownKeys$2l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2l(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$x(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _Row = vue.defineComponent({
    name: "TRow",
    props: _objectSpread$2k({}, props$1f),
    setup: function setup(props2) {
      var _toRefs = vue.toRefs(props2),
        gutter = _toRefs.gutter;
      var renderTNodeJSX = useTNodeJSX();
      vue.provide("rowContext", vue.reactive({
        gutter: gutter
      }));
      var size = useRowSize();
      var COMPONENT_NAME = usePrefixClass("row");
      var rowClasses = vue.computed(function () {
        return getRowClasses(COMPONENT_NAME.value, props2);
      });
      var rowStyle = vue.computed(function () {
        return calcRowStyle(props2.gutter, size.value);
      });
      return function () {
        var _slot;
        var TAG = props2.tag;
        return vue.createVNode(TAG, {
          "class": rowClasses.value,
          "style": rowStyle.value
        }, _isSlot$x(_slot = renderTNodeJSX("default")) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      };
    }
  });

  var props$1e = {
    flex: {
      type: [String, Number]
    },
    lg: {
      type: [Number, Object]
    },
    md: {
      type: [Number, Object]
    },
    offset: {
      type: Number,
      "default": 0
    },
    order: {
      type: Number,
      "default": 0
    },
    pull: {
      type: Number,
      "default": 0
    },
    push: {
      type: Number,
      "default": 0
    },
    sm: {
      type: [Number, Object]
    },
    span: {
      type: Number,
      "default": 12
    },
    tag: {
      type: String,
      "default": "div"
    },
    xl: {
      type: [Number, Object]
    },
    xs: {
      type: [Number, Object]
    },
    xxl: {
      type: [Number, Object]
    }
  };

  function ownKeys$2k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2k(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$w(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _Col = vue.defineComponent({
    name: "TCol",
    inject: ["rowContext"],
    props: _objectSpread$2j({}, props$1e),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("col");
      var renderTNodeJSX = useTNodeJSX();
      var rowContext = vue.inject("rowContext", /* @__PURE__ */Object.create(null));
      var size = useRowSize();
      var colClasses = vue.computed(function () {
        return getColClasses(COMPONENT_NAME.value, props2);
      });
      var colStyle = vue.computed(function () {
        var colStyle2 = {};
        var flex = props2.flex;
        flex && (colStyle2.flex = parseFlex(flex));
        if (rowContext) {
          var rowGutter = rowContext.gutter;
          Object.assign(colStyle2, calcColPadding(rowGutter, size.value));
        }
        return colStyle2;
      });
      return function () {
        var _slot;
        var TAG = props2.tag;
        return vue.createVNode(TAG, {
          "class": colClasses.value,
          "style": colStyle.value
        }, _isSlot$w(_slot = renderTNodeJSX("default")) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      };
    }
  });

  var Row = withInstall(_Row);
  var Col = withInstall(_Col);

  var _Layout = vue.defineComponent({
    name: "TLayout",
    setup: function setup() {
      var hasSide = vue.ref(false);
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("layout");
      var classes = vue.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--with-sider"), hasSide.value)];
      });
      vue.provide("layout", {
        hasSide: hasSide
      });
      return function () {
        return vue.createVNode("section", {
          "class": classes.value
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var props$1d = {
    height: {
      type: String,
      "default": ""
    }
  };

  var _Header = vue.defineComponent({
    name: "THeader",
    props: props$1d,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("layout__header");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        return vue.createVNode("header", {
          "class": COMPONENT_NAME.value,
          "style": props2.height ? {
            height: props2.height
          } : {}
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var props$1c = {
    height: {
      type: String,
      "default": ""
    }
  };

  var _Footer = vue.defineComponent({
    name: "TFooter",
    props: props$1c,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("layout__footer");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        return vue.createVNode("footer", {
          "class": COMPONENT_NAME.value,
          "style": props2.height ? {
            height: props2.height
          } : {}
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var props$1b = {
    width: {
      type: String,
      "default": ""
    }
  };

  var _Aside = vue.defineComponent({
    name: "TAside",
    props: props$1b,
    setup: function setup(props2) {
      var _inject = vue.inject("layout", /* @__PURE__ */Object.create(null)),
        hasSide = _inject.hasSide;
      var COMPONENT_NAME = usePrefixClass("layout__sider");
      var renderTNodeJSX = useTNodeJSX();
      if (!hasSide) return;
      vue.onMounted(function () {
        hasSide.value = true;
      });
      vue.onUnmounted(function () {
        hasSide.value = false;
      });
      return function () {
        var styles = props2.width ? {
          width: props2.width
        } : {};
        return vue.createVNode("aside", {
          "class": COMPONENT_NAME.value,
          "style": styles
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var _Content = vue.defineComponent({
    name: "TContent",
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("layout__content");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        return vue.createVNode("main", {
          "class": COMPONENT_NAME.value
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var Aside = withInstall(_Aside);
  var Layout = withInstall(_Layout);
  var Header = withInstall(_Header);
  var Footer = withInstall(_Footer);
  var Content$1 = withInstall(_Content);

  var props$1a = {
    align: {
      type: String,
      "default": "center",
      validator: function validator(val) {
        return ["left", "right", "center"].includes(val);
      }
    },
    content: {
      type: [String, Function]
    },
    dashed: Boolean,
    "default": {
      type: [String, Function]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    }
  };

  function ownKeys$2j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2j(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Divider = vue.defineComponent({
    name: "TDivider",
    props: _objectSpread$2i({}, props$1a),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("divider");
      var renderContent = useContent();
      return function () {
        var _ref;
        var layout = props2.layout,
          dashed = props2.dashed,
          align = props2.align;
        var children = renderContent("default", "content");
        var dividerClassNames = ["".concat(COMPONENT_NAME.value), ["".concat(COMPONENT_NAME.value, "--").concat(layout)], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--dashed"), !!dashed), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--with-text"), !!children), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--with-text-").concat(align), !!children), _ref)];
        return vue.createVNode("div", {
          "class": dividerClassNames
        }, [children && vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__inner-text")
        }, [children])]);
      };
    }
  });

  var Divider = withInstall(_Divider);

  var props$19 = {
    align: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["start", "end", "center", "baseline"].includes(val);
      }
    },
    breakLine: Boolean,
    direction: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["vertical", "horizontal"].includes(val);
      }
    },
    separator: {
      type: [String, Function]
    },
    size: {
      type: [String, Number],
      "default": "medium"
    }
  };

  function useChildComponentSlots() {
    var instance = vue.getCurrentInstance();
    return function (childComponentName, slots) {
      var _slots, _slots$default;
      if (!slots) {
        slots = instance.slots;
      }
      var content = ((_slots = slots) === null || _slots === void 0 ? void 0 : (_slots$default = _slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(_slots)) || [];
      var childList = [];
      var getChildren = function getChildren(content2) {
        if (!Array.isArray(content2)) return;
        content2.forEach(function (item) {
          if (item.children && Array.isArray(item.children)) {
            if (item.type !== vue.Fragment) return;
            getChildren(item.children);
          } else {
            childList.push(item);
          }
        });
        return childList;
      };
      return getChildren(content).filter(function (item) {
        var _item$type$name;
        return (_item$type$name = item.type.name) === null || _item$type$name === void 0 ? void 0 : _item$type$name.endsWith(childComponentName);
      });
    };
  }
  function useChildSlots() {
    var instance = vue.getCurrentInstance();
    return function () {
      var _slots$default2;
      var slots = instance.slots;
      var content = (slots === null || slots === void 0 ? void 0 : (_slots$default2 = slots["default"]) === null || _slots$default2 === void 0 ? void 0 : _slots$default2.call(slots)) || [];
      return content.filter(function (item) {
        return item.type !== vue.Comment;
      }).map(function (item) {
        if (item.children && Array.isArray(item.children) && item.type === vue.Fragment) return item.children;
        return item;
      }).flat();
    };
  }

  function ownKeys$2i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2i(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Space = vue.defineComponent({
    name: "TSpace",
    props: _objectSpread$2h({}, props$19),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("space");
      var renderTNodeJSX = useTNodeJSX();
      var getChildSlots = useChildSlots();
      var renderStyle = vue.computed(function () {
        var sizeMap = {
          small: "8px",
          medium: "16px",
          large: "24px"
        };
        var renderGap = "";
        if (Array.isArray(props2.size)) {
          renderGap = props2.size.map(function (s) {
            if (typeof s === "number") return "".concat(s, "px");
            if (typeof s === "string") return sizeMap[s] || s;
            return s;
          }).join(" ");
        } else if (typeof props2.size === "string") {
          renderGap = sizeMap[props2.size] || props2.size;
        } else if (typeof props2.size === "number") {
          renderGap = "".concat(props2.size, "px");
        }
        return _objectSpread$2h({
          gap: renderGap
        }, props2.breakLine ? {
          "flex-wrap": "wrap"
        } : {});
      });
      function renderChildren() {
        var children = getChildSlots();
        var separatorContent = renderTNodeJSX("separator");
        return children.map(function (child, index) {
          var showSeparator = index + 1 !== children.length && separatorContent;
          return vue.createVNode(vue.Fragment, null, [vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "-item")
          }, [child]), showSeparator && vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "-item-separator")
          }, [separatorContent])]);
        });
      }
      return function () {
        var _ref;
        var spaceClassNames = ["".concat(COMPONENT_NAME.value), (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "-align-").concat(props2.align), props2.align), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "-").concat(props2.direction), props2.direction), _ref)];
        return vue.createVNode("div", {
          "class": spaceClassNames,
          "style": renderStyle.value
        }, [renderChildren()]);
      };
    }
  });

  var Space = withInstall(_Space);

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }

  var regeneratorRuntime$1 = {exports: {}};

  var _typeof$1 = {exports: {}};

  (function (module) {
    function _typeof(obj) {
      "@babel/helpers - typeof";

      return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(_typeof$1);

  (function (module) {
    var _typeof = _typeof$1.exports["default"];
    function _regeneratorRuntime() {

      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
      module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var exports = {},
        Op = Object.prototype,
        hasOwn = Op.hasOwnProperty,
        defineProperty = Object.defineProperty || function (obj, key, desc) {
          obj[key] = desc.value;
        },
        $Symbol = "function" == typeof Symbol ? Symbol : {},
        iteratorSymbol = $Symbol.iterator || "@@iterator",
        asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
        toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }
      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }
      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
          generator = Object.create(protoGenerator.prototype),
          context = new Context(tryLocsList || []);
        return defineProperty(generator, "_invoke", {
          value: makeInvokeMethod(innerFn, self, context)
        }), generator;
      }
      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }
      exports.wrap = wrap;
      var ContinueSentinel = {};
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}
      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
        NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }
      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if ("throw" !== record.type) {
            var result = record.arg,
              value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }
          reject(record.arg);
        }
        var previousPromise;
        defineProperty(this, "_invoke", {
          value: function value(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function (resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(innerFn, self, context) {
        var state = "suspendedStart";
        return function (method, arg) {
          if ("executing" === state) throw new Error("Generator is already running");
          if ("completed" === state) {
            if ("throw" === method) throw arg;
            return doneResult();
          }
          for (context.method = method, context.arg = arg;;) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }
            if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
              if ("suspendedStart" === state) throw state = "completed", context.arg;
              context.dispatchException(context.arg);
            } else "return" === context.method && context.abrupt("return", context.arg);
            state = "executing";
            var record = tryCatch(innerFn, self, context);
            if ("normal" === record.type) {
              if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
              return {
                value: record.arg,
                done: context.done
              };
            }
            "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
          }
        };
      }
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }
          return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }
      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;
          if (!isNaN(iterable.length)) {
            var i = -1,
              next = function next() {
                for (; ++i < iterable.length;) {
                  if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
                }
                return next.value = undefined, next.done = !0, next;
              };
            return next.next = next;
          }
        }
        return {
          next: doneResult
        };
      }
      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: !0
      }), defineProperty(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: !0
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (val) {
        var object = Object(val),
          keys = [];
        for (var key in object) {
          keys.push(key);
        }
        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }
          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;
          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
              record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                hasFinally = hasOwn.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }
    module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regeneratorRuntime$1);

  // TODO(Babel 8): Remove this file.

  var runtime = regeneratorRuntime$1.exports();
  var regenerator = runtime;

  // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if ((typeof globalThis === "undefined" ? "undefined" : _typeof$2(globalThis)) === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }

  var props$18 = {
    container: {
      type: [String, Function],
      "default": function _default() {
        return function () {
          return window;
        };
      }
    },
    offsetBottom: {
      type: Number,
      "default": 0
    },
    offsetTop: {
      type: Number,
      "default": 0
    },
    zIndex: {
      type: Number
    },
    onFixedChange: Function
  };

  var _Affix = vue.defineComponent({
    name: "TAffix",
    props: props$18,
    emits: ["fixedChange"],
    setup: function setup(props2, context) {
      var COMPONENT_NAME = usePrefixClass("affix");
      var renderTNodeJSX = useTNodeJSX();
      var affixWrapRef = vue.ref(null);
      var affixRef = vue.ref(null);
      var placeholderEL = vue.ref(document.createElement("div"));
      var ticking = vue.ref(false);
      var binded = vue.ref(false);
      var scrollContainer = vue.ref();
      var handleScroll = function handleScroll() {
        if (!ticking.value) {
          window.requestAnimationFrame(function () {
            var _affixWrapRef$value$g;
            var _ref = (_affixWrapRef$value$g = affixWrapRef.value.getBoundingClientRect()) !== null && _affixWrapRef$value$g !== void 0 ? _affixWrapRef$value$g : {
                top: 0,
                width: 0,
                height: 0
              },
              wrapToTop = _ref.top,
              wrapWidth = _ref.width,
              wrapHeight = _ref.height;
            var containerTop = 0;
            if (scrollContainer.value instanceof HTMLElement) {
              containerTop = scrollContainer.value.getBoundingClientRect().top;
            }
            var fixedTop;
            var calcTop = wrapToTop - containerTop;
            var containerHeight = scrollContainer.value[scrollContainer.value instanceof Window ? "innerHeight" : "clientHeight"] - wrapHeight;
            var calcBottom = containerTop + containerHeight - props2.offsetBottom;
            if (props2.offsetTop !== void 0 && calcTop <= props2.offsetTop) {
              fixedTop = containerTop + props2.offsetTop;
            } else if (props2.offsetBottom !== void 0 && wrapToTop >= calcBottom) {
              fixedTop = calcBottom;
            } else {
              fixedTop = false;
            }
            if (affixRef.value) {
              var affixed = fixedTop !== false;
              var placeholderStatus = affixWrapRef.value.contains(placeholderEL.value);
              if (affixed) {
                affixRef.value.className = COMPONENT_NAME.value;
                affixRef.value.style.top = "".concat(fixedTop, "px");
                affixRef.value.style.width = "".concat(wrapWidth, "px");
                affixRef.value.style.height = "".concat(wrapHeight, "px");
                if (props2.zIndex) {
                  affixRef.value.style.zIndex = "".concat(props2.zIndex);
                }
                if (!placeholderStatus) {
                  placeholderEL.value.style.width = "".concat(wrapWidth, "px");
                  placeholderEL.value.style.height = "".concat(wrapHeight, "px");
                  affixWrapRef.value.appendChild(placeholderEL.value);
                }
              } else {
                affixRef.value.removeAttribute("class");
                affixRef.value.removeAttribute("style");
                placeholderStatus && placeholderEL.value.remove();
              }
              context.emit("fixedChange", affixed, {
                top: Number(fixedTop)
              });
              if (isFunction_1(props2.onFixedChange)) props2.onFixedChange(affixed, {
                top: Number(fixedTop)
              });
            }
            ticking.value = false;
          });
          ticking.value = true;
        }
      };
      var bindScroll = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return vue.nextTick();
                case 2:
                  if (!binded.value) {
                    _context.next = 4;
                    break;
                  }
                  return _context.abrupt("return");
                case 4:
                  scrollContainer.value = getScrollContainer(props2.container);
                  on$1(scrollContainer.value, "scroll", handleScroll);
                  on$1(window, "resize", handleScroll);
                  binded.value = true;
                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return function bindScroll() {
          return _ref2.apply(this, arguments);
        };
      }();
      var unbindScroll = function unbindScroll() {
        if (!scrollContainer.value || !binded.value) return;
        off$1(scrollContainer.value, "scroll", handleScroll);
        off$1(window, "resize", handleScroll);
        binded.value = false;
      };
      vue.watch(function () {
        return props2.offsetTop;
      }, function () {
        handleScroll();
      });
      vue.watch(function () {
        return props2.offsetBottom;
      }, function () {
        handleScroll();
      });
      vue.watch(function () {
        return props2.zIndex;
      }, function () {
        handleScroll();
      });
      vue.onMounted(bindScroll);
      vue.onActivated(bindScroll);
      vue.onDeactivated(unbindScroll);
      vue.onBeforeUnmount(unbindScroll);
      return {
        affixWrapRef: affixWrapRef,
        affixRef: affixRef,
        bindScroll: bindScroll,
        unbindScroll: unbindScroll,
        handleScroll: handleScroll,
        scrollContainer: scrollContainer,
        renderTNodeJSX: renderTNodeJSX
      };
    },
    render: function render() {
      return vue.createVNode("div", {
        "ref": "affixWrapRef"
      }, [vue.createVNode("div", {
        "ref": "affixRef"
      }, [this.renderTNodeJSX("default")])]);
    }
  });

  var Affix = withInstall(_Affix);

  var ANCHOR_SHARP_REGEXP = /#(\S+)$/;
  function getOffsetTop(target, container) {
    var _target$getBoundingCl = target.getBoundingClientRect(),
      top = _target$getBoundingCl.top;
    if (container === window) {
      return top - document.documentElement.clientTop;
    }
    return top - container.getBoundingClientRect().top;
  }

  var props$17 = {
    affixProps: {
      type: Object
    },
    bounds: {
      type: Number,
      "default": 5
    },
    container: {
      type: [String, Function],
      "default": function _default() {
        return function () {
          return window;
        };
      }
    },
    cursor: {
      type: Function
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    targetOffset: {
      type: Number,
      "default": 0
    },
    onChange: Function,
    onClick: Function
  };

  var AnchorInjectionKey = Symbol("AnchorInjectionProvide");

  function _isSlot$v(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _Anchor = vue.defineComponent({
    name: "TAnchor",
    props: props$17,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var anchorRef = vue.ref(null);
      var links = vue.ref([]);
      var active = vue.ref("");
      var scrollContainer = vue.ref(null);
      var handleScrollLock = vue.ref(false);
      var activeLineStyle = vue.reactive({});
      var COMPONENT_NAME = usePrefixClass("anchor");
      var ANCHOR_LINE_CLASSNAME = usePrefixClass("anchor__line");
      var ANCHOR_LINE_CURSOR_CLASSNAME = usePrefixClass("anchor__line-cursor");
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var renderTNodeJSX = useTNodeJSX();
      var getScrollContainer$1 = function getScrollContainer$1() {
        if (isServer$1) {
          return;
        }
        var container = props2.container;
        scrollContainer.value = getScrollContainer(container);
        on$1(scrollContainer.value, "scroll", handleScroll);
        handleScroll();
      };
      var handleScroll = function handleScroll() {
        if (handleScrollLock.value) return;
        var bounds = props2.bounds,
          targetOffset = props2.targetOffset;
        var filters = [];
        var active2 = "";
        links.value.forEach(function (link) {
          var anchor = getAnchorTarget(link);
          if (!anchor) {
            return;
          }
          var top = getOffsetTop(anchor, scrollContainer.value);
          if (top < bounds + targetOffset) {
            filters.push({
              link: link,
              top: top
            });
          }
        });
        if (filters.length) {
          var latest = filters.reduce(function (prev, cur) {
            return prev.top > cur.top ? prev : cur;
          });
          active2 = latest.link;
        }
        setCurrentActiveLink(active2);
      };
      var getAnchorTarget = function getAnchorTarget(link) {
        var matcher = link.match(ANCHOR_SHARP_REGEXP);
        if (!matcher) {
          return;
        }
        var anchor = document.getElementById(matcher[1]);
        if (!anchor) {
          return;
        }
        return anchor;
      };
      var registerLink = function registerLink(link) {
        if (!ANCHOR_SHARP_REGEXP.test(link) || links.value.indexOf(link) !== -1) {
          return;
        }
        links.value.push(link);
      };
      var unregisterLink = function unregisterLink(link) {
        links.value = links.value.filter(function (each) {
          return each !== link;
        });
      };
      var setCurrentActiveLink = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(link) {
          var _props2$onChange;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(active.value === link)) {
                    _context.next = 2;
                    break;
                  }
                  return _context.abrupt("return");
                case 2:
                  active.value = link;
                  (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, link, active.value);
                  _context.next = 6;
                  return vue.nextTick();
                case 6:
                  updateActiveLine();
                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return function setCurrentActiveLink(_x) {
          return _ref2.apply(this, arguments);
        };
      }();
      var updateActiveLine = function updateActiveLine() {
        var _anchorRef$value;
        var ele = (_anchorRef$value = anchorRef.value) === null || _anchorRef$value === void 0 ? void 0 : _anchorRef$value.querySelector(".".concat(STATUS.value.active, ">a"));
        if (!ele) {
          Object.assign(activeLineStyle, {});
          return;
        }
        var top = ele.offsetTop,
          height = ele.offsetHeight;
        Object.assign(activeLineStyle, {
          top: "".concat(top, "px"),
          height: "".concat(height, "px"),
          opacity: 1
        });
      };
      var handleLinkClick = function handleLinkClick(link) {
        var _props2$onClick;
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, link);
      };
      var handleScrollTo = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(link) {
          var anchor, targetOffset, scrollTop, offsetTop, top;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  anchor = getAnchorTarget(link);
                  setCurrentActiveLink(link);
                  if (anchor) {
                    _context2.next = 4;
                    break;
                  }
                  return _context2.abrupt("return");
                case 4:
                  handleScrollLock.value = true;
                  targetOffset = props2.targetOffset;
                  scrollTop = getScroll(scrollContainer.value);
                  offsetTop = getOffsetTop(anchor, scrollContainer.value);
                  top = scrollTop + offsetTop - targetOffset;
                  _context2.next = 11;
                  return scrollTo(top, {
                    container: scrollContainer.value
                  });
                case 11:
                  handleScrollLock.value = false;
                case 12:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));
        return function handleScrollTo(_x2) {
          return _ref3.apply(this, arguments);
        };
      }();
      var renderCursor = function renderCursor() {
        var titleContent = renderTNodeJSX("cursor");
        return titleContent || vue.createVNode("div", {
          "class": ANCHOR_LINE_CURSOR_CLASSNAME.value
        }, null);
      };
      vue.onMounted( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                getScrollContainer$1();
                if (!active.value) {
                  _context3.next = 5;
                  break;
                }
                _context3.next = 4;
                return vue.nextTick();
              case 4:
                handleScrollTo(active.value);
              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      })));
      vue.onUnmounted(function () {
        if (!scrollContainer.value) return;
        off$1(scrollContainer.value, "scroll", handleScroll);
      });
      vue.watchEffect(function () {
        if (scrollContainer.value) {
          off$1(scrollContainer.value, "scroll", handleScroll);
        }
        getScrollContainer$1();
      });
      vue.provide(AnchorInjectionKey, vue.reactive({
        registerLink: registerLink,
        unregisterLink: unregisterLink,
        handleScrollTo: handleScrollTo,
        handleLinkClick: handleLinkClick,
        active: active
      }));
      return function () {
        var size = props2.size,
          affixProps = props2.affixProps;
        var className = [COMPONENT_NAME.value, SIZE.value[size]];
        var content = vue.createVNode("div", vue.mergeProps({
          "ref": anchorRef,
          "class": className
        }, attrs), [vue.createVNode("div", {
          "class": ANCHOR_LINE_CLASSNAME.value
        }, [vue.createVNode("div", {
          "class": "".concat(ANCHOR_LINE_CURSOR_CLASSNAME.value, "-wrapper"),
          "style": activeLineStyle
        }, [renderCursor()])]), renderTNodeJSX("default")]);
        if (affixProps) {
          return vue.createVNode(Affix, affixProps, _isSlot$v(content) ? content : {
            "default": function _default() {
              return [content];
            }
          });
        }
        return content;
      };
    }
  });

  var props$16 = {
    href: {
      type: String,
      "default": "",
      required: true
    },
    target: {
      type: String,
      "default": "_self",
      validator: function validator(val) {
        return ["_self", "_blank", "_parent", "_top"].includes(val);
      }
    },
    title: {
      type: [String, Function],
      "default": ""
    }
  };

  function ownKeys$2h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2h(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var localProps = _objectSpread$2g(_objectSpread$2g({}, props$16), {}, {
    href: {
      type: String,
      required: true,
      validator: function validator(v) {
        return ANCHOR_SHARP_REGEXP.test(v);
      }
    }
  });
  var _AnchorItem = vue.defineComponent({
    name: "TAnchorItem",
    inject: {
      tAnchor: {
        "default": void 0
      }
    },
    props: localProps,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var anchor = vue.inject(AnchorInjectionKey, void 0);
      var CLASSNAME_PREFIX = usePrefixClass("anchor__item");
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS;
      var register = function register() {
        anchor.registerLink(props2.href);
      };
      var unregister = function unregister() {
        var href = props2.href;
        if (!href) return;
        anchor.unregisterLink(href);
      };
      var handleClick = function handleClick(e) {
        var href = props2.href,
          title = props2.title;
        anchor.handleScrollTo(href);
        anchor.handleLinkClick({
          href: href,
          title: typeof title === "string" ? title : void 0,
          e: e
        });
      };
      var renderTitle = function renderTitle() {
        var title = props2.title;
        var titleSlot = slots.title;
        var titleVal;
        if (typeof title === "string") {
          titleVal = title;
        } else if (typeof title === "function") {
          titleVal = title(vue.h);
        } else if (titleSlot) {
          titleVal = titleSlot(null);
        }
        return titleVal;
      };
      vue.watch(function () {
        return props2.href;
      }, function () {
        unregister();
        register();
      }, {
        immediate: true
      });
      vue.onMounted(function () {
        register();
      });
      vue.onUnmounted(function () {
        register();
      });
      return function () {
        var _wrapperClass;
        var href = props2.href,
          target = props2.target;
        var children = slots["default"],
          titleSlot = slots.title;
        var title = renderTitle();
        var titleAttr = typeof title === "string" ? title : null;
        var active = anchor.active === href;
        var wrapperClass = (_wrapperClass = {}, _defineProperty$3(_wrapperClass, CLASSNAME_PREFIX.value, true), _defineProperty$3(_wrapperClass, STATUS.value.active, active), _wrapperClass);
        var titleClass = _defineProperty$3({}, "".concat(CLASSNAME_PREFIX.value, "-link"), true);
        return vue.createVNode("div", {
          "class": wrapperClass
        }, [vue.createVNode("a", {
          "href": href,
          "title": titleAttr,
          "class": titleClass,
          "target": target,
          "onClick": handleClick
        }, [titleSlot ? titleSlot(null) : title]), children && children(null)]);
      };
    }
  });

  var clipboard = {exports: {}};

  /*!
   * clipboard.js v2.0.11
   * https://clipboardjs.com/
   *
   * Licensed MIT © Zeno Rocha
   */
  (function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
      module.exports = factory();
    })(commonjsGlobal, function () {
      return (/******/function () {
          // webpackBootstrap
          /******/
          var __webpack_modules__ = {
            /***/686: /***/function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

              // EXPORTS
              __webpack_require__.d(__webpack_exports__, {
                "default": function _default() {
                  return (/* binding */clipboard
                  );
                }
              });

              // EXTERNAL MODULE: ./node_modules/tiny-emitter/index.js
              var tiny_emitter = __webpack_require__(279);
              var tiny_emitter_default = /*#__PURE__*/__webpack_require__.n(tiny_emitter);
              // EXTERNAL MODULE: ./node_modules/good-listener/src/listen.js
              var listen = __webpack_require__(370);
              var listen_default = /*#__PURE__*/__webpack_require__.n(listen);
              // EXTERNAL MODULE: ./node_modules/select/src/select.js
              var src_select = __webpack_require__(817);
              var select_default = /*#__PURE__*/__webpack_require__.n(src_select);
              /**
               * Executes a given operation type.
               * @param {String} type
               * @return {Boolean}
               */
              function command(type) {
                try {
                  return document.execCommand(type);
                } catch (err) {
                  return false;
                }
              }

              /**
               * Cut action wrapper.
               * @param {String|HTMLElement} target
               * @return {String}
               */

              var ClipboardActionCut = function ClipboardActionCut(target) {
                var selectedText = select_default()(target);
                command('cut');
                return selectedText;
              };

              /* harmony default export */
              var actions_cut = ClipboardActionCut;
              /**
               * Creates a fake textarea element with a value.
               * @param {String} value
               * @return {HTMLElement}
               */
              function createFakeElement(value) {
                var isRTL = document.documentElement.getAttribute('dir') === 'rtl';
                var fakeElement = document.createElement('textarea'); // Prevent zooming on iOS

                fakeElement.style.fontSize = '12pt'; // Reset box model

                fakeElement.style.border = '0';
                fakeElement.style.padding = '0';
                fakeElement.style.margin = '0'; // Move element out of screen horizontally

                fakeElement.style.position = 'absolute';
                fakeElement.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically

                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                fakeElement.style.top = "".concat(yPosition, "px");
                fakeElement.setAttribute('readonly', '');
                fakeElement.value = value;
                return fakeElement;
              }

              /**
               * Create fake copy action wrapper using a fake element.
               * @param {String} target
               * @param {Object} options
               * @return {String}
               */

              var fakeCopyAction = function fakeCopyAction(value, options) {
                var fakeElement = createFakeElement(value);
                options.container.appendChild(fakeElement);
                var selectedText = select_default()(fakeElement);
                command('copy');
                fakeElement.remove();
                return selectedText;
              };
              /**
               * Copy action wrapper.
               * @param {String|HTMLElement} target
               * @param {Object} options
               * @return {String}
               */

              var ClipboardActionCopy = function ClipboardActionCopy(target) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                  container: document.body
                };
                var selectedText = '';
                if (typeof target === 'string') {
                  selectedText = fakeCopyAction(target, options);
                } else if (target instanceof HTMLInputElement && !['text', 'search', 'url', 'tel', 'password'].includes(target === null || target === void 0 ? void 0 : target.type)) {
                  // If input type doesn't support `setSelectionRange`. Simulate it. https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange
                  selectedText = fakeCopyAction(target.value, options);
                } else {
                  selectedText = select_default()(target);
                  command('copy');
                }
                return selectedText;
              };

              /* harmony default export */
              var actions_copy = ClipboardActionCopy;
              function _typeof(obj) {
                "@babel/helpers - typeof";

                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                  };
                }
                return _typeof(obj);
              }

              /**
               * Inner function which performs selection from either `text` or `target`
               * properties and then executes copy or cut operations.
               * @param {Object} options
               */

              var ClipboardActionDefault = function ClipboardActionDefault() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                // Defines base properties passed from constructor.
                var _options$action = options.action,
                  action = _options$action === void 0 ? 'copy' : _options$action,
                  container = options.container,
                  target = options.target,
                  text = options.text; // Sets the `action` to be performed which can be either 'copy' or 'cut'.

                if (action !== 'copy' && action !== 'cut') {
                  throw new Error('Invalid "action" value, use either "copy" or "cut"');
                } // Sets the `target` property using an element that will be have its content copied.

                if (target !== undefined) {
                  if (target && _typeof(target) === 'object' && target.nodeType === 1) {
                    if (action === 'copy' && target.hasAttribute('disabled')) {
                      throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                    }
                    if (action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                      throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                    }
                  } else {
                    throw new Error('Invalid "target" value, use a valid Element');
                  }
                } // Define selection strategy based on `text` property.

                if (text) {
                  return actions_copy(text, {
                    container: container
                  });
                } // Defines which selection strategy based on `target` property.

                if (target) {
                  return action === 'cut' ? actions_cut(target) : actions_copy(target, {
                    container: container
                  });
                }
              };

              /* harmony default export */
              var actions_default = ClipboardActionDefault;
              function clipboard_typeof(obj) {
                "@babel/helpers - typeof";

                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  clipboard_typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  clipboard_typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                  };
                }
                return clipboard_typeof(obj);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                  constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                  }
                });
                if (superClass) _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                  o.__proto__ = p;
                  return o;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived),
                    result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self, call) {
                if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                }
                return _assertThisInitialized(self);
              }
              function _assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                if (Reflect.construct.sham) return false;
                if (typeof Proxy === "function") return true;
                try {
                  Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                  return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
              }

              /**
               * Helper function to retrieve attribute value.
               * @param {String} suffix
               * @param {Element} element
               */

              function getAttributeValue(suffix, element) {
                var attribute = "data-clipboard-".concat(suffix);
                if (!element.hasAttribute(attribute)) {
                  return;
                }
                return element.getAttribute(attribute);
              }
              /**
               * Base class which takes one or more elements, adds event listeners to them,
               * and instantiates a new `ClipboardAction` on each click.
               */

              var Clipboard = /*#__PURE__*/function (_Emitter) {
                _inherits(Clipboard, _Emitter);
                var _super = _createSuper(Clipboard);

                /**
                 * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                 * @param {Object} options
                 */
                function Clipboard(trigger, options) {
                  var _this;
                  _classCallCheck(this, Clipboard);
                  _this = _super.call(this);
                  _this.resolveOptions(options);
                  _this.listenClick(trigger);
                  return _this;
                }
                /**
                 * Defines if attributes would be resolved using internal setter functions
                 * or custom functions that were passed in the constructor.
                 * @param {Object} options
                 */

                _createClass(Clipboard, [{
                  key: "resolveOptions",
                  value: function resolveOptions() {
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
                    this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
                    this.text = typeof options.text === 'function' ? options.text : this.defaultText;
                    this.container = clipboard_typeof(options.container) === 'object' ? options.container : document.body;
                  }
                  /**
                   * Adds a click event listener to the passed trigger.
                   * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                   */
                }, {
                  key: "listenClick",
                  value: function listenClick(trigger) {
                    var _this2 = this;
                    this.listener = listen_default()(trigger, 'click', function (e) {
                      return _this2.onClick(e);
                    });
                  }
                  /**
                   * Defines a new `ClipboardAction` on each click event.
                   * @param {Event} e
                   */
                }, {
                  key: "onClick",
                  value: function onClick(e) {
                    var trigger = e.delegateTarget || e.currentTarget;
                    var action = this.action(trigger) || 'copy';
                    var text = actions_default({
                      action: action,
                      container: this.container,
                      target: this.target(trigger),
                      text: this.text(trigger)
                    }); // Fires an event based on the copy operation result.

                    this.emit(text ? 'success' : 'error', {
                      action: action,
                      text: text,
                      trigger: trigger,
                      clearSelection: function clearSelection() {
                        if (trigger) {
                          trigger.focus();
                        }
                        window.getSelection().removeAllRanges();
                      }
                    });
                  }
                  /**
                   * Default `action` lookup function.
                   * @param {Element} trigger
                   */
                }, {
                  key: "defaultAction",
                  value: function defaultAction(trigger) {
                    return getAttributeValue('action', trigger);
                  }
                  /**
                   * Default `target` lookup function.
                   * @param {Element} trigger
                   */
                }, {
                  key: "defaultTarget",
                  value: function defaultTarget(trigger) {
                    var selector = getAttributeValue('target', trigger);
                    if (selector) {
                      return document.querySelector(selector);
                    }
                  }
                  /**
                   * Allow fire programmatically a copy action
                   * @param {String|HTMLElement} target
                   * @param {Object} options
                   * @returns Text copied.
                   */
                }, {
                  key: "defaultText",
                  /**
                   * Default `text` lookup function.
                   * @param {Element} trigger
                   */
                  value: function defaultText(trigger) {
                    return getAttributeValue('text', trigger);
                  }
                  /**
                   * Destroy lifecycle.
                   */
                }, {
                  key: "destroy",
                  value: function destroy() {
                    this.listener.destroy();
                  }
                }], [{
                  key: "copy",
                  value: function copy(target) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                      container: document.body
                    };
                    return actions_copy(target, options);
                  }
                  /**
                   * Allow fire programmatically a cut action
                   * @param {String|HTMLElement} target
                   * @returns Text cutted.
                   */
                }, {
                  key: "cut",
                  value: function cut(target) {
                    return actions_cut(target);
                  }
                  /**
                   * Returns the support of the given action, or all actions if no action is
                   * given.
                   * @param {String} [action]
                   */
                }, {
                  key: "isSupported",
                  value: function isSupported() {
                    var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];
                    var actions = typeof action === 'string' ? [action] : action;
                    var support = !!document.queryCommandSupported;
                    actions.forEach(function (action) {
                      support = support && !!document.queryCommandSupported(action);
                    });
                    return support;
                  }
                }]);
                return Clipboard;
              }(tiny_emitter_default());

              /* harmony default export */
              var clipboard = Clipboard;

              /***/
            },

            /***/828: /***/function _(module) {
              var DOCUMENT_NODE_TYPE = 9;

              /**
               * A polyfill for Element.matches()
               */
              if (typeof Element !== 'undefined' && !Element.prototype.matches) {
                var proto = Element.prototype;
                proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
              }

              /**
               * Finds the closest parent that matches a selector.
               *
               * @param {Element} element
               * @param {String} selector
               * @return {Function}
               */
              function closest(element, selector) {
                while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
                  if (typeof element.matches === 'function' && element.matches(selector)) {
                    return element;
                  }
                  element = element.parentNode;
                }
              }
              module.exports = closest;

              /***/
            },

            /***/438: /***/function _(module, __unused_webpack_exports, __webpack_require__) {
              var closest = __webpack_require__(828);

              /**
               * Delegates event to a selector.
               *
               * @param {Element} element
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @param {Boolean} useCapture
               * @return {Object}
               */
              function _delegate(element, selector, type, callback, useCapture) {
                var listenerFn = listener.apply(this, arguments);
                element.addEventListener(type, listenerFn, useCapture);
                return {
                  destroy: function destroy() {
                    element.removeEventListener(type, listenerFn, useCapture);
                  }
                };
              }

              /**
               * Delegates event to a selector.
               *
               * @param {Element|String|Array} [elements]
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @param {Boolean} useCapture
               * @return {Object}
               */
              function delegate(elements, selector, type, callback, useCapture) {
                // Handle the regular Element usage
                if (typeof elements.addEventListener === 'function') {
                  return _delegate.apply(null, arguments);
                }

                // Handle Element-less usage, it defaults to global delegation
                if (typeof type === 'function') {
                  // Use `document` as the first parameter, then apply arguments
                  // This is a short way to .unshift `arguments` without running into deoptimizations
                  return _delegate.bind(null, document).apply(null, arguments);
                }

                // Handle Selector-based usage
                if (typeof elements === 'string') {
                  elements = document.querySelectorAll(elements);
                }

                // Handle Array-like based usage
                return Array.prototype.map.call(elements, function (element) {
                  return _delegate(element, selector, type, callback, useCapture);
                });
              }

              /**
               * Finds closest match and invokes callback.
               *
               * @param {Element} element
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @return {Function}
               */
              function listener(element, selector, type, callback) {
                return function (e) {
                  e.delegateTarget = closest(e.target, selector);
                  if (e.delegateTarget) {
                    callback.call(element, e);
                  }
                };
              }
              module.exports = delegate;

              /***/
            },

            /***/879: /***/function _(__unused_webpack_module, exports) {
              /**
               * Check if argument is a HTML element.
               *
               * @param {Object} value
               * @return {Boolean}
               */
              exports.node = function (value) {
                return value !== undefined && value instanceof HTMLElement && value.nodeType === 1;
              };

              /**
               * Check if argument is a list of HTML elements.
               *
               * @param {Object} value
               * @return {Boolean}
               */
              exports.nodeList = function (value) {
                var type = Object.prototype.toString.call(value);
                return value !== undefined && (type === '[object NodeList]' || type === '[object HTMLCollection]') && 'length' in value && (value.length === 0 || exports.node(value[0]));
              };

              /**
               * Check if argument is a string.
               *
               * @param {Object} value
               * @return {Boolean}
               */
              exports.string = function (value) {
                return typeof value === 'string' || value instanceof String;
              };

              /**
               * Check if argument is a function.
               *
               * @param {Object} value
               * @return {Boolean}
               */
              exports.fn = function (value) {
                var type = Object.prototype.toString.call(value);
                return type === '[object Function]';
              };

              /***/
            },

            /***/370: /***/function _(module, __unused_webpack_exports, __webpack_require__) {
              var is = __webpack_require__(879);
              var delegate = __webpack_require__(438);

              /**
               * Validates all params and calls the right
               * listener function based on its target type.
               *
               * @param {String|HTMLElement|HTMLCollection|NodeList} target
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */
              function listen(target, type, callback) {
                if (!target && !type && !callback) {
                  throw new Error('Missing required arguments');
                }
                if (!is.string(type)) {
                  throw new TypeError('Second argument must be a String');
                }
                if (!is.fn(callback)) {
                  throw new TypeError('Third argument must be a Function');
                }
                if (is.node(target)) {
                  return listenNode(target, type, callback);
                } else if (is.nodeList(target)) {
                  return listenNodeList(target, type, callback);
                } else if (is.string(target)) {
                  return listenSelector(target, type, callback);
                } else {
                  throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
                }
              }

              /**
               * Adds an event listener to a HTML element
               * and returns a remove listener function.
               *
               * @param {HTMLElement} node
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */
              function listenNode(node, type, callback) {
                node.addEventListener(type, callback);
                return {
                  destroy: function destroy() {
                    node.removeEventListener(type, callback);
                  }
                };
              }

              /**
               * Add an event listener to a list of HTML elements
               * and returns a remove listener function.
               *
               * @param {NodeList|HTMLCollection} nodeList
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */
              function listenNodeList(nodeList, type, callback) {
                Array.prototype.forEach.call(nodeList, function (node) {
                  node.addEventListener(type, callback);
                });
                return {
                  destroy: function destroy() {
                    Array.prototype.forEach.call(nodeList, function (node) {
                      node.removeEventListener(type, callback);
                    });
                  }
                };
              }

              /**
               * Add an event listener to a selector
               * and returns a remove listener function.
               *
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */
              function listenSelector(selector, type, callback) {
                return delegate(document.body, selector, type, callback);
              }
              module.exports = listen;

              /***/
            },

            /***/817: /***/function _(module) {
              function select(element) {
                var selectedText;
                if (element.nodeName === 'SELECT') {
                  element.focus();
                  selectedText = element.value;
                } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
                  var isReadOnly = element.hasAttribute('readonly');
                  if (!isReadOnly) {
                    element.setAttribute('readonly', '');
                  }
                  element.select();
                  element.setSelectionRange(0, element.value.length);
                  if (!isReadOnly) {
                    element.removeAttribute('readonly');
                  }
                  selectedText = element.value;
                } else {
                  if (element.hasAttribute('contenteditable')) {
                    element.focus();
                  }
                  var selection = window.getSelection();
                  var range = document.createRange();
                  range.selectNodeContents(element);
                  selection.removeAllRanges();
                  selection.addRange(range);
                  selectedText = selection.toString();
                }
                return selectedText;
              }
              module.exports = select;

              /***/
            },

            /***/279: /***/function _(module) {
              function E() {
                // Keep this empty so it's easier to inherit from
                // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
              }
              E.prototype = {
                on: function on(name, callback, ctx) {
                  var e = this.e || (this.e = {});
                  (e[name] || (e[name] = [])).push({
                    fn: callback,
                    ctx: ctx
                  });
                  return this;
                },
                once: function once(name, callback, ctx) {
                  var self = this;
                  function listener() {
                    self.off(name, listener);
                    callback.apply(ctx, arguments);
                  }
                  listener._ = callback;
                  return this.on(name, listener, ctx);
                },
                emit: function emit(name) {
                  var data = [].slice.call(arguments, 1);
                  var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                  var i = 0;
                  var len = evtArr.length;
                  for (i; i < len; i++) {
                    evtArr[i].fn.apply(evtArr[i].ctx, data);
                  }
                  return this;
                },
                off: function off(name, callback) {
                  var e = this.e || (this.e = {});
                  var evts = e[name];
                  var liveEvents = [];
                  if (evts && callback) {
                    for (var i = 0, len = evts.length; i < len; i++) {
                      if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
                    }
                  }

                  // Remove event from queue to prevent memory leak
                  // Suggested by https://github.com/lazd
                  // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

                  liveEvents.length ? e[name] = liveEvents : delete e[name];
                  return this;
                }
              };
              module.exports = E;
              module.exports.TinyEmitter = E;

              /***/
            }

            /******/
          };
          /************************************************************************/
          /******/ // The module cache
          /******/
          var __webpack_module_cache__ = {};
          /******/
          /******/ // The require function
          /******/
          function __webpack_require__(moduleId) {
            /******/ // Check if module is in cache
            /******/if (__webpack_module_cache__[moduleId]) {
              /******/return __webpack_module_cache__[moduleId].exports;
              /******/
            }
            /******/ // Create a new module (and put it into the cache)
            /******/
            var module = __webpack_module_cache__[moduleId] = {
              /******/ // no module.id needed
              /******/ // no module.loaded needed
              /******/exports: {}
              /******/
            };
            /******/
            /******/ // Execute the module function
            /******/
            __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
            /******/
            /******/ // Return the exports of the module
            /******/
            return module.exports;
            /******/
          }
          /******/
          /************************************************************************/
          /******/ /* webpack/runtime/compat get default export */
          /******/
          !function () {
            /******/ // getDefaultExport function for compatibility with non-harmony modules
            /******/__webpack_require__.n = function (module) {
              /******/var getter = module && module.__esModule ? /******/function () {
                return module['default'];
              } : /******/function () {
                return module;
              };
              /******/
              __webpack_require__.d(getter, {
                a: getter
              });
              /******/
              return getter;
              /******/
            };
            /******/
          }();
          /******/
          /******/ /* webpack/runtime/define property getters */
          /******/
          !function () {
            /******/ // define getter functions for harmony exports
            /******/__webpack_require__.d = function (exports, definition) {
              /******/for (var key in definition) {
                /******/if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                  /******/Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: definition[key]
                  });
                  /******/
                }
                /******/
              }
              /******/
            };
            /******/
          }();
          /******/
          /******/ /* webpack/runtime/hasOwnProperty shorthand */
          /******/
          !function () {
            /******/__webpack_require__.o = function (obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            };
            /******/
          }();
          /******/
          /************************************************************************/
          /******/ // module exports must be returned from runtime so entry inlining is disabled
          /******/ // startup
          /******/ // Load entry module and return exports
          /******/
          return __webpack_require__(686);
          /******/
        }()["default"]
      );
    });
  })(clipboard);
  var Clipboard = /*@__PURE__*/getDefaultExportFromCjs(clipboard.exports);

  function copyText(_text) {
    var div = document.createElement("div");
    var clip = new Clipboard(div, {
      text: function text() {
        return _text;
      }
    });
    div.click();
    clip.destroy();
    div.remove();
  }

  var THEME_LIST = ["info", "success", "warning", "error", "question", "loading"];
  var DISTANCE$1 = "32px";
  var PLACEMENT_OFFSET$1 = {
    top: {
      top: DISTANCE$1,
      left: "50%",
      transform: "translateX(-50%)"
    },
    center: {
      left: "50%",
      top: "50%",
      transform: "translateX(-50%) translateY(-50%)"
    },
    left: {
      left: DISTANCE$1,
      top: "50%",
      transform: "translateY(-50%)"
    },
    bottom: {
      bottom: DISTANCE$1,
      left: "50%",
      transform: "translateX(-50%)"
    },
    right: {
      right: DISTANCE$1,
      top: "50%",
      transform: "translateY(-50%)",
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "top-left": {
      left: DISTANCE$1,
      top: DISTANCE$1
    },
    "top-right": {
      right: DISTANCE$1,
      top: DISTANCE$1,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "bottom-right": {
      right: DISTANCE$1,
      bottom: DISTANCE$1,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "bottom-left": {
      left: DISTANCE$1,
      bottom: DISTANCE$1
    }
  };
  var PLACEMENT_LIST$1 = Object.keys(PLACEMENT_OFFSET$1);

  var props$15 = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    content: {
      type: [String, Function]
    },
    duration: {
      type: Number,
      "default": 3e3
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        return ["info", "success", "warning", "error", "question", "loading"].includes(val);
      }
    },
    onCloseBtnClick: Function,
    onDurationEnd: Function
  };

  function useGlobalIcon(tdIcon) {
    var _useConfig = useConfig("icon"),
      globalConfig = _useConfig.globalConfig;
    var resultIcon = {};
    Object.keys(tdIcon).forEach(function (key) {
      var _globalConfig$value;
      resultIcon[key] = ((_globalConfig$value = globalConfig.value) === null || _globalConfig$value === void 0 ? void 0 : _globalConfig$value[key]) || tdIcon[key];
    });
    return resultIcon;
  }

  var ANIMATION_OPTION$1 = {
    duration: 200,
    easing: "linear"
  };
  function fadeIn$1(dom, placement) {
    if (!dom) return;
    var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var fadeInKeyframes = getFadeInKeyframes$1(placement, offsetWidth, offsetHeight);
    if (!fadeInKeyframes) return;
    var styleAfterFadeIn = fadeInKeyframes[fadeInKeyframes.length - 1];
    setDomStyleAfterAnimation(dom, styleAfterFadeIn);
    dom.animate && dom.animate(fadeInKeyframes, ANIMATION_OPTION$1);
  }
  function fadeOut$1(dom, placement, onFinish) {
    if (!dom) return;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var fadeOutKeyframes = getFadeOutKeyframes$1(placement, offsetHeight);
    if (!fadeOutKeyframes) return onFinish();
    var styleAfterFadeOut = fadeOutKeyframes[fadeOutKeyframes.length - 1];
    setDomStyleAfterAnimation(dom, styleAfterFadeOut);
    var animation = dom.animate && dom.animate(fadeOutKeyframes, ANIMATION_OPTION$1);
    if (animation) {
      animation.onfinish = function () {
        dom.style.display = "none";
        onFinish();
      };
    } else {
      dom.style.display = "none";
      onFinish();
    }
  }
  function setDomStyleAfterAnimation(dom, styleAfterAnimation) {
    var keys = Object.keys(styleAfterAnimation);
    for (var i = 0; i < keys.length; i += 1) {
      var key = keys[i];
      dom.style[key] = styleAfterAnimation[key];
    }
  }
  function getFadeInKeyframes$1(placement, offsetWidth, offsetHeight) {
    if (!PLACEMENT_LIST$1.includes(placement)) return null;
    if (["top-left", "left", "bottom-left"].includes(placement)) {
      return [{
        opacity: 0,
        marginLeft: "-".concat(offsetWidth, "px")
      }, {
        opacity: 1,
        marginLeft: "0"
      }];
    }
    if (["top-right", "right", "bottom-right"].includes(placement)) {
      return [{
        opacity: 0,
        marginRight: "-".concat(offsetWidth, "px")
      }, {
        opacity: 1,
        marginRight: "0"
      }];
    }
    if (["top", "center"].includes(placement)) {
      return [{
        opacity: 0,
        marginTop: "-".concat(offsetHeight, "px")
      }, {
        opacity: 1,
        marginTop: "0"
      }];
    }
    if (["bottom"].includes(placement)) {
      return [{
        opacity: 0,
        transform: "translate3d(0, ".concat(offsetHeight, "px, 0)")
      }, {
        opacity: 1,
        transform: "translate3d(0, 0, 0)"
      }];
    }
  }
  function getFadeOutKeyframes$1(placement, offsetHeight) {
    if (!PLACEMENT_LIST$1.includes(placement)) return null;
    if (["bottom-left", "bottom", "bottom-right"].includes(placement)) {
      var marginOffset2 = "".concat(offsetHeight, "px");
      return [{
        opacity: 1,
        marginTop: "0px"
      }, {
        opacity: 0,
        marginTop: marginOffset2
      }];
    }
    var marginOffset = "-".concat(offsetHeight, "px");
    return [{
      opacity: 1,
      marginTop: "0px"
    }, {
      opacity: 0,
      marginTop: marginOffset
    }];
  }

  function ownKeys$2g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2g(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Message = vue.defineComponent({
    name: "TMessage",
    props: _objectSpread$2f(_objectSpread$2f({}, props$15), {}, {
      placement: String
    }),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
        expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("message");
      var _useGlobalIcon = useGlobalIcon({
          InfoCircleFilledIcon: infoCircleFilled,
          CheckCircleFilledIcon: checkCircleFilled,
          ErrorCircleFilledIcon: errorCircleFilled,
          HelpCircleFilledIcon: helpCircleFilled,
          CloseIcon: close
        }),
        InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
        HelpCircleFilledIcon = _useGlobalIcon.HelpCircleFilledIcon,
        CloseIcon = _useGlobalIcon.CloseIcon;
      var classPrefix = usePrefixClass();
      var renderTNode = useTNodeJSX();
      var renderContent = useContent();
      var msgRef = vue.ref(null);
      var timer = vue.ref(null);
      var classes = vue.computed(function () {
        var status = {};
        THEME_LIST.forEach(function (t) {
          return status["".concat(classPrefix.value, "-is-").concat(t)] = props2.theme === t;
        });
        return [COMPONENT_NAME.value, status, _defineProperty$3({}, "".concat(classPrefix.value, "-is-closable"), props2.closeBtn || slots.closeBtn)];
      });
      var close$1 = function close(e) {
        var _props2$onCloseBtnCli;
        (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
          e: e
        });
      };
      var clearTimer = function clearTimer() {
        props2.duration && clearTimeout(timer.value);
      };
      var setTimer = function setTimer() {
        if (!props2.duration) {
          return;
        }
        timer.value = Number(setTimeout(function () {
          clearTimer();
          var msgDom = msgRef.value;
          fadeOut$1(msgDom, props2.placement, function () {
            var _props2$onDurationEnd;
            (_props2$onDurationEnd = props2.onDurationEnd) === null || _props2$onDurationEnd === void 0 ? void 0 : _props2$onDurationEnd.call(props2);
          });
        }, props2.duration));
      };
      var renderClose = function renderClose() {
        var defaultClose = vue.createVNode(CloseIcon, null, null);
        return vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__close"),
          "onClick": close$1
        }, [renderTNode("closeBtn", defaultClose)]);
      };
      var renderIcon = function renderIcon() {
        if (props2.icon === false) return;
        if (typeof props2.icon === "function") return props2.icon(vue.h);
        if (slots.icon) {
          return slots.icon(null);
        }
        var Icon = {
          info: InfoCircleFilledIcon,
          success: CheckCircleFilledIcon,
          warning: ErrorCircleFilledIcon,
          error: ErrorCircleFilledIcon,
          question: HelpCircleFilledIcon,
          loading: Loading
        }[props2.theme];
        return vue.createVNode(Icon, null, null);
      };
      vue.onBeforeMount(function () {
        props2.duration && setTimer();
      });
      vue.onMounted(function () {
        var msgDom = msgRef.value;
        fadeIn$1(msgDom, props2.placement);
      });
      expose({
        close: close$1
      });
      return function () {
        return vue.createVNode("div", {
          "ref": msgRef,
          "class": classes.value,
          "onMouseenter": clearTimer,
          "onMouseleave": setTimer
        }, [renderIcon(), renderContent("content", "default"), renderClose()]);
      };
    }
  });

  function ownKeys$2f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2f(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DEFAULT_Z_INDEX$1 = 6e3;
  var getUniqueId = function () {
    var id = 0;
    return function () {
      id += 1;
      return id;
    };
  }();
  var MessageList = vue.defineComponent({
    name: "TMessageList",
    props: {
      zIndex: {
        type: Number,
        "default": 0
      },
      placement: {
        type: String,
        "default": ""
      }
    },
    setup: function setup(props, _ref) {
      var expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("message__list");
      var list = vue.ref([]);
      var messageList = vue.ref([]);
      var styles = vue.computed(function () {
        return _objectSpread$2e(_objectSpread$2e({}, PLACEMENT_OFFSET$1[props.placement]), {}, {
          zIndex: props.zIndex !== DEFAULT_Z_INDEX$1 ? props.zIndex : DEFAULT_Z_INDEX$1
        });
      });
      var add = function add(msg) {
        var mg = _objectSpread$2e(_objectSpread$2e({}, msg), {}, {
          key: getUniqueId()
        });
        list.value.push(mg);
        return list.value.length - 1;
      };
      var remove = function remove(index) {
        list.value.splice(index, 1);
      };
      var removeAll = function removeAll() {
        list.value = [];
      };
      var getOffset = function getOffset(val) {
        if (!val) return;
        return isNaN(Number(val)) ? val : "".concat(val, "px");
      };
      var msgStyles = function msgStyles(item) {
        return item.offset && {
          position: "relative",
          left: getOffset(item.offset[0]),
          top: getOffset(item.offset[1])
        };
      };
      var getProps = function getProps(index, item) {
        return _objectSpread$2e(_objectSpread$2e({}, item), {}, {
          onCloseBtnClick: function onCloseBtnClick(e) {
            if (item.onCloseBtnClick) {
              item.onCloseBtnClick(e);
            }
            return remove(index);
          },
          onDurationEnd: function onDurationEnd() {
            if (item.onDurationEnd) {
              item.onDurationEnd();
            }
            return remove(index);
          }
        });
      };
      var addChild = function addChild(el) {
        if (el) {
          messageList.value.push(el);
        }
      };
      expose({
        add: add,
        removeAll: removeAll,
        list: list,
        messageList: messageList
      });
      return function () {
        if (!list.value.length) return;
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value,
          "style": styles.value
        }, [list.value.map(function (item, index) {
          return vue.createVNode(_Message, vue.mergeProps({
            "key": item.key,
            "style": msgStyles(item),
            "ref": addChild
          }, getProps(index, item)), null);
        })]);
      };
    }
  });

  function ownKeys$2e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2e(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var instanceMap$1 = /* @__PURE__ */new Map();
  function handleParams(params) {
    var options = _objectSpread$2d({
      duration: 3e3,
      attach: "body",
      zIndex: DEFAULT_Z_INDEX$1,
      placement: "top"
    }, params);
    options.content = params.content;
    return options;
  }
  var MessageFunction = function MessageFunction(props) {
    var options = handleParams(props);
    var attach = options.attach,
      placement = options.placement;
    var attachDom = getAttach(attach);
    if (!instanceMap$1.get(attachDom)) {
      instanceMap$1.set(attachDom, {});
    }
    var p = instanceMap$1.get(attachDom)[placement];
    if (!p) {
      var wrapper = document.createElement("div");
      var instance = vue.createApp(MessageList, {
        zIndex: options.zIndex,
        placement: options.placement
      }).mount(wrapper);
      instance.add(options);
      instanceMap$1.get(attachDom)[placement] = instance;
      attachDom.appendChild(wrapper);
    } else {
      p.add(options);
    }
    return new Promise(function (resolve) {
      var ins = instanceMap$1.get(attachDom)[placement];
      vue.nextTick(function () {
        var msg = ins.messageList;
        resolve(msg[msg.length - 1]);
      });
    });
  };
  var showThemeMessage = function showThemeMessage(theme, params, duration) {
    var options = {
      theme: theme
    };
    if (typeof params === "string") {
      options.content = params;
    } else if (_typeof$2(params) === "object" && !(params instanceof Array)) {
      options = _objectSpread$2d(_objectSpread$2d({}, options), params);
    }
    (duration || duration === 0) && (options.duration = duration);
    return MessageFunction(options);
  };
  var extraApi$2 = {
    info: function info(params, duration) {
      return showThemeMessage("info", params, duration);
    },
    success: function success(params, duration) {
      return showThemeMessage("success", params, duration);
    },
    warning: function warning(params, duration) {
      return showThemeMessage("warning", params, duration);
    },
    error: function error(params, duration) {
      return showThemeMessage("error", params, duration);
    },
    question: function question(params, duration) {
      return showThemeMessage("question", params, duration);
    },
    loading: function loading(params, duration) {
      return showThemeMessage("loading", params, duration);
    },
    close: function close(promise) {
      promise.then(function (instance) {
        return instance.close();
      });
    },
    closeAll: function closeAll() {
      if (instanceMap$1 instanceof Map) {
        instanceMap$1.forEach(function (attach) {
          Object.keys(attach).forEach(function (placement) {
            var instance = attach[placement];
            instance.list = [];
          });
        });
      }
    }
  };
  var MessagePlugin = showThemeMessage;
  MessagePlugin.install = function (app) {
    app.config.globalProperties.$message = showThemeMessage;
    Object.keys(extraApi$2).forEach(function (funcName) {
      app.config.globalProperties.$message[funcName] = extraApi$2[funcName];
    });
  };
  Object.keys(extraApi$2).forEach(function (funcName) {
    MessagePlugin[funcName] = extraApi$2[funcName];
  });

  var props$14 = {
    id: {
      type: String,
      "default": "",
      required: true
    },
    tag: {
      type: String,
      "default": "div"
    }
  };

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];
        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }
  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules

  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min$1 = Math.min;
  var round = Math.round;

  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands) {
      return uaData.brands.map(function (item) {
        return item.brand + "/" + item.version;
      }).join(' ');
    }
    return navigator.userAgent;
  }

  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window,
      visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...

        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false

    return false;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument :
    // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot ||
      // step into the shadow DOM of the parent of a slotted node
      element.parentNode || (
      // DOM Element detected
      isShadowRoot(element) ? element.host : null) ||
      // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback
    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) ||
    // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === 'fixed') {
      return null;
    }
    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block

  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle$1(element);
      if (elementCss.position === 'fixed') {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.

  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
      return window;
    }
    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min, value, max$1) {
    return max(min, min$1(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }
  function effect$1(_ref2) {
    var state = _ref2.state,
      options = _ref2.options;
    var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) {
      return;
    } // CSS selector

    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
      }
      return;
    }
    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules

  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
      y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets,
      isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
      x = _offsets$x === void 0 ? 0 : _offsets$x,
      _offsets$y = offsets.y,
      y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';
      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);
        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height :
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width :
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state,
      options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    {
      var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';
      if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
      }
    }
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules

  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };
  function effect(_ref) {
    var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
    var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }
    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }
    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }
      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules

  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle$1(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent$1(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent$1(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent$1(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList :
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`

  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414

    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents

  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min$1(rect.right, accRect.right);
      accRect.bottom = min$1(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }
    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$strategy = _options.strategy,
      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
      {
        console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
      }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...

    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);
          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break") break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules

  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state,
      name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules

  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
      skidding = _ref[0],
      distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
    var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules

  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
      name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules

  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
    var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min$1(min, tetherMin) : min, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === 'x' ? top : left;
      var _altSide = mainAxis === 'x' ? bottom : right;
      var _offset = popperOffsets[altAxis];
      var _len = altAxis === 'y' ? 'height' : 'width';
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules

  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.

  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' ||
      // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce$2(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }
      return pending;
    };
  }

  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
      .filter(function (value, index, self) {
        return self.indexOf(value) === index;
      }).forEach(function (key) {
        switch (key) {
          case 'name':
            if (typeof modifier.name !== 'string') {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
            }
            break;
          case 'enabled':
            if (typeof modifier.enabled !== 'boolean') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
            }
            break;
          case 'phase':
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
            }
            break;
          case 'fn':
            if (typeof modifier.fn !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
            }
            break;
          case 'effect':
            if (modifier.effect != null && typeof modifier.effect !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
            }
            break;
          case 'requires':
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
            }
            break;
          case 'requiresIfExists':
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
            }
            break;
          case 'options':
          case 'data':
            break;
          default:
            console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
              return "\"" + s + "\"";
            }).join(', ') + "; but \"" + key + "\" was provided.");
        }
        modifier.requires && modifier.requires.forEach(function (requirement) {
          if (modifiers.find(function (mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
      var identifier = fn(item);
      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);
            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name;
                return name === 'flip';
              });
              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
              }
            }
            var _getComputedStyle = getComputedStyle$1(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer

            if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
            }
          }
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return;
          } // Store the reference and popper rects to be read by modifiers

          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            {
              __debug_loops__ += 1;
              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;
            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce$2(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference, popper)) {
        {
          console.error(INVALID_ELEMENT_ERROR);
        }
        return instance;
      }
      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;
          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });
            var noopFn = function noopFn() {};
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  var popupProps = {
    attach: {
      type: [String, Function],
      "default": "body"
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    delay: {
      type: [Number, Array]
    },
    destroyOnClose: Boolean,
    disabled: Boolean,
    hideEmptyPopup: Boolean,
    overlayClassName: {
      type: [String, Object, Array]
    },
    overlayInnerClassName: {
      type: [String, Object, Array]
    },
    overlayInnerStyle: {
      type: [Boolean, Object, Function]
    },
    overlayStyle: {
      type: [Boolean, Object, Function]
    },
    placement: {
      type: String,
      "default": "top"
    },
    showArrow: Boolean,
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        if (!val) return true;
        return ["hover", "click", "focus", "context-menu"].includes(val);
      }
    },
    triggerElement: {
      type: [String, Function]
    },
    visible: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultVisible: Boolean,
    zIndex: {
      type: Number
    },
    onScroll: Function,
    onVisibleChange: Function
  };

  function _isSlot$u(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  function filterEmpty() {
    var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var vnodes = [];
    children.forEach(function (child) {
      if (Array.isArray(child)) {
        vnodes.push.apply(vnodes, _toConsumableArray(child));
      } else if (child.type === vue.Fragment) {
        vnodes.push.apply(vnodes, _toConsumableArray(filterEmpty(child.children)));
      } else {
        vnodes.push(child);
      }
    });
    return vnodes.filter(function (c) {
      return !(c && (typeof Comment !== "undefined" && c.type === Comment || c.type === vue.Fragment && c.children.length === 0 || c.type === vue.Text && c.children.trim() === ""));
    });
  }
  function isContentRectChanged(rect1, rect2) {
    if (!rect1 || !rect2) return;
    if (["width", "height", "x", "y"].some(function (k) {
      return rect1[k] !== rect2[k];
    })) {
      return true;
    }
    return false;
  }
  function observeResize(elm, cb) {
    var _window;
    if (!((_window = window) !== null && _window !== void 0 && _window.ResizeObserver) || !elm) return;
    var prevContentRect = null;
    var ro = new ResizeObserver(function () {
      var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var _ref = entries[0] || {},
        contentRect = _ref.contentRect;
      if (isContentRectChanged(contentRect, prevContentRect)) {
        prevContentRect = contentRect;
        cb(contentRect);
        return;
      }
      if (!prevContentRect) {
        prevContentRect = contentRect;
      }
    });
    if (elm.nodeType !== 1) return;
    ro.observe(elm);
    return function () {
      ro.unobserve(elm);
    };
  }
  function useObserveResize(elm, cb) {
    var cleanOR;
    vue.onMounted(function () {
      cleanOR = observeResize(elm(), cb);
    });
    vue.onUnmounted(function () {
      var _cleanOR;
      (_cleanOR = cleanOR) === null || _cleanOR === void 0 ? void 0 : _cleanOR();
    });
  }
  var Trigger = vue.defineComponent({
    emits: ["resize"],
    data: function data() {
      return {
        cleanOR: null
      };
    },
    mounted: function mounted() {
      var _this = this;
      this.cleanOR = observeResize(this.$el, function () {
        _this.$emit("resize");
      });
    },
    unmounted: function unmounted() {
      var _this$cleanOR;
      (_this$cleanOR = this.cleanOR) === null || _this$cleanOR === void 0 ? void 0 : _this$cleanOR.call(this);
    },
    render: function render() {
      var _children$;
      var children = filterEmpty(this.$slots["default"]());
      if (children.length > 1 || ((_children$ = children[0]) === null || _children$ === void 0 ? void 0 : _children$.type) === vue.Text) {
        return vue.createVNode("span", null, [children]);
      }
      return children[0];
    }
  });
  var Content = vue.defineComponent({
    emits: ["resize"],
    setup: function setup(props2, _ref2) {
      var emit = _ref2.emit;
      var el = vue.ref(null);
      useObserveResize(function () {
        return el.value.children[0];
      }, function () {
        emit("resize");
      });
      return {
        el: el
      };
    },
    render: function render() {
      return vue.createVNode("div", {
        "ref": "el",
        "style": "position: absolute; top: 0px; left: 0px; width: 100%"
      }, [this.$slots["default"]()]);
    }
  });
  var Container = vue.defineComponent({
    inheritAttrs: false,
    props: {
      parent: Object,
      visible: Boolean,
      attach: popupProps.attach,
      forwardRef: Function
    },
    emits: ["resize", "contentMounted"],
    setup: function setup(props2, _ref3) {
      var emit = _ref3.emit;
      var triggerRef = vue.ref(null);
      var mountContent = vue.ref(false);
      vue.onMounted(function () {
        requestAnimationFrame(function () {
          mountContent.value = props2.visible;
        });
        props2.forwardRef(triggerRef.value.$el);
      });
      vue.watch(function () {
        return props2.visible;
      }, function (visible) {
        if (visible) {
          mountContent.value = props2.visible;
        }
      });
      return {
        mountContent: mountContent,
        triggerRef: triggerRef,
        unmountContent: function unmountContent() {
          mountContent.value = false;
        },
        emitResize: function emitResize() {
          emit("resize");
        },
        emitContentMounted: function emitContentMounted() {
          emit("contentMounted");
        }
      };
    },
    render: function render() {
      var _this$triggerRef,
        _this2 = this;
      var _slot;
      return vue.createVNode(vue.Fragment, null, [vue.createVNode(Trigger, vue.mergeProps({
        "class": this.$attrs["class"]
      }, {
        "ref": "triggerRef",
        "onResize": this.emitResize
      }), _isSlot$u(_slot = this.$slots["default"]()) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      }), this.mountContent && vue.createVNode(vue.Teleport, {
        "to": getAttach(this.attach, (_this$triggerRef = this.triggerRef) === null || _this$triggerRef === void 0 ? void 0 : _this$triggerRef.$el)
      }, {
        "default": function _default() {
          return [vue.createVNode(Content, {
            "onResize": _this2.emitResize,
            "onVnodeMounted": _this2.emitContentMounted
          }, {
            "default": function _default() {
              return [_this2.$slots.content && _this2.$slots.content()];
            }
          })];
        }
      })]);
    }
  });

  function useVModel(value, modelValue, defaultValue, onChange) {
    var propName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "value";
    var _getCurrentInstance = vue.getCurrentInstance(),
      emit = _getCurrentInstance.emit,
      vnode = _getCurrentInstance.vnode;
    var internalValue = vue.ref();
    var vProps = vnode.props || {};
    var isVM = Object.prototype.hasOwnProperty.call(vProps, "modelValue") || Object.prototype.hasOwnProperty.call(vProps, "model-value");
    var isVMP = Object.prototype.hasOwnProperty.call(vProps, propName) || Object.prototype.hasOwnProperty.call(vProps, kebabCase_1(propName));
    if (isVM) {
      return [modelValue, function (newValue) {
        emit("update:modelValue", newValue);
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
      }];
    }
    if (isVMP) {
      return [value, function (newValue) {
        emit("update:".concat(propName), newValue);
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
      }];
    }
    internalValue.value = defaultValue;
    return [internalValue, function (newValue) {
      internalValue.value = newValue;
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
    }];
  }

  function ownKeys$2d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2d(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$t(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var triggers = ["click", "hover", "focus", "context-menu"];
  var injectionKey = Symbol("popup");
  function getPopperPlacement(placement) {
    return placement.replace(/-(left|top)$/, "-start").replace(/-(right|bottom)$/, "-end");
  }
  function attachListeners(elm) {
    var offs = [];
    return {
      add: function add(type, listener) {
        on$1(elm.value, type, listener);
        offs.push(function () {
          off$1(elm.value, type, listener);
        });
      },
      clean: function clean() {
        offs.forEach(function (handler) {
          return handler === null || handler === void 0 ? void 0 : handler();
        });
        offs.length = 0;
      }
    };
  }
  var _Popup = vue.defineComponent({
    name: "TPopup",
    props: _objectSpread$2c(_objectSpread$2c({}, popupProps), {}, {
      expandAnimation: {
        type: Boolean
      }
    }),
    setup: function setup(props2, _ref) {
      var expose = _ref.expose;
      var _toRefs = vue.toRefs(props2),
        visible = _toRefs.visible,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerVisible = _useVModel2[0],
        setInnerVisible = _useVModel2[1];
      var popper;
      var timeoutId;
      var hasDocumentEvent = false;
      var visibleState = vue.ref(0);
      var mouseInRange = vue.ref(false);
      var contentClicked = vue.ref(false);
      var triggerEl = vue.ref(null);
      var overlayEl = vue.ref(null);
      var popperEl = vue.ref(null);
      var containerRef = vue.ref(null);
      var parent = vue.inject(injectionKey, void 0);
      var prefixCls = usePrefixClass("popup");
      var _useCommonClassName = useCommonClassName$2(),
        commonCls = _useCommonClassName.STATUS;
      var overlayCls = vue.computed(function () {
        var _ref2;
        return ["".concat(prefixCls.value, "__content"), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(prefixCls.value, "__content--text"), typeof props2.content === "string"), _defineProperty$3(_ref2, "".concat(prefixCls.value, "__content--arrow"), props2.showArrow), _defineProperty$3(_ref2, commonCls.value.disabled, props2.disabled), _ref2), props2.overlayInnerClassName];
      });
      var hasTrigger = vue.computed(function () {
        return triggers.reduce(function (map, trigger2) {
          return _objectSpread$2c(_objectSpread$2c({}, map), {}, _defineProperty$3({}, trigger2, props2.trigger.includes(trigger2)));
        }, {});
      });
      var delay = vue.computed(function () {
        var _props2$delay, _delay2$;
        var delay2 = [].concat((_props2$delay = props2.delay) !== null && _props2$delay !== void 0 ? _props2$delay : [250, 150]);
        return {
          open: delay2[0],
          close: (_delay2$ = delay2[1]) !== null && _delay2$ !== void 0 ? _delay2$ : delay2[0]
        };
      });
      function getOverlayStyle() {
        var overlayStyle = props2.overlayStyle;
        if (!triggerEl.value || !overlayEl.value) return;
        if (typeof overlayStyle === "function") {
          return overlayStyle(triggerEl.value, overlayEl.value);
        }
        if (_typeof$2(overlayStyle) === "object") {
          return overlayStyle;
        }
      }
      function updateOverlayInnerStyle() {
        var overlayInnerStyle = props2.overlayInnerStyle;
        if (!triggerEl.value || !overlayEl.value) return;
        if (typeof overlayInnerStyle === "function") {
          setStyle$1(overlayEl.value, overlayInnerStyle(triggerEl.value, overlayEl.value));
        } else if (_typeof$2(overlayInnerStyle) === "object") {
          setStyle$1(overlayEl.value, overlayInnerStyle);
        }
      }
      function updatePopper() {
        if (!popperEl.value || !innerVisible.value) return;
        if (popper) {
          popper.update();
          return;
        }
        popper = createPopper(triggerEl.value, popperEl.value, {
          placement: getPopperPlacement(props2.placement),
          onFirstUpdate: function onFirstUpdate() {
            vue.nextTick(updatePopper);
          }
        });
      }
      function destroyPopper() {
        if (popper) {
          var _popper;
          (_popper = popper) === null || _popper === void 0 ? void 0 : _popper.destroy();
          popper = null;
        }
        if (props2.destroyOnClose) {
          var _containerRef$value;
          (_containerRef$value = containerRef.value) === null || _containerRef$value === void 0 ? void 0 : _containerRef$value.unmountContent();
        }
      }
      function emitVisible(visible2, context) {
        if (props2.disabled || visible2 === innerVisible.value) return;
        if (!visible2 && visibleState.value > 1) return;
        if (visible2 && mouseInRange.value) return;
        setInnerVisible(visible2, context);
      }
      function preventClosing(preventing) {
        parent === null || parent === void 0 ? void 0 : parent.preventClosing(preventing);
        if (preventing) {
          visibleState.value += 1;
        } else if (visibleState.value) {
          visibleState.value -= 1;
          if (!visibleState.value) {
            emitVisible(false, {});
            if (parent !== null && parent !== void 0 && parent.hasTrigger.value.hover && !(parent !== null && parent !== void 0 && parent.mouseInRange)) {
              parent.emitVisible(false, {});
            }
          }
        }
      }
      function handleToggle(context) {
        emitVisible(!innerVisible.value, context);
      }
      function handleOpen(context) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(function () {
          emitVisible(true, context);
        }, hasTrigger.value.click ? 0 : delay.value.open);
      }
      function handleClose(context) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(function () {
          emitVisible(false, context);
        }, hasTrigger.value.click ? 0 : delay.value.close);
      }
      function handleDocumentClick(ev) {
        if (contentClicked.value) {
          setTimeout(function () {
            contentClicked.value = false;
          });
          return;
        }
        if (triggerEl.value.contains(ev.target)) return;
        visibleState.value = 0;
        emitVisible(false, {
          trigger: "document"
        });
      }
      function onMouseEnter() {
        mouseInRange.value = true;
        handleOpen({});
      }
      function onMouseLeave(ev) {
        if (visibleState.value > 1) {
          var rect = popperEl.value.getBoundingClientRect();
          if (ev.x > rect.x && ev.x < rect.x + rect.width && ev.y > rect.y && ev.y < rect.y + rect.height) return;
        }
        mouseInRange.value = false;
        handleClose({});
        if (parent !== null && parent !== void 0 && parent.mouseInRange) {
          parent.onMouseLeave(ev);
        }
      }
      var trigger = attachListeners(triggerEl);
      vue.watch(function () {
        return [props2.trigger, triggerEl.value];
      }, function () {
        if (!triggerEl.value) return;
        trigger.clean();
        if (hasTrigger.value.hover) {
          trigger.add("mouseenter", function () {
            return handleOpen({
              trigger: "trigger-element-hover"
            });
          });
          trigger.add("mouseleave", function () {
            return handleClose({
              trigger: "trigger-element-hover"
            });
          });
        } else if (hasTrigger.value.focus) {
          trigger.add("focusin", function () {
            return handleOpen({
              trigger: "trigger-element-focus"
            });
          });
          trigger.add("focusout", function () {
            return handleClose({
              trigger: "trigger-element-blur"
            });
          });
        } else if (hasTrigger.value.click) {
          trigger.add("click", function (e) {
            handleToggle({
              e: e,
              trigger: "trigger-element-click"
            });
          });
        } else if (hasTrigger.value["context-menu"]) {
          trigger.add("contextmenu", function (e) {
            e.preventDefault();
            e.button === 2 && handleToggle({
              trigger: "context-menu"
            });
          });
        }
      });
      vue.watch(function () {
        return [props2.overlayStyle, props2.overlayInnerStyle, overlayEl.value];
      }, function () {
        updateOverlayInnerStyle();
        updatePopper();
      });
      var updateScrollTop = vue.inject("updateScrollTop", function () {});
      vue.watch(function () {
        return [innerVisible.value, overlayEl.value];
      }, function () {
        if (innerVisible.value && overlayEl.value && updateScrollTop) {
          updateScrollTop === null || updateScrollTop === void 0 ? void 0 : updateScrollTop(overlayEl.value);
        }
      });
      vue.watch(function () {
        return props2.placement;
      }, function () {
        destroyPopper();
        updatePopper();
      });
      vue.watch(contentClicked, function (clicked) {
        if (parent) {
          parent.contentClicked.value = clicked;
        }
      });
      vue.watch(function () {
        return innerVisible.value;
      }, function (visible2) {
        if (visible2) {
          preventClosing(true);
          if (!hasDocumentEvent) {
            on$1(document, "click", handleDocumentClick, true);
            hasDocumentEvent = true;
          }
          if (triggerEl.value && hasTrigger.value.focus) {
            once(triggerEl.value, "keydown", function (ev) {
              if (ev.code === "Escape") {
                handleClose({
                  trigger: "keydown-esc"
                });
              }
            });
          }
        } else {
          preventClosing(false);
          off$1(document, "click", handleDocumentClick, true);
          hasDocumentEvent = false;
          mouseInRange.value = false;
        }
      });
      vue.onUnmounted(function () {
        if (innerVisible.value) {
          parent === null || parent === void 0 ? void 0 : parent.preventClosing(false);
        }
        destroyPopper();
        off$1(document, "click", handleDocumentClick, true);
        clearTimeout(timeoutId);
      });
      vue.provide(injectionKey, {
        preventClosing: preventClosing,
        emitVisible: emitVisible,
        contentClicked: contentClicked,
        mouseInRange: mouseInRange,
        onMouseLeave: onMouseLeave,
        hasTrigger: hasTrigger
      });
      expose({
        handleClose: handleClose,
        updatePopper: updatePopper,
        getOverlay: function getOverlay() {
          return overlayEl.value;
        }
      });
      return {
        containerRef: containerRef,
        innerVisible: innerVisible,
        triggerEl: triggerEl,
        overlayEl: overlayEl,
        popperEl: popperEl,
        prefixCls: prefixCls,
        overlayCls: overlayCls,
        hasTrigger: hasTrigger,
        contentClicked: contentClicked,
        updatePopper: updatePopper,
        destroyPopper: destroyPopper,
        getOverlayStyle: getOverlayStyle,
        updateOverlayInnerStyle: updateOverlayInnerStyle,
        emitVisible: emitVisible,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave
      };
    },
    render: function render() {
      var _this = this;
      var prefixCls = this.prefixCls,
        innerVisible = this.innerVisible,
        destroyOnClose = this.destroyOnClose,
        hasTrigger = this.hasTrigger,
        getOverlayStyle = this.getOverlayStyle,
        _onScroll = this.onScroll;
      var content = renderTNodeJSX(this, "content");
      var hidePopup = this.hideEmptyPopup && ["", void 0, null].includes(content);
      var overlay = innerVisible || !destroyOnClose ? vue.withDirectives(vue.createVNode("div", vue.mergeProps({
        "class": [prefixCls, this.overlayClassName],
        "ref": "popperEl",
        "style": [hidePopup && {
          visibility: "hidden",
          pointerEvents: "none"
        }, {
          zIndex: this.zIndex
        }, getOverlayStyle()],
        "onMousedown": function onMousedown() {
          _this.contentClicked = true;
        }
      }, hasTrigger.hover && {
        onMouseenter: this.onMouseEnter,
        onMouseleave: this.onMouseLeave
      }), [vue.createVNode("div", vue.mergeProps({
        "class": this.overlayCls,
        "ref": "overlayEl"
      }, _onScroll && {
        onScroll: function onScroll(e) {
          _onScroll({
            e: e
          });
        }
      }), [content, this.showArrow && vue.createVNode("div", {
        "class": "".concat(prefixCls, "__arrow")
      }, null)])]), [[vue.vShow, innerVisible]]) : null;
      return vue.createVNode(Container, {
        "ref": "containerRef",
        "forwardRef": function forwardRef(ref2) {
          return _this.triggerEl = ref2;
        },
        "onContentMounted": function onContentMounted() {
          if (innerVisible) {
            _this.updatePopper();
            _this.updateOverlayInnerStyle();
          }
        },
        "onResize": function onResize() {
          if (innerVisible) {
            _this.updatePopper();
          }
        },
        "visible": innerVisible,
        "attach": this.attach
      }, {
        content: function content() {
          return vue.createVNode(vue.Transition, {
            "name": _this.expandAnimation ? "".concat(prefixCls, "--animation-expand") : "".concat(prefixCls, "--animation"),
            "appear": true,
            "onEnter": _this.updatePopper,
            "onAfterLeave": _this.destroyPopper
          }, _isSlot$t(overlay) ? overlay : {
            "default": function _default() {
              return [overlay];
            }
          });
        },
        "default": function _default() {
          return renderContent(_this, "default", "triggerElement");
        }
      });
    }
  });

  var Popup = withInstall(_Popup);

  var _AnchorTarget = vue.defineComponent({
    name: "TAnchorTarget",
    props: props$14,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var _useConfig = useConfig("anchor"),
        globalConfig = _useConfig.globalConfig,
        classPrefix = _useConfig.classPrefix;
      var _useGlobalIcon = useGlobalIcon({
          FileCopyIcon: fileCopy
        }),
        FileCopyIcon = _useGlobalIcon.FileCopyIcon;
      var COMPONENT_NAME = usePrefixClass("anchor");
      var toCopyText = function toCopyText() {
        var a = document.createElement("a");
        a.href = "#".concat(props2.id);
        copyText(a.href);
        MessagePlugin.success(globalConfig.value.copySuccessText, 1e3);
      };
      return function () {
        var children = slots["default"];
        var TAG = props2.tag,
          id = props2.id;
        var className = ["".concat(COMPONENT_NAME.value, "__target")];
        var iconClassName = "".concat(classPrefix.value, "-copy");
        return vue.createVNode(TAG, {
          "id": id,
          "class": className
        }, {
          "default": function _default() {
            return [children && children(null), vue.createVNode(Popup, {
              "content": globalConfig.value.copyText,
              "placement": "top",
              "showArrow": true,
              "class": iconClassName
            }, {
              "default": function _default() {
                return [vue.createVNode(FileCopyIcon, {
                  "onClick": toCopyText
                }, null)];
              }
            })];
          }
        });
      };
    }
  });

  var Anchor = withInstall(_Anchor);
  var AnchorItem = withInstall(_AnchorItem);
  var AnchorTarget = withInstall(_AnchorTarget);

  var props$13 = {
    maxItemWidth: {
      type: String,
      "default": void 0
    },
    options: {
      type: Array
    },
    separator: {
      type: [String, Function]
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light"].includes(val);
      }
    }
  };

  var props$12 = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    href: {
      type: String,
      "default": ""
    },
    icon: {
      type: Function
    },
    maxWidth: {
      type: String,
      "default": void 0
    },
    replace: Boolean,
    router: {
      type: Object
    },
    target: {
      type: String,
      "default": "_self",
      validator: function validator(val) {
        if (!val) return true;
        return ["_blank", "_self", "_parent", "_top"].includes(val);
      }
    },
    to: {
      type: [String, Object]
    }
  };

  var props$11 = {
    delay: {
      type: Number
    },
    destroyOnClose: {
      type: Boolean,
      "default": true
    },
    duration: {
      type: Number
    },
    placement: {
      type: String,
      "default": "top"
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "primary", "success", "danger", "warning", "light"].includes(val);
      }
    }
  };

  var useMouse = function useMouse() {
    var x = vue.ref(0);
    var y = vue.ref(0);
    var onMouseMove = function onMouseMove(e) {
      x.value = e.clientX;
      y.value = e.clientY;
    };
    if (!isServer$1) {
      vue.onMounted(function () {
        window.addEventListener("mousemove", onMouseMove, {
          passive: true
        });
      });
      vue.onUnmounted(function () {
        window.removeEventListener("mousemove", onMouseMove);
      });
    }
    return {
      x: x,
      y: y
    };
  };

  function ownKeys$2c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2c(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Tooltip = vue.defineComponent({
    name: "TTooltip",
    props: _objectSpread$2b(_objectSpread$2b({}, popupProps), props$11),
    setup: function setup(props2, ctx) {
      var timer = vue.ref(null);
      var popupRef = vue.ref(null);
      var _toRefs = vue.toRefs(props2),
        visible = _toRefs.visible,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerVisible = _useVModel2[0],
        setInnerVisible = _useVModel2[1];
      var vm = vue.getCurrentInstance();
      var innerTooltipVisible = vue.ref(props2.visible || props2.defaultVisible);
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var _useMouse = useMouse(),
        x = _useMouse.x;
      var offsetX = vue.ref(x.value);
      vue.onMounted(function () {
        if (props2.duration && innerTooltipVisible.value) {
          timer.value = setTimeout(function () {
            innerTooltipVisible.value = false;
            clearTimeout(timer.value);
            timer.value = null;
          }, props2.duration);
        }
      });
      var onTipVisibleChange = function onTipVisibleChange(val, ctx2) {
        if (timer.value && (ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.trigger) !== "document") return;
        if (val) {
          offsetX.value = x.value;
        }
        setInnerVisible(val, ctx2);
      };
      var tooltipOverlayClassName = vue.computed(function () {
        return ["".concat(classPrefix.value, "-tooltip"), _defineProperty$3({}, "".concat(classPrefix.value, "-tooltip--").concat(props2.theme), props2.theme), props2.overlayClassName];
      });
      var popupProps2 = vue.computed(function () {
        return _objectSpread$2b(_objectSpread$2b({}, (vm === null || vm === void 0 ? void 0 : vm.vnode.props) || {}), {}, {
          placement: props2.placement === "mouse" ? "bottom-left" : props2.placement,
          showArrow: props2.placement === "mouse" ? false : props2.showArrow,
          content: function content() {
            return renderTNodeJSX("content");
          },
          "default": function _default() {
            return renderContent("default", "triggerElement");
          },
          overlayClassName: tooltipOverlayClassName.value,
          onVisibleChange: onTipVisibleChange
        });
      });
      var overlayInnerStyle = vue.computed(function () {
        if (props2.placement !== "mouse" || offsetX.value === 0) {
          return props2.overlayInnerStyle;
        }
        var offsetStyle = function offsetStyle(triggerEl) {
          return {
            transform: "translateX(".concat(offsetX.value - triggerEl.getBoundingClientRect().left, "px)")
          };
        };
        if (props2.overlayInnerStyle) {
          return function (triggerEl, popupEl) {
            return _objectSpread$2b(_objectSpread$2b({}, offsetStyle(triggerEl)), isFunction_1(props2.overlayInnerStyle) ? props2.overlayInnerStyle(triggerEl, popupEl) : props2.overlayInnerStyle);
          };
        }
        return offsetStyle;
      });
      vue.watch(function () {
        return innerTooltipVisible.value;
      }, function () {
        if (timer.value && !innerTooltipVisible.value) {
          clearTimeout(timer.value);
          timer.value = null;
        }
      });
      var onPopupUpdate = function onPopupUpdate() {
        var _popupRef$value, _popupRef$value$updat;
        (_popupRef$value = popupRef.value) === null || _popupRef$value === void 0 ? void 0 : (_popupRef$value$updat = _popupRef$value.updatePopper) === null || _popupRef$value$updat === void 0 ? void 0 : _popupRef$value$updat.call(_popupRef$value);
      };
      ctx.expose({
        updatePopper: onPopupUpdate
      });
      return function () {
        return vue.createVNode(Popup, vue.mergeProps({
          "ref": popupRef
        }, popupProps2.value, {
          "overlayInnerStyle": overlayInnerStyle.value,
          "visible": innerVisible.value
        }), null);
      };
    }
  });

  var Tooltip = withInstall(_Tooltip);

  function ownKeys$2b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2b(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$s(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var localTBreadcrumbOrigin = {
    separator: "",
    theme: "light",
    slots: {
      separator: ""
    },
    maxItemWidth: void 0
  };
  var _BreadcrumbItem = vue.defineComponent({
    name: "TBreadcrumbItem",
    props: _objectSpread$2a({}, props$12),
    setup: function setup(props2, _ref) {
      var _localTBreadcrumb$slo;
      var slots = _ref.slots,
        attrs = _ref.attrs;
      var breadcrumbText = vue.ref();
      var localTBreadcrumb = vue.inject("tBreadcrumb", localTBreadcrumbOrigin);
      var themeClassName = vue.ref(localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.theme);
      var isCutOff = vue.ref(false);
      var COMPONENT_NAME = usePrefixClass("breadcrumb__item");
      var separatorClass = usePrefixClass("breadcrumb__separator");
      var disableClass = usePrefixClass("is-disabled");
      var linkClass = usePrefixClass("link");
      var maxLengthClass = usePrefixClass("breadcrumb__inner");
      var textFlowClass = usePrefixClass("breadcrumb--text-overflow");
      var _useGlobalIcon = useGlobalIcon({
          ChevronRightIcon: chevronRight
        }),
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
      var maxWithStyle = vue.computed(function () {
        var maxItemWidth = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.maxItemWidth;
        var maxWith = props2.maxWidth || maxItemWidth || "120";
        return {
          maxWidth: "".concat(maxWith, "px")
        };
      });
      vue.onMounted(function () {
        isCutOff.value = isNodeOverflow(breadcrumbText.value);
      });
      vue.onBeforeUpdate(function () {
        isCutOff.value = isNodeOverflow(breadcrumbText.value);
      });
      var separatorPropContent = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.separator;
      var separatorSlot = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : (_localTBreadcrumb$slo = localTBreadcrumb.slots) === null || _localTBreadcrumb$slo === void 0 ? void 0 : _localTBreadcrumb$slo.separator;
      var separatorContent = separatorPropContent || separatorSlot || vue.createVNode(ChevronRightIcon, {
        color: "rgba(0,0,0,.3)"
      }, null);
      var _getCurrentInstance = vue.getCurrentInstance(),
        proxy = _getCurrentInstance.proxy;
      var bindEvent = function bindEvent(e) {
        if (!props2.disabled) {
          e.preventDefault();
          if (props2.href) {
            window.location.href = props2.href;
          }
          var router = props2.router || proxy.$root.$router;
          if (props2.to && router) {
            props2.replace ? router.replace(props2.to) : router.push(props2.to);
          }
        }
      };
      return function () {
        var renderTNodeJSX = useTNodeJSX();
        var itemClass = [COMPONENT_NAME.value, themeClassName.value];
        var textClass = [textFlowClass.value];
        if (props2.disabled) {
          textClass.push(disableClass.value);
        }
        var listeners = {
          onClick: function onClick(e) {
            var _props2$onClick;
            if (props2.disabled) {
              e.stopPropagation();
              return;
            }
            (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
              e: e
            });
          }
        };
        var textContent = vue.createVNode("span", {
          "class": maxLengthClass.value,
          style: maxWithStyle.value
        }, [renderTNodeJSX("icon"), vue.createVNode("span", {
          "ref": breadcrumbText,
          "class": "".concat(maxLengthClass.value, "-text")
        }, [renderTNodeJSX("default")])]);
        var itemContent = vue.createVNode("span", _objectSpread$2a({
          "class": textClass
        }, listeners), [textContent]);
        if ((props2.href || props2.to) && !props2.disabled) {
          textClass.push(linkClass.value);
          itemContent = vue.createVNode("a", vue.mergeProps({
            "class": textClass,
            "href": props2.href,
            "target": props2.target
          }, listeners, {
            "onClick": bindEvent
          }), [textContent]);
        }
        return vue.createVNode("div", vue.mergeProps({
          "class": itemClass
        }, attrs), [isCutOff.value ? vue.createVNode(Tooltip, {
          "content": function content() {
            return slots === null || slots === void 0 ? void 0 : slots["default"]();
          }
        }, _isSlot$s(itemContent) ? itemContent : {
          "default": function _default() {
            return [itemContent];
          }
        }) : itemContent, vue.createVNode("span", {
          "class": separatorClass.value
        }, [typeof separatorContent === "function" ? separatorContent() : separatorContent])]);
      };
    }
  });

  var _Breadcrumb = vue.defineComponent({
    name: "TBreadcrumb",
    props: props$13,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var _toRefs = vue.toRefs(props2),
        separator = _toRefs.separator,
        theme = _toRefs.theme,
        maxItemWidth = _toRefs.maxItemWidth;
      var COMPONENT_NAME = usePrefixClass("breadcrumb");
      vue.provide("tBreadcrumb", vue.reactive({
        separator: separator,
        theme: theme,
        slots: {
          separator: slots.separator
        },
        maxItemWidth: maxItemWidth
      }));
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        var content = renderTNodeJSX("default");
        if (props2.options && props2.options.length) {
          content = props2.options.map(function (option, index) {
            return vue.createVNode(_BreadcrumbItem, vue.mergeProps(option, {
              "key": index
            }), {
              "default": function _default() {
                return [option["default"] || option.content];
              }
            });
          });
        }
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [content]);
      };
    }
  });

  var Breadcrumb = withInstall(_Breadcrumb);
  var BreadcrumbItem = withInstall(_BreadcrumbItem);

  var dropdownItemProps = {
    active: Boolean,
    content: {
      type: [String, Function],
      "default": ""
    },
    disabled: Boolean,
    divider: Boolean,
    prefixIcon: {
      type: Function
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    value: {
      type: [String, Number, Object]
    },
    onClick: Function
  };

  var _excluded$6 = ["from", "to", "direction"];
  function ownKeys$2a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$29(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2a(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function omit$1(obj, fields) {
    var shallowCopy = _objectSpread$29({}, obj);
    for (var i = 0; i < fields.length; i++) {
      var key = fields[i];
      delete shallowCopy[key];
    }
    return shallowCopy;
  }
  function firstUpperCase$1(str) {
    return str.toLowerCase().replace(/( |^)[a-z]/g, function (_char) {
      return _char.toUpperCase();
    });
  }
  function getBackgroundColor(color) {
    if (typeof color === "string") {
      return color;
    }
    if (Array.isArray(color)) {
      if (color[0] && color[0][0] === "#") {
        color.unshift("90deg");
      }
      return "linear-gradient( ".concat(color.join(","), " )");
    }
    var from = color.from,
      to = color.to,
      _color$direction = color.direction,
      direction = _color$direction === void 0 ? "to right" : _color$direction,
      rest = _objectWithoutProperties$1(color, _excluded$6);
    var keys = Object.keys(rest);
    if (keys.length) {
      keys = keys.sort(function (a, b) {
        return parseFloat(a.substr(0, a.length - 1)) - parseFloat(b.substr(0, b.length - 1));
      });
      var tempArr = keys.map(function (key) {
        return "".concat(rest[key], " ").concat(key);
      });
      return "linear-gradient(".concat(direction, ", ").concat(tempArr.join(","), ")");
    }
    return "linear-gradient(".concat(direction, ", ").concat(from, ", ").concat(to, ")");
  }
  function getPropsApiByEvent(eventName) {
    return camelCase_1("on-".concat(eventName));
  }
  function getCharacterLength(str, maxCharacter) {
    var hasMaxCharacter = typeof maxCharacter === "number";
    if (!str || str.length === 0) {
      if (hasMaxCharacter) {
        return {
          length: 0,
          characters: str
        };
      }
      return 0;
    }
    var len = 0;
    for (var i = 0; i < str.length; i++) {
      var currentStringLength = 0;
      if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {
        currentStringLength = 2;
      } else {
        currentStringLength = 1;
      }
      if (hasMaxCharacter && len + currentStringLength > maxCharacter) {
        return {
          length: len,
          characters: str.slice(0, i)
        };
      }
      len += currentStringLength;
    }
    if (hasMaxCharacter) {
      return {
        length: len,
        characters: str
      };
    }
    return len;
  }
  function pxCompat(param) {
    return typeof param === "number" ? "".concat(param, "px") : param;
  }

  function ownKeys$29(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$28(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$29(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$29(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _DropdownItem = vue.defineComponent({
    name: "TDropdownItem",
    props: _objectSpread$28(_objectSpread$28({}, dropdownItemProps), {}, {
      maxColumnWidth: {
        type: [String, Number],
        "default": 100
      },
      minColumnWidth: {
        type: [String, Number],
        "default": 10
      },
      isSubmenu: Boolean
    }),
    setup: function setup(props, _ref) {
      _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var itemRef = vue.ref();
      useRipple(props.isSubmenu ? null : itemRef);
      var prefixIcon = renderTNodeJSX("prefixIcon");
      var dropdownItemClass = usePrefixClass("dropdown__item");
      var handleItemClick = function handleItemClick(e) {
        var _props$onClick;
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, props.value, {
          e: e
        });
      };
      return function () {
        var _ref2;
        var classes = [dropdownItemClass.value, "".concat(dropdownItemClass.value, "--theme-").concat(props.theme), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(dropdownItemClass.value, "--active"), props.active), _defineProperty$3(_ref2, "".concat(dropdownItemClass.value, "--disabled"), props.disabled), _ref2)];
        return vue.createVNode("li", {
          "class": classes,
          "onClick": handleItemClick,
          "style": {
            maxWidth: pxCompat(props.maxColumnWidth),
            minWidth: pxCompat(props.minColumnWidth)
          },
          "ref": itemRef
        }, [props.prefixIcon ? vue.createVNode("div", {
          "class": "".concat(dropdownItemClass.value, "-icon")
        }, [prefixIcon]) : null, renderTNodeJSX("default")]);
      };
    }
  });

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach$1(array, iteratee) {
    var index = -1,
      length = array == null ? 0 : array.length;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  var _arrayEach = arrayEach$1;

  var arrayLikeKeys = _arrayLikeKeys,
    baseKeys = _baseKeys,
    isArrayLike = isArrayLike_1;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys$4(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  var keys_1 = keys$4;

  var copyObject$5 = _copyObject,
    keys$3 = keys_1;

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign$1(object, source) {
    return object && copyObject$5(source, keys$3(source), object);
  }
  var _baseAssign = baseAssign$1;

  var copyObject$4 = _copyObject,
    keysIn$3 = keysIn_1;

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssignIn$1(object, source) {
    return object && copyObject$4(source, keysIn$3(source), object);
  }
  var _baseAssignIn = baseAssignIn$1;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter$1(array, predicate) {
    var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  var _arrayFilter = arrayFilter$1;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray$2() {
    return [];
  }
  var stubArray_1 = stubArray$2;

  var arrayFilter = _arrayFilter,
    stubArray$1 = stubArray_1;

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function (object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols$1(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  var _getSymbols = getSymbols$3;

  var copyObject$3 = _copyObject,
    getSymbols$2 = _getSymbols;

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols$1(source, object) {
    return copyObject$3(source, getSymbols$2(source), object);
  }
  var _copySymbols = copySymbols$1;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush$3(array, values) {
    var index = -1,
      length = values.length,
      offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  var _arrayPush = arrayPush$3;

  var arrayPush$2 = _arrayPush,
    getPrototype = _getPrototype,
    getSymbols$1 = _getSymbols,
    stubArray = stubArray_1;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];
    while (object) {
      arrayPush$2(result, getSymbols$1(object));
      object = getPrototype(object);
    }
    return result;
  };
  var _getSymbolsIn = getSymbolsIn$2;

  var copyObject$2 = _copyObject,
    getSymbolsIn$1 = _getSymbolsIn;

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbolsIn$1(source, object) {
    return copyObject$2(source, getSymbolsIn$1(source), object);
  }
  var _copySymbolsIn = copySymbolsIn$1;

  var arrayPush$1 = _arrayPush,
    isArray$6 = isArray_1;

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray$6(object) ? result : arrayPush$1(result, symbolsFunc(object));
  }
  var _baseGetAllKeys = baseGetAllKeys$2;

  var baseGetAllKeys$1 = _baseGetAllKeys,
    getSymbols = _getSymbols,
    keys$2 = keys_1;

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys$2(object) {
    return baseGetAllKeys$1(object, keys$2, getSymbols);
  }
  var _getAllKeys = getAllKeys$2;

  var baseGetAllKeys = _baseGetAllKeys,
    getSymbolsIn = _getSymbolsIn,
    keysIn$2 = keysIn_1;

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn$2(object) {
    return baseGetAllKeys(object, keysIn$2, getSymbolsIn);
  }
  var _getAllKeysIn = getAllKeysIn$2;

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$4.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray$1(array) {
    var length = array.length,
      result = new array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty$5.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  var _initCloneArray = initCloneArray$1;

  var cloneArrayBuffer$1 = _cloneArrayBuffer;

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView$1(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$1(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  var _cloneDataView = cloneDataView$1;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp$1(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  var _cloneRegExp = cloneRegExp$1;

  var _Symbol$2 = _Symbol$6;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = _Symbol$2 ? _Symbol$2.prototype : undefined,
    symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol$1(symbol) {
    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
  }
  var _cloneSymbol = cloneSymbol$1;

  var cloneArrayBuffer = _cloneArrayBuffer,
    cloneDataView = _cloneDataView,
    cloneRegExp = _cloneRegExp,
    cloneSymbol = _cloneSymbol,
    cloneTypedArray = _cloneTypedArray;

  /** `Object#toString` result references. */
  var boolTag$3 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    mapTag$3 = '[object Map]',
    numberTag$3 = '[object Number]',
    regexpTag$2 = '[object RegExp]',
    setTag$3 = '[object Set]',
    stringTag$2 = '[object String]',
    symbolTag$2 = '[object Symbol]';
  var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$2 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag$1(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$2:
        return cloneArrayBuffer(object);
      case boolTag$3:
      case dateTag$2:
        return new Ctor(+object);
      case dataViewTag$2:
        return cloneDataView(object, isDeep);
      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return cloneTypedArray(object, isDeep);
      case mapTag$3:
        return new Ctor();
      case numberTag$3:
      case stringTag$2:
        return new Ctor(object);
      case regexpTag$2:
        return cloneRegExp(object);
      case setTag$3:
        return new Ctor();
      case symbolTag$2:
        return cloneSymbol(object);
    }
  }
  var _initCloneByTag = initCloneByTag$1;

  var getTag$3 = _getTag,
    isObjectLike$5 = isObjectLike_1;

  /** `Object#toString` result references. */
  var mapTag$2 = '[object Map]';

  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap$1(value) {
    return isObjectLike$5(value) && getTag$3(value) == mapTag$2;
  }
  var _baseIsMap = baseIsMap$1;

  var baseIsMap = _baseIsMap,
    baseUnary$3 = _baseUnary,
    nodeUtil$1 = _nodeUtil.exports;

  /* Node.js helper references. */
  var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap$1 = nodeIsMap ? baseUnary$3(nodeIsMap) : baseIsMap;
  var isMap_1 = isMap$1;

  var getTag$2 = _getTag,
    isObjectLike$4 = isObjectLike_1;

  /** `Object#toString` result references. */
  var setTag$2 = '[object Set]';

  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet$1(value) {
    return isObjectLike$4(value) && getTag$2(value) == setTag$2;
  }
  var _baseIsSet = baseIsSet$1;

  var baseIsSet = _baseIsSet,
    baseUnary$2 = _baseUnary,
    nodeUtil = _nodeUtil.exports;

  /* Node.js helper references. */
  var nodeIsSet = nodeUtil && nodeUtil.isSet;

  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet$1 = nodeIsSet ? baseUnary$2(nodeIsSet) : baseIsSet;
  var isSet_1 = isSet$1;

  var Stack$1 = _Stack,
    arrayEach = _arrayEach,
    assignValue$1 = _assignValue,
    baseAssign = _baseAssign,
    baseAssignIn = _baseAssignIn,
    cloneBuffer = _cloneBuffer.exports,
    copyArray = _copyArray,
    copySymbols = _copySymbols,
    copySymbolsIn = _copySymbolsIn,
    getAllKeys$1 = _getAllKeys,
    getAllKeysIn$1 = _getAllKeysIn,
    getTag$1 = _getTag,
    initCloneArray = _initCloneArray,
    initCloneByTag = _initCloneByTag,
    initCloneObject = _initCloneObject,
    isArray$5 = isArray_1,
    isBuffer$1 = isBuffer$5.exports,
    isMap = isMap_1,
    isObject$4 = isObject_1,
    isSet = isSet_1,
    keys$1 = keys_1,
    keysIn$1 = keysIn_1;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$2 = 1,
    CLONE_FLAT_FLAG$1 = 2,
    CLONE_SYMBOLS_FLAG$2 = 4;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    boolTag$2 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    errorTag$2 = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag$1 = '[object Map]',
    numberTag$2 = '[object Number]',
    objectTag$1 = '[object Object]',
    regexpTag$1 = '[object RegExp]',
    setTag$1 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag$1 = '[object Symbol]',
    weakMapTag = '[object WeakMap]';
  var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$2] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$1] = cloneableTags[numberTag$2] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$1] = cloneableTags[setTag$1] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag$2] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone$2(value, bitmask, customizer, key, object, stack) {
    var result,
      isDeep = bitmask & CLONE_DEEP_FLAG$2,
      isFlat = bitmask & CLONE_FLAT_FLAG$1,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$2;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject$4(value)) {
      return value;
    }
    var isArr = isArray$5(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag$1(value),
        isFunc = tag == funcTag || tag == genTag;
      if (isBuffer$1(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);
        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack$1());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (isSet(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone$2(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
      });
    }
    var keysFunc = isFull ? isFlat ? getAllKeysIn$1 : getAllKeys$1 : isFlat ? keysIn$1 : keys$1;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      assignValue$1(result, key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }
  var _baseClone = baseClone$2;

  var isArray$4 = isArray_1,
    isSymbol$2 = isSymbol_1;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey$1(value, object) {
    if (isArray$4(value)) {
      return false;
    }
    var type = _typeof$2(value);
    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol$2(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }
  var _isKey = isKey$1;

  var MapCache$1 = _MapCache;

  /** Error message constants. */
  var FUNC_ERROR_TEXT$2 = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize$1(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$2);
    }
    var memoized = function memoized() {
      var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;
      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize$1.Cache || MapCache$1)();
    return memoized;
  }

  // Expose `MapCache`.
  memoize$1.Cache = MapCache$1;
  var memoize_1 = memoize$1;

  var memoize = memoize_1;

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped$1(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });
    var cache = result.cache;
    return result;
  }
  var _memoizeCapped = memoizeCapped$1;

  var memoizeCapped = _memoizeCapped;

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath$1 = memoizeCapped(function (string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  var _stringToPath = stringToPath$1;

  var isArray$3 = isArray_1,
    isKey = _isKey,
    stringToPath = _stringToPath,
    toString$4 = toString_1;

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath$6(value, object) {
    if (isArray$3(value)) {
      return value;
    }
    return isKey(value, object) ? [value] : stringToPath(toString$4(value));
  }
  var _castPath = castPath$6;

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  function last$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }
  var last_1 = last$1;

  var isSymbol$1 = isSymbol_1;

  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey$4(value) {
    if (typeof value == 'string' || isSymbol$1(value)) {
      return value;
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
  }
  var _toKey = toKey$4;

  var castPath$5 = _castPath,
    toKey$3 = _toKey;

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet$3(object, path) {
    path = castPath$5(path, object);
    var index = 0,
      length = path.length;
    while (object != null && index < length) {
      object = object[toKey$3(path[index++])];
    }
    return index && index == length ? object : undefined;
  }
  var _baseGet = baseGet$3;

  var baseGet$2 = _baseGet,
    baseSlice$1 = _baseSlice;

  /**
   * Gets the parent value at `path` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path to get the parent value of.
   * @returns {*} Returns the parent value.
   */
  function parent$1(object, path) {
    return path.length < 2 ? object : baseGet$2(object, baseSlice$1(path, 0, -1));
  }
  var _parent = parent$1;

  var castPath$4 = _castPath,
    last = last_1,
    parent = _parent,
    toKey$2 = _toKey;

  /**
   * The base implementation of `_.unset`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The property path to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   */
  function baseUnset$1(object, path) {
    path = castPath$4(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey$2(last(path))];
  }
  var _baseUnset = baseUnset$1;

  var isPlainObject$1 = isPlainObject_1;

  /**
   * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
   * objects.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {string} key The key of the property to inspect.
   * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
   */
  function customOmitClone$1(value) {
    return isPlainObject$1(value) ? undefined : value;
  }
  var _customOmitClone = customOmitClone$1;

  var _Symbol$1 = _Symbol$6,
    isArguments$1 = isArguments_1,
    isArray$2 = isArray_1;

  /** Built-in value references. */
  var spreadableSymbol = _Symbol$1 ? _Symbol$1.isConcatSpreadable : undefined;

  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenable$1(value) {
    return isArray$2(value) || isArguments$1(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  var _isFlattenable = isFlattenable$1;

  var arrayPush = _arrayPush,
    isFlattenable = _isFlattenable;

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten$2(array, depth, predicate, isStrict, result) {
    var index = -1,
      length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten$2(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  var _baseFlatten = baseFlatten$2;

  var baseFlatten$1 = _baseFlatten;

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */
  function flatten$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten$1(array, 1) : [];
  }
  var flatten_1 = flatten$1;

  var flatten = flatten_1,
    overRest = _overRest,
    setToString = _setToString;

  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */
  function flatRest$2(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }
  var _flatRest = flatRest$2;

  var arrayMap$4 = _arrayMap,
    baseClone$1 = _baseClone,
    baseUnset = _baseUnset,
    castPath$3 = _castPath,
    copyObject$1 = _copyObject,
    customOmitClone = _customOmitClone,
    flatRest$1 = _flatRest,
    getAllKeysIn = _getAllKeysIn;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$1 = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG$1 = 4;

  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable property paths of `object` that are not omitted.
   *
   * **Note:** This method is considerably slower than `_.pick`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to omit.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.omit(object, ['a', 'c']);
   * // => { 'b': '2' }
   */
  var omit = flatRest$1(function (object, paths) {
    var result = {};
    if (object == null) {
      return result;
    }
    var isDeep = false;
    paths = arrayMap$4(paths, function (path) {
      path = castPath$3(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject$1(object, getAllKeysIn(object), result);
    if (isDeep) {
      result = baseClone$1(result, CLONE_DEEP_FLAG$1 | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG$1, customOmitClone);
    }
    var length = paths.length;
    while (length--) {
      baseUnset(result, paths[length]);
    }
    return result;
  });
  var omit_1 = omit;

  var props$10 = {
    direction: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right"].includes(val);
      }
    },
    disabled: Boolean,
    hideAfterItemClick: {
      type: Boolean,
      "default": true
    },
    maxColumnWidth: {
      type: [String, Number],
      "default": 100
    },
    maxHeight: {
      type: Number,
      "default": 300
    },
    minColumnWidth: {
      type: [String, Number],
      "default": 10
    },
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    placement: {
      type: String,
      "default": "bottom-left",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        if (!val) return true;
        return ["hover", "click", "focus", "context-menu"].includes(val);
      }
    },
    onClick: Function
  };

  function ownKeys$28(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$27(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$28(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$28(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _DropdownMenu = vue.defineComponent({
    name: "TDropdownMenu",
    props: _objectSpread$27({}, props$10),
    setup: function setup(props) {
      var dropdownClass = usePrefixClass("dropdown");
      var dropdownMenuClass = usePrefixClass("dropdown__menu");
      var _useGlobalIcon = useGlobalIcon({
          ChevronRightIcon: chevronRight,
          ChevronLeftIcon: chevronLeft
        }),
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
        ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon;
      var handleItemClick = function handleItemClick(options) {
        var _data$onClick, _props$onClick;
        var data = options.data,
          context = options.context;
        data === null || data === void 0 ? void 0 : (_data$onClick = data.onClick) === null || _data$onClick === void 0 ? void 0 : _data$onClick.call(data, data, context);
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, data, context);
      };
      var renderOptions = function renderOptions(data) {
        var _data$forEach;
        var arr = [];
        var renderContent;
        (_data$forEach = data.forEach) === null || _data$forEach === void 0 ? void 0 : _data$forEach.call(data, function (menu, idx) {
          var optionItem = _objectSpread$27({}, menu);
          if (optionItem.children) {
            var _ref;
            optionItem.children = renderOptions(optionItem.children);
            renderContent = vue.createVNode("div", {
              "key": idx
            }, [vue.createVNode(_DropdownItem, {
              "style": optionItem.style,
              "class": ["".concat(dropdownClass.value, "__item"), "".concat(dropdownClass.value, "__item--suffix"), optionItem["class"]],
              "value": optionItem.value,
              "theme": optionItem.theme,
              "active": optionItem.active,
              "prefixIcon": optionItem.prefixIcon,
              "disabled": optionItem.disabled,
              "minColumnWidth": props.minColumnWidth,
              "maxColumnWidth": props.maxColumnWidth,
              "isSubmenu": true
            }, {
              "default": function _default() {
                return [vue.createVNode("div", {
                  "class": "".concat(dropdownClass.value, "__item-content")
                }, [props.direction === "right" ? vue.createVNode(vue.Fragment, null, [vue.createVNode("span", {
                  "class": "".concat(dropdownClass.value, "__item-text")
                }, [optionItem.content]), vue.createVNode(ChevronRightIcon, {
                  "class": "".concat(dropdownClass.value, "__item-direction"),
                  "size": "16"
                }, null)]) : vue.createVNode(vue.Fragment, null, [vue.createVNode(ChevronLeftIcon, {
                  "class": "".concat(dropdownClass.value, "__item-direction"),
                  "size": "16"
                }, null), vue.createVNode("span", {
                  "class": "".concat(dropdownClass.value, "__item-text")
                }, [optionItem.content])])]), vue.createVNode("div", {
                  "class": ["".concat(dropdownClass.value, "__submenu"), (_ref = {}, _defineProperty$3(_ref, "".concat(dropdownClass.value, "__submenu--disabled"), optionItem.disabled), _defineProperty$3(_ref, "".concat(dropdownClass.value, "__submenu--").concat(props.direction), props.direction), _ref)],
                  "style": {
                    top: "".concat(idx * 30, "px")
                  }
                }, [vue.createVNode("ul", null, [optionItem.children])])];
              }
            }), optionItem.divider ? vue.createVNode(Divider, null, null) : null]);
          } else {
            renderContent = vue.createVNode("div", {
              "key": idx
            }, [vue.createVNode(_DropdownItem, {
              "style": optionItem.style,
              "class": ["".concat(dropdownClass.value, "__item"), optionItem["class"]],
              "value": optionItem.value,
              "theme": optionItem.theme,
              "active": optionItem.active,
              "prefixIcon": optionItem.prefixIcon,
              "disabled": optionItem.disabled,
              "minColumnWidth": props.minColumnWidth,
              "maxColumnWidth": props.maxColumnWidth,
              "onClick": optionItem.disabled || optionItem.children ? function () {
                return null;
              } : function (value, context) {
                return handleItemClick({
                  data: optionItem,
                  context: context
                });
              }
            }, {
              "default": function _default() {
                return [vue.createVNode("span", {
                  "class": "".concat(dropdownClass.value, "__item-text")
                }, [optionItem.content])];
              }
            }), optionItem.divider ? vue.createVNode(Divider, null, null) : null]);
          }
          arr.push(renderContent);
        });
        return arr;
      };
      return function () {
        return vue.createVNode("div", {
          "class": [dropdownMenuClass.value, "".concat(dropdownMenuClass.value, "--").concat(props.direction)],
          "style": {
            maxHeight: "".concat(props.maxHeight, "px")
          }
        }, [renderOptions(props.options)]);
      };
    }
  });

  function ownKeys$27(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$26(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$27(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$27(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var getOptionsFromChildren = function getOptionsFromChildren(menuGroup) {
    var _menuGroup$, _menuGroup$$type, _menuGroup$3, _menuGroup$4;
    if (!menuGroup) return [];
    if (((_menuGroup$ = menuGroup[0]) === null || _menuGroup$ === void 0 ? void 0 : (_menuGroup$$type = _menuGroup$.type) === null || _menuGroup$$type === void 0 ? void 0 : _menuGroup$$type.name) === "TDropdownMenu") {
      var _menuGroup$2, _menuGroup$2$children, _menuGroup$2$children2;
      var groupChildren = (_menuGroup$2 = menuGroup[0]) === null || _menuGroup$2 === void 0 ? void 0 : (_menuGroup$2$children = _menuGroup$2.children) === null || _menuGroup$2$children === void 0 ? void 0 : (_menuGroup$2$children2 = _menuGroup$2$children["default"]) === null || _menuGroup$2$children2 === void 0 ? void 0 : _menuGroup$2$children2.call(_menuGroup$2$children);
      if (Array.isArray(groupChildren)) {
        return getOptionsFromChildren(groupChildren);
      }
    }
    if (Array.isArray((_menuGroup$3 = menuGroup[0]) === null || _menuGroup$3 === void 0 ? void 0 : _menuGroup$3.children)) return getOptionsFromChildren((_menuGroup$4 = menuGroup[0]) === null || _menuGroup$4 === void 0 ? void 0 : _menuGroup$4.children);
    if (Array.isArray(menuGroup)) {
      return menuGroup.map(function (item) {
        var _item$children, _item$children$defaul, _groupChildren$filter, _groupChildren$filter2;
        var groupChildren = (_item$children = item.children) === null || _item$children === void 0 ? void 0 : (_item$children$defaul = _item$children["default"]) === null || _item$children$defaul === void 0 ? void 0 : _item$children$defaul.call(_item$children);
        var contentCtx = groupChildren === null || groupChildren === void 0 ? void 0 : (_groupChildren$filter = groupChildren.filter) === null || _groupChildren$filter === void 0 ? void 0 : _groupChildren$filter.call(groupChildren, function (v) {
          var _v$type;
          return !["TDropdownMenu", "TDropdownItem"].includes((_v$type = v.type) === null || _v$type === void 0 ? void 0 : _v$type.name);
        });
        var childrenCtx = groupChildren === null || groupChildren === void 0 ? void 0 : (_groupChildren$filter2 = groupChildren.filter) === null || _groupChildren$filter2 === void 0 ? void 0 : _groupChildren$filter2.call(groupChildren, function (v) {
          var _v$type2;
          return typeof v.children !== "string" && ["TDropdownMenu", "TDropdownItem"].includes((_v$type2 = v.type) === null || _v$type2 === void 0 ? void 0 : _v$type2.name);
        });
        return _objectSpread$26(_objectSpread$26({}, item.props), {}, {
          content: contentCtx || groupChildren,
          children: (childrenCtx === null || childrenCtx === void 0 ? void 0 : childrenCtx.length) > 0 ? getOptionsFromChildren(childrenCtx) : null
        });
      }).filter(function (v) {
        return !!v.content;
      });
    }
    return [];
  };
  function useDropdownOptions(props) {
    var _getChildComponentSlo, _getChildComponentSlo2, _getChildComponentSlo3, _getChildComponentSlo4, _instance$slots, _instance$slots$dropd;
    var getChildComponentSlots = useChildComponentSlots();
    var instance = vue.getCurrentInstance();
    var menuSlot = ((_getChildComponentSlo = getChildComponentSlots("DropdownMenu")) === null || _getChildComponentSlo === void 0 ? void 0 : (_getChildComponentSlo2 = _getChildComponentSlo[0]) === null || _getChildComponentSlo2 === void 0 ? void 0 : (_getChildComponentSlo3 = _getChildComponentSlo2.children) === null || _getChildComponentSlo3 === void 0 ? void 0 : (_getChildComponentSlo4 = _getChildComponentSlo3["default"]) === null || _getChildComponentSlo4 === void 0 ? void 0 : _getChildComponentSlo4.call(_getChildComponentSlo3)) || ((_instance$slots = instance.slots) === null || _instance$slots === void 0 ? void 0 : (_instance$slots$dropd = _instance$slots.dropdown) === null || _instance$slots$dropd === void 0 ? void 0 : _instance$slots$dropd.call(_instance$slots));
    var dropdownOptions = vue.computed(function () {
      if (props.options && props.options.length > 0) return props.options;
      return getOptionsFromChildren(menuSlot);
    });
    return dropdownOptions;
  }

  function ownKeys$26(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$25(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$26(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$26(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Dropdown = vue.defineComponent({
    name: "TDropdown",
    props: props$10,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
        _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("dropdown");
      var popupElem = vue.ref(null);
      var isPopupVisible = vue.ref(false);
      var manualCloseTimeout = vue.computed(function () {
        var _props2$popupProps;
        var delay = (_props2$popupProps = props2.popupProps) === null || _props2$popupProps === void 0 ? void 0 : _props2$popupProps.delay;
        if (typeof delay === "number") return delay + 10;
        if (isArray_1(delay)) return delay[1] + 10;
        return 160;
      });
      var handleMenuClick = function handleMenuClick(data, context) {
        var _props2$onClick;
        if (props2.hideAfterItemClick) {
          var _props2$popupProps2, _props2$popupProps2$o;
          setTimeout(function () {
            return isPopupVisible.value = false;
          }, manualCloseTimeout.value);
          (_props2$popupProps2 = props2.popupProps) === null || _props2$popupProps2 === void 0 ? void 0 : (_props2$popupProps2$o = _props2$popupProps2.onVisibleChange) === null || _props2$popupProps2$o === void 0 ? void 0 : _props2$popupProps2$o.call(_props2$popupProps2, false, context);
        }
        props2 === null || props2 === void 0 ? void 0 : (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, data, context);
      };
      var handleVisibleChange = function handleVisibleChange(visible, context) {
        var _props2$popupProps3, _props2$popupProps3$o;
        isPopupVisible.value = visible;
        (_props2$popupProps3 = props2.popupProps) === null || _props2$popupProps3 === void 0 ? void 0 : (_props2$popupProps3$o = _props2$popupProps3.onVisibleChange) === null || _props2$popupProps3$o === void 0 ? void 0 : _props2$popupProps3$o.call(_props2$popupProps3, visible, context);
      };
      return function () {
        var _renderTNodeJSX, _props2$popupProps4;
        var trigger = (_renderTNodeJSX = renderTNodeJSX("default")) === null || _renderTNodeJSX === void 0 ? void 0 : _renderTNodeJSX[0];
        var options = useDropdownOptions(props2);
        var popupParams = _objectSpread$25(_objectSpread$25(_objectSpread$25({}, attrs), {}, {
          disabled: props2.disabled,
          placement: props2.placement,
          trigger: props2.trigger
        }, omit_1(props2.popupProps, "onVisibleChange")), {}, {
          overlayInnerClassName: [COMPONENT_NAME.value, (_props2$popupProps4 = props2.popupProps) === null || _props2$popupProps4 === void 0 ? void 0 : _props2$popupProps4.overlayInnerClassName]
        });
        return vue.createVNode(Popup, vue.mergeProps({
          "destroyOnClose": true,
          "ref": popupElem,
          "visible": isPopupVisible.value,
          "onVisibleChange": handleVisibleChange,
          "expandAnimation": true
        }, popupParams), {
          "default": function _default() {
            return [trigger];
          },
          content: function content() {
            return vue.createVNode(_DropdownMenu, vue.mergeProps(omit_1(props2, "onClick"), {
              "options": options.value,
              "onClick": handleMenuClick
            }), null);
          }
        });
      };
    }
  });

  var Dropdown = withInstall(_Dropdown);
  var DropdownItem = withInstall(_DropdownItem);
  var DropdownMenu = withInstall(_DropdownMenu);

  var props$$ = {
    disabled: {
      type: [Boolean, Object]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    showCurrent: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    tips: {
      type: [Boolean, Object]
    },
    variant: {
      type: String,
      "default": "text",
      validator: function validator(val) {
        if (!val) return true;
        return ["text", "outline"].includes(val);
      }
    },
    onChange: Function
  };

  function ownKeys$25(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$24(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$25(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$25(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Jumper = vue.defineComponent({
    name: "TJumper",
    props: _objectSpread$24({}, props$$),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("jumper");
      var _useGlobalIcon = useGlobalIcon({
          ChevronLeftIcon: chevronLeft,
          RoundIcon: round$1,
          ChevronRightIcon: chevronRight,
          ChevronUpIcon: chevronUp,
          ChevronDownIcon: chevronDown
        }),
        ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
        RoundIcon = _useGlobalIcon.RoundIcon,
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
        ChevronUpIcon = _useGlobalIcon.ChevronUpIcon,
        ChevronDownIcon = _useGlobalIcon.ChevronDownIcon;
      var titleConfig = vue.computed(function () {
        if (isObject_1(props2.tips)) return props2.tips;
        if (props2.tips === true) return {
          prev: "\u4E0A\u4E00\u9875",
          current: "\u5F53\u524D",
          next: "\u4E0B\u4E00\u9875"
        };
        return {};
      });
      var disabledConfig = vue.computed(function () {
        if (isObject_1(props2.disabled)) return props2.disabled;
        if (props2.disabled === true) return {
          prev: true,
          current: true,
          next: true
        };
        return {
          prev: false,
          current: false,
          next: false
        };
      });
      return function () {
        var jumperClass = [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--outline"), props2.variant === "outline")];
        return vue.createVNode("div", {
          "class": jumperClass
        }, [vue.createVNode(Button, {
          "title": titleConfig.value.prev,
          "variant": props2.variant,
          "size": props2.size,
          "shape": "square",
          "onClick": function onClick(e) {
            var _props2$onChange;
            return (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, {
              e: e,
              trigger: "prev"
            });
          },
          "icon": props2.layout === "horizontal" ? function () {
            return vue.createVNode(ChevronLeftIcon, null, null);
          } : function () {
            return vue.createVNode(ChevronUpIcon, null, null);
          },
          "class": "".concat(COMPONENT_NAME.value, "__prev"),
          "disabled": disabledConfig.value.prev
        }, null), props2.showCurrent && vue.createVNode(Button, {
          "title": titleConfig.value.current,
          "variant": props2.variant,
          "size": props2.size,
          "shape": "square",
          "onClick": function onClick(e) {
            var _props2$onChange2;
            return (_props2$onChange2 = props2.onChange) === null || _props2$onChange2 === void 0 ? void 0 : _props2$onChange2.call(props2, {
              e: e,
              trigger: "current"
            });
          },
          "icon": function icon() {
            return vue.createVNode(RoundIcon, null, null);
          },
          "class": "".concat(COMPONENT_NAME.value, "__current"),
          "disabled": disabledConfig.value.current
        }, null), vue.createVNode(Button, {
          "title": titleConfig.value.next,
          "variant": props2.variant,
          "size": props2.size,
          "shape": "square",
          "onClick": function onClick(e) {
            var _props2$onChange3;
            return (_props2$onChange3 = props2.onChange) === null || _props2$onChange3 === void 0 ? void 0 : _props2$onChange3.call(props2, {
              e: e,
              trigger: "next"
            });
          },
          "icon": props2.layout === "horizontal" ? function () {
            return vue.createVNode(ChevronRightIcon, null, null);
          } : function () {
            return vue.createVNode(ChevronDownIcon, null, null);
          },
          "class": "".concat(COMPONENT_NAME.value, "__next"),
          "disabled": disabledConfig.value.next
        }, null)]);
      };
    }
  });

  var Jumper = withInstall(_Jumper);

  var props$_ = {
    collapsed: Boolean,
    expanded: {
      type: Array,
      "default": void 0
    },
    defaultExpanded: {
      type: Array,
      "default": []
    },
    expandMutex: Boolean,
    expandType: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "popup"].includes(val);
      }
    },
    logo: {
      type: Function
    },
    operations: {
      type: Function
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light", "dark"].includes(val);
      }
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    width: {
      type: [String, Number, Array],
      "default": "232px"
    },
    onChange: Function,
    onExpand: Function
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  var getTreePaths = function getTreePaths(node, val, ans) {
    if (!node) return;
    for (var i = 0; i < node.children.length; ++i) {
      var child = node.children[i];
      if (child.value === val) return [].concat(_toConsumableArray(ans), [node.value]);
      var target = getTreePaths(child, val, [].concat(_toConsumableArray(ans), [node.value]));
      if (target) return target;
    }
  };
  var getTreeSameParentNodes = function getTreeSameParentNodes(node, val) {
    if (!node) return [];
    for (var i = 0; i < node.children.length; ++i) {
      var child = node.children[i];
      if (child.value === val) return node.children;
      var target = getTreeSameParentNodes(child, val);
      if (target) return target;
    }
  };
  var DFS = function DFS(root, val) {
    if (root.value === val) return root;
    if (root.children.length > 0) {
      for (var i = 0, len = root.children.length; i < len; i++) {
        var res = DFS(root.children[i], val);
        if (res) return res;
      }
    }
  };
  var VMenu = /*#__PURE__*/function () {
    function VMenu(options) {
      _classCallCheck(this, VMenu);
      _defineProperty$3(this, "data", null);
      _defineProperty$3(this, "cache", /* @__PURE__ */new Set());
      _defineProperty$3(this, "isMutex", vue.ref(false));
      _defineProperty$3(this, "expandValues", null);
      var root = {
        value: null,
        parent: null,
        children: []
      };
      this.data = root;
      this.isMutex = options === null || options === void 0 ? void 0 : options.isMutex;
      this.expandValues = new Set(options === null || options === void 0 ? void 0 : options.expandValues);
    }
    _createClass(VMenu, [{
      key: "add",
      value: function add(item) {
        var value = item.value,
          parent = item.parent,
          vnode = item.vnode;
        var node = {
          value: value,
          parent: parent,
          children: [],
          vnode: vnode
        };
        this.cache.forEach(function (data, v2, set) {
          if (item.value === data.parent) {
            node.children.push(data);
            set["delete"](data);
          }
        });
        if (item.parent == null) {
          this.data.children.push(node);
          node.parent = this.data;
        } else if (this.data.children.length > 0) {
          var pNode = DFS(this.data, parent);
          if (pNode && !pNode.children.some(function (child) {
            return child.value === node.value;
          })) {
            pNode.children.push(node);
          } else {
            this.cache.add(node);
          }
        } else {
          this.cache.add(node);
        }
      }
    }, {
      key: "select",
      value: function select(val) {
        var activeValues = getTreePaths(this.data, val, []) || [];
        activeValues.push(val);
        return activeValues.filter(function (val2) {
          return val2 != null;
        });
      }
    }, {
      key: "expand",
      value: function expand(val) {
        var _this = this;
        if (this.expandValues.has(val)) {
          this.expandValues["delete"](val);
          return _toConsumableArray(this.expandValues);
        }
        this.expandValues.add(val);
        if (!this.isMutex.value) {
          return _toConsumableArray(this.expandValues);
        }
        var sameParentNodes = getTreeSameParentNodes(this.data, val) || [];
        var sameLevelSubmenuValues = new Set(sameParentNodes.filter(function (node) {
          var _node$children;
          return ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0 && node.value !== val;
        }).map(function (child) {
          return child.value;
        }));
        this.expandValues.forEach(function (val2) {
          var isHit = sameLevelSubmenuValues.has(val2);
          if (isHit) {
            _this.expandValues["delete"](val2);
          }
        });
        return _toConsumableArray(this.expandValues);
      }
    }, {
      key: "getChild",
      value: function getChild(value) {
        var target = DFS(this.data, value);
        return target ? target.children : [];
      }
    }]);
    return VMenu;
  }();

  var logSet = /* @__PURE__ */new Set();
  var log = {
    warn: function warn(componentName, message) {
      console.warn("TDesign ".concat(componentName, " Warn: ").concat(message));
    },
    warnOnce: function warnOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Warn: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.warn(msgContent);
    },
    error: function error(componentName, message) {
      console.error("TDesign ".concat(componentName, " Error: ").concat(message));
    },
    errorOnce: function errorOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Error: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.error(msgContent);
    },
    info: function info(componentName, message) {
      console.info("TDesign ".concat(componentName, " Info: ").concat(message));
    }
  };

  function useDefaultValue(value, defaultValue, onChange, propsName) {
    var _getCurrentInstance = vue.getCurrentInstance(),
      emit = _getCurrentInstance.emit,
      vnode = _getCurrentInstance.vnode;
    var internalValue = vue.ref();
    var vProps = vnode.props || {};
    var isVMP = Object.prototype.hasOwnProperty.call(vProps, propsName) || Object.prototype.hasOwnProperty.call(vProps, kebabCase_1(propsName));
    if (isVMP) {
      return [value, function (newValue) {
        emit("update:".concat(propsName), newValue);
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
      }];
    }
    internalValue.value = defaultValue;
    return [internalValue, function (newValue) {
      internalValue.value = newValue;
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
    }];
  }

  function ownKeys$24(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$23(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$24(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$24(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Menu = vue.defineComponent({
    name: "TMenu",
    props: _objectSpread$23(_objectSpread$23({}, props$_), {}, {
      onCollapsed: Function
    }),
    setup: function setup(props2, ctx) {
      var classPrefix = usePrefixClass();
      vue.watchEffect(function () {
        if (ctx.slots.options) {
          log.warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
        }
      });
      var mode = vue.ref(props2.expandType);
      var theme = vue.computed(function () {
        return props2.theme;
      });
      var isMutex = vue.computed(function () {
        return props2.expandMutex;
      });
      var menuClass = vue.computed(function () {
        return ["".concat(classPrefix.value, "-default-menu"), "".concat(classPrefix.value, "-menu--").concat(props2.theme), _defineProperty$3({}, "".concat(classPrefix.value, "-is-collapsed"), props2.collapsed)];
      });
      var innerClasses = vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu"), _defineProperty$3({}, "".concat(classPrefix.value, "-menu--scroll"), mode.value !== "popup"), "narrow-scrollbar"];
      });
      var expandWidth = vue.computed(function () {
        var width = props2.width;
        var format = function format(val) {
          return typeof val === "number" ? "".concat(val, "px") : val;
        };
        if (Array.isArray(width)) return width.map(function (item) {
          return format(item);
        });
        return [format(width), "64px"];
      });
      var styles = vue.computed(function () {
        return {
          height: "100%",
          width: props2.collapsed ? expandWidth.value[1] : expandWidth.value[0]
        };
      });
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        expanded = _toRefs.expanded;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        activeValue = _useVModel2[0],
        setActiveValue = _useVModel2[1];
      var _useDefaultValue = useDefaultValue(expanded, props2.defaultExpanded, props2.onExpand, "expanded"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        expandValues = _useDefaultValue2[0],
        setExpand = _useDefaultValue2[1];
      var activeValues = vue.ref([]);
      vue.watchEffect(function () {
        var _props2$onCollapsed;
        mode.value = props2.collapsed ? "popup" : props2.expandType;
        (_props2$onCollapsed = props2.onCollapsed) === null || _props2$onCollapsed === void 0 ? void 0 : _props2$onCollapsed.call(props2, {
          collapsed: props2.collapsed
        });
      });
      var vMenu = new VMenu({
        isMutex: isMutex,
        expandValues: expandValues.value ? _toConsumableArray(expandValues.value) : []
      });
      vue.provide("TdMenu", {
        activeValue: activeValue,
        activeValues: activeValues,
        expandValues: expandValues,
        mode: mode,
        theme: theme,
        isHead: false,
        vMenu: vMenu,
        select: function select(value2) {
          setActiveValue(value2);
        },
        open: function open(value2, type) {
          if (mode.value === "normal") {
            setExpand(vMenu.expand(value2));
          } else if (type === "add") {
            if (expandValues.value.indexOf(value2) === -1) {
              setExpand([].concat(_toConsumableArray(expandValues.value), [value2]));
            }
          } else if (type === "remove") {
            var index = expandValues.value.indexOf(value2);
            var tmp = _toConsumableArray(expandValues.value);
            tmp.splice(index, 1);
            setExpand(tmp);
          }
        }
      });
      vue.watch(function () {
        return props2.expanded;
      }, function (value2) {
        vMenu.expandValues = new Set(value2);
      });
      var updateActiveValues = function updateActiveValues(value2) {
        activeValues.value = vMenu.select(value2);
      };
      vue.watch(activeValue, updateActiveValues);
      vue.onMounted(function () {
        activeValues.value = vMenu.select(activeValue.value);
      });
      return {
        styles: styles,
        classPrefix: classPrefix,
        menuClass: menuClass,
        innerClasses: innerClasses,
        activeValue: activeValue,
        activeValues: activeValues,
        expandValues: expandValues
      };
    },
    render: function render() {
      var operations = renderContent(this, "operations", "options");
      var logo = renderTNodeJSX(this, "logo");
      return vue.createVNode("div", {
        "class": this.menuClass,
        "style": this.styles
      }, [vue.createVNode("div", {
        "class": "".concat(this.classPrefix, "-default-menu__inner")
      }, [logo && vue.createVNode("div", {
        "class": "".concat(this.classPrefix, "-menu__logo")
      }, [logo]), vue.createVNode("ul", {
        "class": this.innerClasses
      }, [renderContent(this, "default", "content")]), operations && vue.createVNode("div", {
        "class": "".concat(this.classPrefix, "-menu__operations")
      }, [operations])])]);
    }
  });

  var props$Z = {
    expanded: {
      type: Array,
      "default": void 0
    },
    defaultExpanded: {
      type: Array,
      "default": []
    },
    expandType: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "popup"].includes(val);
      }
    },
    logo: {
      type: Function
    },
    operations: {
      type: Function
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light", "dark"].includes(val);
      }
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onChange: Function,
    onExpand: Function
  };

  var tabPanelProps = {
    "default": {
      type: Function
    },
    destroyOnHide: {
      type: Boolean,
      "default": true
    },
    disabled: Boolean,
    label: {
      type: [String, Function]
    },
    panel: {
      type: [String, Function]
    },
    removable: Boolean,
    value: {
      type: [String, Number]
    },
    onRemove: Function
  };

  var TDisplayNoneElementRefresh = "t-display-none-element-refresh";
  function useDestroyOnClose() {
    var refresh = vue.ref(0);
    vue.provide(TDisplayNoneElementRefresh, refresh);
    vue.onUpdated(function () {
      refresh.value += 1;
    });
  }

  function ownKeys$23(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$22(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$23(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$23(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _TabPanel = vue.defineComponent({
    name: "TTabPanel",
    props: _objectSpread$22({}, tabPanelProps),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("tab-panel");
      var renderTNodeContent = useContent();
      useDestroyOnClose();
      var tabs = vue.inject("tabs");
      return function () {
        var isActive = props2.value === tabs.value.value;
        if (props2.destroyOnHide && !isActive) return null;
        return vue.withDirectives(vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [renderTNodeContent("default", "panel")]), [[vue.vShow, isActive]]);
      };
    }
  });

  var root = _root;

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now$1 = function now() {
    return root.Date.now();
  };
  var now_1 = now$1;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex$1(string) {
    var index = string.length;
    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }
  var _trimmedEndIndex = trimmedEndIndex$1;

  var trimmedEndIndex = _trimmedEndIndex;

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim$1(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
  }
  var _baseTrim = baseTrim$1;

  var baseTrim = _baseTrim,
    isObject$3 = isObject_1,
    isSymbol = isSymbol_1;

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber$3(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject$3(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject$3(other) ? other + '' : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  var toNumber_1 = toNumber$3;

  var isObject$2 = isObject_1,
    now = now_1,
    toNumber$2 = toNumber_1;

  /** Error message constants. */
  var FUNC_ERROR_TEXT$1 = 'Expected a function';

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$2 = Math.max,
    nativeMin$1 = Math.min;

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce$1(func, wait, options) {
    var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    wait = toNumber$2(wait) || 0;
    if (isObject$2(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax$2(toNumber$2(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
      var args = lastArgs,
        thisArg = lastThis;
      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time = now();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }
    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
      return timerId === undefined ? result : trailingEdge(now());
    }
    function debounced() {
      var time = now(),
        isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;
      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }
  var debounce_1 = debounce$1;

  var props$Y = {
    addable: Boolean,
    disabled: Boolean,
    dragSort: Boolean,
    list: {
      type: Array
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "top", "bottom", "right"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "card"].includes(val);
      }
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onAdd: Function,
    onChange: Function,
    onDragSort: Function,
    onRemove: Function
  };

  var getDomWidth = function getDomWidth(dom) {
    return (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
  };
  var tabBase = {
    calcScrollLeft: function calcScrollLeft(elements, scrollLeft) {
      var container = elements.navsContainer;
      var wrap = elements.navsWrap;
      var rightOperations = elements.rightOperations;
      var rightOperationsZoneWidth = getDomWidth(rightOperations);
      if (!wrap || !container) return scrollLeft;
      var containerWidth = getDomWidth(container);
      var wrapWidth = getDomWidth(wrap);
      if (wrapWidth <= containerWidth) {
        return 0;
      }
      if (scrollLeft + containerWidth - rightOperationsZoneWidth > wrapWidth) {
        return wrapWidth + rightOperationsZoneWidth - containerWidth;
      }
      return scrollLeft;
    },
    calculateCanToLeft: function calculateCanToLeft(depElement, scrollLeft, placement) {
      if (["left", "right"].includes(placement.toLowerCase())) {
        return false;
      }
      var container = depElement.navsContainer,
        wrap = depElement.navsWrap,
        leftOperations = depElement.leftOperations,
        toLeftBtn = depElement.toLeftBtn;
      if (!wrap || !container) {
        return false;
      }
      var leftOperationsZoneWidth = getDomWidth(leftOperations);
      var leftIconWidth = getDomWidth(toLeftBtn);
      return scrollLeft + Math.round(leftOperationsZoneWidth - leftIconWidth) > 0;
    },
    calculateCanToRight: function calculateCanToRight(depElement, scrollLeft, placement) {
      if (["left", "right"].includes(placement.toLowerCase())) {
        return false;
      }
      var container = depElement.navsContainer,
        wrap = depElement.navsWrap,
        rightOperations = depElement.rightOperations,
        toRightBtn = depElement.toRightBtn;
      if (!wrap || !container) {
        return false;
      }
      var rightOperationsZoneWidth = getDomWidth(rightOperations);
      var rightIconWidth = getDomWidth(toRightBtn);
      return scrollLeft + getDomWidth(container) - (rightOperationsZoneWidth - rightIconWidth) - getDomWidth(wrap) < -1;
    },
    moveActiveTabIntoView: function moveActiveTabIntoView(depElement, scrollLeft) {
      var activeTab = depElement.activeTab,
        container = depElement.navsContainer,
        navsWrap = depElement.navsWrap,
        leftOperations = depElement.leftOperations,
        toLeftBtn = depElement.toLeftBtn,
        rightOperations = depElement.rightOperations,
        toRightBtn = depElement.toRightBtn;
      if (!activeTab) return scrollLeft;
      var totalWidthBeforeActiveTab = activeTab.offsetLeft;
      if (!container) return scrollLeft;
      var _getLeftCoverWidth = function _getLeftCoverWidth() {
        var leftOperationsZoneWidth = getDomWidth(leftOperations);
        var leftIconWidth = getDomWidth(toLeftBtn);
        if (totalWidthBeforeActiveTab === 0) {
          return leftOperationsZoneWidth - leftIconWidth;
        }
        return leftOperationsZoneWidth;
      };
      var leftCoverWidth = _getLeftCoverWidth();
      var isCurrentTabHiddenInLeftZone = scrollLeft + leftCoverWidth > totalWidthBeforeActiveTab;
      if (isCurrentTabHiddenInLeftZone) {
        return totalWidthBeforeActiveTab - leftCoverWidth;
      }
      var activeTabWidth = activeTab.offsetWidth;
      if (!container || !navsWrap) return scrollLeft;
      var containerWidth = getDomWidth(container);
      var _getRightCoverWidth = function _getRightCoverWidth() {
        var rightOperationsZoneWidth = getDomWidth(rightOperations);
        var rightIconWidth = getDomWidth(toRightBtn);
        var wrapWidth = getDomWidth(navsWrap);
        if (Math.abs(totalWidthBeforeActiveTab + activeTabWidth - wrapWidth) < 1) {
          return rightOperationsZoneWidth - rightIconWidth;
        }
        return rightOperationsZoneWidth;
      };
      var rightCoverWidth = _getRightCoverWidth();
      var isHiddenInRightZone = scrollLeft + containerWidth - rightCoverWidth < totalWidthBeforeActiveTab + activeTabWidth;
      if (isHiddenInRightZone) {
        return totalWidthBeforeActiveTab + activeTabWidth - containerWidth + rightCoverWidth;
      }
      return scrollLeft;
    },
    scrollToLeft: function scrollToLeft(depElement, scrollLeft) {
      var container = depElement.navsContainer,
        leftOperations = depElement.leftOperations,
        toLeftBtn = depElement.toLeftBtn;
      if (!container) return 0;
      var leftOperationsZoneWidth = getDomWidth(leftOperations);
      var leftIconWidth = getDomWidth(toLeftBtn);
      var containerWidth = getDomWidth(container);
      return Math.max(-(leftOperationsZoneWidth - leftIconWidth), scrollLeft - containerWidth);
    },
    scrollToRight: function scrollToRight(depElement, scrollLeft) {
      var container = depElement.navsContainer,
        wrap = depElement.navsWrap,
        rightOperations = depElement.rightOperations,
        toRightBtn = depElement.toRightBtn;
      var rightOperationsZoneWidth = getDomWidth(rightOperations);
      var rightIconWidth = getDomWidth(toRightBtn);
      var containerWidth = getDomWidth(container);
      var wrapWidth = getDomWidth(wrap);
      return Math.min(scrollLeft + containerWidth - rightOperationsZoneWidth - rightIconWidth, wrapWidth - containerWidth + rightOperationsZoneWidth - rightIconWidth);
    }
  };

  var TTabNavItem = vue.defineComponent({
    name: "TTabNavItem",
    props: {
      index: Number,
      active: {
        type: Boolean
      },
      theme: props$Y.theme,
      size: props$Y.size,
      placement: props$Y.placement,
      label: {
        type: null
      },
      disabled: tabPanelProps.disabled,
      removable: tabPanelProps.removable,
      value: tabPanelProps.value,
      onClick: Function,
      onRemove: Function
    },
    setup: function setup(props) {
      var itemRef = vue.ref();
      useRipple(itemRef);
      var COMPONENT_NAME = usePrefixClass("tabs__nav-item");
      var _useGlobalIcon = useGlobalIcon({
          CloseIcon: close
        }),
        CloseIcon = _useGlobalIcon.CloseIcon;
      var classPrefix = usePrefixClass();
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var removeBtnClick = function removeBtnClick(_ref) {
        var e = _ref.e;
        e.stopPropagation();
        props.onRemove({
          e: e,
          value: props.value,
          index: props.index
        });
      };
      var onClickNav = function onClickNav(e) {
        if (props.disabled) return;
        props.onClick(e);
      };
      var navItemClass = vue.computed(function () {
        var _ref2;
        return _ref2 = {}, _defineProperty$3(_ref2, COMPONENT_NAME.value, true), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-tabs__nav--card"), props.theme === "card"), _defineProperty$3(_ref2, STATUS.value.disabled, props.disabled), _defineProperty$3(_ref2, STATUS.value.active, props.active), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-left"), props.placement === "left"), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-right"), props.placement === "right"), _defineProperty$3(_ref2, SIZE.value.medium, props.size === "medium"), _defineProperty$3(_ref2, SIZE.value.large, props.size === "large"), _ref2;
      });
      var renderCardItem = function renderCardItem() {
        return vue.createVNode("div", {
          "class": navItemClass.value,
          "onClick": onClickNav,
          "ref": itemRef
        }, [vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "-text-wrapper")
        }, [props.label]), props.removable && !props.disabled ? vue.createVNode(CloseIcon, {
          "class": "remove-btn",
          "onClick": removeBtnClick
        }, null) : null]);
      };
      var renderNormalItem = function renderNormalItem() {
        var _ref3;
        return vue.createVNode("div", {
          "class": navItemClass.value,
          "onClick": onClickNav
        }, [vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "-wrapper"), (_ref3 = {}, _defineProperty$3(_ref3, STATUS.value.disabled, props.disabled), _defineProperty$3(_ref3, STATUS.value.active, props.active), _ref3)],
          "ref": itemRef
        }, [vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "-text-wrapper")
        }, [props.label])]), props.removable && !props.disabled ? vue.createVNode(CloseIcon, {
          "class": "remove-btn",
          "onClick": removeBtnClick
        }, null) : null]);
      };
      return function () {
        return props.theme === "card" ? renderCardItem() : renderNormalItem();
      };
    }
  });

  var TTabNavBar = vue.defineComponent({
    props: {
      navs: {
        type: Array
      },
      placement: props$Y.placement,
      value: props$Y.value
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("tabs");
      var classPrefix = usePrefixClass();
      var navBarClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__bar"), "".concat(classPrefix.value, "-is-").concat(props.placement)];
      });
      var navBarStyle = vue.ref(null);
      var getStyle = function getStyle() {
        var _props$navs$i$el2, _ref3;
        var isVertical = ["left", "right"].includes(props.placement.toLowerCase());
        var _ref = isVertical ? ["height", "top"] : ["width", "left"],
          _ref2 = _slicedToArray(_ref, 2),
          sizePropName = _ref2[0],
          offsetPropName = _ref2[1];
        var offset = 0;
        var i = 0;
        for (; i < props.navs.length; i++) {
          var _props$navs$i, _props$navs$i$el;
          if (props.navs[i].props.value === props.value) {
            break;
          }
          offset += ((_props$navs$i = props.navs[i]) === null || _props$navs$i === void 0 ? void 0 : (_props$navs$i$el = _props$navs$i.el) === null || _props$navs$i$el === void 0 ? void 0 : _props$navs$i$el["client".concat(firstUpperCase$1(sizePropName))]) || 0;
        }
        if (!props.navs[i]) return {};
        return _ref3 = {}, _defineProperty$3(_ref3, offsetPropName, "".concat(offset, "px")), _defineProperty$3(_ref3, sizePropName, "".concat(((_props$navs$i$el2 = props.navs[i].el) === null || _props$navs$i$el2 === void 0 ? void 0 : _props$navs$i$el2["client".concat(firstUpperCase$1(sizePropName))]) || 0, "px")), _ref3;
      };
      vue.onMounted(function () {
        vue.nextTick(function () {
          navBarStyle.value = getStyle();
        });
      });
      vue.watch([function () {
        return props.navs;
      }, function () {
        return props.value;
      }, function () {
        return props.placement;
      }], function () {
        vue.nextTick(function () {
          navBarStyle.value = getStyle();
        });
      });
      return function () {
        return vue.createVNode("div", {
          "class": navBarClass.value,
          "style": navBarStyle.value
        }, null);
      };
    }
  });

  function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
  function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }
  function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  var traversalTabNavs = function traversalTabNavs(tabNavs, fn) {
    var _iterator = _createForOfIteratorHelper$3(tabNavs),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var itemNode = _step.value;
        if (itemNode.getAttribute("draggable")) {
          fn(itemNode);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };
  var handleTarget = function handleTarget(target, tabNavs) {
    var resultTarget;
    traversalTabNavs(tabNavs, function (itemNode) {
      if (itemNode.contains(target)) {
        resultTarget = itemNode;
      }
    });
    return resultTarget;
  };
  function useDragSort$1(props) {
    var navsWrap = null;
    var dragged;
    var enterTargets = [];
    var dragstart = function dragstart(event) {
      var target = event.target;
      dragged = target;
      target.style.opacity = "0.5";
    };
    var dragend = function dragend(event) {
      event.target.style.opacity = "";
    };
    var dragover = function dragover(event) {
      event.preventDefault();
    };
    var dragenter = function dragenter(event) {
      var target = handleTarget(event.target, navsWrap.children);
      if (target && target !== dragged) {
        target.firstChild.style.outline = "1px dashed #0052d9";
        if (!enterTargets.includes(target)) {
          enterTargets.push(target);
        }
      }
    };
    var dragleave = function dragleave(event) {
      var target = event.target;
      var _iterator2 = _createForOfIteratorHelper$3(enterTargets),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var enterTarget = _step2.value;
          if (!enterTarget.contains(target)) {
            enterTarget.firstChild.style.outline = "none";
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    };
    var drop = function drop(event) {
      event.preventDefault();
      traversalTabNavs(navsWrap.children, function (tabNav) {
        tabNav.firstChild.style.outline = "none";
      });
      var target = handleTarget(event.target, navsWrap.children);
      if (target && target.parentNode !== dragged) {
        var dragIndex = [].indexOf.call(navsWrap.children, dragged);
        var targetIndex = [].indexOf.call(navsWrap.children, target);
        if (targetIndex > dragIndex) {
          target = navsWrap.children[targetIndex + 1];
        }
        navsWrap.insertBefore(dragged, target);
        var currentIndex = props.theme === "card" ? dragIndex : dragIndex - 1;
        var endIndex = props.theme === "card" ? targetIndex : targetIndex - 1;
        props.onDragSort({
          currentIndex: currentIndex,
          current: props.panels[currentIndex].value,
          targetIndex: endIndex,
          target: props.panels[endIndex].value
        });
      }
    };
    function setNavsWrap(val) {
      navsWrap = val;
      navsWrap.addEventListener("dragstart", dragstart, false);
      navsWrap.addEventListener("dragend", dragend, false);
      navsWrap.addEventListener("dragover", dragover, false);
      navsWrap.addEventListener("dragenter", dragenter, false);
      document.addEventListener("dragleave", dragleave, false);
      document.addEventListener("mousemove", dragleave, false);
      navsWrap.addEventListener("drop", drop, false);
    }
    vue.onUnmounted(function () {
      navsWrap.removeEventListener("dragstart", dragstart);
      navsWrap.removeEventListener("dragend", dragend);
      navsWrap.removeEventListener("dragover", dragover);
      navsWrap.removeEventListener("dragenter", dragenter);
      document.removeEventListener("dragleave", dragleave);
      document.removeEventListener("mousemove", dragleave);
      navsWrap.removeEventListener("drop", drop);
    });
    return {
      setNavsWrap: setNavsWrap
    };
  }

  function ownKeys$22(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$21(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$22(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$22(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var calculateCanToLeft = tabBase.calculateCanToLeft,
    calculateCanToRight = tabBase.calculateCanToRight,
    calcScrollLeft = tabBase.calcScrollLeft,
    scrollToLeft = tabBase.scrollToLeft,
    scrollToRight = tabBase.scrollToRight,
    moveActiveTabIntoView = tabBase.moveActiveTabIntoView;
  var TTabNav = vue.defineComponent(_objectSpread$21(_objectSpread$21({
    name: "TTabNav"
  }, {
    resizeObserver: null
  }), {}, {
    props: {
      theme: props$Y.theme,
      panels: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      value: props$Y.value,
      placement: props$Y.placement,
      size: props$Y.size,
      disabled: props$Y.disabled,
      addable: props$Y.addable,
      onChange: props$Y.onChange,
      onAdd: props$Y.onAdd,
      onRemove: props$Y.onRemove,
      dragSort: props$Y.dragSort,
      onDragSort: props$Y.onDragSort
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("tabs");
      var _useGlobalIcon = useGlobalIcon({
          ChevronLeftIcon: chevronLeft,
          ChevronRightIcon: chevronRight,
          AddIcon: add$1
        }),
        ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
        AddIcon = _useGlobalIcon.AddIcon;
      var classPrefix = usePrefixClass();
      var _useCommonClassName = useCommonClassName$2(),
        SIZE = _useCommonClassName.SIZE;
      var scrollLeft = vue.ref(0);
      var canToLeft = vue.ref(false);
      var canToRight = vue.ref(false);
      var navsContainerRef = vue.ref();
      var navsWrapRef = vue.ref();
      var leftOperationsRef = vue.ref();
      var toLeftBtnRef = vue.ref();
      var rightOperationsRef = vue.ref();
      var toRightBtnRef = vue.ref();
      var activeTabRef = vue.ref();
      var getRefs = function getRefs() {
        return {
          navsContainer: navsContainerRef.value,
          navsWrap: navsWrapRef.value,
          leftOperations: leftOperationsRef.value,
          toLeftBtn: toLeftBtnRef.value,
          rightOperations: rightOperationsRef.value,
          toRightBtn: toRightBtnRef.value
        };
      };
      var wrapTransformStyle = vue.computed(function () {
        if (["left", "right"].includes(props.placement.toLowerCase())) return {};
        return {
          transform: "translate3d(".concat(-scrollLeft.value, "px, 0, 0)")
        };
      });
      var navsContainerStyle = vue.computed(function () {
        return props.addable ? {
          "min-height": "48px"
        } : null;
      });
      var iconBaseClass = vue.computed(function () {
        var _ref;
        return _ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "__btn"), true), _defineProperty$3(_ref, SIZE.value.medium, props.size === "medium"), _defineProperty$3(_ref, SIZE.value.large, props.size === "large"), _ref;
      });
      var leftIconClass = vue.computed(function () {
        return _objectSpread$21(_defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__btn--left"), true), iconBaseClass.value);
      });
      var rightIconClass = vue.computed(function () {
        return _objectSpread$21(_defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__btn--right"), true), iconBaseClass.value);
      });
      var addIconClass = vue.computed(function () {
        return _objectSpread$21(_defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__add-btn"), true), iconBaseClass.value);
      });
      var navContainerClass = vue.computed(function () {
        var _ref2;
        return _ref2 = {}, _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "__nav-container"), true), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "__nav--card"), props.theme === "card"), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-").concat(props.placement), true), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-addable"), props.addable), _ref2;
      });
      var navScrollContainerClass = vue.computed(function () {
        var _ref3;
        return _ref3 = {}, _defineProperty$3(_ref3, "".concat(COMPONENT_NAME.value, "__nav-scroll"), true), _defineProperty$3(_ref3, "".concat(classPrefix.value, "-is-scrollable"), canToLeft.value || canToRight.value), _ref3;
      });
      var navsWrapClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__nav-wrap"), "".concat(classPrefix.value, "-is-smooth"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-vertical"), props.placement === "left" || props.placement === "right")];
      });
      var totalAdjust = function totalAdjust() {
        adjustArrowDisplay();
        adjustScrollLeft();
      };
      vue.watch([scrollLeft, function () {
        return props.placement;
      }, function () {
        return props.panels;
      }], totalAdjust);
      useResize(debounce_1(totalAdjust), navsContainerRef.value);
      vue.onMounted(totalAdjust);
      var adjustScrollLeft = function adjustScrollLeft() {
        scrollLeft.value = calcScrollLeft(getRefs(), scrollLeft.value);
      };
      var adjustArrowDisplay = function adjustArrowDisplay() {
        canToLeft.value = calculateCanToLeft(getRefs(), scrollLeft.value, props.placement);
        canToRight.value = calculateCanToRight(getRefs(), scrollLeft.value, props.placement);
      };
      var handleScroll = function handleScroll(direction) {
        if (direction === "left") {
          scrollLeft.value = scrollToLeft(getRefs(), scrollLeft.value);
        } else {
          scrollLeft.value = scrollToRight(getRefs(), scrollLeft.value);
        }
      };
      var handleAddTab = function handleAddTab(e) {
        var _props$onAdd;
        (_props$onAdd = props.onAdd) === null || _props$onAdd === void 0 ? void 0 : _props$onAdd.call(props, {
          e: e
        });
      };
      var tabClick = function tabClick(event, nav) {
        var value = nav.value,
          disabled = nav.disabled;
        if (disabled || props.value === value) {
          return false;
        }
        props.onChange(value);
      };
      var removeBtnClick = function removeBtnClick(_ref5) {
        var e = _ref5.e,
          value = _ref5.value,
          index = _ref5.index;
        props.onRemove({
          e: e,
          value: value,
          index: index
        });
      };
      var setActiveTab = function setActiveTab(ref2) {
        if ((ref2 === null || ref2 === void 0 ? void 0 : ref2.value) === props.value && activeTabRef.value !== ref2.$el) {
          activeTabRef.value = ref2.$el;
          scrollLeft.value = moveActiveTabIntoView(_objectSpread$21({
            activeTab: activeTabRef.value
          }, getRefs()), scrollLeft.value);
        }
      };
      var _useDragSort = useDragSort$1(props),
        setNavsWrap = _useDragSort.setNavsWrap;
      vue.onMounted(function () {
        setNavsWrap(navsWrapRef.value);
      });
      var navs = vue.computed(function () {
        return props.panels.map(function (panel, index) {
          var _panel$children;
          var label;
          if (panel !== null && panel !== void 0 && (_panel$children = panel.children) !== null && _panel$children !== void 0 && _panel$children.label) {
            label = panel.children.label();
          } else if (typeof panel.label === "function") {
            label = panel.label(vue.h);
          } else {
            label = panel.label || "\u9009\u9879\u5361".concat(index + 1);
          }
          return vue.createVNode(TTabNavItem, {
            "ref": setActiveTab,
            "draggable": props.dragSort,
            "key": panel.value,
            "index": index,
            "theme": props.theme,
            "size": props.size,
            "placement": props.placement,
            "label": label,
            "active": panel.value === props.value,
            "disabled": props.disabled || panel.disabled,
            "removable": panel.removable,
            "value": panel.value,
            "onClick": function onClick(e) {
              return tabClick(e, panel);
            },
            "onRemove": removeBtnClick
          }, null);
        });
      });
      var renderArrows = function renderArrows() {
        return [vue.createVNode("div", {
          "ref": leftOperationsRef,
          "class": ["".concat(COMPONENT_NAME.value, "__operations"), "".concat(COMPONENT_NAME.value, "__operations--left")]
        }, [vue.createVNode(vue.Transition, {
          "name": "fade",
          "mode": "out-in",
          "appear": true
        }, {
          "default": function _default() {
            return [canToLeft.value ? vue.createVNode("div", {
              "ref": toLeftBtnRef,
              "class": leftIconClass.value,
              "onClick": function onClick() {
                return handleScroll("left");
              }
            }, [vue.createVNode(ChevronLeftIcon, null, null)]) : null];
          }
        })]), vue.createVNode("div", {
          "ref": rightOperationsRef,
          "class": ["".concat(COMPONENT_NAME.value, "__operations"), "".concat(COMPONENT_NAME.value, "__operations--right")]
        }, [vue.createVNode(vue.Transition, {
          "name": "fade",
          "mode": "out-in",
          "appear": true
        }, {
          "default": function _default() {
            return [canToRight.value ? vue.createVNode("div", {
              "ref": toRightBtnRef,
              "class": rightIconClass.value,
              "onClick": function onClick() {
                return handleScroll("right");
              }
            }, [vue.createVNode(ChevronRightIcon, null, null)]) : null];
          }
        }), props.addable ? vue.createVNode("div", {
          "class": addIconClass.value,
          "onClick": handleAddTab
        }, [vue.createVNode(AddIcon, null, null)]) : null])];
      };
      var renderNavs = function renderNavs() {
        return vue.createVNode("div", {
          "class": navContainerClass.value
        }, [vue.createVNode("div", {
          "class": navScrollContainerClass.value
        }, [vue.createVNode("div", {
          "ref": navsWrapRef,
          "class": navsWrapClass.value,
          "style": wrapTransformStyle.value
        }, [props.theme !== "card" && vue.createVNode(TTabNavBar, {
          "placement": props.placement,
          "value": props.value,
          "navs": navs.value
        }, null), navs.value])])]);
      };
      return function () {
        return vue.createVNode("div", {
          "ref": navsContainerRef,
          "class": ["".concat(COMPONENT_NAME.value, "__nav")],
          "style": navsContainerStyle.value
        }, [renderArrows(), renderNavs()]);
      };
    }
  }));

  var _Tabs = vue.defineComponent({
    name: "TTabs",
    props: props$Y,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("tabs");
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue || "", props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        tabValue = _useVModel2[0],
        setTabValue = _useVModel2[1];
      vue.provide("tabs", {
        value: tabValue
      });
      var onTabAdd = function onTabAdd(context) {
        var _props2$onAdd;
        (_props2$onAdd = props2.onAdd) === null || _props2$onAdd === void 0 ? void 0 : _props2$onAdd.call(props2, {
          e: context.e
        });
      };
      var onTabChange = function onTabChange(value2) {
        setTabValue(value2);
      };
      var onTabRemove = function onTabRemove(_ref) {
        var e = _ref.e,
          value2 = _ref.value,
          index = _ref.index;
        props2.onRemove({
          value: value2,
          index: index,
          e: e
        });
      };
      var getSlotPanels = function getSlotPanels() {
        var content = renderTNodeJSX("default");
        if (!content) return [];
        content = content.map(function (item) {
          if (item.children && Array.isArray(item.children)) return item.children;
          return item;
        }).flat().filter(function (item) {
          return item.type.name === "TTabPanel";
        });
        return content;
      };
      var renderHeader = function renderHeader() {
        var _props2$list, _ref2;
        var panels = ((_props2$list = props2.list) !== null && _props2$list !== void 0 && _props2$list.length ? props2.list : getSlotPanels()) || [];
        var panelsData = panels.map(function (item) {
          var selfItem = item;
          if (item.props) {
            Object.keys(item.props).forEach(function (key) {
              selfItem[key] = item.props[key];
            });
          }
          return selfItem;
        });
        var tabNavProps = {
          theme: props2.theme,
          value: tabValue.value,
          size: props2.size,
          disabled: props2.disabled,
          placement: props2.placement,
          addable: props2.addable,
          panels: panelsData,
          dragSort: props2.dragSort
        };
        return vue.createVNode("div", {
          "class": (_ref2 = {}, _defineProperty$3(_ref2, "".concat(classPrefix.value, "-tabs__header"), true), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-").concat(props2.placement), true), _ref2)
        }, [vue.createVNode(TTabNav, vue.mergeProps(tabNavProps, {
          "onDragSort": props2.onDragSort,
          "onChange": onTabChange,
          "onAdd": onTabAdd,
          "onRemove": onTabRemove
        }), null)]);
      };
      var renderContent = function renderContent() {
        var _props2$list2;
        var panels = getSlotPanels();
        if ((_props2$list2 = props2.list) !== null && _props2$list2 !== void 0 && _props2$list2.length) {
          return props2.list.map(function (item) {
            return vue.createVNode(_TabPanel, vue.mergeProps(item, {
              "onRemove": onTabRemove
            }), null);
          });
        }
        if (panels && panels.length) {
          return vue.createVNode("div", {
            "class": ["".concat(classPrefix.value, "-tabs__content")]
          }, [panels]);
        }
      };
      return function () {
        return vue.createVNode("div", {
          "class": [COMPONENT_NAME.value]
        }, [props2.placement !== "bottom" ? [renderHeader(), renderContent()] : [renderContent(), renderHeader()]]);
      };
    }
  });

  var Tabs = withInstall(_Tabs);
  var TabPanel = withInstall(_TabPanel);

  var props$X = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    icon: {
      type: Function
    },
    title: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    }
  };

  var FakeArrow = vue.defineComponent({
    name: "TFakeArrow",
    props: {
      isActive: {
        type: Boolean
      },
      overlayClassName: {
        type: [String, Object, Array]
      },
      overlayStyle: {
        type: Object || String
      }
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("fake-arrow");
      var classes = vue.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--active"), props.isActive), props.overlayClassName];
      });
      return {
        classes: classes
      };
    },
    render: function render() {
      return vue.createVNode("svg", {
        "class": this.classes,
        "width": "16",
        "height": "16",
        "viewBox": "0 0 16 16",
        "fill": "none",
        "xmlns": "http://www.w3.org/2000/svg",
        "style": this.overlayStyle
      }, [vue.createVNode("path", {
        "d": "M3.75 5.7998L7.99274 10.0425L12.2361 5.79921",
        "stroke": "black",
        "stroke-opacity": "0.9",
        "stroke-width": "1.3"
      }, null)]);
    }
  });

  function ownKeys$21(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$20(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$21(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$21(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Submenu = vue.defineComponent({
    name: "TSubmenu",
    props: props$X,
    setup: function setup(props2, ctx) {
      var classPrefix = usePrefixClass();
      var menu = vue.inject("TdMenu");
      var theme = menu.theme,
        activeValues = menu.activeValues,
        expandValues = menu.expandValues,
        isHead = menu.isHead,
        open = menu.open;
      var submenu = vue.inject("TdSubmenu", {});
      var setSubPopup = submenu.setSubPopup,
        closeParentPopup = submenu.closeParentPopup;
      var mode = vue.computed(function () {
        return ctx.attrs.expandType || menu.mode.value;
      });
      var menuItems = vue.ref([]);
      var isActive = vue.computed(function () {
        return activeValues.value.indexOf(props2.value) > -1;
      });
      var popupVisible = vue.ref(false);
      var isCursorInPopup = vue.ref(false);
      var rippleColor = vue.computed(function () {
        return theme.value === "light" ? "#E7E7E7" : "#383838";
      });
      var isOpen = vue.computed(function () {
        var _expandValues$value;
        if (mode.value === "popup") {
          return popupVisible.value;
        }
        return expandValues ? (_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.includes(props2.value) : false;
      });
      var isNested = vue.ref(false);
      var popupWrapperRef = vue.ref();
      var subPopupRef = vue.ref();
      var submenuRef = vue.ref();
      useRipple(submenuRef, rippleColor);
      var classes = vue.computed(function () {
        var _ref;
        return ["".concat(classPrefix.value, "-submenu"), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-opened"), isOpen.value), _ref)];
      });
      var popupClass = vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu__popup"), "".concat(classPrefix.value, "-menu__popup--").concat(theme.value), "".concat(classPrefix.value, "-is-").concat(isHead ? "horizontal" : "vertical"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-opened"), popupVisible.value), "narrow-scrollbar"];
      });
      var submenuClass = vue.computed(function () {
        var _ref3;
        return ["".concat(classPrefix.value, "-menu__item"), "".concat(classPrefix.value, "-menu__item-spacer"), "".concat(classPrefix.value, "-menu__item-spacer--").concat(isHead && !isNested.value ? "bottom" : "right"), (_ref3 = {}, _defineProperty$3(_ref3, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref3, "".concat(classPrefix.value, "-is-opened"), isOpen.value), _defineProperty$3(_ref3, "".concat(classPrefix.value, "-is-active"), isActive.value), _ref3)];
      });
      var subClass = vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu__sub"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-opened"), isOpen.value)];
      });
      var arrowClass = vue.computed(function () {
        return [_defineProperty$3({}, "".concat(classPrefix.value, "-fake-arrow--active"), isOpen.value)];
      });
      var passSubPopupRefToParent = function passSubPopupRefToParent(val) {
        if (typeof setSubPopup === "function") {
          setSubPopup(val);
        }
      };
      var handleMouseEnter = function handleMouseEnter() {
        if (props2.disabled) return;
        setTimeout(function () {
          if (!popupVisible.value) {
            open(props2.value);
            vue.nextTick().then(function () {
              passSubPopupRefToParent(popupWrapperRef.value);
            });
          }
          popupVisible.value = true;
        }, 0);
      };
      var targetInPopup = function targetInPopup(el) {
        return el === null || el === void 0 ? void 0 : el.classList.contains("".concat(classPrefix.value, "-menu__popup"));
      };
      var loopInPopup = function loopInPopup(el) {
        if (!el) return false;
        return targetInPopup(el) || loopInPopup(el.parentElement);
      };
      var handleMouseLeave = function handleMouseLeave(e) {
        setTimeout(function () {
          var inPopup = targetInPopup(e.relatedTarget);
          if (isCursorInPopup.value || inPopup) return;
          popupVisible.value = false;
        }, 0);
      };
      var handleMouseLeavePopup = function handleMouseLeavePopup(e) {
        var toElement = e.toElement,
          relatedTarget = e.relatedTarget;
        var target = toElement || relatedTarget;
        if (target === subPopupRef.value) return;
        var isSubmenu = function isSubmenu(el) {
          return el === submenuRef.value;
        };
        while (target !== null && target !== document && !isSubmenu(target)) {
          target = target.parentNode;
        }
        isCursorInPopup.value = false;
        if (!isSubmenu(target)) {
          popupVisible.value = false;
        }
        closeParentPopup === null || closeParentPopup === void 0 ? void 0 : closeParentPopup(e);
      };
      var handleEnterPopup = function handleEnterPopup() {
        isCursorInPopup.value = true;
      };
      var handleSubmenuItemClick = function handleSubmenuItemClick() {
        if (props2.disabled) return;
        open(props2.value);
      };
      vue.watch(popupVisible, function (visible) {
        menu.open(props2.value, visible ? "add" : "remove");
      });
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value;
      vue.provide("TdSubmenu", vue.reactive({
        value: value,
        addMenuItem: function addMenuItem(item) {
          menuItems.value.push(item);
          if (submenu) {
            submenu.addMenuItem(item);
          }
        },
        setSubPopup: function setSubPopup(ref2) {
          subPopupRef.value = ref2;
        },
        closeParentPopup: function closeParentPopup(e) {
          var related = e.relatedTarget;
          if (loopInPopup(related)) return;
          handleMouseLeavePopup(e);
        }
      }));
      vue.onMounted(function () {
        var _menu$vMenu;
        menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
          value: props2.value,
          parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
          vnode: ctx.slots["default"]
        });
        var instance = vue.getCurrentInstance();
        var node = instance.parent;
        while (node && !/^t(head)?menu/i.test((_node = node) === null || _node === void 0 ? void 0 : _node.type.name)) {
          var _node, _node2, _node3;
          if (/submenu/i.test((_node2 = node) === null || _node2 === void 0 ? void 0 : _node2.type.name)) {
            isNested.value = true;
            break;
          }
          node = (_node3 = node) === null || _node3 === void 0 ? void 0 : _node3.parent;
        }
      });
      return {
        classPrefix: classPrefix,
        menuItems: menuItems,
        mode: mode,
        theme: theme,
        isHead: isHead,
        isNested: isNested,
        classes: classes,
        subClass: subClass,
        arrowClass: arrowClass,
        popupClass: popupClass,
        submenuClass: submenuClass,
        submenuRef: submenuRef,
        popupWrapperRef: popupWrapperRef,
        popupVisible: popupVisible,
        isCursorInPopup: isCursorInPopup,
        handleEnterPopup: handleEnterPopup,
        handleMouseEnter: handleMouseEnter,
        handleMouseLeave: handleMouseLeave,
        handleMouseLeavePopup: handleMouseLeavePopup,
        handleSubmenuItemClick: handleSubmenuItemClick
      };
    },
    methods: {
      renderPopup: function renderPopup(triggerElement) {
        var _this = this;
        var placement = "right-top";
        if (!this.isNested && this.isHead) {
          placement = "bottom-left";
        }
        var overlayInnerStyle = this.isNested && this.isHead ? {
          marginLeft: "16px"
        } : _defineProperty$3({}, "margin-".concat(this.isHead ? "top" : "left"), "20px");
        var popupWrapper = vue.createVNode("div", {
          "ref": "popupWrapperRef",
          "class": ["".concat(this.classPrefix, "-menu__spacer"), "".concat(this.classPrefix, "-menu__spacer--").concat(!this.isNested && this.isHead ? "top" : "left")],
          "onMouseenter": this.handleEnterPopup,
          "onMouseleave": this.handleMouseLeavePopup
        }, [vue.createVNode("ul", {
          "class": "".concat(this.classPrefix, "-menu__popup-wrapper narrow-scrollbar")
        }, [renderContent(this, "default", "content")])]);
        var slots = {
          content: function content() {
            return popupWrapper;
          }
        };
        var realPopup = vue.createVNode(Popup, {
          "overlayInnerClassName": _toConsumableArray(this.popupClass),
          "visible": this.popupVisible,
          "placement": placement,
          "overlayInnerStyle": overlayInnerStyle
        }, _objectSpread$20({
          "default": function _default() {
            return [vue.createVNode("div", {
              "ref": "submenuRef",
              "class": _this.submenuClass
            }, [triggerElement])];
          }
        }, slots));
        return realPopup;
      },
      renderHeadSubmenu: function renderHeadSubmenu() {
        var icon = renderTNodeJSX(this, "icon");
        var normalSubmenu = [vue.createVNode("div", {
          "ref": "submenuRef",
          "class": this.submenuClass,
          "onClick": this.handleSubmenuItemClick
        }, [icon, vue.createVNode("span", {
          "class": ["".concat(this.classPrefix, "-menu__content")]
        }, [renderTNodeJSX(this, "title", {
          silent: true
        })])]), vue.createVNode("ul", {
          "style": "opacity: 0; width: 0; height: 0; overflow: hidden"
        }, [renderContent(this, "default", "content")])];
        var needRotate = this.mode === "popup" && this.isNested;
        var triggerElement = [icon, vue.createVNode("span", {
          "class": ["".concat(this.classPrefix, "-menu__content")]
        }, [renderTNodeJSX(this, "title", {
          silent: true
        })]), vue.createVNode(FakeArrow, {
          "overlayClassName": this.arrowClass,
          "overlayStyle": {
            transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
          }
        }, null)];
        return this.mode === "normal" ? normalSubmenu : this.renderPopup(triggerElement);
      },
      renderSubmenu: function renderSubmenu() {
        var hasContent = this.$slots.content || this.$slots["default"];
        var icon = renderTNodeJSX(this, "icon");
        var child = renderContent(this, "default", "content");
        var _getCurrentInstance = vue.getCurrentInstance(),
          parent = _getCurrentInstance.parent;
        var paddingLeft = 44;
        while (parent && parent.type.name !== "TMenu") {
          if (parent.type.name === "TSubmenu") {
            paddingLeft += 16;
          }
          parent = parent.parent;
        }
        var needRotate = this.mode === "popup" && this.isNested;
        var normalSubmenu = [vue.createVNode("div", {
          "ref": "submenuRef",
          "class": this.submenuClass,
          "onClick": this.handleSubmenuItemClick
        }, [icon, vue.createVNode("span", {
          "class": ["".concat(this.classPrefix, "-menu__content")]
        }, [renderTNodeJSX(this, "title", {
          silent: true
        })]), hasContent && vue.createVNode(FakeArrow, {
          "overlayClassName": this.arrowClass,
          "overlayStyle": {
            transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
          }
        }, null)]), vue.createVNode("ul", {
          "class": this.subClass,
          "style": {
            "--padding-left": "".concat(paddingLeft, "px")
          }
        }, [child])];
        var triggerElement = [icon, vue.createVNode("span", {
          "class": ["".concat(this.classPrefix, "-menu__content")]
        }, [renderTNodeJSX(this, "title", {
          silent: true
        })]), vue.createVNode(FakeArrow, {
          "overlayClassName": this.arrowClass,
          "overlayStyle": {
            transform: "rotate(".concat(needRotate ? -90 : 0, "deg)"),
            "margin-left": "auto"
          }
        }, null)];
        return this.mode === "normal" ? normalSubmenu : this.renderPopup(triggerElement);
      }
    },
    render: function render() {
      var child = null;
      var events = {};
      if (this.mode === "popup") {
        events = {
          onMouseenter: this.handleMouseEnter,
          onMouseleave: this.handleMouseLeave
        };
      }
      if (Object.keys(this.$slots).length > 0) {
        child = this.isHead ? this.renderHeadSubmenu() : this.renderSubmenu();
      }
      return vue.createVNode("li", vue.mergeProps({
        "class": this.classes
      }, events), [child]);
    }
  });

  function ownKeys$20(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$20(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$20(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$r(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _HeadMenu = vue.defineComponent({
    name: "THeadMenu",
    props: _objectSpread$1$({}, props$Z),
    setup: function setup(props2, ctx) {
      var classPrefix = usePrefixClass();
      vue.watchEffect(function () {
        if (ctx.slots.options) {
          log.warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
        }
      });
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        expanded = _toRefs.expanded;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        activeValue = _useVModel2[0],
        setActiveValue = _useVModel2[1];
      var _useDefaultValue = useDefaultValue(expanded, props2.defaultExpanded, props2.onExpand, "expanded"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        expandValues = _useDefaultValue2[0],
        setExpanded = _useDefaultValue2[1];
      var activeValues = vue.ref([]);
      var theme = vue.computed(function () {
        return props2.theme;
      });
      var menuClass = vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu"), "".concat(classPrefix.value, "-head-menu"), "".concat(classPrefix.value, "-menu--").concat(props2.theme)];
      });
      var mode = vue.ref(props2.expandType);
      var submenu = vue.reactive([]);
      var vMenu = new VMenu({
        isMutex: true,
        expandValues: expandValues.value
      });
      vue.provide("TdMenu", {
        mode: mode,
        theme: theme,
        vMenu: vMenu,
        isHead: true,
        expandValues: expandValues,
        activeValue: activeValue,
        activeValues: activeValues,
        select: function select(value2) {
          setActiveValue(value2);
        },
        open: function open(value2, type) {
          var expanded2 = _toConsumableArray(expandValues.value);
          var index = expanded2.indexOf(value2);
          if (mode.value === "popup") {
            if (type === "add") {
              if (index === -1) {
                expanded2.push(value2);
              }
            } else if (type === "remove") {
              expanded2.splice(index, 1);
            }
          } else if (mode.value === "normal" && value2 !== void 0) {
            expanded2.splice(0, 1);
            if (index === -1) {
              expanded2.push(value2);
            }
          }
          setExpanded(expanded2);
        }
      });
      var handleTabChange = function handleTabChange(value2) {
        setActiveValue(value2);
      };
      var handleSubmenuExpand = function handleSubmenuExpand(value2) {
        var ans = vMenu.getChild(value2);
        submenu.length = 0;
        submenu.push.apply(submenu, _toConsumableArray(ans));
      };
      vue.watch(expandValues, function (value2) {
        if (mode.value === "normal") {
          handleSubmenuExpand(value2[0]);
        }
      });
      var updateActiveValues = function updateActiveValues(value2) {
        activeValues.value = vMenu.select(value2);
      };
      vue.watch(activeValue, updateActiveValues);
      vue.watch(function () {
        return props2.expandType;
      }, function (value2) {
        mode.value = value2;
      });
      vue.onMounted(function () {
        var _expandValues$value;
        activeValues.value = vMenu.select(activeValue.value);
        if (((_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.length) > 0) {
          handleSubmenuExpand(expandValues.value[0]);
        }
      });
      var renderNormalSubmenu = function renderNormalSubmenu() {
        var _slot;
        if (submenu.length === 0) return null;
        return vue.createVNode("ul", {
          "class": ["".concat(classPrefix.value, "-head-menu__submenu"), "".concat(classPrefix.value, "-submenu")]
        }, [vue.createVNode(Tabs, {
          "value": activeValue.value,
          "onChange": handleTabChange
        }, _isSlot$r(_slot = submenu.map(function (item) {
          var _item$vnode$;
          return vue.createVNode(TabPanel, {
            "value": item.value,
            "label": (_item$vnode$ = item.vnode()[0]) === null || _item$vnode$ === void 0 ? void 0 : _item$vnode$.children
          }, null);
        })) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        })]);
      };
      var menuContainerRef = vue.ref();
      var menuRef = vue.ref();
      var innerRef = vue.ref();
      var logoRef = vue.ref();
      var operationRef = vue.ref();
      var getComputedCss = function getComputedCss(el, cssProperty) {
        var _getComputedStyle$css;
        return (_getComputedStyle$css = getComputedStyle(el)[cssProperty]) !== null && _getComputedStyle$css !== void 0 ? _getComputedStyle$css : "";
      };
      var getComputedCssValue = function getComputedCssValue(el, cssProperty) {
        return Number.parseInt(String(getComputedCss(el, cssProperty)), 10);
      };
      var calcMenuWidth = function calcMenuWidth() {
        var menuPaddingLeft = getComputedCssValue(menuContainerRef.value, "paddingLeft");
        var menuPaddingRight = getComputedCssValue(menuContainerRef.value, "paddingRight");
        var totalWidth = innerRef.value.clientWidth;
        if (logoRef.value) {
          var logoMarginLeft = getComputedCssValue(logoRef.value, "marginLeft");
          var logoMarginRight = getComputedCssValue(logoRef.value, "marginRight");
          totalWidth = totalWidth - logoRef.value.offsetWidth - logoMarginLeft - logoMarginRight;
        }
        if (operationRef.value) {
          var operationMarginLeft = getComputedCssValue(operationRef.value, "marginLeft");
          var operationMarginRight = getComputedCssValue(operationRef.value, "marginRight");
          totalWidth = totalWidth - operationRef.value.offsetWidth - operationMarginLeft - operationMarginRight;
        }
        return totalWidth - menuPaddingLeft - menuPaddingRight;
      };
      var formatContent = function formatContent() {
        var _ctx$slots$default, _ctx$slots, _ctx$slots$content, _ctx$slots2;
        var slot = ((_ctx$slots$default = (_ctx$slots = ctx.slots)["default"]) === null || _ctx$slots$default === void 0 ? void 0 : _ctx$slots$default.call(_ctx$slots)) || ((_ctx$slots$content = (_ctx$slots2 = ctx.slots).content) === null || _ctx$slots$content === void 0 ? void 0 : _ctx$slots$content.call(_ctx$slots2)) || [];
        if (menuRef.value && innerRef.value) {
          var _menuRef$value$childN;
          var validNodes = Array.from((_menuRef$value$childN = menuRef.value.childNodes) !== null && _menuRef$value$childN !== void 0 ? _menuRef$value$childN : []).filter(function (item) {
            return item.nodeName !== "#text" || item.nodeValue;
          });
          var menuWidth = calcMenuWidth();
          var menuItemMinWidth = 104;
          var remainWidth = menuWidth;
          var sliceIndex = validNodes.length;
          for (var index = 0; index < validNodes.length; index++) {
            var element = validNodes[index];
            remainWidth -= element.offsetWidth || 0;
            if (remainWidth < menuItemMinWidth) {
              sliceIndex = index;
              break;
            }
          }
          var defaultSlot = slot.slice(0, sliceIndex);
          var subMore = slot.slice(sliceIndex);
          if (subMore.length) {
            slot = defaultSlot.concat(vue.createVNode(_Submenu, {
              "expandType": "popup",
              "title": function title() {
                return vue.createVNode(ellipsis, null, null);
              }
            }, _isSlot$r(subMore) ? subMore : {
              "default": function _default() {
                return [subMore];
              }
            }));
          }
        }
        return slot;
      };
      return function () {
        var _props2$logo, _ctx$slots$logo, _ctx$slots3, _props2$operations, _ctx$slots$operations, _ctx$slots4, _ctx$slots$options, _ctx$slots5;
        var logo = ((_props2$logo = props2.logo) === null || _props2$logo === void 0 ? void 0 : _props2$logo.call(props2, vue.h)) || ((_ctx$slots$logo = (_ctx$slots3 = ctx.slots).logo) === null || _ctx$slots$logo === void 0 ? void 0 : _ctx$slots$logo.call(_ctx$slots3));
        var operations = ((_props2$operations = props2.operations) === null || _props2$operations === void 0 ? void 0 : _props2$operations.call(props2, vue.h)) || ((_ctx$slots$operations = (_ctx$slots4 = ctx.slots).operations) === null || _ctx$slots$operations === void 0 ? void 0 : _ctx$slots$operations.call(_ctx$slots4)) || ((_ctx$slots$options = (_ctx$slots5 = ctx.slots).options) === null || _ctx$slots$options === void 0 ? void 0 : _ctx$slots$options.call(_ctx$slots5));
        var content = formatContent();
        return vue.createVNode("div", {
          "class": menuClass.value
        }, [vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-head-menu__inner"),
          "ref": innerRef
        }, [logo && vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-menu__logo"),
          "ref": logoRef
        }, [logo]), vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-menu__container"),
          "ref": menuContainerRef
        }, [vue.createVNode("ul", {
          "class": "".concat(classPrefix.value, "-menu"),
          "ref": menuRef
        }, [content])]), operations && vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-menu__operations"),
          "ref": operationRef
        }, [operations])]), mode.value === "normal" && renderNormalSubmenu()]);
      };
    }
  });

  var props$W = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    href: {
      type: String,
      "default": ""
    },
    icon: {
      type: Function
    },
    replace: Boolean,
    router: {
      type: Object
    },
    target: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["_blank", "_self", "_parent", "_top"].includes(val);
      }
    },
    to: {
      type: [String, Object]
    },
    value: {
      type: [String, Number]
    },
    onClick: Function
  };

  function emitEvent(vm, eventName) {
    var emitEventMethodName;
    if (typeof eventName === "string") {
      emitEventMethodName = getPropsApiByEvent(eventName);
    }
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    if (typeof vm.$props[emitEventMethodName] === "function") {
      var _vm$$props;
      (_vm$$props = vm.$props)[emitEventMethodName].apply(_vm$$props, args);
    } else {
      vm.$emit.apply(vm, [eventName].concat(args));
    }
  }

  function ownKeys$1$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1$(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _MenuItem = vue.defineComponent({
    name: "TMenuItem",
    props: _objectSpread$1_({}, props$W),
    emits: ["click"],
    setup: function setup(props2, ctx) {
      var _toRefs = vue.toRefs(props2),
        href = _toRefs.href,
        _toRefs$target = _toRefs.target,
        target = _toRefs$target === void 0 ? "_self" : _toRefs$target;
      var classPrefix = usePrefixClass();
      var menu = vue.inject("TdMenu");
      var itemRef = vue.ref();
      useRipple(itemRef);
      var submenu = vue.inject("TdSubmenu", null);
      var active = vue.computed(function () {
        return menu.activeValue.value === props2.value;
      });
      var classes = vue.computed(function () {
        var _ref;
        return ["".concat(classPrefix.value, "-menu__item"), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-active"), active.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref, "".concat(classPrefix.value, "-menu__item--plain"), !ctx.slots.icon && !props2.icon), _defineProperty$3(_ref, "".concat(classPrefix.value, "-submenu__item"), !!submenu && !menu.isHead), _ref)];
      });
      vue.onMounted(function () {
        var _menu$vMenu;
        menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
          value: props2.value,
          parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
          vnode: ctx.slots["default"]
        });
      });
      return {
        classPrefix: classPrefix,
        menu: menu,
        active: active,
        classes: classes,
        itemRef: itemRef,
        href: href,
        target: target
      };
    },
    methods: {
      handleClick: function handleClick(e) {
        e.stopPropagation();
        if (this.disabled) return;
        this.menu.select(this.value);
        emitEvent(this, "click");
        if (this.to) {
          var router = this.router || this.$router;
          var methods = this.replace ? "replace" : "push";
          router[methods](this.to)["catch"](function (err) {
            if (err.name !== "NavigationDuplicated" && !err.message.includes("Avoided redundant navigation to current location")) {
              throw err;
            }
          });
        }
      }
    },
    render: function render() {
      return vue.createVNode("li", {
        "ref": "itemRef",
        "class": this.classes,
        "onClick": this.handleClick
      }, [renderTNodeJSX(this, "icon"), this.href ? vue.createVNode("a", {
        "href": this.href,
        "target": this.target,
        "className": "".concat(this.classPrefix, "-menu__item-link")
      }, [vue.createVNode("span", {
        "className": "".concat(this.classPrefix, "-menu__content")
      }, [renderContent(this, "default", "content")])]) : vue.createVNode("span", {
        "class": ["".concat(this.classPrefix, "-menu__content")]
      }, [renderContent(this, "default", "content")])]);
    }
  });

  var props$V = {
    title: {
      type: [String, Function]
    }
  };

  var _MenuGroup = vue.defineComponent({
    name: "TMenuGroup",
    props: props$V,
    setup: function setup() {
      var classPrefix = usePrefixClass();
      return {
        classPrefix: classPrefix
      };
    },
    render: function render() {
      var classPrefix = this.classPrefix;
      return vue.createVNode("div", {
        "class": "".concat(classPrefix, "-menu-group")
      }, [vue.createVNode("div", {
        "class": "".concat(classPrefix, "-menu-group__title")
      }, [this.title]), renderTNodeJSX(this, "default")]);
    }
  });

  var Menu = withInstall(_Menu);
  var HeadMenu = withInstall(_HeadMenu);
  var Submenu = withInstall(_Submenu);
  var MenuItem = withInstall(_MenuItem);
  var MenuGroup = withInstall(_MenuGroup);

  var baseGetTag$2 = _baseGetTag,
    isObjectLike$3 = isObjectLike_1;

  /** `Object#toString` result references. */
  var numberTag$1 = '[object Number]';

  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */
  function isNumber$1(value) {
    return typeof value == 'number' || isObjectLike$3(value) && baseGetTag$2(value) == numberTag$1;
  }
  var isNumber_1 = isNumber$1;

  var isNumber = isNumber_1;

  /**
   * Checks if `value` is `NaN`.
   *
   * **Note:** This method is based on
   * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
   * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
   * `undefined` and other non-number values.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   * @example
   *
   * _.isNaN(NaN);
   * // => true
   *
   * _.isNaN(new Number(NaN));
   * // => true
   *
   * isNaN(undefined);
   * // => true
   *
   * _.isNaN(undefined);
   * // => false
   */
  function isNaN$1(value) {
    // An `NaN` primitive is the only value that is not equal to itself.
    // Perform the `toStringTag` check first to avoid errors with some
    // ActiveX objects in IE.
    return isNumber(value) && value != +value;
  }
  var _isNaN = isNaN$1;

  var props$U = {
    align: {
      type: String,
      "default": "left",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "center", "right"].includes(val);
      }
    },
    allowInputOverMax: Boolean,
    autoWidth: Boolean,
    autocomplete: {
      type: String,
      "default": void 0
    },
    autofocus: Boolean,
    clearable: Boolean,
    disabled: Boolean,
    format: {
      type: Function
    },
    inputClass: {
      type: [String, Object, Array]
    },
    label: {
      type: [String, Function]
    },
    maxcharacter: {
      type: Number
    },
    maxlength: {
      type: Number
    },
    name: {
      type: String,
      "default": ""
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    prefixIcon: {
      type: Function
    },
    readonly: Boolean,
    showClearIconOnEmpty: Boolean,
    showLimitNumber: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tips: {
      type: [String, Function]
    },
    type: {
      type: String,
      "default": "text",
      validator: function validator(val) {
        if (!val) return true;
        return ["text", "number", "url", "tel", "password", "search", "submit", "hidden"].includes(val);
      }
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onCompositionend: Function,
    onCompositionstart: Function,
    onEnter: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onValidate: Function,
    onWheel: Function
  };

  function useIcon() {
    var instance = vue.getCurrentInstance();
    return function renderIconTNode(iconType, defaultIcons) {
      var iconContent;
      if (typeof instance.props[iconType] === "function") {
        iconContent = instance.props[iconType](vue.h);
      } else if (instance.slots[iconType]) {
        iconContent = instance.slots[iconType] && instance.slots[iconType](null)[0];
      } else if (defaultIcons) {
        var Component = defaultIcons[instance.props.theme];
        iconContent = vue.createVNode(Component, null, null);
      }
      return iconContent;
    };
  }

  function useCommonClassName() {
    var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;
    var sizeClassNames = {
      small: "".concat(classPrefix.value, "-size-s"),
      medium: "".concat(classPrefix.value, "-size-m"),
      large: "".concat(classPrefix.value, "-size-l"),
      "default": "",
      xs: "".concat(classPrefix.value, "-size-xs"),
      xl: "".concat(classPrefix.value, "-size-xl"),
      block: "".concat(classPrefix.value, "-size-full-width")
    };
    var statusClassNames = {
      loading: "".concat(classPrefix.value, "-is-loading"),
      loadMore: "".concat(classPrefix.value, "-is-load-more"),
      disabled: "".concat(classPrefix.value, "-is-disabled"),
      focused: "".concat(classPrefix.value, "-is-focused"),
      success: "".concat(classPrefix.value, "-is-success"),
      error: "".concat(classPrefix.value, "-is-error"),
      warning: "".concat(classPrefix.value, "-is-warning"),
      selected: "".concat(classPrefix.value, "-is-selected"),
      active: "".concat(classPrefix.value, "-is-active"),
      checked: "".concat(classPrefix.value, "-is-checked"),
      current: "".concat(classPrefix.value, "-is-current"),
      hidden: "".concat(classPrefix.value, "-is-hidden"),
      visible: "".concat(classPrefix.value, "-is-visible"),
      expanded: "".concat(classPrefix.value, "-is-expanded"),
      indeterminate: "".concat(classPrefix.value, "-is-indeterminate")
    };
    return {
      classPrefix: classPrefix,
      sizeClassNames: sizeClassNames,
      statusClassNames: statusClassNames,
      classNames: {
        size: sizeClassNames,
        status: statusClassNames
      }
    };
  }

  function ownKeys$1_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1_(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var useVirtualScroll = function useVirtualScroll(_ref) {
    var data = _ref.data,
      container = _ref.container,
      _ref$fixedHeight = _ref.fixedHeight,
      fixedHeight = _ref$fixedHeight === void 0 ? false : _ref$fixedHeight,
      _ref$lineHeight = _ref.lineHeight,
      lineHeight = _ref$lineHeight === void 0 ? 30 : _ref$lineHeight,
      _ref$bufferSize = _ref.bufferSize,
      bufferSize = _ref$bufferSize === void 0 ? 20 : _ref$bufferSize,
      _ref$threshold = _ref.threshold,
      threshold = _ref$threshold === void 0 ? 100 : _ref$threshold;
    var state = vue.reactive({
      visibleData: [],
      cachedHeight: [],
      cachedScrollY: []
    });
    var isVirtual = vue.computed(function () {
      return data.value.length > threshold;
    });
    var updateId = vue.ref(0);
    var trs = /* @__PURE__ */new Map();
    var visibleCount = 0;
    var beforeScrollTop = 0;
    var index = 0;
    var offset = 0;
    var start = 0;
    var last = 0;
    var reset = function reset() {
      data.value.forEach(function (item, i) {
        item.$index = i;
        if (fixedHeight) {
          state.cachedScrollY[i] = i * lineHeight;
        }
      });
      if (!fixedHeight) {
        state.cachedScrollY[data.value.length - 1] = void 0;
      }
    };
    reset();
    var scrollHeight = vue.computed(function () {
      var cachedHeight = state.cachedHeight;
      var length = cachedHeight.length;
      if (length) {
        var maxScrollY = cachedHeight.reduce(function (sum, v) {
          return sum + v || lineHeight;
        }, 0);
        if (cachedHeight.length === data.value.length) {
          return maxScrollY;
        }
        var average = maxScrollY / cachedHeight.length;
        return maxScrollY + (data.value.length - cachedHeight.length) * average;
      }
      return isVirtual.value ? data.value.length * lineHeight : 0;
    });
    var translateY = vue.computed(function () {
      var visibleData = state.visibleData;
      var firstRow = visibleData[0];
      if (firstRow) {
        return visibleData.length === 1 ? 0 : state.cachedScrollY[firstRow.$index];
      }
      return 0;
    });
    var updateVisibleData = function updateVisibleData() {
      last = Math.min(start + visibleCount + bufferSize * 2, data.value.length);
      state.visibleData = data.value.slice(start, last);
    };
    var calculateScrollY = function calculateScrollY() {
      var _anchorDom$getBoundin;
      var anchorDom = trs.get(index);
      if (!anchorDom) {
        return;
      }
      var anchorDomHeight = anchorDom === null || anchorDom === void 0 ? void 0 : (_anchorDom$getBoundin = anchorDom.getBoundingClientRect()) === null || _anchorDom$getBoundin === void 0 ? void 0 : _anchorDom$getBoundin.height;
      state.cachedScrollY[index] = container.value.scrollTop - offset;
      state.cachedHeight[index] = anchorDomHeight;
      for (var i = index + 1; i <= state.visibleData[state.visibleData.length - 1].$index; i++) {
        var _tr;
        var tr = trs.get(i);
        var _ref2 = ((_tr = tr) === null || _tr === void 0 ? void 0 : _tr.getBoundingClientRect()) || {},
          height = _ref2.height;
        state.cachedHeight[i] = height;
        var scrollY = state.cachedScrollY[i - 1] + state.cachedHeight[i - 1];
        state.cachedScrollY.splice(i, 1, scrollY);
      }
      for (var _i = index - 1; _i >= state.visibleData[0].$index; _i--) {
        var _tr3;
        var _tr2 = trs.get(_i);
        var _ref3 = ((_tr3 = _tr2) === null || _tr3 === void 0 ? void 0 : _tr3.getBoundingClientRect()) || {},
          _height = _ref3.height;
        state.cachedHeight[_i] = _height;
        var _scrollY = state.cachedScrollY[_i + 1] - state.cachedHeight[_i];
        state.cachedScrollY.splice(_i, 1, _scrollY);
      }
      if (state.cachedScrollY[0] > 0) {
        var distance = state.cachedScrollY[0];
        var length = Math.min(last, data.value.length);
        for (var _i2 = 0; _i2 < length; _i2++) {
          state.cachedScrollY.splice(_i2, 1, state.cachedScrollY[_i2] - distance);
        }
        var scrollTop = state.cachedScrollY[index - 1] ? state.cachedScrollY[index - 1] + offset : offset;
        container.value.scrollTop = scrollTop;
        beforeScrollTop = scrollTop;
      }
      if (state.cachedScrollY[start] < 0) {
        var s = state.cachedHeight.slice(0, Math.max(0, index)).reduce(function (sum, v) {
          return sum + v;
        }, 0) + offset;
        container.value.scrollTop = s;
        beforeScrollTop = s;
        if (s === 0) {
          index = 0;
          offset = 0;
        }
      }
      vue.nextTick(function () {
        var _container$value = container.value,
          scrollTop = _container$value.scrollTop,
          scrollHeight2 = _container$value.scrollHeight,
          clientHeight = _container$value.clientHeight;
        if (scrollTop + clientHeight === scrollHeight2) {
          for (var _i3 = last - 1; _i3 >= start; _i3--) {
            if (_i3 === last - 1) {
              state.cachedScrollY.splice(_i3, 1, scrollHeight2.value - state.cachedHeight[_i3]);
            } else {
              state.cachedScrollY.splice(_i3, 1, state.cachedScrollY[_i3 + 1] - state.cachedHeight[_i3]);
            }
          }
        }
      });
    };
    var handleScroll = function handleScroll() {
      if (!isVirtual.value) return;
      var scrollTop = container.value.scrollTop;
      var distance = scrollTop - beforeScrollTop;
      beforeScrollTop = scrollTop;
      distance += offset;
      var lastIndex = index;
      if (!distance) return;
      if (distance >= 0) {
        while (lastIndex < data.value.length && distance > (state.cachedHeight[lastIndex] || lineHeight)) {
          if (!state.cachedHeight[lastIndex]) {
            state.cachedHeight[lastIndex] = lineHeight;
          }
          distance -= state.cachedHeight[lastIndex];
          lastIndex++;
        }
        if (lastIndex >= data.value.length) {
          index = data.value.length - 1;
          offset = 0;
        } else {
          index = lastIndex;
          offset = distance;
        }
        var _container$value2 = container.value,
          clientHeight = _container$value2.clientHeight,
          scrollHeight2 = _container$value2.scrollHeight;
        if (scrollTop + clientHeight === scrollHeight2) {
          index = data.value.length - visibleCount + 1;
        }
        if (start <= index - bufferSize) {
          start = Math.min(data.value.length - visibleCount, index - bufferSize);
          if (start < 0) {
            start = 0;
          }
        }
      } else {
        while (distance < 0) {
          lastIndex--;
          if (!state.cachedHeight[lastIndex]) {
            state.cachedHeight[lastIndex] = lineHeight;
          }
          distance += state.cachedHeight[lastIndex];
        }
        if (lastIndex < 0) {
          index = 0;
          offset = 0;
        } else {
          index = lastIndex;
          offset = distance;
        }
        calculateScrollY();
        if (start > index - bufferSize) {
          start = Math.max(0, index - bufferSize);
        }
      }
      updateVisibleData();
    };
    !fixedHeight && vue.watch(updateId, calculateScrollY, {
      flush: "post"
    });
    var handleRowMounted = function handleRowMounted() {
      if (!isVirtual.value) return;
      updateId.value++;
    };
    vue.watch(data, function () {
      reset();
      state.visibleData = [];
      state.cachedScrollY = [];
      state.cachedHeight = [];
      beforeScrollTop = 0;
      index = 0;
      offset = 0;
      start = 0;
      trs.clear();
      if (data.value.length <= threshold) {
        state.visibleData = data.value;
      } else {
        updateVisibleData();
      }
      container.value && (container.value.scrollTop = 0);
    });
    var mounted = false;
    var refreshContainer = function refreshContainer() {
      if (mounted) {
        visibleCount = Math.ceil(container.value.offsetHeight / lineHeight);
        updateVisibleData();
      }
    };
    vue.onMounted(function () {
      if (!window || !window.IntersectionObserver) {
        return;
      }
      var ob = new window.IntersectionObserver(function (entries) {
        var entry = entries[0];
        if (entry.isIntersecting || entry.intersectionRatio) {
          mounted = true;
          isVirtual.value && refreshContainer();
          ob.unobserve(container.value);
        }
      });
      container.value && ob.observe(container.value);
    });
    return _objectSpread$1Z(_objectSpread$1Z({
      trs: trs,
      scrollHeight: scrollHeight
    }, vue.toRefs(state)), {}, {
      translateY: translateY,
      handleScroll: handleScroll,
      handleRowMounted: handleRowMounted,
      refreshContainer: refreshContainer,
      fixedHeight: fixedHeight,
      calculateScrollY: calculateScrollY
    });
  };

  var useCLASSNAMES$1 = function useCLASSNAMES() {
    var classPrefix = usePrefixClass();
    return vue.computed(function () {
      var form = "".concat(classPrefix.value, "-form");
      var input = "".concat(classPrefix.value, "-input");
      var is = "".concat(classPrefix.value, "-is");
      return {
        form: form,
        label: "".concat(form, "__label"),
        labelTop: "".concat(form, "__label--top"),
        inline: "".concat(form, "-inline"),
        formItem: "".concat(form, "__item"),
        formItemWithHelp: "".concat(form, "__item-with-help"),
        formItemWithExtra: "".concat(form, "__item-with-extra"),
        controls: "".concat(form, "__controls"),
        controlsContent: "".concat(form, "__controls-content"),
        status: "".concat(form, "__status"),
        extra: "".concat(input, "__extra"),
        help: "".concat(input, "__help"),
        success: "".concat(is, "-success"),
        successBorder: "".concat(form, "--success-border"),
        error: "".concat(is, "-error"),
        warning: "".concat(is, "-warning")
      };
    });
  };
  var ValidateStatus = /* @__PURE__ */function (ValidateStatus2) {
    ValidateStatus2["TO_BE_VALIDATED"] = "not";
    ValidateStatus2["SUCCESS"] = "success";
    ValidateStatus2["FAIL"] = "fail";
    return ValidateStatus2;
  }(ValidateStatus || {});
  var FormInjectionKey = Symbol("FormProvide");
  var FormItemInjectionKey = Symbol("FormItemProvide");

  function useLengthLimit(params) {
    var getValueByLimitNumber = function getValueByLimitNumber(inputValue) {
      var _params$value = params.value,
        allowInputOverMax = _params$value.allowInputOverMax,
        maxlength = _params$value.maxlength,
        maxcharacter = _params$value.maxcharacter;
      if (!(maxlength || maxcharacter) || allowInputOverMax || !inputValue) return inputValue;
      if (maxlength) {
        return limitUnicodeMaxLength(inputValue, maxlength);
      }
      if (maxcharacter) {
        var r = getCharacterLength$1(inputValue, maxcharacter);
        if (_typeof$2(r) === "object") {
          return r.characters;
        }
      }
    };
    var limitNumber = vue.computed(function () {
      var _params$value2 = params.value,
        maxlength = _params$value2.maxlength,
        maxcharacter = _params$value2.maxcharacter,
        value = _params$value2.value;
      if (typeof value === "number") return String(value);
      if (maxlength && maxcharacter) {
        log.warn("Input", "Pick one of maxlength and maxcharacter please.");
      }
      if (maxlength) {
        var length = value !== null && value !== void 0 && value.length ? getUnicodeLength(value) : 0;
        return "".concat(length, "/").concat(maxlength);
      }
      if (maxcharacter) {
        return "".concat(getCharacterLength$1(value || ""), "/").concat(maxcharacter);
      }
      return "";
    });
    var innerStatus = vue.computed(function () {
      if (limitNumber.value) {
        var _limitNumber$value$sp = limitNumber.value.split("/"),
          _limitNumber$value$sp2 = _slicedToArray(_limitNumber$value$sp, 2),
          current = _limitNumber$value$sp2[0],
          total = _limitNumber$value$sp2[1];
        return Number(current) > Number(total) ? "error" : "";
      }
      return "";
    });
    var tStatus = vue.computed(function () {
      var status = params.value.status;
      return status || innerStatus.value;
    });
    var onValidateChange = function onValidateChange() {
      var _params$value$onValid, _params$value3;
      (_params$value$onValid = (_params$value3 = params.value).onValidate) === null || _params$value$onValid === void 0 ? void 0 : _params$value$onValid.call(_params$value3, {
        error: innerStatus.value ? "exceed-maximum" : void 0
      });
    };
    vue.watch(innerStatus, onValidateChange);
    vue.onMounted(function () {
      innerStatus.value && onValidateChange();
    });
    return {
      tStatus: tStatus,
      limitNumber: limitNumber,
      getValueByLimitNumber: getValueByLimitNumber
    };
  }

  function useInput(props, expose) {
    var _toRefs = vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var inputValue = vue.ref();
    var clearIconRef = vue.ref(null);
    var innerClickElement = vue.ref();
    var disabled = useFormDisabled();
    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var isHover = vue.ref(false);
    var focused = vue.ref(false);
    var renderType = vue.ref(props.type);
    var inputRef = vue.ref(null);
    var limitParams = vue.computed(function () {
      return {
        value: innerValue.value === void 0 ? void 0 : String(innerValue.value),
        status: props.status,
        maxlength: props.maxlength,
        maxcharacter: props.maxcharacter,
        allowInputOverMax: props.allowInputOverMax,
        onValidate: props.onValidate
      };
    });
    var _useLengthLimit = useLengthLimit(limitParams),
      limitNumber = _useLengthLimit.limitNumber,
      getValueByLimitNumber = _useLengthLimit.getValueByLimitNumber,
      tStatus = _useLengthLimit.tStatus;
    var showClear = vue.computed(function () {
      return (innerValue.value && !disabled.value && props.clearable && !props.readonly || props.showClearIconOnEmpty) && isHover.value;
    });
    var focus = function focus() {
      var _inputRef$value;
      return (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 ? void 0 : _inputRef$value.focus();
    };
    var blur = function blur() {
      var _inputRef$value2;
      return (_inputRef$value2 = inputRef.value) === null || _inputRef$value2 === void 0 ? void 0 : _inputRef$value2.blur();
    };
    var emitFocus = function emitFocus(e) {
      var _props$onFocus;
      inputValue.value = innerValue.value;
      if (props.disabled || props.readonly) return;
      focused.value = true;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, innerValue.value, {
        e: e
      });
    };
    var emitClear = function emitClear(_ref) {
      var _props$onClear;
      var e = _ref.e;
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props, {
        e: e
      });
      setInnerValue("", {
        e: e
      });
    };
    var onClearIconMousedown = function onClearIconMousedown(e) {
      innerClickElement.value = e.target;
    };
    var emitPassword = function emitPassword() {
      var toggleType = renderType.value === "password" ? "text" : "password";
      renderType.value = toggleType;
    };
    var setInputElValue = function setInputElValue() {
      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var inputEl = inputRef.value;
      if (!inputEl) return;
      var sV = String(v);
      if (!inputEl.value) {
        return;
      }
      if (inputEl.value !== sV) {
        inputEl.value = sV;
      }
    };
    var inputValueChangeHandle = function inputValueChangeHandle(e) {
      var target = e.target;
      var val = target.value;
      if (props.type !== "number") {
        val = getValueByLimitNumber(val);
      }
      setInnerValue(val, {
        e: e
      });
      vue.nextTick(function () {
        return setInputElValue(innerValue.value);
      });
    };
    var handleInput = function handleInput(e) {
      var checkInputType = e.inputType && e.inputType === "insertCompositionText";
      if (e.isComposing || checkInputType) return;
      inputValueChangeHandle(e);
    };
    var isClearIcon = function isClearIcon() {
      var _clearIconRef$value;
      var tmp = innerClickElement.value;
      if (!tmp || !tmp.tagName || !((_clearIconRef$value = clearIconRef.value) !== null && _clearIconRef$value !== void 0 && _clearIconRef$value.$el) || !["path", "svg"].includes(tmp.tagName)) return false;
      while (tmp) {
        var _clearIconRef$value2;
        if (((_clearIconRef$value2 = clearIconRef.value) === null || _clearIconRef$value2 === void 0 ? void 0 : _clearIconRef$value2.$el) === tmp) {
          return true;
        }
        tmp = tmp.parentNode;
      }
      return false;
    };
    var formItem = vue.inject(FormItemInjectionKey, void 0);
    var formatAndEmitBlur = function formatAndEmitBlur(e) {
      if (props.format) {
        inputValue.value = props.format(innerValue.value);
      }
      focused.value = false;
      if (!isClearIcon() && props.allowTriggerBlur) {
        var _props$onBlur;
        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, innerValue.value, {
          e: e
        });
        formItem === null || formItem === void 0 ? void 0 : formItem.handleBlur();
      }
    };
    var onHandleCompositionend = function onHandleCompositionend(e) {
      var _props$onCompositione;
      inputValueChangeHandle(e);
      (_props$onCompositione = props.onCompositionend) === null || _props$onCompositione === void 0 ? void 0 : _props$onCompositione.call(props, innerValue.value, {
        e: e
      });
    };
    var onHandleCompositionstart = function onHandleCompositionstart(e) {
      var _props$onCompositions;
      (_props$onCompositions = props.onCompositionstart) === null || _props$onCompositions === void 0 ? void 0 : _props$onCompositions.call(props, innerValue.value, {
        e: e
      });
    };
    var onRootClick = function onRootClick(e) {
      var _inputRef$value3;
      (_inputRef$value3 = inputRef.value) === null || _inputRef$value3 === void 0 ? void 0 : _inputRef$value3.focus();
    };
    vue.watch(function () {
      return props.autofocus;
    }, function (value2) {
      if (value2 === true) {
        vue.nextTick(function () {
          var _inputRef$value4;
          (_inputRef$value4 = inputRef.value) === null || _inputRef$value4 === void 0 ? void 0 : _inputRef$value4.focus();
        });
      }
    }, {
      immediate: true
    });
    vue.watch(innerValue, function (v) {
      var format = props.format;
      if (format) {
        var r = format(innerValue.value);
        if (inputValue.value !== r) {
          inputValue.value = r;
        }
      } else {
        inputValue.value = v;
      }
    }, {
      immediate: true
    });
    vue.watch(function () {
      return props.type;
    }, function (v) {
      renderType.value = v;
    }, {
      immediate: true
    });
    expose({
      inputRef: inputRef,
      focus: focus,
      blur: blur
    });
    return {
      isHover: isHover,
      focused: focused,
      renderType: renderType,
      showClear: showClear,
      inputRef: inputRef,
      clearIconRef: clearIconRef,
      inputValue: inputValue,
      limitNumber: limitNumber,
      tStatus: tStatus,
      emitFocus: emitFocus,
      formatAndEmitBlur: formatAndEmitBlur,
      onHandleCompositionend: onHandleCompositionend,
      onHandleCompositionstart: onHandleCompositionstart,
      onRootClick: onRootClick,
      emitPassword: emitPassword,
      handleInput: handleInput,
      emitClear: emitClear,
      onClearIconMousedown: onClearIconMousedown,
      innerValue: innerValue
    };
  }

  function useInputEventHandler(props, isHover, innerValue) {
    var handleKeydown = function handleKeydown(e) {
      if (props.disabled) return;
      var code = e.code;
      if (code === "Enter" || code === "NumpadEnter") {
        var _props$onEnter;
        (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, innerValue.value, {
          e: e
        });
      } else {
        var _props$onKeydown;
        (_props$onKeydown = props.onKeydown) === null || _props$onKeydown === void 0 ? void 0 : _props$onKeydown.call(props, innerValue.value, {
          e: e
        });
      }
    };
    var handleKeyUp = function handleKeyUp(e) {
      var _props$onKeyup;
      if (props.disabled) return;
      (_props$onKeyup = props.onKeyup) === null || _props$onKeyup === void 0 ? void 0 : _props$onKeyup.call(props, innerValue.value, {
        e: e
      });
    };
    var handleKeypress = function handleKeypress(e) {
      var _props$onKeypress;
      if (props.disabled) return;
      (_props$onKeypress = props.onKeypress) === null || _props$onKeypress === void 0 ? void 0 : _props$onKeypress.call(props, innerValue.value, {
        e: e
      });
    };
    var onHandlePaste = function onHandlePaste(e) {
      var _props$onPaste;
      if (props.disabled) return;
      var clipData = e.clipboardData || window.clipboardData;
      (_props$onPaste = props.onPaste) === null || _props$onPaste === void 0 ? void 0 : _props$onPaste.call(props, {
        e: e,
        pasteValue: clipData === null || clipData === void 0 ? void 0 : clipData.getData("text/plain")
      });
    };
    var mouseEvent = function mouseEvent(v) {
      return isHover.value = v;
    };
    var onHandleMousewheel = function onHandleMousewheel(e) {
      var _props$onWheel;
      return (_props$onWheel = props.onWheel) === null || _props$onWheel === void 0 ? void 0 : _props$onWheel.call(props, {
        e: e
      });
    };
    var onInputMouseenter = function onInputMouseenter(e) {
      var _props$onMouseenter;
      mouseEvent(true);
      (_props$onMouseenter = props.onMouseenter) === null || _props$onMouseenter === void 0 ? void 0 : _props$onMouseenter.call(props, {
        e: e
      });
    };
    var onInputMouseleave = function onInputMouseleave(e) {
      var _props$onMouseleave;
      mouseEvent(false);
      (_props$onMouseleave = props.onMouseleave) === null || _props$onMouseleave === void 0 ? void 0 : _props$onMouseleave.call(props, {
        e: e
      });
    };
    return {
      handleKeydown: handleKeydown,
      handleKeyUp: handleKeyUp,
      handleKeypress: handleKeypress,
      onHandlePaste: onHandlePaste,
      onHandleMousewheel: onHandleMousewheel,
      onInputMouseenter: onInputMouseenter,
      onInputMouseleave: onInputMouseleave
    };
  }

  function useInputWidth(props, inputRef, innerValue) {
    var inputPreRef = vue.ref(null);
    var composing = vue.ref(false);
    var updateInputWidth = function updateInputWidth() {
      if (!inputPreRef.value) return;
      var width = inputPreRef.value.offsetWidth;
      if (width === 0) return;
      inputRef.value.style.width = "".concat(width, "px");
    };
    var addListeners = function addListeners() {
      vue.watch(function () {
        return innerValue.value + props.placeholder;
      }, function () {
        if (!props.autoWidth) return;
        vue.nextTick(function () {
          updateInputWidth();
        });
      }, {
        immediate: true
      });
    };
    vue.onMounted(function () {
      composing.value = false;
      if (props.autoWidth) {
        addListeners();
      }
    });
    var resizeObserver = vue.ref(null);
    var addTableResizeObserver = function addTableResizeObserver(element) {
      if (typeof window.ResizeObserver === "undefined" || !element) return;
      resizeObserver.value = new window.ResizeObserver(function () {
        updateInputWidth();
      });
      resizeObserver.value.observe(element);
    };
    vue.onMounted(function () {
      addTableResizeObserver(inputPreRef.value);
    });
    vue.onBeforeUnmount(function () {
      var _resizeObserver$value, _resizeObserver$value2;
      (_resizeObserver$value = resizeObserver.value) === null || _resizeObserver$value === void 0 ? void 0 : _resizeObserver$value.unobserve(inputPreRef.value);
      (_resizeObserver$value2 = resizeObserver.value) === null || _resizeObserver$value2 === void 0 ? void 0 : _resizeObserver$value2.disconnect();
    });
    return {
      inputPreRef: inputPreRef
    };
  }

  var _excluded$5 = ["isHover", "tStatus", "inputRef", "renderType", "showClear", "focused", "inputValue", "innerValue", "limitNumber"];
  function ownKeys$1Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getValidAttrs$2(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (key) {
      if (typeof obj[key] !== "undefined") {
        newObj[key] = obj[key];
      }
    });
    return newObj;
  }
  var _Input = vue.defineComponent({
    name: "TInput",
    props: _objectSpread$1Y(_objectSpread$1Y({}, props$U), {}, {
      showInput: {
        type: Boolean,
        "default": true
      },
      keepWrapperWidth: {
        type: Boolean,
        "default": false
      },
      allowTriggerBlur: {
        type: Boolean,
        "default": true
      }
    }),
    setup: function setup(props2, _ref) {
      var expose = _ref.expose;
      var _useConfig = useConfig("input"),
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          BrowseIcon: browse,
          BrowseOffIcon: browseOff,
          CloseCircleFilledIcon: closeCircleFilled
        }),
        BrowseIcon = _useGlobalIcon.BrowseIcon,
        BrowseOffIcon = _useGlobalIcon.BrowseOffIcon,
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;
      var disabled = useFormDisabled();
      var COMPONENT_NAME = usePrefixClass("input");
      var INPUT_WRAP_CLASS = usePrefixClass("input__wrap");
      var INPUT_TIPS_CLASS = usePrefixClass("input__tips");
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var _useInput = useInput(props2, expose),
        isHover = _useInput.isHover,
        tStatus = _useInput.tStatus,
        inputRef = _useInput.inputRef,
        renderType = _useInput.renderType,
        showClear = _useInput.showClear,
        focused = _useInput.focused,
        inputValue = _useInput.inputValue,
        innerValue = _useInput.innerValue,
        limitNumber = _useInput.limitNumber,
        inputHandle = _objectWithoutProperties$1(_useInput, _excluded$5);
      var _useInputWidth = useInputWidth(props2, inputRef, innerValue),
        inputPreRef = _useInputWidth.inputPreRef;
      var inputEventHandler = useInputEventHandler(props2, isHover, innerValue);
      var tPlaceholder = vue.computed(function () {
        var _props2$placeholder;
        return (_props2$placeholder = props2.placeholder) !== null && _props2$placeholder !== void 0 ? _props2$placeholder : globalConfig.value.placeholder;
      });
      var inputAttrs = vue.computed(function () {
        var _props2$autocomplete;
        return getValidAttrs$2({
          autofocus: props2.autofocus,
          disabled: disabled.value,
          readonly: props2.readonly,
          placeholder: tPlaceholder.value,
          maxlength: !props2.allowInputOverMax && props2.maxlength || void 0,
          name: props2.name || void 0,
          type: renderType.value,
          autocomplete: (_props2$autocomplete = props2.autocomplete) !== null && _props2$autocomplete !== void 0 ? _props2$autocomplete : globalConfig.value.autocomplete || void 0,
          unselectable: props2.readonly ? "on" : void 0
        });
      });
      return function () {
        var _ref2, _inputValue$value;
        var prefixIcon = renderTNodeJSX("prefixIcon");
        var suffixIcon = renderTNodeJSX("suffixIcon");
        var passwordIcon = renderTNodeJSX("passwordIcon");
        var label = renderTNodeJSX("label", {
          silent: true
        });
        var suffix = renderTNodeJSX("suffix");
        var limitNode = limitNumber.value && props2.showLimitNumber ? vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-input__limit-number")
        }, [limitNumber.value]) : null;
        var labelContent = label ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__prefix")
        }, [label]) : null;
        var suffixContent = suffix || limitNode ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__suffix")
        }, [suffix, limitNode]) : null;
        if (props2.type === "password") {
          if (renderType.value === "password") {
            suffixIcon = vue.createVNode(BrowseOffIcon, {
              "class": "".concat(COMPONENT_NAME.value, "__suffix-clear"),
              "onClick": inputHandle.emitPassword
            }, null);
          } else if (renderType.value === "text") {
            suffixIcon = vue.createVNode(BrowseIcon, {
              "class": "".concat(COMPONENT_NAME.value, "__suffix-clear"),
              "onClick": inputHandle.emitPassword
            }, null);
          }
        }
        if (showClear.value) {
          if (props2.type === "password") {
            passwordIcon = vue.createVNode(CloseCircleFilledIcon, {
              "ref": inputHandle.clearIconRef,
              "class": "".concat(COMPONENT_NAME.value, "__suffix-clear"),
              "onClick": inputHandle.emitClear,
              "onMousedown": inputHandle.onClearIconMousedown
            }, null);
          } else {
            suffixIcon = vue.createVNode(CloseCircleFilledIcon, {
              "ref": inputHandle.clearIconRef,
              "class": "".concat(COMPONENT_NAME.value, "__suffix-clear"),
              "onClick": inputHandle.emitClear,
              "onMousedown": inputHandle.onClearIconMousedown
            }, null);
          }
        }
        var classes = [COMPONENT_NAME.value, props2.inputClass, (_ref2 = {}, _defineProperty$3(_ref2, SIZE.value[props2.size], props2.size !== "medium"), _defineProperty$3(_ref2, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref2, STATUS.value.focused, focused.value), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-").concat(tStatus.value), tStatus.value), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-align-").concat(props2.align), props2.align !== "left"), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-readonly"), props2.readonly), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--prefix"), prefixIcon || labelContent), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--suffix"), suffixIcon || suffixContent), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--focused"), focused.value), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--auto-width"), props2.autoWidth && !props2.keepWrapperWidth), _ref2)];
        var inputEvents = getValidAttrs$2({
          onFocus: function onFocus(e) {
            return inputHandle.emitFocus(e);
          },
          onBlur: inputHandle.formatAndEmitBlur,
          onKeydown: inputEventHandler.handleKeydown,
          onKeyup: inputEventHandler.handleKeyUp,
          onKeypress: inputEventHandler.handleKeypress,
          onPaste: inputEventHandler.onHandlePaste,
          onCompositionend: inputHandle.onHandleCompositionend,
          onCompositionstart: inputHandle.onHandleCompositionstart
        });
        var tips = renderTNodeJSX("tips");
        return vue.createVNode("div", {
          "class": INPUT_WRAP_CLASS.value
        }, [vue.createVNode("div", {
          "class": classes,
          "onClick": inputHandle.onRootClick,
          "onMouseenter": inputEventHandler.onInputMouseenter,
          "onMouseleave": inputEventHandler.onInputMouseleave,
          "onWheel": inputEventHandler.onHandleMousewheel
        }, [prefixIcon ? vue.createVNode("span", {
          "class": ["".concat(COMPONENT_NAME.value, "__prefix"), "".concat(COMPONENT_NAME.value, "__prefix-icon")]
        }, [prefixIcon]) : null, labelContent, props2.showInput && vue.createVNode("input", vue.mergeProps({
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, inputAttrs.value, inputEvents, {
          "ref": inputRef,
          "value": (_inputValue$value = inputValue.value) !== null && _inputValue$value !== void 0 ? _inputValue$value : "",
          "onInput": function onInput(e) {
            return inputHandle.handleInput(e);
          }
        }), null), props2.autoWidth && vue.createVNode("span", {
          "ref": inputPreRef,
          "class": "".concat(classPrefix.value, "-input__input-pre")
        }, [innerValue.value || tPlaceholder.value]), suffixContent, passwordIcon ? vue.createVNode("span", {
          "class": ["".concat(COMPONENT_NAME.value, "__suffix"), "".concat(COMPONENT_NAME.value, "__suffix-icon"), "".concat(COMPONENT_NAME.value, "__clear")]
        }, [passwordIcon]) : null, suffixIcon ? vue.createVNode("span", {
          "class": ["".concat(COMPONENT_NAME.value, "__suffix"), "".concat(COMPONENT_NAME.value, "__suffix-icon"), _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__clear"), showClear.value)]
        }, [suffixIcon]) : null]), tips && vue.createVNode("div", {
          "class": "".concat(INPUT_TIPS_CLASS.value, " ").concat(classPrefix.value, "-input__tips--").concat(tStatus.value || "default")
        }, [tips])]);
      };
    }
  });

  var _InputGroup = vue.defineComponent({
    name: "TInputGroup",
    props: {
      separate: {
        type: Boolean,
        "default": false
      }
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("input-group");
      var renderTNodeJSX = useTNodeJSX();
      var CLASS = vue.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--separate"), props.separate)];
      });
      return function () {
        return vue.createVNode("div", {
          "class": CLASS.value
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var Input = withInstall(_Input);
  var InputGroup = withInstall(_InputGroup);

  var props$T = {
    align: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "center", "right"].includes(val);
      }
    },
    allowInputOverLimit: {
      type: Boolean,
      "default": true
    },
    autoWidth: Boolean,
    decimalPlaces: {
      type: Number,
      "default": void 0
    },
    disabled: Boolean,
    format: {
      type: Function
    },
    inputProps: {
      type: Object
    },
    label: {
      type: [String, Function]
    },
    largeNumber: Boolean,
    max: {
      type: [String, Number],
      "default": Infinity
    },
    min: {
      type: [String, Number],
      "default": -Infinity
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    step: {
      type: [String, Number],
      "default": 1
    },
    suffix: {
      type: [String, Function]
    },
    theme: {
      type: String,
      "default": "row",
      validator: function validator(val) {
        if (!val) return true;
        return ["column", "row", "normal"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onEnter: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function,
    onValidate: Function
  };

  function fillZero(length) {
    return new Array(length).fill(0).join("");
  }
  function isInputNumber(num) {
    if (!num) return true;
    if (typeof num === "number") return !Number.isNaN(num);
    var r = /^[0-9|e|E|-]+\.*[0-9|e|E|-]*$/.test(num);
    if (!r) return false;
    var eCount = 0;
    var negativeCount = 0;
    var dotCount = 0;
    for (var i = 0, len = num.length; i < len; i++) {
      if (num[i] === ".") {
        dotCount += 1;
        if (dotCount > 1) return false;
      }
      if (/(e|E)+/.test(num[i])) {
        eCount += 1;
        if (eCount > 1) return false;
      }
      if (num[i] === "-") {
        negativeCount += 1;
        if (negativeCount > 2) return false;
      }
    }
    return true;
  }
  function removeInvalidZero(num) {
    var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (num.indexOf(".") !== -1) {
      log.error("InputNumber", "num is not a integer number.");
      return num;
    }
    if (!num || num === "0" && decimal) return "";
    if (num === "0") return num;
    return (decimal ? num.replace(/0+$/, "") : num.replace(/^0+/, "")) || "0";
  }
  function largeIntNumberAdd(num1, num2) {
    var decimal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var number1 = removeInvalidZero(num1, decimal);
    var number2 = removeInvalidZero(num2, decimal);
    var isFirstLarger = number1.length > number2.length;
    var maxNumber = isFirstLarger ? number1 : number2;
    var minNumber = isFirstLarger ? number2 : number1;
    var newNumber = [];
    var step = [];
    var diff = decimal ? 0 : maxNumber.length - minNumber.length;
    var len = decimal ? minNumber.length : maxNumber.length;
    for (var i = len - 1; i >= 0; i--) {
      var minIndex = i - diff;
      var count = Number(maxNumber[i]) + (Number(minNumber[minIndex]) || 0) + (step[i] || 0);
      if (count >= 10) {
        step[i - 1] = 1;
      }
      newNumber.unshift(String(count % 10));
    }
    if (step[-1]) {
      newNumber.unshift("1");
    }
    if (decimal) {
      return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join("");
    }
    return newNumber.join("");
  }
  function largePositiveNumberAdd(num1, num2) {
    var _num1$split = num1.split("."),
      _num1$split2 = _slicedToArray(_num1$split, 2),
      _num1$split2$ = _num1$split2[0],
      intNumber1 = _num1$split2$ === void 0 ? "0" : _num1$split2$,
      _num1$split2$2 = _num1$split2[1],
      decimalNumber1 = _num1$split2$2 === void 0 ? "0" : _num1$split2$2;
    var _num2$split = num2.split("."),
      _num2$split2 = _slicedToArray(_num2$split, 2),
      _num2$split2$ = _num2$split2[0],
      intNumber2 = _num2$split2$ === void 0 ? "0" : _num2$split2$,
      _num2$split2$2 = _num2$split2[1],
      decimalNumber2 = _num2$split2$2 === void 0 ? "0" : _num2$split2$2;
    var integerSum = largeIntNumberAdd(intNumber1, intNumber2);
    if (decimalNumber1 === "0" && decimalNumber2 === "0") return integerSum;
    var newDecimalNumber1 = removeInvalidZero(decimalNumber1, true);
    var newDecimalNumber2 = removeInvalidZero(decimalNumber2, true);
    var decimalNumberSum = largeIntNumberAdd(newDecimalNumber1, newDecimalNumber2, true);
    var decimalLength = decimalNumberSum.length;
    if (decimalLength > newDecimalNumber1.length && decimalLength > newDecimalNumber2.length) {
      return [removeInvalidZero(largeIntNumberAdd(integerSum, "1")), removeInvalidZero(decimalNumberSum.slice(1), true)].filter(function (v) {
        return v;
      }).join(".");
    }
    return [removeInvalidZero(integerSum), removeInvalidZero(decimalNumberSum, true)].filter(function (v) {
      return v;
    }).join(".");
  }
  function compareLargeIntegerNumber(num1, num2) {
    var number1 = removeInvalidZero(num1);
    var number2 = removeInvalidZero(num2);
    if (number1.length === number2.length) {
      for (var i = 0, len = number1.length; i < len; i++) {
        if (number1[i] > number2[i]) return 1;
        if (number1[i] < number2[i]) return -1;
      }
      return 0;
    }
    return number1.length > number2.length ? 1 : -1;
  }
  function compareLargeDecimalNumber(num1, num2) {
    var number1 = num1 && num1 !== "0" ? num1.replace(/0+$/, "") : "0";
    var number2 = num2 && num2 !== "0" ? num2.replace(/0+$/, "") : "0";
    var maxLength = Math.max(number1.length, number2.length);
    for (var i = 0, len = maxLength; i < len; i++) {
      if ((number1[i] || 0) > (number2[i] || 0)) return 1;
      if ((number1[i] || 0) < (number2[i] || 0)) return -1;
    }
    return 0;
  }
  function compareLargeNumber(num1, num2) {
    var _num1$split3 = num1.split("."),
      _num1$split4 = _slicedToArray(_num1$split3, 2),
      integer1 = _num1$split4[0],
      decimal1 = _num1$split4[1];
    var _num2$split3 = num2.split("."),
      _num2$split4 = _slicedToArray(_num2$split3, 2),
      integer2 = _num2$split4[0],
      decimal2 = _num2$split4[1];
    var result = compareLargeIntegerNumber(integer1.replace("-", ""), integer2.replace("-", ""));
    var integer1IsNegative = integer1.includes("-");
    var integer2IsNegative = integer2.includes("-");
    if (integer1IsNegative && !integer2IsNegative) return -1;
    if (!integer1IsNegative && integer2IsNegative) return 1;
    if (integer1IsNegative && integer2IsNegative) {
      if (result === 0) return 0;
      return result > 0 ? -1 : 1;
    }
    if (result === 0) {
      return compareLargeDecimalNumber(decimal1, decimal2);
    }
    return result;
  }
  function isInfinity(num) {
    return [-Infinity, Infinity].includes(Number(num));
  }
  function isSafeNumber(num) {
    return Number(num) < Number.MAX_SAFE_INTEGER && Number(num) > Number.MIN_SAFE_INTEGER;
  }
  function compareNumber(num1, num2, largeNumber) {
    var isSafeNumberCompare = isSafeNumber(num1) && isSafeNumber(num2) && !largeNumber;
    var isInfinityCompare = isInfinity(num1) || isInfinity(num2);
    if (isSafeNumberCompare || isInfinityCompare) {
      if (Number(num1) === Number(num2)) return 0;
      return Number(num1) > Number(num2) ? 1 : -1;
    }
    return compareLargeNumber(String(num1), String(num2));
  }
  function largeIntegerNumberSubtract(num1, num2, p) {
    if (num1 === num2) return "0";
    var _ref = p || {},
      decimal = _ref.decimal,
      stayZero = _ref.stayZero;
    var number1 = removeInvalidZero(num1);
    var number2 = removeInvalidZero(num2);
    var isFirstLarger = compareLargeIntegerNumber(number1, number2) > 0;
    var maxNumber = isFirstLarger ? number1 : number2;
    var minNumber = isFirstLarger ? number2 : number1;
    var newNumber = [];
    var step = [];
    var diff = decimal ? 0 : maxNumber.length - minNumber.length;
    var len = decimal ? minNumber.length : maxNumber.length;
    for (var i = len - 1; i >= 0; i--) {
      var minIndex = i - diff;
      var count = Number(maxNumber[i]) - (Number(minNumber[minIndex]) || 0) - (step[i] || 0);
      if (count < 0) {
        step[i - 1] = 1;
        count += 10;
      }
      newNumber.unshift(String(count));
    }
    if (decimal) {
      return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join("");
    }
    var finalNumber = newNumber.join("");
    if (!stayZero) {
      finalNumber = finalNumber.replace(/^0+/, "");
    }
    return removeInvalidZero(isFirstLarger ? finalNumber : "-".concat(finalNumber));
  }
  function largePositiveNumberSubtract(num1, num2) {
    if (num1 === num2) return "0";
    var isFirstLarger = compareNumber(num1, num2, true) > 0;
    var maxNumber = isFirstLarger ? num1 : num2;
    var minNumber = isFirstLarger ? num2 : num1;
    var _maxNumber$split = maxNumber.split("."),
      _maxNumber$split2 = _slicedToArray(_maxNumber$split, 2),
      intNumber1 = _maxNumber$split2[0],
      _maxNumber$split2$ = _maxNumber$split2[1],
      decimalNumber1 = _maxNumber$split2$ === void 0 ? "0" : _maxNumber$split2$;
    var _minNumber$split = minNumber.split("."),
      _minNumber$split2 = _slicedToArray(_minNumber$split, 2),
      intNumber2 = _minNumber$split2[0],
      _minNumber$split2$ = _minNumber$split2[1],
      decimalNumber2 = _minNumber$split2$ === void 0 ? "0" : _minNumber$split2$;
    var integerNumber = largeIntegerNumberSubtract(intNumber1, intNumber2);
    if (decimalNumber1 === "0" && decimalNumber2 === "0") {
      return isFirstLarger ? integerNumber : "-".concat(integerNumber);
    }
    var decimalNumber = "";
    var addOneNumber = decimalNumber1;
    if (decimalNumber1.length < decimalNumber2.length) {
      addOneNumber = "".concat(decimalNumber1).concat(fillZero(decimalNumber2.length - decimalNumber1.length));
    }
    if (compareLargeDecimalNumber(addOneNumber, decimalNumber2) >= 0) {
      decimalNumber = largeIntegerNumberSubtract(addOneNumber, decimalNumber2, {
        decimal: true
      });
    } else {
      if (decimalNumber1.length < decimalNumber2.length || decimalNumber1 === "0") {
        decimalNumber = largeIntegerNumberSubtract("1".concat(addOneNumber), decimalNumber2, {
          stayZero: true
        });
        decimalNumber = fillZero(decimalNumber2.length - decimalNumber.length) + decimalNumber;
      } else {
        decimalNumber = largeIntegerNumberSubtract(decimalNumber1, decimalNumber2, {
          decimal: true
        });
      }
      integerNumber = largeIntegerNumberSubtract(integerNumber, "1");
    }
    var finalNumber = decimalNumber ? [integerNumber, decimalNumber].join(".") : integerNumber;
    return isFirstLarger ? finalNumber : "-".concat(finalNumber);
  }
  function largeNumberSubtract(num1, num2) {
    var isFirstNegative = num1[0] === "-";
    var isSecondNegative = num2[0] === "-";
    if (isFirstNegative && !isSecondNegative) {
      var r = largePositiveNumberAdd(num1.slice(1), num2);
      return "-".concat(r);
    }
    if (isFirstNegative && isSecondNegative) {
      return largePositiveNumberSubtract(num2.slice(1), num1.slice(1));
    }
    if (!isFirstNegative && isSecondNegative) {
      return largePositiveNumberAdd(num1, num2.slice(1));
    }
    return largePositiveNumberSubtract(num1, num2);
  }
  function largeNumberAdd(num1, num2) {
    var isFirstNegative = num1[0] === "-";
    var isSecondNegative = num2[0] === "-";
    if (isFirstNegative && !isSecondNegative) {
      return largePositiveNumberSubtract(num2, num1.slice(1));
    }
    if (isFirstNegative && isSecondNegative) {
      var r = largePositiveNumberAdd(num2.slice(1), num1.slice(1));
      return "-".concat(r);
    }
    if (!isFirstNegative && isSecondNegative) {
      return largePositiveNumberSubtract(num1, num2.slice(1));
    }
    return largePositiveNumberAdd(num1, num2);
  }
  function largeNumberToFixed(number) {
    var decimalPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (!largeNumber) return Number(number).toFixed(decimalPlaces);
    if (typeof number !== "string") return String(number);
    var _number$split = number.split("."),
      _number$split2 = _slicedToArray(_number$split, 2),
      num1 = _number$split2[0],
      num2 = _number$split2[1];
    if (!num2) {
      return decimalPlaces ? [number, fillZero(decimalPlaces)].join(".") : number;
    }
    if (decimalPlaces === 0) {
      return Number(num2[0]) >= 5 ? largePositiveNumberAdd(num1, "1") : num1;
    }
    var decimalNumber = num2.slice(0, decimalPlaces);
    if (num2.length < decimalPlaces) {
      decimalNumber += fillZero(decimalPlaces - num2.length);
    } else {
      decimalNumber = Number(num2[decimalPlaces]) >= 5 ? largePositiveNumberAdd(decimalNumber, "1") : decimalNumber;
    }
    return [num1, decimalNumber].join(".");
  }
  function formatENumber(num) {
    var _num$split = num.split("e"),
      _num$split2 = _slicedToArray(_num$split, 2),
      num1 = _num$split2[0],
      num2 = _num$split2[1];
    var _num$split3 = num.split("."),
      _num$split4 = _slicedToArray(_num$split3, 2),
      integer = _num$split4[0],
      _num$split4$ = _num$split4[1],
      initDecimal = _num$split4$ === void 0 ? "" : _num$split4$;
    var zeroCount = Number(num2);
    var _initDecimal$split = initDecimal.split("e"),
      _initDecimal$split2 = _slicedToArray(_initDecimal$split, 1),
      decimal = _initDecimal$split2[0];
    if (zeroCount > decimal.length) {
      var multipleZero = fillZero(zeroCount - decimal.length);
      return num1.replace(/(^0+|\.)/g, "") + multipleZero;
    }
    var n1 = integer.replace(/^0+/, "") + decimal.slice(0, zeroCount);
    var d2 = decimal.slice(zeroCount);
    return d2 ? [n1, d2].join(".") : n1;
  }

  function canAddNumber(num, max) {
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!num && num !== 0) return true;
    if (largeNumber && isString_1(num)) {
      return compareNumber(num, max, largeNumber) < 0;
    }
    return num < max;
  }
  function canReduceNumber(num, min) {
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!num && num !== 0) return true;
    if (largeNumber && isString_1(num)) {
      return compareNumber(num, min, largeNumber) > 0;
    }
    return num > min;
  }
  function formatToNumber(num, extra) {
    if (num === void 0 || num === null || num === "") return num;
    if (num === "-") return 0;
    if (num[num.length - 1] === ".") {
      return extra !== null && extra !== void 0 && extra.largeNumber ? num.slice(0, -1) : Number(num.slice(0, -1));
    }
    var isLargeNumber = (extra === null || extra === void 0 ? void 0 : extra.largeNumber) && isString_1(num);
    var newNumber = num;
    if (isString_1(num) && num.includes("e") || isNumber_1(num)) {
      newNumber = isLargeNumber ? formatENumber(num) : Number(num);
    }
    if ((extra === null || extra === void 0 ? void 0 : extra.decimalPlaces) !== void 0) {
      newNumber = largeNumberToFixed(newNumber, extra.decimalPlaces, extra.largeNumber);
    }
    var val = isLargeNumber || (extra === null || extra === void 0 ? void 0 : extra.decimalPlaces) !== void 0 ? newNumber : Number(newNumber);
    if (String(val) === "NaN") return void 0;
    return val;
  }
  function putInRangeNumber(val, params) {
    if (val === "") return void 0;
    var max = params.max,
      min = params.min,
      lastValue = params.lastValue,
      largeNumber = params.largeNumber;
    if (!isInputNumber(val)) return lastValue;
    if (largeNumber && (isString_1(max) || max === Infinity) && (isString_1(min) || min === -Infinity)) {
      if (compareNumber(max, val, largeNumber) < 0) return max;
      if (compareNumber(min, val, largeNumber) > 0) return min;
      return val;
    }
    return Math.max(Number(min), Math.min(Number(max), Number(val)));
  }
  function positiveAdd(num1, num2) {
    var _num1$toString$split$, _num2$toString$split$;
    if (!num1 || !num2) return (num1 || 0) + (num2 || 0);
    var r1 = ((_num1$toString$split$ = num1.toString().split(".")[1]) === null || _num1$toString$split$ === void 0 ? void 0 : _num1$toString$split$.length) || 0;
    var r2 = ((_num2$toString$split$ = num2.toString().split(".")[1]) === null || _num2$toString$split$ === void 0 ? void 0 : _num2$toString$split$.length) || 0;
    if (!r1 || !r2) return num1 + num2;
    var newNumber1 = num1;
    var newNumber2 = num2;
    var diff = Math.abs(r1 - r2);
    var digit = Math.pow(10, Math.max(r1, r2));
    if (diff > 0) {
      var cm = Math.pow(10, diff);
      if (r1 > r2) {
        newNumber1 = Number(num1.toString().replace(".", ""));
        newNumber2 = Number(num2.toString().replace(".", "")) * cm;
      } else {
        newNumber1 = Number(num1.toString().replace(".", "")) * cm;
        newNumber2 = Number(num2.toString().replace(".", ""));
      }
    } else {
      newNumber1 = Number(num1.toString().replace(".", ""));
      newNumber2 = Number(num2.toString().replace(".", ""));
    }
    return (newNumber1 + newNumber2) / digit;
  }
  function positiveSubtract(num1, num2) {
    var _num1$toString$split$2, _num2$toString$split$2;
    if (!num1 || !num2) return (num1 || 0) - (num2 || 0);
    var r1 = ((_num1$toString$split$2 = num1.toString().split(".")[1]) === null || _num1$toString$split$2 === void 0 ? void 0 : _num1$toString$split$2.length) || 0;
    var r2 = ((_num2$toString$split$2 = num2.toString().split(".")[1]) === null || _num2$toString$split$2 === void 0 ? void 0 : _num2$toString$split$2.length) || 0;
    var digit = Math.pow(10, Math.max(r1, r2));
    var n = r1 >= r2 ? r1 : r2;
    return Number(((num1 * digit - num2 * digit) / digit).toFixed(n));
  }
  function add(num1, num2) {
    if (num1 < 0 && num2 > 0) return positiveSubtract(num2, Math.abs(num1));
    if (num1 < 0 && num2 < 0) return positiveAdd(Math.abs(num1), Math.abs(num2)) * -1;
    if (num1 > 0 && num2 < 0) return positiveSubtract(num1, Math.abs(num2));
    return positiveAdd(num1, num2);
  }
  function subtract(num1, num2) {
    if (num1 < 0 && num2 > 0) return positiveAdd(Math.abs(num1), num2) * -1;
    if (num1 < 0 && num2 < 0) return positiveSubtract(Math.abs(num2), Math.abs(num1));
    if (num1 > 0 && num2 < 0) return positiveAdd(num1, Math.abs(num2));
    return positiveSubtract(num1, num2);
  }
  function getStepValue(p) {
    var op = p.op,
      step = p.step,
      lastValue = p.lastValue,
      max = p.max,
      min = p.min,
      largeNumber = p.largeNumber;
    if (step <= 0) {
      log.error("InputNumber", "step must be larger than 0.");
      return lastValue;
    }
    var tStep = isNumber_1(step) ? String(step) : step;
    var newVal;
    if (op === "add") {
      if (largeNumber && isString_1(lastValue)) {
        newVal = largeNumberAdd(String(lastValue), String(tStep));
      } else {
        newVal = add(Number(lastValue || 0), Number(step));
      }
    } else if (op === "reduce") {
      if (largeNumber && isString_1(lastValue)) {
        newVal = largeNumberSubtract(String(lastValue), String(tStep));
      } else {
        newVal = subtract(Number(lastValue || 0), Number(step));
      }
    }
    if (lastValue === void 0) {
      newVal = putInRangeNumber(newVal, {
        max: max,
        min: min,
        lastValue: lastValue,
        largeNumber: largeNumber
      });
    }
    return largeNumber ? newVal : Number(newVal);
  }
  function getMaxOrMinValidateResult(p) {
    var largeNumber = p.largeNumber,
      value = p.value,
      max = p.max,
      min = p.min;
    if (largeNumber === void 0) return void 0;
    if (largeNumber && isNumber_1(value)) {
      log.warn("InputNumber", "largeNumber value must be a string.");
    }
    var error;
    if (compareNumber(value, max, largeNumber) > 0) {
      error = "exceed-maximum";
    } else if (compareNumber(value, min, largeNumber) < 0) {
      error = "below-minimum";
    } else {
      error = void 0;
    }
    return error;
  }
  function canInputNumber(number, largeNumber) {
    if (!number && typeof number === "string") return true;
    var isNumber2 = largeNumber && isInputNumber(number) || !Number.isNaN(Number(number));
    if (!isNumber2 && !["-", ".", "e", "E"].includes(number.slice(-1))) return false;
    return true;
  }

  var specialCode = ["-", ".", "e", "E"];
  function useInputNumber(props) {
    var _useCommonClassName = useCommonClassName(),
      classPrefix = _useCommonClassName.classPrefix,
      sizeClassNames = _useCommonClassName.sizeClassNames,
      statusClassNames = _useCommonClassName.statusClassNames;
    var _toRefs = vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue,
      max = _toRefs.max,
      min = _toRefs.min;
    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      tValue = _useVModel2[0],
      setTValue = _useVModel2[1];
    var inputRef = vue.ref();
    var userInput = vue.ref("");
    var tDisabled = useFormDisabled();
    var isError = vue.ref();
    var disabledReduce = vue.computed(function () {
      return tDisabled.value || !canReduceNumber(tValue.value, props.min, props.largeNumber);
    });
    var disabledAdd = vue.computed(function () {
      return tDisabled.value || !canAddNumber(tValue.value, props.max, props.largeNumber);
    });
    var wrapClasses = vue.computed(function () {
      var _ref;
      return ["".concat(classPrefix.value, "-input-number"), sizeClassNames[props.size], (_ref = {}, _defineProperty$3(_ref, statusClassNames.disabled, tDisabled.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-controls-right"), props.theme === "column"), _defineProperty$3(_ref, "".concat(classPrefix.value, "-input-number--").concat(props.theme), props.theme), _defineProperty$3(_ref, "".concat(classPrefix.value, "-input-number--auto-width"), props.autoWidth), _ref)];
    });
    var reduceClasses = vue.computed(function () {
      return ["".concat(classPrefix.value, "-input-number__decrease"), _defineProperty$3({}, statusClassNames.disabled, disabledReduce.value)];
    });
    var addClasses = vue.computed(function () {
      return ["".concat(classPrefix.value, "-input-number__increase"), _defineProperty$3({}, statusClassNames.disabled, disabledAdd.value)];
    });
    var getUserInput = function getUserInput(value2) {
      var _inputRef$value, _inputRef$value$input;
      if (!value2 && value2 !== 0) return "";
      var inputStr = value2 || value2 === 0 ? String(value2) : "";
      if (!((_inputRef$value = inputRef.value) !== null && _inputRef$value !== void 0 && (_inputRef$value$input = _inputRef$value.inputRef) !== null && _inputRef$value$input !== void 0 && _inputRef$value$input.contains(document.activeElement))) {
        var num = formatToNumber(inputStr, {
          decimalPlaces: props.decimalPlaces,
          largeNumber: props.largeNumber
        });
        inputStr = num || num === 0 ? String(num) : "";
        if (props.format) {
          inputStr = String(props.format(value2, {
            fixedNumber: inputStr
          }));
        }
      }
      return inputStr;
    };
    vue.watch(tValue, function (val) {
      var inputValue = [void 0, null].includes(val) ? "" : String(val);
      userInput.value = getUserInput(inputValue);
    }, {
      immediate: true
    });
    vue.onMounted(function () {
      userInput.value = getUserInput(tValue.value);
    });
    vue.watch([tValue, max, min], function () {
      var _props$onValidate;
      if ([void 0, "", null].includes(tValue.value)) return;
      var max2 = props.max,
        min2 = props.min,
        largeNumber = props.largeNumber;
      var error = getMaxOrMinValidateResult({
        value: tValue.value,
        largeNumber: largeNumber,
        max: max2,
        min: min2
      });
      isError.value = error;
      (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, {
        error: error
      });
    }, {
      immediate: true
    });
    var handleStepValue = function handleStepValue(op) {
      var newValue = getStepValue({
        op: op,
        step: props.step,
        max: props.max,
        min: props.min,
        lastValue: tValue.value,
        largeNumber: props.largeNumber
      });
      var largeNumber = props.largeNumber,
        max2 = props.max,
        min2 = props.min;
      var overLimit = getMaxOrMinValidateResult({
        value: newValue,
        largeNumber: largeNumber,
        max: max2,
        min: min2
      });
      return {
        overLimit: overLimit,
        newValue: newValue
      };
    };
    var handleReduce = function handleReduce(e) {
      if (disabledReduce.value || props.readonly) return;
      var r = handleStepValue("reduce");
      if (r.overLimit && !props.allowInputOverLimit) return;
      setTValue(r.newValue, {
        type: "reduce",
        e: e
      });
    };
    var handleAdd = function handleAdd(e) {
      if (disabledAdd.value || props.readonly) return;
      var r = handleStepValue("add");
      if (r.overLimit && !props.allowInputOverLimit) return;
      setTValue(r.newValue, {
        type: "add",
        e: e
      });
    };
    var onInnerInputChange = function onInnerInputChange(val, _ref4) {
      var e = _ref4.e;
      if (!canInputNumber(val, props.largeNumber)) return;
      if (props.largeNumber) {
        setTValue(val, {
          type: "input",
          e: e
        });
        return;
      }
      var isDelete = e.inputType === "deleteContentBackward";
      var inputSpecialCode = specialCode.includes(val.slice(-1));
      var deleteSpecialCode = isDelete && specialCode.includes(String(userInput.value).slice(-1));
      if (!isNaN(Number(val)) && !inputSpecialCode || deleteSpecialCode) {
        var newVal = val === "" ? void 0 : Number(val);
        setTValue(newVal, {
          type: "input",
          e: e
        });
      }
      if (inputSpecialCode || deleteSpecialCode) {
        userInput.value = val;
      }
    };
    var handleBlur = function handleBlur(value2, ctx) {
      var _props$onBlur;
      var largeNumber = props.largeNumber,
        max2 = props.max,
        min2 = props.min,
        decimalPlaces = props.decimalPlaces;
      if (!props.allowInputOverLimit) {
        var r = getMaxOrMinValidateResult({
          value: tValue.value,
          largeNumber: largeNumber,
          max: max2,
          min: min2
        });
        if (r === "below-minimum") {
          setTValue(min2, {
            type: "blur",
            e: ctx.e
          });
        } else if (r === "exceed-maximum") {
          setTValue(max2, {
            type: "blur",
            e: ctx.e
          });
        }
        return;
      }
      userInput.value = getUserInput(tValue.value);
      var newValue = formatToNumber(value2, {
        decimalPlaces: decimalPlaces,
        largeNumber: largeNumber
      });
      if (newValue !== value2 && String(newValue) !== value2) {
        setTValue(newValue, {
          type: "blur",
          e: ctx.e
        });
      }
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, newValue, ctx);
    };
    var handleFocus = function handleFocus(value2, ctx) {
      var _props$onFocus;
      userInput.value = tValue.value || tValue.value === 0 ? String(tValue.value) : "";
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, value2, ctx);
    };
    var handleKeydown = function handleKeydown(value2, ctx) {
      var _props$onKeydown;
      var e = ctx.e;
      var keyEvent = {
        ArrowUp: handleAdd,
        ArrowDown: handleReduce
      };
      var code = e.code || e.key;
      if (keyEvent[code] !== void 0) {
        keyEvent[code](e);
      }
      (_props$onKeydown = props.onKeydown) === null || _props$onKeydown === void 0 ? void 0 : _props$onKeydown.call(props, value2, ctx);
    };
    var handleKeyup = function handleKeyup(value2, ctx) {
      var _props$onKeyup;
      (_props$onKeyup = props.onKeyup) === null || _props$onKeyup === void 0 ? void 0 : _props$onKeyup.call(props, value2, ctx);
    };
    var handleKeypress = function handleKeypress(value2, ctx) {
      var _props$onKeypress;
      (_props$onKeypress = props.onKeypress) === null || _props$onKeypress === void 0 ? void 0 : _props$onKeypress.call(props, value2, ctx);
    };
    var handleEnter = function handleEnter(value2, ctx) {
      var _props$onEnter;
      userInput.value = getUserInput(value2);
      var newValue = formatToNumber(value2, {
        decimalPlaces: props.decimalPlaces,
        largeNumber: props.largeNumber
      });
      if (newValue !== value2 && String(newValue) !== value2) {
        setTValue(newValue, {
          type: "enter",
          e: ctx.e
        });
      }
      (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, newValue, ctx);
    };
    var focus = function focus() {
      inputRef.value.focus();
    };
    var blur = function blur() {
      inputRef.value.blur();
    };
    var listeners = {
      onBlur: handleBlur,
      onFocus: handleFocus,
      onKeydown: handleKeydown,
      onKeyup: handleKeyup,
      onKeypress: handleKeypress,
      onEnter: handleEnter,
      onClick: focus
    };
    return {
      classPrefix: classPrefix,
      wrapClasses: wrapClasses,
      reduceClasses: reduceClasses,
      addClasses: addClasses,
      tDisabled: tDisabled,
      isError: isError,
      listeners: listeners,
      userInput: userInput,
      tValue: tValue,
      inputRef: inputRef,
      focus: focus,
      blur: blur,
      handleReduce: handleReduce,
      handleAdd: handleAdd,
      onInnerInputChange: onInnerInputChange
    };
  }

  function ownKeys$1Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _InputNumber = vue.defineComponent({
    name: "TInputNumber",
    props: props$T,
    setup: function setup(props2, context) {
      var _useGlobalIcon = useGlobalIcon({
          AddIcon: add$1,
          RemoveIcon: remove,
          ChevronDownIcon: chevronDown,
          ChevronUpIcon: chevronUp
        }),
        AddIcon = _useGlobalIcon.AddIcon,
        RemoveIcon = _useGlobalIcon.RemoveIcon,
        ChevronDownIcon = _useGlobalIcon.ChevronDownIcon,
        ChevronUpIcon = _useGlobalIcon.ChevronUpIcon;
      var p = useInputNumber(props2);
      var inputRef = p.inputRef;
      context.expose(_objectSpread$1X({}, p));
      return function () {
        var reduceIcon = props2.theme === "column" ? vue.createVNode(ChevronDownIcon, {
          "size": props2.size
        }, null) : vue.createVNode(RemoveIcon, {
          "size": props2.size
        }, null);
        var addIcon = props2.theme === "column" ? vue.createVNode(ChevronUpIcon, {
          "size": props2.size
        }, null) : vue.createVNode(AddIcon, {
          "size": props2.size
        }, null);
        var status = p.isError.value ? "error" : props2.status;
        return vue.createVNode("div", {
          "class": p.wrapClasses.value
        }, [props2.theme !== "normal" && vue.createVNode(Button, {
          "class": p.reduceClasses.value,
          "disabled": p.tDisabled.value,
          "onClick": p.handleReduce,
          "variant": "outline",
          "shape": "square",
          "icon": function icon() {
            return reduceIcon;
          }
        }, null), vue.createVNode(Input, vue.mergeProps({
          "ref": inputRef,
          "disabled": p.tDisabled.value,
          "readonly": props2.readonly,
          "autocomplete": "off",
          "placeholder": props2.placeholder,
          "unselectable": props2.readonly ? "on" : "off",
          "autoWidth": props2.autoWidth,
          "align": props2.align || (props2.theme === "row" ? "center" : void 0),
          "status": status,
          "label": props2.label,
          "suffix": props2.suffix
        }, p.listeners, props2.inputProps, {
          "value": p.userInput.value,
          "onChange": p.onInnerInputChange
        }), context.slots), props2.theme !== "normal" && vue.createVNode(Button, {
          "class": p.addClasses.value,
          "disabled": p.tDisabled.value,
          "onClick": p.handleAdd,
          "variant": "outline",
          "shape": "square",
          "icon": function icon() {
            return addIcon;
          }
        }, null), props2.tips && vue.createVNode("div", {
          "class": "".concat(p.classPrefix.value, "-input__tips ").concat(p.classPrefix.value, "-input__tips--").concat(status)
        }, [props2.tips])]);
      };
    }
  });

  var InputNumber = withInstall(_InputNumber);

  var assignValue = _assignValue,
    castPath$2 = _castPath,
    isIndex$1 = _isIndex,
    isObject$1 = isObject_1,
    toKey$1 = _toKey;

  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */
  function baseSet$2(object, path, value, customizer) {
    if (!isObject$1(object)) {
      return object;
    }
    path = castPath$2(path, object);
    var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;
    while (nested != null && ++index < length) {
      var key = toKey$1(path[index]),
        newValue = value;
      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
        return object;
      }
      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;
        if (newValue === undefined) {
          newValue = isObject$1(objValue) ? objValue : isIndex$1(path[index + 1]) ? [] : {};
        }
      }
      assignValue(nested, key, newValue);
      nested = nested[key];
    }
    return object;
  }
  var _baseSet = baseSet$2;

  var baseGet$1 = _baseGet,
    baseSet$1 = _baseSet,
    castPath$1 = _castPath;

  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */
  function basePickBy$1(object, paths, predicate) {
    var index = -1,
      length = paths.length,
      result = {};
    while (++index < length) {
      var path = paths[index],
        value = baseGet$1(object, path);
      if (predicate(value, path)) {
        baseSet$1(result, castPath$1(path, object), value);
      }
    }
    return result;
  }
  var _basePickBy = basePickBy$1;

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn$1(object, key) {
    return object != null && key in Object(object);
  }
  var _baseHasIn = baseHasIn$1;

  var castPath = _castPath,
    isArguments = isArguments_1,
    isArray$1 = isArray_1,
    isIndex = _isIndex,
    isLength = isLength_1,
    toKey = _toKey;

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath$1(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1,
      length = path.length,
      result = false;
    while (++index < length) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray$1(object) || isArguments(object));
  }
  var _hasPath = hasPath$1;

  var baseHasIn = _baseHasIn,
    hasPath = _hasPath;

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn$1(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }
  var hasIn_1 = hasIn$1;

  var basePickBy = _basePickBy,
    hasIn = hasIn_1;

  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */
  function basePick$1(object, paths) {
    return basePickBy(object, paths, function (value, path) {
      return hasIn(object, path);
    });
  }
  var _basePick = basePick$1;

  var basePick = _basePick,
    flatRest = _flatRest;

  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */
  var pick = flatRest(function (object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  var pick_1 = pick;

  var baseClone = _baseClone;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
  }
  var cloneDeep_1 = cloneDeep;

  var baseGet = _baseGet;

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }
  var get_1 = get;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd$1(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }
  var _setCacheAdd = setCacheAdd$1;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas$1(value) {
    return this.__data__.has(value);
  }
  var _setCacheHas = setCacheHas$1;

  var MapCache = _MapCache,
    setCacheAdd = _setCacheAdd,
    setCacheHas = _setCacheHas;

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache$3(values) {
    var index = -1,
      length = values == null ? 0 : values.length;
    this.__data__ = new MapCache();
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache$3.prototype.add = SetCache$3.prototype.push = setCacheAdd;
  SetCache$3.prototype.has = setCacheHas;
  var _SetCache = SetCache$3;

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex$1(array, predicate, fromIndex, fromRight) {
    var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }
  var _baseFindIndex = baseFindIndex$1;

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN$1(value) {
    return value !== value;
  }
  var _baseIsNaN = baseIsNaN$1;

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf$1(array, value, fromIndex) {
    var index = fromIndex - 1,
      length = array.length;
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  var _strictIndexOf = strictIndexOf$1;

  var baseFindIndex = _baseFindIndex,
    baseIsNaN = _baseIsNaN,
    strictIndexOf = _strictIndexOf;

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf$1(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }
  var _baseIndexOf = baseIndexOf$1;

  var baseIndexOf = _baseIndexOf;

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes$2(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }
  var _arrayIncludes = arrayIncludes$2;

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith$2(array, value, comparator) {
    var index = -1,
      length = array == null ? 0 : array.length;
    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }
  var _arrayIncludesWith = arrayIncludesWith$2;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas$3(cache, key) {
    return cache.has(key);
  }
  var _cacheHas = cacheHas$3;

  var SetCache$2 = _SetCache,
    arrayIncludes$1 = _arrayIncludes,
    arrayIncludesWith$1 = _arrayIncludesWith,
    arrayMap$3 = _arrayMap,
    baseUnary$1 = _baseUnary,
    cacheHas$2 = _cacheHas;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min;

  /**
   * The base implementation of methods like `_.intersection`, without support
   * for iteratee shorthands, that accepts an array of arrays to inspect.
   *
   * @private
   * @param {Array} arrays The arrays to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of shared values.
   */
  function baseIntersection$1(arrays, iteratee, comparator) {
    var includes = comparator ? arrayIncludesWith$1 : arrayIncludes$1,
      length = arrays[0].length,
      othLength = arrays.length,
      othIndex = othLength,
      caches = Array(othLength),
      maxLength = Infinity,
      result = [];
    while (othIndex--) {
      var array = arrays[othIndex];
      if (othIndex && iteratee) {
        array = arrayMap$3(array, baseUnary$1(iteratee));
      }
      maxLength = nativeMin(array.length, maxLength);
      caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache$2(othIndex && array) : undefined;
    }
    array = arrays[0];
    var index = -1,
      seen = caches[0];
    outer: while (++index < length && result.length < maxLength) {
      var value = array[index],
        computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;
      if (!(seen ? cacheHas$2(seen, computed) : includes(result, computed, comparator))) {
        othIndex = othLength;
        while (--othIndex) {
          var cache = caches[othIndex];
          if (!(cache ? cacheHas$2(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
            continue outer;
          }
        }
        if (seen) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }
  var _baseIntersection = baseIntersection$1;

  var isArrayLikeObject$1 = isArrayLikeObject_1;

  /**
   * Casts `value` to an empty array if it's not an array like object.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array|Object} Returns the cast array-like object.
   */
  function castArrayLikeObject$1(value) {
    return isArrayLikeObject$1(value) ? value : [];
  }
  var _castArrayLikeObject = castArrayLikeObject$1;

  var arrayMap$2 = _arrayMap,
    baseIntersection = _baseIntersection,
    baseRest$2 = _baseRest,
    castArrayLikeObject = _castArrayLikeObject;

  /**
   * Creates an array of unique values that are included in all given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of intersecting values.
   * @example
   *
   * _.intersection([2, 1], [2, 3]);
   * // => [2]
   */
  var intersection = baseRest$2(function (arrays) {
    var mapped = arrayMap$2(arrays, castArrayLikeObject);
    return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
  });
  var intersection_1 = intersection;

  var props$S = {
    allowInput: Boolean,
    autoWidth: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: Boolean,
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number]
    },
    keys: {
      type: Object
    },
    label: {
      type: [String, Function]
    },
    loading: Boolean,
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    panel: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": ""
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    readonly: Boolean,
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tag: {
      type: [String, Function]
    },
    tagInputProps: {
      type: Object
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number, Boolean, Object, Array, Date]
    },
    valueDisplay: {
      type: [String, Function]
    },
    onBlur: Function,
    onClear: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onPopupVisibleChange: Function,
    onTagChange: Function
  };

  function ownKeys$1X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1X(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var COMMON_PROPERTIES = ["status", "clearable", "disabled", "label", "placeholder", "readonly", "suffix", "suffixIcon", "onPaste", "onMouseenter", "onMouseleave"];
  var DEFAULT_KEYS$1 = {
    label: "label",
    value: "value"
  };
  function getInputValue(value, keys) {
    var iKeys = keys || DEFAULT_KEYS$1;
    return isObject_1(value) ? value[iKeys.label] : value;
  }
  function useSingle$1(props, context) {
    var _props$defaultInputVa;
    var _toRefs = vue.toRefs(props),
      value = _toRefs.value,
      keys = _toRefs.keys,
      propsInputValue = _toRefs.inputValue;
    var classPrefix = usePrefixClass();
    var inputRef = vue.ref();
    var _useDefaultValue = useDefaultValue(propsInputValue, (_props$defaultInputVa = props.defaultInputValue) !== null && _props$defaultInputVa !== void 0 ? _props$defaultInputVa : "", props.onInputChange, "inputValue"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      inputValue = _useDefaultValue2[0],
      setInputValue = _useDefaultValue2[1];
    var renderTNode = useTNodeJSX();
    var disable = useFormDisabled();
    var commonInputProps = vue.computed(function () {
      return _objectSpread$1W(_objectSpread$1W({}, pick_1(props, COMMON_PROPERTIES)), {}, {
        disabled: disable.value
      });
    });
    var onInnerClear = function onInnerClear(context2) {
      var _context2$e, _props$onClear;
      context2 === null || context2 === void 0 ? void 0 : (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props, context2);
      setInputValue("", {
        trigger: "clear"
      });
    };
    var onInnerInputChange = function onInnerInputChange(value2, context2) {
      if (props.allowInput) {
        setInputValue(value2, _objectSpread$1W(_objectSpread$1W({}, context2), {}, {
          trigger: "input"
        }));
      }
    };
    var renderSelectSingle = function renderSelectSingle(popupVisible) {
      var _context$attrs, _ref;
      var singleValueDisplay = renderTNode("valueDisplay");
      var displayedValue = popupVisible && props.allowInput ? inputValue.value : getInputValue(value.value, keys.value);
      var prefixContent = [singleValueDisplay, renderTNode("label")];
      var inputProps = _objectSpread$1W(_objectSpread$1W({}, commonInputProps.value), {}, {
        value: singleValueDisplay ? void 0 : displayedValue,
        label: prefixContent.length ? function () {
          return prefixContent;
        } : void 0,
        autoWidth: props.autoWidth,
        readonly: !props.allowInput || props.readonly,
        placeholder: singleValueDisplay ? "" : props.placeholder,
        suffixIcon: !disable.value && props.loading ? function () {
          return vue.createVNode(Loading, {
            "loading": true,
            "size": "small"
          }, null);
        } : props.suffixIcon,
        showClearIconOnEmpty: Boolean(props.clearable && (inputValue.value || displayedValue) && !disable.value && !props.readonly),
        allowTriggerBlur: props.allowInput && !props.readonly
      }, props.inputProps);
      return vue.createVNode(Input, vue.mergeProps({
        "ref": "inputRef",
        "style": (_context$attrs = context.attrs) === null || _context$attrs === void 0 ? void 0 : _context$attrs.style
      }, _objectSpread$1W({
        onChange: onInnerInputChange,
        onClear: onInnerClear,
        onBlur: function onBlur(val, context2) {
          var _props$onBlur;
          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, value.value, _objectSpread$1W(_objectSpread$1W({}, context2), {}, {
            inputValue: val
          }));
        },
        onEnter: function onEnter(val, context2) {
          var _props$onEnter;
          (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, value.value, _objectSpread$1W(_objectSpread$1W({}, context2), {}, {
            inputValue: val
          }));
        },
        onFocus: function onFocus(val, context2) {
          var _props$onFocus;
          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, value.value, _objectSpread$1W(_objectSpread$1W({}, context2), {}, {
            inputValue: val
          }));
          !popupVisible && setInputValue(getInputValue(value.value, keys.value), _objectSpread$1W(_objectSpread$1W({}, context2), {}, {
            trigger: "input"
          }));
        }
      }, inputProps), {
        "inputClass": (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix.value, "-input--focused"), popupVisible), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-focused"), popupVisible), _ref)
      }), context.slots);
    };
    return {
      inputRef: inputRef,
      commonInputProps: commonInputProps,
      onInnerClear: onInnerClear,
      renderSelectSingle: renderSelectSingle
    };
  }

  var props$R = {
    autoWidth: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: Boolean,
    dragSort: Boolean,
    excessTagsDisplayType: {
      type: String,
      "default": "break-line",
      validator: function validator(val) {
        if (!val) return true;
        return ["scroll", "break-line"].includes(val);
      }
    },
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number],
      "default": ""
    },
    label: {
      type: [String, Function]
    },
    max: {
      type: Number
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tag: {
      type: [String, Function]
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array
    },
    valueDisplay: {
      type: [String, Function]
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onDragSort: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onRemove: Function
  };

  function useTagScroll(props) {
    var tagInputRef = vue.ref();
    var _toRefs = vue.toRefs(props),
      excessTagsDisplayType = _toRefs.excessTagsDisplayType,
      readonly = _toRefs.readonly,
      disabled = _toRefs.disabled;
    var scrollDistance = vue.ref(0);
    var scrollElement = vue.ref();
    var mouseEnterTimer = vue.ref();
    var updateScrollElement = function updateScrollElement(element) {
      var inputElement = element.children[0];
      scrollElement.value = inputElement;
    };
    var updateScrollDistance = function updateScrollDistance() {
      scrollDistance.value = scrollElement.value.scrollWidth - scrollElement.value.clientWidth;
    };
    var scrollTo = function scrollTo(distance) {
      var _scrollElement$value;
      (_scrollElement$value = scrollElement.value) === null || _scrollElement$value === void 0 ? void 0 : _scrollElement$value.scroll({
        left: distance,
        behavior: "smooth"
      });
    };
    var scrollToRight = function scrollToRight() {
      updateScrollDistance();
      scrollTo(scrollDistance.value);
    };
    var scrollToLeft = function scrollToLeft() {
      scrollTo(0);
    };
    var onWheel = function onWheel(_ref) {
      var e = _ref.e;
      if (readonly.value || disabled.value) return;
      if (!scrollElement.value) return;
      if (e.deltaX > 0) {
        var distance = Math.min(scrollElement.value.scrollLeft + 120, scrollDistance.value);
        scrollTo(distance);
      } else {
        var _distance = Math.max(scrollElement.value.scrollLeft - 120, 0);
        scrollTo(_distance);
      }
    };
    var scrollToRightOnEnter = function scrollToRightOnEnter() {
      if (excessTagsDisplayType.value !== "scroll") return;
      mouseEnterTimer.value = setTimeout(function () {
        scrollToRight();
        clearTimeout(mouseEnterTimer.value);
      }, 100);
    };
    var scrollToLeftOnLeave = function scrollToLeftOnLeave() {
      if (excessTagsDisplayType.value !== "scroll") return;
      scrollTo(0);
      clearTimeout(mouseEnterTimer.value);
    };
    var init = function init() {
      var _tagInputRef$value;
      var element = (_tagInputRef$value = tagInputRef.value) === null || _tagInputRef$value === void 0 ? void 0 : _tagInputRef$value.$el;
      if (!element) return;
      updateScrollElement(element);
    };
    var clear = function clear() {
      clearTimeout(mouseEnterTimer.value);
    };
    vue.onMounted(init);
    vue.onUnmounted(clear);
    return {
      tagInputRef: tagInputRef,
      scrollElement: scrollElement,
      scrollDistance: scrollDistance,
      scrollTo: scrollTo,
      scrollToRight: scrollToRight,
      scrollToLeft: scrollToLeft,
      updateScrollElement: updateScrollElement,
      updateScrollDistance: updateScrollDistance,
      onWheel: onWheel,
      scrollToRightOnEnter: scrollToRightOnEnter,
      scrollToLeftOnLeave: scrollToLeftOnLeave
    };
  }

  var props$Q = {
    closable: Boolean,
    content: {
      type: [String, Number, Function]
    },
    "default": {
      type: [String, Number, Function]
    },
    disabled: Boolean,
    icon: {
      type: Function,
      "default": void 0
    },
    maxWidth: {
      type: [String, Number]
    },
    shape: {
      type: String,
      "default": "square",
      validator: function validator(val) {
        return ["square", "round", "mark"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        return ["default", "primary", "warning", "danger", "success"].includes(val);
      }
    },
    variant: {
      type: String,
      "default": "dark",
      validator: function validator(val) {
        return ["dark", "light", "outline", "light-outline"].includes(val);
      }
    },
    onClick: Function,
    onClose: Function
  };

  var _Tag = vue.defineComponent({
    name: "TTag",
    props: props$Q,
    setup: function setup(props2) {
      var _useConfig = useConfig("tag"),
        tagGlobalConfig = _useConfig.globalConfig;
      var COMPONENT_NAME = usePrefixClass("tag");
      var _useGlobalIcon = useGlobalIcon({
          CloseIcon: close
        }),
        CloseIcon = _useGlobalIcon.CloseIcon;
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var _useCommonClassName = useCommonClassName$2(),
        SIZE = _useCommonClassName.SIZE;
      var tagClass = vue.computed(function () {
        var _ref;
        return ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "--").concat(props2.theme), "".concat(COMPONENT_NAME.value, "--").concat(props2.variant), (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--ellipsis"), props2.maxWidth), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--close"), props2.closable), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--disabled"), props2.disabled), _ref), SIZE.value[props2.size], props2.shape !== "square" && "".concat(COMPONENT_NAME.value, "--").concat(props2.shape)];
      });
      var tagStyle = vue.computed(function () {
        return props2.maxWidth ? {
          maxWidth: "".concat(props2.maxWidth, "px")
        } : {};
      });
      var handleClick = function handleClick(e) {
        var _props2$onClick;
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
          e: e
        });
      };
      var getCloseIcon = function getCloseIcon() {
        if (!props2.closable) return null;
        var iconClassName = "".concat(COMPONENT_NAME.value, "__icon-close");
        if (tagGlobalConfig.value.closeIcon) {
          return vue.h(tagGlobalConfig.value.closeIcon(vue.h), {
            "class": iconClassName
          });
        }
        return vue.createVNode(CloseIcon, {
          "onClick": function onClick(_ref2) {
            var _props2$onClose;
            var e = _ref2.e;
            e.stopPropagation();
            (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, {
              e: e
            });
          },
          "class": iconClassName
        }, null);
      };
      return function () {
        var closeIcon = getCloseIcon();
        var tagContent = renderContent("default", "content");
        var icon = renderTNodeJSX("icon");
        return vue.createVNode("span", {
          "class": tagClass.value,
          "style": tagStyle.value,
          "onClick": handleClick
        }, [icon, props2.maxWidth ? vue.createVNode("span", {
          "style": tagStyle.value,
          "class": "".concat(COMPONENT_NAME.value, "--text")
        }, [tagContent]) : tagContent, closeIcon]);
      };
    }
  });

  var props$P = {
    checked: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultChecked: Boolean,
    content: {
      type: [String, Number, Function]
    },
    "default": {
      type: [String, Number, Function]
    },
    disabled: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    onChange: Function,
    onClick: Function
  };

  var _CheckTag = vue.defineComponent({
    name: "TCheckTag",
    props: props$P,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("tag");
      var _useCommonClassName = useCommonClassName$2(),
        SIZE = _useCommonClassName.SIZE;
      var renderContent = useContent();
      var _toRefs = vue.toRefs(props2),
        checked = _toRefs.checked,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerChecked = _useVModel2[0],
        setInnerChecked = _useVModel2[1];
      var tagClass = vue.computed(function () {
        var _ref;
        return ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "--check"), "".concat(COMPONENT_NAME.value, "--default"), SIZE.value[props2.size], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--checked"), !props2.disabled && innerChecked.value), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--disabled"), props2.disabled), _ref)];
      });
      var handleClick = function handleClick(e) {
        if (!props2.disabled) {
          var _props2$onClick;
          (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
            e: e
          });
          setInnerChecked(!innerChecked.value);
        }
      };
      return function () {
        var tagContent = renderContent("default", "content");
        return vue.createVNode("span", {
          "class": tagClass.value,
          "onClick": handleClick
        }, [tagContent]);
      };
    }
  });

  var Tag = withInstall(_Tag);
  var CheckTag = withInstall(_CheckTag);

  function ownKeys$1W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1W(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useTagList(props) {
    var renderTNode = useTNodeJSX();
    var classPrefix = usePrefixClass();
    var _toRefs = vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue,
      onRemove = _toRefs.onRemove,
      max = _toRefs.max,
      minCollapsedNum = _toRefs.minCollapsedNum,
      size = _toRefs.size,
      disabled = _toRefs.disabled,
      readonly = _toRefs.readonly,
      tagProps = _toRefs.tagProps,
      getDragProps = _toRefs.getDragProps;
    var _useVModel = useVModel(value, modelValue, props.defaultValue || [], props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      tagValue = _useVModel2[0],
      setTagValue = _useVModel2[1];
    var oldInputValue = vue.ref();
    var _onClose = function onClose(p) {
      var _onRemove$value;
      var arr = _toConsumableArray(tagValue.value);
      arr.splice(p.index, 1);
      setTagValue(arr, _objectSpread$1V({
        trigger: "tag-remove"
      }, p));
      (_onRemove$value = onRemove.value) === null || _onRemove$value === void 0 ? void 0 : _onRemove$value.call(onRemove, _objectSpread$1V(_objectSpread$1V({}, p), {}, {
        trigger: "tag-remove",
        value: arr
      }));
    };
    var clearAll = function clearAll(context) {
      setTagValue([], {
        trigger: "clear",
        e: context.e
      });
    };
    var onInnerEnter = function onInnerEnter(value2, context) {
      var _tagValue$value, _props$onEnter;
      var valueStr = value2 ? String(value2).trim() : "";
      if (!valueStr) return;
      var isLimitExceeded = max && ((_tagValue$value = tagValue.value) === null || _tagValue$value === void 0 ? void 0 : _tagValue$value.length) >= max.value;
      var newValue = tagValue.value;
      if (!isLimitExceeded) {
        newValue = tagValue.value instanceof Array ? tagValue.value.concat(String(valueStr)) : [valueStr];
        setTagValue(newValue, {
          trigger: "enter",
          index: newValue.length - 1,
          item: valueStr,
          e: context.e
        });
      }
      props === null || props === void 0 ? void 0 : (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, newValue, _objectSpread$1V(_objectSpread$1V({}, context), {}, {
        inputValue: value2
      }));
    };
    var onInputBackspaceKeyUp = function onInputBackspaceKeyUp(value2, context) {
      var e = context.e;
      if (!tagValue.value || !tagValue.value.length) return;
      if (!oldInputValue.value && ["Backspace", "NumpadDelete"].includes(e.code)) {
        var _onRemove$value2;
        var index = tagValue.value.length - 1;
        var item = tagValue.value[index];
        var trigger = "backspace";
        setTagValue(tagValue.value.slice(0, -1), {
          e: e,
          index: index,
          item: item,
          trigger: trigger
        });
        (_onRemove$value2 = onRemove.value) === null || _onRemove$value2 === void 0 ? void 0 : _onRemove$value2.call(onRemove, {
          e: e,
          index: index,
          item: item,
          trigger: trigger,
          value: tagValue.value
        });
      }
      oldInputValue.value = value2;
    };
    var renderLabel = function renderLabel(_ref) {
      var displayNode = _ref.displayNode,
        label = _ref.label;
      var newList = minCollapsedNum.value ? tagValue.value.slice(0, minCollapsedNum.value) : tagValue.value;
      var list = displayNode ? [displayNode] : newList === null || newList === void 0 ? void 0 : newList.map(function (item, index) {
        var _getDragProps$value;
        var tagContent = renderTNode("tag", {
          params: {
            value: item
          }
        });
        return vue.createVNode(Tag, vue.mergeProps({
          "key": "".concat(item).concat(index),
          "size": size.value,
          "disabled": disabled.value,
          "onClose": function onClose(context) {
            return _onClose({
              e: context.e,
              item: item,
              index: index
            });
          },
          "closable": !readonly.value && !disabled.value
        }, (_getDragProps$value = getDragProps.value) === null || _getDragProps$value === void 0 ? void 0 : _getDragProps$value.call(getDragProps, index, item), tagProps.value), {
          "default": function _default() {
            return [tagContent !== null && tagContent !== void 0 ? tagContent : item];
          }
        });
      });
      if (![null, void 0, ""].includes(label)) {
        list.unshift(vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-tag-input__prefix"),
          "key": "label"
        }, [label]));
      }
      if (newList.length !== (tagValue.value || []).length) {
        var len = tagValue.value.length - newList.length;
        var more = renderTNode("collapsedItems", {
          params: {
            value: tagValue.value,
            count: tagValue.value.length,
            collapsedTags: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length),
            collapsedSelectedItems: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length)
          }
        });
        list.push(more !== null && more !== void 0 ? more : vue.createVNode(Tag, {
          "key": "more"
        }, {
          "default": function _default() {
            return ["+", len];
          }
        }));
      }
      return list;
    };
    return {
      tagValue: tagValue,
      clearAll: clearAll,
      onClose: _onClose,
      onInnerEnter: onInnerEnter,
      onInputBackspaceKeyUp: onInputBackspaceKeyUp,
      renderLabel: renderLabel
    };
  }

  function useHover(props) {
    var disabled = props.disabled,
      readonly = props.readonly,
      onMouseenter = props.onMouseenter,
      onMouseleave = props.onMouseleave;
    var isHover = vue.ref(false);
    var addHover = function addHover(context) {
      if (readonly || disabled) return;
      isHover.value = true;
      onMouseenter === null || onMouseenter === void 0 ? void 0 : onMouseenter(context);
    };
    var cancelHover = function cancelHover(context) {
      if (readonly || disabled) return;
      isHover.value = false;
      onMouseleave === null || onMouseleave === void 0 ? void 0 : onMouseleave(context);
    };
    return {
      isHover: isHover,
      addHover: addHover,
      cancelHover: cancelHover
    };
  }

  function useDragSorter(props) {
    var sortOnDraggable = props.sortOnDraggable,
      onDragSort = props.onDragSort,
      onDragOverCheck = props.onDragOverCheck;
    var draggingIndex = vue.ref(-1);
    var dragStartData = vue.ref(null);
    var isDropped = vue.ref(null);
    var startInfo = vue.reactive({
      nodeX: 0,
      nodeWidth: 0,
      mouseX: 0
    });
    var onDragOver = function onDragOver(e, index, record) {
      e.preventDefault();
      if (draggingIndex.value === index || draggingIndex.value === -1) return;
      var target = e.target;
      if (onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.targetClassNameRegExp && !(onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.targetClassNameRegExp.test(target.className))) {
        return;
      }
      if (onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.x && target) {
        if (!startInfo.nodeWidth) return;
        var _target$getBoundingCl = target.getBoundingClientRect(),
          x = _target$getBoundingCl.x,
          width = _target$getBoundingCl.width;
        var targetNodeMiddleX = x + width / 2;
        var draggingNodeLeft = e.clientX - (startInfo.mouseX - startInfo.nodeX);
        var draggingNodeRight = draggingNodeLeft + startInfo.nodeWidth;
        var overlap = false;
        if (draggingNodeLeft > x && draggingNodeLeft < x + width) {
          overlap = draggingNodeLeft < targetNodeMiddleX;
        } else {
          overlap = draggingNodeRight > targetNodeMiddleX;
        }
        if (!overlap) return;
      }
      onDragSort === null || onDragSort === void 0 ? void 0 : onDragSort({
        currentIndex: draggingIndex.value,
        current: dragStartData,
        target: record,
        targetIndex: index
      });
      draggingIndex.value = index;
    };
    if (!sortOnDraggable) {
      return {};
    }
    function onDragStart(e, index, record) {
      draggingIndex.value = index;
      dragStartData.value = record;
      var target = e.target;
      if (onDragOverCheck && target) {
        var _target$getBoundingCl2 = target.getBoundingClientRect(),
          x = _target$getBoundingCl2.x,
          width = _target$getBoundingCl2.width;
        startInfo.nodeX = x;
        startInfo.nodeWidth = width;
        startInfo.mouseX = e.clientX;
      }
    }
    function _onDrop() {
      isDropped.value = true;
    }
    function onDragEnd() {
      if (!isDropped.value) ;
      isDropped.value = false;
      draggingIndex.value = -1;
      dragStartData.value = null;
    }
    function getDragProps(index, record) {
      if (sortOnDraggable) {
        return {
          draggable: true,
          onDragstart: function onDragstart(e) {
            onDragStart(e, index, record);
          },
          onDragover: function onDragover(e) {
            onDragOver(e, index, record);
          },
          onDrop: function onDrop() {
            _onDrop();
          },
          onDragend: function onDragend() {
            onDragEnd();
          }
        };
      }
      return {};
    }
    return {
      onDragStart: onDragStart,
      onDragOver: onDragOver,
      onDrop: _onDrop,
      onDragEnd: onDragEnd,
      getDragProps: getDragProps,
      dragging: draggingIndex.value !== -1
    };
  }

  function ownKeys$1V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1V(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var useComponentClassName$1 = function useComponentClassName() {
    return {
      NAME_CLASS: usePrefixClass("tag-input"),
      CLEAR_CLASS: usePrefixClass("tag-input__suffix-clear"),
      BREAK_LINE_CLASS: usePrefixClass("tag-input--break-line")
    };
  };
  var _TagInput = vue.defineComponent({
    name: "TTagInput",
    props: _objectSpread$1U({}, props$R),
    setup: function setup(props2) {
      var _useComponentClassNam = useComponentClassName$1(),
        NAME_CLASS = _useComponentClassNam.NAME_CLASS,
        CLEAR_CLASS = _useComponentClassNam.CLEAR_CLASS,
        BREAK_LINE_CLASS = _useComponentClassNam.BREAK_LINE_CLASS;
      var _useGlobalIcon = useGlobalIcon({
          CloseCircleFilledIcon: closeCircleFilled
        }),
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;
      var _toRefs = vue.toRefs(props2),
        inputValue = _toRefs.inputValue;
      var _useDefault = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        tInputValue = _useDefault2[0],
        setTInputValue = _useDefault2[1];
      var _toRefs2 = vue.toRefs(props2),
        excessTagsDisplayType = _toRefs2.excessTagsDisplayType,
        readonly = _toRefs2.readonly,
        disabled = _toRefs2.disabled,
        clearable = _toRefs2.clearable,
        placeholder = _toRefs2.placeholder;
      var _useHover = useHover({
          readonly: props2.readonly,
          disabled: props2.disabled,
          onMouseenter: props2.onMouseenter,
          onMouseleave: props2.onMouseleave
        }),
        isHover = _useHover.isHover,
        addHover = _useHover.addHover,
        cancelHover = _useHover.cancelHover;
      var _useConfig = useConfig(),
        prefix = _useConfig.classPrefix;
      var _useDragSorter = useDragSorter(_objectSpread$1U(_objectSpread$1U({}, props2), {}, {
          sortOnDraggable: props2.dragSort,
          onDragOverCheck: {
            x: true,
            targetClassNameRegExp: new RegExp("^".concat(prefix, "-tag"))
          }
        })),
        getDragProps = _useDragSorter.getDragProps;
      var _useTagScroll = useTagScroll(props2),
        scrollToRight = _useTagScroll.scrollToRight,
        onWheel = _useTagScroll.onWheel,
        scrollToRightOnEnter = _useTagScroll.scrollToRightOnEnter,
        scrollToLeftOnLeave = _useTagScroll.scrollToLeftOnLeave,
        tagInputRef = _useTagScroll.tagInputRef;
      var _useTagList = useTagList(vue.reactive(_objectSpread$1U(_objectSpread$1U({}, vue.toRefs(props2)), {}, {
          getDragProps: getDragProps
        }))),
        tagValue = _useTagList.tagValue,
        onInnerEnter = _useTagList.onInnerEnter,
        onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp,
        clearAll = _useTagList.clearAll,
        renderLabel = _useTagList.renderLabel,
        onClose = _useTagList.onClose;
      var classes = vue.computed(function () {
        return [NAME_CLASS.value, _defineProperty$3({}, BREAK_LINE_CLASS.value, excessTagsDisplayType.value === "break-line")];
      });
      var tagInputPlaceholder = vue.computed(function () {
        var _tagValue$value;
        return !((_tagValue$value = tagValue.value) !== null && _tagValue$value !== void 0 && _tagValue$value.length) ? placeholder.value : "";
      });
      var showClearIcon = vue.computed(function () {
        var _tagValue$value2;
        return Boolean(!readonly.value && !disabled.value && clearable.value && isHover.value && (((_tagValue$value2 = tagValue.value) === null || _tagValue$value2 === void 0 ? void 0 : _tagValue$value2.length) || tInputValue.value));
      });
      var onInputEnter = function onInputEnter(value, context) {
        var _context$e, _context$e$preventDef;
        (_context$e = context.e) === null || _context$e === void 0 ? void 0 : (_context$e$preventDef = _context$e.preventDefault) === null || _context$e$preventDef === void 0 ? void 0 : _context$e$preventDef.call(_context$e);
        setTInputValue("", {
          e: context.e,
          trigger: "enter"
        });
        onInnerEnter(value, context);
        vue.nextTick(function () {
          scrollToRight();
        });
      };
      var onClick = function onClick() {
        tagInputRef.value.focus();
      };
      var onClearClick = function onClearClick(context) {
        var _props2$onClear;
        clearAll(context);
        setTInputValue("", {
          e: context.e,
          trigger: "clear"
        });
        (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, context);
      };
      return {
        CLEAR_CLASS: CLEAR_CLASS,
        CloseCircleFilledIcon: CloseCircleFilledIcon,
        tagValue: tagValue,
        tInputValue: tInputValue,
        isHover: isHover,
        tagInputPlaceholder: tagInputPlaceholder,
        showClearIcon: showClearIcon,
        tagInputRef: tagInputRef,
        setTInputValue: setTInputValue,
        addHover: addHover,
        cancelHover: cancelHover,
        onInputEnter: onInputEnter,
        onInnerEnter: onInnerEnter,
        onInputBackspaceKeyUp: onInputBackspaceKeyUp,
        renderLabel: renderLabel,
        onWheel: onWheel,
        scrollToRightOnEnter: scrollToRightOnEnter,
        scrollToLeftOnLeave: scrollToLeftOnLeave,
        onClick: onClick,
        onClearClick: onClearClick,
        onClose: onClose,
        classes: classes
      };
    },
    render: function render() {
      var _this = this,
        _this$inputProps,
        _this$tagValue;
      var CloseCircleFilledIcon = this.CloseCircleFilledIcon;
      var suffixIconNode = this.showClearIcon ? vue.createVNode(CloseCircleFilledIcon, {
        "class": this.CLEAR_CLASS,
        "onClick": this.onClearClick
      }, null) : renderTNodeJSX(this, "suffixIcon");
      var displayNode = renderTNodeJSX(this, "valueDisplay", {
        params: {
          value: this.tagValue,
          onClose: function onClose(index, item) {
            return _this.onClose({
              index: index,
              item: item
            });
          }
        }
      });
      var _label = renderTNodeJSX(this, "label", {
        silent: true
      });
      return vue.createVNode(Input, vue.mergeProps({
        "ref": "tagInputRef",
        "readonly": this.readonly,
        "value": this.tInputValue,
        "autoWidth": true,
        "size": this.size,
        "disabled": this.disabled,
        "label": function label() {
          return _this.renderLabel({
            displayNode: displayNode,
            label: _label
          });
        },
        "class": this.classes,
        "tips": this.tips,
        "status": this.status,
        "placeholder": this.tagInputPlaceholder,
        "suffix": this.suffix,
        "suffixIcon": function suffixIcon() {
          return suffixIconNode;
        },
        "showInput": !((_this$inputProps = this.inputProps) !== null && _this$inputProps !== void 0 && _this$inputProps.readonly) || !this.tagValue || !((_this$tagValue = this.tagValue) !== null && _this$tagValue !== void 0 && _this$tagValue.length),
        "keepWrapperWidth": !this.autoWidth,
        "onWheel": this.onWheel,
        "onChange": function onChange(val, context) {
          _this.setTInputValue(val, _objectSpread$1U(_objectSpread$1U({}, context), {}, {
            trigger: "input"
          }));
        },
        "onPaste": this.onPaste,
        "onEnter": this.onInputEnter,
        "onKeyup": this.onInputBackspaceKeyUp,
        "onMouseenter": function onMouseenter(context) {
          _this.addHover(context);
          _this.scrollToRightOnEnter();
        },
        "onMouseleave": function onMouseleave(context) {
          _this.cancelHover(context);
          _this.scrollToLeftOnLeave();
        },
        "onFocus": function onFocus(inputValue, context) {
          var _this$onFocus;
          (_this$onFocus = _this.onFocus) === null || _this$onFocus === void 0 ? void 0 : _this$onFocus.call(_this, _this.tagValue, {
            e: context.e,
            inputValue: inputValue
          });
        },
        "onBlur": function onBlur(inputValue, context) {
          var _this$onBlur;
          (_this$onBlur = _this.onBlur) === null || _this$onBlur === void 0 ? void 0 : _this$onBlur.call(_this, _this.tagValue, {
            e: context.e,
            inputValue: inputValue
          });
        },
        "onClick": this.onClick
      }, this.inputProps), null);
    }
  });

  var TagInput = withInstall(_TagInput);

  function ownKeys$1U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1U(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DEFAULT_KEYS = {
    label: "label",
    key: "key",
    children: "children"
  };
  function useMultiple(props, context) {
    var _toRefs = vue.toRefs(props),
      inputValue = _toRefs.inputValue;
    var classPrefix = usePrefixClass();
    var tagInputRef = vue.ref();
    var _useDefault = useDefaultValue(inputValue, props.defaultInputValue, props.onInputChange, "inputValue"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      tInputValue = _useDefault2[0],
      setTInputValue = _useDefault2[1];
    var disable = useFormDisabled();
    var iKeys = vue.computed(function () {
      return _objectSpread$1T(_objectSpread$1T({}, DEFAULT_KEYS), props.keys);
    });
    var tags = vue.computed(function () {
      if (!(props.value instanceof Array)) {
        return isObject_1(props.value) ? [props.value[iKeys.value.label]] : [props.value];
      }
      return props.value.map(function (item) {
        return isObject_1(item) ? item[iKeys.value.label] : item;
      });
    });
    var tPlaceholder = vue.computed(function () {
      return !tags.value || !tags.value.length ? props.placeholder : "";
    });
    var onTagInputChange = function onTagInputChange(val, context2) {
      var _props$onTagChange;
      if (context2.trigger === "tag-remove") {
        var _context2$e;
        (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
      }
      (_props$onTagChange = props.onTagChange) === null || _props$onTagChange === void 0 ? void 0 : _props$onTagChange.call(props, val, context2);
    };
    var renderSelectMultiple = function renderSelectMultiple(p) {
      var tagInputProps = _objectSpread$1T(_objectSpread$1T({}, p.commonInputProps), {}, {
        tagProps: props.tagProps,
        label: props.label,
        autoWidth: props.autoWidth,
        readonly: props.readonly,
        placeholder: tPlaceholder.value,
        minCollapsedNum: props.minCollapsedNum,
        collapsedItems: props.collapsedItems,
        tag: props.tag,
        value: tags.value,
        valueDisplay: props.valueDisplay,
        inputValue: tInputValue.value || "",
        inputProps: _objectSpread$1T({
          readonly: !props.allowInput || props.readonly,
          inputClass: _defineProperty$3({}, "".concat(classPrefix.value, "-input--focused"), p.popupVisible)
        }, props.inputProps),
        suffixIcon: !disable.value && props.loading ? function () {
          return vue.createVNode(Loading, {
            "loading": true,
            "size": "small"
          }, null);
        } : props.suffixIcon
      }, props.tagInputProps);
      return vue.createVNode(TagInput, vue.mergeProps({
        "ref": "tagInputRef"
      }, tagInputProps, {
        "onInputChange": function onInputChange(val, context2) {
          if ((context2 === null || context2 === void 0 ? void 0 : context2.trigger) === "enter") return;
          setTInputValue(val, {
            trigger: context2.trigger,
            e: context2.e
          });
        },
        "onChange": onTagInputChange,
        "onClear": p.onInnerClear,
        "onBlur": function onBlur(val, context2) {
          var _props$onBlur;
          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, props.value, _objectSpread$1T(_objectSpread$1T({}, context2), {}, {
            tagInputValue: val
          }));
        },
        "onEnter": function onEnter(val, context2) {
          var _props$onEnter;
          (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, props.value, _objectSpread$1T(_objectSpread$1T({}, context2), {}, {
            inputValue: tInputValue.value
          }));
        },
        "onFocus": function onFocus(val, context2) {
          var _props$onFocus;
          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, props.value, _objectSpread$1T(_objectSpread$1T({}, context2), {}, {
            tagInputValue: val
          }));
        }
      }), context.slots);
    };
    return {
      tags: tags,
      tPlaceholder: tPlaceholder,
      tagInputRef: tagInputRef,
      renderSelectMultiple: renderSelectMultiple
    };
  }

  function ownKeys$1T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1T(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var MAX_POPUP_WIDTH = 1e3;
  function useOverlayInnerStyle(props) {
    var _toRefs = vue.toRefs(props),
      popupProps = _toRefs.popupProps,
      autoWidth = _toRefs.autoWidth;
    var innerPopupVisible = vue.ref(false);
    var disable = useFormDisabled();
    var matchWidthFunc = function matchWidthFunc(triggerElement, popupElement) {
      var SCROLLBAR_WIDTH = popupElement.scrollHeight > popupElement.offsetHeight ? 8 : 0;
      var width = popupElement.offsetWidth + SCROLLBAR_WIDTH >= triggerElement.offsetWidth ? popupElement.offsetWidth : triggerElement.offsetWidth;
      var otherOverlayInnerStyle = {};
      if (popupProps.value && _typeof$2(popupProps.value.overlayInnerStyle) === "object" && !popupProps.value.overlayInnerStyle.width) {
        otherOverlayInnerStyle = popupProps.value.overlayInnerStyle;
      }
      return _objectSpread$1S({
        width: "".concat(Math.min(width, MAX_POPUP_WIDTH), "px")
      }, otherOverlayInnerStyle);
    };
    var onInnerPopupVisibleChange = function onInnerPopupVisibleChange(visible, context) {
      var _props$onPopupVisible;
      if (disable.value || props.readonly) return;
      var newVisible = context.trigger === "trigger-element-click" && props.allowInput ? true : visible;
      innerPopupVisible.value = newVisible;
      (_props$onPopupVisible = props.onPopupVisibleChange) === null || _props$onPopupVisible === void 0 ? void 0 : _props$onPopupVisible.call(props, newVisible, context);
    };
    var tOverlayInnerStyle = vue.computed(function () {
      var _popupProps$value;
      var result = {};
      var overlayInnerStyle = ((_popupProps$value = popupProps.value) === null || _popupProps$value === void 0 ? void 0 : _popupProps$value.overlayInnerStyle) || {};
      if (isFunction_1(overlayInnerStyle) || isObject_1(overlayInnerStyle) && overlayInnerStyle.width) {
        result = overlayInnerStyle;
      } else if (!autoWidth.value) {
        result = matchWidthFunc;
      }
      return result;
    });
    return {
      tOverlayInnerStyle: tOverlayInnerStyle,
      innerPopupVisible: innerPopupVisible,
      onInnerPopupVisibleChange: onInnerPopupVisibleChange
    };
  }

  function ownKeys$1S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1S(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var useComponentClassName = function useComponentClassName() {
    return {
      NAME_CLASS: usePrefixClass("select-input"),
      BASE_CLASS_BORDERLESS: usePrefixClass("select-input--borderless"),
      BASE_CLASS_MULTIPLE: usePrefixClass("select-input--multiple"),
      BASE_CLASS_POPUP_VISIBLE: usePrefixClass("select-input--popup-visible"),
      BASE_CLASS_EMPTY: usePrefixClass("select-input--empty")
    };
  };
  var _SelectInput = vue.defineComponent({
    name: "TSelectInput",
    props: _objectSpread$1R({}, props$S),
    setup: function setup(props2, context) {
      var _useComponentClassNam = useComponentClassName(),
        NAME_CLASS = _useComponentClassNam.NAME_CLASS,
        BASE_CLASS_BORDERLESS = _useComponentClassNam.BASE_CLASS_BORDERLESS,
        BASE_CLASS_MULTIPLE = _useComponentClassNam.BASE_CLASS_MULTIPLE,
        BASE_CLASS_POPUP_VISIBLE = _useComponentClassNam.BASE_CLASS_POPUP_VISIBLE,
        BASE_CLASS_EMPTY = _useComponentClassNam.BASE_CLASS_EMPTY;
      var classPrefix = usePrefixClass();
      var selectInputRef = vue.ref();
      var selectInputWrapRef = vue.ref();
      var _toRefs = vue.toRefs(props2),
        multiple = _toRefs.multiple,
        value = _toRefs.value,
        popupVisible = _toRefs.popupVisible,
        borderless = _toRefs.borderless;
      var _useSingle = useSingle$1(props2, context),
        commonInputProps = _useSingle.commonInputProps,
        onInnerClear = _useSingle.onInnerClear,
        renderSelectSingle = _useSingle.renderSelectSingle;
      var _useMultiple = useMultiple(props2, context),
        renderSelectMultiple = _useMultiple.renderSelectMultiple;
      var _useOverlayInnerStyle = useOverlayInnerStyle(props2),
        tOverlayInnerStyle = _useOverlayInnerStyle.tOverlayInnerStyle,
        innerPopupVisible = _useOverlayInnerStyle.innerPopupVisible,
        onInnerPopupVisibleChange = _useOverlayInnerStyle.onInnerPopupVisibleChange;
      var popupClasses = vue.computed(function () {
        var _popupVisible$value, _ref;
        return [NAME_CLASS.value, (_ref = {}, _defineProperty$3(_ref, BASE_CLASS_BORDERLESS.value, borderless.value), _defineProperty$3(_ref, BASE_CLASS_MULTIPLE.value, multiple.value), _defineProperty$3(_ref, BASE_CLASS_POPUP_VISIBLE.value, (_popupVisible$value = popupVisible.value) !== null && _popupVisible$value !== void 0 ? _popupVisible$value : innerPopupVisible.value), _defineProperty$3(_ref, BASE_CLASS_EMPTY.value, value.value instanceof Array ? !value.value.length : !value.value), _ref)];
      });
      return {
        classPrefix: classPrefix,
        NAME_CLASS: NAME_CLASS,
        selectInputWrapRef: selectInputWrapRef,
        innerPopupVisible: innerPopupVisible,
        commonInputProps: commonInputProps,
        tOverlayInnerStyle: tOverlayInnerStyle,
        selectInputRef: selectInputRef,
        popupClasses: popupClasses,
        onInnerClear: onInnerClear,
        renderSelectSingle: renderSelectSingle,
        renderSelectMultiple: renderSelectMultiple,
        onInnerPopupVisibleChange: onInnerPopupVisibleChange
      };
    },
    render: function render() {
      var _this$popupVisible,
        _this$popupProps,
        _this = this;
      var visibleProps = {
        visible: (_this$popupVisible = this.popupVisible) !== null && _this$popupVisible !== void 0 ? _this$popupVisible : this.innerPopupVisible
      };
      var mainContent = vue.createVNode(Popup, vue.mergeProps({
        "ref": "selectInputRef",
        "class": this.popupClasses,
        "trigger": ((_this$popupProps = this.popupProps) === null || _this$popupProps === void 0 ? void 0 : _this$popupProps.trigger) || "click",
        "placement": "bottom-left"
      }, visibleProps, {
        "content": this.panel,
        "hideEmptyPopup": true
      }, _objectSpread$1R(_objectSpread$1R({
        onVisibleChange: this.onInnerPopupVisibleChange
      }, this.popupProps), {}, {
        overlayInnerStyle: this.tOverlayInnerStyle
      })), _objectSpread$1R({
        "default": function _default() {
          return [_this.multiple ? _this.renderSelectMultiple({
            commonInputProps: _this.commonInputProps,
            onInnerClear: _this.onInnerClear,
            popupVisible: visibleProps.visible
          }) : _this.renderSelectSingle(visibleProps.visible)];
        }
      }, _objectSpread$1R(_objectSpread$1R({}, this.$slots), {}, {
        content: this.$slots.panel
      })));
      if (!this.tips) return mainContent;
      return vue.createVNode("div", {
        "ref": "selectInputWrapRef",
        "class": "".concat(this.NAME_CLASS, "__wrap")
      }, [mainContent, vue.createVNode("div", {
        "class": "".concat(this.classPrefix, "-input__tips ").concat(this.classPrefix, "-input__tips--").concat(this.status || "normal")
      }, [this.tips])]);
    }
  });

  var SelectInput = withInstall(_SelectInput);

  var props$O = {
    checkAll: Boolean,
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    label: {
      type: String,
      "default": ""
    },
    value: {
      type: [String, Number]
    }
  };

  var props$N = {
    checkAll: Boolean,
    checked: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultChecked: Boolean,
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    indeterminate: Boolean,
    label: {
      type: [String, Function]
    },
    name: {
      type: String,
      "default": ""
    },
    readonly: Boolean,
    value: {
      type: [String, Number]
    },
    onChange: Function
  };

  var CheckboxGroupInjectionKey = Symbol("CheckboxGroupProvide");

  function ownKeys$1R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1R(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Checkbox = vue.defineComponent({
    name: "TCheckbox",
    props: _objectSpread$1Q(_objectSpread$1Q({}, props$N), {}, {
      needRipple: Boolean,
      stopLabelTrigger: Boolean
    }),
    setup: function setup(props2) {
      var labelRef = vue.ref();
      if (props2.needRipple) {
        useRipple(labelRef);
      }
      var _toRefs = vue.toRefs(props2),
        checked = _toRefs.checked,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerChecked = _useVModel2[0],
        setInnerChecked = _useVModel2[1];
      var checkboxGroup = vue.inject(CheckboxGroupInjectionKey, void 0);
      var GroupDisabled = vue.computed(function () {
        return props2.disabled || !!(checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.disabled);
      });
      var formDisabled = useFormDisabled(GroupDisabled);
      var name = vue.computed(function () {
        return props2.name || (checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.name);
      });
      var selfChecked = vue.computed(function () {
        if (props2.checkAll) return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.isCheckAll;
        return checkboxGroup ? !!checkboxGroup.checkedMap[props2.value] : innerChecked.value;
      });
      var disabled = vue.computed(function () {
        if (formDisabled) return formDisabled.value;
        if (!props2.checkAll && !selfChecked.value && checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.maxExceeded) {
          return true;
        }
        if (props2.disabled !== void 0) return props2.disabled;
        return !!(checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.disabled);
      });
      var selfIndeterminate = vue.computed(function () {
        if (props2.checkAll) return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.indeterminate;
        return props2.indeterminate;
      });
      var classPrefix = usePrefixClass();
      var COMPONENT_NAME = usePrefixClass("checkbox");
      var labelClasses = vue.computed(function () {
        var _ref;
        return ["".concat(COMPONENT_NAME.value), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-checked"), selfChecked.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-disabled"), disabled.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-indeterminate"), selfIndeterminate.value), _ref)];
      });
      var handleChange = function handleChange(e) {
        if (props2.readonly) return;
        var checked2 = !selfChecked.value;
        setInnerChecked(checked2, {
          e: e
        });
        if (checkboxGroup && checkboxGroup.handleCheckboxChange) {
          checkboxGroup.onCheckedChange({
            checked: checked2,
            checkAll: props2.checkAll,
            e: e,
            option: props2
          });
        }
      };
      var renderContent = useContent();
      var handleLabelClick = function handleLabelClick(e) {
        if (props2.stopLabelTrigger) e.preventDefault();
      };
      return function () {
        return vue.createVNode("label", {
          "class": labelClasses.value,
          "ref": "labelRef"
        }, [vue.createVNode("input", {
          "type": "checkbox",
          "class": "".concat(COMPONENT_NAME.value, "__former"),
          "disabled": disabled.value,
          "readonly": props2.readonly,
          "indeterminate": props2.indeterminate,
          "name": name.value,
          "value": props2.value,
          "checked": selfChecked.value,
          "onChange": handleChange
        }, null), vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__input")
        }, null), vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__label"),
          "onClick": handleLabelClick
        }, [renderContent("default", "label")])]);
      };
    }
  });

  var props$M = {
    disabled: Boolean,
    max: {
      type: Number,
      "default": void 0
    },
    name: {
      type: String,
      "default": ""
    },
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onChange: Function
  };

  function ownKeys$1Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$q(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _Group$1 = vue.defineComponent({
    name: "TCheckboxGroup",
    props: props$M,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("checkbox-group");
      var renderTNodeJSX = useTNodeJSX();
      var isArray = Array.isArray;
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var checkedMap = vue.computed(function () {
        var map = {};
        if (isArray(innerValue.value)) {
          innerValue.value.forEach(function (item) {
            map[item] = true;
          });
        }
        return map;
      });
      var optionList = vue.ref([]);
      var intersectionLen = vue.computed(function () {
        if (!isArray(innerValue.value)) return 0;
        var values = optionList.value.map(function (item) {
          return item.value;
        });
        var n = intersection_1(innerValue.value, values);
        return n.length;
      });
      var isCheckAll = vue.computed(function () {
        var excludeCount = optionList.value.filter(function (item) {
          return item.disabled || item.checkAll;
        }).length;
        if (isArray(innerValue.value) && innerValue.value.length !== optionList.value.length - excludeCount) return false;
        return intersectionLen.value === optionList.value.length - excludeCount;
      });
      var indeterminate = vue.computed(function () {
        return !isCheckAll.value && intersectionLen.value < optionList.value.length && intersectionLen.value !== 0;
      });
      var maxExceeded = vue.computed(function () {
        return props2.max !== void 0 && innerValue.value.length === props2.max;
      });
      vue.watchEffect(function () {
        if (!props2.options) return [];
        optionList.value = props2.options.map(function (item) {
          var r = {};
          if (_typeof$2(item) !== "object") {
            r = {
              label: String(item),
              value: item
            };
          } else {
            r = _objectSpread$1P({}, item);
            r.disabled = r.disabled === void 0 ? props2.disabled : r.disabled;
          }
          return r;
        });
      });
      var getAllCheckboxValue = function getAllCheckboxValue() {
        var val = /* @__PURE__ */new Set();
        for (var i = 0, len = optionList.value.length; i < len; i++) {
          var item = optionList.value[i];
          if (item.checkAll) continue;
          if (item.disabled) continue;
          val.add(item.value);
          if (maxExceeded.value) break;
        }
        return _toConsumableArray(val);
      };
      var onCheckAllChange = function onCheckAllChange(checked, context) {
        var value2 = checked ? getAllCheckboxValue() : [];
        setInnerValue(value2, {
          e: context.e,
          type: checked ? "check" : "uncheck",
          current: void 0,
          option: void 0
        });
      };
      var handleCheckboxChange = function handleCheckboxChange(data) {
        var currentValue = data.option.value;
        if (isArray(innerValue.value)) {
          var val = _toConsumableArray(innerValue.value);
          if (data.checked) {
            val.push(currentValue);
          } else {
            var i = val.indexOf(currentValue);
            val.splice(i, 1);
          }
          setInnerValue(val, {
            e: data.e,
            current: data.option.value,
            option: data.option,
            type: data.checked ? "check" : "uncheck"
          });
        } else {
          console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof$2(innerValue.value)));
        }
      };
      var onCheckedChange = function onCheckedChange(p) {
        var checked = p.checked,
          checkAll = p.checkAll,
          e = p.e;
        if (checkAll) {
          onCheckAllChange(checked, {
            e: e
          });
        } else {
          handleCheckboxChange(p);
        }
      };
      var getChildComponentSlots = useChildComponentSlots();
      var getOptionListBySlots = function getOptionListBySlots() {
        var nodes = getChildComponentSlots("Checkbox");
        var arr = [];
        nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (node) {
          var option = node.props;
          if ((option === null || option === void 0 ? void 0 : option["check-all"]) === "" || (option === null || option === void 0 ? void 0 : option["check-all"]) === true) {
            option.checkAll = true;
          }
          option && arr.push(option);
        });
        return arr;
      };
      var renderLabel = function renderLabel(option) {
        if (typeof option.label === "function") {
          return option.label(vue.h);
        }
        return option.label;
      };
      var _toRefs2 = vue.toRefs(props2),
        name = _toRefs2.name,
        disabled = _toRefs2.disabled;
      vue.provide(CheckboxGroupInjectionKey, vue.reactive({
        name: name,
        isCheckAll: isCheckAll,
        checkedMap: checkedMap,
        maxExceeded: maxExceeded,
        disabled: disabled,
        indeterminate: indeterminate,
        handleCheckboxChange: handleCheckboxChange,
        onCheckedChange: onCheckedChange
      }));
      return function () {
        var _props2$options;
        var children = null;
        if ((_props2$options = props2.options) !== null && _props2$options !== void 0 && _props2$options.length) {
          var _optionList$value;
          children = (_optionList$value = optionList.value) === null || _optionList$value === void 0 ? void 0 : _optionList$value.map(function (option, index) {
            var _slot;
            return vue.createVNode(_Checkbox, vue.mergeProps({
              "key": "".concat(option.value).concat(index)
            }, option, {
              "checked": checkedMap.value[option.value]
            }), _isSlot$q(_slot = renderLabel(option)) ? _slot : {
              "default": function _default() {
                return [_slot];
              }
            });
          });
        } else {
          var nodes = renderTNodeJSX("default");
          optionList.value = getOptionListBySlots();
          children = nodes;
        }
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [children]);
      };
    }
  });

  var Checkbox = withInstall(_Checkbox);
  var CheckboxGroup = withInstall(_Group$1);

  function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
  function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }
  function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  var selectInjectKey = Symbol("selectProvide");
  var getSingleContent$1 = function getSingleContent(value, optionsMap) {
    var option = optionsMap.value.get(value);
    return option === null || option === void 0 ? void 0 : option.label;
  };
  var getMultipleContent$1 = function getMultipleContent(value, optionsMap) {
    var res = [];
    var _iterator = _createForOfIteratorHelper$2(value),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var iterator = _step.value;
        var resLabel = getSingleContent$1(iterator, optionsMap);
        if (resLabel) {
          res.push(resLabel);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return res;
  };
  var getNewMultipleValue = function getNewMultipleValue(innerValue, optionValue) {
    var value = cloneDeep_1(innerValue);
    var valueIndex = value.indexOf(optionValue);
    if (valueIndex < 0) {
      value.push(optionValue);
    } else {
      value.splice(valueIndex, 1);
    }
    return {
      value: value,
      isCheck: valueIndex < 0
    };
  };

  function ownKeys$1P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1P(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$p(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _Option = vue.defineComponent({
    name: "TOption",
    props: _objectSpread$1O(_objectSpread$1O({}, props$O), {}, {
      createAble: Boolean,
      multiple: Boolean,
      index: Number,
      rowIndex: Number,
      trs: Map,
      scrollType: String,
      isVirtual: Boolean,
      bufferSize: Number,
      checkAll: Boolean
    }),
    emits: ["row-mounted"],
    setup: function setup(props2, context) {
      var selectProvider = vue.inject(selectInjectKey);
      var formDisabled = useFormDisabled();
      vue.ref(null);
      var disabled = vue.computed(function () {
        return formDisabled.value || props2.multiple && selectProvider.value.max <= selectProvider.value.selectValue.length && selectProvider.value.max !== 0;
      });
      var renderContent = useContent();
      var selectName = usePrefixClass("select");
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var liRef = vue.ref();
      var isHover = vue.ref(false);
      var isSelected = vue.computed(function () {
        if (selectProvider.value.isCheckAll && !props2.disabled) return true;
        return !props2.multiple ? selectProvider.value.selectValue === props2.value : selectProvider.value.selectValue.includes(props2.value);
      });
      var isIndeterminate = vue.computed(function () {
        if (!props2.checkAll) return false;
        return selectProvider.value.indeterminate;
      });
      var classes = vue.computed(function () {
        var _ref;
        return ["".concat(selectName.value, "-option"), [SIZE.value[selectProvider.value.size]], (_ref = {}, _defineProperty$3(_ref, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref, STATUS.value.selected, isSelected.value), _defineProperty$3(_ref, "".concat(selectName.value, "-option__hover"), (isHover.value || selectProvider.value.hoverIndex === props2.index) && !disabled.value && !isSelected.value), _ref)];
      });
      var labelText = vue.computed(function () {
        return props2.label || props2.value;
      });
      var handleClick = function handleClick(e) {
        if (props2.multiple || props2.disabled) return;
        e.stopPropagation();
        if (props2.createAble) {
          var _selectProvider$value, _selectProvider$value2;
          (_selectProvider$value = (_selectProvider$value2 = selectProvider.value).handleCreate) === null || _selectProvider$value === void 0 ? void 0 : _selectProvider$value.call(_selectProvider$value2, props2.value);
          if (selectProvider.value.multiple) {
            selectProvider.value.selectValue.push(props2.value);
            selectProvider.value.handleValueChange(selectProvider.value.selectValue, {
              selectedOptions: selectProvider.value.getSelectedOptions(),
              trigger: "check",
              e: e
            });
            return;
          }
        }
        selectProvider.value.handleValueChange(props2.value, {
          selectedOptions: selectProvider.value.getSelectedOptions(props2.value),
          trigger: "check",
          e: e
        });
        selectProvider.value.handlePopupVisibleChange(false, {
          e: e
        });
      };
      var handleCheckboxClick = function handleCheckboxClick(val, context2) {
        if (props2.checkAll) {
          selectProvider.value.onCheckAllChange(val);
          return;
        }
        var newValue = getNewMultipleValue(selectProvider.value.selectValue, props2.value);
        selectProvider.value.handleValueChange(newValue.value, {
          selectedOptions: selectProvider.value.getSelectedOptions(newValue.value),
          trigger: val ? "check" : "uncheck",
          e: context2.e
        });
        if (!selectProvider.value.reserveKeyword) {
          selectProvider.value.handlerInputChange("");
        }
      };
      vue.onMounted(function () {
        var trs = props2.trs,
          rowIndex = props2.rowIndex,
          isVirtual = props2.isVirtual;
        if (isVirtual) {
          trs.set(rowIndex, liRef.value);
          context.emit("row-mounted");
        }
      });
      vue.onBeforeUnmount(function () {
        if (props2.isVirtual) {
          var trs = props2.trs,
            rowIndex = props2.rowIndex;
          trs["delete"](rowIndex);
        }
      });
      useRipple(liRef);
      return function () {
        var optionChild = renderContent("default", "content") || labelText.value;
        return vue.createVNode("li", {
          "ref": liRef,
          "class": classes.value,
          "title": "".concat(labelText.value),
          "onMouseenter": function onMouseenter() {
            return isHover.value = true;
          },
          "onMouseleave": function onMouseleave() {
            return isHover.value = false;
          },
          "onClick": handleClick
        }, [selectProvider && props2.multiple ? vue.createVNode(Checkbox, {
          "checked": isSelected.value,
          "disabled": disabled.value && !isSelected.value,
          "onChange": handleCheckboxClick,
          "indeterminate": isIndeterminate.value
        }, _isSlot$p(optionChild) ? optionChild : {
          "default": function _default() {
            return [optionChild];
          }
        }) : vue.createVNode("span", null, [optionChild])]);
      };
    }
  });

  var props$L = {
    divider: {
      type: Boolean,
      "default": true
    },
    label: {
      type: String,
      "default": ""
    }
  };

  function ownKeys$1O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1O(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _OptionGroup = vue.defineComponent({
    name: "TOptionGroup",
    props: _objectSpread$1N({}, props$L),
    setup: function setup(props2) {
      var selectProvider = vue.inject(selectInjectKey);
      var COMPONENT_NAME = usePrefixClass("select-option-group");
      var _useCommonClassName = useCommonClassName$2(),
        SIZE = _useCommonClassName.SIZE;
      var renderTNodeJSX = useTNodeJSX();
      var classes = vue.computed(function () {
        return [COMPONENT_NAME.value, SIZE.value[selectProvider.value.size], _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__divider"), props2.divider)];
      });
      return function () {
        return vue.createVNode("li", {
          "class": classes.value
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header")
        }, [props2.label]), renderTNodeJSX("default")]);
      };
    }
  });

  var props$K = {
    autoWidth: Boolean,
    bordered: {
      type: Boolean,
      "default": true
    },
    borderless: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    creatable: Boolean,
    disabled: Boolean,
    empty: {
      type: [String, Function]
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number]
    },
    keys: {
      type: Object
    },
    loading: Boolean,
    loadingText: {
      type: [String, Function]
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    panelBottomContent: {
      type: [String, Function]
    },
    panelTopContent: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    defaultPopupVisible: Boolean,
    prefixIcon: {
      type: Function
    },
    readonly: Boolean,
    reserveKeyword: Boolean,
    scroll: {
      type: Object
    },
    selectInputProps: {
      type: Object
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    tagInputProps: {
      type: Object
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number, Object, Array],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Object, Array],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Object, Array]
    },
    valueDisplay: {
      type: [String, Function]
    },
    valueType: {
      type: String,
      "default": "value",
      validator: function validator(val) {
        if (!val) return true;
        return ["value", "object"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onCreate: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onPopupVisibleChange: Function,
    onRemove: Function,
    onSearch: Function,
    onVisibleChange: Function
  };

  var usePanelVirtualScroll = function usePanelVirtualScroll(props) {
    var _props$scroll3, _props$scroll4, _props$scroll5, _props$scroll6, _props$scroll7;
    var isVirtual = vue.computed(function () {
      var _props$scroll, _props$options$value, _props$scroll2;
      return ((_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual" && ((_props$options$value = props.options.value) === null || _props$options$value === void 0 ? void 0 : _props$options$value.length) > (((_props$scroll2 = props.scroll) === null || _props$scroll2 === void 0 ? void 0 : _props$scroll2.threshold) || 100);
    });
    var _ref = ((_props$scroll3 = props.scroll) === null || _props$scroll3 === void 0 ? void 0 : _props$scroll3.type) === "virtual" ? useVirtualScroll({
        container: props.popupContentRef,
        data: props.options,
        fixedHeight: ((_props$scroll4 = props.scroll) === null || _props$scroll4 === void 0 ? void 0 : _props$scroll4.isFixedRowHeight) || false,
        lineHeight: ((_props$scroll5 = props.scroll) === null || _props$scroll5 === void 0 ? void 0 : _props$scroll5.rowHeight) || 28,
        bufferSize: ((_props$scroll6 = props.scroll) === null || _props$scroll6 === void 0 ? void 0 : _props$scroll6.bufferSize) || 20,
        threshold: ((_props$scroll7 = props.scroll) === null || _props$scroll7 === void 0 ? void 0 : _props$scroll7.threshold) || 100
      }) : {},
      _ref$trs = _ref.trs,
      trs = _ref$trs === void 0 ? null : _ref$trs,
      _ref$visibleData = _ref.visibleData,
      visibleData = _ref$visibleData === void 0 ? null : _ref$visibleData,
      _ref$handleScroll = _ref.handleScroll,
      handleVirtualScroll = _ref$handleScroll === void 0 ? null : _ref$handleScroll,
      _ref$scrollHeight = _ref.scrollHeight,
      scrollHeight = _ref$scrollHeight === void 0 ? null : _ref$scrollHeight,
      _ref$translateY = _ref.translateY,
      translateY = _ref$translateY === void 0 ? null : _ref$translateY,
      _ref$handleRowMounted = _ref.handleRowMounted,
      handleRowMounted = _ref$handleRowMounted === void 0 ? null : _ref$handleRowMounted;
    var lastScrollY = -1;
    var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
      if (!isVirtual.value) {
        return;
      }
      var target = e.target;
      var top = target.scrollTop;
      if (Math.abs(lastScrollY - top) > 5) {
        handleVirtualScroll();
        lastScrollY = top;
      } else {
        lastScrollY = -1;
      }
    };
    vue.onMounted(function () {
      if (isVirtual.value) {
        var _props$popupContentRe;
        (_props$popupContentRe = props.popupContentRef.value) === null || _props$popupContentRe === void 0 ? void 0 : _props$popupContentRe.addEventListener("scroll", onInnerVirtualScroll);
      }
    });
    vue.onBeforeUnmount(function () {
      if (isVirtual.value) {
        var _props$popupContentRe2;
        (_props$popupContentRe2 = props.popupContentRef.value) === null || _props$popupContentRe2 === void 0 ? void 0 : _props$popupContentRe2.removeEventListener("scroll", onInnerVirtualScroll);
      }
    });
    var cursorStyle = vue.computed(function () {
      return {
        position: "absolute",
        width: "1px",
        height: "1px",
        transition: "transform 0.2s",
        transform: "translate(0, ".concat(scrollHeight.value, "px)"),
        "-ms-transform": "translate(0, ".concat(scrollHeight.value, "px)"),
        "-moz-transform": "translate(0, ".concat(scrollHeight.value, "px)"),
        "-webkit-transform": "translate(0, ".concat(scrollHeight.value, "px)")
      };
    });
    var panelStyle = vue.computed(function () {
      return {
        transform: "translate(0, ".concat(translateY.value, "px)"),
        "-ms-transform": "translate(0, ".concat(translateY.value, "px)"),
        "-moz-transform": "translate(0, ".concat(translateY.value, "px)"),
        "-webkit-transform": "translate(0, ".concat(translateY.value, "px)")
      };
    });
    return {
      trs: trs,
      scrollHeight: scrollHeight,
      translateY: translateY,
      visibleData: visibleData,
      handleRowMounted: handleRowMounted,
      isVirtual: isVirtual,
      cursorStyle: cursorStyle,
      panelStyle: panelStyle
    };
  };

  function ownKeys$1N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1N(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$o(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var SelectPanel = vue.defineComponent({
    name: "TSelectPanel",
    props: {
      inputValue: props$K.inputValue,
      panelTopContent: props$K.panelTopContent,
      panelBottomContent: props$K.panelBottomContent,
      empty: props$K.empty,
      creatable: props$K.creatable,
      loading: props$K.loading,
      loadingText: props$K.loadingText,
      multiple: props$K.multiple,
      filterable: props$K.filterable,
      filter: props$K.filter,
      options: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      scroll: props$K.scroll
    },
    setup: function setup(props, _ref) {
      var expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("select");
      var renderTNodeJSX = useTNodeJSX();
      var renderDefaultTNode = useTNodeDefault();
      var _useConfig = useConfig("select"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var tSelect = vue.inject(selectInjectKey);
      var innerRef = vue.ref(null);
      var popupContentRef = vue.computed(function () {
        return tSelect.value.popupContentRef.value;
      });
      var showCreateOption = vue.computed(function () {
        return props.creatable && props.filterable && props.inputValue;
      });
      var displayOptions = vue.computed(function () {
        if (!props.inputValue || !(props.filterable || isFunction_1(props.filter))) return props.options;
        var filterMethods = function filterMethods(option) {
          var _option$label, _option$label$toLower;
          if (isFunction_1(props.filter)) {
            return props.filter("".concat(props.inputValue), option);
          }
          return ((_option$label = option.label) === null || _option$label === void 0 ? void 0 : (_option$label$toLower = _option$label.toLowerCase) === null || _option$label$toLower === void 0 ? void 0 : _option$label$toLower.call(_option$label).indexOf("".concat(props.inputValue).toLowerCase())) > -1;
        };
        var res = [];
        props.options.forEach(function (option) {
          if (option.group && option.children) {
            res.push(_objectSpread$1M(_objectSpread$1M({}, option), {}, {
              children: option.children.filter(filterMethods)
            }));
          }
          if (filterMethods(option)) {
            res.push(option);
          }
        });
        return res;
      });
      var _usePanelVirtualScrol = usePanelVirtualScroll({
          scroll: props.scroll,
          popupContentRef: popupContentRef,
          options: displayOptions
        }),
        trs = _usePanelVirtualScrol.trs,
        visibleData = _usePanelVirtualScrol.visibleData,
        handleRowMounted = _usePanelVirtualScrol.handleRowMounted,
        isVirtual = _usePanelVirtualScrol.isVirtual,
        panelStyle = _usePanelVirtualScrol.panelStyle,
        cursorStyle = _usePanelVirtualScrol.cursorStyle;
      var isEmpty = vue.computed(function () {
        return !displayOptions.value.length;
      });
      var renderCreateOption = function renderCreateOption() {
        return vue.createVNode("ul", {
          "class": ["".concat(COMPONENT_NAME.value, "__create-option"), "".concat(COMPONENT_NAME.value, "__list")]
        }, [vue.createVNode(_Option, {
          "value": props.inputValue,
          "label": "".concat(props.inputValue),
          "createAble": true,
          "class": "".concat(COMPONENT_NAME.value, "__create-option--special")
        }, null)]);
      };
      var renderOptionsContent = function renderOptionsContent(options) {
        return vue.createVNode("ul", {
          "class": "".concat(COMPONENT_NAME.value, "__list")
        }, [options.map(function (item, index) {
          var _props$scroll, _props$scroll2;
          if (item.group) {
            var _slot;
            return vue.createVNode(_OptionGroup, {
              "label": item.group,
              "divider": item.divider
            }, _isSlot$o(_slot = renderOptionsContent(item.children)) ? _slot : {
              "default": function _default() {
                return [_slot];
              }
            });
          }
          return vue.createVNode(_Option, vue.mergeProps(omit_1(item, "$index"), isVirtual.value ? {
            rowIndex: item.$index,
            trs: trs,
            scrollType: (_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type,
            isVirtual: isVirtual.value,
            bufferSize: (_props$scroll2 = props.scroll) === null || _props$scroll2 === void 0 ? void 0 : _props$scroll2.bufferSize,
            key: "".concat(item.$index || "", "_").concat(index)
          } : {
            key: index
          }, {
            "multiple": props.multiple,
            "onRowMounted": handleRowMounted
          }), item.slots);
        })]);
      };
      var dropdownInnerSize = vue.computed(function () {
        return {
          small: "s",
          medium: "m",
          large: "l"
        }[tSelect.value.size];
      });
      expose({
        innerRef: innerRef
      });
      var renderPanel = function renderPanel(options, extraStyle) {
        return vue.createVNode("div", {
          "ref": innerRef,
          "class": ["".concat(COMPONENT_NAME.value, "__dropdown-inner"), "".concat(COMPONENT_NAME.value, "__dropdown-inner--size-").concat(dropdownInnerSize.value)],
          "onClick": function onClick(e) {
            return e.stopPropagation();
          },
          "style": extraStyle === null || extraStyle === void 0 ? void 0 : extraStyle.value
        }, [renderTNodeJSX("panelTopContent"), showCreateOption.value && renderCreateOption(), props.loading && renderDefaultTNode("loadingText", {
          defaultNode: vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__loading-tips")
          }, [t(globalConfig.value.loadingText)])
        }), !props.loading && isEmpty.value && !showCreateOption.value && renderDefaultTNode("empty", {
          defaultNode: vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__empty")
          }, [t(globalConfig.value.empty)])
        }), !isEmpty.value && !props.loading && renderOptionsContent(options.value), renderTNodeJSX("panelBottomContent")]);
      };
      if (isVirtual.value) {
        return function () {
          return vue.createVNode("div", null, [vue.createVNode("div", {
            "style": cursorStyle.value
          }, null), renderPanel(visibleData, panelStyle)]);
        };
      }
      return function () {
        return renderPanel(displayOptions);
      };
    }
  });

  function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
  function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }
  function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  function ownKeys$1M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1M(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var useSelectOptions = function useSelectOptions(props, keys) {
    var getChildComponentSlots = useChildComponentSlots();
    var optionsCache = vue.ref([]);
    var options = vue.computed(function () {
      var dynamicIndex = 0;
      var innerOptions = props.options.map(function (option) {
        var getFormatOption = function getFormatOption(option2) {
          var _keys$value = keys.value,
            value = _keys$value.value,
            label = _keys$value.label;
          var res = _objectSpread$1L(_objectSpread$1L({}, option2), {}, {
            index: dynamicIndex,
            label: get_1(option2, label),
            value: get_1(option2, value)
          });
          dynamicIndex++;
          return res;
        };
        if (option.group && option.children) {
          return _objectSpread$1L(_objectSpread$1L({}, option), {}, {
            children: option.children.map(function (child) {
              return getFormatOption(child);
            })
          });
        }
        return getFormatOption(option);
      });
      var optionsSlots = getChildComponentSlots("Option");
      var groupSlots = getChildComponentSlots("OptionGroup");
      if (isArray_1(groupSlots)) {
        var _iterator = _createForOfIteratorHelper$1(groupSlots),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _group$props, _res$, _res$2;
            var group = _step.value;
            var groupOption = _objectSpread$1L(_objectSpread$1L({
              group: (_group$props = group.props) === null || _group$props === void 0 ? void 0 : _group$props.label
            }, group.props), {}, {
              children: []
            });
            var res = group.children["default"]();
            if (!(isArray_1(res) && !!((_res$ = res[0]) !== null && _res$ !== void 0 && _res$.children))) continue;
            var _iterator2 = _createForOfIteratorHelper$1(res === null || res === void 0 ? void 0 : (_res$2 = res[0]) === null || _res$2 === void 0 ? void 0 : _res$2.children),
              _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var child = _step2.value;
                groupOption.children.push(_objectSpread$1L(_objectSpread$1L({}, child.props), {}, {
                  slots: child.children,
                  index: dynamicIndex
                }));
                dynamicIndex++;
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
            innerOptions.push(groupOption);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      if (isArray_1(optionsSlots)) {
        var _iterator3 = _createForOfIteratorHelper$1(optionsSlots),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _child = _step3.value;
            innerOptions.push(_objectSpread$1L(_objectSpread$1L({}, _child.props), {}, {
              slots: _child.children,
              index: dynamicIndex
            }));
            dynamicIndex++;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
      return innerOptions;
    });
    var optionsList = vue.computed(function () {
      var res = [];
      var getOptionsList = function getOptionsList(options2) {
        var _iterator4 = _createForOfIteratorHelper$1(options2),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var option = _step4.value;
            if (option.group) {
              getOptionsList(option.children);
            } else {
              res.push(option);
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      };
      getOptionsList(options.value);
      return res;
    });
    var optionsMap = vue.computed(function () {
      var res = /* @__PURE__ */new Map();
      optionsList.value.concat(optionsCache.value).forEach(function (option) {
        res.set(option.value, option);
      });
      return res;
    });
    return {
      options: options,
      optionsMap: optionsMap,
      optionsList: optionsList,
      optionsCache: optionsCache
    };
  };

  var _excluded$4 = ["slots", "expose"],
    _excluded2 = ["overlayClassName"];
  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  function ownKeys$1L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1L(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TSelect = vue.defineComponent({
    name: "TSelect",
    props: _objectSpread$1K({}, props$K),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
        _ref.expose;
        _objectWithoutProperties$1(_ref, _excluded$4);
      var classPrefix = usePrefixClass();
      var disabled = useFormDisabled();
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("select");
      var _useConfig = useConfig("select"),
        globalConfig = _useConfig.globalConfig,
        t = _useConfig.t;
      var _toRefs = vue.toRefs(props2),
        popupVisible = _toRefs.popupVisible,
        inputValue = _toRefs.inputValue,
        modelValue = _toRefs.modelValue,
        value = _toRefs.value;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        orgValue = _useVModel2[0],
        setOrgValue = _useVModel2[1];
      var selectPanelRef = vue.ref(null);
      var selectInputRef = vue.ref(null);
      var keys = vue.computed(function () {
        var _props2$keys, _props2$keys2;
        return {
          label: ((_props2$keys = props2.keys) === null || _props2$keys === void 0 ? void 0 : _props2$keys.label) || "label",
          value: ((_props2$keys2 = props2.keys) === null || _props2$keys2 === void 0 ? void 0 : _props2$keys2.value) || "value"
        };
      });
      var _useSelectOptions = useSelectOptions(props2, keys),
        options = _useSelectOptions.options,
        optionsMap = _useSelectOptions.optionsMap,
        optionsList = _useSelectOptions.optionsList,
        optionsCache = _useSelectOptions.optionsCache;
      var innerValue = vue.computed(function () {
        if (props2.valueType === "object") {
          return !props2.multiple ? orgValue.value[keys.value.value] : orgValue.value.map(function (option) {
            return option[keys.value.value];
          });
        }
        if (props2.multiple && !orgValue.value) {
          return [];
        }
        return orgValue.value;
      });
      var setInnerValue = function setInnerValue(newVal, e) {
        if (props2.valueType === "object") {
          var _keys$value = keys.value,
            value2 = _keys$value.value,
            label = _keys$value.label;
          var getOption = function getOption(val) {
            var _ref2;
            var option = optionsMap.value.get(val);
            return _ref2 = {}, _defineProperty$3(_ref2, value2, get_1(option, value2)), _defineProperty$3(_ref2, label, get_1(option, label)), _ref2;
          };
          newVal = props2.multiple ? newVal.map(function (val) {
            return getOption(val);
          }) : getOption(newVal);
        }
        if (newVal === orgValue.value) return;
        setOrgValue(newVal, {
          selectedOptions: getSelectedOptions(newVal),
          trigger: e.trigger,
          e: e.e
        });
      };
      var _useDefaultValue = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        innerInputValue = _useDefaultValue2[0],
        setInputValue = _useDefaultValue2[1];
      var _useDefaultValue3 = useDefaultValue(popupVisible, false, function (visible, context) {
          var _props2$onPopupVisibl, _props2$onVisibleChan;
          (_props2$onPopupVisibl = props2.onPopupVisibleChange) === null || _props2$onPopupVisibl === void 0 ? void 0 : _props2$onPopupVisibl.call(props2, visible, context);
          (_props2$onVisibleChan = props2.onVisibleChange) === null || _props2$onVisibleChan === void 0 ? void 0 : _props2$onVisibleChan.call(props2, visible);
        }, "popupVisible"),
        _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2),
        innerPopupVisible = _useDefaultValue4[0],
        setInnerPopupVisible = _useDefaultValue4[1];
      var placeholderText = vue.computed(function () {
        var _ref3;
        return (_ref3 = !props2.multiple && innerPopupVisible.value && getSingleContent$1(innerValue.value, optionsMap) || props2.placeholder) !== null && _ref3 !== void 0 ? _ref3 : t(globalConfig.value.placeholder);
      });
      var displayText = vue.computed(function () {
        return props2.multiple ? getMultipleContent$1(innerValue.value, optionsMap) : getSingleContent$1(innerValue.value, optionsMap);
      });
      var valueDisplayParams = vue.computed(function () {
        return props2.multiple && isArray_1(innerValue.value) ? innerValue.value.map(function (value2) {
          var _optionsMap$value$get;
          return {
            value: value2,
            label: (_optionsMap$value$get = optionsMap.value.get(value2)) === null || _optionsMap$value$get === void 0 ? void 0 : _optionsMap$value$get.label
          };
        }) : innerValue.value;
      });
      var isFilterable = vue.computed(function () {
        return Boolean(props2.filterable || globalConfig.value.filterable || isFunction_1(props2.filter));
      });
      var removeTag = function removeTag(index, e) {
        var _props2$onRemove;
        e && e.stopPropagation();
        var selectValue = cloneDeep_1(innerValue.value);
        var value2 = selectValue[index];
        selectValue.splice(index, 1);
        setInnerValue(selectValue, {
          selectedOptions: getSelectedOptions(selectValue),
          trigger: "tag-remove",
          e: e
        });
        (_props2$onRemove = props2.onRemove) === null || _props2$onRemove === void 0 ? void 0 : _props2$onRemove.call(props2, {
          value: value2,
          data: optionsMap.value.get(value2),
          e: e
        });
      };
      var handleCreate = function handleCreate() {
        var _props2$onCreate;
        if (!innerInputValue.value) return;
        (_props2$onCreate = props2.onCreate) === null || _props2$onCreate === void 0 ? void 0 : _props2$onCreate.call(props2, innerInputValue.value);
        setInputValue("");
      };
      var hoverIndex = vue.ref(-1);
      var handleKeyDown = function handleKeyDown(e) {
        var _optionsList$value$ne, _optionsList$value$ne2;
        var optionsListLength = optionsList.value.length;
        var newIndex = hoverIndex.value;
        switch (e.code) {
          case "ArrowUp":
            e.preventDefault();
            if (hoverIndex.value === -1) {
              newIndex = 0;
            } else if (hoverIndex.value === 0) {
              newIndex = optionsListLength - 1;
            } else {
              newIndex--;
            }
            if ((_optionsList$value$ne = optionsList.value[newIndex]) !== null && _optionsList$value$ne !== void 0 && _optionsList$value$ne.disabled) {
              newIndex--;
            }
            hoverIndex.value = newIndex;
            break;
          case "ArrowDown":
            e.preventDefault();
            if (hoverIndex.value === -1 || hoverIndex.value === optionsListLength - 1) {
              newIndex = 0;
            } else {
              newIndex++;
            }
            if ((_optionsList$value$ne2 = optionsList.value[newIndex]) !== null && _optionsList$value$ne2 !== void 0 && _optionsList$value$ne2.disabled) {
              newIndex++;
            }
            hoverIndex.value = newIndex;
            break;
          case "Enter":
            if (hoverIndex.value === -1) break;
            if (!innerPopupVisible.value) {
              setInnerPopupVisible(true, {
                e: e
              });
              break;
            }
            if (!props2.multiple) {
              setInnerValue(optionsList.value[hoverIndex.value].value, {
                selectedOptions: getSelectedOptions(optionsList.value[hoverIndex.value].value),
                trigger: "check",
                e: e
              });
              setInnerPopupVisible(false, {
                e: e
              });
            } else {
              var _optionsList$value$ho;
              if (hoverIndex.value === -1) return;
              var optionValue = (_optionsList$value$ho = optionsList.value[hoverIndex.value]) === null || _optionsList$value$ho === void 0 ? void 0 : _optionsList$value$ho.value;
              if (!optionValue) return;
              var newValue = getNewMultipleValue(innerValue.value, optionValue);
              setInnerValue(newValue.value, {
                selectedOptions: getSelectedOptions(newValue.value),
                trigger: newValue.isCheck ? "check" : "uncheck",
                e: e
              });
            }
            break;
          case "Escape":
            setInnerPopupVisible(false, {
              e: e
            });
            break;
        }
      };
      var popupContentRef = vue.computed(function () {
        var _selectInputRef$value;
        return (_selectInputRef$value = selectInputRef.value) === null || _selectInputRef$value === void 0 ? void 0 : _selectInputRef$value.selectInputRef.getOverlay();
      });
      var optionalList = vue.computed(function () {
        return optionsList.value.filter(function (item) {
          return !item.disabled && !item["check-all"] && !item.checkAll;
        });
      });
      var getSelectedOptions = function getSelectedOptions() {
        var selectValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : innerValue.value;
        return optionsList.value.filter(function (option) {
          if (option.checkAll) return;
          if (Array.isArray(selectValue)) return selectValue.includes(option.value);
          return selectValue === option.value;
        });
      };
      var onCheckAllChange = function onCheckAllChange(checked) {
        if (!props2.multiple) return;
        var value2 = checked ? optionalList.value.map(function (option) {
          return option.value;
        }) : [];
        setInnerValue(value2, {
          selectedOptions: getSelectedOptions(value2),
          trigger: checked ? "check" : "clear"
        });
      };
      var intersectionLen = vue.computed(function () {
        var values = optionalList.value.map(function (item) {
          return item.value;
        });
        var n = intersection_1(innerValue.value, values);
        return n.length;
      });
      var isCheckAll = vue.computed(function () {
        return intersectionLen.value === optionalList.value.length;
      });
      var indeterminate = vue.computed(function () {
        return !isCheckAll.value && intersectionLen.value !== 0;
      });
      var SelectProvide = vue.computed(function () {
        return {
          max: props2.max,
          multiple: props2.multiple,
          hoverIndex: hoverIndex.value,
          selectValue: innerValue.value,
          reserveKeyword: props2.reserveKeyword,
          handleValueChange: setInnerValue,
          handlerInputChange: setInputValue,
          handlePopupVisibleChange: setInnerPopupVisible,
          handleCreate: handleCreate,
          size: props2.size,
          popupContentRef: popupContentRef,
          indeterminate: indeterminate.value,
          isCheckAll: isCheckAll.value,
          onCheckAllChange: onCheckAllChange,
          getSelectedOptions: getSelectedOptions
        };
      });
      vue.provide(selectInjectKey, SelectProvide);
      var checkValueInvalid = function checkValueInvalid() {
        if (!props2.multiple && isArray_1(orgValue.value)) {
          setOrgValue(void 0);
        }
        if (props2.multiple && !isArray_1(orgValue.value)) {
          setOrgValue([]);
        }
      };
      var handleSearch = debounce_1(function (value2) {
        var _props2$onSearch;
        (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, "".concat(value2));
      }, 300);
      var addCache = function addCache(val) {
        if (props2.multiple) {
          var newCache = [];
          var _iterator = _createForOfIteratorHelper(val || []),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var item = _step.value;
              var option = optionsMap.value.get(item);
              if (option) {
                newCache.push(option);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          optionsCache.value = Array.from( /* @__PURE__ */new Set([].concat(newCache, _toConsumableArray(optionsCache.value))));
        } else {
          var _option = optionsMap.value.get(val);
          if (_option) {
            optionsCache.value = Array.from( /* @__PURE__ */new Set([_option].concat(_toConsumableArray(optionsCache.value))));
          }
        }
      };
      vue.watch(orgValue, function (val) {
        checkValueInvalid();
        vue.nextTick(function () {
          addCache(val);
        });
      }, {
        immediate: true
      });
      vue.watch(function () {
        return props2.multiple;
      }, function () {
        checkValueInvalid();
      });
      vue.watch(innerPopupVisible, function (value2) {
        if (value2) {
          hoverIndex.value = -1;
        } else {
          if (innerInputValue.value) {
            setInputValue("");
          }
        }
      });
      var updateScrollTop = function updateScrollTop(content) {
        var _selectPanelRef$value, _selectPanelRef$value2;
        if (!selectPanelRef.value) {
          return;
        }
        var firstSelectedNode = (_selectPanelRef$value = selectPanelRef.value) === null || _selectPanelRef$value === void 0 ? void 0 : (_selectPanelRef$value2 = _selectPanelRef$value.innerRef) === null || _selectPanelRef$value2 === void 0 ? void 0 : _selectPanelRef$value2.querySelector(".".concat(classPrefix.value, "-is-selected"));
        vue.nextTick(function () {
          if (firstSelectedNode && content) {
            var _getComputedStyle = getComputedStyle(firstSelectedNode),
              paddingBottom = _getComputedStyle.paddingBottom;
            var _getComputedStyle2 = getComputedStyle(content),
              marginBottom = _getComputedStyle2.marginBottom;
            var elementBottomHeight = parseInt(paddingBottom, 10) + parseInt(marginBottom, 10);
            var updateValue = firstSelectedNode.offsetTop - content.offsetTop - (content.clientHeight - firstSelectedNode.clientHeight) + elementBottomHeight;
            content.scrollTop = updateValue;
          }
        });
      };
      vue.provide("updateScrollTop", updateScrollTop);
      return function () {
        var _ref4 = props2.popupProps || {},
          overlayClassName = _ref4.overlayClassName,
          restPopupProps = _objectWithoutProperties$1(_ref4, _excluded2);
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__wrap")
        }, [vue.createVNode(SelectInput, vue.mergeProps({
          autoWidth: props2.autoWidth,
          readonly: props2.readonly,
          borderless: props2.borderless || !props2.bordered,
          multiple: props2.multiple,
          clearable: props2.clearable,
          loading: props2.loading,
          status: props2.status,
          tips: props2.tips,
          minCollapsedNum: props2.minCollapsedNum
        }, {
          "ref": selectInputRef,
          "class": COMPONENT_NAME.value,
          "value": displayText.value,
          "disabled": disabled.value,
          "popupVisible": innerPopupVisible.value,
          "inputValue": innerPopupVisible.value ? innerInputValue.value : "",
          "placeholder": "".concat(placeholderText.value),
          "allowInput": isFilterable.value,
          "collapsed-items": props2.collapsedItems,
          "inputProps": _objectSpread$1K(_objectSpread$1K({
            size: props2.size
          }, props2.inputProps), {}, {
            onkeydown: handleKeyDown
          }),
          "tagInputProps": _objectSpread$1K({
            size: props2.size
          }, props2.tagInputProps),
          "onTagChange": function onTagChange(val, ctx) {
            removeTag(ctx.index);
          },
          "tagProps": _objectSpread$1K({}, props2.tagProps),
          "popupProps": _objectSpread$1K({
            overlayClassName: ["".concat(COMPONENT_NAME.value, "__dropdown"), overlayClassName]
          }, restPopupProps),
          "label": function label() {
            return renderTNodeJSX("prefixIcon");
          },
          "suffixIcon": function suffixIcon() {
            return props2.showArrow && vue.createVNode(FakeArrow, {
              "overlayClassName": "".concat(COMPONENT_NAME.value, "__right-icon"),
              "isActive": innerPopupVisible.value
            }, null);
          },
          "valueDisplay": function valueDisplay() {
            return renderTNodeJSX("valueDisplay", {
              params: {
                value: valueDisplayParams.value,
                onClose: function onClose(index) {
                  return removeTag(index);
                }
              }
            });
          },
          "onPopupVisibleChange": function onPopupVisibleChange(val, context) {
            setInnerPopupVisible(val, context);
          },
          "onInputChange": function onInputChange(value2) {
            if (!innerPopupVisible.value) return;
            setInputValue(value2);
            handleSearch("".concat(value2));
          },
          "onClear": function onClear(_ref5) {
            var _props2$onClear;
            var e = _ref5.e;
            setInnerValue(props2.multiple ? [] : void 0, {
              selectedOptions: getSelectedOptions(props2.multiple ? [] : void 0),
              trigger: "clear",
              e: e
            });
            (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, {
              e: e
            });
          },
          "onEnter": function onEnter(inputValue2, _ref6) {
            var _props2$onEnter;
            var e = _ref6.e;
            (_props2$onEnter = props2.onEnter) === null || _props2$onEnter === void 0 ? void 0 : _props2$onEnter.call(props2, {
              inputValue: "".concat(innerInputValue.value),
              e: e,
              value: innerValue.value
            });
            handleCreate();
          },
          "onBlur": function onBlur(inputValue2, _ref7) {
            var _props2$onBlur;
            var e = _ref7.e;
            (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, {
              e: e,
              value: innerValue.value
            });
          },
          "onFocus": function onFocus(inputValue2, _ref8) {
            var _props2$onFocus;
            var e = _ref8.e;
            (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, {
              e: e,
              value: innerValue.value
            });
          }
        }, props2.selectInputProps), {
          panel: function panel() {
            return vue.createVNode(SelectPanel, vue.mergeProps({
              "ref": selectPanelRef
            }, pick_1(props2, ["size", "multiple", "empty", "loading", "loadingText", "filterable", "creatable", "panelTopContent", "panelBottomContent", "filter", "scroll"]), {
              "options": options.value,
              "inputValue": innerInputValue.value
            }), slots);
          },
          collapsedItems: slots.collapsedItems
        })]);
      };
    }
  });

  var Select = withInstall(TSelect);
  var Option = withInstall(_Option);
  var OptionGroup = withInstall(_OptionGroup);

  var props$J = {
    append: {
      type: [String, Function]
    },
    prepend: {
      type: [String, Function]
    }
  };

  var _InputAdornment = vue.defineComponent({
    name: "TInputAdornment",
    inheritAttrs: false,
    props: props$J,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var COMPONENT_NAME = usePrefixClass("input-adornment");
      var renderTNodeJSX = useTNodeJSX();
      var renderAddon = function renderAddon(h2, type, addon) {
        var addonNode;
        if (slots[type]) {
          addonNode = slots[type](null);
        } else if (typeof addon === "string") {
          addonNode = addon;
        } else if (typeof addon === "function") {
          addonNode = addon(h2);
        } else {
          addonNode = null;
        }
        return addonNode ? vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__").concat(type)
        }, [addonNode]) : addonNode;
      };
      return function () {
        var _ref2;
        var prepend = renderAddon(vue.h, "prepend", props2.prepend);
        var append = renderAddon(vue.h, "append", props2.append);
        var defaultSlot = renderTNodeJSX("default") || [null];
        var className = [COMPONENT_NAME.value, (_ref2 = {}, _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--prepend"), prepend), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--append"), append), _ref2)];
        if (!prepend && !append) {
          return defaultSlot[0];
        }
        return vue.createVNode("div", {
          "class": className
        }, [prepend, defaultSlot[0], append]);
      };
    }
  });

  var InputAdornment = withInstall(_InputAdornment);

  var props$I = {
    current: {
      type: Number,
      "default": void 0
    },
    modelValue: {
      type: Number,
      "default": void 0
    },
    defaultCurrent: {
      type: Number,
      "default": 1
    },
    disabled: Boolean,
    foldedMaxPageBtn: {
      type: Number,
      "default": 5
    },
    maxPageBtn: {
      type: Number,
      "default": 10
    },
    pageEllipsisMode: {
      type: String,
      "default": "mid",
      validator: function validator(val) {
        if (!val) return true;
        return ["mid", "both-ends"].includes(val);
      }
    },
    pageSize: {
      type: Number,
      "default": void 0
    },
    defaultPageSize: {
      type: Number,
      "default": 10
    },
    pageSizeOptions: {
      type: Array,
      "default": function _default() {
        return [5, 10, 20, 50];
      }
    },
    selectProps: {
      type: Object
    },
    showFirstAndLastPageBtn: Boolean,
    showJumper: Boolean,
    showPageNumber: {
      type: Boolean,
      "default": true
    },
    showPageSize: {
      type: Boolean,
      "default": true
    },
    showPreviousAndNextBtn: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "simple"].includes(val);
      }
    },
    total: {
      type: Number,
      "default": 0
    },
    totalContent: {
      type: [Boolean, Function],
      "default": true
    },
    onChange: Function,
    onCurrentChange: Function,
    onPageSizeChange: Function
  };

  function usePaginationClasses(props, innerCurrent, innerPageSize, name) {
    var _useCommonClassName = useCommonClassName$2(),
      SIZE = _useCommonClassName.SIZE,
      STATUS = _useCommonClassName.STATUS;
    var pageCount = vue.computed(function () {
      var c = Math.ceil(props.total / innerPageSize.value);
      return c > 0 ? c : 1;
    });
    var paginationClass = vue.computed(function () {
      var _ref;
      return ["".concat(name.value), SIZE.value[props.size], (_ref = {}, _defineProperty$3(_ref, STATUS.value.disabled, props.disabled), _defineProperty$3(_ref, "".concat(name.value, "-ie"), getIEVersion() < 11), _ref)];
    });
    var totalClass = vue.computed(function () {
      return ["".concat(name.value, "__total")];
    });
    var sizerClass = vue.computed(function () {
      return ["".concat(name.value, "__select")];
    });
    var preBtnClass = vue.computed(function () {
      return ["".concat(name.value, "__btn"), "".concat(name.value, "__btn-prev"), _defineProperty$3({}, STATUS.value.disabled, props.disabled || innerCurrent.value === 1)];
    });
    var nextBtnClass = vue.computed(function () {
      return ["".concat(name.value, "__btn"), "".concat(name.value, "__btn-next"), _defineProperty$3({}, STATUS.value.disabled, props.disabled || innerCurrent.value === pageCount.value)];
    });
    var btnWrapClass = vue.computed(function () {
      return ["".concat(name.value, "__pager")];
    });
    var btnMoreClass = vue.computed(function () {
      return ["".concat(name.value, "__number"), "".concat(name.value, "__number--more"), _defineProperty$3({}, STATUS.value.disabled, props.disabled)];
    });
    var jumperClass = vue.computed(function () {
      return ["".concat(name.value, "__jump")];
    });
    var jumperInputClass = vue.computed(function () {
      return ["".concat(name.value, "__input")];
    });
    var simpleClass = vue.computed(function () {
      return ["".concat(name.value, "__select")];
    });
    var getButtonClass = function getButtonClass(index) {
      var _ref5;
      return ["".concat(name.value, "__number"), (_ref5 = {}, _defineProperty$3(_ref5, STATUS.value.disabled, props.disabled), _defineProperty$3(_ref5, STATUS.value.current, innerCurrent.value === index), _ref5)];
    };
    return {
      pageCount: pageCount,
      paginationClass: paginationClass,
      totalClass: totalClass,
      sizerClass: sizerClass,
      preBtnClass: preBtnClass,
      nextBtnClass: nextBtnClass,
      btnWrapClass: btnWrapClass,
      btnMoreClass: btnMoreClass,
      jumperClass: jumperClass,
      jumperInputClass: jumperInputClass,
      simpleClass: simpleClass,
      getButtonClass: getButtonClass
    };
  }

  function useMoreAction(props, pageCount, innerCurrent) {
    var prevMore = vue.ref(false);
    var nextMore = vue.ref(false);
    var curPageLeftCount = vue.computed(function () {
      return Math.ceil((props.foldedMaxPageBtn - 1) / 2);
    });
    var curPageRightCount = vue.computed(function () {
      return Math.ceil((props.foldedMaxPageBtn - 1) / 2);
    });
    var isPrevMoreShow = vue.computed(function () {
      return 2 + curPageLeftCount.value < innerCurrent.value;
    });
    var isNextMoreShow = vue.computed(function () {
      return pageCount.value - 1 - curPageRightCount.value > innerCurrent.value;
    });
    return {
      prevMore: prevMore,
      nextMore: nextMore,
      curPageLeftCount: curPageLeftCount,
      curPageRightCount: curPageRightCount,
      isPrevMoreShow: isPrevMoreShow,
      isNextMoreShow: isNextMoreShow
    };
  }

  var _excluded$3 = ["pageCount"];
  function _isSlot$n(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var min = 1;
  var _Pagination = vue.defineComponent({
    name: "TPagination",
    props: props$I,
    setup: function setup(props2) {
      var _toRefs = vue.toRefs(props2),
        modelValue = _toRefs.modelValue,
        pageSize = _toRefs.pageSize,
        current = _toRefs.current;
      var renderTNodeJSX = useTNodeJSX();
      var _useVModel = useVModel(current, modelValue, props2.defaultCurrent, props2.onCurrentChange, "current"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerCurrent = _useVModel2[0],
        setInnerCurrent = _useVModel2[1];
      var _useDefaultValue = useDefaultValue(pageSize, props2.defaultPageSize, props2.onPageSizeChange, "pageSize"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        innerPageSize = _useDefaultValue2[0],
        setInnerPageSize = _useDefaultValue2[1];
      var _useConfig = useConfig("pagination"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var COMPONENT_NAME = usePrefixClass("pagination");
      var _useGlobalIcon = useGlobalIcon({
          PageFirstIcon: pageFirst,
          PageLastIcon: pageLast,
          ChevronLeftIcon: chevronLeft,
          ChevronRightIcon: chevronRight,
          ChevronLeftDoubleIcon: chevronLeftDouble,
          ChevronRightDoubleIcon: chevronRightDouble,
          EllipsisIcon: ellipsis
        }),
        PageFirstIcon = _useGlobalIcon.PageFirstIcon,
        PageLastIcon = _useGlobalIcon.PageLastIcon,
        ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
        ChevronLeftDoubleIcon = _useGlobalIcon.ChevronLeftDoubleIcon,
        ChevronRightDoubleIcon = _useGlobalIcon.ChevronRightDoubleIcon,
        EllipsisIcon = _useGlobalIcon.EllipsisIcon;
      var _usePaginationClasses = usePaginationClasses(props2, innerCurrent, innerPageSize, COMPONENT_NAME),
        pageCount = _usePaginationClasses.pageCount,
        CLASS_MAP = _objectWithoutProperties$1(_usePaginationClasses, _excluded$3);
      var _useMoreAction = useMoreAction(props2, pageCount, innerCurrent),
        prevMore = _useMoreAction.prevMore,
        isPrevMoreShow = _useMoreAction.isPrevMoreShow,
        curPageLeftCount = _useMoreAction.curPageLeftCount,
        nextMore = _useMoreAction.nextMore,
        isNextMoreShow = _useMoreAction.isNextMoreShow,
        curPageRightCount = _useMoreAction.curPageRightCount;
      var jumpIndex = vue.ref(innerCurrent.value);
      var isFolded = vue.computed(function () {
        return pageCount.value > props2.maxPageBtn;
      });
      vue.computed(function () {
        var ans = [];
        for (var i = 1; i <= pageCount.value; i++) {
          ans.push({
            value: i,
            label: "".concat(i, "/").concat(pageCount.value)
          });
        }
        return ans;
      });
      var sizeOptions = vue.computed(function () {
        var pageSizeOptions = props2.pageSizeOptions;
        var options = pageSizeOptions.map(function (option) {
          return _typeof$2(option) === "object" ? option : {
            label: t(globalConfig.value.itemsPerPage, {
              size: option
            }),
            value: Number(option)
          };
        });
        return options.sort(function (a, b) {
          return a.value - b.value;
        });
      });
      var isMidEllipsis = vue.computed(function () {
        return props2.pageEllipsisMode === "mid";
      });
      var pages = vue.computed(function () {
        var array = [];
        var start;
        var end;
        if (isFolded.value) {
          if (isPrevMoreShow.value && isNextMoreShow.value) {
            start = innerCurrent.value - curPageLeftCount.value;
            end = innerCurrent.value + curPageRightCount.value;
          } else {
            var foldedStart = isMidEllipsis.value ? 2 : 1;
            var foldedEnd = isMidEllipsis.value ? pageCount.value - 1 : pageCount.value;
            start = isPrevMoreShow.value ? pageCount.value - props2.foldedMaxPageBtn + 1 : foldedStart;
            end = isPrevMoreShow.value ? foldedEnd : props2.foldedMaxPageBtn;
          }
        } else {
          start = 1;
          end = pageCount.value;
        }
        for (var i = start; i <= end; i++) {
          array.push(i);
        }
        return array;
      });
      vue.watch(function () {
        return pageCount.value;
      }, function () {
        if (innerCurrent.value > pageCount.value) innerCurrent.value = 1;
      });
      vue.watch(function () {
        return innerCurrent.value;
      }, function (val) {
        return jumpIndex.value = val;
      });
      var toPage = function toPage(pageIndex, isTriggerChange) {
        if (props2.disabled) {
          return;
        }
        var current2 = pageIndex;
        if (pageIndex < min) {
          current2 = min;
        } else if (pageIndex > pageCount.value) {
          current2 = pageCount.value;
        }
        if (innerCurrent.value !== current2) {
          var prev = innerCurrent.value;
          var pageInfo = {
            current: current2,
            previous: prev,
            pageSize: innerPageSize.value
          };
          if (isTriggerChange !== false) {
            var _props2$onChange;
            (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, pageInfo);
          }
          setInnerCurrent(current2, pageInfo);
        }
      };
      var handlePageChange = function handlePageChange(type) {
        var pageChangeMap = {
          prevPage: function prevPage() {
            return toPage(innerCurrent.value - 1);
          },
          nextPage: function nextPage() {
            return toPage(innerCurrent.value + 1);
          },
          prevMorePage: function prevMorePage() {
            return toPage(innerCurrent.value - props2.foldedMaxPageBtn);
          },
          nextMorePage: function nextMorePage() {
            return toPage(innerCurrent.value + props2.foldedMaxPageBtn);
          }
        };
        pageChangeMap[type]();
      };
      var onSelectorChange = function onSelectorChange(e) {
        var _props2$onChange2;
        if (props2.disabled) {
          return;
        }
        var pageSize2 = parseInt(e, 10);
        var pageCount2 = 1;
        if (pageSize2 > 0) {
          pageCount2 = Math.ceil(props2.total / pageSize2);
        }
        var isIndexChange = false;
        if (innerCurrent.value > pageCount2) {
          isIndexChange = true;
        }
        var pageInfo = {
          current: isIndexChange ? pageCount2 : innerCurrent.value,
          previous: innerCurrent.value,
          pageSize: pageSize2
        };
        (_props2$onChange2 = props2.onChange) === null || _props2$onChange2 === void 0 ? void 0 : _props2$onChange2.call(props2, pageInfo);
        setInnerPageSize(pageSize2, pageInfo);
        if (isIndexChange) {
          toPage(pageCount2, false);
        }
      };
      var onJumperChange = function onJumperChange(val) {
        var currentIndex = Math.trunc(+val);
        if (_isNaN(currentIndex)) return;
        jumpIndex.value = currentIndex;
        toPage(currentIndex);
      };
      return function () {
        var _slot;
        var total = props2.total,
          pageSizeOptions = props2.pageSizeOptions,
          size = props2.size,
          disabled = props2.disabled,
          showPageSize = props2.showPageSize;
        if (pageCount.value < 1) return null;
        var Jumper = vue.createVNode("div", {
          "class": CLASS_MAP.jumperClass.value
        }, [t(globalConfig.value.jumpTo), vue.createVNode(InputAdornment, {
          "append": "/ ".concat(pageCount.value, " ").concat(t(globalConfig.value.page))
        }, {
          "default": function _default() {
            return [vue.createVNode(InputNumber, {
              "class": CLASS_MAP.jumperInputClass.value,
              "modelValue": jumpIndex.value,
              "onUpdate:modelValue": function onUpdateModelValue($event) {
                return jumpIndex.value = $event;
              },
              "onBlur": onJumperChange,
              "onEnter": onJumperChange,
              "max": pageCount.value,
              "min": min,
              "size": size,
              "disabled": disabled,
              "theme": "normal",
              "placeholder": ""
            }, null)];
          }
        })]);
        return vue.createVNode("div", {
          "class": CLASS_MAP.paginationClass.value
        }, [renderTNodeJSX("totalContent", vue.createVNode("div", {
          "class": CLASS_MAP.totalClass.value
        }, [t(globalConfig.value.total, {
          total: total
        })])), showPageSize && pageSizeOptions.length > 0 && vue.createVNode(Select, vue.mergeProps({
          "size": size,
          "value": innerPageSize,
          "disabled": disabled,
          "class": CLASS_MAP.sizerClass.value,
          "autoWidth": true,
          "onChange": onSelectorChange
        }, props2.selectProps), _isSlot$n(_slot = sizeOptions.value.map(function (item, index) {
          return vue.createVNode(Option, {
            "value": item.value,
            "label": item.label,
            "key": index
          }, null);
        })) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        }), props2.showFirstAndLastPageBtn ? vue.createVNode("div", {
          "class": CLASS_MAP.preBtnClass.value,
          "onClick": function onClick() {
            return toPage(1);
          },
          "disabled": props2.disabled || props2.current === min
        }, [vue.createVNode(PageFirstIcon, null, null)]) : null, props2.showPreviousAndNextBtn ? vue.createVNode("div", {
          "class": CLASS_MAP.preBtnClass.value,
          "onClick": function onClick() {
            return handlePageChange("prevPage");
          },
          "disabled": disabled || innerCurrent.value === min
        }, [vue.createVNode(ChevronLeftIcon, null, null)]) : null, props2.showPageNumber && props2.theme === "default" ? vue.createVNode("ul", {
          "class": CLASS_MAP.btnWrapClass.value
        }, [isFolded.value && isMidEllipsis.value && vue.createVNode("li", {
          "class": CLASS_MAP.getButtonClass(1),
          "onClick": function onClick() {
            return toPage(min);
          }
        }, [min]), isFolded.value && isPrevMoreShow.value && isMidEllipsis.value ? vue.createVNode("li", {
          "class": CLASS_MAP.btnMoreClass.value,
          "onClick": function onClick() {
            return handlePageChange("prevMorePage");
          },
          "onMouseOver": function onMouseOver() {
            return prevMore.value = true;
          },
          "onMouseOut": function onMouseOut() {
            return prevMore.value = false;
          }
        }, [prevMore.value ? vue.createVNode(ChevronLeftDoubleIcon, null, null) : vue.createVNode(EllipsisIcon, null, null)]) : null, pages.value.map(function (i) {
          return vue.createVNode("li", {
            "class": CLASS_MAP.getButtonClass(i),
            "key": i,
            "onClick": function onClick() {
              return toPage(i);
            }
          }, [i]);
        }), isFolded.value && isNextMoreShow.value && isMidEllipsis.value ? vue.createVNode("li", {
          "class": CLASS_MAP.btnMoreClass.value,
          "onClick": function onClick() {
            return handlePageChange("nextMorePage");
          },
          "onMouseOver": function onMouseOver() {
            return nextMore.value = true;
          },
          "onMouseOut": function onMouseOut() {
            return nextMore.value = false;
          }
        }, [nextMore.value ? vue.createVNode(ChevronRightDoubleIcon, null, null) : vue.createVNode(EllipsisIcon, null, null)]) : null, isFolded.value && isMidEllipsis.value ? vue.createVNode("li", {
          "class": CLASS_MAP.getButtonClass(pageCount.value),
          "onClick": function onClick() {
            return toPage(pageCount.value);
          }
        }, [pageCount.value]) : null]) : null, props2.theme === "simple" && Jumper, props2.showPreviousAndNextBtn ? vue.createVNode("div", {
          "class": CLASS_MAP.nextBtnClass.value,
          "onClick": function onClick() {
            return handlePageChange("nextPage");
          },
          "disabled": disabled || innerCurrent.value === pageCount.value
        }, [vue.createVNode(ChevronRightIcon, null, null)]) : null, props2.showFirstAndLastPageBtn ? vue.createVNode("div", {
          "class": CLASS_MAP.nextBtnClass.value,
          "onClick": function onClick() {
            return toPage(pageCount.value);
          },
          "disabled": disabled || innerCurrent.value === pageCount.value
        }, [vue.createVNode(PageLastIcon, null, null)]) : null, props2.theme === "default" && props2.showJumper && Jumper]);
      };
    }
  });

  var Pagination = withInstall(_Pagination);

  var props$H = {
    current: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultCurrent: {
      type: [String, Number]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    options: {
      type: Array
    },
    readonly: Boolean,
    separator: {
      type: String,
      "default": "line",
      validator: function validator(val) {
        if (!val) return true;
        return ["line", "dashed", "arrow"].includes(val);
      }
    },
    sequence: {
      type: String,
      "default": "positive",
      validator: function validator(val) {
        if (!val) return true;
        return ["positive", "reverse"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "dot"].includes(val);
      }
    },
    onChange: Function
  };

  var stepItemProps = {
    content: {
      type: [String, Function],
      "default": ""
    },
    "default": {
      type: [String, Function]
    },
    extra: {
      type: [String, Function]
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "process", "finish", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function],
      "default": ""
    },
    value: {
      type: [String, Number]
    }
  };

  function ownKeys$1K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1K(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _StepItem = vue.defineComponent({
    name: "TStepItem",
    props: _objectSpread$1J(_objectSpread$1J({}, stepItemProps), {}, {
      index: Number
    }),
    setup: function setup(props2) {
      var stepsState = vue.inject("StepsState", void 0);
      var stepsProps = vue.inject("StepsProps", void 0);
      var _useConfig = useConfig("steps"),
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          CheckIcon: check,
          CloseIcon: close
        }),
        CheckIcon = _useGlobalIcon.CheckIcon,
        CloseIcon = _useGlobalIcon.CloseIcon;
      var canClick = vue.computed(function () {
        return props2.status !== "process" && !(stepsProps !== null && stepsProps !== void 0 && stepsProps.readonly);
      });
      var onStepClick = function onStepClick(e) {
        if (!canClick.value) return;
        var val = props2.value === void 0 ? props2.index : props2.value;
        stepsState.setCurrent(val, stepsState.current, {
          e: e
        });
      };
      var COMPONENT_NAME = usePrefixClass("steps-item");
      var statusClass = vue.computed(function () {
        return _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--").concat(props2.status), props2.status);
      });
      var baseClass = vue.computed(function () {
        return [COMPONENT_NAME.value, statusClass.value];
      });
      var iconClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__icon"), statusClass.value];
      });
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var renderIcon = function renderIcon() {
        var defaultIcon;
        if (stepsProps.theme === "default") {
          var icon = "";
          switch (props2.status) {
            case "finish":
              icon = vue.createVNode(CheckIcon, null, null);
              break;
            case "error":
              if (isFunction_1(globalConfig.value.errorIcon)) {
                icon = globalConfig.value.errorIcon(vue.h);
              } else {
                icon = vue.createVNode(CloseIcon, null, null);
              }
              break;
            default:
              icon = String(props2.index + 1);
              break;
          }
          defaultIcon = vue.createVNode("span", {
            "class": "".concat(COMPONENT_NAME.value, "__icon--number")
          }, [icon]);
        }
        return renderTNodeJSX("icon", defaultIcon);
      };
      return function () {
        return vue.createVNode("div", {
          "class": baseClass.value
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner ").concat(canClick.value ? "".concat(COMPONENT_NAME.value, "--clickable") : ""),
          "onClick": onStepClick
        }, [vue.createVNode("div", {
          "class": iconClass.value
        }, [renderIcon()]), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__title")
        }, [renderTNodeJSX("title")]), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__description")
        }, [renderContent("default", "content")]), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__extra")
        }, [renderTNodeJSX("extra")])])])]);
      };
    }
  });

  function ownKeys$1J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1J(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Steps = vue.defineComponent({
    name: "TSteps",
    props: _objectSpread$1I({}, props$H),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("steps");
      var _toRefs = vue.toRefs(props2),
        current = _toRefs.current,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(current, modelValue, props2.defaultCurrent, props2.onChange, "current"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerCurrent = _useVModel2[0],
        setInnerCurrent = _useVModel2[1];
      vue.provide("StepsState", vue.reactive({
        current: innerCurrent,
        setCurrent: setInnerCurrent
      }));
      vue.provide("StepsProps", props2);
      var indexMap = vue.ref({});
      var handleStatus = function handleStatus(itemProps, index) {
        if (itemProps.status && itemProps.status !== "default") return itemProps.status;
        if (innerCurrent.value === "FINISH") return "finish";
        if (itemProps.value === void 0 && index < innerCurrent.value) return "finish";
        if (itemProps.value !== void 0) {
          var matchIndex = indexMap.value[innerCurrent.value];
          if (matchIndex === void 0) {
            console.warn("TDesign Steps Warn: The current `value` is not exist.");
            return "default";
          }
          if (props2.sequence === "positive" && index < matchIndex) return "finish";
          if (props2.sequence === "reverse" && index > matchIndex) return "finish";
        }
        var key = itemProps.value === void 0 ? index : itemProps.value;
        if (key === innerCurrent.value) return "process";
        return "default";
      };
      var getChildComponentByName = useChildComponentSlots();
      var getOptionListBySlots = function getOptionListBySlots(nodes) {
        var arr = [];
        nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (node) {
          var option = (node === null || node === void 0 ? void 0 : node.props) || {};
          var children = node === null || node === void 0 ? void 0 : node.children;
          if (!option && !children) return;
          if (children && isObject_1(children)) {
            for (var key in children) {
              if (key in stepItemProps && !option[key]) {
                option[key] = children[key];
              }
            }
          }
          props2.sequence === "reverse" ? arr.unshift(option) : arr.push(option);
        });
        return arr;
      };
      var getOptions = function getOptions() {
        var _props2$options;
        var options;
        if ((_props2$options = props2.options) !== null && _props2$options !== void 0 && _props2$options.length) {
          options = props2.sequence === "reverse" ? props2.options.slice().reverse() : props2.options;
        } else {
          var nodes = getChildComponentByName("StepItem");
          options = getOptionListBySlots(nodes);
        }
        (options || []).forEach(function (item, index) {
          if (item.value !== void 0) indexMap.value[item.value] = index;
        });
        return options;
      };
      var renderContent = function renderContent() {
        var options = getOptions();
        return options.map(function (item, index) {
          var stepIndex = props2.sequence === "reverse" ? options.length - index - 1 : index;
          index = item.value !== void 0 ? index : stepIndex;
          return vue.createVNode(_StepItem, vue.mergeProps(item, {
            "index": stepIndex,
            "status": handleStatus(item, index),
            "key": item.value || index
          }), null);
        });
      };
      var handleTheme = function handleTheme() {
        var theme = props2.theme;
        var options = getOptions();
        options.forEach(function (item) {
          if ((item === null || item === void 0 ? void 0 : item.icon) !== void 0) {
            theme = "default";
          }
        });
        return theme;
      };
      var baseClass = vue.computed(function () {
        return [COMPONENT_NAME.value, "".concat(COMPONENT_NAME.value, "--").concat(props2.layout), "".concat(COMPONENT_NAME.value, "--").concat(handleTheme(), "-anchor"), "".concat(COMPONENT_NAME.value, "--").concat(props2.sequence), "".concat(COMPONENT_NAME.value, "--").concat(props2.separator, "-separator")];
      });
      return function () {
        return vue.createVNode("div", {
          "class": baseClass.value
        }, [renderContent()]);
      };
    }
  });

  var Steps = withInstall(_Steps);
  var StepItem = withInstall(_StepItem);

  var props$G = {
    autoFocus: Boolean,
    clearable: Boolean,
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    filter: {
      type: Function
    },
    filterable: {
      type: Boolean,
      "default": true
    },
    highlightKeyword: {
      type: Boolean,
      "default": true
    },
    inputProps: {
      type: Object
    },
    options: {
      type: Array
    },
    panelBottomContent: {
      type: [String, Function]
    },
    panelTopContent: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    readonly: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    textareaProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    triggerElement: {
      type: [String, Function]
    },
    value: {
      type: String,
      "default": void 0
    },
    modelValue: {
      type: String,
      "default": void 0
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onCompositionend: Function,
    onCompositionstart: Function,
    onEnter: Function,
    onFocus: Function,
    onSelect: Function
  };

  var _HighlightOption = vue.defineComponent({
    name: "HighlightOption",
    props: {
      content: String,
      keyword: String
    },
    setup: function setup(props) {
      var classPrefix = usePrefixClass();
      var words = vue.computed(function () {
        var _content$match;
        var content = props.content,
          keyword = props.keyword;
        if (!content) return {
          list: []
        };
        if (typeof content !== "string" || !keyword) return {
          list: [content]
        };
        var regExp = new RegExp(keyword, "i");
        var splitKeyword = (_content$match = content.match(regExp)) === null || _content$match === void 0 ? void 0 : _content$match[0];
        return {
          list: content.split(splitKeyword),
          keyword: splitKeyword
        };
      });
      return function () {
        var _words$value = words.value,
          list = _words$value.list,
          keyword = _words$value.keyword;
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-select-option__highlight-item")
        }, [list.map(function (item, index) {
          if (!index) return item;
          return [vue.createVNode("b", {
            "class": "".concat(classPrefix.value, "-is-highlight"),
            "key": item + keyword
          }, [keyword]), item];
        })]);
      };
    }
  });

  function ownKeys$1I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1I(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var AutoCompleteOptionList = vue.defineComponent({
    name: "AutoCompleteOptionList",
    props: {
      sizeClassNames: Object,
      value: String,
      size: String,
      options: Array,
      popupVisible: Boolean,
      highlightKeyword: Boolean,
      filterable: Boolean,
      filter: Function
    },
    emits: ["select"],
    setup: function setup(props, _ref) {
      var emit = _ref.emit,
        slots = _ref.slots;
      var active = vue.ref("");
      var classPrefix = usePrefixClass();
      var classes = vue.computed(function () {
        return "".concat(classPrefix.value, "-select__list");
      });
      var optionClasses = vue.computed(function () {
        return ["".concat(classPrefix.value, "-select-option"), _defineProperty$3({}, props.sizeClassNames[props.size], props.size)];
      });
      var tOptions = vue.computed(function () {
        var options = props.options.map(function (item) {
          var option = {};
          if (typeof item === "string") {
            option = {
              text: item,
              label: item
            };
          } else {
            if (item.text && typeof item.text !== "string") {
              log.warn("AutoComplete", "`text` must be a string.");
            }
            if (!item.text) {
              if (typeof item.label === "string") {
                option = _objectSpread$1H(_objectSpread$1H({}, item), {}, {
                  text: item.label
                });
              } else {
                log.warn("AutoComplete", "one of `label` and `text` must be a existed string.");
              }
            } else {
              option = item;
            }
          }
          return option;
        });
        if (props.filterable) {
          var regExp = new RegExp(props.value, "i");
          options = options.filter(function (item) {
            return regExp.test(item.text);
          });
        }
        if (props.filter) {
          options = options.filter(function (option) {
            return props.filter(props.value, option);
          });
        }
        return options;
      });
      var onOptionClick = function onOptionClick(e) {
        var liNode = e.target;
        while (liNode && liNode.tagName !== "LI") {
          liNode = liNode.parentNode;
        }
        var keyword = liNode.getAttribute("title");
        active.value = keyword;
        emit("select", keyword, {
          e: e
        });
      };
      var onKeyInnerPress = function onKeyInnerPress(e) {
        if (e.code === "ArrowUp" || e.key === "ArrowUp") {
          var index = tOptions.value.findIndex(function (item) {
            return item.text === active.value;
          });
          var newIndex = index - 1 < 0 ? tOptions.value.length - 1 : index - 1;
          active.value = tOptions.value[newIndex].text;
        } else if (e.code === "ArrowDown" || e.key === "ArrowDown") {
          var _index = tOptions.value.findIndex(function (item) {
            return item.text === active.value;
          });
          var _newIndex = _index + 1 >= tOptions.value.length ? 0 : _index + 1;
          active.value = tOptions.value[_newIndex].text;
        } else if (e.code === "Enter" || e.key === "Enter") {
          emit("select", active.value, {
            e: e
          });
        }
      };
      vue.watch(function () {
        return props.popupVisible;
      }, function () {
        if (props.popupVisible) {
          document.addEventListener("keydown", onKeyInnerPress);
        } else {
          document.removeEventListener("keydown", onKeyInnerPress);
        }
      }, {
        immediate: true
      });
      vue.watch(function () {
        return props.value;
      }, function () {
        if (!props.value) {
          active.value = "";
        }
      }, {
        immediate: true
      });
      vue.onBeforeUnmount(function () {
        document.removeEventListener("keydown", onKeyInnerPress);
      });
      return function () {
        if (!tOptions.value.length) return null;
        return vue.createVNode("ul", {
          "class": classes.value
        }, [tOptions.value.map(function (item) {
          var cls = _toConsumableArray(optionClasses.value);
          if (item.text === active.value) {
            cls.push("".concat(classPrefix.value, "-select-option--hover"));
          }
          var labelNode = item.label;
          if (isFunction_1(item.label)) {
            labelNode = item.label(vue.h);
          } else if (slots.option) {
            var _slots$option;
            labelNode = (_slots$option = slots.option) === null || _slots$option === void 0 ? void 0 : _slots$option.call(slots, {
              option: item
            });
          }
          var content = labelNode || item.text;
          return vue.createVNode("li", {
            "class": cls,
            "title": item.text,
            "onClick": onOptionClick
          }, [typeof content === "string" && props.highlightKeyword ? vue.createVNode(_HighlightOption, {
            "content": content,
            "keyword": props.value
          }, null) : content]);
        })]);
      };
    }
  });

  function ownKeys$1H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1H(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$m(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _AutoComplete = vue.defineComponent({
    name: "TAutoComplete",
    props: props$G,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        tValue = _useVModel2[0],
        setTValue = _useVModel2[1];
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var _useCommonClassName = useCommonClassName(),
        classPrefix = _useCommonClassName.classPrefix,
        sizeClassNames = _useCommonClassName.sizeClassNames;
      var _useConfig = useConfig("input"),
        global = _useConfig.globalConfig;
      var popupVisible = vue.ref();
      var getOverlayStyle = function getOverlayStyle(trigger, popupElement) {
        var _props2$popupProps;
        var triggerWidth = trigger.getBoundingClientRect().width || trigger.offsetWidth || trigger.clientWidth;
        var popupWidth = popupElement.getBoundingClientRect().width || popupElement.offsetWidth || popupElement.clientWidth;
        return _objectSpread$1G({
          width: triggerWidth >= popupWidth ? "".concat(triggerWidth, "px") : "auto"
        }, (_props2$popupProps = props2.popupProps) === null || _props2$popupProps === void 0 ? void 0 : _props2$popupProps.overlayInnerStyle);
      };
      var classes = vue.computed(function () {
        return ["".concat(classPrefix.value, "-auto-complete")];
      });
      var popupClasses = vue.computed(function () {
        var _props2$popupProps2;
        var classes2 = ["".concat(classPrefix.value, "-select__dropdown")];
        if ((_props2$popupProps2 = props2.popupProps) !== null && _props2$popupProps2 !== void 0 && _props2$popupProps2.overlayClassName) {
          classes2 = classes2.concat(props2.popupProps.overlayClassName);
        }
        return classes2;
      });
      var popupInnerClasses = vue.computed(function () {
        var _props2$popupProps3;
        var classes2 = ["".concat(classPrefix.value, "-select__dropdown-inner")];
        if ((_props2$popupProps3 = props2.popupProps) !== null && _props2$popupProps3 !== void 0 && _props2$popupProps3.overlayInnerClassName) {
          classes2 = classes2.concat(props2.popupProps.overlayInnerClassName);
        }
        return classes2;
      });
      var onInputChange = function onInputChange(value2, context) {
        setTValue(value2, context);
      };
      var innerInputProps = vue.computed(function () {
        var tProps = _objectSpread$1G({
          value: tValue.value,
          size: props2.size
        }, props2.inputProps);
        return tProps;
      });
      var onInnerFocus = function onInnerFocus(value2, context) {
        var _props2$onFocus;
        popupVisible.value = true;
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, _objectSpread$1G(_objectSpread$1G({}, context), {}, {
          value: value2
        }));
      };
      var onInnerSelect = function onInnerSelect(value2, context) {
        var _props2$onSelect;
        if (props2.readonly || props2.disabled) return;
        popupVisible.value = false;
        setTValue(value2, context);
        (_props2$onSelect = props2.onSelect) === null || _props2$onSelect === void 0 ? void 0 : _props2$onSelect.call(props2, value2, context);
      };
      var onPopupVisibleChange = function onPopupVisibleChange(visible, _ref2) {
        var trigger = _ref2.trigger;
        if (trigger !== "trigger-element-click") {
          popupVisible.value = visible;
        }
      };
      return function () {
        var _props2$placeholder;
        var triggerNode = renderContent("default", "content") || vue.createVNode(Input, vue.mergeProps({
          "placeholder": (_props2$placeholder = props2.placeholder) !== null && _props2$placeholder !== void 0 ? _props2$placeholder : global.value.placeholder,
          "tips": props2.tips,
          "status": props2.status,
          "readonly": props2.readonly,
          "disabled": props2.disabled,
          "onChange": onInputChange,
          "onFocus": onInnerFocus
        }, innerInputProps.value), slots);
        var listContent = vue.createVNode(AutoCompleteOptionList, {
          "value": tValue.value,
          "options": props2.options,
          "size": props2.size,
          "sizeClassNames": sizeClassNames,
          "onSelect": onInnerSelect,
          "popupVisible": popupVisible.value,
          "highlightKeyword": props2.highlightKeyword,
          "filterable": props2.filterable,
          "filter": props2.filter
        }, {
          option: slots.option
        });
        var topContent = renderTNodeJSX("panelTopContent");
        var bottomContent = renderTNodeJSX("panelBottomContent");
        var panelContent = topContent || listContent || bottomContent ? vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-autocomplete__panel")
        }, [topContent, listContent, bottomContent]) : null;
        var popupProps = _objectSpread$1G(_objectSpread$1G({}, props2.popupProps), {}, {
          overlayInnerStyle: getOverlayStyle,
          overlayInnerClassName: popupInnerClasses.value,
          overlayClassName: popupClasses.value
        });
        return vue.createVNode("div", {
          "class": classes.value
        }, [vue.createVNode(Popup, vue.mergeProps({
          "visible": popupVisible.value,
          "onVisibleChange": onPopupVisibleChange,
          "trigger": "focus",
          "placement": "bottom-left",
          "hideEmptyPopup": true,
          "content": panelContent ? function () {
            return panelContent;
          } : null
        }, popupProps), _isSlot$m(triggerNode) ? triggerNode : {
          "default": function _default() {
            return [triggerNode];
          }
        })]);
      };
    }
  });

  var AutoComplete = withInstall(_AutoComplete);
  var HighlightOption = withInstall(_HighlightOption);

  function getSingleContent(cascaderContext) {
    var value = cascaderContext.value,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore,
      showAllLevels = cascaderContext.showAllLevels;
    if (multiple || !value) return "";
    if (Array.isArray(value)) return "";
    var node = treeStore && treeStore.getNodes(value);
    if (!(node && node.length)) {
      return value;
    }
    var path = node && node[0].getPath();
    if (path && path.length) {
      return showAllLevels ? path.map(function (node2) {
        return node2.label;
      }).join(" / ") : path[path.length - 1].label;
    }
    return value;
  }
  function getMultipleContent(cascaderContext) {
    var value = cascaderContext.value,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore,
      showAllLevels = cascaderContext.showAllLevels;
    if (!multiple) return [];
    if (multiple && !Array.isArray(value)) return [];
    var node = treeStore && treeStore.getNodes(value);
    if (!node) return [];
    return value.map(function (item) {
      var node2 = treeStore.getNodes(item);
      return showAllLevels ? getFullPathLabel(node2[0]) : node2[0].label;
    }).filter(function (item) {
      return !!item;
    });
  }
  function getPanels(treeNodes) {
    var panels = [];
    treeNodes.forEach(function (node) {
      if (panels[node.level]) {
        panels[node.level].push(node);
      } else {
        panels[node.level] = [node];
      }
    });
    return panels;
  }
  function getFullPathLabel(node) {
    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "/";
    return node === null || node === void 0 ? void 0 : node.getPath().map(function (node2) {
      return node2.label;
    }).join(separator);
  }
  var getTreeValue = function getTreeValue(value) {
    var treeValue = [];
    if (Array.isArray(value)) {
      if (value.length > 0 && _typeof$2(value[0]) === "object") {
        treeValue = value.map(function (val) {
          return val.value;
        });
      } else if (value.length) {
        treeValue = value;
      }
    } else if (value) {
      if (_typeof$2(value) === "object") {
        treeValue = [value.value];
      } else {
        treeValue = [value];
      }
    }
    return treeValue;
  };
  var getCascaderValue = function getCascaderValue(value, valueType, multiple) {
    if (valueType === "single") {
      return value;
    }
    if (multiple) {
      return value.map(function (item) {
        return item[item.length - 1];
      });
    }
    return value[value.length - 1];
  };
  function isEmptyValues(value) {
    if (typeof value === "number" && !isNaN(value)) return false;
    return isEmpty_1(value);
  }
  function isValueInvalid(value, cascaderContext) {
    var multiple = cascaderContext.multiple,
      showAllLevels = cascaderContext.showAllLevels;
    return multiple && !Array.isArray(value) || !multiple && Array.isArray(value) && !showAllLevels;
  }

  function getFakeArrowIconClass(prefix, STATUS, cascaderContext) {
    var disabled = cascaderContext.disabled;
    return ["".concat(prefix, "-cascader__icon"), _defineProperty$3({}, STATUS.disabled, disabled)];
  }
  function getNodeStatusClass(node, STATUS, cascaderContext) {
    var _ref2;
    var checkStrictly = cascaderContext.checkStrictly,
      multiple = cascaderContext.multiple,
      value = cascaderContext.value,
      max = cascaderContext.max;
    var expandedActive = !checkStrictly && node.expanded && (multiple ? !node.isLeaf() : true) || checkStrictly && node.expanded;
    var isLeaf = node.isLeaf();
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    var isSelected = node.checked || multiple && !checkStrictly && node.expanded && !isLeaf;
    return [(_ref2 = {}, _defineProperty$3(_ref2, STATUS.selected, !isDisabled && isSelected), _defineProperty$3(_ref2, STATUS.expanded, !isDisabled && expandedActive), _defineProperty$3(_ref2, STATUS.disabled, isDisabled), _ref2)];
  }
  function getCascaderItemClass(prefix, node, SIZE, STATUS, cascaderContext) {
    var _ref3;
    var size = cascaderContext.size;
    return ["".concat(prefix, "-cascader__item")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)), [SIZE[size], (_ref3 = {}, _defineProperty$3(_ref3, "".concat(prefix, "-cascader__item--with-icon"), !!node.children), _defineProperty$3(_ref3, "".concat(prefix, "-cascader__item--leaf"), node.isLeaf()), _ref3)]);
  }
  function getCascaderItemIconClass(prefix, node, STATUS, cascaderContext) {
    return ["".concat(prefix, "-cascader__item-icon"), "".concat(prefix, "-icon")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)));
  }

  function _isSlot$l(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var props$F = {
    node: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    cascaderContext: {
      type: Object
    },
    onChange: Function,
    onClick: Function,
    onMouseenter: Function
  };
  var Item = vue.defineComponent({
    name: "TCascaderItem",
    props: props$F,
    setup: function setup(props2) {
      var liRef = vue.ref();
      useRipple(liRef);
      var COMPONENT_NAME = usePrefixClass("cascader__item");
      var classPrefix = usePrefixClass();
      var _useGlobalIcon = useGlobalIcon({
          ChevronRightIcon: chevronRight
        }),
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var itemClass = vue.computed(function () {
        return getCascaderItemClass(classPrefix.value, props2.node, SIZE.value, STATUS.value, props2.cascaderContext);
      });
      var iconClass = vue.computed(function () {
        return getCascaderItemIconClass(classPrefix.value, props2.node, STATUS.value, props2.cascaderContext);
      });
      function RenderLabelInner(node, cascaderContext) {
        var inputVal = cascaderContext.inputVal;
        var labelText = inputVal ? getFullPathLabel(node) : node.label;
        if (inputVal) {
          var texts = labelText.split(inputVal);
          var doms = [];
          for (var index = 0; index < texts.length; index++) {
            doms.push(vue.createVNode("span", {
              "key": index
            }, [texts[index]]));
            if (index === texts.length - 1) break;
            doms.push(vue.createVNode("span", {
              "key": "".concat(index, "filter"),
              "class": "".concat(COMPONENT_NAME.value, "-label--filter")
            }, [inputVal]));
          }
          return doms;
        }
        return labelText;
      }
      function RenderLabelContent(node, cascaderContext) {
        var label = RenderLabelInner(node, cascaderContext);
        var labelCont = vue.createVNode("span", {
          "title": cascaderContext.inputVal ? getFullPathLabel(node) : node.label,
          "class": ["".concat(COMPONENT_NAME.value, "-label"), "".concat(COMPONENT_NAME.value, "-label--ellipsis")],
          "role": "label"
        }, [label]);
        return labelCont;
      }
      function RenderCheckBox(node, cascaderContext) {
        var checkProps = cascaderContext.checkProps,
          value = cascaderContext.value,
          max = cascaderContext.max,
          inputVal = cascaderContext.inputVal;
        var label = RenderLabelInner(node, cascaderContext);
        return vue.createVNode(Checkbox, vue.mergeProps({
          "checked": node.checked,
          "indeterminate": node.indeterminate,
          "disabled": node.isDisabled() || value.length >= max && max !== 0,
          "name": String(node.value),
          "stopLabelTrigger": !!node.children,
          "title": inputVal ? getFullPathLabel(node) : node.label,
          "onChange": function onChange() {
            props2.onChange();
          }
        }, checkProps), _isSlot$l(label) ? label : {
          "default": function _default() {
            return [label];
          }
        });
      }
      return function () {
        var cascaderContext = props2.cascaderContext,
          node = props2.node;
        return vue.createVNode("li", {
          "ref": liRef,
          "class": itemClass.value,
          "onClick": function onClick(e) {
            e.stopPropagation();
            props2.onClick();
          },
          "onMouseenter": function onMouseenter(e) {
            e.stopPropagation();
            props2.onMouseenter();
          }
        }, [cascaderContext.multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext), node.children && (node.loading ? vue.createVNode(Loading, {
          "class": iconClass.value,
          "size": "small"
        }, null) : vue.createVNode(ChevronRightIcon, {
          "class": iconClass.value
        }, null))]);
      };
    }
  });

  var props$E = {
    checkProps: {
      type: Object
    },
    checkStrictly: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: Boolean,
    empty: {
      type: [String, Function]
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    inputProps: {
      type: Object
    },
    keys: {
      type: Object
    },
    lazy: {
      type: Boolean,
      "default": true
    },
    load: {
      type: Function
    },
    loading: Boolean,
    loadingText: {
      type: [String, Function],
      "default": ""
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    readonly: Boolean,
    selectInputProps: {
      type: Object
    },
    showAllLevels: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["large", "medium", "small"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    tagInputProps: {
      type: Object
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    trigger: {
      type: String,
      "default": "click",
      validator: function validator(val) {
        if (!val) return true;
        return ["click", "hover"].includes(val);
      }
    },
    value: {
      type: [String, Number, Array],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Array],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Array],
      "default": function _default() {
        return [];
      }
    },
    valueMode: {
      type: String,
      "default": "onlyLeaf",
      validator: function validator(val) {
        if (!val) return true;
        return ["onlyLeaf", "parentFirst", "all"].includes(val);
      }
    },
    valueType: {
      type: String,
      "default": "single",
      validator: function validator(val) {
        if (!val) return true;
        return ["single", "full"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onPopupVisibleChange: Function,
    onRemove: Function
  };

  function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
    var checkStrictly = cascaderContext.checkStrictly,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore,
      setVisible = cascaderContext.setVisible,
      setValue = cascaderContext.setValue,
      setTreeNodes = cascaderContext.setTreeNodes,
      setExpend = cascaderContext.setExpend,
      value = cascaderContext.value,
      max = cascaderContext.max,
      valueType = cascaderContext.valueType;
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    if (isDisabled) return;
    if (propsTrigger === trigger && !node.isLeaf()) {
      var expanded = node.setExpanded(true);
      treeStore.refreshNodes();
      treeStore.replaceExpanded(expanded);
      var nodes = treeStore.getNodes().filter(function (node2) {
        return node2.visible;
      });
      setTreeNodes(nodes);
      if (multiple) {
        setExpend(expanded);
      }
    }
    if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
      treeStore.resetChecked();
      var checked = node.setChecked(!node.checked);
      var _checked = _slicedToArray(checked, 1),
        value2 = _checked[0];
      setValue(valueType === "single" ? value2 : node.getPath().map(function (item) {
        return item.value;
      }), "check", node.getModel());
      if (!checkStrictly) {
        setVisible(false, {});
      }
    }
  }
  function valueChangeEffect(node, cascaderContext) {
    var disabled = cascaderContext.disabled,
      max = cascaderContext.max,
      inputVal = cascaderContext.inputVal,
      multiple = cascaderContext.multiple,
      setVisible = cascaderContext.setVisible,
      setValue = cascaderContext.setValue,
      treeNodes = cascaderContext.treeNodes,
      treeStore = cascaderContext.treeStore,
      valueType = cascaderContext.valueType;
    if (!node || disabled || node.disabled) {
      return;
    }
    var checked = node.setChecked(!node.isChecked());
    if (isNumber_1(max) && max < 0) {
      console.warn("TDesign Warn:", "max should > 0");
    }
    if (checked.length > max && isNumber_1(max) && max > 0) {
      return;
    }
    if (checked.length === 0) {
      var expanded = treeStore.getExpanded();
      setTimeout(function () {
        treeStore.replaceExpanded(expanded);
        treeStore.refreshNodes();
      }, 0);
    }
    if (!multiple) {
      setVisible(false, {});
    }
    var isSelectAll = treeNodes.every(function (item) {
      return checked.indexOf(item.value) > -1;
    });
    if (inputVal && isSelectAll) {
      setVisible(false, {});
    }
    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, "check", node.getModel());
  }
  function closeIconClickEffect(cascaderContext) {
    var setVisible = cascaderContext.setVisible,
      multiple = cascaderContext.multiple,
      setExpend = cascaderContext.setExpend,
      setValue = cascaderContext.setValue;
    setVisible(false, {});
    if (multiple) {
      setExpend([]);
    }
    setValue(multiple ? [] : "", "clear");
  }
  function handleRemoveTagEffect(cascaderContext, index, onRemove) {
    var disabled = cascaderContext.disabled,
      setValue = cascaderContext.setValue,
      value = cascaderContext.value,
      valueType = cascaderContext.valueType,
      treeStore = cascaderContext.treeStore;
    if (disabled) return;
    var newValue = cloneDeep_1(value);
    var res = newValue.splice(index, 1);
    var node = treeStore.getNodes(res[0])[0];
    setValue(newValue, "uncheck", node.getModel());
    var checked = node.setChecked(!node.isChecked());
    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, "uncheck", node.getModel());
    if (isFunction_1(onRemove)) {
      onRemove({
        value: checked,
        node: node
      });
    }
  }
  var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes, filter) {
    if (!treeStore) return;
    var nodes = [];
    if (inputVal) {
      var filterMethods = function filterMethods(node) {
        if (!node.isLeaf()) return;
        if (isFunction_1(filter)) {
          return filter("".concat(inputVal), node);
        }
        var fullPathLabel = getFullPathLabel(node, "");
        return fullPathLabel.indexOf("".concat(inputVal)) > -1;
      };
      nodes = treeStore.nodes.filter(filterMethods);
    } else {
      nodes = treeStore.getNodes().filter(function (node) {
        return node.visible;
      });
    }
    setTreeNodes(nodes);
  };
  var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
    var treeValue = getTreeValue(value);
    if (!treeStore) return;
    if (Array.isArray(treeValue) && expend.length === 0) {
      var expandedMap = /* @__PURE__ */new Map();
      var _treeValue = _slicedToArray(treeValue, 1),
        val = _treeValue[0];
      if (val) {
        expandedMap.set(val, true);
        var node = treeStore.getNode(val);
        if (!node) {
          treeStore.refreshNodes();
          return;
        }
        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
        var expandedArr = Array.from(expandedMap.keys());
        treeStore.replaceExpanded(expandedArr);
      } else {
        treeStore.resetExpanded();
      }
    }
    if (treeStore.getExpanded() && expend.length) {
      treeStore.replaceExpanded(expend);
    }
    treeStore.refreshNodes();
  };

  var Panel = vue.defineComponent({
    name: "TCascaderSubPanel",
    props: {
      empty: props$E.empty,
      trigger: props$E.trigger,
      onChange: props$E.onChange,
      loading: props$E.loading,
      loadingText: props$E.loadingText,
      cascaderContext: {
        type: Object
      }
    },
    setup: function setup(props) {
      var renderTNodeJSXDefault = useTNodeDefault();
      var COMPONENT_NAME = usePrefixClass("cascader");
      var _useConfig = useConfig("cascader"),
        globalConfig = _useConfig.globalConfig;
      var panels = vue.computed(function () {
        return getPanels(props.cascaderContext.treeNodes);
      });
      var handleExpand = function handleExpand(node, trigger) {
        var propsTrigger = props.trigger,
          cascaderContext = props.cascaderContext;
        expendClickEffect(propsTrigger, trigger, node, cascaderContext);
      };
      var renderItem = function renderItem(node) {
        return vue.createVNode(Item, {
          "key": node.value,
          "node": node,
          "cascaderContext": props.cascaderContext,
          "onClick": function onClick() {
            handleExpand(node, "click");
          },
          "onMouseenter": function onMouseenter() {
            handleExpand(node, "hover");
          },
          "onChange": function onChange() {
            valueChangeEffect(node, props.cascaderContext);
          }
        }, null);
      };
      var renderList = function renderList(treeNodes) {
        var _ref;
        var isFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var segment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "1";
        return vue.createVNode("ul", {
          "class": ["".concat(COMPONENT_NAME.value, "__menu"), "narrow-scrollbar", (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "__menu--segment"), segment), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "__menu--filter"), isFilter), _ref)],
          "key": key
        }, [treeNodes.map(function (node) {
          return renderItem(node);
        })]);
      };
      var renderPanels = function renderPanels() {
        var _props$cascaderContex = props.cascaderContext,
          inputVal = _props$cascaderContex.inputVal,
          treeNodes = _props$cascaderContex.treeNodes;
        return inputVal ? renderList(treeNodes, true) : panels.value.map(function (treeNodes2, index) {
          return renderList(treeNodes2, false, index !== panels.value.length - 1, "".concat(COMPONENT_NAME.value, "__menu").concat(index));
        });
      };
      return function () {
        var content;
        if (props.loading) {
          content = renderTNodeJSXDefault("loadingText", vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__panel--empty")
          }, [globalConfig.value.loadingText]));
        } else {
          content = panels.value.length ? renderPanels() : renderTNodeJSXDefault("empty", vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__panel--empty")
          }, [globalConfig.value.empty]));
        }
        return vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__panel"), _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--normal"), panels.value.length && !props.loading)]
        }, [content]);
      };
    }
  });

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome$1(array, predicate) {
    var index = -1,
      length = array == null ? 0 : array.length;
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  var _arraySome = arraySome$1;

  var SetCache$1 = _SetCache,
    arraySome = _arraySome,
    cacheHas$1 = _cacheHas;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
      arrLength = array.length,
      othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG$1 ? new SetCache$1() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
        othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas$1(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }
  var _equalArrays = equalArrays$2;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray$1(map) {
    var index = -1,
      result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  var _mapToArray = mapToArray$1;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray$1(set) {
    var index = -1,
      result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }
  var _setToArray = setToArray$1;

  var _Symbol = _Symbol$6,
    Uint8Array = _Uint8Array,
    eq$1 = eq_1,
    equalArrays$1 = _equalArrays,
    mapToArray = _mapToArray,
    setToArray = _setToArray;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1,
    COMPARE_UNORDERED_FLAG = 2;

  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag$1 = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }
        return true;
      case boolTag$1:
      case dateTag:
      case numberTag:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq$1(+object, +other);
      case errorTag$1:
        return object.name == other.name && object.message == other.message;
      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == other + '';
      case mapTag:
        var convert = mapToArray;
      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2;
        convert || (convert = setToArray);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;
      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  var _equalByTag = equalByTag$1;

  var getAllKeys = _getAllKeys;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1;

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$3.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$4.call(other, key))) {
        return false;
      }
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
        othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
        othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }
  var _equalObjects = equalObjects$1;

  var Stack = _Stack,
    equalArrays = _equalArrays,
    equalByTag = _equalByTag,
    equalObjects = _equalObjects,
    getTag = _getTag,
    isArray = isArray_1,
    isBuffer = isBuffer$5.exports,
    isTypedArray = isTypedArray_1;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

  /** Used for built-in method references. */
  var objectProto$2 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$2.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;
    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty$3.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty$3.call(other, '__wrapped__');
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }
  var _baseIsEqualDeep = baseIsEqualDeep$1;

  var baseIsEqualDeep = _baseIsEqualDeep,
    isObjectLike$2 = isObjectLike_1;

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual$1(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike$2(value) && !isObjectLike$2(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$1, stack);
  }
  var _baseIsEqual = baseIsEqual$1;

  var baseIsEqual = _baseIsEqual;

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }
  var isEqual_1 = isEqual;

  var SetCache = _SetCache,
    arrayIncludes = _arrayIncludes,
    arrayIncludesWith = _arrayIncludesWith,
    arrayMap$1 = _arrayMap,
    baseUnary = _baseUnary,
    cacheHas = _cacheHas;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * The base implementation of methods like `_.difference` without support
   * for excluding multiple arrays or iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Array} values The values to exclude.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   */
  function baseDifference$1(array, values, iteratee, comparator) {
    var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;
    if (!length) {
      return result;
    }
    if (iteratee) {
      values = arrayMap$1(values, baseUnary(iteratee));
    }
    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }
    outer: while (++index < length) {
      var value = array[index],
        computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;
      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;
        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }
        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }
    return result;
  }
  var _baseDifference = baseDifference$1;

  var baseDifference = _baseDifference,
    baseFlatten = _baseFlatten,
    baseRest$1 = _baseRest,
    isArrayLikeObject = isArrayLikeObject_1;

  /**
   * Creates an array of `array` values not included in the other given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * **Note:** Unlike `_.pullAll`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.without, _.xor
   * @example
   *
   * _.difference([2, 1], [2, 3]);
   * // => [1]
   */
  var difference = baseRest$1(function (array, values) {
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
  });
  var difference_1 = difference;

  var toString$3 = toString_1;

  /** Used to generate unique IDs. */
  var idCounter = 0;

  /**
   * Generates a unique ID. If `prefix` is given, the ID is appended to it.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {string} [prefix=''] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */
  function uniqueId(prefix) {
    var id = ++idCounter;
    return toString$3(prefix) + id;
  }
  var uniqueId_1 = uniqueId;

  /**
   * Checks if `value` is `null` or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
   * @example
   *
   * _.isNil(null);
   * // => true
   *
   * _.isNil(void 0);
   * // => true
   *
   * _.isNil(NaN);
   * // => false
   */
  function isNil(value) {
    return value == null;
  }
  var isNil_1 = isNil;

  function ownKeys$1G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1G(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getExposedProps(node) {
    var props = pick_1(node, ["value", "label", "data", "actived", "expanded", "checked", "indeterminate", "loading"]);
    return props;
  }
  function createNodeModel(node) {
    var props = getExposedProps(node);
    var model = _objectSpread$1F(_objectSpread$1F({}, props), {}, {
      getLevel: function getLevel() {
        return node.getLevel();
      },
      getIndex: function getIndex() {
        return node.getIndex();
      },
      isFirst: function isFirst() {
        return node.isFirst();
      },
      isLast: function isLast() {
        return node.isLast();
      },
      isLeaf: function isLeaf() {
        return node.isLeaf();
      },
      insertBefore: function insertBefore(newData) {
        return node.insertBefore(newData);
      },
      insertAfter: function insertAfter(newData) {
        return node.insertAfter(newData);
      },
      appendData: function appendData(data) {
        return node.append(data);
      },
      getPath: function getPath() {
        var nodes = node.getPath();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getParent: function getParent() {
        var _node$parent;
        return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
      },
      getParents: function getParents() {
        var nodes = node.getParents();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getRoot: function getRoot() {
        var root = node.getRoot();
        return root === null || root === void 0 ? void 0 : root.getModel();
      },
      getSiblings: function getSiblings() {
        var nodes = node.getSiblings();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getChildren: function getChildren(deep) {
        var childrenModel = false;
        var children = node.children;
        if (Array.isArray(children)) {
          if (children.length > 0) {
            if (deep) {
              var nodes = node.walk();
              nodes.shift();
              childrenModel = nodes.map(function (item) {
                return item.getModel();
              });
            } else {
              childrenModel = children.map(function (item) {
                return item.getModel();
              });
            }
          } else {
            childrenModel = false;
          }
        } else if (typeof children === "boolean") {
          childrenModel = children;
        }
        return childrenModel;
      },
      remove: function remove(value) {
        if (!value) {
          node.remove();
          return;
        }
        var tree = node.tree;
        var targetNode = tree.getNode(value);
        if (!targetNode) {
          log.warnOnce("Tree", "`".concat(value, "` is not exist"));
          return;
        }
        var parents = targetNode.getParents();
        var parentValues = parents.map(function (pnode) {
          return pnode.value;
        });
        if (parentValues.indexOf(node.value) < 0) {
          log.warnOnce("Tree", "`".concat(value, "` is not a childNode of current node"));
          return;
        }
        targetNode.remove();
      },
      setData: function setData(data) {
        var _data = omit_1(data, ["children", "value", "label"]);
        var keys = node.tree.config.keys;
        var dataValue = data[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"];
        var dataLabel = data[(keys === null || keys === void 0 ? void 0 : keys.label) || "label"];
        if (dataValue !== void 0) _data.value = dataValue;
        if (dataLabel !== void 0) _data.label = dataLabel;
        Object.assign(node.data, _data);
        Object.assign(node, _data);
      }
    });
    return model;
  }
  function updateNodeModel(model, node) {
    var props = getExposedProps(node);
    Object.assign(model, props);
  }

  function ownKeys$1F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1F(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
  var defaultStatus = {
    expandMutex: false,
    activable: false,
    checkable: false,
    disabled: false,
    draggable: false,
    loading: false
  };
  var TreeNode = /*#__PURE__*/function () {
    function TreeNode(tree, data, parent) {
      _classCallCheck(this, TreeNode);
      _defineProperty$3(this, "tree", void 0);
      _defineProperty$3(this, "value", void 0);
      _defineProperty$3(this, "label", void 0);
      _defineProperty$3(this, "data", void 0);
      _defineProperty$3(this, "parent", void 0);
      _defineProperty$3(this, "children", void 0);
      _defineProperty$3(this, "model", void 0);
      _defineProperty$3(this, "vmIsLeaf", void 0);
      _defineProperty$3(this, "vmIsFirst", void 0);
      _defineProperty$3(this, "vmIsLast", void 0);
      _defineProperty$3(this, "vmIsRest", void 0);
      _defineProperty$3(this, "vmIsLocked", void 0);
      _defineProperty$3(this, "expanded", void 0);
      _defineProperty$3(this, "expandMutex", void 0);
      _defineProperty$3(this, "actived", void 0);
      _defineProperty$3(this, "activable", void 0);
      _defineProperty$3(this, "checkable", void 0);
      _defineProperty$3(this, "vmCheckable", void 0);
      _defineProperty$3(this, "checked", void 0);
      _defineProperty$3(this, "indeterminate", void 0);
      _defineProperty$3(this, "disabled", void 0);
      _defineProperty$3(this, "draggable", void 0);
      _defineProperty$3(this, "visible", void 0);
      _defineProperty$3(this, "level", void 0);
      _defineProperty$3(this, "loading", void 0);
      this.data = data;
      this.tree = tree;
      var config = tree.config || {};
      var prefix = config.prefix || "t";
      var keys = get_1(tree, "config.keys") || {};
      var propChildren = keys.children || "children";
      var propLabel = keys.label || "label";
      var propValue = keys.value || "value";
      this.model = null;
      this.children = null;
      this.vmCheckable = false;
      this.vmIsLeaf = false;
      this.vmIsFirst = false;
      this.vmIsLast = false;
      this.vmIsRest = true;
      this.vmIsLocked = false;
      var spec = _objectSpread$1E(_objectSpread$1E({}, defaultStatus), {}, {
        actived: false,
        expanded: false,
        checked: false
      }, data);
      var children = spec[propChildren];
      this.set(spec);
      this.label = spec[propLabel] || "";
      this.value = isNil_1(spec[propValue]) ? uniqueId_1(prefix) : spec[propValue];
      this.tree.nodeMap.set(this.value, this);
      if (parent && parent instanceof TreeNode) {
        this.parent = parent;
      } else {
        this.parent = null;
      }
      if (children === true) {
        this.children = children;
      }
      this.level = 0;
      this.visible = true;
      this.actived = spec.actived;
      this.initActived();
      this.expanded = spec.expanded;
      this.initExpanded();
      this.checked = spec.checked;
      this.initChecked();
      this.update();
      tree.reflow(this);
      if (Array.isArray(children)) {
        this.append(children);
      } else if (children === true && !config.lazy) {
        this.loadChildren();
      }
      this.checked = false;
      this.indeterminate = false;
      this.updateChecked();
    }
    _createClass(TreeNode, [{
      key: "initChecked",
      value: function initChecked() {
        var tree = this.tree,
          value = this.value,
          parent = this.parent;
        var checkStrictly = tree.config.checkStrictly;
        var checked = this.checked;
        checked = parent === null || parent === void 0 ? void 0 : parent.isChecked();
        if (checked && !checkStrictly) {
          tree.checkedMap.set(value, true);
        }
        this.checked = checked;
      }
    }, {
      key: "initExpanded",
      value: function initExpanded() {
        var tree = this.tree;
        var expanded = this.expanded;
        var config = tree.config;
        if (typeof config.expandLevel === "number" && this.getLevel() < config.expandLevel) {
          tree.expandedMap.set(this.value, true);
          expanded = true;
        }
        if (config.expandAll) {
          expanded = true;
        }
        if (this.children === true && config.lazy) {
          expanded = false;
        }
        if (expanded) {
          tree.expandedMap.set(this.value, true);
        } else {
          tree.expandedMap["delete"](this.value);
        }
        this.expanded = expanded;
      }
    }, {
      key: "initActived",
      value: function initActived() {
        var tree = this.tree,
          actived = this.actived;
        if (actived) {
          tree.activedMap.set(this.value, true);
        }
      }
    }, {
      key: "append",
      value: function append(data) {
        var _this = this;
        var list = [];
        if (!Array.isArray(data)) {
          list.push(data);
        } else {
          list.push.apply(list, _toConsumableArray(data));
        }
        if (list.length <= 0) {
          return;
        }
        if (!Array.isArray(this.children)) {
          this.children = [];
        }
        var children = this.children,
          tree = this.tree;
        list.forEach(function (item) {
          var node = null;
          if (item instanceof TreeNode) {
            node = item;
            node.appendTo(_this.tree, _this);
          } else {
            node = new TreeNode(_this.tree, item, _this);
            children.push(node);
          }
        });
        tree.reflow(this);
        this.updateRelated();
      }
    }, {
      key: "appendTo",
      value: function appendTo(tree, parent, index) {
        var _this2 = this;
        var parentNode = parent;
        var targetIndex = -1;
        if (typeof index === "number") {
          targetIndex = index;
        }
        var targetParents = (parentNode === null || parentNode === void 0 ? void 0 : parentNode.getParents()) || [];
        var includeCurrent = targetParents.some(function (pnode) {
          return pnode === _this2;
        });
        if (includeCurrent) {
          throw new Error("\u65E0\u6CD5\u5C06\u7236\u8282\u70B9\u63D2\u5165\u5230\u5B50\u8282\u70B9");
        }
        if (Array.isArray(parentNode === null || parentNode === void 0 ? void 0 : parentNode.children)) {
          var targetPosNode = parentNode === null || parentNode === void 0 ? void 0 : parentNode.children[targetIndex];
          if (targetPosNode && targetPosNode === this) {
            return;
          }
        }
        var siblings = null;
        if (parentNode instanceof TreeNode) {
          if (!Array.isArray(parentNode === null || parentNode === void 0 ? void 0 : parentNode.children)) {
            parentNode.children = [];
          }
          siblings = parent.children;
        } else {
          siblings = tree.children;
        }
        if (!Array.isArray(siblings)) {
          throw new Error("\u65E0\u6CD5\u63D2\u5165\u5230\u76EE\u6807\u4F4D\u7F6E\uFF0C\u53EF\u63D2\u5165\u7684\u8282\u70B9\u5217\u8868\u4E0D\u5B58\u5728");
        }
        var prevLength = siblings.length;
        var prevIndex = this.getIndex();
        this.remove();
        if (typeof index === "number") {
          var targetIndex2 = index;
          if (parentNode === this.parent) {
            var curLength = siblings.length;
            if (curLength < prevLength && prevIndex <= targetIndex2) {
              targetIndex2 -= 1;
            }
          }
          siblings.splice(targetIndex2, 0, this);
        } else {
          siblings.push(this);
        }
        this.parent = parentNode;
        var nodes = this.walk();
        nodes.forEach(function (item) {
          var node = item;
          node.tree = tree;
          tree.nodeMap.set(node.value, node);
          if (node.expanded) {
            tree.expandedMap.set(node.value, true);
          }
        });
        var updateNodes = (parentNode === null || parentNode === void 0 ? void 0 : parentNode.walk()) || tree.children.map(function (item) {
          return item.walk();
        }).flat();
        updateNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "insert",
      value: function insert(item, index) {
        var tree = this.tree,
          parent = this.parent;
        var siblings = this.getSiblings();
        var node = null;
        if (item instanceof TreeNode) {
          node = item;
          node.appendTo(tree, parent, index);
        } else if (item) {
          node = new TreeNode(tree, item, parent);
          if (typeof index === "number") {
            siblings.splice(index, 0, node);
          }
          siblings.forEach(function (sibling) {
            sibling.update();
          });
        }
        tree.reflow();
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(newData) {
        var index = this.getIndex();
        this.insert(newData, index);
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(newData) {
        var index = this.getIndex();
        this.insert(newData, index + 1);
      }
    }, {
      key: "remove",
      value: function remove() {
        var tree = this.tree;
        var nodes = this.walk();
        var siblings = this.getSiblings();
        var index = this.getIndex();
        if (Array.isArray(siblings)) {
          siblings.splice(index, 1);
        }
        nodes.forEach(function (node) {
          node.clean();
        });
        siblings.forEach(function (node) {
          node.update();
        });
        this.updateParents();
        tree.reflow();
      }
    }, {
      key: "clean",
      value: function clean() {
        var tree = this.tree,
          value = this.value;
        tree.activedMap["delete"](value);
        tree.checkedMap["delete"](value);
        tree.expandedMap["delete"](value);
        tree.nodeMap["delete"](value);
      }
    }, {
      key: "loadChildren",
      value: function () {
        var _loadChildren = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var config, list;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  config = get_1(this, "tree.config") || {};
                  if (!(this.children === true && !this.loading)) {
                    _context.next = 13;
                    break;
                  }
                  if (!(typeof config.load === "function")) {
                    _context.next = 13;
                    break;
                  }
                  this.loading = true;
                  this.update();
                  list = [];
                  _context.next = 8;
                  return config.load(this);
                case 8:
                  list = _context.sent;
                  this.tree.emit("load", {
                    node: this,
                    data: list
                  });
                  this.loading = false;
                  if (Array.isArray(list) && list.length > 0) {
                    this.append(list);
                  } else {
                    this.children = false;
                  }
                  this.update();
                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));
        function loadChildren() {
          return _loadChildren.apply(this, arguments);
        }
        return loadChildren;
      }()
    }, {
      key: "set",
      value: function set(item) {
        var _this3 = this;
        var tree = this.tree;
        var keys = Object.keys(item);
        keys.forEach(function (key) {
          if (hasOwnProperty$2.call(defaultStatus, key) || key === "label") {
            _this3[key] = item[key];
          }
        });
        tree.updated(this);
      }
    }, {
      key: "getParent",
      value: function getParent() {
        return this.parent;
      }
    }, {
      key: "getParents",
      value: function getParents() {
        var parents = [];
        var node = this.parent;
        while (node) {
          parents.push(node);
          node = node.parent;
        }
        return parents;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings() {
        var parent = this.parent,
          tree = this.tree;
        var list = [];
        if (parent) {
          if (Array.isArray(parent.children)) {
            list = parent.children;
          }
        } else if (tree) {
          list = tree.children;
        }
        return list;
      }
    }, {
      key: "getRoot",
      value: function getRoot() {
        var parents = this.getParents();
        return parents[parents.length - 1] || null;
      }
    }, {
      key: "getIndex",
      value: function getIndex() {
        var list = this.getSiblings();
        return list.indexOf(this);
      }
    }, {
      key: "getPath",
      value: function getPath() {
        var nodes = this.getParents();
        nodes.unshift(this);
        return nodes.reverse();
      }
    }, {
      key: "getLevel",
      value: function getLevel() {
        var parents = this.getParents();
        return parents.length;
      }
    }, {
      key: "isRest",
      value: function isRest() {
        var _this$tree = this.tree,
          config = _this$tree.config,
          filterMap = _this$tree.filterMap;
        var rest = true;
        if (typeof config.filter === "function") {
          var nodeModel = this.getModel();
          rest = config.filter(nodeModel);
        }
        if (rest) {
          filterMap.set(this.value, true);
        } else if (filterMap.get(this.value)) {
          filterMap["delete"](this.value);
        }
        return rest;
      }
    }, {
      key: "isVisible",
      value: function isVisible() {
        var nodeMap = this.tree.nodeMap;
        var visible = true;
        if (this.vmIsLocked) {
          return true;
        }
        if (nodeMap.get(this.value)) {
          var filterVisible = this.isRest();
          var expandVisible = true;
          var parents = this.getParents();
          if (parents.length > 0) {
            expandVisible = parents.every(function (node) {
              return node.isExpanded();
            });
          }
          visible = expandVisible && filterVisible;
        } else {
          visible = false;
        }
        return visible;
      }
    }, {
      key: "isDisabled",
      value: function isDisabled() {
        if (this.vmIsLocked) return true;
        var treeDisabled = get_1(this, "tree.config.disabled");
        return !!(treeDisabled || this.disabled);
      }
    }, {
      key: "isDraggable",
      value: function isDraggable() {
        return !!(get_1(this, "tree.config.draggable") || this.draggable);
      }
    }, {
      key: "isExpandMutex",
      value: function isExpandMutex() {
        return !!(get_1(this, "tree.config.expandMutex") || this.expandMutex);
      }
    }, {
      key: "isActivable",
      value: function isActivable() {
        return !!(get_1(this, "tree.config.activable") || this.activable);
      }
    }, {
      key: "isCheckable",
      value: function isCheckable() {
        return !!(get_1(this, "tree.config.checkable") || this.checkable);
      }
    }, {
      key: "isActived",
      value: function isActived(map) {
        var tree = this.tree,
          value = this.value;
        var activedMap = map || tree.activedMap;
        return !!(tree.nodeMap.get(value) && activedMap.get(value));
      }
    }, {
      key: "isExpanded",
      value: function isExpanded(map) {
        var tree = this.tree,
          value = this.value,
          vmIsLocked = this.vmIsLocked;
        if (vmIsLocked) return true;
        var expandedMap = map || tree.expandedMap;
        return !!(tree.nodeMap.get(value) && expandedMap.get(value));
      }
    }, {
      key: "isChecked",
      value: function isChecked(map) {
        var children = this.children,
          tree = this.tree;
        var checkStrictly = tree.config.checkStrictly;
        var checked = false;
        var checkedMap = map || tree.checkedMap;
        if (tree.nodeMap.get(this.value)) {
          if (checkedMap.get(this.value)) {
            checked = true;
          } else if (Array.isArray(children) && children.length > 0 && !checkStrictly) {
            checked = children.every(function (node) {
              var childIsChecked = node.isChecked(checkedMap);
              return childIsChecked;
            });
          } else if (!checkStrictly) {
            var parents = this.getParents();
            checked = parents.some(function (node) {
              return checkedMap.get(node.value);
            });
          }
        }
        return !!checked;
      }
    }, {
      key: "isIndeterminate",
      value: function isIndeterminate() {
        var children = this.children,
          tree = this.tree;
        var checkStrictly = tree.config.checkStrictly;
        if (checkStrictly) {
          return false;
        }
        var indeterminate = false;
        if (Array.isArray(children)) {
          var childChecked = null;
          indeterminate = children.some(function (node) {
            if (node.isIndeterminate()) {
              return true;
            }
            if (childChecked === null) {
              childChecked = node.isChecked();
            }
            if (childChecked !== node.isChecked()) {
              return true;
            }
            return false;
          });
        }
        return indeterminate;
      }
    }, {
      key: "isFirst",
      value: function isFirst() {
        var siblings = this.getSiblings();
        return siblings[0] === this;
      }
    }, {
      key: "isLast",
      value: function isLast() {
        var siblings = this.getSiblings();
        return siblings[siblings.length - 1] === this;
      }
    }, {
      key: "isLeaf",
      value: function isLeaf() {
        var isLeaf = false;
        if (Array.isArray(this.children)) {
          isLeaf = this.children.length <= 0;
        } else {
          isLeaf = !this.children;
        }
        return isLeaf;
      }
    }, {
      key: "lock",
      value: function lock(lockState) {
        this.vmIsLocked = lockState;
        this.expanded = this.isExpanded();
        this.visible = this.isVisible();
      }
    }, {
      key: "afterExpanded",
      value: function afterExpanded() {
        this.update();
        if (this.expanded && this.children === true) {
          this.loadChildren();
        }
      }
    }, {
      key: "toggleExpanded",
      value: function toggleExpanded() {
        return this.setExpanded(!this.isExpanded());
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(expanded, opts) {
        var tree = this.tree;
        var options = _objectSpread$1E({
          directly: false
        }, opts);
        var map = tree.expandedMap;
        if (!options.directly) {
          map = new Map(tree.expandedMap);
        }
        if (expanded) {
          var shouldExpandNodes = [];
          shouldExpandNodes.push(this);
          if (get_1(tree, "config.expandParent")) {
            this.getParents().forEach(function (node) {
              shouldExpandNodes.push(node);
            });
          }
          shouldExpandNodes.forEach(function (node) {
            var isExpandMutex = false;
            if (node.parent) {
              isExpandMutex = node.parent.isExpandMutex();
            } else {
              var _tree$config;
              isExpandMutex = tree === null || tree === void 0 ? void 0 : (_tree$config = tree.config) === null || _tree$config === void 0 ? void 0 : _tree$config.expandMutex;
            }
            if (isExpandMutex) {
              var siblings = node.getSiblings();
              siblings.forEach(function (snode) {
                map["delete"](snode.value);
              });
            }
            map.set(node.value, true);
          });
        } else {
          map["delete"](this.value);
        }
        if (options.directly) {
          this.afterExpanded();
          this.update();
          this.updateChildren();
        }
        return tree.getExpanded(map);
      }
    }, {
      key: "toggleActived",
      value: function toggleActived() {
        return this.setActived(!this.isActived());
      }
    }, {
      key: "setActived",
      value: function setActived(actived, opts) {
        var tree = this.tree;
        var options = _objectSpread$1E({
          directly: false
        }, opts);
        var config = tree.config || {};
        var map = tree.activedMap;
        if (!options.directly) {
          map = new Map(tree.activedMap);
        }
        if (this.isActivable()) {
          if (actived) {
            if (!config.activeMultiple) {
              map.clear();
            }
            map.set(this.value, true);
          } else {
            map["delete"](this.value);
          }
        }
        if (options.directly) {
          this.update();
        }
        return tree.getActived(map);
      }
    }, {
      key: "toggleChecked",
      value: function toggleChecked() {
        return this.setChecked(!this.isChecked());
      }
    }, {
      key: "setChecked",
      value: function setChecked(checked, opts) {
        var tree = this.tree;
        var config = tree.config || {};
        var options = _objectSpread$1E({
          directly: false
        }, opts);
        var map = tree.checkedMap;
        if (!options.directly) {
          map = new Map(tree.checkedMap);
        }
        if (this.isCheckable() && checked !== this.isChecked()) {
          if (config.checkStrictly) {
            if (checked) {
              map.set(this.value, true);
            } else {
              map["delete"](this.value);
            }
          } else {
            var children = this.walk();
            children.forEach(function (node) {
              if (checked) {
                map.set(node.value, true);
              } else {
                map["delete"](node.value);
              }
            });
            var parents = this.getParents();
            parents.forEach(function (node) {
              map["delete"](node.value);
            });
          }
        }
        if (options.directly) {
          if (config.checkStrictly) {
            this.updateChecked();
          } else {
            var relatedNodes = tree.getRelatedNodes([this.value]);
            relatedNodes.forEach(function (node) {
              node.updateChecked();
            });
          }
        }
        return tree.getChecked(map);
      }
    }, {
      key: "update",
      value: function update() {
        this.level = this.getLevel();
        this.actived = this.isActived();
        this.expanded = this.isExpanded();
        this.vmCheckable = this.isCheckable();
        this.visible = this.isVisible();
        this.vmIsRest = this.isRest();
        this.vmIsFirst = this.isFirst();
        this.vmIsLast = this.isLast();
        this.vmIsLeaf = this.isLeaf();
        this.tree.updated(this);
      }
    }, {
      key: "updateChecked",
      value: function updateChecked(isFromValueChange) {
        var tree = this.tree;
        this.vmCheckable = this.isCheckable();
        if (this.vmCheckable && (!this.disabled || isFromValueChange)) {
          this.checked = this.isChecked();
          if (this.checked) {
            tree.checkedMap.set(this.value, true);
          }
          this.indeterminate = this.isIndeterminate();
          tree.updated(this);
        }
      }
    }, {
      key: "updateChildren",
      value: function updateChildren() {
        var children = this.children;
        if (Array.isArray(children)) {
          children.forEach(function (node) {
            node.update();
            node.updateChecked();
            node.updateChildren();
          });
        }
      }
    }, {
      key: "updateParents",
      value: function updateParents() {
        var parent = this.parent;
        if (parent) {
          parent.update();
          parent.updateChecked();
          parent.updateParents();
        }
      }
    }, {
      key: "updateRelated",
      value: function updateRelated() {
        var tree = this.tree;
        var relatedNodes = tree.getRelatedNodes([this.value]);
        relatedNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "walk",
      value: function walk() {
        var children = this.children;
        var list = [];
        list.push(this);
        if (Array.isArray(children) && children.length > 0) {
          children.forEach(function (node) {
            list = list.concat(node.walk());
          });
        }
        return list;
      }
    }, {
      key: "getModel",
      value: function getModel() {
        var model = this.model;
        if (!model) {
          model = createNodeModel(this);
          this.model = model;
        }
        updateNodeModel(model, this);
        return model;
      }
    }]);
    return TreeNode;
  }();

  function ownKeys$1E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1E(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TreeStore = /*#__PURE__*/function () {
    function TreeStore(options) {
      _classCallCheck(this, TreeStore);
      _defineProperty$3(this, "children", void 0);
      _defineProperty$3(this, "nodes", void 0);
      _defineProperty$3(this, "nodeMap", void 0);
      _defineProperty$3(this, "config", void 0);
      _defineProperty$3(this, "activedMap", void 0);
      _defineProperty$3(this, "updatedMap", void 0);
      _defineProperty$3(this, "checkedMap", void 0);
      _defineProperty$3(this, "expandedMap", void 0);
      _defineProperty$3(this, "filterMap", void 0);
      _defineProperty$3(this, "updateTimer", void 0);
      _defineProperty$3(this, "shouldReflow", void 0);
      _defineProperty$3(this, "prevFilter", void 0);
      _defineProperty$3(this, "nullNodeModel", void 0);
      var config = _objectSpread$1D({
        prefix: "t",
        keys: {},
        expandAll: false,
        expandLevel: 0,
        expandMutex: false,
        expandParent: false,
        activable: false,
        activeMultiple: false,
        checkable: false,
        checkStrictly: false,
        disabled: false,
        draggable: false,
        load: null,
        lazy: false,
        valueMode: "onlyLeaf",
        filter: null,
        onLoad: null,
        onReflow: null,
        onUpdate: null,
        allowFoldNodeOnFilter: false
      }, options);
      this.config = config;
      this.nodes = [];
      this.children = [];
      this.nodeMap = /* @__PURE__ */new Map();
      this.activedMap = /* @__PURE__ */new Map();
      this.expandedMap = /* @__PURE__ */new Map();
      this.checkedMap = /* @__PURE__ */new Map();
      this.updatedMap = /* @__PURE__ */new Map();
      this.filterMap = /* @__PURE__ */new Map();
      this.prevFilter = null;
      this.updateTimer = null;
      this.shouldReflow = false;
      this.initNullNodeModel();
    }
    _createClass(TreeStore, [{
      key: "initNullNodeModel",
      value: function initNullNodeModel() {
        var nullNode = new TreeNode(this, {
          value: "",
          label: "",
          children: []
        });
        this.nullNodeModel = nullNode.getModel();
        nullNode.remove();
      }
    }, {
      key: "setConfig",
      value: function setConfig(options) {
        var _this = this;
        var hasChanged = false;
        Object.keys(options).forEach(function (key) {
          var val = options[key];
          if (val !== _this.config[key]) {
            hasChanged = true;
            _this.config[key] = val;
          }
        });
        if (hasChanged) {
          this.refreshState();
        }
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        return this.children;
      }
    }, {
      key: "getNode",
      value: function getNode(item) {
        var node = null;
        if (typeof item === "string" || typeof item === "number") {
          node = this.nodeMap.get(item);
        } else if (item instanceof TreeNode) {
          node = this.nodeMap.get(item.value);
        }
        return node;
      }
    }, {
      key: "getIndex",
      value: function getIndex(node) {
        return this.nodes.indexOf(node);
      }
    }, {
      key: "getParent",
      value: function getParent(value) {
        var parent = null;
        var node = this.getNode(value);
        if (node) {
          parent = node.getParent();
        }
        return parent;
      }
    }, {
      key: "getParents",
      value: function getParents(value) {
        var node = this.getNode(value);
        var parents = [];
        if (node) {
          parents = node.getParents();
        }
        return parents;
      }
    }, {
      key: "getNodeIndex",
      value: function getNodeIndex(value) {
        var node = this.getNode(value);
        var index = -1;
        if (node) {
          index = node.getIndex();
        }
        return index;
      }
    }, {
      key: "getNodes",
      value: function getNodes(item, options) {
        var nodes = [];
        var val = "";
        if (typeof item === "string" || typeof item === "number") {
          val = item;
        } else if (item instanceof TreeNode) {
          val = item.value;
        }
        if (!val) {
          nodes = this.nodes.slice(0);
        } else {
          var node = this.getNode(val);
          if (node) {
            nodes = node.walk();
          }
        }
        if (options) {
          var conf = _objectSpread$1D({
            filter: null,
            level: Infinity
          }, options);
          if (typeof conf.level === "number" && conf.level !== Infinity) {
            nodes = nodes.filter(function (node) {
              return node.level <= conf.level;
            });
          }
          if (typeof conf.filter === "function") {
            nodes = nodes.filter(function (node) {
              var nodeModel = node.getModel();
              return conf.filter(nodeModel);
            });
          }
          if (isPlainObject_1(conf.props)) {
            nodes = nodes.filter(function (node) {
              var result = Object.keys(conf.props).every(function (key) {
                var propEqual = node[key] === conf.props[key];
                return propEqual;
              });
              return result;
            });
          }
        }
        return nodes;
      }
    }, {
      key: "append",
      value: function append(list) {
        var _this2 = this;
        list.forEach(function (item) {
          var node = new TreeNode(_this2, item);
          _this2.children.push(node);
        });
        this.reflow();
      }
    }, {
      key: "reload",
      value: function reload(list) {
        this.expandedMap.clear();
        this.checkedMap.clear();
        this.activedMap.clear();
        this.filterMap.clear();
        this.removeAll();
        this.append(list);
      }
    }, {
      key: "parseNodeData",
      value: function parseNodeData(para, item) {
        var value = "";
        var node = null;
        var data = null;
        if (typeof para === "string" || typeof para === "number") {
          value = para;
          data = item;
          node = this.getNode(value);
        } else if (para instanceof TreeNode) {
          node = para;
          data = item;
        } else {
          data = para;
        }
        var spec = {
          node: node,
          data: data
        };
        return spec;
      }
    }, {
      key: "appendNodes",
      value: function appendNodes(para, item) {
        var spec = this.parseNodeData(para, item);
        if (spec.data) {
          if (!spec.node) {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this);
            } else if (Array.isArray(spec.data)) {
              this.append(spec.data);
            } else {
              this.append([spec.data]);
            }
          } else {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this, spec.node);
            } else if (Array.isArray(spec.data)) {
              spec.node.append(spec.data);
            } else {
              spec.node.append([spec.data]);
            }
            spec.node.updateRelated();
          }
        }
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(value, item) {
        var node = this.getNode(value);
        if (node) {
          node.insertBefore(item);
        }
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(value, item) {
        var node = this.getNode(value);
        if (node) {
          node.insertAfter(item);
        }
      }
    }, {
      key: "refreshNodes",
      value: function refreshNodes() {
        var children = this.children,
          nodes = this.nodes;
        nodes.length = 0;
        children.forEach(function (node) {
          var list = node.walk();
          Array.prototype.push.apply(nodes, list);
        });
      }
    }, {
      key: "refreshState",
      value: function refreshState() {
        var nodes = this.nodes;
        nodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
      }
    }, {
      key: "reflow",
      value: function reflow(node) {
        this.shouldReflow = true;
        this.updated(node);
      }
    }, {
      key: "updated",
      value: function updated(node) {
        var _this3 = this;
        if (node !== null && node !== void 0 && node.value) {
          this.updatedMap.set(node.value, true);
        }
        if (this.updateTimer) return;
        this.updateTimer = +setTimeout(function () {
          var _this3$config;
          clearTimeout(_this3.updateTimer);
          _this3.updateTimer = null;
          if (_this3.shouldReflow) {
            _this3.refreshNodes();
            _this3.emit("reflow");
          }
          if (!((_this3$config = _this3.config) !== null && _this3$config !== void 0 && _this3$config.allowFoldNodeOnFilter)) _this3.lockFilterPathNodes();
          var updatedList = Array.from(_this3.updatedMap.keys());
          if (updatedList.length > 0) {
            var updatedNodes = updatedList.map(function (value) {
              return _this3.getNode(value);
            });
            _this3.emit("update", {
              nodes: updatedNodes,
              map: _this3.updatedMap
            });
          } else if (_this3.shouldReflow) {
            _this3.emit("update", {
              nodes: [],
              map: _this3.updatedMap
            });
          }
          _this3.shouldReflow = false;
          _this3.updatedMap.clear();
        });
      }
    }, {
      key: "getActived",
      value: function getActived(map) {
        var activedMap = map || this.activedMap;
        return Array.from(activedMap.keys());
      }
    }, {
      key: "getActivedNodes",
      value: function getActivedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isActived();
        });
        return nodes;
      }
    }, {
      key: "replaceActived",
      value: function replaceActived(list) {
        this.resetActived();
        this.setActived(list);
      }
    }, {
      key: "setActived",
      value: function setActived(actived) {
        var _this4 = this;
        var activeMultiple = this.config.activeMultiple;
        var list = actived.slice(0);
        if (!activeMultiple) {
          list.length = 1;
        }
        list.forEach(function (val) {
          _this4.activedMap.set(val, true);
          var node = _this4.getNode(val);
          if (node) {
            node.update();
          }
        });
      }
    }, {
      key: "resetActived",
      value: function resetActived() {
        var actived = this.getActived();
        this.activedMap.clear();
        var relatedNodes = this.getRelatedNodes(actived);
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getExpanded",
      value: function getExpanded(map) {
        var expandedMap = map || this.expandedMap;
        return Array.from(expandedMap.keys());
      }
    }, {
      key: "replaceExpanded",
      value: function replaceExpanded(list) {
        var expanded = this.getExpanded();
        var added = difference_1(list, expanded);
        var removed = difference_1(expanded, list);
        this.setExpandedDirectly(removed, false);
        this.updateExpanded(removed);
        this.setExpanded(added);
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(list) {
        this.setExpandedDirectly(list);
        this.updateExpanded(list);
      }
    }, {
      key: "setExpandedDirectly",
      value: function setExpandedDirectly(list) {
        var _this5 = this;
        var expanded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        list.forEach(function (val) {
          if (expanded) {
            _this5.expandedMap.set(val, true);
            var node = _this5.getNode(val);
            if (node) {
              node.afterExpanded();
            }
          } else {
            _this5.expandedMap["delete"](val);
          }
        });
      }
    }, {
      key: "resetExpanded",
      value: function resetExpanded() {
        var expanded = this.getExpanded();
        this.expandedMap.clear();
        this.updateExpanded(expanded);
      }
    }, {
      key: "updateExpanded",
      value: function updateExpanded(list) {
        var relatedNodes = this.getRelatedNodes(list, {
          withParents: false
        });
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getChecked",
      value: function getChecked(map) {
        var nodes = this.nodes,
          config = this.config;
        var valueMode = config.valueMode,
          checkStrictly = config.checkStrictly;
        var list = [];
        var checkedMap = map || this.checkedMap;
        nodes.forEach(function (node) {
          if (node.isChecked(checkedMap)) {
            if (valueMode === "parentFirst" && !checkStrictly) {
              if (!node.parent || !node.parent.isChecked(checkedMap)) {
                list.push(node.value);
              }
            } else if (valueMode === "onlyLeaf" && !checkStrictly) {
              if (node.isLeaf()) {
                list.push(node.value);
              }
            } else {
              list.push(node.value);
            }
          }
        });
        return list;
      }
    }, {
      key: "getCheckedNodes",
      value: function getCheckedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isChecked();
        });
        return nodes;
      }
    }, {
      key: "replaceChecked",
      value: function replaceChecked(list) {
        this.resetChecked();
        this.setChecked(list, true);
      }
    }, {
      key: "setChecked",
      value: function setChecked(list, isFromValueChange) {
        var _this6 = this;
        var _this$config = this.config,
          valueMode = _this$config.valueMode,
          checkStrictly = _this$config.checkStrictly,
          checkable = _this$config.checkable;
        if (!checkable) return;
        list.forEach(function (val) {
          var node = _this6.getNode(val);
          if (node) {
            if (valueMode === "parentFirst" && !checkStrictly) {
              var childrenNodes = node.walk();
              childrenNodes.forEach(function (childNode) {
                _this6.checkedMap.set(childNode.value, true);
              });
            } else {
              _this6.checkedMap.set(val, true);
              node.updateChecked(isFromValueChange);
            }
          }
        });
        if (!checkStrictly) {
          var checked = this.getChecked();
          var relatedNodes = this.getRelatedNodes(checked);
          relatedNodes.forEach(function (node) {
            node.updateChecked();
          });
        }
      }
    }, {
      key: "resetChecked",
      value: function resetChecked() {
        var checked = this.getChecked();
        var relatedNodes = this.getRelatedNodes(checked);
        this.checkedMap.clear();
        relatedNodes.forEach(function (node) {
          node.updateChecked();
        });
      }
    }, {
      key: "updateAll",
      value: function updateAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "remove",
      value: function remove(value) {
        var node = this.getNode(value);
        if (node) {
          node.remove();
        }
      }
    }, {
      key: "removeAll",
      value: function removeAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.remove();
        });
      }
    }, {
      key: "getRelatedNodes",
      value: function getRelatedNodes(list, options) {
        var _this7 = this;
        var conf = _objectSpread$1D({
          withParents: true
        }, options);
        var map = /* @__PURE__ */new Map();
        list.forEach(function (value) {
          if (map.get(value)) return;
          var node = _this7.getNode(value);
          if (node) {
            var parents = node.getParents();
            var children = node.walk();
            var related = [];
            if (conf.withParents) {
              related = parents.concat(children);
            } else {
              related = children;
            }
            related.forEach(function (relatedNode) {
              map.set(relatedNode.value, relatedNode);
            });
          }
        });
        var relatedNodes = Array.from(map.values());
        return relatedNodes;
      }
    }, {
      key: "emit",
      value: function emit(name, state) {
        var config = this.config || {};
        var methodName = camelCase_1("on-".concat(name));
        var method = config[methodName];
        if (typeof method === "function") {
          method(state);
        }
      }
    }, {
      key: "lockFilterPathNodes",
      value: function lockFilterPathNodes() {
        var _this8 = this;
        var config = this.config;
        var allNodes = this.getNodes();
        if (this.prevFilter) {
          allNodes.forEach(function (node) {
            node.lock(false);
          });
        }
        var currentFilter = config.filter;
        if (!currentFilter || typeof currentFilter !== "function") return;
        if (currentFilter(this.nullNodeModel)) return;
        this.prevFilter = config.filter;
        var map = /* @__PURE__ */new Map();
        allNodes.reverse().forEach(function (item) {
          var node = item;
          var parent = node.getParent();
          if (node.vmIsRest) {
            if (parent) {
              parent.expanded = true;
            }
            node.visible = true;
          }
          if (node.vmIsRest || map.get(node.value)) {
            if (parent && !parent.vmIsRest) {
              map.set(parent.value, true);
            }
          }
        });
        var filterPathValues = Array.from(map.keys());
        filterPathValues.forEach(function (value) {
          var node = _this8.getNode(value);
          if (node) {
            node.lock(true);
          }
        });
      }
    }]);
    return TreeStore;
  }();

  function ownKeys$1D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1D(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var useContext = function useContext(props, setInnerValue, innerPopupVisible, setPopupVisible) {
    var statusContext = vue.reactive({
      treeStore: null,
      inputVal: null,
      scopeVal: void 0,
      treeNodes: [],
      expend: []
    });
    return {
      statusContext: statusContext,
      cascaderContext: vue.computed(function () {
        var size = props.size,
          checkStrictly = props.checkStrictly,
          lazy = props.lazy,
          multiple = props.multiple,
          filterable = props.filterable,
          clearable = props.clearable,
          checkProps = props.checkProps,
          max = props.max,
          disabled = props.disabled,
          showAllLevels = props.showAllLevels,
          minCollapsedNum = props.minCollapsedNum,
          valueType = props.valueType;
        return _objectSpread$1C(_objectSpread$1C({
          value: statusContext.scopeVal,
          size: size,
          checkStrictly: checkStrictly,
          lazy: lazy,
          multiple: multiple,
          filterable: filterable,
          clearable: clearable,
          checkProps: checkProps,
          max: max,
          disabled: disabled,
          showAllLevels: showAllLevels,
          minCollapsedNum: minCollapsedNum,
          valueType: valueType,
          visible: innerPopupVisible.value
        }, statusContext), {}, {
          setTreeNodes: function setTreeNodes(nodes) {
            statusContext.treeNodes = nodes;
          },
          setValue: function setValue(val, source, node) {
            if (isEqual_1(val, statusContext.scopeVal)) return;
            setInnerValue(val, {
              source: source,
              node: node
            });
          },
          setVisible: setPopupVisible,
          setInputVal: function setInputVal(val) {
            statusContext.inputVal = val;
          },
          setExpend: function setExpend(val) {
            statusContext.expend = val;
          }
        });
      })
    };
  };
  var useCascaderContext = function useCascaderContext(props) {
    var disabled = useFormDisabled();
    var _toRefs = vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue,
      popupVisible = _toRefs.popupVisible;
    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var _useDefaultValue = useDefaultValue(popupVisible, false, props.onPopupVisibleChange, "popupVisible"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      innerPopupVisible = _useDefaultValue2[0],
      setPopupVisible = _useDefaultValue2[1];
    var _useContext = useContext(props, setInnerValue, innerPopupVisible, setPopupVisible),
      cascaderContext = _useContext.cascaderContext,
      statusContext = _useContext.statusContext;
    var isFilterable = vue.computed(function () {
      return Boolean(props.filterable || isFunction_1(props.filter));
    });
    var updatedTreeNodes = function updatedTreeNodes() {
      var _cascaderContext$valu = cascaderContext.value,
        inputVal = _cascaderContext$valu.inputVal,
        treeStore = _cascaderContext$valu.treeStore,
        setTreeNodes = _cascaderContext$valu.setTreeNodes;
      treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter);
    };
    var updateExpend = function updateExpend() {
      var _cascaderContext$valu2 = cascaderContext.value,
        value2 = _cascaderContext$valu2.value,
        treeStore = _cascaderContext$valu2.treeStore;
      var expend = statusContext.expend;
      treeStoreExpendEffect(treeStore, value2, expend);
      treeStore.replaceChecked(getTreeValue(value2));
    };
    vue.watch(function () {
      return props.options;
    }, function () {
      var options = props.options,
        _props$keys = props.keys,
        keys = _props$keys === void 0 ? {} : _props$keys,
        checkStrictly = props.checkStrictly,
        lazy = props.lazy,
        load = props.load,
        valueMode = props.valueMode;
      var treeStore = statusContext.treeStore;
      if (!options.length && !treeStore) return;
      if (!treeStore) {
        var store = new TreeStore({
          keys: _objectSpread$1C(_objectSpread$1C({}, keys), {}, {
            children: typeof keys.children === "string" ? keys.children : "children"
          }),
          checkable: true,
          expandMutex: true,
          expandParent: true,
          lazy: lazy,
          load: load,
          valueMode: valueMode,
          checkStrictly: checkStrictly,
          onLoad: function onLoad() {
            vue.nextTick(function () {
              store.refreshNodes();
              updatedTreeNodes();
            });
          }
        });
        store.append(options);
        statusContext.treeStore = store;
      } else {
        treeStore.reload(options);
        treeStore.refreshNodes();
      }
      updateExpend();
      updatedTreeNodes();
    }, {
      immediate: true
    });
    vue.watch(function () {
      var checkStrictly = props.checkStrictly,
        lazy = props.lazy,
        load = props.load,
        valueMode = props.valueMode;
      return JSON.stringify({
        valueMode: valueMode,
        checkStrictly: checkStrictly,
        lazy: lazy,
        load: load
      });
    }, function () {
      var treeStore = statusContext.treeStore;
      if (!treeStore) return;
      var checkStrictly = props.checkStrictly,
        lazy = props.lazy,
        load = props.load,
        valueMode = props.valueMode;
      var treeProps = {
        checkStrictly: checkStrictly,
        disabled: disabled,
        load: load,
        lazy: lazy,
        valueMode: valueMode
      };
      treeStore.setConfig(treeProps);
    }, {
      immediate: true
    });
    vue.watch(innerValue, function () {
      var _cascaderContext$valu3 = cascaderContext.value,
        setValue = _cascaderContext$valu3.setValue,
        multiple = _cascaderContext$valu3.multiple,
        valueType = _cascaderContext$valu3.valueType;
      if (isValueInvalid(innerValue.value, cascaderContext.value)) {
        setValue(multiple ? [] : "", "invalid-value");
      } else {
        statusContext.scopeVal = multiple ? [] : "";
      }
      if (!isEmptyValues(innerValue)) {
        statusContext.scopeVal = getCascaderValue(innerValue.value, valueType, multiple);
      }
      if (!statusContext.treeStore) return;
      updateExpend();
      updatedTreeNodes();
    }, {
      immediate: true
    });
    vue.watch(function () {
      return innerPopupVisible.value && isFilterable.value;
    }, function (visible) {
      var setInputVal = cascaderContext.value.setInputVal;
      if (visible) {
        setInputVal("");
      }
    });
    vue.watch(function () {
      return statusContext.inputVal;
    }, function () {
      updatedTreeNodes();
    });
    return {
      cascaderContext: cascaderContext,
      isFilterable: isFilterable
    };
  };

  function ownKeys$1C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1C(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Cascader = vue.defineComponent({
    name: "TCascader",
    props: _objectSpread$1B({}, props$E),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var disabled = useFormDisabled();
      var COMPONENT_NAME = usePrefixClass("cascader");
      var classPrefix = usePrefixClass();
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS;
      var overlayClassName = usePrefixClass("cascader__popup");
      var _useConfig = useConfig("cascader"),
        globalConfig = _useConfig.globalConfig;
      var _useCascaderContext = useCascaderContext(props2),
        cascaderContext = _useCascaderContext.cascaderContext,
        isFilterable = _useCascaderContext.isFilterable;
      var displayValue = vue.computed(function () {
        return props2.multiple ? getMultipleContent(cascaderContext.value) : getSingleContent(cascaderContext.value);
      });
      var panels = vue.computed(function () {
        return getPanels(cascaderContext.value.treeNodes);
      });
      var inputPlaceholder = vue.computed(function () {
        var _props2$placeholder;
        return cascaderContext.value.visible && !props2.multiple && getSingleContent(cascaderContext.value) || ((_props2$placeholder = props2.placeholder) !== null && _props2$placeholder !== void 0 ? _props2$placeholder : globalConfig.value.placeholder);
      });
      var renderSuffixIcon = function renderSuffixIcon() {
        var _cascaderContext$valu = cascaderContext.value,
          visible = _cascaderContext$valu.visible,
          disabled2 = _cascaderContext$valu.disabled;
        return vue.createVNode(FakeArrow, {
          "overlayClassName": getFakeArrowIconClass(classPrefix.value, STATUS.value, cascaderContext.value),
          "isActive": visible,
          "disabled": disabled2
        }, null);
      };
      return function () {
        var _props2$popupProps;
        var _cascaderContext$valu2 = cascaderContext.value,
          setVisible = _cascaderContext$valu2.setVisible,
          visible = _cascaderContext$valu2.visible,
          inputVal = _cascaderContext$valu2.inputVal,
          setInputVal = _cascaderContext$valu2.setInputVal;
        return vue.createVNode(SelectInput, vue.mergeProps({
          "class": COMPONENT_NAME.value,
          "value": displayValue.value,
          "inputValue": visible ? inputVal : "",
          "popupVisible": visible,
          "keys": props2.keys,
          "allowInput": isFilterable.value,
          "min-collapsed-num": props2.minCollapsedNum,
          "collapsed-items": props2.collapsedItems,
          "readonly": props2.readonly,
          "disabled": props2.disabled,
          "clearable": props2.clearable,
          "placeholder": inputPlaceholder.value,
          "multiple": props2.multiple,
          "loading": props2.loading,
          "status": props2.status,
          "tips": props2.tips,
          "suffixIcon": function suffixIcon() {
            return renderSuffixIcon();
          },
          "popupProps": _objectSpread$1B(_objectSpread$1B({}, props2.popupProps), {}, {
            overlayInnerStyle: panels.value.length && !props2.loading ? {
              width: "auto"
            } : "",
            overlayClassName: [overlayClassName.value, (_props2$popupProps = props2.popupProps) === null || _props2$popupProps === void 0 ? void 0 : _props2$popupProps.overlayClassName]
          }),
          "inputProps": _objectSpread$1B({
            size: props2.size
          }, props2.inputProps),
          "tagInputProps": _objectSpread$1B({
            size: props2.size
          }, props2.tagInputProps),
          "tagProps": _objectSpread$1B({}, props2.tagProps),
          "onInputChange": function onInputChange(value, ctx) {
            var _props2$selectInputPr, _props2$selectInputPr2;
            if (!isFilterable.value) return;
            setInputVal("".concat(value));
            props2 === null || props2 === void 0 ? void 0 : (_props2$selectInputPr = props2.selectInputProps) === null || _props2$selectInputPr === void 0 ? void 0 : (_props2$selectInputPr2 = _props2$selectInputPr.onInputChange) === null || _props2$selectInputPr2 === void 0 ? void 0 : _props2$selectInputPr2.call(_props2$selectInputPr, value, ctx);
          },
          "onTagChange": function onTagChange(val, ctx) {
            var _props2$selectInputPr3, _props2$selectInputPr4;
            if (ctx.trigger === "enter") return;
            handleRemoveTagEffect(cascaderContext.value, ctx.index, props2.onRemove);
            props2 === null || props2 === void 0 ? void 0 : (_props2$selectInputPr3 = props2.selectInputProps) === null || _props2$selectInputPr3 === void 0 ? void 0 : (_props2$selectInputPr4 = _props2$selectInputPr3.onTagChange) === null || _props2$selectInputPr4 === void 0 ? void 0 : _props2$selectInputPr4.call(_props2$selectInputPr3, val, ctx);
          },
          "onPopupVisibleChange": function onPopupVisibleChange(val, context) {
            var _props2$selectInputPr5, _props2$selectInputPr6;
            if (disabled.value) return;
            setVisible(val, context);
            props2 === null || props2 === void 0 ? void 0 : (_props2$selectInputPr5 = props2.selectInputProps) === null || _props2$selectInputPr5 === void 0 ? void 0 : (_props2$selectInputPr6 = _props2$selectInputPr5.onPopupVisibleChange) === null || _props2$selectInputPr6 === void 0 ? void 0 : _props2$selectInputPr6.call(_props2$selectInputPr5, val, context);
          },
          "onBlur": function onBlur(val, context) {
            var _props2$onBlur, _props2$selectInputPr7, _props2$selectInputPr8;
            (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, {
              value: cascaderContext.value.value,
              e: context.e
            });
            props2 === null || props2 === void 0 ? void 0 : (_props2$selectInputPr7 = props2.selectInputProps) === null || _props2$selectInputPr7 === void 0 ? void 0 : (_props2$selectInputPr8 = _props2$selectInputPr7.onBlur) === null || _props2$selectInputPr8 === void 0 ? void 0 : _props2$selectInputPr8.call(_props2$selectInputPr7, val, context);
          },
          "onFocus": function onFocus(val, context) {
            var _props2$onFocus, _props2$selectInputPr9, _props2$selectInputPr10;
            (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, {
              value: cascaderContext.value.value,
              e: context.e
            });
            props2 === null || props2 === void 0 ? void 0 : (_props2$selectInputPr9 = props2.selectInputProps) === null || _props2$selectInputPr9 === void 0 ? void 0 : (_props2$selectInputPr10 = _props2$selectInputPr9.onFocus) === null || _props2$selectInputPr10 === void 0 ? void 0 : _props2$selectInputPr10.call(_props2$selectInputPr9, val, context);
          },
          "onClear": function onClear(context) {
            var _props2$selectInputPr11, _props2$selectInputPr12;
            closeIconClickEffect(cascaderContext.value);
            props2 === null || props2 === void 0 ? void 0 : (_props2$selectInputPr11 = props2.selectInputProps) === null || _props2$selectInputPr11 === void 0 ? void 0 : (_props2$selectInputPr12 = _props2$selectInputPr11.onClear) === null || _props2$selectInputPr12 === void 0 ? void 0 : _props2$selectInputPr12.call(_props2$selectInputPr11, context);
          }
        }, omit_1(props2.selectInputProps, ["onTagChange", "onInputChange", "onPopupVisibleChange", "onBlur", "onFocus", "onClear"])), {
          panel: function panel() {
            return vue.createVNode(Panel, {
              "empty": props2.empty,
              "visible": visible,
              "trigger": props2.trigger,
              "loading": props2.loading,
              "loadingText": props2.loadingText,
              "cascaderContext": cascaderContext.value
            }, {
              empty: slots.empty,
              loadingText: slots.loadingText
            });
          },
          collapsedItems: slots.collapsedItems
        });
      };
    }
  });

  function ownKeys$1B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1B(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _CascaderPanel = vue.defineComponent({
    name: "TCascaderPanel",
    props: _objectSpread$1A({}, props$E),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var _useCascaderContext = useCascaderContext(props2),
        cascaderContext = _useCascaderContext.cascaderContext;
      return function () {
        return vue.createVNode(Panel, {
          "trigger": props2.trigger,
          "cascaderContext": cascaderContext.value,
          "empty": props2.empty
        }, {
          empty: slots.empty
        });
      };
    }
  });

  var Cascader = withInstall(_Cascader);
  var CascaderPanel = withInstall(_CascaderPanel);

  var dayjs_min = {exports: {}};

  (function (module, exports) {
    !function (t, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      var t = 1e3,
        e = 6e4,
        n = 36e5,
        r = "millisecond",
        i = "second",
        s = "minute",
        u = "hour",
        a = "day",
        o = "week",
        f = "month",
        h = "quarter",
        c = "year",
        d = "date",
        l = "Invalid Date",
        $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,
        y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
        M = {
          name: "en",
          weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
          months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
          ordinal: function ordinal(t) {
            var e = ["th", "st", "nd", "rd"],
              n = t % 100;
            return "[" + t + (e[(n - 20) % 10] || e[n] || e[0]) + "]";
          }
        },
        m = function m(t, e, n) {
          var r = String(t);
          return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
        },
        v = {
          s: m,
          z: function z(t) {
            var e = -t.utcOffset(),
              n = Math.abs(e),
              r = Math.floor(n / 60),
              i = n % 60;
            return (e <= 0 ? "+" : "-") + m(r, 2, "0") + ":" + m(i, 2, "0");
          },
          m: function t(e, n) {
            if (e.date() < n.date()) return -t(n, e);
            var r = 12 * (n.year() - e.year()) + (n.month() - e.month()),
              i = e.clone().add(r, f),
              s = n - i < 0,
              u = e.clone().add(r + (s ? -1 : 1), f);
            return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
          },
          a: function a(t) {
            return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
          },
          p: function p(t) {
            return {
              M: f,
              y: c,
              w: o,
              d: a,
              D: d,
              h: u,
              m: s,
              s: i,
              ms: r,
              Q: h
            }[t] || String(t || "").toLowerCase().replace(/s$/, "");
          },
          u: function u(t) {
            return void 0 === t;
          }
        },
        g = "en",
        D = {};
      D[g] = M;
      var p = function p(t) {
          return t instanceof _;
        },
        S = function t(e, n, r) {
          var i;
          if (!e) return g;
          if ("string" == typeof e) {
            var s = e.toLowerCase();
            D[s] && (i = s), n && (D[s] = n, i = s);
            var u = e.split("-");
            if (!i && u.length > 1) return t(u[0]);
          } else {
            var a = e.name;
            D[a] = e, i = a;
          }
          return !r && i && (g = i), i || !r && g;
        },
        w = function w(t, e) {
          if (p(t)) return t.clone();
          var n = "object" == _typeof$2(e) ? e : {};
          return n.date = t, n.args = arguments, new _(n);
        },
        O = v;
      O.l = S, O.i = p, O.w = function (t, e) {
        return w(t, {
          locale: e.$L,
          utc: e.$u,
          x: e.$x,
          $offset: e.$offset
        });
      };
      var _ = function () {
          function M(t) {
            this.$L = S(t.locale, null, !0), this.parse(t);
          }
          var m = M.prototype;
          return m.parse = function (t) {
            this.$d = function (t) {
              var e = t.date,
                n = t.utc;
              if (null === e) return new Date(NaN);
              if (O.u(e)) return new Date();
              if (e instanceof Date) return new Date(e);
              if ("string" == typeof e && !/Z$/i.test(e)) {
                var r = e.match($);
                if (r) {
                  var i = r[2] - 1 || 0,
                    s = (r[7] || "0").substring(0, 3);
                  return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
                }
              }
              return new Date(e);
            }(t), this.$x = t.x || {}, this.init();
          }, m.init = function () {
            var t = this.$d;
            this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
          }, m.$utils = function () {
            return O;
          }, m.isValid = function () {
            return !(this.$d.toString() === l);
          }, m.isSame = function (t, e) {
            var n = w(t);
            return this.startOf(e) <= n && n <= this.endOf(e);
          }, m.isAfter = function (t, e) {
            return w(t) < this.startOf(e);
          }, m.isBefore = function (t, e) {
            return this.endOf(e) < w(t);
          }, m.$g = function (t, e, n) {
            return O.u(t) ? this[e] : this.set(n, t);
          }, m.unix = function () {
            return Math.floor(this.valueOf() / 1e3);
          }, m.valueOf = function () {
            return this.$d.getTime();
          }, m.startOf = function (t, e) {
            var n = this,
              r = !!O.u(e) || e,
              h = O.p(t),
              l = function l(t, e) {
                var i = O.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
                return r ? i : i.endOf(a);
              },
              $ = function $(t, e) {
                return O.w(n.toDate()[t].apply(n.toDate("s"), (r ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e)), n);
              },
              y = this.$W,
              M = this.$M,
              m = this.$D,
              v = "set" + (this.$u ? "UTC" : "");
            switch (h) {
              case c:
                return r ? l(1, 0) : l(31, 11);
              case f:
                return r ? l(1, M) : l(0, M + 1);
              case o:
                var g = this.$locale().weekStart || 0,
                  D = (y < g ? y + 7 : y) - g;
                return l(r ? m - D : m + (6 - D), M);
              case a:
              case d:
                return $(v + "Hours", 0);
              case u:
                return $(v + "Minutes", 1);
              case s:
                return $(v + "Seconds", 2);
              case i:
                return $(v + "Milliseconds", 3);
              default:
                return this.clone();
            }
          }, m.endOf = function (t) {
            return this.startOf(t, !1);
          }, m.$set = function (t, e) {
            var n,
              o = O.p(t),
              h = "set" + (this.$u ? "UTC" : ""),
              l = (n = {}, n[a] = h + "Date", n[d] = h + "Date", n[f] = h + "Month", n[c] = h + "FullYear", n[u] = h + "Hours", n[s] = h + "Minutes", n[i] = h + "Seconds", n[r] = h + "Milliseconds", n)[o],
              $ = o === a ? this.$D + (e - this.$W) : e;
            if (o === f || o === c) {
              var y = this.clone().set(d, 1);
              y.$d[l]($), y.init(), this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d;
            } else l && this.$d[l]($);
            return this.init(), this;
          }, m.set = function (t, e) {
            return this.clone().$set(t, e);
          }, m.get = function (t) {
            return this[O.p(t)]();
          }, m.add = function (r, h) {
            var d,
              l = this;
            r = Number(r);
            var $ = O.p(h),
              y = function y(t) {
                var e = w(l);
                return O.w(e.date(e.date() + Math.round(t * r)), l);
              };
            if ($ === f) return this.set(f, this.$M + r);
            if ($ === c) return this.set(c, this.$y + r);
            if ($ === a) return y(1);
            if ($ === o) return y(7);
            var M = (d = {}, d[s] = e, d[u] = n, d[i] = t, d)[$] || 1,
              m = this.$d.getTime() + r * M;
            return O.w(m, this);
          }, m.subtract = function (t, e) {
            return this.add(-1 * t, e);
          }, m.format = function (t) {
            var e = this,
              n = this.$locale();
            if (!this.isValid()) return n.invalidDate || l;
            var r = t || "YYYY-MM-DDTHH:mm:ssZ",
              i = O.z(this),
              s = this.$H,
              u = this.$m,
              a = this.$M,
              o = n.weekdays,
              f = n.months,
              h = function h(t, n, i, s) {
                return t && (t[n] || t(e, r)) || i[n].slice(0, s);
              },
              c = function c(t) {
                return O.s(s % 12 || 12, t, "0");
              },
              d = n.meridiem || function (t, e, n) {
                var r = t < 12 ? "AM" : "PM";
                return n ? r.toLowerCase() : r;
              },
              $ = {
                YY: String(this.$y).slice(-2),
                YYYY: this.$y,
                M: a + 1,
                MM: O.s(a + 1, 2, "0"),
                MMM: h(n.monthsShort, a, f, 3),
                MMMM: h(f, a),
                D: this.$D,
                DD: O.s(this.$D, 2, "0"),
                d: String(this.$W),
                dd: h(n.weekdaysMin, this.$W, o, 2),
                ddd: h(n.weekdaysShort, this.$W, o, 3),
                dddd: o[this.$W],
                H: String(s),
                HH: O.s(s, 2, "0"),
                h: c(1),
                hh: c(2),
                a: d(s, u, !0),
                A: d(s, u, !1),
                m: String(u),
                mm: O.s(u, 2, "0"),
                s: String(this.$s),
                ss: O.s(this.$s, 2, "0"),
                SSS: O.s(this.$ms, 3, "0"),
                Z: i
              };
            return r.replace(y, function (t, e) {
              return e || $[t] || i.replace(":", "");
            });
          }, m.utcOffset = function () {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
          }, m.diff = function (r, d, l) {
            var $,
              y = O.p(d),
              M = w(r),
              m = (M.utcOffset() - this.utcOffset()) * e,
              v = this - M,
              g = O.m(this, M);
            return g = ($ = {}, $[c] = g / 12, $[f] = g, $[h] = g / 3, $[o] = (v - m) / 6048e5, $[a] = (v - m) / 864e5, $[u] = v / n, $[s] = v / e, $[i] = v / t, $)[y] || v, l ? g : O.a(g);
          }, m.daysInMonth = function () {
            return this.endOf(f).$D;
          }, m.$locale = function () {
            return D[this.$L];
          }, m.locale = function (t, e) {
            if (!t) return this.$L;
            var n = this.clone(),
              r = S(t, e, !0);
            return r && (n.$L = r), n;
          }, m.clone = function () {
            return O.w(this.$d, this);
          }, m.toDate = function () {
            return new Date(this.valueOf());
          }, m.toJSON = function () {
            return this.isValid() ? this.toISOString() : null;
          }, m.toISOString = function () {
            return this.$d.toISOString();
          }, m.toString = function () {
            return this.$d.toUTCString();
          }, M;
        }(),
        T = _.prototype;
      return w.prototype = T, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function (t) {
        T[t[1]] = function (e) {
          return this.$g(e, t[0], t[1]);
        };
      }), w.extend = function (t, e) {
        return t.$i || (t(e, _, w), t.$i = !0), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function (t) {
        return w(1e3 * t);
      }, w.en = D[g], w.Ls = D, w.p = {}, w;
    });
  })(dayjs_min);
  var dayjs = dayjs_min.exports;

  function _objectDestructuringEmpty(obj) {
    if (obj == null) throw new TypeError("Cannot destructure " + obj);
  }

  function _extends$1() {
    _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$1.apply(this, arguments);
  }

  var isBetween = {exports: {}};

  (function (module, exports) {
    !function (e, i) {
      module.exports = i() ;
    }(commonjsGlobal, function () {

      return function (e, i, t) {
        i.prototype.isBetween = function (e, i, s, f) {
          var n = t(e),
            o = t(i),
            r = "(" === (f = f || "()")[0],
            u = ")" === f[1];
          return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
        };
      };
    });
  })(isBetween);
  var dayJsIsBetween = isBetween.exports;

  var weekYear$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t) {
        t.prototype.weekYear = function () {
          var e = this.month(),
            t = this.week(),
            n = this.year();
          return 1 === t && 11 === e ? n + 1 : 0 === e && t >= 52 ? n - 1 : n;
        };
      };
    });
  })(weekYear$1);
  var weekYear = weekYear$1.exports;

  var localeData$1 = {exports: {}};

  (function (module, exports) {
    !function (n, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      return function (n, e, t) {
        var r = e.prototype,
          o = function o(n) {
            return n && (n.indexOf ? n : n.s);
          },
          u = function u(n, e, t, r, _u) {
            var i = n.name ? n : n.$locale(),
              a = o(i[e]),
              s = o(i[t]),
              f = a || s.map(function (n) {
                return n.slice(0, r);
              });
            if (!_u) return f;
            var d = i.weekStart;
            return f.map(function (n, e) {
              return f[(e + (d || 0)) % 7];
            });
          },
          i = function i() {
            return t.Ls[t.locale()];
          },
          a = function a(n, e) {
            return n.formats[e] || function (n) {
              return n.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (n, e, t) {
                return e || t.slice(1);
              });
            }(n.formats[e.toUpperCase()]);
          },
          s = function s() {
            var n = this;
            return {
              months: function months(e) {
                return e ? e.format("MMMM") : u(n, "months");
              },
              monthsShort: function monthsShort(e) {
                return e ? e.format("MMM") : u(n, "monthsShort", "months", 3);
              },
              firstDayOfWeek: function firstDayOfWeek() {
                return n.$locale().weekStart || 0;
              },
              weekdays: function weekdays(e) {
                return e ? e.format("dddd") : u(n, "weekdays");
              },
              weekdaysMin: function weekdaysMin(e) {
                return e ? e.format("dd") : u(n, "weekdaysMin", "weekdays", 2);
              },
              weekdaysShort: function weekdaysShort(e) {
                return e ? e.format("ddd") : u(n, "weekdaysShort", "weekdays", 3);
              },
              longDateFormat: function longDateFormat(e) {
                return a(n.$locale(), e);
              },
              meridiem: this.$locale().meridiem,
              ordinal: this.$locale().ordinal
            };
          };
        r.localeData = function () {
          return s.bind(this)();
        }, t.localeData = function () {
          var n = i();
          return {
            firstDayOfWeek: function firstDayOfWeek() {
              return n.weekStart || 0;
            },
            weekdays: function weekdays() {
              return t.weekdays();
            },
            weekdaysShort: function weekdaysShort() {
              return t.weekdaysShort();
            },
            weekdaysMin: function weekdaysMin() {
              return t.weekdaysMin();
            },
            months: function months() {
              return t.months();
            },
            monthsShort: function monthsShort() {
              return t.monthsShort();
            },
            longDateFormat: function longDateFormat(e) {
              return a(n, e);
            },
            meridiem: n.meridiem,
            ordinal: n.ordinal
          };
        }, t.months = function () {
          return u(i(), "months");
        }, t.monthsShort = function () {
          return u(i(), "monthsShort", "months", 3);
        }, t.weekdays = function (n) {
          return u(i(), "weekdays", null, null, n);
        }, t.weekdaysShort = function (n) {
          return u(i(), "weekdaysShort", "weekdays", 3, n);
        }, t.weekdaysMin = function (n) {
          return u(i(), "weekdaysMin", "weekdays", 2, n);
        };
      };
    });
  })(localeData$1);
  var localeData = localeData$1.exports;

  var weekOfYear$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = "week",
        t = "year";
      return function (i, n, r) {
        var f = n.prototype;
        f.week = function (i) {
          if (void 0 === i && (i = null), null !== i) return this.add(7 * (i - this.week()), "day");
          var n = this.$locale().yearStart || 1;
          if (11 === this.month() && this.date() > 25) {
            var f = r(this).startOf(t).add(1, t).date(n),
              s = r(this).endOf(e);
            if (f.isBefore(s)) return 1;
          }
          var a = r(this).startOf(t).date(n).startOf(e).subtract(1, "millisecond"),
            o = this.diff(a, e, !0);
          return o < 0 ? r(this).startOf("week").week() : Math.ceil(o);
        }, f.weeks = function (e) {
          return void 0 === e && (e = null), this.week(e);
        };
      };
    });
  })(weekOfYear$1);
  var weekOfYear = weekOfYear$1.exports;

  var quarterOfYear$1 = {exports: {}};

  (function (module, exports) {
    !function (t, n) {
      module.exports = n() ;
    }(commonjsGlobal, function () {

      var t = "month",
        n = "quarter";
      return function (e, i) {
        var r = i.prototype;
        r.quarter = function (t) {
          return this.$utils().u(t) ? Math.ceil((this.month() + 1) / 3) : this.month(this.month() % 3 + 3 * (t - 1));
        };
        var s = r.add;
        r.add = function (e, i) {
          return e = Number(e), this.$utils().p(i) === n ? this.add(3 * e, t) : s.bind(this)(e, i);
        };
        var u = r.startOf;
        r.startOf = function (e, i) {
          var r = this.$utils(),
            s = !!r.u(i) || i;
          if (r.p(e) === n) {
            var o = this.quarter() - 1;
            return s ? this.month(3 * o).startOf(t).startOf("day") : this.month(3 * o + 2).endOf(t).endOf("day");
          }
          return u.bind(this)(e, i);
        };
      };
    });
  })(quarterOfYear$1);
  var quarterOfYear = quarterOfYear$1.exports;

  var isoWeek$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = "day";
      return function (t, i, s) {
        var a = function a(t) {
            return t.add(4 - t.isoWeekday(), e);
          },
          d = i.prototype;
        d.isoWeekYear = function () {
          return a(this).year();
        }, d.isoWeek = function (t) {
          if (!this.$utils().u(t)) return this.add(7 * (t - this.isoWeek()), e);
          var i,
            d,
            n,
            o,
            r = a(this),
            u = (i = this.isoWeekYear(), d = this.$u, n = (d ? s.utc : s)().year(i).startOf("year"), o = 4 - n.isoWeekday(), n.isoWeekday() > 4 && (o += 7), n.add(o, e));
          return r.diff(u, "week") + 1;
        }, d.isoWeekday = function (e) {
          return this.$utils().u(e) ? this.day() || 7 : this.day(this.day() % 7 ? e : e - 7);
        };
        var n = d.startOf;
        d.startOf = function (e, t) {
          var i = this.$utils(),
            s = !!i.u(t) || t;
          return "isoweek" === i.p(e) ? s ? this.date(this.date() - (this.isoWeekday() - 1)).startOf("day") : this.date(this.date() - 1 - (this.isoWeekday() - 1) + 7).endOf("day") : n.bind(this)(e, t);
        };
      };
    });
  })(isoWeek$1);
  var isoWeek = isoWeek$1.exports;

  var advancedFormat$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t) {
        var r = t.prototype,
          n = r.format;
        r.format = function (e) {
          var t = this,
            r = this.$locale();
          if (!this.isValid()) return n.bind(this)(e);
          var s = this.$utils(),
            a = (e || "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, function (e) {
              switch (e) {
                case "Q":
                  return Math.ceil((t.$M + 1) / 3);
                case "Do":
                  return r.ordinal(t.$D);
                case "gggg":
                  return t.weekYear();
                case "GGGG":
                  return t.isoWeekYear();
                case "wo":
                  return r.ordinal(t.week(), "W");
                case "w":
                case "ww":
                  return s.s(t.week(), "w" === e ? 1 : 2, "0");
                case "W":
                case "WW":
                  return s.s(t.isoWeek(), "W" === e ? 1 : 2, "0");
                case "k":
                case "kk":
                  return s.s(String(0 === t.$H ? 24 : t.$H), "k" === e ? 1 : 2, "0");
                case "X":
                  return Math.floor(t.$d.getTime() / 1e3);
                case "x":
                  return t.$d.getTime();
                case "z":
                  return "[" + t.offsetName() + "]";
                case "zzz":
                  return "[" + t.offsetName("long") + "]";
                default:
                  return e;
              }
            });
          return n.bind(this)(a);
        };
      };
    });
  })(advancedFormat$1);
  var advancedFormat = advancedFormat$1.exports;

  var customParseFormat$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = {
          LTS: "h:mm:ss A",
          LT: "h:mm A",
          L: "MM/DD/YYYY",
          LL: "MMMM D, YYYY",
          LLL: "MMMM D, YYYY h:mm A",
          LLLL: "dddd, MMMM D, YYYY h:mm A"
        },
        t = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,
        n = /\d\d/,
        r = /\d\d?/,
        i = /\d*[^-_:/,()\s\d]+/,
        o = {},
        s = function s(e) {
          return (e = +e) + (e > 68 ? 1900 : 2e3);
        };
      var a = function a(e) {
          return function (t) {
            this[e] = +t;
          };
        },
        f = [/[+-]\d\d:?(\d\d)?|Z/, function (e) {
          (this.zone || (this.zone = {})).offset = function (e) {
            if (!e) return 0;
            if ("Z" === e) return 0;
            var t = e.match(/([+-]|\d\d)/g),
              n = 60 * t[1] + (+t[2] || 0);
            return 0 === n ? 0 : "+" === t[0] ? -n : n;
          }(e);
        }],
        h = function h(e) {
          var t = o[e];
          return t && (t.indexOf ? t : t.s.concat(t.f));
        },
        u = function u(e, t) {
          var n,
            r = o.meridiem;
          if (r) {
            for (var i = 1; i <= 24; i += 1) {
              if (e.indexOf(r(i, 0, t)) > -1) {
                n = i > 12;
                break;
              }
            }
          } else n = e === (t ? "pm" : "PM");
          return n;
        },
        d = {
          A: [i, function (e) {
            this.afternoon = u(e, !1);
          }],
          a: [i, function (e) {
            this.afternoon = u(e, !0);
          }],
          S: [/\d/, function (e) {
            this.milliseconds = 100 * +e;
          }],
          SS: [n, function (e) {
            this.milliseconds = 10 * +e;
          }],
          SSS: [/\d{3}/, function (e) {
            this.milliseconds = +e;
          }],
          s: [r, a("seconds")],
          ss: [r, a("seconds")],
          m: [r, a("minutes")],
          mm: [r, a("minutes")],
          H: [r, a("hours")],
          h: [r, a("hours")],
          HH: [r, a("hours")],
          hh: [r, a("hours")],
          D: [r, a("day")],
          DD: [n, a("day")],
          Do: [i, function (e) {
            var t = o.ordinal,
              n = e.match(/\d+/);
            if (this.day = n[0], t) for (var r = 1; r <= 31; r += 1) {
              t(r).replace(/\[|\]/g, "") === e && (this.day = r);
            }
          }],
          M: [r, a("month")],
          MM: [n, a("month")],
          MMM: [i, function (e) {
            var t = h("months"),
              n = (h("monthsShort") || t.map(function (e) {
                return e.slice(0, 3);
              })).indexOf(e) + 1;
            if (n < 1) throw new Error();
            this.month = n % 12 || n;
          }],
          MMMM: [i, function (e) {
            var t = h("months").indexOf(e) + 1;
            if (t < 1) throw new Error();
            this.month = t % 12 || t;
          }],
          Y: [/[+-]?\d+/, a("year")],
          YY: [n, function (e) {
            this.year = s(e);
          }],
          YYYY: [/\d{4}/, a("year")],
          Z: f,
          ZZ: f
        };
      function c(n) {
        var r, i;
        r = n, i = o && o.formats;
        for (var s = (n = r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (t, n, r) {
            var o = r && r.toUpperCase();
            return n || i[r] || e[r] || i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (e, t, n) {
              return t || n.slice(1);
            });
          })).match(t), a = s.length, f = 0; f < a; f += 1) {
          var h = s[f],
            u = d[h],
            c = u && u[0],
            l = u && u[1];
          s[f] = l ? {
            regex: c,
            parser: l
          } : h.replace(/^\[|\]$/g, "");
        }
        return function (e) {
          for (var t = {}, n = 0, r = 0; n < a; n += 1) {
            var i = s[n];
            if ("string" == typeof i) r += i.length;else {
              var o = i.regex,
                f = i.parser,
                h = e.slice(r),
                u = o.exec(h)[0];
              f.call(t, u), e = e.replace(u, "");
            }
          }
          return function (e) {
            var t = e.afternoon;
            if (void 0 !== t) {
              var n = e.hours;
              t ? n < 12 && (e.hours += 12) : 12 === n && (e.hours = 0), delete e.afternoon;
            }
          }(t), t;
        };
      }
      return function (e, t, n) {
        n.p.customParseFormat = !0, e && e.parseTwoDigitYear && (s = e.parseTwoDigitYear);
        var r = t.prototype,
          i = r.parse;
        r.parse = function (e) {
          var t = e.date,
            r = e.utc,
            s = e.args;
          this.$u = r;
          var a = s[1];
          if ("string" == typeof a) {
            var f = !0 === s[2],
              h = !0 === s[3],
              u = f || h,
              d = s[2];
            h && (d = s[2]), o = this.$locale(), !f && d && (o = n.Ls[d]), this.$d = function (e, t, n) {
              try {
                if (["x", "X"].indexOf(t) > -1) return new Date(("X" === t ? 1e3 : 1) * e);
                var r = c(t)(e),
                  i = r.year,
                  o = r.month,
                  s = r.day,
                  a = r.hours,
                  f = r.minutes,
                  h = r.seconds,
                  u = r.milliseconds,
                  d = r.zone,
                  l = new Date(),
                  m = s || (i || o ? 1 : l.getDate()),
                  M = i || l.getFullYear(),
                  Y = 0;
                i && !o || (Y = o > 0 ? o - 1 : l.getMonth());
                var p = a || 0,
                  v = f || 0,
                  D = h || 0,
                  g = u || 0;
                return d ? new Date(Date.UTC(M, Y, m, p, v, D, g + 60 * d.offset * 1e3)) : n ? new Date(Date.UTC(M, Y, m, p, v, D, g)) : new Date(M, Y, m, p, v, D, g);
              } catch (e) {
                return new Date("");
              }
            }(t, a, r), this.init(), d && !0 !== d && (this.$L = this.locale(d).$L), u && t != this.format(a) && (this.$d = new Date("")), o = {};
          } else if (a instanceof Array) for (var l = a.length, m = 1; m <= l; m += 1) {
            s[1] = a[m - 1];
            var M = n.apply(this, s);
            if (M.isValid()) {
              this.$d = M.$d, this.$L = M.$L, this.init();
              break;
            }
            m === l && (this.$d = new Date(""));
          } else i.call(this, e);
        };
      };
    });
  })(customParseFormat$1);
  var customParseFormat = customParseFormat$1.exports;

  var toNumber$1 = toNumber_1;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */
  function toFinite$2(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber$1(value);
    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }
  var toFinite_1 = toFinite$2;

  var toFinite$1 = toFinite_1;

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  function toInteger$2(value) {
    var result = toFinite$1(value),
      remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }
  var toInteger_1 = toInteger$2;

  var baseSlice = _baseSlice,
    isIterateeCall$2 = _isIterateeCall,
    toInteger$1 = toInteger_1;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil$2 = Math.ceil,
    nativeMax$1 = Math.max;

  /**
   * Creates an array of elements split into groups the length of `size`.
   * If `array` can't be split evenly, the final chunk will be the remaining
   * elements.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to process.
   * @param {number} [size=1] The length of each chunk
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the new array of chunks.
   * @example
   *
   * _.chunk(['a', 'b', 'c', 'd'], 2);
   * // => [['a', 'b'], ['c', 'd']]
   *
   * _.chunk(['a', 'b', 'c', 'd'], 3);
   * // => [['a', 'b', 'c'], ['d']]
   */
  function chunk(array, size, guard) {
    if (guard ? isIterateeCall$2(array, size, guard) : size === undefined) {
      size = 1;
    } else {
      size = nativeMax$1(toInteger$1(size), 0);
    }
    var length = array == null ? 0 : array.length;
    if (!length || size < 1) {
      return [];
    }
    var index = 0,
      resIndex = 0,
      result = Array(nativeCeil$2(length / size));
    while (index < length) {
      result[resIndex++] = baseSlice(array, index, index += size);
    }
    return result;
  }
  var chunk_1 = chunk;

  function ownKeys$1A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1A(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs.extend(isoWeek);
  dayjs.extend(weekYear);
  dayjs.extend(localeData);
  dayjs.extend(weekOfYear);
  dayjs.extend(quarterOfYear);
  dayjs.extend(advancedFormat);
  dayjs.extend(customParseFormat);
  dayjs.extend(dayJsIsBetween);
  function firstUpperCase(str) {
    if (!str) return str;
    return str[0].toUpperCase().concat(str.substring(1, str.length));
  }
  function getFirstDayOfMonth(_ref) {
    var year = _ref.year,
      month = _ref.month;
    return new Date(year, month, 1);
  }
  function getDaysInMonth(_ref2) {
    var year = _ref2.year,
      month = _ref2.month;
    return new Date(year, month + 1, 0).getDate();
  }
  function getLastDayOfMonth(_ref3) {
    var year = _ref3.year,
      month = _ref3.month;
    return new Date(year, month, getDaysInMonth({
      year: year,
      month: month
    }));
  }
  function isSameYear(date1, date2) {
    return date1.getFullYear() === date2.getFullYear();
  }
  function isSameQuarter(date1, date2) {
    return isSameYear(date1, date2) && dayjs(date1).quarter() === dayjs(date2).quarter();
  }
  function isSameMonth(date1, date2) {
    return isSameYear(date1, date2) && date1.getMonth() === date2.getMonth();
  }
  function isSameWeek(date1, date2) {
    return isSameMonth(date1, date2) && dayjs(date1).week() === dayjs(date2).week();
  }
  function isSameDate(date1, date2) {
    return isSameMonth(date1, date2) && date1.getDate() === date2.getDate();
  }
  function compareAsc(date1, date2) {
    var d1 = date1.getTime();
    var d2 = date2.getTime();
    if (d1 < d2) return -1;
    if (d1 > d2) return 1;
    return 0;
  }
  function isSame(date1, date2) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "date";
    var func = {
      isSameYear: isSameYear,
      isSameQuarter: isSameQuarter,
      isSameMonth: isSameMonth,
      isSameWeek: isSameWeek,
      isSameDate: isSameDate
    };
    return func["isSame".concat(firstUpperCase(type))](date1, date2);
  }
  function outOfRanges(d, min, max) {
    return min && compareAsc(d, min) === -1 || max && compareAsc(d, max) === 1;
  }
  function getToday() {
    var now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
  }
  function subtractMonth(date, num) {
    return dayjs(date).subtract(num, "month").toDate();
  }
  function addMonth(date, num) {
    return dayjs(date).add(num, "month").toDate();
  }
  function getWeeks(_ref4, _ref5) {
    var year = _ref4.year,
      month = _ref4.month;
    var firstDayOfWeek = _ref5.firstDayOfWeek,
      _ref5$showWeekOfYear = _ref5.showWeekOfYear,
      showWeekOfYear = _ref5$showWeekOfYear === void 0 ? false : _ref5$showWeekOfYear,
      _ref5$disableDate = _ref5.disableDate,
      disableDate = _ref5$disableDate === void 0 ? function () {
        return false;
      } : _ref5$disableDate,
      minDate = _ref5.minDate,
      maxDate = _ref5.maxDate;
    var prependDay = getFirstDayOfMonth({
      year: year,
      month: month
    });
    var appendDay = getLastDayOfMonth({
      year: year,
      month: month
    });
    var maxDays = getDaysInMonth({
      year: year,
      month: month
    });
    var daysArr = [];
    var i = 1;
    var today = getToday();
    for (i; i <= maxDays; i++) {
      var currentDay = new Date(year, month, i);
      daysArr.push({
        text: i,
        active: false,
        value: currentDay,
        disabled: typeof disableDate === "function" && disableDate(currentDay) || outOfRanges(currentDay, minDate, maxDate),
        now: isSame(today, currentDay),
        firstDayOfMonth: i === 1,
        lastDayOfMonth: i === maxDays,
        type: "current-month"
      });
    }
    if (prependDay.getDay() !== firstDayOfWeek) {
      prependDay.setDate(0);
      while (true) {
        daysArr.unshift({
          text: prependDay.getDate().toString(),
          active: false,
          value: new Date(prependDay),
          disabled: typeof disableDate === "function" && disableDate(prependDay) || outOfRanges(prependDay, minDate, maxDate),
          additional: true,
          type: "prev-month"
        });
        prependDay.setDate(prependDay.getDate() - 1);
        if (prependDay.getDay() === Math.abs(firstDayOfWeek + 6) % 7) break;
      }
    }
    var LEN = 42;
    while (daysArr.length < LEN) {
      appendDay.setDate(appendDay.getDate() + 1);
      daysArr.push({
        text: appendDay.getDate(),
        active: false,
        value: new Date(appendDay),
        disabled: typeof disableDate === "function" && disableDate(appendDay) || outOfRanges(appendDay, minDate, maxDate),
        additional: true,
        type: "next-month"
      });
    }
    var dataList = chunk_1(daysArr, 7);
    if (showWeekOfYear) {
      dataList.forEach(function (d) {
        d.unshift(_objectSpread$1z(_objectSpread$1z({}, d[0]), {}, {
          active: false,
          value: d[0].value,
          text: dayjs(d[0].value).week()
        }));
      });
    }
    return dataList;
  }
  function getQuarters(year, _ref6) {
    var _ref6$disableDate = _ref6.disableDate,
      disableDate = _ref6$disableDate === void 0 ? function () {
        return false;
      } : _ref6$disableDate,
      minDate = _ref6.minDate,
      maxDate = _ref6.maxDate,
      quarterLocal = _ref6.quarterLocal;
    var quarterArr = [];
    var today = getToday();
    for (var i = 1; i <= 4; i++) {
      var date = dayjs(new Date(year, 0)).quarter(i).toDate();
      quarterArr.push({
        value: date,
        now: isSame(date, today, "quarter"),
        disabled: typeof disableDate === "function" && disableDate(date) || outOfRanges(date, minDate, maxDate),
        active: false,
        text: quarterLocal[i - 1]
      });
    }
    return chunk_1(quarterArr, 4);
  }
  function getYears(year, _ref7) {
    var _ref7$disableDate = _ref7.disableDate,
      disableDate = _ref7$disableDate === void 0 ? function () {
        return false;
      } : _ref7$disableDate,
      minDate = _ref7.minDate,
      maxDate = _ref7.maxDate;
    var startYear = parseInt((year / 10).toString(), 10) * 10;
    var endYear = startYear + 9;
    var yearArr = [];
    var today = getToday();
    for (var i = startYear; i <= endYear; i++) {
      var date = new Date(i, 1);
      yearArr.push({
        value: date,
        now: isSame(date, today, "year"),
        disabled: typeof disableDate === "function" && disableDate(date) || outOfRanges(date, minDate, maxDate),
        active: false,
        text: "".concat(date.getFullYear())
      });
    }
    return chunk_1(yearArr, 3);
  }
  function getMonths(year, params) {
    var _params$disableDate = params.disableDate,
      disableDate = _params$disableDate === void 0 ? function () {
        return false;
      } : _params$disableDate,
      minDate = params.minDate,
      maxDate = params.maxDate,
      monthLocal = params.monthLocal;
    var MonthArr = [];
    var today = getToday();
    for (var i = 0; i <= 11; i++) {
      var date = new Date(year, i);
      MonthArr.push({
        value: date,
        now: isSame(date, today, "month"),
        disabled: typeof disableDate === "function" && disableDate(date) || outOfRanges(date, minDate, maxDate),
        active: false,
        text: monthLocal[date.getMonth()]
      });
    }
    return chunk_1(MonthArr, 3);
  }
  function flagActive(data, _ref8) {
    var args = _extends$1({}, (_objectDestructuringEmpty(_ref8), _ref8));
    var start = args.start,
      end = args.end,
      hoverStart = args.hoverStart,
      hoverEnd = args.hoverEnd,
      _args$type = args.type,
      type = _args$type === void 0 ? "date" : _args$type,
      _args$isRange = args.isRange,
      isRange = _args$isRange === void 0 ? false : _args$isRange;
    if (type === "week") return data;
    if (!isRange) {
      return data.map(function (row) {
        return row.map(function (item) {
          var _item = item;
          _item.active = start && isSame(item.value, start, type) && !_item.additional;
          return _item;
        });
      });
    }
    return data.map(function (row) {
      return row.map(function (item) {
        var _item = item;
        var date = item.value;
        var isStart = start && isSame(start, date, type);
        var isHoverStart = hoverStart && isSame(hoverStart, date, type);
        var isEnd = end && isSame(end, date, type);
        var isHoverEnd = hoverEnd && isSame(hoverEnd, date, type);
        _item.active = (isStart || isEnd) && !_item.additional;
        if (start && end) {
          _item.highlight = dayjs(date).isBetween(start, end, type, "[]") && !_item.additional;
          _item.startOfRange = isStart;
          _item.endOfRange = isEnd;
        }
        if (hoverStart && hoverEnd) {
          _item.hoverHighlight = dayjs(date).isBetween(hoverStart, hoverEnd, type, "[]") && !_item.additional;
          _item.hoverStartOfRange = isHoverStart;
          _item.hoverEndOfRange = isHoverEnd;
        }
        return _item;
      });
    });
  }
  function extractTimeFormat() {
    var dateFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var res = dateFormat.match(/(a\s)?h{1,2}(:m{1,2})?(:s{1,2})?(\sa)?/i);
    if (!res) return null;
    return res[0];
  }
  function extractTimeObj() {
    var timeFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var matchedMeridiem = timeFormat.match(/[ap]m/i) || [""];
    var timeReg = /\d{1,2}(:\d{1,2})?(:\d{1,2})?(:\d{1,3})?/;
    var matchedTimeStr = timeFormat.match(timeReg) || ["0:0:0:0"];
    var _matchedTimeStr$0$spl = matchedTimeStr[0].split(":"),
      _matchedTimeStr$0$spl2 = _slicedToArray(_matchedTimeStr$0$spl, 4),
      _matchedTimeStr$0$spl3 = _matchedTimeStr$0$spl2[0],
      hours = _matchedTimeStr$0$spl3 === void 0 ? 0 : _matchedTimeStr$0$spl3,
      _matchedTimeStr$0$spl4 = _matchedTimeStr$0$spl2[1],
      minutes = _matchedTimeStr$0$spl4 === void 0 ? 0 : _matchedTimeStr$0$spl4,
      _matchedTimeStr$0$spl5 = _matchedTimeStr$0$spl2[2],
      seconds = _matchedTimeStr$0$spl5 === void 0 ? 0 : _matchedTimeStr$0$spl5,
      _matchedTimeStr$0$spl6 = _matchedTimeStr$0$spl2[3],
      milliseconds = _matchedTimeStr$0$spl6 === void 0 ? 0 : _matchedTimeStr$0$spl6;
    return {
      hours: +hours,
      minutes: +minutes,
      seconds: +seconds,
      milliseconds: +milliseconds,
      meridiem: matchedMeridiem[0]
    };
  }

  var TIME_FORMAT$1 = "HH:mm:ss";
  function parseToDayjs(value, format, timeOfDay) {
    if (value === "") return dayjs();
    var dateText = value;
    if (/[w|W]/g.test(format)) {
      if (typeof dateText !== "string") {
        dateText = dayjs(dateText).format(format);
      }
      var yearStr = dateText.split(/[-/.\s]/)[0];
      var weekStr = dateText.split(/[-/.\s]/)[1];
      var weekFormatStr = format.split(/[-/.\s]/)[1];
      var firstWeek = dayjs(yearStr, "YYYY").startOf("year");
      for (var i = 0; i <= 52; i += 1) {
        var nextWeek = firstWeek.add(i, "week");
        if (timeOfDay === "start") nextWeek = nextWeek.subtract(5, "day");
        if (nextWeek.format(weekFormatStr) === weekStr) {
          return nextWeek;
        }
      }
    }
    if (/Q/g.test(format)) {
      if (typeof dateText !== "string") {
        dateText = dayjs(dateText).format(format);
      }
      var _yearStr = dateText.split(/[-/.\s]/)[0];
      var quarterStr = dateText.split(/[-/.\s]/)[1];
      var quarterFormatStr = format.split(/[-/.\s]/)[1];
      var firstQuarter = dayjs(_yearStr, "YYYY").startOf("year");
      for (var _i = 0; _i < 4; _i += 1) {
        var nextQuarter = firstQuarter.add(_i, "quarter");
        if (nextQuarter.format(quarterFormatStr) === quarterStr) {
          return nextQuarter;
        }
      }
    }
    var result = dayjs(dateText, format).isValid() ? dayjs(dateText, format) : dayjs(dateText);
    if (!result.isValid()) {
      log.error("DatePicker", "Check whether the format\u3001value format is valid.\n value: '".concat(value, "', format: '").concat(format, "'"));
      return dayjs();
    }
    return result;
  }
  function formatRange(_ref) {
    var newDate = _ref.newDate,
      format = _ref.format,
      targetFormat = _ref.targetFormat,
      autoSwap = _ref.autoSwap;
    if (!newDate || !Array.isArray(newDate)) return [];
    var dayjsDateList = newDate.map(function (d) {
      return d && parseToDayjs(d, format);
    });
    if (autoSwap && dayjsDateList[0] && dayjsDateList[1] && dayjsDateList[0].toDate().getTime() > dayjsDateList[1].toDate().getTime()) {
      dayjsDateList = [dayjsDateList[1], dayjsDateList[0]];
    }
    if (dayjsDateList.some(function (r) {
      return r && !r.isValid();
    })) {
      log.error("DatePicker", "Check whether the value\u3001format\u3001valueType format is valid.\nformat: '".concat(format, "' value: '").concat(newDate, "' valueType: '").concat(targetFormat, "'"));
      return [];
    }
    if (targetFormat === "time-stamp") return dayjsDateList.map(function (da) {
      return da && da.toDate().getTime();
    });
    if (targetFormat === "Date") return dayjsDateList.map(function (da) {
      return da && da.toDate();
    });
    return dayjsDateList.map(function (da) {
      return da && da.format(targetFormat || format);
    });
  }
  function formatSingle(_ref2) {
    var newDate = _ref2.newDate,
      format = _ref2.format,
      targetFormat = _ref2.targetFormat;
    if (!newDate) return "";
    var dayJsDate = parseToDayjs(newDate, format);
    if (!dayJsDate.isValid()) {
      log.error("DatePicker", "Check whether the format\u3001value format is valid.\nformat: '".concat(format, "' value: '").concat(newDate, "'"));
      return "";
    }
    if (targetFormat === "time-stamp") return dayJsDate.toDate().getTime();
    if (targetFormat === "Date") return dayJsDate.toDate();
    return dayJsDate.format(targetFormat || format);
  }
  function isValidDate(value, format) {
    if (Array.isArray(value)) {
      return value.every(function (v) {
        return dayjs(v, format).isValid() || dayjs(v).isValid();
      });
    }
    return dayjs(value, format).isValid() || dayjs(value).isValid();
  }
  function formatDate(newDate, _ref3) {
    var format = _ref3.format,
      targetFormat = _ref3.targetFormat,
      autoSwap = _ref3.autoSwap;
    var result;
    if (Array.isArray(newDate)) {
      result = formatRange({
        newDate: newDate,
        format: format,
        targetFormat: targetFormat,
        autoSwap: autoSwap
      });
    } else {
      result = formatSingle({
        newDate: newDate,
        format: format,
        targetFormat: targetFormat
      });
    }
    return result;
  }
  function formatTime(value, timeFormat) {
    var result;
    if (Array.isArray(value)) {
      result = value.map(function (v) {
        return dayjs(v || new Date(new Date().setHours(0, 0, 0, 0))).format(timeFormat);
      });
    } else {
      result = dayjs(value || new Date(new Date().setHours(0, 0, 0, 0))).format(timeFormat);
    }
    return result;
  }
  function getDefaultFormat(_ref4) {
    var _ref4$mode = _ref4.mode,
      mode = _ref4$mode === void 0 ? "date" : _ref4$mode,
      format = _ref4.format,
      valueType = _ref4.valueType,
      enableTimePicker = _ref4.enableTimePicker;
    if (mode === "year") {
      return {
        format: format || "YYYY",
        valueType: valueType || format || "YYYY",
        timeFormat: TIME_FORMAT$1
      };
    }
    if (mode === "month") {
      return {
        format: format || "YYYY-MM",
        valueType: valueType || format || "YYYY-MM",
        timeFormat: TIME_FORMAT$1
      };
    }
    if (mode === "quarter") {
      return {
        format: format || "YYYY-[Q]Q",
        valueType: valueType || format || "YYYY-[Q]Q",
        timeFormat: TIME_FORMAT$1
      };
    }
    if (mode === "week") {
      return {
        format: format || "YYYY-wo",
        valueType: valueType || format || "YYYY-wo",
        timeFormat: TIME_FORMAT$1
      };
    }
    if (mode === "date") {
      return {
        format: format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
        valueType: valueType || format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
        timeFormat: extractTimeFormat(format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : "")) || TIME_FORMAT$1
      };
    }
    log.error("DatePicker", "Invalid mode: ".concat(mode));
    return {};
  }

  function useSingleValue(props) {
    var _toRefs = vue.toRefs(props),
      valueFromProps = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(valueFromProps, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      value = _useVModel2[0],
      onChange = _useVModel2[1];
    var formatRef = vue.computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        format: props.format,
        enableTimePicker: props.enableTimePicker
      });
    });
    if (props.enableTimePicker) {
      if (!extractTimeFormat(formatRef.value.format)) console.error("format: ".concat(formatRef.value.format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
    }
    var time = vue.ref(formatTime(value.value, formatRef.value.timeFormat));
    var month = vue.ref(dayjs(value.value).month() || new Date().getMonth());
    var year = vue.ref(dayjs(value.value).year() || new Date().getFullYear());
    var cacheValue = vue.ref(formatDate(value.value, {
      format: formatRef.value.format
    }));
    vue.watchEffect(function () {
      if (!value.value) {
        cacheValue.value = "";
        return;
      }
      if (!isValidDate(value.value, formatRef.value.format)) return;
      cacheValue.value = formatDate(value.value, {
        format: formatRef.value.format
      });
      time.value = formatTime(value.value, formatRef.value.timeFormat);
    });
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      cacheValue: cacheValue,
      onChange: onChange
    };
  }

  function ownKeys$1z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useSingle(props) {
    var COMPONENT_NAME = usePrefixClass("date-picker");
    var _useConfig = useConfig("datePicker"),
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        CalendarIcon: calendar
      }),
      CalendarIcon = _useGlobalIcon.CalendarIcon;
    var disabled = useFormDisabled();
    var renderTNodeJSX = useTNodeJSX();
    var inputRef = vue.ref();
    var _useSingleValue = useSingleValue(props),
      value = _useSingleValue.value,
      onChange = _useSingleValue.onChange,
      time = _useSingleValue.time,
      month = _useSingleValue.month,
      year = _useSingleValue.year,
      cacheValue = _useSingleValue.cacheValue;
    var formatRef = vue.computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        format: props.format,
        valueType: props.valueType,
        enableTimePicker: props.enableTimePicker
      });
    });
    var popupVisible = vue.ref(false);
    var isHoverCell = vue.ref(false);
    var inputValue = vue.ref(formatDate(value.value, {
      format: formatRef.value.format
    }));
    var inputProps = vue.computed(function () {
      return _objectSpread$1y(_objectSpread$1y({}, props.inputProps), {}, {
        ref: inputRef,
        prefixIcon: function prefixIcon() {
          return renderTNodeJSX("prefixIcon");
        },
        readonly: !props.allowInput,
        placeholder: props.placeholder || globalConfig.value.placeholder[props.mode],
        suffixIcon: function suffixIcon() {
          return renderTNodeJSX("suffixIcon") || vue.createVNode(CalendarIcon, null, null);
        },
        "class": [_defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__input--placeholder"), isHoverCell.value)],
        onClear: function onClear(context) {
          var _context$e;
          context === null || context === void 0 ? void 0 : (_context$e = context.e) === null || _context$e === void 0 ? void 0 : _context$e.stopPropagation();
          popupVisible.value = false;
          onChange === null || onChange === void 0 ? void 0 : onChange("", {
            dayjsValue: dayjs(),
            trigger: "clear"
          });
        },
        onBlur: function onBlur(val, context) {
          var _props$onBlur;
          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, {
            value: val,
            e: context.e
          });
        },
        onFocus: function onFocus(_, _ref2) {
          var _props$onFocus;
          var e = _ref2.e;
          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, {
            value: value.value,
            e: e
          });
        },
        onChange: function onChange(val) {
          inputValue.value = val;
          if (!isValidDate(val, formatRef.value.format)) return;
          var newMonth = dayjs(val).month();
          var newYear = dayjs(val).year();
          var newTime = formatTime(val, formatRef.value.timeFormat);
          !Number.isNaN(newYear) && (year.value = newYear);
          !Number.isNaN(newMonth) && (month.value = newMonth);
          !Number.isNaN(newTime) && (time.value = newTime);
        },
        onEnter: function onEnter(val) {
          if (!val) {
            onChange("", {
              dayjsValue: dayjs(),
              trigger: "enter"
            });
            popupVisible.value = false;
            return;
          }
          if (!isValidDate(val, formatRef.value.format) && !isValidDate(value.value, formatRef.value.format)) return;
          popupVisible.value = false;
          if (isValidDate(val, formatRef.value.format)) {
            onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(val, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType
            }), {
              dayjsValue: parseToDayjs(val, formatRef.value.format),
              trigger: "enter"
            });
          } else if (isValidDate(value.value, formatRef.value.format)) {
            inputValue.value = formatDate(value.value, {
              format: formatRef.value.format
            });
          } else {
            inputValue.value = "";
          }
        }
      });
    });
    var popupProps = vue.computed(function () {
      var _props$popupProps$ove, _props$popupProps, _props$popupProps2;
      return _objectSpread$1y(_objectSpread$1y({
        expandAnimation: true
      }, props.popupProps), {}, {
        disabled: disabled.value,
        overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
          width: "auto"
        },
        overlayClassName: [(_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(COMPONENT_NAME.value, "__panel-container")],
        onVisibleChange: function onVisibleChange(visible, context) {
          var _props$popupProps3, _props$popupProps3$on;
          if (disabled.value) return;
          (_props$popupProps3 = props.popupProps) === null || _props$popupProps3 === void 0 ? void 0 : (_props$popupProps3$on = _props$popupProps3.onVisibleChange) === null || _props$popupProps3$on === void 0 ? void 0 : _props$popupProps3$on.call(_props$popupProps3, visible, context);
          if (context.trigger === "trigger-element-click") {
            popupVisible.value = true;
            return;
          }
          popupVisible.value = visible;
        }
      });
    });
    vue.watchEffect(function () {
      if (!value.value) {
        inputValue.value = "";
        return;
      }
      if (!isValidDate(value.value, formatRef.value.format)) return;
      inputValue.value = formatDate(value.value, {
        format: formatRef.value.format
      });
    });
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      inputValue: inputValue,
      popupVisible: popupVisible,
      inputProps: inputProps,
      popupProps: popupProps,
      inputRef: inputRef,
      cacheValue: cacheValue,
      isHoverCell: isHoverCell,
      onChange: onChange
    };
  }

  var datePickerProps = {
    allowInput: Boolean,
    clearable: Boolean,
    disableDate: {
      type: [Object, Array, Function]
    },
    disabled: Boolean,
    enableTimePicker: Boolean,
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        if (!val) return true;
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": void 0
    },
    inputProps: {
      type: Object
    },
    mode: {
      type: String,
      "default": "date",
      validator: function validator(val) {
        if (!val) return true;
        return ["year", "quarter", "month", "week", "date"].includes(val);
      }
    },
    placeholder: {
      type: [String, Array],
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    prefixIcon: {
      type: Function
    },
    presets: {
      type: Object
    },
    presetsPlacement: {
      type: String,
      "default": "bottom",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "top", "right", "bottom"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffixIcon: {
      type: Function
    },
    timePickerProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number, Array, Date],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Array, Date],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Array, Date],
      "default": ""
    },
    valueType: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["time-stamp", "Date", "YYYY", "YYYY-MM", "YYYY-MM-DD", "YYYY-MM-DD HH", "YYYY-MM-DD HH:mm", "YYYY-MM-DD HH:mm:ss", "YYYY-MM-DD HH:mm:ss:SSS"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onPick: Function
  };

  var TDateHeader = vue.defineComponent({
    name: "TDatePickerHeader",
    props: {
      mode: {
        type: String,
        "default": "date"
      },
      year: Number,
      month: Number,
      onMonthChange: Function,
      onYearChange: Function,
      onJumperClick: Function
    },
    setup: function setup(props) {
      var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;
      var COMPONENT_NAME = usePrefixClass("date-picker__header");
      var _useConfig2 = useConfig("datePicker"),
        globalConfig = _useConfig2.globalConfig;
      var yearOptions = vue.ref(initOptions(props.year));
      var showMonthPicker = props.mode === "date" || props.mode === "week";
      var nearestYear = vue.computed(function () {
        var _yearOptions$value$fi;
        return ((_yearOptions$value$fi = yearOptions.value.find(function (option) {
          return option.value - props.year <= 9 && option.value - props.year >= 0;
        })) === null || _yearOptions$value$fi === void 0 ? void 0 : _yearOptions$value$fi.value) || props.year;
      });
      var monthOptions = vue.computed(function () {
        return globalConfig.value.months.map(function (item, index) {
          return {
            label: item,
            value: index
          };
        });
      });
      function initOptions(year) {
        var options = [];
        if (props.mode === "year") {
          var extraYear = year % 10;
          var minYear = year - extraYear - 100;
          var maxYear = year - extraYear + 100;
          for (var i = minYear; i <= maxYear; i += 10) {
            options.push({
              label: "".concat(i, " - ").concat(i + 9),
              value: i + extraYear
            });
          }
        } else {
          options.push({
            label: "".concat(year),
            value: year
          });
          for (var _i = 1; _i <= 10; _i++) {
            options.push({
              label: "".concat(year + _i),
              value: year + _i
            });
            options.unshift({
              label: "".concat(year - _i),
              value: year - _i
            });
          }
        }
        return options;
      }
      function loadMoreYear(year, type) {
        var options = [];
        if (props.mode === "year") {
          var extraYear = year % 10;
          if (type === "add") {
            for (var i = year - extraYear + 10; i <= year - extraYear + 50; i += 10) {
              options.push({
                label: "".concat(i, " - ").concat(i + 9),
                value: i
              });
            }
          } else {
            for (var _i2 = year - extraYear - 1; _i2 > year - extraYear - 50; _i2 -= 10) {
              options.unshift({
                label: "".concat(_i2 - 9, " - ").concat(_i2),
                value: _i2
              });
            }
          }
        } else if (type === "add") {
          for (var _i3 = year + 1; _i3 <= year + 10; _i3++) {
            options.push({
              label: "".concat(_i3),
              value: _i3
            });
          }
        } else {
          for (var _i4 = year - 1; _i4 > year - 10; _i4--) {
            options.unshift({
              label: "".concat(_i4),
              value: _i4
            });
          }
        }
        return options;
      }
      var labelMap = {
        year: {
          prev: globalConfig.value.preDecade,
          current: globalConfig.value.now,
          next: globalConfig.value.nextDecade
        },
        month: {
          prev: globalConfig.value.preYear,
          current: globalConfig.value.now,
          next: globalConfig.value.nextYear
        },
        date: {
          prev: globalConfig.value.preMonth,
          current: globalConfig.value.now,
          next: globalConfig.value.nextMonth
        }
      };
      function handleScroll(_ref) {
        var e = _ref.e;
        if (e.target.scrollTop === 0) {
          handlePanelTopClick(e);
        } else if (e.target.scrollTop === e.target.scrollHeight - e.target.clientHeight) {
          handlePanelBottomClick(e);
        }
      }
      function handlePanelTopClick(e) {
        var _e$stopPropagation;
        e === null || e === void 0 ? void 0 : (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 ? void 0 : _e$stopPropagation.call(e);
        var firstYear = yearOptions.value[0].value;
        var options = loadMoreYear(firstYear, "reduce");
        yearOptions.value = [].concat(_toConsumableArray(options), _toConsumableArray(yearOptions.value));
      }
      function handlePanelBottomClick(e) {
        var _e$stopPropagation2;
        e === null || e === void 0 ? void 0 : (_e$stopPropagation2 = e.stopPropagation) === null || _e$stopPropagation2 === void 0 ? void 0 : _e$stopPropagation2.call(e);
        var lastYear = yearOptions.value.slice(-1)[0].value;
        var options = loadMoreYear(lastYear, "add");
        yearOptions.value = [].concat(_toConsumableArray(yearOptions.value), _toConsumableArray(options));
      }
      return function () {
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-controller")
        }, [showMonthPicker && vue.createVNode(TSelect, {
          "class": "".concat(COMPONENT_NAME.value, "-controller-month"),
          "value": props.month,
          "options": monthOptions.value,
          "onChange": function onChange(val) {
            var _props$onMonthChange;
            return (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, val);
          },
          "popupProps": {
            attach: function attach(triggerElement) {
              return triggerElement.parentNode;
            },
            overlayClassName: "".concat(COMPONENT_NAME.value, "-controller-month-popup")
          }
        }, null), vue.createVNode(TSelect, {
          "class": "".concat(COMPONENT_NAME.value, "-controller-year"),
          "value": props.mode === "year" ? nearestYear.value : props.year,
          "options": yearOptions.value,
          "onChange": function onChange(val) {
            var _props$onYearChange;
            return (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, val);
          },
          "popupProps": {
            onScroll: handleScroll,
            attach: function attach(triggerElement) {
              return triggerElement.parentNode;
            },
            overlayClassName: "".concat(COMPONENT_NAME.value, "-controller-year-popup")
          },
          "panelTopContent": function panelTopContent() {
            return vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-select-option"),
              "onClick": handlePanelTopClick
            }, [vue.createTextVNode("...")]);
          },
          "panelBottomContent": function panelBottomContent() {
            return vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-select-option"),
              "onClick": handlePanelBottomClick
            }, [vue.createTextVNode("...")]);
          }
        }, null)]), vue.createVNode(Jumper, {
          "tips": labelMap[props.mode],
          "size": "small",
          "onChange": props.onJumperClick
        }, null)]);
      };
    }
  });

  var TDatePickerCell = vue.defineComponent({
    name: "TDatePickerCell",
    props: {
      time: String,
      text: [String, Number],
      value: Date,
      active: Boolean,
      highlight: Boolean,
      disabled: Boolean,
      startOfRange: Boolean,
      endOfRange: Boolean,
      hoverHighlight: Boolean,
      hoverStartOfRange: Boolean,
      hoverEndOfRange: Boolean,
      additional: Boolean,
      now: Boolean,
      firstDayOfMonth: Boolean,
      lastDayOfMonth: Boolean,
      onClick: Function,
      onMouseEnter: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__cell");
      var cellClass = vue.computed(function () {
        var _ref;
        return [COMPONENT_NAME.value, (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--now"), props.now), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--active"), props.active), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--disabled"), props.disabled), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--highlight"), props.highlight), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--hover-highlight"), props.hoverHighlight), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--active-start"), props.startOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--active-end"), props.endOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--hover-start"), props.hoverStartOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--hover-end"), props.hoverEndOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--additional"), props.additional), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--first-day-of-month"), props.firstDayOfMonth), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--last-day-of-month"), props.lastDayOfMonth), _ref)];
      });
      function handleClick(e) {
        var _props$onClick;
        if (props.disabled) return;
        if (props.time) {
          var _extractTimeObj = extractTimeObj(props.time),
            hours = _extractTimeObj.hours,
            minutes = _extractTimeObj.minutes,
            seconds = _extractTimeObj.seconds,
            milliseconds = _extractTimeObj.milliseconds,
            meridiem = _extractTimeObj.meridiem;
          var nextHours = hours;
          if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
          if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
          props.value.setHours(nextHours);
          props.value.setMinutes(minutes);
          props.value.setSeconds(seconds);
          props.value.setMilliseconds(milliseconds);
        }
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, props.value, {
          e: e
        });
      }
      function handleMouseEnter() {
        var _props$onMouseEnter;
        if (props.disabled) return;
        if (props.time) {
          var _extractTimeObj2 = extractTimeObj(props.time),
            hours = _extractTimeObj2.hours,
            minutes = _extractTimeObj2.minutes,
            seconds = _extractTimeObj2.seconds,
            milliseconds = _extractTimeObj2.milliseconds,
            meridiem = _extractTimeObj2.meridiem;
          var nextHours = hours;
          if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
          if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
          props.value.setHours(nextHours);
          props.value.setMinutes(minutes);
          props.value.setSeconds(seconds);
          props.value.setMilliseconds(milliseconds);
        }
        (_props$onMouseEnter = props.onMouseEnter) === null || _props$onMouseEnter === void 0 ? void 0 : _props$onMouseEnter.call(props, props.value);
      }
      return function () {
        return vue.createVNode("td", {
          "class": cellClass.value,
          "onClick": handleClick,
          "onMouseenter": handleMouseEnter
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-inner")
        }, [props.text])]);
      };
    }
  });

  function ownKeys$1y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TDateTable = vue.defineComponent({
    name: "TDatePickerTable",
    props: {
      mode: {
        type: String,
        "default": "date"
      },
      value: [String, Number, Array, Date],
      format: String,
      firstDayOfWeek: Number,
      data: Array,
      time: String,
      onCellClick: Function,
      onCellMouseEnter: Function,
      onCellMouseLeave: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__table");
      var _useConfig = useConfig("datePicker"),
        globalConfig = _useConfig.globalConfig;
      var _globalConfig$value = globalConfig.value,
        weekdays = _globalConfig$value.weekdays,
        weekAbbreviation = _globalConfig$value.weekAbbreviation;
      var weekArr = vue.computed(function () {
        var _weekArr = [];
        var wi = props.firstDayOfWeek - 1;
        var len = weekdays.length;
        while (_weekArr.length < len) {
          _weekArr.push(weekdays[wi]);
          wi = (wi + len + 1) % len;
        }
        if (props.mode === "week") _weekArr.unshift(weekAbbreviation);
        return _weekArr;
      });
      var showThead = vue.computed(function () {
        return props.mode === "date" || props.mode === "week";
      });
      var weekRowClass = function weekRowClass(value, format, targetValue) {
        if (props.mode !== "week") return {};
        if (Array.isArray(value)) {
          var _ref;
          if (!value.length) return {};
          var _value$map = value.map(function (v) {
              return v && parseToDayjs(v, format);
            }),
            _value$map2 = _slicedToArray(_value$map, 2),
            startObj = _value$map2[0],
            endObj = _value$map2[1];
          var startYear = startObj && startObj.year();
          var startWeek = startObj && startObj.week();
          var endYear = endObj && endObj.year();
          var endWeek = endObj && endObj.week();
          var targetObj = parseToDayjs(targetValue, format);
          var targetYear = targetObj.year();
          var targetWeek = targetObj.week();
          var isActive = targetYear === startYear && targetWeek === startWeek || targetYear === endYear && targetWeek === endWeek;
          var isRange = targetYear >= startYear && targetYear <= endYear && targetWeek > startWeek && targetWeek < endWeek;
          return _ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "-").concat(props.mode, "-row--active"), isActive), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "-").concat(props.mode, "-row--range"), isRange), _ref;
        }
        return _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "-").concat(props.mode, "-row--active"), parseToDayjs(value, format).week() === parseToDayjs(targetValue, format).week());
      };
      return function () {
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value,
          "onMouseleave": function onMouseleave(e) {
            var _props$onCellMouseLea;
            return (_props$onCellMouseLea = props.onCellMouseLeave) === null || _props$onCellMouseLea === void 0 ? void 0 : _props$onCellMouseLea.call(props, {
              e: e
            });
          }
        }, [vue.createVNode("table", null, [showThead.value && vue.createVNode("thead", null, [vue.createVNode("tr", null, [weekArr.value.map(function (value, i) {
          return vue.createVNode("th", {
            "key": i
          }, [value]);
        })])]), vue.createVNode("tbody", null, [props.data.map(function (row, i) {
          return vue.createVNode("tr", {
            "key": i,
            "class": _objectSpread$1x(_defineProperty$3({}, "".concat(COMPONENT_NAME.value, "-").concat(props.mode, "-row"), true), weekRowClass(props.value, props.format, row[0].value))
          }, [row.map(function (col, j) {
            return vue.createVNode(TDatePickerCell, vue.mergeProps(col, {
              "key": j,
              "time": props.time,
              "onClick": props.onCellClick,
              "onMouseEnter": props.onCellMouseEnter
            }), null);
          })]);
        })])])]);
      };
    }
  });

  var AM = "am";
  var PM = "pm";
  var MERIDIEM_LIST = [AM, PM];
  var TIME_PICKER_EMPTY = [void 0, void 0];
  var DEFAULT_STEPS = [1, 1, 1];
  var DEFAULT_FORMAT = "HH:mm:ss";
  var EPickerCols = /* @__PURE__ */function (EPickerCols2) {
    EPickerCols2["hour"] = "hour";
    EPickerCols2["minute"] = "minute";
    EPickerCols2["second"] = "second";
    EPickerCols2["milliSecond"] = "millisecond";
    EPickerCols2["meridiem"] = "meridiem";
    return EPickerCols2;
  }(EPickerCols || {});
  var TIME_FORMAT = /(a\s+|A\s+)?(h+|H+)?:?(m+)?:?(s+)?:?(S+)?(\s+a|\s+A)?/;
  var TWELVE_HOUR_FORMAT = /[h]{1}/;

  var props$D = {
    allowInput: Boolean,
    clearable: Boolean,
    disableTime: {
      type: Function
    },
    disabled: Boolean,
    format: {
      type: String,
      "default": "HH:mm:ss"
    },
    hideDisabledTime: {
      type: Boolean,
      "default": true
    },
    inputProps: {
      type: Object
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    presets: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    steps: {
      type: Array,
      "default": function _default() {
        return [1, 1, 1];
      }
    },
    value: {
      type: String,
      "default": void 0
    },
    modelValue: {
      type: String,
      "default": void 0
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    onBlur: Function,
    onChange: Function,
    onClose: Function,
    onFocus: Function,
    onInput: Function,
    onOpen: Function,
    onPick: Function
  };

  function ownKeys$1x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1x(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var BooleanType = {
    type: Boolean,
    "default": true,
    validator: function validator(v) {
      return typeof v === "boolean";
    }
  };
  var panelProps = function panelProps() {
    return {
      disabled: _objectSpread$1w(_objectSpread$1w({}, BooleanType), {
        "default": false
      }),
      isFocus: _objectSpread$1w(_objectSpread$1w({}, BooleanType), {
        "default": false
      }),
      value: {
        type: String,
        "default": ""
      },
      format: {
        type: String,
        "default": "HH:mm:ss"
      },
      steps: _objectSpread$1w({
        type: Array
      }, {
        "default": [1, 1, 1]
      }),
      isShowPanel: _objectSpread$1w(_objectSpread$1w({}, BooleanType), {
        "default": true
      }),
      hideDisabledTime: _objectSpread$1w({}, props$D.hideDisabledTime),
      disableTime: {
        type: Function
      },
      isFooterDisplay: _objectSpread$1w({}, BooleanType)
    };
  };
  var panelColProps = function panelColProps() {
    return {
      format: {
        type: String,
        "default": "HH:mm:ss"
      },
      cols: {
        type: Array,
        "default": function _default() {
          return [EPickerCols.hour, EPickerCols.minute, EPickerCols.second];
        }
      },
      value: {
        type: String,
        "default": ""
      },
      range: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      steps: _objectSpread$1w({
        type: Array
      }, {
        "default": [1, 1, 1]
      }),
      hideDisabledTime: _objectSpread$1w({}, props$D.hideDisabledTime),
      disableTime: {
        type: Function
      },
      localeMeridiems: {
        type: Array
      }
    };
  };

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil$1 = Math.ceil,
    nativeMax = Math.max;

  /**
   * The base implementation of `_.range` and `_.rangeRight` which doesn't
   * coerce arguments.
   *
   * @private
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @param {number} step The value to increment or decrement by.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the range of numbers.
   */
  function baseRange$1(start, end, step, fromRight) {
    var index = -1,
      length = nativeMax(nativeCeil$1((end - start) / (step || 1)), 0),
      result = Array(length);
    while (length--) {
      result[fromRight ? length : ++index] = start;
      start += step;
    }
    return result;
  }
  var _baseRange = baseRange$1;

  var baseRange = _baseRange,
    isIterateeCall$1 = _isIterateeCall,
    toFinite = toFinite_1;

  /**
   * Creates a `_.range` or `_.rangeRight` function.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new range function.
   */
  function createRange$1(fromRight) {
    return function (start, end, step) {
      if (step && typeof step != 'number' && isIterateeCall$1(start, end, step)) {
        end = step = undefined;
      }
      // Ensure the sign of `-0` is preserved.
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
      return baseRange(start, end, step, fromRight);
    };
  }
  var _createRange = createRange$1;

  var createRange = _createRange;

  /**
   * Creates an array of numbers (positive and/or negative) progressing from
   * `start` up to, but not including, `end`. A step of `-1` is used if a negative
   * `start` is specified without an `end` or `step`. If `end` is not specified,
   * it's set to `start` with `start` then set to `0`.
   *
   * **Note:** JavaScript follows the IEEE-754 standard for resolving
   * floating-point values which can produce unexpected results.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @param {number} [step=1] The value to increment or decrement by.
   * @returns {Array} Returns the range of numbers.
   * @see _.inRange, _.rangeRight
   * @example
   *
   * _.range(4);
   * // => [0, 1, 2, 3]
   *
   * _.range(-4);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 5);
   * // => [1, 2, 3, 4]
   *
   * _.range(0, 20, 5);
   * // => [0, 5, 10, 15]
   *
   * _.range(0, -4, -1);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 4, 0);
   * // => [1, 1, 1]
   *
   * _.range(0);
   * // => []
   */
  var range = createRange();
  var range_1 = range;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeFloor = Math.floor;

  /**
   * The base implementation of `_.repeat` which doesn't coerce arguments.
   *
   * @private
   * @param {string} string The string to repeat.
   * @param {number} n The number of times to repeat the string.
   * @returns {string} Returns the repeated string.
   */
  function baseRepeat$1(string, n) {
    var result = '';
    if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
      return result;
    }
    // Leverage the exponentiation by squaring algorithm for a faster repeat.
    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    do {
      if (n % 2) {
        result += string;
      }
      n = nativeFloor(n / 2);
      if (n) {
        string += string;
      }
    } while (n);
    return result;
  }
  var _baseRepeat = baseRepeat$1;

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty$1(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }
  var _baseProperty = baseProperty$1;

  var baseProperty = _baseProperty;

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize$1 = baseProperty('length');
  var _asciiSize = asciiSize$1;

  /** Used to compose unicode character classes. */
  var rsAstralRange = "\\ud800-\\udfff",
    rsComboMarksRange = "\\u0300-\\u036f",
    reComboHalfMarksRange = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange = "\\u20d0-\\u20ff",
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = "\\ufe0e\\ufe0f";

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = "\\ud83c[\\udffb-\\udfff]",
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    rsZWJ = "\\u200d";

  /** Used to compose unicode regexes. */
  var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize$1(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }
  var _unicodeSize = unicodeSize$1;

  var asciiSize = _asciiSize,
    hasUnicode$1 = _hasUnicode,
    unicodeSize = _unicodeSize;

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize$2(string) {
    return hasUnicode$1(string) ? unicodeSize(string) : asciiSize(string);
  }
  var _stringSize = stringSize$2;

  var baseRepeat = _baseRepeat,
    baseToString = _baseToString,
    castSlice = _castSlice,
    hasUnicode = _hasUnicode,
    stringSize$1 = _stringSize,
    stringToArray = _stringToArray;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil;

  /**
   * Creates the padding for `string` based on `length`. The `chars` string
   * is truncated if the number of characters exceeds `length`.
   *
   * @private
   * @param {number} length The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padding for `string`.
   */
  function createPadding$1(length, chars) {
    chars = chars === undefined ? ' ' : baseToString(chars);
    var charsLength = chars.length;
    if (charsLength < 2) {
      return charsLength ? baseRepeat(chars, length) : chars;
    }
    var result = baseRepeat(chars, nativeCeil(length / stringSize$1(chars)));
    return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
  }
  var _createPadding = createPadding$1;

  var createPadding = _createPadding,
    stringSize = _stringSize,
    toInteger = toInteger_1,
    toString$2 = toString_1;

  /**
   * Pads `string` on the left side if it's shorter than `length`. Padding
   * characters are truncated if they exceed `length`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.padStart('abc', 6);
   * // => '   abc'
   *
   * _.padStart('abc', 6, '_-');
   * // => '_-_abc'
   *
   * _.padStart('abc', 3);
   * // => 'abc'
   */
  function padStart(string, length, chars) {
    string = toString$2(string);
    length = toInteger(length);
    var strLength = length ? stringSize(string) : 0;
    return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
  }
  var padStart_1 = padStart;

  function validateInputValue(value, format) {
    return dayjs(value, format).format(format) === value;
  }
  function formatInputValue(value, format) {
    return dayjs(value, format).format(format);
  }
  function closestLookup(availableArr, calcVal, step) {
    if (step <= 1) return calcVal;
    return availableArr.sort(function (a, b) {
      return Math.abs(calcVal + 1 - a) - Math.abs(calcVal + 1 - b);
    })[0];
  }

  function ownKeys$1w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1w(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs.extend(customParseFormat);
  var timeArr = [EPickerCols.hour, EPickerCols.minute, EPickerCols.second, EPickerCols.milliSecond];
  var panelOffset = {
    top: 15,
    bottom: 21
  };
  var SinglePanel = vue.defineComponent({
    name: "TTimePickerPanelCol",
    props: _objectSpread$1v(_objectSpread$1v({}, panelColProps()), {}, {
      position: String,
      triggerScroll: Boolean,
      onChange: Function,
      resetTriggerScroll: Function,
      isShowPanel: Boolean
    }),
    setup: function setup(props) {
      var _toRefs = vue.toRefs(props),
        steps = _toRefs.steps,
        value = _toRefs.value,
        format = _toRefs.format,
        position = _toRefs.position,
        triggerScroll = _toRefs.triggerScroll;
      var _useConfig = useConfig("timePicker"),
        globalConfig = _useConfig.globalConfig;
      var _useConfig2 = useConfig(),
        classPrefix = _useConfig2.classPrefix;
      var cols = vue.ref([]);
      var bodyRef = vue.ref();
      var maskRef = vue.ref(null);
      var colsRef = vue.reactive({
        0: null,
        1: null,
        2: null,
        3: null,
        4: null,
        5: null
      });
      var dayjsValue = vue.computed(function () {
        var isStepsSet = !!steps.value.filter(function (v) {
          return v > 1;
        }).length;
        if (value.value) return dayjs(value.value, format.value);
        if (isStepsSet) return dayjs().hour(0).minute(0).second(0);
        return dayjs();
      });
      var panelClassName = vue.computed(function () {
        return "".concat(classPrefix.value, "-time-picker__panel");
      });
      vue.watch(function () {
        return dayjsValue.value;
      }, function () {
        if (dayjsValue.value) updateTimeScrollPos(true);
      });
      vue.watch(function () {
        return triggerScroll.value;
      }, function () {
        if (triggerScroll.value) {
          updateTimeScrollPos(true);
        }
      });
      vue.onMounted(function () {
        var match = format.value.match(TIME_FORMAT);
        var _match = _slicedToArray(match, 7),
          startCol = _match[1],
          hourCol = _match[2],
          minuteCol = _match[3],
          secondCol = _match[4],
          milliSecondCol = _match[5],
          endCol = _match[6];
        var meridiem = EPickerCols.meridiem,
          hour = EPickerCols.hour,
          minute = EPickerCols.minute,
          second = EPickerCols.second,
          milliSecond = EPickerCols.milliSecond;
        var renderCol = [startCol && meridiem, hourCol && hour, minuteCol && minute, secondCol && second, milliSecondCol && milliSecond, endCol && meridiem].filter(function (v) {
          return !!v;
        });
        cols.value = renderCol;
      });
      var getItemHeight = function getItemHeight() {
        var _maskRef$value;
        var maskDom = (_maskRef$value = maskRef.value) === null || _maskRef$value === void 0 ? void 0 : _maskRef$value.querySelector("div");
        if (!maskDom) {
          return {
            offsetHeight: 0,
            margin: 0
          };
        }
        return {
          offsetHeight: maskDom.offsetHeight,
          margin: parseInt(getComputedStyle(maskDom).marginTop, 10)
        };
      };
      var timeItemCanUsed = function timeItemCanUsed(col, el) {
        var colIdx = timeArr.indexOf(col);
        if (colIdx !== -1) {
          var _props$disableTime, _props$disableTime$ca, _props$disableTime$ca2;
          var params = [dayjsValue.value.hour(), dayjsValue.value.minute(), dayjsValue.value.second()];
          params[colIdx] = Number(el);
          return !((_props$disableTime = props.disableTime) !== null && _props$disableTime !== void 0 && (_props$disableTime$ca = _props$disableTime.call.apply(_props$disableTime, [props].concat(params, [{
            partial: position.value || "start"
          }]))) !== null && _props$disableTime$ca !== void 0 && (_props$disableTime$ca2 = _props$disableTime$ca[col]) !== null && _props$disableTime$ca2 !== void 0 && _props$disableTime$ca2.includes(Number(el)));
        }
        return true;
      };
      var getColList = function getColList(col) {
        var count = 0;
        if (timeArr.includes(col)) {
          var colIdx = timeArr.indexOf(col);
          var colStep = steps.value[colIdx] || 1;
          if (col === EPickerCols.hour) count = TWELVE_HOUR_FORMAT.test(format.value) ? 11 : 23;else if (col === EPickerCols.milliSecond) count = 999;else count = 59;
          var colList = range_1(0, count + 1, Number(colStep)).map(function (v) {
            return padStart_1(String(v), 2, "0");
          }) || [];
          return props.hideDisabledTime && !!props.disableTime ? colList.filter(function (t) {
            var _props$disableTime2, _props$disableTime2$c, _props$disableTime2$c2;
            var params = [dayjsValue.value.hour(), dayjsValue.value.minute(), dayjsValue.value.second()];
            params[colIdx] = Number(t);
            return !((_props$disableTime2 = props.disableTime) !== null && _props$disableTime2 !== void 0 && (_props$disableTime2$c = _props$disableTime2.call.apply(_props$disableTime2, [props].concat(params, [{
              partial: position.value || "start"
            }]))) !== null && _props$disableTime2$c !== void 0 && (_props$disableTime2$c2 = _props$disableTime2$c[col]) !== null && _props$disableTime2$c2 !== void 0 && _props$disableTime2$c2.includes(Number(t)));
          }) : colList;
        }
        return MERIDIEM_LIST;
      };
      var getScrollDistance = function getScrollDistance(col, time) {
        if (col === EPickerCols.hour && /[h]{1}/.test(format.value)) time %= 12;
        var itemIdx = getColList(col).indexOf(padStart_1(String(time), 2, "0"));
        var _getItemHeight = getItemHeight(),
          offsetHeight = _getItemHeight.offsetHeight,
          margin = _getItemHeight.margin;
        var timeItemTotalHeight = offsetHeight + margin;
        var distance = Math.abs(Math.max(0, itemIdx) * timeItemTotalHeight);
        return distance;
      };
      var handleScroll = function handleScroll(col, idx) {
        var _colsRef$idx, _props$onChange;
        var val;
        var formattedVal;
        if (!props.isShowPanel) return;
        var scrollTop = (((_colsRef$idx = colsRef[idx]) === null || _colsRef$idx === void 0 ? void 0 : _colsRef$idx.scrollTop) || 0) + panelOffset.top;
        var _getItemHeight2 = getItemHeight(),
          offsetHeight = _getItemHeight2.offsetHeight,
          margin = _getItemHeight2.margin;
        var timeItemTotalHeight = offsetHeight + margin;
        var colStep = Math.abs(Math.round(scrollTop / timeItemTotalHeight + 0.5));
        var meridiem = MERIDIEM_LIST[Math.min(colStep - 1, 1)].toLowerCase();
        if (Number.isNaN(colStep)) colStep = 1;
        if (timeArr.includes(col)) {
          var max = 59;
          if (col === EPickerCols.hour) max = /[h]{1}/.test(format.value) ? 11 : 23;else if (col === EPickerCols.milliSecond) max = 999;
          var colIdx = timeArr.indexOf(col);
          var availableArr = range_1(0, max + 1, Number(steps.value[colIdx]) || 1);
          val = closestLookup(availableArr, Number(getColList(col)[Math.min(colStep - 1, max + 1, availableArr.length - 1)]), Number(steps.value[colIdx]) || 1);
          if (Number.isNaN(val)) val = availableArr[availableArr.length - 1];
          if (col === EPickerCols.hour && cols.value.includes(EPickerCols.meridiem) && dayjsValue.value.hour() >= 12) {
            val = Number(val) + 12;
          }
        } else val = meridiem;
        var distance = getScrollDistance(col, val);
        if (!dayjs(dayjsValue.value).isValid() || value.value && !dayjs(value.value, format.value, true).isValid()) return;
        if (timeArr.includes(col)) {
          var _dayjsValue$value$col, _dayjsValue$value;
          if (timeItemCanUsed(col, val)) formattedVal = (_dayjsValue$value$col = (_dayjsValue$value = dayjsValue.value)[col]) === null || _dayjsValue$value$col === void 0 ? void 0 : _dayjsValue$value$col.call(_dayjsValue$value, val).format(format.value);
        } else {
          var currentHour = dayjsValue.value.hour();
          if (meridiem === AM && currentHour >= 12) {
            formattedVal = dayjsValue.value.hour(currentHour - 12).format(format.value);
          } else if (meridiem === PM && currentHour < 12) {
            formattedVal = dayjsValue.value.hour(currentHour + 12).format(format.value);
          } else {
            formattedVal = dayjsValue.value.format(format.value);
          }
        }
        if (formattedVal !== value.value) (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, formattedVal);
        if (distance !== scrollTop) {
          var _scrollCtrl$scrollTo;
          var scrollCtrl = colsRef[cols.value.indexOf(col)];
          if (!scrollCtrl || scrollCtrl.scrollTop === distance) return;
          (_scrollCtrl$scrollTo = scrollCtrl.scrollTo) === null || _scrollCtrl$scrollTo === void 0 ? void 0 : _scrollCtrl$scrollTo.call(scrollCtrl, {
            top: distance,
            behavior: "smooth"
          });
        }
      };
      var scrollToTime = function scrollToTime(col, time, idx) {
        var _scrollCtrl$scrollTo2;
        var behavior = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "auto";
        var distance = getScrollDistance(col, time);
        var scrollCtrl = colsRef[idx];
        if (!scrollCtrl || scrollCtrl.scrollTop === distance || !timeItemCanUsed(col, time)) return;
        (_scrollCtrl$scrollTo2 = scrollCtrl.scrollTo) === null || _scrollCtrl$scrollTo2 === void 0 ? void 0 : _scrollCtrl$scrollTo2.call(scrollCtrl, {
          top: distance,
          behavior: behavior
        });
      };
      var handleTimeItemClick = function handleTimeItemClick(col, el, idx) {
        if (!timeItemCanUsed(col, el)) return;
        if (timeArr.includes(col)) {
          if (col === EPickerCols.hour && dayjsValue.value.format("a") === PM && cols.value.includes(EPickerCols.meridiem)) {
            el = Number(el) + 12;
          }
          scrollToTime(col, el, idx, "smooth");
        } else {
          var currentHour = dayjsValue.value.hour();
          if (el === AM && currentHour >= 12) {
            props.onChange(dayjsValue.value.hour(currentHour - 12).format(format.value));
          } else if (el === PM && currentHour < 12) {
            props.onChange(dayjsValue.value.hour(currentHour + 12).format(format.value));
          }
        }
      };
      var updateTimeScrollPos = function updateTimeScrollPos() {
        var isAutoScroll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var behavior = value.value && !isAutoScroll ? "smooth" : "auto";
        var isStepsSet = !!steps.value.filter(function (v) {
          return v > 1;
        }).length;
        vue.nextTick(function () {
          cols.value.forEach(function (col, idx) {
            if (!isStepsSet || isStepsSet && value.value) {
              var _dayjsValue$value$col2, _dayjsValue$value2;
              scrollToTime(col, timeArr.includes(col) ? (_dayjsValue$value$col2 = (_dayjsValue$value2 = dayjsValue.value)[col]) === null || _dayjsValue$value$col2 === void 0 ? void 0 : _dayjsValue$value$col2.call(_dayjsValue$value2) : dayjsValue.value.format("a"), idx, behavior);
            } else {
              var _getColList;
              scrollToTime(col, (_getColList = getColList(col)) === null || _getColList === void 0 ? void 0 : _getColList[0], idx, behavior);
            }
          });
        });
        props.resetTriggerScroll();
      };
      var isCurrent = function isCurrent(col, colItem) {
        var _dayjsValue$value$col3, _dayjsValue$value3;
        var colVal;
        if (col === EPickerCols.meridiem) {
          var currentMeridiem = dayjsValue.value.format("a");
          return currentMeridiem === colItem;
        }
        colVal = (_dayjsValue$value$col3 = (_dayjsValue$value3 = dayjsValue.value)[col]) === null || _dayjsValue$value$col3 === void 0 ? void 0 : _dayjsValue$value$col3.call(_dayjsValue$value3);
        if (col === EPickerCols.hour && /[h]{1}/.test(format.value)) {
          colVal %= 12;
        }
        return colVal === Number(colItem);
      };
      return function () {
        var _cols$value$map, _cols$value, _cols$value$map2, _cols$value2;
        return vue.createVNode("div", {
          "class": "".concat(panelClassName.value, "-body"),
          "ref": bodyRef
        }, [vue.createVNode("div", {
          "class": "".concat(panelClassName.value, "-body-active-mask"),
          "ref": maskRef
        }, [(_cols$value$map = (_cols$value = cols.value).map) === null || _cols$value$map === void 0 ? void 0 : _cols$value$map.call(_cols$value, function (col, idx) {
          return vue.createVNode("div", {
            "key": "".concat(col, "_").concat(idx)
          }, null);
        })]), (_cols$value$map2 = (_cols$value2 = cols.value).map) === null || _cols$value$map2 === void 0 ? void 0 : _cols$value$map2.call(_cols$value2, function (col, idx) {
          return vue.createVNode("ul", {
            "key": "".concat(col, "_").concat(idx),
            "ref": function ref(el) {
              return colsRef[idx] = el;
            },
            "class": "".concat(panelClassName.value, "-body-scroll"),
            "onScroll": debounce_1(function () {
              return handleScroll(col, idx);
            }, 50)
          }, [getColList(col).map(function (el) {
            var _ref;
            return vue.createVNode("li", {
              "key": el,
              "class": ["".concat(panelClassName.value, "-body-scroll-item"), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-disabled"), !timeItemCanUsed(col, el)), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-current"), isCurrent(col, el)), _ref)],
              "onClick": function onClick() {
                return handleTimeItemClick(col, el, idx);
              }
            }, [timeArr.includes(col) ? TWELVE_HOUR_FORMAT.test(format.value) && col === EPickerCols.hour && el === "00" ? "12" : el : globalConfig.value[el === AM ? "anteMeridiem" : "postMeridiem"]]);
          })]);
        })]);
      };
    }
  });

  function ownKeys$1v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1v(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs.extend(customParseFormat);
  var _TimePickerPanel = vue.defineComponent({
    name: "TimePickerPanel",
    props: _objectSpread$1u(_objectSpread$1u({}, panelProps()), {}, {
      isFooterDisplay: Boolean,
      handleConfirmClick: Function,
      onChange: Function
    }),
    setup: function setup(props) {
      var panelClassName = usePrefixClass("time-picker__panel");
      var _toRefs = vue.toRefs(props),
        steps = _toRefs.steps,
        isFooterDisplay = _toRefs.isFooterDisplay,
        isShowPanel = _toRefs.isShowPanel;
      var triggerScroll = vue.ref(false);
      var panelRef = vue.ref();
      var _useConfig = useConfig("timePicker"),
        globalConfig = _useConfig.globalConfig;
      var showNowTimeBtn = vue.computed(function () {
        return !!steps.value.filter(function (v) {
          return v > 1;
        }).length;
      });
      var defaultValue = vue.computed(function () {
        var isStepsSet = showNowTimeBtn.value;
        if (props.value) {
          return dayjs(props.value, props.format);
        }
        if (isStepsSet) {
          return dayjs().hour(0).minute(0).second(0);
        }
        return dayjs();
      });
      var panelColUpdate = function panelColUpdate() {
        vue.nextTick(function () {
          triggerScroll.value = true;
        });
      };
      var resetTriggerScroll = function resetTriggerScroll() {
        triggerScroll.value = false;
      };
      vue.onMounted(function () {
        panelColUpdate();
      });
      vue.watch(function () {
        return isShowPanel.value;
      }, function () {
        panelColUpdate();
      });
      return function () {
        return vue.createVNode("div", {
          "class": panelClassName.value
        }, [vue.createVNode("div", {
          "class": "".concat(panelClassName.value, "-section-body")
        }, [vue.createVNode(SinglePanel, vue.mergeProps(props, {
          "ref": panelRef,
          "format": props.format || DEFAULT_FORMAT,
          "steps": props.steps || DEFAULT_STEPS,
          "value": props.value,
          "triggerScroll": triggerScroll.value,
          "onChange": props.onChange,
          "resetTriggerScroll": resetTriggerScroll,
          "isShowPanel": props.isShowPanel
        }), null)]), isFooterDisplay.value ? vue.createVNode("div", {
          "class": "".concat(panelClassName.value, "-section-footer")
        }, [vue.createVNode(TButton, {
          "theme": "primary",
          "variant": "base",
          "onClick": function onClick() {
            return props.handleConfirmClick(defaultValue.value);
          },
          "size": "small"
        }, {
          "default": function _default() {
            return [globalConfig.value.confirm];
          }
        }), !showNowTimeBtn.value ? vue.createVNode(TButton, {
          "theme": "primary",
          "variant": "text",
          "size": "small",
          "onClick": function onClick() {
            return props.onChange(dayjs().format(props.format));
          }
        }, {
          "default": function _default() {
            return [globalConfig.value.now];
          }
        }) : null]) : null]);
      };
    }
  });

  function ownKeys$1u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1u(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TPanelContent = vue.defineComponent({
    name: "TPanelContent",
    props: {
      mode: String,
      format: String,
      enableTimePicker: Boolean,
      timePickerProps: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      year: Number,
      month: Number,
      tableData: Array,
      time: String,
      firstDayOfWeek: Number,
      partial: String,
      popupVisible: Boolean,
      onYearChange: Function,
      onMonthChange: Function,
      onJumperClick: Function,
      onCellMouseEnter: Function,
      onCellClick: Function,
      onCellMouseLeave: Function,
      onTimePickerChange: Function,
      value: [String, Number, Array, Date]
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__panel");
      var _getDefaultFormat = getDefaultFormat({
          mode: props.mode,
          format: props.format,
          enableTimePicker: props.enableTimePicker
        }),
        timeFormat = _getDefaultFormat.timeFormat;
      var defaultTimeValue = "00:00:00";
      return function () {
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-content")
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-").concat(props.mode)
        }, [vue.createVNode(TDateHeader, {
          "mode": props.mode,
          "year": props.year,
          "month": props.month,
          "onMonthChange": function onMonthChange(val) {
            var _props$onMonthChange;
            return (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, val, {
              partial: props.partial
            });
          },
          "onYearChange": function onYearChange(val) {
            var _props$onYearChange;
            return (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, val, {
              partial: props.partial
            });
          },
          "onJumperClick": function onJumperClick(_ref) {
            var _props$onJumperClick;
            var trigger = _ref.trigger;
            return (_props$onJumperClick = props.onJumperClick) === null || _props$onJumperClick === void 0 ? void 0 : _props$onJumperClick.call(props, {
              trigger: trigger,
              partial: props.partial
            });
          }
        }, null), vue.createVNode(TDateTable, {
          "mode": props.mode,
          "data": props.tableData,
          "time": props.time,
          "value": props.value,
          "format": props.format,
          "firstDayOfWeek": props.firstDayOfWeek,
          "onCellClick": function onCellClick(date, _ref2) {
            var _props$onCellClick;
            var e = _ref2.e;
            return (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, date, {
              e: e,
              partial: props.partial
            });
          },
          "onCellMouseEnter": function onCellMouseEnter(date) {
            var _props$onCellMouseEnt;
            return (_props$onCellMouseEnt = props.onCellMouseEnter) === null || _props$onCellMouseEnt === void 0 ? void 0 : _props$onCellMouseEnt.call(props, date, {
              partial: props.partial
            });
          },
          "onCellMouseLeave": props.onCellMouseLeave
        }, null)]), props.enableTimePicker && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-time")
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-time-viewer")
        }, [props.time || defaultTimeValue]), vue.createVNode(_TimePickerPanel, _objectSpread$1t({
          key: props.partial,
          isShowPanel: props.popupVisible,
          format: timeFormat,
          value: props.time || defaultTimeValue,
          onChange: props.onTimePickerChange
        }, props.timePickerProps), null)])]);
      };
    }
  });

  function _isSlot$k(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var TDateFooter = vue.defineComponent({
    name: "TDatePickerTable",
    props: {
      enableTimePicker: Boolean,
      presetsPlacement: String,
      presets: Object,
      selectedValue: [Date, String, Number],
      onPresetClick: Function,
      onConfirmClick: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__footer");
      var presetsClass = usePrefixClass("date-picker__presets");
      var _useConfig = useConfig("datePicker"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var footerClass = vue.computed(function () {
        return [COMPONENT_NAME.value, "".concat(COMPONENT_NAME.value, "--").concat(props.presetsPlacement)];
      });
      return function () {
        var _slot;
        return vue.createVNode("div", {
          "class": footerClass.value
        }, [vue.createVNode("div", {
          "class": presetsClass.value
        }, [props.presets && Object.keys(props.presets).map(function (key) {
          return vue.createVNode(Button, {
            "key": key,
            "size": "small",
            "variant": "text",
            "onClick": function onClick(e) {
              var _props$onPresetClick;
              return (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 ? void 0 : _props$onPresetClick.call(props, props.presets[key], {
                e: e
              });
            }
          }, _isSlot$k(key) ? key : {
            "default": function _default() {
              return [key];
            }
          });
        })]), props.enableTimePicker && vue.createVNode(Button, {
          "disabled": !props.selectedValue,
          "size": "small",
          "theme": "primary",
          "onClick": function onClick(e) {
            var _props$onConfirmClick;
            return (_props$onConfirmClick = props.onConfirmClick) === null || _props$onConfirmClick === void 0 ? void 0 : _props$onConfirmClick.call(props, {
              e: e
            });
          }
        }, _isSlot$k(_slot = t(globalConfig.value.confirm)) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        })]);
      };
    }
  });

  var TExtraContent = vue.defineComponent({
    name: "TExtraContent",
    props: {
      presets: Object,
      enableTimePicker: Boolean,
      presetsPlacement: String,
      onPresetClick: Function,
      onConfirmClick: Function,
      selectedValue: [String, Number, Array, Date]
    },
    setup: function setup(props) {
      var showPanelFooter = vue.computed(function () {
        return props.enableTimePicker || props.presets;
      });
      return function () {
        return showPanelFooter.value ? vue.createVNode(TDateFooter, {
          "presets": props.presets,
          "onPresetClick": props.onPresetClick,
          "enableTimePicker": props.enableTimePicker,
          "onConfirmClick": props.onConfirmClick,
          "presetsPlacement": props.presetsPlacement,
          "selectedValue": props.selectedValue
        }, null) : null;
      };
    }
  });

  function useTableData(props) {
    var _props$firstDayOfWeek;
    var _useConfig = useConfig("datePicker"),
      globalConfig = _useConfig.globalConfig;
    var options = {
      minDate: props.minDate,
      maxDate: props.maxDate,
      disableDate: props.disableDate,
      firstDayOfWeek: (_props$firstDayOfWeek = props.firstDayOfWeek) !== null && _props$firstDayOfWeek !== void 0 ? _props$firstDayOfWeek : globalConfig.value.firstDayOfWeek,
      monthLocal: globalConfig.value.months,
      quarterLocal: globalConfig.value.quarters,
      showWeekOfYear: props.mode === "week"
    };
    var data = [];
    if (props.mode === "date") {
      data = getWeeks({
        year: props.year,
        month: props.month
      }, options);
    } else if (props.mode === "week") {
      data = getWeeks({
        year: props.year,
        month: props.month
      }, options);
    } else if (props.mode === "quarter") {
      data = getQuarters(props.year, options);
    } else if (props.mode === "month") {
      data = getMonths(props.year, options);
    } else if (props.mode === "year") {
      data = getYears(props.year, options);
    }
    return flagActive(data, {
      start: props.start,
      end: props.end,
      hoverStart: props.hoverStart,
      hoverEnd: props.hoverEnd,
      type: props.mode,
      isRange: props.isRange
    });
  }

  function useDisableDate(props) {
    return {
      disableDate: function disableDate(value) {
        return !isEnabled({
          disableDate: props.disableDate,
          format: props.format,
          mode: props.mode,
          value: value
        });
      },
      minDate: isObject_1(props.disableDate) && "before" in props.disableDate ? new Date(props.disableDate.before) : props.start,
      maxDate: isObject_1(props.disableDate) && "after" in props.disableDate ? new Date(props.disableDate.after) : props.end
    };
  }
  function isEnabled(props) {
    if (!props.disableDate) return true;
    var isEnabled2 = true;
    if (typeof props.disableDate === "function") {
      return !props.disableDate(props.value);
    }
    if (Array.isArray(props.disableDate)) {
      var isIncludes = false;
      var formatedDisabledDate = props.disableDate.map(function (item) {
        return dayjs(item, props.format);
      });
      formatedDisabledDate.forEach(function (item) {
        if (item.isSame(dayjs(props.value))) {
          isIncludes = true;
        }
      });
      return !isIncludes;
    }
    if (props.disableDate.from && props.disableDate.to) {
      var compareMin = dayjs(new Date(props.disableDate.from));
      var compareMax = dayjs(new Date(props.disableDate.to));
      return !dayjs(props.value).isBetween(compareMin, compareMax, props.mode, "[]");
    }
    var min = props.disableDate.before ? new Date(props.disableDate.before) : null;
    var max = props.disableDate.after ? new Date(props.disableDate.after) : null;
    if (max && min) {
      var _compareMin = dayjs(new Date(min));
      var _compareMax = dayjs(new Date(max));
      isEnabled2 = dayjs(props.value).isBetween(_compareMin, _compareMax, props.mode, "[]");
    } else if (min) {
      var _compareMin2 = dayjs(new Date(min));
      isEnabled2 = !dayjs(props.value).isBefore(_compareMin2, props.mode);
    } else if (max) {
      var _compareMax2 = dayjs(new Date(max));
      isEnabled2 = !dayjs(props.value).isAfter(_compareMax2, props.mode);
    }
    return isEnabled2;
  }

  function ownKeys$1t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1t(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TSinglePanel = vue.defineComponent({
    name: "TSinglePanel",
    props: {
      disableDate: [Object, Array, Function],
      mode: {
        type: String,
        "default": "date"
      },
      format: String,
      presetsPlacement: {
        type: String,
        "default": "bottom"
      },
      value: [String, Number, Array, Date],
      timePickerProps: Object,
      presets: Object,
      enableTimePicker: Boolean,
      firstDayOfWeek: Number,
      year: Number,
      month: Number,
      time: String,
      popupVisible: Boolean,
      onPanelClick: Function,
      onCellClick: Function,
      onCellMouseEnter: Function,
      onCellMouseLeave: Function,
      onJumperClick: Function,
      onConfirmClick: Function,
      onPresetClick: Function,
      onYearChange: Function,
      onMonthChange: Function,
      onTimePickerChange: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__panel");
      var _useConfig = useConfig("datePicker"),
        globalConfig = _useConfig.globalConfig;
      var _getDefaultFormat = getDefaultFormat({
          mode: props.mode,
          format: props.format,
          enableTimePicker: props.enableTimePicker
        }),
        format = _getDefaultFormat.format;
      var disableDateOptions = vue.computed(function () {
        return useDisableDate({
          format: format,
          mode: props.mode,
          disableDate: props.disableDate
        });
      });
      var tableData = vue.computed(function () {
        return useTableData(_objectSpread$1s({
          year: props.year,
          month: props.month,
          mode: props.mode,
          start: props.value ? parseToDayjs(props.value, format).toDate() : void 0,
          firstDayOfWeek: props.firstDayOfWeek || globalConfig.value.firstDayOfWeek
        }, disableDateOptions.value));
      });
      var panelContentProps = vue.computed(function () {
        return {
          format: format,
          value: props.value,
          mode: props.mode,
          year: props.year,
          month: props.month,
          firstDayOfWeek: props.firstDayOfWeek || globalConfig.value.firstDayOfWeek,
          tableData: tableData.value,
          popupVisible: props.popupVisible,
          enableTimePicker: props.enableTimePicker,
          timePickerProps: props.timePickerProps,
          time: props.time,
          onMonthChange: props.onMonthChange,
          onYearChange: props.onYearChange,
          onJumperClick: props.onJumperClick,
          onCellClick: props.onCellClick,
          onCellMouseEnter: props.onCellMouseEnter,
          onCellMouseLeave: props.onCellMouseLeave,
          onTimePickerChange: props.onTimePickerChange
        };
      });
      var extraProps = vue.computed(function () {
        return {
          presets: props.presets,
          enableTimePicker: props.enableTimePicker,
          presetsPlacement: props.presetsPlacement,
          onPresetClick: props.onPresetClick,
          onConfirmClick: props.onConfirmClick,
          selectedValue: props.value
        };
      });
      return function () {
        return vue.createVNode("div", {
          "class": [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--direction-row"), ["left", "right"].includes(props.presetsPlacement))],
          "onClick": function onClick(e) {
            var _props$onPanelClick;
            return (_props$onPanelClick = props.onPanelClick) === null || _props$onPanelClick === void 0 ? void 0 : _props$onPanelClick.call(props, {
              e: e
            });
          }
        }, [["top", "left"].includes(props.presetsPlacement) ? vue.createVNode(TExtraContent, extraProps.value, null) : null, vue.createVNode(TPanelContent, panelContentProps.value, null), ["bottom", "right"].includes(props.presetsPlacement) ? vue.createVNode(TExtraContent, extraProps.value, null) : null]);
      };
    }
  });

  function ownKeys$1s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1s(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _DatePicker = vue.defineComponent({
    name: "TDatePicker",
    props: _objectSpread$1r({}, datePickerProps),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("date-picker");
      var _useSingle = useSingle(props2),
        inputValue = _useSingle.inputValue,
        popupVisible = _useSingle.popupVisible,
        inputProps = _useSingle.inputProps,
        popupProps = _useSingle.popupProps,
        isHoverCell = _useSingle.isHoverCell,
        cacheValue = _useSingle.cacheValue,
        value = _useSingle.value,
        year = _useSingle.year,
        month = _useSingle.month,
        time = _useSingle.time,
        inputRef = _useSingle.inputRef,
        onChange = _useSingle.onChange;
      var disabled = useFormDisabled();
      var formatRef = vue.computed(function () {
        return getDefaultFormat({
          mode: props2.mode,
          format: props2.format,
          valueType: props2.valueType,
          enableTimePicker: props2.enableTimePicker
        });
      });
      vue.watch(popupVisible, function (visible) {
        cacheValue.value = formatDate(value.value, {
          format: formatRef.value.format
        });
        inputValue.value = formatDate(value.value, {
          format: formatRef.value.format
        });
        if (visible) {
          year.value = parseToDayjs(value.value, formatRef.value.format).year();
          month.value = parseToDayjs(value.value, formatRef.value.format).month();
          time.value = formatTime(value.value, formatRef.value.timeFormat);
        } else {
          isHoverCell.value = false;
        }
      });
      function onCellMouseEnter(date) {
        isHoverCell.value = true;
        inputValue.value = formatDate(date, {
          format: formatRef.value.format
        });
      }
      function onCellMouseLeave() {
        isHoverCell.value = false;
        inputValue.value = formatDate(cacheValue.value, {
          format: formatRef.value.format
        });
      }
      function onCellClick(date) {
        var _props2$onPick;
        isHoverCell.value = false;
        if (props2.mode === "date") {
          year.value = date.getFullYear();
          month.value = date.getMonth();
        }
        if (props2.enableTimePicker) {
          cacheValue.value = formatDate(date, {
            format: formatRef.value.format
          });
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(date, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: parseToDayjs(date, formatRef.value.format),
            trigger: "pick"
          });
          popupVisible.value = false;
        }
        (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 ? void 0 : _props2$onPick.call(props2, date);
      }
      function onJumperClick(_ref) {
        var trigger = _ref.trigger;
        var monthCountMap = {
          date: 1,
          week: 1,
          month: 12,
          quarter: 12,
          year: 120
        };
        var monthCount = monthCountMap[props2.mode] || 0;
        var current = new Date(year.value, month.value);
        var next = null;
        if (trigger === "prev") {
          next = subtractMonth(current, monthCount);
        } else if (trigger === "current") {
          next = new Date();
        } else if (trigger === "next") {
          next = addMonth(current, monthCount);
        }
        var nextYear = next.getFullYear();
        var nextMonth = next.getMonth();
        year.value = nextYear;
        month.value = nextMonth;
      }
      function onTimePickerChange(val) {
        var _props2$onPick2;
        time.value = val;
        var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;
        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        var currentDate = !dayjs(inputValue.value, formatRef.value.format).isValid() ? dayjs() : dayjs(inputValue.value, formatRef.value.format);
        var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
        inputValue.value = formatDate(nextDate, {
          format: formatRef.value.format
        });
        cacheValue.value = formatDate(nextDate, {
          format: formatRef.value.format
        });
        (_props2$onPick2 = props2.onPick) === null || _props2$onPick2 === void 0 ? void 0 : _props2$onPick2.call(props2, nextDate);
      }
      function onConfirmClick() {
        var nextValue = formatDate(inputValue.value, {
          format: formatRef.value.format
        });
        if (nextValue) {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(inputValue.value, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: parseToDayjs(inputValue.value, formatRef.value.format),
            trigger: "confirm"
          });
        } else {
          inputValue.value = formatDate(value.value, {
            format: formatRef.value.format
          });
        }
        popupVisible.value = false;
      }
      function onPresetClick(presetValue) {
        var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;
        onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(presetVal, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: parseToDayjs(presetVal, formatRef.value.format),
          trigger: "preset"
        });
        popupVisible.value = false;
      }
      function onYearChange(nextYear) {
        year.value = nextYear;
      }
      function onMonthChange(nextMonth) {
        month.value = nextMonth;
      }
      var panelProps = vue.computed(function () {
        return {
          value: cacheValue.value,
          year: year.value,
          month: month.value,
          format: formatRef.value.format,
          mode: props2.mode,
          presets: props2.presets,
          time: time.value,
          disableDate: props2.disableDate,
          firstDayOfWeek: props2.firstDayOfWeek,
          timePickerProps: props2.timePickerProps,
          enableTimePicker: props2.enableTimePicker,
          presetsPlacement: props2.presetsPlacement,
          popupVisible: popupVisible.value,
          onCellClick: onCellClick,
          onCellMouseEnter: onCellMouseEnter,
          onCellMouseLeave: onCellMouseLeave,
          onJumperClick: onJumperClick,
          onConfirmClick: onConfirmClick,
          onPresetClick: onPresetClick,
          onYearChange: onYearChange,
          onMonthChange: onMonthChange,
          onTimePickerChange: onTimePickerChange,
          onPanelClick: function onPanelClick() {
            var _inputRef$value, _inputRef$value$focus;
            return (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 ? void 0 : (_inputRef$value$focus = _inputRef$value.focus) === null || _inputRef$value$focus === void 0 ? void 0 : _inputRef$value$focus.call(_inputRef$value);
          }
        };
      });
      return function () {
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [vue.createVNode(SelectInput, {
          "disabled": disabled.value,
          "value": inputValue.value,
          "status": props2.status,
          "tips": props2.tips,
          "clearable": props2.clearable,
          "popupProps": popupProps.value,
          "inputProps": inputProps.value,
          "popupVisible": popupVisible.value,
          "panel": function panel() {
            return vue.createVNode(TSinglePanel, panelProps.value, null);
          }
        }, null)]);
      };
    }
  });

  var datePickerPanelProps = {
    onCellClick: Function,
    onChange: Function,
    onConfirm: Function,
    onMonthChange: Function,
    onPanelClick: Function,
    onPresetClick: Function,
    onTimeChange: Function,
    onYearChange: Function
  };

  function ownKeys$1r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1r(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _DatePickerPanel = vue.defineComponent({
    name: "TDatePickerPanel",
    props: _objectSpread$1q({
      value: datePickerProps.value,
      defaultValue: datePickerProps.defaultValue,
      modelValue: datePickerProps.modelValue,
      disabled: datePickerProps.disabled,
      disableDate: datePickerProps.disableDate,
      enableTimePicker: datePickerProps.enableTimePicker,
      firstDayOfWeek: datePickerProps.firstDayOfWeek,
      format: datePickerProps.format,
      mode: datePickerProps.mode,
      presets: datePickerProps.presets,
      presetsPlacement: datePickerProps.presetsPlacement,
      timePickerProps: datePickerProps.timePickerProps
    }, datePickerPanelProps),
    setup: function setup(props) {
      var _useSingleValue = useSingleValue(props),
        cacheValue = _useSingleValue.cacheValue,
        value = _useSingleValue.value,
        year = _useSingleValue.year,
        month = _useSingleValue.month,
        time = _useSingleValue.time,
        onChange = _useSingleValue.onChange;
      var formatRef = vue.computed(function () {
        return getDefaultFormat({
          mode: props.mode,
          format: props.format,
          enableTimePicker: props.enableTimePicker
        });
      });
      function onCellClick(date, _ref) {
        var _props$onCellClick;
        var e = _ref.e;
        (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, {
          date: date,
          e: e
        });
        if (props.mode === "date") {
          year.value = date.getFullYear();
          month.value = date.getMonth();
        }
        if (props.enableTimePicker) {
          cacheValue.value = formatDate(date, {
            format: formatRef.value.format
          });
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(date, {
            format: formatRef.value.format
          }), {
            dayjsValue: parseToDayjs(date, formatRef.value.format),
            trigger: "pick"
          });
        }
      }
      function onJumperClick(_ref2) {
        var trigger = _ref2.trigger;
        var triggerMap = {
          prev: "arrow-previous",
          next: "arrow-next"
        };
        var monthCountMap = {
          date: 1,
          week: 1,
          month: 12,
          quarter: 12,
          year: 120
        };
        var monthCount = monthCountMap[props.mode] || 0;
        var current = new Date(year.value, month.value);
        var next = null;
        if (trigger === "prev") {
          next = subtractMonth(current, monthCount);
        } else if (trigger === "current") {
          next = new Date();
        } else if (trigger === "next") {
          next = addMonth(current, monthCount);
        }
        var nextYear = next.getFullYear();
        var nextMonth = next.getMonth();
        if (year.value !== nextYear) {
          var _props$onYearChange;
          (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, {
            year: nextYear,
            date: dayjs(value.value).toDate(),
            trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
          });
        }
        if (month.value !== nextMonth) {
          var _props$onMonthChange;
          (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, {
            month: nextMonth,
            date: dayjs(value.value).toDate(),
            trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
          });
        }
        year.value = nextYear;
        month.value = nextMonth;
      }
      function onTimePickerChange(val) {
        var _props$onTimeChange;
        time.value = val;
        var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;
        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        var currentDate = !dayjs(cacheValue.value, formatRef.value.format).isValid() ? dayjs() : dayjs(cacheValue.value, formatRef.value.format);
        var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
        cacheValue.value = formatDate(nextDate, {
          format: formatRef.value.format
        });
        (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 ? void 0 : _props$onTimeChange.call(props, {
          time: val,
          date: dayjs(value.value).toDate(),
          trigger: "time-hour"
        });
      }
      function onConfirmClick(_ref3) {
        var _props$onConfirm;
        var e = _ref3.e;
        onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(cacheValue.value, {
          format: formatRef.value.format
        }), {
          dayjsValue: parseToDayjs(cacheValue.value, formatRef.value.format),
          trigger: "confirm"
        });
        (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
          date: dayjs(cacheValue.value).toDate(),
          e: e
        });
      }
      function onPresetClick(presetValue, _ref4) {
        var _props$onPresetClick;
        var e = _ref4.e,
          preset = _ref4.preset;
        var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;
        onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(presetVal, {
          format: formatRef.value.format
        }), {
          dayjsValue: parseToDayjs(presetVal, formatRef.value.format),
          trigger: "preset"
        });
        (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 ? void 0 : _props$onPresetClick.call(props, {
          e: e,
          preset: preset
        });
      }
      function onYearChange(nextYear) {
        var _props$onYearChange2;
        year.value = nextYear;
        (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 ? void 0 : _props$onYearChange2.call(props, {
          year: year.value,
          date: dayjs(value.value).toDate(),
          trigger: "year-select"
        });
      }
      function onMonthChange(nextMonth) {
        var _props$onMonthChange2;
        month.value = nextMonth;
        (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 ? void 0 : _props$onMonthChange2.call(props, {
          month: month.value,
          date: dayjs(value.value).toDate(),
          trigger: "month-select"
        });
      }
      var panelProps = vue.computed(function () {
        return {
          value: cacheValue.value,
          year: year.value,
          month: month.value,
          mode: props.mode,
          format: formatRef.value.format,
          presets: props.presets,
          time: time.value,
          disableDate: props.disableDate,
          firstDayOfWeek: props.firstDayOfWeek,
          timePickerProps: props.timePickerProps,
          enableTimePicker: props.enableTimePicker,
          presetsPlacement: props.presetsPlacement,
          panelClick: props.onPanelClick,
          onCellClick: onCellClick,
          onJumperClick: onJumperClick,
          onConfirmClick: onConfirmClick,
          onPresetClick: onPresetClick,
          onYearChange: onYearChange,
          onMonthChange: onMonthChange,
          onTimePickerChange: onTimePickerChange
        };
      });
      return function () {
        return vue.createVNode(TSinglePanel, panelProps.value, null);
      };
    }
  });

  var dateRangePickerProps = {
    allowInput: Boolean,
    clearable: Boolean,
    disableDate: {
      type: [Object, Array, Function]
    },
    disabled: Boolean,
    enableTimePicker: Boolean,
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        if (!val) return true;
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": ""
    },
    mode: {
      type: String,
      "default": "date",
      validator: function validator(val) {
        if (!val) return true;
        return ["year", "quarter", "month", "week", "date"].includes(val);
      }
    },
    panelPreselection: {
      type: Boolean,
      "default": true
    },
    placeholder: {
      type: [String, Array]
    },
    popupProps: {
      type: Object
    },
    prefixIcon: {
      type: Function
    },
    presets: {
      type: Object
    },
    presetsPlacement: {
      type: String,
      "default": "bottom",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "top", "right", "bottom"].includes(val);
      }
    },
    rangeInputProps: {
      type: Object
    },
    separator: {
      type: String,
      "default": ""
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffixIcon: {
      type: Function
    },
    timePickerProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    modelValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    valueType: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["time-stamp", "Date", "YYYY", "YYYY-MM", "YYYY-MM-DD", "YYYY-MM-DD HH", "YYYY-MM-DD HH:mm", "YYYY-MM-DD HH:mm:ss", "YYYY-MM-DD HH:mm:ss:SSS"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onInput: Function,
    onPick: Function
  };

  var props$C = {
    activeIndex: {
      type: Number
    },
    clearable: Boolean,
    disabled: Boolean,
    format: {
      type: [Array, Function]
    },
    inputProps: {
      type: [Object, Array]
    },
    label: {
      type: [String, Function]
    },
    placeholder: {
      type: [String, Array]
    },
    prefixIcon: {
      type: Function
    },
    readonly: Boolean,
    separator: {
      type: [String, Function],
      "default": "-"
    },
    showClearIconOnEmpty: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onClick: Function,
    onEnter: Function,
    onFocus: Function,
    onMouseenter: Function,
    onMouseleave: Function
  };

  function ownKeys$1q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function calcArrayValue(value) {
    if (Array.isArray(value)) {
      return value;
    }
    return [value, value];
  }
  var _RangeInput = vue.defineComponent({
    name: "TRangeInput",
    props: props$C,
    setup: function setup(props2, _ref) {
      _ref.slots;
        var expose = _ref.expose;
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var classPrefix = usePrefixClass();
      var disabled = useFormDisabled();
      var COMPONENT_NAME = usePrefixClass("range-input");
      var _useGlobalIcon = useGlobalIcon({
          CloseCircleFilledIcon: closeCircleFilled
        }),
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;
      var renderTNodeJSX = useTNodeJSX();
      var focused = vue.ref(false);
      var isHover = vue.ref(false);
      var format = vue.computed(function () {
        return calcArrayValue(props2.format);
      });
      var inputProps = vue.computed(function () {
        return calcArrayValue(props2.inputProps);
      });
      var placeholder = vue.computed(function () {
        return calcArrayValue(props2.placeholder);
      });
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var isShowClearIcon = vue.computed(function () {
        var _props2$value;
        return (props2.clearable && ((_props2$value = props2.value) === null || _props2$value === void 0 ? void 0 : _props2$value.length) && !disabled.value || props2.showClearIconOnEmpty) && isHover.value;
      });
      var labelContent = renderTNodeJSX("label");
      var prefixIconContent = renderTNodeJSX("prefixIcon");
      var suffixContent = renderTNodeJSX("suffix");
      var suffixIconContent = renderTNodeJSX("suffixIcon");
      var inputRefs = {
        firstInputRef: vue.ref(),
        secondInputRef: vue.ref()
      };
      function handleClear(context) {
        var _props2$onClear;
        (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, context);
        setInnerValue(["", ""], _objectSpread$1p(_objectSpread$1p({}, context), {}, {
          trigger: "clear",
          position: "all"
        }));
      }
      function handleEnter(rangeValue, context) {
        var _props2$onEnter;
        (_props2$onEnter = props2.onEnter) === null || _props2$onEnter === void 0 ? void 0 : _props2$onEnter.call(props2, rangeValue, context);
      }
      function handleFocus(rangeValue, context) {
        var _props2$onFocus;
        focused.value = true;
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, rangeValue, context);
      }
      function handleBlur(rangeValue, context) {
        var _props2$onBlur;
        focused.value = false;
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, rangeValue, context);
      }
      function handleMouseEnter(e) {
        var _props2$onMouseenter;
        isHover.value = true;
        props2 === null || props2 === void 0 ? void 0 : (_props2$onMouseenter = props2.onMouseenter) === null || _props2$onMouseenter === void 0 ? void 0 : _props2$onMouseenter.call(props2, {
          e: e
        });
      }
      function handleMouseLeave(e) {
        var _props2$onMouseleave;
        isHover.value = false;
        props2 === null || props2 === void 0 ? void 0 : (_props2$onMouseleave = props2.onMouseleave) === null || _props2$onMouseleave === void 0 ? void 0 : _props2$onMouseleave.call(props2, {
          e: e
        });
      }
      expose({
        firstInputElement: inputRefs.firstInputRef.value,
        secondInputElement: inputRefs.secondInputRef.value,
        focus: function focus(options) {
          var _inputRefs$value;
          var _ref2 = options || {},
            _ref2$position = _ref2.position,
            position = _ref2$position === void 0 ? "first" : _ref2$position;
          (_inputRefs$value = inputRefs["".concat(position, "InputRef")].value) === null || _inputRefs$value === void 0 ? void 0 : _inputRefs$value.focus();
        },
        blur: function blur(options) {
          var _inputRefs$value2;
          var _ref3 = options || {},
            _ref3$position = _ref3.position,
            position = _ref3$position === void 0 ? "first" : _ref3$position;
          (_inputRefs$value2 = inputRefs["".concat(position, "InputRef")].value) === null || _inputRefs$value2 === void 0 ? void 0 : _inputRefs$value2.blur();
        },
        select: function select(options) {
          var _inputRefs$value3;
          var _ref4 = options || {},
            _ref4$position = _ref4.position,
            position = _ref4$position === void 0 ? "first" : _ref4$position;
          (_inputRefs$value3 = inputRefs["".concat(position, "InputRef")].value) === null || _inputRefs$value3 === void 0 ? void 0 : _inputRefs$value3.select();
        }
      });
      return function () {
        var _ref5, _innerValue$value, _innerValue$value6;
        return vue.createVNode("div", {
          "class": [COMPONENT_NAME.value, (_ref5 = {}, _defineProperty$3(_ref5, SIZE.value[props2.size], props2.size !== "medium"), _defineProperty$3(_ref5, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref5, STATUS.value.focused, focused.value), _defineProperty$3(_ref5, "".concat(COMPONENT_NAME.value, "--prefix"), prefixIconContent || labelContent), _defineProperty$3(_ref5, "".concat(COMPONENT_NAME.value, "--suffix"), suffixContent || suffixIconContent), _ref5)],
          "onMouseenter": handleMouseEnter,
          "onMouseleave": handleMouseLeave
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, [prefixIconContent, labelContent ? vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-input__prefix")
        }, [labelContent]) : null, vue.createVNode(Input, vue.mergeProps({
          "ref": inputRefs.firstInputRef,
          "class": "".concat(COMPONENT_NAME.value, "__inner-left"),
          "inputClass": _defineProperty$3({}, "".concat(classPrefix.value, "-is-focused"), props2.activeIndex === 0),
          "placeholder": placeholder.value[0],
          "disabled": disabled.value,
          "readonly": props2.readonly,
          "format": format.value[0],
          "value": (_innerValue$value = innerValue.value) === null || _innerValue$value === void 0 ? void 0 : _innerValue$value[0],
          "onClick": function onClick(_ref7) {
            var _props2$onClick;
            var e = _ref7.e;
            return (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
              e: e,
              position: "first"
            });
          },
          "onClear": function onClear() {
            return setInnerValue([], {
              position: "first",
              trigger: "input"
            });
          },
          "onEnter": function onEnter(val, _ref8) {
            var _innerValue$value2;
            var e = _ref8.e;
            return handleEnter([val, (_innerValue$value2 = innerValue.value) === null || _innerValue$value2 === void 0 ? void 0 : _innerValue$value2[1]], {
              e: e,
              position: "first"
            });
          },
          "onFocus": function onFocus(val, _ref9) {
            var _innerValue$value3;
            var e = _ref9.e;
            return handleFocus([val, (_innerValue$value3 = innerValue.value) === null || _innerValue$value3 === void 0 ? void 0 : _innerValue$value3[1]], {
              e: e,
              position: "first"
            });
          },
          "onBlur": function onBlur(val, _ref10) {
            var _innerValue$value4;
            var e = _ref10.e;
            return handleBlur([val, (_innerValue$value4 = innerValue.value) === null || _innerValue$value4 === void 0 ? void 0 : _innerValue$value4[1]], {
              e: e,
              position: "first"
            });
          },
          "onChange": function onChange(val, _ref11) {
            var _innerValue$value5;
            var e = _ref11.e;
            return setInnerValue([val, (_innerValue$value5 = innerValue.value) === null || _innerValue$value5 === void 0 ? void 0 : _innerValue$value5[1]], {
              e: e,
              position: "first",
              trigger: "input"
            });
          }
        }, inputProps.value[0]), null), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner-separator")
        }, [props2.separator]), vue.createVNode(Input, vue.mergeProps({
          "ref": inputRefs.secondInputRef,
          "class": "".concat(COMPONENT_NAME.value, "__inner-right"),
          "inputClass": _defineProperty$3({}, "".concat(classPrefix.value, "-is-focused"), props2.activeIndex === 1),
          "placeholder": placeholder.value[1],
          "disabled": disabled.value,
          "readonly": props2.readonly,
          "format": format.value[1],
          "value": (_innerValue$value6 = innerValue.value) === null || _innerValue$value6 === void 0 ? void 0 : _innerValue$value6[1],
          "onClick": function onClick(_ref13) {
            var _props2$onClick2;
            var e = _ref13.e;
            return (_props2$onClick2 = props2.onClick) === null || _props2$onClick2 === void 0 ? void 0 : _props2$onClick2.call(props2, {
              e: e,
              position: "second"
            });
          },
          "onClear": function onClear() {
            return setInnerValue([], {
              position: "second",
              trigger: "input"
            });
          },
          "onEnter": function onEnter(val, _ref14) {
            var _innerValue$value7;
            var e = _ref14.e;
            return handleEnter([(_innerValue$value7 = innerValue.value) === null || _innerValue$value7 === void 0 ? void 0 : _innerValue$value7[0], val], {
              e: e,
              position: "second"
            });
          },
          "onFocus": function onFocus(val, _ref15) {
            var _innerValue$value8;
            var e = _ref15.e;
            return handleFocus([(_innerValue$value8 = innerValue.value) === null || _innerValue$value8 === void 0 ? void 0 : _innerValue$value8[0], val], {
              e: e,
              position: "second"
            });
          },
          "onBlur": function onBlur(val, _ref16) {
            var _innerValue$value9;
            var e = _ref16.e;
            return handleBlur([(_innerValue$value9 = innerValue.value) === null || _innerValue$value9 === void 0 ? void 0 : _innerValue$value9[0], val], {
              e: e,
              position: "second"
            });
          },
          "onChange": function onChange(val, _ref17) {
            var _innerValue$value10;
            var e = _ref17.e;
            return setInnerValue([(_innerValue$value10 = innerValue.value) === null || _innerValue$value10 === void 0 ? void 0 : _innerValue$value10[0], val], {
              e: e,
              position: "second",
              trigger: "input"
            });
          }
        }, inputProps.value[1]), null), suffixContent ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__suffix")
        }, [suffixContent]) : null, suffixIconContent && vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__suffix ").concat(COMPONENT_NAME.value, "__suffix-icon")
        }, [isShowClearIcon.value ? vue.createVNode(CloseCircleFilledIcon, {
          "class": "".concat(COMPONENT_NAME.value, "__suffix-clear"),
          "onClick": handleClear
        }, null) : suffixIconContent])]), props2.tips && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__tips")
        }, [props2.tips])]);
      };
    }
  });

  var props$B = {
    autoWidth: Boolean,
    disabled: Boolean,
    inputValue: {
      type: Array,
      "default": void 0
    },
    defaultInputValue: {
      type: Array
    },
    panel: {
      type: Function
    },
    popupProps: {
      type: Object
    },
    popupVisible: Boolean,
    rangeInputProps: {
      type: Object
    },
    readonly: Boolean,
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    onInputChange: Function,
    onPopupVisibleChange: Function
  };

  function ownKeys$1p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1p(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _RangeInputPopup = vue.defineComponent({
    name: "TRangeInputPopup",
    props: props$B,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("range-input-popup");
      var _useOverlayInnerStyle = useOverlayInnerStyle(props2),
        tOverlayInnerStyle = _useOverlayInnerStyle.tOverlayInnerStyle,
        innerPopupVisible = _useOverlayInnerStyle.innerPopupVisible,
        onInnerPopupVisibleChange = _useOverlayInnerStyle.onInnerPopupVisibleChange;
      var popupClasses = vue.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--visible"), props2.popupVisible || innerPopupVisible.value)];
      });
      return function () {
        return vue.createVNode("div", {
          "class": popupClasses.value
        }, [vue.createVNode(Popup, vue.mergeProps({
          "hideEmptyPopup": true,
          "content": props2.panel,
          "trigger": "click",
          "placement": "bottom-left",
          "disabled": props2.disabled,
          "visible": props2.popupVisible || innerPopupVisible.value
        }, _objectSpread$1o({
          overlayInnerStyle: tOverlayInnerStyle.value,
          onVisibleChange: onInnerPopupVisibleChange
        }, props2.popupProps)), {
          "default": function _default() {
            return [vue.createVNode(_RangeInput, _objectSpread$1o({
              value: props2.inputValue,
              onChange: props2.onInputChange,
              disabled: props2.disabled,
              status: props2.status,
              tips: props2.tips
            }, props2.rangeInputProps), null)];
          }
        })]);
      };
    }
  });

  var RangeInput = withInstall(_RangeInput);
  var RangeInputPopup = withInstall(_RangeInputPopup);

  function ownKeys$1o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1o(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TRangePanel = vue.defineComponent({
    name: "TRangePanel",
    props: {
      hoverValue: Array,
      activeIndex: Number,
      isFirstValueSelected: Boolean,
      disableDate: [Object, Array, Function],
      mode: {
        type: String,
        "default": "date"
      },
      format: String,
      presetsPlacement: {
        type: String,
        "default": "bottom"
      },
      value: Array,
      timePickerProps: Object,
      presets: Object,
      popupVisible: Boolean,
      enableTimePicker: Boolean,
      panelPreselection: Boolean,
      firstDayOfWeek: Number,
      year: Array,
      month: Array,
      time: Array,
      onClick: Function,
      onCellClick: Function,
      onCellMouseEnter: Function,
      onCellMouseLeave: Function,
      onJumperClick: Function,
      onConfirmClick: Function,
      onPresetClick: Function,
      onYearChange: Function,
      onMonthChange: Function,
      onTimePickerChange: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-range-picker__panel");
      var _useConfig = useConfig("datePicker"),
        globalConfig = _useConfig.globalConfig;
      var _getDefaultFormat = getDefaultFormat({
          mode: props.mode,
          format: props.format,
          enableTimePicker: props.enableTimePicker
        }),
        format = _getDefaultFormat.format;
      var hidePreselection = !props.panelPreselection && props.value.length === 2;
      var disableDateOptions = vue.computed(function () {
        return useDisableDate({
          format: format,
          mode: props.mode,
          disableDate: props.disableDate,
          start: props.isFirstValueSelected && props.activeIndex === 1 ? new Date(parseToDayjs(props.value[0], format, "start").toDate().setHours(0, 0, 0)) : void 0,
          end: props.isFirstValueSelected && props.activeIndex === 0 ? new Date(parseToDayjs(props.value[1], format).toDate().setHours(23, 59, 59)) : void 0
        });
      });
      var startTableData = vue.computed(function () {
        return useTableData(_objectSpread$1n({
          isRange: true,
          start: props.value[0] ? parseToDayjs(props.value[0], format).toDate() : void 0,
          end: props.value[1] ? parseToDayjs(props.value[1], format).toDate() : void 0,
          hoverStart: !hidePreselection && props.hoverValue[0] ? parseToDayjs(props.hoverValue[0], format).toDate() : void 0,
          hoverEnd: !hidePreselection && props.hoverValue[1] ? parseToDayjs(props.hoverValue[1], format).toDate() : void 0,
          year: props.year[0],
          month: props.month[0],
          mode: props.mode,
          firstDayOfWeek: props.firstDayOfWeek || globalConfig.value.firstDayOfWeek
        }, disableDateOptions.value));
      });
      var endTableData = vue.computed(function () {
        return useTableData(_objectSpread$1n({
          isRange: true,
          start: props.value[0] ? parseToDayjs(props.value[0], format).toDate() : void 0,
          end: props.value[1] ? parseToDayjs(props.value[1], format).toDate() : void 0,
          hoverStart: !hidePreselection && props.hoverValue[0] ? parseToDayjs(props.hoverValue[0], format).toDate() : void 0,
          hoverEnd: !hidePreselection && props.hoverValue[1] ? parseToDayjs(props.hoverValue[1], format).toDate() : void 0,
          year: props.year[1],
          month: props.month[1],
          mode: props.mode,
          firstDayOfWeek: props.firstDayOfWeek || globalConfig.value.firstDayOfWeek
        }, disableDateOptions.value));
      });
      var panelContentProps = vue.computed(function () {
        return {
          format: format,
          mode: props.mode,
          firstDayOfWeek: props.firstDayOfWeek || globalConfig.value.firstDayOfWeek,
          popupVisible: props.popupVisible,
          enableTimePicker: props.enableTimePicker,
          timePickerProps: props.timePickerProps,
          onMonthChange: props.onMonthChange,
          onYearChange: props.onYearChange,
          onJumperClick: props.onJumperClick,
          onCellClick: props.onCellClick,
          onCellMouseEnter: props.onCellMouseEnter,
          onCellMouseLeave: props.onCellMouseLeave,
          onTimePickerChange: props.onTimePickerChange
        };
      });
      return function () {
        return vue.createVNode("div", {
          "class": [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--direction-row"), ["left", "right"].includes(props.presetsPlacement))],
          "onClick": function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        }, [["top", "left"].includes(props.presetsPlacement) ? vue.createVNode(TExtraContent, {
          "presets": props.presets,
          "selectedValue": props.value[props.activeIndex],
          "enableTimePicker": props.enableTimePicker,
          "onPresetClick": props.onPresetClick,
          "onConfirmClick": props.onConfirmClick,
          "presetsPlacement": props.presetsPlacement
        }, null) : null, vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-content-wrapper")
        }, [!props.enableTimePicker ? [vue.createVNode(TPanelContent, vue.mergeProps({
          "key": "startPanel",
          "partial": "start",
          "year": props.year[0],
          "month": props.month[0],
          "time": props.time[0],
          "value": props.value,
          "tableData": startTableData.value
        }, panelContentProps.value), null), vue.createVNode(TPanelContent, vue.mergeProps({
          "key": "endPanel",
          "partial": "end",
          "year": props.year[1],
          "month": props.month[1],
          "time": props.time[1],
          "value": props.value,
          "tableData": endTableData.value
        }, panelContentProps.value), null)] : vue.createVNode(TPanelContent, vue.mergeProps({
          "key": "start",
          "partial": props.activeIndex ? "end" : "start",
          "year": props.activeIndex ? props.year[1] : props.year[0],
          "month": props.activeIndex ? props.month[1] : props.month[0],
          "time": props.activeIndex ? props.time[1] : props.time[0],
          "value": props.value,
          "tableData": props.activeIndex ? endTableData.value : startTableData.value
        }, panelContentProps.value), null)]), ["bottom", "right"].includes(props.presetsPlacement) ? vue.createVNode(TExtraContent, {
          "presets": props.presets,
          "selectedValue": props.value[props.activeIndex],
          "enableTimePicker": props.enableTimePicker,
          "onPresetClick": props.onPresetClick,
          "onConfirmClick": props.onConfirmClick,
          "presetsPlacement": props.presetsPlacement
        }, null) : null]);
      };
    }
  });

  function initYearMonthTime(_ref) {
    var value = _ref.value,
      _ref$mode = _ref.mode,
      mode = _ref$mode === void 0 ? "date" : _ref$mode,
      format = _ref.format,
      _ref$timeFormat = _ref.timeFormat,
      timeFormat = _ref$timeFormat === void 0 ? "HH:mm:ss" : _ref$timeFormat,
      enableTimePicker = _ref.enableTimePicker;
    var defaultYearMonthTime = {
      year: [dayjs().year(), dayjs().year()],
      month: [dayjs().month(), dayjs().month()],
      time: [dayjs().format(timeFormat), dayjs().format(timeFormat)]
    };
    if (mode === "year") {
      defaultYearMonthTime.year[1] += 10;
    } else if (mode === "month" || mode === "quarter") {
      defaultYearMonthTime.year[1] += 1;
    } else if ((mode === "date" || mode === "week") && !enableTimePicker) {
      defaultYearMonthTime.month[1] += 1;
    }
    if (!value || !Array.isArray(value) || !value.length) {
      return defaultYearMonthTime;
    }
    return {
      year: value.map(function (v) {
        return parseToDayjs(v, format).year();
      }),
      month: value.map(function (v) {
        return parseToDayjs(v, format).month();
      }),
      time: value.map(function (v) {
        return parseToDayjs(v, format).format(timeFormat);
      })
    };
  }
  function useRangeValue(props) {
    var _toRefs = vue.toRefs(props),
      valueFromProps = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(valueFromProps, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      value = _useVModel2[0],
      onChange = _useVModel2[1];
    var formatRef = vue.computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        format: props.format,
        enableTimePicker: props.enableTimePicker
      });
    });
    if (props.enableTimePicker) {
      if (!extractTimeFormat(formatRef.value.format)) console.error("format: ".concat(formatRef.value.format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
    }
    if (!Array.isArray(value.value)) {
      console.error("typeof value: ".concat(value.value, " must be Array!"));
    } else if (!isValidDate(value.value, formatRef.value.format)) {
      console.error("value: ".concat(value.value, " is invalid dateTime! Check whether the value is consistent with format: ").concat(formatRef.value.format));
    }
    var isFirstValueSelected = vue.ref(false);
    var time = vue.ref(initYearMonthTime({
      value: value.value,
      mode: props.mode,
      format: formatRef.value.format,
      timeFormat: formatRef.value.timeFormat
    }).time);
    var month = vue.ref(initYearMonthTime({
      value: value.value,
      mode: props.mode,
      format: formatRef.value.format,
      enableTimePicker: props.enableTimePicker
    }).month);
    var year = vue.ref(initYearMonthTime({
      value: value.value,
      mode: props.mode,
      format: formatRef.value.format
    }).year);
    var cacheValue = vue.ref(formatDate(value.value, {
      format: formatRef.value.format
    }));
    vue.watchEffect(function () {
      if (!value.value) {
        cacheValue.value = [];
        return;
      }
      if (!isValidDate(value.value, formatRef.value.format)) return;
      cacheValue.value = formatDate(value.value, {
        format: formatRef.value.format
      });
      time.value = formatTime(value.value, formatRef.value.timeFormat);
    });
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      isFirstValueSelected: isFirstValueSelected,
      cacheValue: cacheValue,
      onChange: onChange
    };
  }

  function ownKeys$1n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1n(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var PARTIAL_MAP = {
    first: "start",
    second: "end"
  };
  function useRange(props) {
    var COMPONENT_NAME = usePrefixClass("date-range-picker");
    var _useConfig = useConfig("datePicker"),
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        CalendarIcon: calendar
      }),
      CalendarIcon = _useGlobalIcon.CalendarIcon;
    var renderTNodeJSX = useTNodeJSX();
    var isMountedRef = vue.ref(false);
    var inputRef = vue.ref();
    var _useRangeValue = useRangeValue(props),
      value = _useRangeValue.value,
      onChange = _useRangeValue.onChange,
      time = _useRangeValue.time,
      month = _useRangeValue.month,
      year = _useRangeValue.year,
      cacheValue = _useRangeValue.cacheValue,
      isFirstValueSelected = _useRangeValue.isFirstValueSelected;
    var formatRef = vue.computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        format: props.format,
        valueType: props.valueType,
        enableTimePicker: props.enableTimePicker
      });
    });
    var popupVisible = vue.ref(false);
    var isHoverCell = vue.ref(false);
    var activeIndex = vue.ref(0);
    var inputValue = vue.ref(formatDate(props.value, {
      format: formatRef.value.format
    }));
    var rangeInputProps = vue.computed(function () {
      return _objectSpread$1m(_objectSpread$1m({}, props.rangeInputProps), {}, {
        ref: inputRef,
        clearable: props.clearable,
        prefixIcon: function prefixIcon() {
          return renderTNodeJSX("prefixIcon");
        },
        readonly: !props.allowInput,
        separator: props.separator || globalConfig.value.rangeSeparator,
        placeholder: props.placeholder || globalConfig.value.placeholder[props.mode],
        activeIndex: popupVisible.value ? activeIndex.value : void 0,
        suffixIcon: function suffixIcon() {
          return renderTNodeJSX("suffixIcon") || vue.createVNode(CalendarIcon, null, null);
        },
        "class": _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__input--placeholder"), isHoverCell.value),
        onClick: function onClick(_ref) {
          var position = _ref.position;
          activeIndex.value = position === "first" ? 0 : 1;
        },
        onClear: function onClear(_ref2) {
          var e = _ref2.e;
          e.stopPropagation();
          popupVisible.value = false;
          onChange === null || onChange === void 0 ? void 0 : onChange([], {
            dayjsValue: [],
            trigger: "clear"
          });
        },
        onBlur: function onBlur(newVal, _ref3) {
          var _props$onBlur;
          var e = _ref3.e,
            position = _ref3.position;
          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, {
            value: newVal,
            partial: PARTIAL_MAP[position],
            e: e
          });
        },
        onFocus: function onFocus(newVal, _ref4) {
          var _props$onFocus;
          var e = _ref4.e,
            position = _ref4.position;
          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, {
            value: newVal,
            partial: PARTIAL_MAP[position],
            e: e
          });
          activeIndex.value = position === "first" ? 0 : 1;
        },
        onChange: function onChange(newVal, _ref5) {
          _ref5.e;
            _ref5.position;
          inputValue.value = newVal;
          if (!isValidDate(newVal, formatRef.value.format)) return;
          var newYear = [];
          var newMonth = [];
          var newTime = [];
          newVal.forEach(function (v, i) {
            newYear.push(dayjs(v).year() || year.value[i]);
            newMonth.push(dayjs(v).month() || month.value[i]);
            newTime.push(dayjs(v).format(formatRef.value.timeFormat) || time.value[i]);
          });
          year.value = newYear;
          month.value = newMonth;
          time.value = newTime;
        },
        onEnter: function onEnter(newVal) {
          if (!isValidDate(newVal, formatRef.value.format) && !isValidDate(value.value, formatRef.value.format)) return;
          popupVisible.value = false;
          if (isValidDate(newVal, formatRef.value.format)) {
            onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(newVal, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType,
              autoSwap: true
            }), {
              dayjsValue: newVal.map(function (v) {
                return parseToDayjs(v, formatRef.value.format);
              }),
              trigger: "enter"
            });
          } else if (isValidDate(value.value, formatRef.value.format)) {
            inputValue.value = formatDate(value.value, {
              format: formatRef.value.format
            });
          } else {
            inputValue.value = [];
          }
        }
      });
    });
    var popupProps = vue.computed(function () {
      var _props$popupProps$ove, _props$popupProps, _props$popupProps2;
      return _objectSpread$1m(_objectSpread$1m({
        expandAnimation: true
      }, props.popupProps), {}, {
        overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
          width: "auto"
        },
        overlayClassName: [(_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(COMPONENT_NAME.value, "__panel-container")],
        onVisibleChange: function onVisibleChange(visible, context) {
          var _props$popupProps3, _props$popupProps3$on;
          (_props$popupProps3 = props.popupProps) === null || _props$popupProps3 === void 0 ? void 0 : (_props$popupProps3$on = _props$popupProps3.onVisibleChange) === null || _props$popupProps3$on === void 0 ? void 0 : _props$popupProps3$on.call(_props$popupProps3, visible, context);
          if (context.trigger === "trigger-element-click") {
            var indexMap = {
              0: "first",
              1: "second"
            };
            inputRef.value.focus({
              position: indexMap[activeIndex.value]
            });
            popupVisible.value = true;
            return;
          }
          popupVisible.value = visible;
        }
      });
    });
    vue.watchEffect(function () {
      if (!value.value) {
        inputValue.value = [];
        return;
      }
      if (!isValidDate(value.value, formatRef.value.format)) return;
      inputValue.value = formatDate(value.value, {
        format: formatRef.value.format
      });
    });
    vue.watchEffect(function () {
      if (!isMountedRef.value) {
        isMountedRef.value = true;
        return;
      }
      var indexMap = {
        0: "first",
        1: "second"
      };
      inputRef.value.focus({
        position: indexMap[activeIndex.value]
      });
    });
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      inputValue: inputValue,
      popupVisible: popupVisible,
      rangeInputProps: rangeInputProps,
      popupProps: popupProps,
      isHoverCell: isHoverCell,
      activeIndex: activeIndex,
      isFirstValueSelected: isFirstValueSelected,
      cacheValue: cacheValue,
      onChange: onChange
    };
  }

  function ownKeys$1m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1m(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _DateRangePicker = vue.defineComponent({
    name: "TDateRangePicker",
    props: _objectSpread$1l({}, dateRangePickerProps),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("date-range-picker");
      var _useRange = useRange(props2),
        inputValue = _useRange.inputValue,
        popupVisible = _useRange.popupVisible,
        rangeInputProps = _useRange.rangeInputProps,
        popupProps = _useRange.popupProps,
        value = _useRange.value,
        year = _useRange.year,
        month = _useRange.month,
        time = _useRange.time,
        cacheValue = _useRange.cacheValue,
        activeIndex = _useRange.activeIndex,
        isHoverCell = _useRange.isHoverCell,
        isFirstValueSelected = _useRange.isFirstValueSelected,
        onChange = _useRange.onChange;
      var disabled = useFormDisabled();
      var formatRef = vue.computed(function () {
        return getDefaultFormat({
          mode: props2.mode,
          enableTimePicker: props2.enableTimePicker,
          format: props2.format,
          valueType: props2.valueType
        });
      });
      var isSelected = vue.ref(false);
      vue.watch(popupVisible, function (visible) {
        if (visible) {
          isSelected.value = false;
          cacheValue.value = formatDate(value.value || [], {
            format: formatRef.value.format
          });
          time.value = formatTime(value.value || [dayjs().format(formatRef.value.timeFormat), dayjs().format(formatRef.value.timeFormat)], formatRef.value.timeFormat);
          if (!value.value.length) {
            year.value = initYearMonthTime({
              value: value.value,
              mode: props2.mode,
              format: formatRef.value.format
            }).year;
            month.value = initYearMonthTime({
              value: value.value,
              mode: props2.mode,
              format: formatRef.value.format,
              enableTimePicker: props2.enableTimePicker
            }).month;
          } else if (value.value.length === 2 && !props2.enableTimePicker) {
            var nextMonth = value.value.map(function (v) {
              return parseToDayjs(v, formatRef.value.format).month();
            });
            if (year.value[0] === year.value[1] && nextMonth[0] === nextMonth[1]) {
              nextMonth[0] === 11 ? nextMonth[0] -= 1 : nextMonth[1] += 1;
            }
            month.value = nextMonth;
            year.value = value.value.map(function (v) {
              return parseToDayjs(v, formatRef.value.format).year();
            });
            if ((props2.mode === "month" || props2.mode === "quarter") && year.value[0] === year.value[1]) {
              year.value = [year.value[0], year.value[0] + 1];
            }
          } else {
            year.value = value.value.map(function (v) {
              return parseToDayjs(v, formatRef.value.format).year();
            });
            if (year.value.length === 1) year.value = [year.value[0], year.value[0]];
            month.value = value.value.map(function (v) {
              return parseToDayjs(v, formatRef.value.format).month();
            });
            if (month.value.length === 1) month.value = [month.value[0], Math.min(month.value[0] + 1, 11)];
          }
        } else {
          isHoverCell.value = false;
          isFirstValueSelected.value = false;
          inputValue.value = formatDate(value.value, {
            format: formatRef.value.format
          });
        }
      });
      function onCellMouseEnter(date) {
        isHoverCell.value = true;
        var nextValue = _toConsumableArray(inputValue.value);
        nextValue[activeIndex.value] = formatDate(date, {
          format: formatRef.value.format
        });
        inputValue.value = nextValue;
      }
      function onCellMouseLeave() {
        isHoverCell.value = false;
        inputValue.value = cacheValue.value;
      }
      function onCellClick(date, _ref) {
        var _props2$onPick;
        var e = _ref.e,
          partial = _ref.partial;
        (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 ? void 0 : _props2$onPick.call(props2, date, {
          e: e,
          partial: activeIndex.value ? "end" : "start"
        });
        isHoverCell.value = false;
        isSelected.value = true;
        var nextValue = _toConsumableArray(inputValue.value);
        nextValue[activeIndex.value] = formatDate(date, {
          format: formatRef.value.format
        });
        cacheValue.value = nextValue;
        inputValue.value = nextValue;
        if (props2.mode === "date") {
          var partialIndex = partial === "start" ? 0 : 1;
          var isAdditional = dayjs(date).month() !== month.value[partialIndex];
          if (isAdditional) {
            if (activeIndex.value === 0) month.value = [dayjs(date).month(), Math.min(dayjs(date).month() + 1, 11)];
            if (activeIndex.value === 1) month.value = [Math.max(dayjs(date).month() - 1, 0), dayjs(date).month()];
          }
        }
        if (props2.enableTimePicker) return;
        var notValidIndex = nextValue.findIndex(function (v) {
          return !v || !isValidDate(v, formatRef.value.format);
        });
        if (notValidIndex === -1 && nextValue.length === 2) {
          if (!isFirstValueSelected.value && parseToDayjs(nextValue[0], formatRef.value.format).isAfter(parseToDayjs(nextValue[1], formatRef.value.format))) {
            nextValue[activeIndex.value ? 0 : 1] = "";
            cacheValue.value = nextValue;
            inputValue.value = nextValue;
          } else {
            onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(nextValue, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType,
              autoSwap: true
            }), {
              dayjsValue: nextValue.map(function (v) {
                return parseToDayjs(v, formatRef.value.format);
              }),
              trigger: "pick"
            });
          }
        }
        if (!isFirstValueSelected.value) {
          var nextIndex = notValidIndex;
          if (nextIndex === -1) nextIndex = activeIndex.value ? 0 : 1;
          activeIndex.value = nextIndex;
          isFirstValueSelected.value = true;
        } else {
          popupVisible.value = false;
        }
      }
      function onJumperClick(_ref2) {
        var trigger = _ref2.trigger,
          partial = _ref2.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        var monthCountMap = {
          date: 1,
          week: 1,
          month: 12,
          quarter: 12,
          year: 120
        };
        var monthCount = monthCountMap[props2.mode] || 0;
        var current = new Date(year.value[partialIndex], month.value[partialIndex]);
        var next = null;
        if (trigger === "prev") {
          next = subtractMonth(current, monthCount);
        } else if (trigger === "current") {
          next = new Date();
        } else if (trigger === "next") {
          next = addMonth(current, monthCount);
        }
        var nextYear = _toConsumableArray(year.value);
        nextYear[partialIndex] = next.getFullYear();
        var nextMonth = _toConsumableArray(month.value);
        nextMonth[partialIndex] = next.getMonth();
        if (partialIndex === 0) {
          nextYear[1] = Math.max(nextYear[0], nextYear[1]);
          if (nextYear[0] === nextYear[1]) {
            nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
          }
        }
        if (partialIndex === 1) {
          nextYear[0] = Math.min(nextYear[0], nextYear[1]);
          if (nextYear[0] === nextYear[1]) {
            nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
          }
        }
        year.value = nextYear;
        month.value = nextMonth;
      }
      function onTimePickerChange(val) {
        var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;
        var nextInputValue = _toConsumableArray(inputValue.value);
        var changedInputValue = inputValue.value[activeIndex.value];
        var currentDate = !dayjs(changedInputValue, formatRef.value.format).isValid() ? dayjs().year(year.value[activeIndex.value]).month(month.value[activeIndex.value]) : dayjs(changedInputValue, formatRef.value.format);
        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
        nextInputValue[activeIndex.value] = nextDate;
        var nextTime = _toConsumableArray(time.value);
        nextTime[activeIndex.value] = val;
        time.value = nextTime;
        isSelected.value = true;
        inputValue.value = formatDate(nextInputValue, {
          format: formatRef.value.format
        });
        cacheValue.value = formatDate(nextInputValue, {
          format: formatRef.value.format
        });
      }
      function onConfirmClick() {
        var nextValue = _toConsumableArray(inputValue.value);
        var notValidIndex = nextValue.findIndex(function (v) {
          return !v || !isValidDate(v, formatRef.value.format);
        });
        if (notValidIndex === -1 && nextValue.length === 2) {
          if (!isFirstValueSelected.value && parseToDayjs(nextValue[0], formatRef.value.format).isAfter(parseToDayjs(nextValue[1], formatRef.value.format))) {
            nextValue[activeIndex.value ? 0 : 1] = "";
            cacheValue.value = nextValue;
            inputValue.value = nextValue;
          } else {
            onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(nextValue, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType,
              autoSwap: true
            }), {
              dayjsValue: nextValue.map(function (v) {
                return parseToDayjs(v, formatRef.value.format);
              }),
              trigger: "confirm"
            });
          }
        }
        if (!isFirstValueSelected.value) {
          var nextIndex = notValidIndex;
          if (nextIndex === -1) nextIndex = activeIndex.value ? 0 : 1;
          activeIndex.value = nextIndex;
          isFirstValueSelected.value = true;
        } else {
          popupVisible.value = false;
        }
      }
      function onPresetClick(preset) {
        var presetValue = preset;
        if (typeof preset === "function") {
          presetValue = preset();
        }
        if (!Array.isArray(presetValue)) {
          console.error("preset: ".concat(preset, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(presetValue, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType,
            autoSwap: true
          }), {
            dayjsValue: presetValue.map(function (p) {
              return parseToDayjs(p, formatRef.value.format);
            }),
            trigger: "preset"
          });
          popupVisible.value = false;
        }
      }
      function onYearChange(nextVal, _ref3) {
        var partial = _ref3.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        if (props2.enableTimePicker) partialIndex = activeIndex.value;
        var nextYear = _toConsumableArray(year.value);
        nextYear[partialIndex] = nextVal;
        if (partialIndex === 0) nextYear[1] = Math.max(nextYear[0], nextYear[1]);
        if (partialIndex === 1) nextYear[0] = Math.min(nextYear[0], nextYear[1]);
        year.value = nextYear;
      }
      function onMonthChange(nextVal, _ref4) {
        var partial = _ref4.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        if (props2.enableTimePicker) partialIndex = activeIndex.value;
        var nextMonth = _toConsumableArray(month.value);
        nextMonth[partialIndex] = nextVal;
        if (year[0] === year[1]) {
          if (partialIndex === 0) nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
          if (partialIndex === 1) nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
        }
        month.value = nextMonth;
      }
      var panelProps = vue.computed(function () {
        return {
          hoverValue: isHoverCell.value ? inputValue.value : [],
          value: isSelected.value ? cacheValue.value : value.value,
          isFirstValueSelected: isFirstValueSelected.value,
          activeIndex: activeIndex.value,
          year: year.value,
          month: month.value,
          format: formatRef.value.format,
          mode: props2.mode,
          presets: props2.presets,
          time: time.value,
          disableDate: props2.disableDate,
          firstDayOfWeek: props2.firstDayOfWeek,
          timePickerProps: props2.timePickerProps,
          enableTimePicker: props2.enableTimePicker,
          presetsPlacement: props2.presetsPlacement,
          popupVisible: popupVisible.value,
          panelPreselection: props2.panelPreselection,
          onCellClick: onCellClick,
          onCellMouseEnter: onCellMouseEnter,
          onCellMouseLeave: onCellMouseLeave,
          onJumperClick: onJumperClick,
          onConfirmClick: onConfirmClick,
          onPresetClick: onPresetClick,
          onYearChange: onYearChange,
          onMonthChange: onMonthChange,
          onTimePickerChange: onTimePickerChange
        };
      });
      return function () {
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [vue.createVNode(RangeInputPopup, {
          "disabled": disabled.value,
          "status": props2.status,
          "tips": props2.tips,
          "inputValue": inputValue.value,
          "popupProps": popupProps.value,
          "rangeInputProps": rangeInputProps.value,
          "popupVisible": popupVisible.value,
          "panel": function panel() {
            return vue.createVNode(TRangePanel, panelProps.value, null);
          }
        }, null)]);
      };
    }
  });

  var dateRangePickerPanelProps = {
    onCellClick: Function,
    onChange: Function,
    onConfirm: Function,
    onMonthChange: Function,
    onPanelClick: Function,
    onPresetClick: Function,
    onTimeChange: Function,
    onYearChange: Function
  };

  function ownKeys$1l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1l(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _DateRangePickerPanel = vue.defineComponent({
    name: "TDateRangePickerPanel",
    props: _objectSpread$1k({
      value: dateRangePickerProps.value,
      defaultValue: dateRangePickerProps.defaultValue,
      modelValue: dateRangePickerProps.modelValue,
      disabled: dateRangePickerProps.disabled,
      disableDate: dateRangePickerProps.disableDate,
      enableTimePicker: dateRangePickerProps.enableTimePicker,
      firstDayOfWeek: dateRangePickerProps.firstDayOfWeek,
      format: dateRangePickerProps.format,
      mode: dateRangePickerProps.mode,
      presets: dateRangePickerProps.presets,
      presetsPlacement: dateRangePickerProps.presetsPlacement,
      timePickerProps: dateRangePickerProps.timePickerProps,
      panelPreselection: dateRangePickerProps.panelPreselection
    }, dateRangePickerPanelProps),
    setup: function setup(props) {
      var _useRangeValue = useRangeValue(props),
        value = _useRangeValue.value,
        year = _useRangeValue.year,
        month = _useRangeValue.month,
        time = _useRangeValue.time,
        cacheValue = _useRangeValue.cacheValue,
        isFirstValueSelected = _useRangeValue.isFirstValueSelected,
        onChange = _useRangeValue.onChange;
      var formatRef = vue.computed(function () {
        return getDefaultFormat({
          mode: props.mode,
          enableTimePicker: props.enableTimePicker,
          format: props.format
        });
      });
      var isSelected = vue.ref(false);
      var isHoverCell = vue.ref(false);
      var hoverValue = vue.ref([]);
      var activeIndex = vue.computed(function () {
        return isFirstValueSelected.value ? 1 : 0;
      });
      function onCellMouseEnter(date) {
        isHoverCell.value = true;
        var nextValue = _toConsumableArray(hoverValue.value);
        nextValue[activeIndex.value] = formatDate(date, {
          format: formatRef.value.format
        });
        hoverValue.value = nextValue;
      }
      function onCellMouseLeave() {
        isHoverCell.value = false;
        hoverValue.value = cacheValue.value;
      }
      function onCellClick(date, _ref) {
        var _props$onCellClick;
        var e = _ref.e;
        (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, {
          e: e,
          partial: activeIndex.value ? "end" : "start",
          date: value.value.map(function (v) {
            return dayjs(v).toDate();
          })
        });
        isHoverCell.value = false;
        isSelected.value = true;
        var nextValue = _toConsumableArray(cacheValue.value);
        nextValue[activeIndex.value] = formatDate(date, {
          format: formatRef.value.format
        });
        cacheValue.value = nextValue;
        if (props.enableTimePicker) return;
        if (nextValue.length === 2 && isFirstValueSelected.value) {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(nextValue, {
            format: formatRef.value.format,
            autoSwap: true
          }), {
            dayjsValue: nextValue.map(function (v) {
              return parseToDayjs(v, formatRef.value.format);
            }),
            trigger: "pick"
          });
          isFirstValueSelected.value = false;
        } else {
          isFirstValueSelected.value = true;
        }
      }
      function onJumperClick(_ref2) {
        var trigger = _ref2.trigger,
          partial = _ref2.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        var triggerMap = {
          prev: "arrow-previous",
          next: "arrow-next"
        };
        var monthCountMap = {
          date: 1,
          month: 12,
          year: 120
        };
        var monthCount = monthCountMap[props.mode] || 0;
        var current = new Date(year.value[partialIndex], month.value[partialIndex]);
        var next = null;
        if (trigger === "prev") {
          next = subtractMonth(current, monthCount);
        } else if (trigger === "current") {
          next = new Date();
        } else if (trigger === "next") {
          next = addMonth(current, monthCount);
        }
        var nextYear = _toConsumableArray(year.value);
        nextYear[partialIndex] = next.getFullYear();
        var nextMonth = _toConsumableArray(month.value);
        nextMonth[partialIndex] = next.getMonth();
        if (partialIndex === 0) {
          nextYear[1] = Math.max(nextYear[0], nextYear[1]);
          if (nextYear[0] === nextYear[1]) {
            nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
          }
        }
        if (partialIndex === 1) {
          nextYear[0] = Math.min(nextYear[0], nextYear[1]);
          if (nextYear[0] === nextYear[1]) {
            nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
          }
        }
        if (year.value.some(function (y) {
          return !nextYear.includes(y);
        })) {
          var _props$onYearChange;
          (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, {
            partial: partial,
            year: nextYear[partialIndex],
            date: value.value.map(function (v) {
              return dayjs(v).toDate();
            }),
            trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
          });
        }
        if (month.value.some(function (m) {
          return !nextMonth.includes(m);
        })) {
          var _props$onMonthChange;
          (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, {
            partial: partial,
            month: nextMonth[partialIndex],
            date: value.value.map(function (v) {
              return dayjs(v).toDate();
            }),
            trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
          });
        }
        year.value = nextYear;
        month.value = nextMonth;
      }
      function onTimePickerChange(val) {
        var _props$onTimeChange;
        var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;
        var nextInputValue = _toConsumableArray(cacheValue.value);
        var changedInputValue = cacheValue.value[activeIndex.value];
        var currentDate = !dayjs(changedInputValue, formatRef.value.format).isValid() ? dayjs().year(year.value[activeIndex.value]).month(month.value[activeIndex.value]) : dayjs(changedInputValue, formatRef.value.format);
        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
        nextInputValue[activeIndex.value] = nextDate;
        var nextTime = _toConsumableArray(time.value);
        nextTime[activeIndex.value] = val;
        time.value = nextTime;
        isSelected.value = true;
        cacheValue.value = formatDate(nextInputValue, {
          format: formatRef.value.format
        });
        (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 ? void 0 : _props$onTimeChange.call(props, {
          time: val,
          date: value.value.map(function (v) {
            return parseToDayjs(v, formatRef.value.format).toDate();
          }),
          partial: activeIndex.value ? "end" : "start",
          trigger: "time-hour"
        });
      }
      function onConfirmClick(_ref3) {
        var _props$onConfirm;
        var e = _ref3.e;
        var nextValue = _toConsumableArray(cacheValue.value);
        if (nextValue.length === 2 && isFirstValueSelected.value) {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(nextValue, {
            format: formatRef.value.format,
            autoSwap: true
          }), {
            dayjsValue: nextValue.map(function (v) {
              return parseToDayjs(v, formatRef.value.format);
            }),
            trigger: "confirm"
          });
          year.value = nextValue.map(function (v) {
            return dayjs(v, formatRef.value.format).year();
          });
          month.value = nextValue.map(function (v) {
            return dayjs(v, formatRef.value.format).month();
          });
          isFirstValueSelected.value = false;
        } else {
          isFirstValueSelected.value = true;
        }
        (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
          date: value.value.map(function (v) {
            return dayjs(v).toDate();
          }),
          e: e
        });
      }
      function onPresetClick(preset) {
        var presetValue = preset;
        if (typeof preset === "function") {
          presetValue = preset();
        }
        if (!Array.isArray(presetValue)) {
          console.error("preset: ".concat(preset, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(presetValue, {
            format: formatRef.value.format,
            autoSwap: true
          }), {
            dayjsValue: presetValue.map(function (p) {
              return parseToDayjs(p, formatRef.value.format);
            }),
            trigger: "preset"
          });
        }
      }
      function onYearChange(nextVal, _ref4) {
        var _props$onYearChange2;
        var partial = _ref4.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        if (props.enableTimePicker) partialIndex = activeIndex.value;
        var nextYear = _toConsumableArray(year.value);
        nextYear[partialIndex] = nextVal;
        if (partialIndex === 0) nextYear[1] = Math.max(nextYear[0], nextYear[1]);
        if (partialIndex === 1) nextYear[0] = Math.min(nextYear[0], nextYear[1]);
        year.value = nextYear;
        (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 ? void 0 : _props$onYearChange2.call(props, {
          partial: partial,
          year: nextYear[partialIndex],
          date: value.value.map(function (v) {
            return dayjs(v).toDate();
          }),
          trigger: "year-select"
        });
      }
      function onMonthChange(nextVal, _ref5) {
        var _props$onMonthChange2;
        var partial = _ref5.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        if (props.enableTimePicker) partialIndex = activeIndex.value;
        var nextMonth = _toConsumableArray(month.value);
        nextMonth[partialIndex] = nextVal;
        if (year[0] === year[1]) {
          if (partialIndex === 0) nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
          if (partialIndex === 1) nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
        }
        month.value = nextMonth;
        (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 ? void 0 : _props$onMonthChange2.call(props, {
          partial: partial,
          month: nextMonth[partialIndex],
          date: value.value.map(function (v) {
            return dayjs(v).toDate();
          }),
          trigger: "month-select"
        });
      }
      var panelProps = vue.computed(function () {
        return {
          hoverValue: isHoverCell.value ? hoverValue.value : [],
          value: isSelected.value ? cacheValue.value : value.value,
          activeIndex: activeIndex.value,
          year: year.value,
          month: month.value,
          mode: props.mode,
          format: formatRef.value.format,
          presets: props.presets,
          time: time.value,
          disableDate: props.disableDate,
          firstDayOfWeek: props.firstDayOfWeek,
          timePickerProps: props.timePickerProps,
          enableTimePicker: props.enableTimePicker,
          presetsPlacement: props.presetsPlacement,
          panelPreselection: props.panelPreselection,
          panelClick: props.onPanelClick,
          onCellClick: onCellClick,
          onCellMouseEnter: onCellMouseEnter,
          onCellMouseLeave: onCellMouseLeave,
          onJumperClick: onJumperClick,
          onConfirmClick: onConfirmClick,
          onPresetClick: onPresetClick,
          onYearChange: onYearChange,
          onMonthChange: onMonthChange,
          onTimePickerChange: onTimePickerChange
        };
      });
      return function () {
        return vue.createVNode(TRangePanel, panelProps.value, null);
      };
    }
  });

  var DatePicker = withInstall(_DatePicker);
  var DatePickerPanel = withInstall(_DatePickerPanel);
  var DateRangePicker = withInstall(_DateRangePicker);
  var DateRangePickerPanel = withInstall(_DateRangePickerPanel);

  var baseGetTag$1 = _baseGetTag,
    isObjectLike$1 = isObjectLike_1;

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]';

  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */
  function isBoolean(value) {
    return value === true || value === false || isObjectLike$1(value) && baseGetTag$1(value) == boolTag;
  }
  var isBoolean_1 = isBoolean;

  var props$A = {
    colon: Boolean,
    data: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    errorMessage: {
      type: Object
    },
    formControlledComponents: {
      type: Array
    },
    labelAlign: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top"].includes(val);
      }
    },
    labelWidth: {
      type: [String, Number],
      "default": "100px"
    },
    layout: {
      type: String,
      "default": "vertical",
      validator: function validator(val) {
        if (!val) return true;
        return ["vertical", "inline"].includes(val);
      }
    },
    preventSubmitDefault: {
      type: Boolean,
      "default": true
    },
    requiredMark: {
      type: Boolean,
      "default": void 0
    },
    resetType: {
      type: String,
      "default": "empty",
      validator: function validator(val) {
        if (!val) return true;
        return ["empty", "initial"].includes(val);
      }
    },
    rules: {
      type: Object
    },
    scrollToFirstError: {
      type: String,
      "default": "",
      validator: function validator(val) {
        if (!val) return true;
        return ["", "smooth", "auto"].includes(val);
      }
    },
    showErrorMessage: {
      type: Boolean,
      "default": true
    },
    statusIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    submitWithWarningMessage: Boolean,
    onReset: Function,
    onSubmit: Function,
    onValidate: Function
  };

  function ownKeys$1k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1k(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Form = vue.defineComponent({
    name: "TForm",
    props: _objectSpread$1j({}, props$A),
    setup: function setup(props2, _ref) {
      var expose = _ref.expose;
      var renderContent = useTNodeJSX();
      var _toRefs = vue.toRefs(props2),
        disabled = _toRefs.disabled;
      vue.provide("formDisabled", {
        disabled: disabled
      });
      var formRef = vue.ref(null);
      var children = vue.ref([]);
      var _toRefs2 = vue.toRefs(props2),
        showErrorMessage = _toRefs2.showErrorMessage,
        labelWidth = _toRefs2.labelWidth,
        labelAlign = _toRefs2.labelAlign,
        data = _toRefs2.data,
        colon = _toRefs2.colon,
        requiredMark = _toRefs2.requiredMark,
        rules = _toRefs2.rules,
        errorMessage = _toRefs2.errorMessage,
        resetType = _toRefs2.resetType;
      vue.provide(FormInjectionKey, vue.reactive({
        showErrorMessage: showErrorMessage,
        labelWidth: labelWidth,
        labelAlign: labelAlign,
        data: data,
        colon: colon,
        requiredMark: requiredMark,
        rules: rules,
        errorMessage: errorMessage,
        resetType: resetType,
        children: children,
        renderContent: renderContent
      }));
      var COMPONENT_NAME = usePrefixClass("form");
      var CLASS_NAMES = useCLASSNAMES$1();
      var formClass = vue.computed(function () {
        return [CLASS_NAMES.value.form, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "-inline"), props2.layout === "inline")];
      });
      var FORM_ITEM_CLASS_PREFIX = usePrefixClass("form-item__");
      var getFirstError = function getFirstError(result) {
        if (isBoolean_1(result)) return "";
        var _Object$keys = Object.keys(result),
          _Object$keys2 = _slicedToArray(_Object$keys, 1),
          firstKey = _Object$keys2[0];
        if (props2.scrollToFirstError) {
          scrollTo(".".concat(FORM_ITEM_CLASS_PREFIX.value + firstKey));
        }
        var resArr = result[firstKey];
        if (!isArray_1(resArr)) return "";
        return resArr.filter(function (item) {
          return !item.result;
        })[0].message;
      };
      var scrollTo = function scrollTo(selector) {
        var _formRef$value;
        var dom = (_formRef$value = formRef.value) === null || _formRef$value === void 0 ? void 0 : _formRef$value.querySelector(selector);
        var behavior = props2.scrollToFirstError;
        if (behavior) {
          dom && dom.scrollIntoView({
            behavior: behavior
          });
        }
      };
      var needValidate = function needValidate(name, fields) {
        if (!fields || !Array.isArray(fields)) return true;
        return fields.indexOf("".concat(name)) !== -1;
      };
      var formatValidateResult = function formatValidateResult(validateResultList) {
        var result = validateResultList.reduce(function (r, err) {
          return Object.assign(r || {}, err);
        }, {});
        Object.keys(result).forEach(function (key) {
          if (result[key] === true) {
            delete result[key];
          }
        });
        return isEmpty_1(result) ? true : result;
      };
      var validate = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(param) {
          var _props2$onValidate;
          var _ref4, fields, _ref4$trigger, trigger, showErrorMessage2, list, arr, result, firstError;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _ref4 = param || {}, fields = _ref4.fields, _ref4$trigger = _ref4.trigger, trigger = _ref4$trigger === void 0 ? "all" : _ref4$trigger, showErrorMessage2 = _ref4.showErrorMessage;
                  list = children.value.filter(function (child) {
                    return isFunction_1(child.validate) && needValidate(String(child.name), fields);
                  }).map(function (child) {
                    return child.validate(trigger, showErrorMessage2);
                  });
                  _context.next = 4;
                  return Promise.all(list);
                case 4:
                  arr = _context.sent;
                  result = formatValidateResult(arr);
                  firstError = getFirstError(result);
                  (_props2$onValidate = props2.onValidate) === null || _props2$onValidate === void 0 ? void 0 : _props2$onValidate.call(props2, {
                    validateResult: result,
                    firstError: firstError
                  });
                  return _context.abrupt("return", result);
                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return function validate(_x) {
          return _ref3.apply(this, arguments);
        };
      }();
      var validateOnly = /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(params) {
          var _ref6, fields, _ref6$trigger, trigger, list, arr;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _ref6 = params || {}, fields = _ref6.fields, _ref6$trigger = _ref6.trigger, trigger = _ref6$trigger === void 0 ? "all" : _ref6$trigger;
                  list = children.value.filter(function (child) {
                    return isFunction_1(child.validateOnly) && needValidate(String(child.name), fields);
                  }).map(function (child) {
                    return child.validateOnly(trigger);
                  });
                  _context2.next = 4;
                  return Promise.all(list);
                case 4:
                  arr = _context2.sent;
                  return _context2.abrupt("return", formatValidateResult(arr));
                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));
        return function validateOnly(_x2) {
          return _ref5.apply(this, arguments);
        };
      }();
      var submitParams = vue.ref();
      var _onSubmit = function onSubmit(e) {
        if (props2.preventSubmitDefault && e) {
          e.preventDefault();
          e.stopPropagation();
        }
        validate(submitParams.value).then(function (r) {
          var _props2$onSubmit;
          (_props2$onSubmit = props2.onSubmit) === null || _props2$onSubmit === void 0 ? void 0 : _props2$onSubmit.call(props2, {
            validateResult: r,
            firstError: getFirstError(r),
            e: e
          });
        });
        submitParams.value = void 0;
      };
      var submit = /*#__PURE__*/function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(params) {
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  submitParams.value = params;
                  requestSubmit(formRef.value);
                case 2:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));
        return function submit(_x3) {
          return _ref7.apply(this, arguments);
        };
      }();
      var resetParams = vue.ref();
      var _onReset = function onReset(e) {
        var _props2$onReset;
        if (props2.preventSubmitDefault && e) {
          e.preventDefault();
          e.stopPropagation();
        }
        children.value.filter(function (child) {
          var _resetParams$value;
          return isFunction_1(child.resetField) && needValidate(String(child.name), (_resetParams$value = resetParams.value) === null || _resetParams$value === void 0 ? void 0 : _resetParams$value.fields);
        }).forEach(function (child) {
          var _resetParams$value2;
          return child.resetField((_resetParams$value2 = resetParams.value) === null || _resetParams$value2 === void 0 ? void 0 : _resetParams$value2.type);
        });
        resetParams.value = void 0;
        (_props2$onReset = props2.onReset) === null || _props2$onReset === void 0 ? void 0 : _props2$onReset.call(props2, {
          e: e
        });
      };
      var reset = function reset(params) {
        resetParams.value = params;
        formRef.value.reset();
      };
      var clearValidate = function clearValidate(fields) {
        children.value.forEach(function (child) {
          if (isFunction_1(child.resetHandler) && needValidate(String(child.name), fields)) {
            child.resetHandler();
          }
        });
      };
      var setValidateMessage = function setValidateMessage(validateMessage) {
        var keys = Object.keys(validateMessage);
        if (!keys.length) return;
        var list = children.value.filter(function (child) {
          return isFunction_1(child.setValidateMessage) && keys.includes("".concat(child.name));
        }).map(function (child) {
          return child.setValidateMessage(validateMessage[child.name]);
        });
        Promise.all(list);
      };
      expose({
        validate: validate,
        submit: submit,
        reset: reset,
        clearValidate: clearValidate,
        setValidateMessage: setValidateMessage,
        validateOnly: validateOnly
      });
      return function () {
        return vue.createVNode("form", {
          "ref": formRef,
          "class": formClass.value,
          "onSubmit": function onSubmit(e) {
            return _onSubmit(e);
          },
          "onReset": function onReset(e) {
            return _onReset(e);
          }
        }, [renderContent("default")]);
      };
    }
  });

  var baseSet = _baseSet;

  /**
   * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
   * it's created. Arrays are created for missing index properties while objects
   * are created for all other missing properties. Use `_.setWith` to customize
   * `path` creation.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.set(object, 'a[0].b.c', 4);
   * console.log(object.a[0].b.c);
   * // => 4
   *
   * _.set(object, ['x', '0', 'y', 'z'], 5);
   * console.log(object.x[0].y.z);
   * // => 5
   */
  function set(object, path, value) {
    return object == null ? object : baseSet(object, path, value);
  }
  var set_1 = set;

  var copyObject = _copyObject,
    createAssigner = _createAssigner,
    keysIn = keysIn_1;

  /**
   * This method is like `_.assignIn` except that it accepts `customizer`
   * which is invoked to produce the assigned values. If `customizer` returns
   * `undefined`, assignment is handled by the method instead. The `customizer`
   * is invoked with five arguments: (objValue, srcValue, key, object, source).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extendWith
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} [customizer] The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @see _.assignWith
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   return _.isUndefined(objValue) ? srcValue : objValue;
   * }
   *
   * var defaults = _.partialRight(_.assignInWith, customizer);
   *
   * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */
  var assignInWith$1 = createAssigner(function (object, source, srcIndex, customizer) {
    copyObject(source, keysIn(source), object, customizer);
  });
  var assignInWith_1 = assignInWith$1;

  var baseGetTag = _baseGetTag,
    isObjectLike = isObjectLike_1,
    isPlainObject = isPlainObject_1;

  /** `Object#toString` result references. */
  var domExcTag = '[object DOMException]',
    errorTag = '[object Error]';

  /**
   * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
   * `SyntaxError`, `TypeError`, or `URIError` object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
   * @example
   *
   * _.isError(new Error);
   * // => true
   *
   * _.isError(Error);
   * // => false
   */
  function isError$2(value) {
    if (!isObjectLike(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
  }
  var isError_1 = isError$2;

  var apply = _apply,
    baseRest = _baseRest,
    isError$1 = isError_1;

  /**
   * Attempts to invoke `func`, returning either the result or the caught error
   * object. Any additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {Function} func The function to attempt.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {*} Returns the `func` result or error object.
   * @example
   *
   * // Avoid throwing errors for invalid selectors.
   * var elements = _.attempt(function(selector) {
   *   return document.querySelectorAll(selector);
   * }, '>_>');
   *
   * if (_.isError(elements)) {
   *   elements = [];
   * }
   */
  var attempt$1 = baseRest(function (func, args) {
    try {
      return apply(func, undefined, args);
    } catch (e) {
      return isError$1(e) ? e : new Error(e);
    }
  });
  var attempt_1 = attempt$1;

  var arrayMap = _arrayMap;

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues$1(object, props) {
    return arrayMap(props, function (key) {
      return object[key];
    });
  }
  var _baseValues = baseValues$1;

  var eq = eq_1;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

  /**
   * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
   * of source objects to the destination object for all destination properties
   * that resolve to `undefined`.
   *
   * @private
   * @param {*} objValue The destination value.
   * @param {*} srcValue The source value.
   * @param {string} key The key of the property to assign.
   * @param {Object} object The parent object of `objValue`.
   * @returns {*} Returns the value to assign.
   */
  function customDefaultsAssignIn$1(objValue, srcValue, key, object) {
    if (objValue === undefined || eq(objValue, objectProto$1[key]) && !hasOwnProperty$1.call(object, key)) {
      return srcValue;
    }
    return objValue;
  }
  var _customDefaultsAssignIn = customDefaultsAssignIn$1;

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    "\u2028": 'u2028',
    "\u2029": 'u2029'
  };

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar$1(chr) {
    return '\\' + stringEscapes[chr];
  }
  var _escapeStringChar = escapeStringChar$1;

  /** Used to match template delimiters. */
  var reInterpolate$2 = /<%=([\s\S]+?)%>/g;
  var _reInterpolate = reInterpolate$2;

  var basePropertyOf = _basePropertyOf;

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar$1 = basePropertyOf(htmlEscapes);
  var _escapeHtmlChar = escapeHtmlChar$1;

  var escapeHtmlChar = _escapeHtmlChar,
    toString$1 = toString_1;

  /** Used to match HTML entities and HTML characters. */
  var reUnescapedHtml = /[&<>"']/g,
    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /**
   * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
   * corresponding HTML entities.
   *
   * **Note:** No other characters are escaped. To escape additional
   * characters use a third-party library like [_he_](https://mths.be/he).
   *
   * Though the ">" character is escaped for symmetry, characters like
   * ">" and "/" don't need escaping in HTML and have no special meaning
   * unless they're part of a tag or unquoted attribute value. See
   * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
   * (under "semi-related fun fact") for more details.
   *
   * When working with HTML you should always
   * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
   * XSS vectors.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escape('fred, barney, & pebbles');
   * // => 'fred, barney, &amp; pebbles'
   */
  function escape$2(string) {
    string = toString$1(string);
    return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
  }
  var _escape = escape$2;

  /** Used to match template delimiters. */
  var reEscape$1 = /<%-([\s\S]+?)%>/g;
  var _reEscape = reEscape$1;

  /** Used to match template delimiters. */
  var reEvaluate$1 = /<%([\s\S]+?)%>/g;
  var _reEvaluate = reEvaluate$1;

  var escape$1 = _escape,
    reEscape = _reEscape,
    reEvaluate = _reEvaluate,
    reInterpolate$1 = _reInterpolate;

  /**
   * By default, the template delimiters used by lodash are like those in
   * embedded Ruby (ERB) as well as ES2015 template strings. Change the
   * following template settings to use alternative delimiters.
   *
   * @static
   * @memberOf _
   * @type {Object}
   */
  var templateSettings$1 = {
    /**
     * Used to detect `data` property values to be HTML-escaped.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'escape': reEscape,
    /**
     * Used to detect code to be evaluated.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'evaluate': reEvaluate,
    /**
     * Used to detect `data` property values to inject.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'interpolate': reInterpolate$1,
    /**
     * Used to reference the data object in the template text.
     *
     * @memberOf _.templateSettings
     * @type {string}
     */
    'variable': '',
    /**
     * Used to import variables into the compiled template.
     *
     * @memberOf _.templateSettings
     * @type {Object}
     */
    'imports': {
      /**
       * A reference to the `lodash` function.
       *
       * @memberOf _.templateSettings.imports
       * @type {Function}
       */
      '_': {
        'escape': escape$1
      }
    }
  };
  var templateSettings_1 = templateSettings$1;

  var assignInWith = assignInWith_1,
    attempt = attempt_1,
    baseValues = _baseValues,
    customDefaultsAssignIn = _customDefaultsAssignIn,
    escapeStringChar = _escapeStringChar,
    isError = isError_1,
    isIterateeCall = _isIterateeCall,
    keys = keys_1,
    reInterpolate = _reInterpolate,
    templateSettings = templateSettings_1,
    toString = toString_1;

  /** Error message constants. */
  var INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
    reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
    reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Creates a compiled template function that can interpolate data properties
   * in "interpolate" delimiters, HTML-escape interpolated data properties in
   * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
   * properties may be accessed as free variables in the template. If a setting
   * object is given, it takes precedence over `_.templateSettings` values.
   *
   * **Note:** In the development build `_.template` utilizes
   * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
   * for easier debugging.
   *
   * For more information on precompiling templates see
   * [lodash's custom builds documentation](https://lodash.com/custom-builds).
   *
   * For more information on Chrome extension sandboxes see
   * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The template string.
   * @param {Object} [options={}] The options object.
   * @param {RegExp} [options.escape=_.templateSettings.escape]
   *  The HTML "escape" delimiter.
   * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
   *  The "evaluate" delimiter.
   * @param {Object} [options.imports=_.templateSettings.imports]
   *  An object to import into the template as free variables.
   * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
   *  The "interpolate" delimiter.
   * @param {string} [options.sourceURL='templateSources[n]']
   *  The sourceURL of the compiled template.
   * @param {string} [options.variable='obj']
   *  The data object variable name.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Function} Returns the compiled template function.
   * @example
   *
   * // Use the "interpolate" delimiter to create a compiled template.
   * var compiled = _.template('hello <%= user %>!');
   * compiled({ 'user': 'fred' });
   * // => 'hello fred!'
   *
   * // Use the HTML "escape" delimiter to escape data property values.
   * var compiled = _.template('<b><%- value %></b>');
   * compiled({ 'value': '<script>' });
   * // => '<b>&lt;script&gt;</b>'
   *
   * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
   * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the internal `print` function in "evaluate" delimiters.
   * var compiled = _.template('<% print("hello " + user); %>!');
   * compiled({ 'user': 'barney' });
   * // => 'hello barney!'
   *
   * // Use the ES template literal delimiter as an "interpolate" delimiter.
   * // Disable support by replacing the "interpolate" delimiter.
   * var compiled = _.template('hello ${ user }!');
   * compiled({ 'user': 'pebbles' });
   * // => 'hello pebbles!'
   *
   * // Use backslashes to treat delimiters as plain text.
   * var compiled = _.template('<%= "\\<%- value %\\>" %>');
   * compiled({ 'value': 'ignored' });
   * // => '<%- value %>'
   *
   * // Use the `imports` option to import `jQuery` as `jq`.
   * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
   * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the `sourceURL` option to specify a custom sourceURL for the template.
   * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
   * compiled(data);
   * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
   *
   * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
   * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
   * compiled.source;
   * // => function(data) {
   * //   var __t, __p = '';
   * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
   * //   return __p;
   * // }
   *
   * // Use custom template delimiters.
   * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
   * var compiled = _.template('hello {{ user }}!');
   * compiled({ 'user': 'mustache' });
   * // => 'hello mustache!'
   *
   * // Use the `source` property to inline compiled templates for meaningful
   * // line numbers in error messages and stack traces.
   * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
   *   var JST = {\
   *     "main": ' + _.template(mainText).source + '\
   *   };\
   * ');
   */
  function template(string, options, guard) {
    // Based on John Resig's `tmpl` implementation
    // (http://ejohn.org/blog/javascript-micro-templating/)
    // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    var settings = templateSettings.imports._.templateSettings || templateSettings;
    if (guard && isIterateeCall(string, options, guard)) {
      options = undefined;
    }
    string = toString(string);
    options = assignInWith({}, options, settings, customDefaultsAssignIn);
    var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
      importsKeys = keys(imports),
      importsValues = baseValues(imports, importsKeys);
    var isEscaping,
      isEvaluating,
      index = 0,
      interpolate = options.interpolate || reNoMatch,
      source = "__p += '";

    // Compile the regexp to match each delimiter.
    var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');

    // Use a sourceURL for easier debugging.
    // The sourceURL gets injected into the source that's eval-ed, so be careful
    // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
    // and escape the comment, thus injecting code that gets evaled.
    var sourceURL = hasOwnProperty.call(options, 'sourceURL') ? '//# sourceURL=' + (options.sourceURL + '').replace(/\s/g, ' ') + '\n' : '';
    string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
      interpolateValue || (interpolateValue = esTemplateValue);

      // Escape characters that can't be included in string literals.
      source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

      // Replace delimiters with snippets.
      if (escapeValue) {
        isEscaping = true;
        source += "' +\n__e(" + escapeValue + ") +\n'";
      }
      if (evaluateValue) {
        isEvaluating = true;
        source += "';\n" + evaluateValue + ";\n__p += '";
      }
      if (interpolateValue) {
        source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
      }
      index = offset + match.length;

      // The JS engine embedded in Adobe products needs `match` returned in
      // order to produce the correct `offset` value.
      return match;
    });
    source += "';\n";

    // If `variable` is not specified wrap a with-statement around the generated
    // code to add the data object to the top of the scope chain.
    var variable = hasOwnProperty.call(options, 'variable') && options.variable;
    if (!variable) {
      source = 'with (obj) {\n' + source + '\n}\n';
    }
    // Throw an error if a forbidden character was found in `variable`, to prevent
    // potential command injection attacks.
    else if (reForbiddenIdentifierChars.test(variable)) {
      throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
    }

    // Cleanup code by stripping empty strings.
    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');

    // Frame code as the function body.
    source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
    var result = attempt(function () {
      return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
    });

    // Provide the compiled function's source by its `toString` method or
    // the `source` property as a convenience for inlining compiled templates.
    result.source = source;
    if (isError(result)) {
      throw result;
    }
    return result;
  }
  var template_1 = template;

  var isDate$1 = {exports: {}};

  var merge = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = merge;
    function merge() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaults = arguments.length > 1 ? arguments[1] : undefined;
      for (var key in defaults) {
        if (typeof obj[key] === 'undefined') {
          obj[key] = defaults[key];
        }
      }
      return obj;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(merge, merge.exports);

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isDate;
    var _merge = _interopRequireDefault(merge.exports);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it;
      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          var F = function F() {};
          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e2) {
              throw _e2;
            },
            f: F
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true,
        didErr = false,
        err;
      return {
        s: function s() {
          it = o[Symbol.iterator]();
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e3) {
          didErr = true;
          err = _e3;
        },
        f: function f() {
          try {
            if (!normalCompletion && it["return"] != null) it["return"]();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var default_date_options = {
      format: 'YYYY/MM/DD',
      delimiters: ['/', '-'],
      strictMode: false
    };
    function isValidFormat(format) {
      return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
    }
    function zip(date, format) {
      var zippedArr = [],
        len = Math.min(date.length, format.length);
      for (var i = 0; i < len; i++) {
        zippedArr.push([date[i], format[i]]);
      }
      return zippedArr;
    }
    function isDate(input, options) {
      if (typeof options === 'string') {
        // Allow backward compatbility for old format isDate(input [, format])
        options = (0, _merge["default"])({
          format: options
        }, default_date_options);
      } else {
        options = (0, _merge["default"])(options, default_date_options);
      }
      if (typeof input === 'string' && isValidFormat(options.format)) {
        var formatDelimiter = options.delimiters.find(function (delimiter) {
          return options.format.indexOf(delimiter) !== -1;
        });
        var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function (delimiter) {
          return input.indexOf(delimiter) !== -1;
        });
        var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
        var dateObj = {};
        var _iterator = _createForOfIteratorHelper(dateAndFormat),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
              dateWord = _step$value[0],
              formatWord = _step$value[1];
            if (dateWord.length !== formatWord.length) {
              return false;
            }
            dateObj[formatWord.charAt(0)] = dateWord;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return new Date("".concat(dateObj.m, "/").concat(dateObj.d, "/").concat(dateObj.y)).getDate() === +dateObj.d;
      }
      if (!options.strictMode) {
        return Object.prototype.toString.call(input) === '[object Date]' && isFinite(input);
      }
      return false;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isDate$1, isDate$1.exports);
  var isDate = /*@__PURE__*/getDefaultExportFromCjs(isDate$1.exports);

  var isEmail$1 = {exports: {}};

  var assertString = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = assertString;
    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }
      return _typeof(obj);
    }
    function assertString(input) {
      var isString = typeof input === 'string' || input instanceof String;
      if (!isString) {
        var invalidType = _typeof(input);
        if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;
        throw new TypeError("Expected a string but received a ".concat(invalidType));
      }
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(assertString, assertString.exports);

  var isByteLength = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isByteLength;
    var _assertString = _interopRequireDefault(assertString.exports);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }
      return _typeof(obj);
    }

    /* eslint-disable prefer-rest-params */
    function isByteLength(str, options) {
      (0, _assertString["default"])(str);
      var min;
      var max;
      if (_typeof(options) === 'object') {
        min = options.min || 0;
        max = options.max;
      } else {
        // backwards compatibility: isByteLength(str, min [, max])
        min = arguments[1];
        max = arguments[2];
      }
      var len = encodeURI(str).split(/%..|./).length - 1;
      return len >= min && (typeof max === 'undefined' || len <= max);
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isByteLength, isByteLength.exports);

  var isFQDN = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isFQDN;
    var _assertString = _interopRequireDefault(assertString.exports);
    var _merge = _interopRequireDefault(merge.exports);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    var default_fqdn_options = {
      require_tld: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_numeric_tld: false,
      allow_wildcard: false
    };
    function isFQDN(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_fqdn_options);
      /* Remove the optional trailing dot before checking validity */

      if (options.allow_trailing_dot && str[str.length - 1] === '.') {
        str = str.substring(0, str.length - 1);
      }
      /* Remove the optional wildcard before checking validity */

      if (options.allow_wildcard === true && str.indexOf('*.') === 0) {
        str = str.substring(2);
      }
      var parts = str.split('.');
      var tld = parts[parts.length - 1];
      if (options.require_tld) {
        // disallow fqdns without tld
        if (parts.length < 2) {
          return false;
        }
        if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
          return false;
        } // disallow spaces

        if (/\s/.test(tld)) {
          return false;
        }
      } // reject numeric TLDs

      if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
        return false;
      }
      return parts.every(function (part) {
        if (part.length > 63) {
          return false;
        }
        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
          return false;
        } // disallow full-width chars

        if (/[\uff01-\uff5e]/.test(part)) {
          return false;
        } // disallow parts starting or ending with hyphen

        if (/^-|-$/.test(part)) {
          return false;
        }
        if (!options.allow_underscores && /_/.test(part)) {
          return false;
        }
        return true;
      });
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isFQDN, isFQDN.exports);

  var isIP = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isIP;
    var _assertString = _interopRequireDefault(assertString.exports);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    /**
    11.3.  Examples
    
       The following addresses
    
                 fe80::1234 (on the 1st link of the node)
                 ff02::5678 (on the 5th link of the node)
                 ff08::9abc (on the 10th organization of the node)
    
       would be represented as follows:
    
                 fe80::1234%1
                 ff02::5678%5
                 ff08::9abc%10
    
       (Here we assume a natural translation from a zone index to the
       <zone_id> part, where the Nth zone of any scope is translated into
       "N".)
    
       If we use interface names as <zone_id>, those addresses could also be
       represented as follows:
    
                fe80::1234%ne0
                ff02::5678%pvc1.3
                ff08::9abc%interface10
    
       where the interface "ne0" belongs to the 1st link, "pvc1.3" belongs
       to the 5th link, and "interface10" belongs to the 10th organization.
     * * */
    var IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';
    var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
    var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
    var IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';
    var IPv6AddressRegExp = new RegExp('^(' + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ')(%[0-9a-zA-Z-.:]{1,})?$');
    function isIP(str) {
      var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      (0, _assertString["default"])(str);
      version = String(version);
      if (!version) {
        return isIP(str, 4) || isIP(str, 6);
      }
      if (version === '4') {
        if (!IPv4AddressRegExp.test(str)) {
          return false;
        }
        var parts = str.split('.').sort(function (a, b) {
          return a - b;
        });
        return parts[3] <= 255;
      }
      if (version === '6') {
        return !!IPv6AddressRegExp.test(str);
      }
      return false;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isIP, isIP.exports);

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isEmail;
    var _assertString = _interopRequireDefault(assertString.exports);
    var _merge = _interopRequireDefault(merge.exports);
    var _isByteLength = _interopRequireDefault(isByteLength.exports);
    var _isFQDN = _interopRequireDefault(isFQDN.exports);
    var _isIP = _interopRequireDefault(isIP.exports);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    var default_email_options = {
      allow_display_name: false,
      require_display_name: false,
      allow_utf8_local_part: true,
      require_tld: true,
      blacklisted_chars: '',
      ignore_max_length: false,
      host_blacklist: []
    };
    /* eslint-disable max-len */

    /* eslint-disable no-control-regex */

    var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
    var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
    var gmailUserPart = /^[a-z\d]+$/;
    var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
    var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
    var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
    var defaultMaxEmailLength = 254;
    /* eslint-enable max-len */

    /* eslint-enable no-control-regex */

    /**
     * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2
     * @param {String} display_name
     */

    function validateDisplayName(display_name) {
      var display_name_without_quotes = display_name.replace(/^"(.+)"$/, '$1'); // display name with only spaces is not valid

      if (!display_name_without_quotes.trim()) {
        return false;
      } // check whether display name contains illegal character

      var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);
      if (contains_illegal) {
        // if contains illegal characters,
        // must to be enclosed in double-quotes, otherwise it's not a valid display name
        if (display_name_without_quotes === display_name) {
          return false;
        } // the quotes in display name must start with character symbol \

        var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;
        if (!all_start_with_back_slash) {
          return false;
        }
      }
      return true;
    }
    function isEmail(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_email_options);
      if (options.require_display_name || options.allow_display_name) {
        var display_email = str.match(splitNameAddress);
        if (display_email) {
          var display_name = display_email[1]; // Remove display name and angle brackets to get email address
          // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)

          str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name
          // because there may be a space between display name and email address
          // eg. myname <address@gmail.com>
          // the display name is `myname` instead of `myname `, so need to trim the last space

          if (display_name.endsWith(' ')) {
            display_name = display_name.substr(0, display_name.length - 1);
          }
          if (!validateDisplayName(display_name)) {
            return false;
          }
        } else if (options.require_display_name) {
          return false;
        }
      }
      if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
        return false;
      }
      var parts = str.split('@');
      var domain = parts.pop();
      var lower_domain = domain.toLowerCase();
      if (options.host_blacklist.includes(lower_domain)) {
        return false;
      }
      var user = parts.join('@');
      if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
        /*
          Previously we removed dots for gmail addresses before validating.
          This was removed because it allows `multiple..dots@gmail.com`
          to be reported as valid, but it is not.
          Gmail only normalizes single dots, removing them from here is pointless,
          should be done in normalizeEmail
        */
        user = user.toLowerCase(); // Removing sub-address from username before gmail validation

        var username = user.split('+')[0]; // Dots are not included in gmail length restriction

        if (!(0, _isByteLength["default"])(username.replace(/\./g, ''), {
          min: 6,
          max: 30
        })) {
          return false;
        }
        var _user_parts = username.split('.');
        for (var i = 0; i < _user_parts.length; i++) {
          if (!gmailUserPart.test(_user_parts[i])) {
            return false;
          }
        }
      }
      if (options.ignore_max_length === false && (!(0, _isByteLength["default"])(user, {
        max: 64
      }) || !(0, _isByteLength["default"])(domain, {
        max: 254
      }))) {
        return false;
      }
      if (!(0, _isFQDN["default"])(domain, {
        require_tld: options.require_tld
      })) {
        if (!options.allow_ip_domain) {
          return false;
        }
        if (!(0, _isIP["default"])(domain)) {
          if (!domain.startsWith('[') || !domain.endsWith(']')) {
            return false;
          }
          var noBracketdomain = domain.substr(1, domain.length - 2);
          if (noBracketdomain.length === 0 || !(0, _isIP["default"])(noBracketdomain)) {
            return false;
          }
        }
      }
      if (user[0] === '"') {
        user = user.slice(1, user.length - 1);
        return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
      }
      var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
      var user_parts = user.split('.');
      for (var _i = 0; _i < user_parts.length; _i++) {
        if (!pattern.test(user_parts[_i])) {
          return false;
        }
      }
      if (options.blacklisted_chars) {
        if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), 'g')) !== -1) return false;
      }
      return true;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isEmail$1, isEmail$1.exports);
  var isEmail = /*@__PURE__*/getDefaultExportFromCjs(isEmail$1.exports);

  var isURL$1 = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isURL;
    var _assertString = _interopRequireDefault(assertString.exports);
    var _isFQDN = _interopRequireDefault(isFQDN.exports);
    var _isIP = _interopRequireDefault(isIP.exports);
    var _merge = _interopRequireDefault(merge.exports);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    /*
    options for isURL method
    
    require_protocol - if set as true isURL will return false if protocol is not present in the URL
    require_valid_protocol - isURL will check if the URL's protocol is present in the protocols option
    protocols - valid protocols can be modified with this option
    require_host - if set as false isURL will not check if host is present in the URL
    require_port - if set as true isURL will check if port is present in the URL
    allow_protocol_relative_urls - if set as true protocol relative URLs will be allowed
    validate_length - if set as false isURL will skip string length validation (IE maximum is 2083)
    
    */
    var default_url_options = {
      protocols: ['http', 'https', 'ftp'],
      require_tld: true,
      require_protocol: false,
      require_host: true,
      require_port: false,
      require_valid_protocol: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_protocol_relative_urls: false,
      allow_fragments: true,
      allow_query_components: true,
      validate_length: true
    };
    var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;
    function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
    }
    function checkHost(host, matches) {
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];
        if (host === match || isRegExp(match) && match.test(host)) {
          return true;
        }
      }
      return false;
    }
    function isURL(url, options) {
      (0, _assertString["default"])(url);
      if (!url || /[\s<>]/.test(url)) {
        return false;
      }
      if (url.indexOf('mailto:') === 0) {
        return false;
      }
      options = (0, _merge["default"])(options, default_url_options);
      if (options.validate_length && url.length >= 2083) {
        return false;
      }
      if (!options.allow_fragments && url.includes('#')) {
        return false;
      }
      if (!options.allow_query_components && (url.includes('?') || url.includes('&'))) {
        return false;
      }
      var protocol, auth, host, hostname, port, port_str, split, ipv6;
      split = url.split('#');
      url = split.shift();
      split = url.split('?');
      url = split.shift();
      split = url.split('://');
      if (split.length > 1) {
        protocol = split.shift().toLowerCase();
        if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
          return false;
        }
      } else if (options.require_protocol) {
        return false;
      } else if (url.substr(0, 2) === '//') {
        if (!options.allow_protocol_relative_urls) {
          return false;
        }
        split[0] = url.substr(2);
      }
      url = split.join('://');
      if (url === '') {
        return false;
      }
      split = url.split('/');
      url = split.shift();
      if (url === '' && !options.require_host) {
        return true;
      }
      split = url.split('@');
      if (split.length > 1) {
        if (options.disallow_auth) {
          return false;
        }
        if (split[0] === '') {
          return false;
        }
        auth = split.shift();
        if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
          return false;
        }
        var _auth$split = auth.split(':'),
          _auth$split2 = _slicedToArray(_auth$split, 2),
          user = _auth$split2[0],
          password = _auth$split2[1];
        if (user === '' && password === '') {
          return false;
        }
      }
      hostname = split.join('@');
      port_str = null;
      ipv6 = null;
      var ipv6_match = hostname.match(wrapped_ipv6);
      if (ipv6_match) {
        host = '';
        ipv6 = ipv6_match[1];
        port_str = ipv6_match[2] || null;
      } else {
        split = hostname.split(':');
        host = split.shift();
        if (split.length) {
          port_str = split.join(':');
        }
      }
      if (port_str !== null && port_str.length > 0) {
        port = parseInt(port_str, 10);
        if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
          return false;
        }
      } else if (options.require_port) {
        return false;
      }
      if (options.host_whitelist) {
        return checkHost(host, options.host_whitelist);
      }
      if (!(0, _isIP["default"])(host) && !(0, _isFQDN["default"])(host, options) && (!ipv6 || !(0, _isIP["default"])(ipv6, 6))) {
        return false;
      }
      host = host || ipv6;
      if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
        return false;
      }
      return true;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isURL$1, isURL$1.exports);
  var isURL = /*@__PURE__*/getDefaultExportFromCjs(isURL$1.exports);

  function ownKeys$1j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1j(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function isValueEmpty(val) {
    var type = Object.prototype.toString.call(val);
    var typeMap = {
      Date: "[object Date]"
    };
    if (type === typeMap.Date) {
      return false;
    }
    return _typeof$2(val) === "object" ? isEmpty_1(val) : ["", void 0, null].includes(val);
  }
  var VALIDATE_MAP = {
    date: isDate,
    url: isURL,
    email: isEmail,
    required: function required(val) {
      return !isValueEmpty(val);
    },
    whitespace: function whitespace(val) {
      return !(/^\s+$/.test(val) || val === "");
    },
    "boolean": function boolean(val) {
      return typeof val === "boolean";
    },
    max: function max(val, num) {
      return isNumber_1(val) ? val <= num : getCharacterLength(val) <= num;
    },
    min: function min(val, num) {
      return isNumber_1(val) ? val >= num : getCharacterLength(val) >= num;
    },
    len: function len(val, num) {
      return getCharacterLength(val) === num;
    },
    number: function number(val) {
      return isNumber_1(val);
    },
    "enum": function _enum(val, strs) {
      return strs.includes(val);
    },
    idcard: function idcard(val) {
      return /^(\d{18,18}|\d{15,15}|\d{17,17}x)$/i.test(val);
    },
    telnumber: function telnumber(val) {
      return /^1[3-9]\d{9}$/.test(val);
    },
    pattern: function pattern(val, regexp) {
      return regexp.test(val);
    },
    validator: function validator(val, validate2) {
      return validate2(val);
    }
  };
  function validateOneRule(_x, _x2) {
    return _validateOneRule.apply(this, arguments);
  }
  function _validateOneRule() {
    _validateOneRule = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(value, rule) {
      var validateResult, keys, vOptions, vValidateFun, i, key, validateRule;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              validateResult = {
                result: true
              };
              keys = Object.keys(rule);
              i = 0;
            case 3:
              if (!(i < keys.length)) {
                _context.next = 15;
                break;
              }
              key = keys[i];
              if (!(!rule.required && isValueEmpty(value) && !rule.validator)) {
                _context.next = 7;
                break;
              }
              return _context.abrupt("return", validateResult);
            case 7:
              validateRule = VALIDATE_MAP[key];
              if (!(validateRule && rule[key])) {
                _context.next = 12;
                break;
              }
              vOptions = rule[key] === true ? void 0 : rule[key];
              vValidateFun = validateRule;
              return _context.abrupt("break", 15);
            case 12:
              i++;
              _context.next = 3;
              break;
            case 15:
              if (!vValidateFun) {
                _context.next = 23;
                break;
              }
              _context.next = 18;
              return vValidateFun(value, vOptions);
            case 18:
              validateResult = _context.sent;
              if (!(typeof validateResult === "boolean")) {
                _context.next = 21;
                break;
              }
              return _context.abrupt("return", _objectSpread$1i(_objectSpread$1i({}, rule), {}, {
                result: validateResult
              }));
            case 21:
              if (!(_typeof$2(validateResult) === "object")) {
                _context.next = 23;
                break;
              }
              return _context.abrupt("return", validateResult);
            case 23:
              return _context.abrupt("return", validateResult);
            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _validateOneRule.apply(this, arguments);
  }
  function validate(_x3, _x4) {
    return _validate.apply(this, arguments);
  }
  function _validate() {
    _validate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(value, rules) {
      var all, r;
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              all = rules.map(function (rule) {
                return validateOneRule(value, rule);
              });
              _context2.next = 3;
              return Promise.all(all);
            case 3:
              r = _context2.sent;
              return _context2.abrupt("return", r);
            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _validate.apply(this, arguments);
  }

  var props$z = {
    "for": {
      type: String,
      "default": ""
    },
    help: {
      type: [String, Function]
    },
    label: {
      type: [String, Function],
      "default": ""
    },
    labelAlign: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top"].includes(val);
      }
    },
    labelWidth: {
      type: [String, Number]
    },
    name: {
      type: [String, Number]
    },
    requiredMark: {
      type: Boolean,
      "default": void 0
    },
    rules: {
      type: Array
    },
    showErrorMessage: {
      type: Boolean,
      "default": void 0
    },
    statusIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    successBorder: Boolean
  };

  function ownKeys$1i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1i(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _FormItem = vue.defineComponent({
    name: "TFormItem",
    props: _objectSpread$1h({}, props$z),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderContent = useTNodeJSX();
      var CLASS_NAMES = useCLASSNAMES$1();
      var _useConfig = useConfig("form"),
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          CheckCircleFilledIcon: checkCircleFilled,
          CloseCircleFilledIcon: closeCircleFilled,
          ErrorCircleFilledIcon: errorCircleFilled
        }),
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
      var form = vue.inject(FormInjectionKey, void 0);
      var FORM_ITEM_CLASS_PREFIX = usePrefixClass("form-item__");
      var needRequiredMark = vue.computed(function () {
        var _ref2, _props2$requiredMark;
        var requiredMark = (_ref2 = (_props2$requiredMark = props2.requiredMark) !== null && _props2$requiredMark !== void 0 ? _props2$requiredMark : form === null || form === void 0 ? void 0 : form.requiredMark) !== null && _ref2 !== void 0 ? _ref2 : globalConfig.value.requiredMark;
        var isRequired = innerRules.value.filter(function (rule) {
          return rule.required;
        }).length > 0;
        return requiredMark !== null && requiredMark !== void 0 ? requiredMark : isRequired;
      });
      var hasLabel = vue.computed(function () {
        return slots.label || props2.label;
      });
      var hasColon = vue.computed(function () {
        return !!(form !== null && form !== void 0 && form.colon && hasLabel.value);
      });
      var FROM_LABEL = usePrefixClass("form__label");
      var labelAlign = vue.computed(function () {
        return isNil_1(props2.labelAlign) ? form === null || form === void 0 ? void 0 : form.labelAlign : props2.labelAlign;
      });
      var labelWidth = vue.computed(function () {
        return isNil_1(props2.labelWidth) ? form === null || form === void 0 ? void 0 : form.labelWidth : props2.labelWidth;
      });
      var labelClasses = vue.computed(function () {
        var _ref3;
        return [CLASS_NAMES.value.label, (_ref3 = {}, _defineProperty$3(_ref3, "".concat(FROM_LABEL.value, "--required"), needRequiredMark.value), _defineProperty$3(_ref3, "".concat(FROM_LABEL.value, "--colon"), hasColon.value), _defineProperty$3(_ref3, "".concat(FROM_LABEL.value, "--top"), hasLabel.value && (labelAlign.value === "top" || !labelWidth.value)), _defineProperty$3(_ref3, "".concat(FROM_LABEL.value, "--left"), labelAlign.value === "left" && labelWidth.value), _defineProperty$3(_ref3, "".concat(FROM_LABEL.value, "--right"), labelAlign.value === "right" && labelWidth.value), _ref3)];
      });
      var renderLabel = function renderLabel() {
        if (Number(labelWidth.value) === 0) return;
        var labelStyle = {};
        if (labelWidth.value && labelAlign.value !== "top") {
          if (typeof labelWidth.value === "number") {
            labelStyle = {
              width: "".concat(labelWidth.value, "px")
            };
          } else {
            labelStyle = {
              width: labelWidth.value
            };
          }
        }
        return vue.createVNode("div", {
          "class": labelClasses.value,
          "style": labelStyle
        }, [vue.createVNode("label", {
          "for": props2["for"]
        }, [renderContent("label")])]);
      };
      var getDefaultIcon = function getDefaultIcon() {
        var resultIcon = function resultIcon(Icon) {
          return vue.createVNode("span", {
            "class": CLASS_NAMES.value.status
          }, [vue.createVNode(Icon, null, null)]);
        };
        var list = errorList.value;
        if (verifyStatus.value === ValidateStatus.SUCCESS) {
          return resultIcon(CheckCircleFilledIcon);
        }
        if (list !== null && list !== void 0 && list[0]) {
          var type = list[0].type || "error";
          var icon = {
            error: CloseCircleFilledIcon,
            warning: ErrorCircleFilledIcon
          }[type] || CheckCircleFilledIcon;
          return resultIcon(icon);
        }
        return null;
      };
      var renderSuffixIcon = function renderSuffixIcon() {
        var statusIcon = props2.statusIcon;
        if (statusIcon === false) return;
        var resultIcon = renderContent("statusIcon", {
          defaultNode: getDefaultIcon()
        });
        if (resultIcon) return vue.createVNode("span", {
          "class": CLASS_NAMES.value.status
        }, [resultIcon]);
        if (resultIcon === false) return;
        resultIcon = form === null || form === void 0 ? void 0 : form.renderContent("statusIcon", {
          defaultNode: getDefaultIcon()
        });
        if (resultIcon) return resultIcon;
      };
      var errorClasses = vue.computed(function () {
        if (!showErrorMessage.value) return "";
        if (verifyStatus.value === ValidateStatus.SUCCESS) {
          return props2.successBorder ? [CLASS_NAMES.value.success, CLASS_NAMES.value.successBorder].join(" ") : CLASS_NAMES.value.success;
        }
        if (!errorList.value.length) return;
        var type = errorList.value[0].type || "error";
        return type === "error" ? CLASS_NAMES.value.error : CLASS_NAMES.value.warning;
      });
      var contentClasses = vue.computed(function () {
        return [CLASS_NAMES.value.controls, errorClasses.value];
      });
      var contentStyle = vue.computed(function () {
        var contentStyle2 = {};
        if (labelWidth.value && labelAlign.value !== "top") {
          if (typeof labelWidth.value === "number") {
            contentStyle2 = {
              marginLeft: "".concat(labelWidth.value, "px")
            };
          } else {
            contentStyle2 = {
              marginLeft: labelWidth.value
            };
          }
        }
        return contentStyle2;
      });
      var errorList = vue.ref([]);
      var successList = vue.ref([]);
      var verifyStatus = vue.ref(ValidateStatus.TO_BE_VALIDATED);
      var resetValidating = vue.ref(false);
      var needResetField = vue.ref(false);
      var resetHandler = function resetHandler() {
        needResetField.value = false;
        errorList.value = [];
        successList.value = [];
        verifyStatus.value = ValidateStatus.TO_BE_VALIDATED;
      };
      var getEmptyValue = function getEmptyValue() {
        var type = Object.prototype.toString.call(get_1(form === null || form === void 0 ? void 0 : form.data, props2.name));
        var emptyValue;
        if (type === "[object String]") {
          emptyValue = "";
        }
        if (type === "[object Array]") {
          emptyValue = [];
        }
        if (type === "[object Object]") {
          emptyValue = {};
        }
        return emptyValue;
      };
      var resetField = /*#__PURE__*/function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var resetType,
            _args = arguments;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  resetType = _args.length > 0 && _args[0] !== undefined ? _args[0] : form === null || form === void 0 ? void 0 : form.resetType;
                  if (props2.name) {
                    _context.next = 3;
                    break;
                  }
                  return _context.abrupt("return");
                case 3:
                  if (resetType === "empty") set_1(form === null || form === void 0 ? void 0 : form.data, props2.name, getEmptyValue());else if (resetType === "initial") set_1(form === null || form === void 0 ? void 0 : form.data, props2.name, initialValue.value);
                  _context.next = 6;
                  return vue.nextTick();
                case 6:
                  if (resetValidating.value) {
                    needResetField.value = true;
                  } else {
                    resetHandler();
                  }
                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return function resetField() {
          return _ref4.apply(this, arguments);
        };
      }();
      var errorMessages = vue.computed(function () {
        var _form$errorMessage;
        return (_form$errorMessage = form === null || form === void 0 ? void 0 : form.errorMessage) !== null && _form$errorMessage !== void 0 ? _form$errorMessage : globalConfig.value.errorMessage;
      });
      var innerRules = vue.computed(function () {
        var _props2$rules;
        if ((_props2$rules = props2.rules) !== null && _props2$rules !== void 0 && _props2$rules.length) return props2.rules;
        if (!props2.name) return [];
        var index = "".concat(props2.name).lastIndexOf(".") || -1;
        var pRuleName = "".concat(props2.name).slice(index + 1);
        return get_1(form === null || form === void 0 ? void 0 : form.rules, props2.name) || get_1(form === null || form === void 0 ? void 0 : form.rules, pRuleName) || [];
      });
      var analysisValidateResult = /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(trigger) {
          var _result$rules;
          var result;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  result = {
                    successList: [],
                    errorList: [],
                    rules: [],
                    resultList: [],
                    allowSetValue: false
                  };
                  result.rules = trigger === "all" ? innerRules.value : innerRules.value.filter(function (item) {
                    return (item.trigger || "change") === trigger;
                  });
                  if (!(innerRules.value.length && !((_result$rules = result.rules) !== null && _result$rules !== void 0 && _result$rules.length))) {
                    _context2.next = 4;
                    break;
                  }
                  return _context2.abrupt("return", result);
                case 4:
                  result.allowSetValue = true;
                  _context2.next = 7;
                  return validate(value.value, result.rules);
                case 7:
                  result.resultList = _context2.sent;
                  result.errorList = result.resultList.filter(function (item) {
                    return item.result !== true;
                  }).map(function (item) {
                    Object.keys(item).forEach(function (key) {
                      if (!item.message && errorMessages.value[key]) {
                        var compiled = template_1(errorMessages.value[key]);
                        var name2 = typeof props2.label === "string" ? props2.label : props2.name;
                        item.message = compiled({
                          name: name2,
                          validate: item[key]
                        });
                      }
                    });
                    return item;
                  });
                  result.successList = result.resultList.filter(function (item) {
                    return item.result === true && item.message && item.type === "success";
                  });
                  return _context2.abrupt("return", result);
                case 11:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));
        return function analysisValidateResult(_x) {
          return _ref5.apply(this, arguments);
        };
      }();
      var validateHandler = /*#__PURE__*/function () {
        var _ref6 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(trigger, showErrorMessage2) {
          var _yield$analysisValida, innerSuccessList, innerErrorList, rules, resultList, allowSetValue;
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  resetValidating.value = true;
                  freeShowErrorMessage.value = showErrorMessage2;
                  _context3.next = 4;
                  return analysisValidateResult(trigger);
                case 4:
                  _yield$analysisValida = _context3.sent;
                  innerSuccessList = _yield$analysisValida.successList;
                  innerErrorList = _yield$analysisValida.errorList;
                  rules = _yield$analysisValida.rules;
                  resultList = _yield$analysisValida.resultList;
                  allowSetValue = _yield$analysisValida.allowSetValue;
                  if (allowSetValue) {
                    successList.value = innerSuccessList;
                    errorList.value = innerErrorList;
                  }
                  if (rules.length) {
                    verifyStatus.value = innerErrorList.length ? ValidateStatus.FAIL : ValidateStatus.SUCCESS;
                  }
                  if (needResetField.value) {
                    resetHandler();
                  }
                  resetValidating.value = false;
                  return _context3.abrupt("return", _defineProperty$3({}, props2.name, innerErrorList.length === 0 ? true : resultList));
                case 15:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));
        return function validateHandler(_x2, _x3) {
          return _ref6.apply(this, arguments);
        };
      }();
      var validateOnly = /*#__PURE__*/function () {
        var _ref8 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(trigger) {
          var _yield$analysisValida2, innerErrorList, resultList;
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return analysisValidateResult(trigger);
                case 2:
                  _yield$analysisValida2 = _context4.sent;
                  innerErrorList = _yield$analysisValida2.errorList;
                  resultList = _yield$analysisValida2.resultList;
                  return _context4.abrupt("return", _defineProperty$3({}, props2.name, innerErrorList.length === 0 ? true : resultList));
                case 6:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));
        return function validateOnly(_x4) {
          return _ref8.apply(this, arguments);
        };
      }();
      var setValidateMessage = function setValidateMessage(validateMessage) {
        if (!validateMessage && !Array.isArray(validateMessage)) return;
        if (validateMessage.length === 0) {
          errorList.value = [];
          verifyStatus.value = ValidateStatus.SUCCESS;
        }
        errorList.value = validateMessage.map(function (item) {
          return _objectSpread$1h(_objectSpread$1h({}, item), {}, {
            result: false
          });
        });
        verifyStatus.value = ValidateStatus.FAIL;
      };
      var value = vue.computed(function () {
        return (form === null || form === void 0 ? void 0 : form.data) && get_1(form === null || form === void 0 ? void 0 : form.data, props2.name);
      });
      var initialValue = vue.ref(void 0);
      var _toRefs = vue.toRefs(props2),
        name = _toRefs.name;
      var context = vue.reactive({
        name: name,
        resetHandler: resetHandler,
        resetField: resetField,
        validate: validateHandler,
        validateOnly: validateOnly,
        setValidateMessage: setValidateMessage
      });
      vue.onMounted(function () {
        initialValue.value = cloneDeep_1(value.value);
        form === null || form === void 0 ? void 0 : form.children.push(context);
      });
      vue.onBeforeUnmount(function () {
        if (form) form.children = form === null || form === void 0 ? void 0 : form.children.filter(function (ctx) {
          return ctx !== context;
        });
      });
      vue.watch(value, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5() {
        return regenerator.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return validateHandler("change");
              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      })), {
        deep: true
      });
      var freeShowErrorMessage = vue.ref(void 0);
      var showErrorMessage = vue.computed(function () {
        if (typeof freeShowErrorMessage.value === "boolean") return freeShowErrorMessage.value;
        if (typeof props2.showErrorMessage === "boolean") return props2.showErrorMessage;
        return form === null || form === void 0 ? void 0 : form.showErrorMessage;
      });
      var classes = vue.computed(function () {
        var _ref11;
        return [CLASS_NAMES.value.formItem, FORM_ITEM_CLASS_PREFIX.value + (props2.name || ""), (_ref11 = {}, _defineProperty$3(_ref11, CLASS_NAMES.value.formItemWithHelp, helpNode.value), _defineProperty$3(_ref11, CLASS_NAMES.value.formItemWithExtra, extraNode.value), _ref11)];
      });
      var helpNode = vue.computed(function () {
        var help = renderContent("help");
        if (help) return vue.createVNode("div", {
          "class": CLASS_NAMES.value.help
        }, [help]);
        return null;
      });
      var extraNode = vue.computed(function () {
        var _list$;
        var getExtraNode = function getExtraNode(content) {
          return vue.createVNode("div", {
            "class": CLASS_NAMES.value.extra
          }, [content]);
        };
        var list = errorList.value;
        if (showErrorMessage.value && list !== null && list !== void 0 && (_list$ = list[0]) !== null && _list$ !== void 0 && _list$.message) {
          return getExtraNode(list[0].message);
        }
        if (successList.value.length) {
          return getExtraNode(successList.value[0].message);
        }
        return null;
      });
      var handleBlur = /*#__PURE__*/function () {
        var _ref12 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6() {
          return regenerator.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return validateHandler("blur");
                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }));
        return function handleBlur() {
          return _ref12.apply(this, arguments);
        };
      }();
      vue.provide(FormItemInjectionKey, {
        handleBlur: handleBlur
      });
      return function () {
        return vue.createVNode("div", {
          "class": classes.value
        }, [renderLabel(), vue.createVNode("div", {
          "class": contentClasses.value,
          "style": contentStyle.value
        }, [vue.createVNode("div", {
          "class": CLASS_NAMES.value.controlsContent
        }, [renderContent("default"), renderSuffixIcon()]), [helpNode.value, extraNode.value]])]);
      };
    }
  });

  var Form = withInstall(_Form);
  var FormItem = withInstall(_FormItem);

  var props$y = {
    allowUncheck: Boolean,
    checked: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultChecked: Boolean,
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    label: {
      type: [String, Function]
    },
    name: {
      type: String,
      "default": ""
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    onChange: Function,
    onClick: Function
  };

  var RadioGroupInjectionKey = Symbol("RadioGroupProvide");
  var RadioButtonInjectionKey = Symbol("RadioButtonProvide");

  function ownKeys$1h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1h(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getValidAttrs$1(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (key) {
      if (typeof obj[key] !== "undefined") {
        newObj[key] = obj[key];
      }
    });
    return newObj;
  }
  var _Radio = vue.defineComponent({
    name: "TRadio",
    inheritAttrs: false,
    props: _objectSpread$1g({}, props$y),
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var _toRefs = vue.toRefs(props2),
        checked = _toRefs.checked,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerChecked = _useVModel2[0],
        setInnerChecked = _useVModel2[1];
      var radioChecked = vue.computed(function () {
        return radioGroup ? props2.value === radioGroup.value : innerChecked.value;
      });
      var radioGroup = vue.inject(RadioGroupInjectionKey, void 0);
      var handleChange = function handleChange(e) {
        if (radioGroup !== null && radioGroup !== void 0 && radioGroup.setValue) {
          radioGroup.setValue(props2.value, {
            e: e
          });
        } else {
          var checked2 = e.target.checked;
          setInnerChecked(checked2, {
            e: e
          });
        }
      };
      var handleClick = function handleClick(e) {
        var _props2$onClick;
        e.stopPropagation();
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
          e: e
        });
        if (!radioChecked.value || !props2.allowUncheck) return;
        if (radioGroup) {
          radioGroup.setValue(void 0, {
            e: e
          });
        } else {
          setInnerChecked(false, {
            e: e
          });
        }
      };
      var inputEvents = vue.computed(function () {
        return getValidAttrs$1({
          focus: attrs.onFocus,
          blur: attrs.onBlur,
          keydown: attrs.onKeydown,
          keyup: attrs.onKeyup,
          keypresss: attrs.onKeypresss
        });
      });
      var wrapperAttrs = vue.computed(function () {
        var events = [].concat(_toConsumableArray(Object.keys(inputEvents.value)), ["input", "change"]).map(function (str) {
          return "on".concat(str[0].toUpperCase()).concat(str.slice(1));
        });
        return omit$1(attrs, events);
      });
      var groupDisabled = vue.computed(function () {
        return radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.disabled;
      });
      var disabled = useFormDisabled(groupDisabled);
      var inputProps = vue.computed(function () {
        return {
          name: radioGroup ? radioGroup.name : props2.name,
          checked: radioChecked.value,
          disabled: disabled.value,
          value: props2.value
        };
      });
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS;
      var radioButton = vue.inject(RadioButtonInjectionKey, void 0);
      var radioBtnName = usePrefixClass("radio-button");
      var COMPONENT_NAME = usePrefixClass("radio");
      var prefixCls = vue.computed(function () {
        return radioButton ? radioBtnName.value : COMPONENT_NAME.value;
      });
      var inputClass = vue.computed(function () {
        var _ref2;
        return ["".concat(prefixCls.value), (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.checked, inputProps.value.checked), _defineProperty$3(_ref2, STATUS.value.disabled, inputProps.value.disabled), _ref2)];
      });
      var renderContent = useContent();
      return function () {
        return vue.createVNode("label", vue.mergeProps({
          "class": inputClass.value
        }, wrapperAttrs.value), [vue.createVNode("input", vue.mergeProps({
          "type": "radio",
          "class": "".concat(prefixCls.value, "__former")
        }, inputEvents.value, inputProps.value, {
          "onChange": handleChange,
          "onClick": handleClick
        }), null), vue.createVNode("span", {
          "class": "".concat(prefixCls.value, "__input")
        }, null), vue.createVNode("span", {
          "class": "".concat(prefixCls.value, "__label")
        }, [renderContent("default", "label")])]);
      };
    }
  });

  var props$x = {
    disabled: {
      type: Boolean,
      "default": void 0
    },
    name: {
      type: String,
      "default": ""
    },
    options: {
      type: Array
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    variant: {
      type: String,
      "default": "outline",
      validator: function validator(val) {
        return ["outline", "primary-filled", "default-filled"].includes(val);
      }
    },
    onChange: Function
  };

  function ownKeys$1g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1g(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Group = vue.defineComponent({
    name: "TRadioGroup",
    props: _objectSpread$1f({}, props$x),
    setup: function setup(props2) {
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var radioGroupRef = vue.ref();
      var radioBtnName = usePrefixClass("radio-button");
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var checkedClassName = vue.computed(function () {
        return ".".concat(radioBtnName.value, ".").concat(STATUS.value.checked);
      });
      var barStyle = vue.ref({
        width: "0px",
        left: "0px"
      });
      var calcDefaultBarStyle = function calcDefaultBarStyle() {
        var div = document.createElement("div");
        div.setAttribute("style", "position: absolute; visibility: hidden;");
        div.appendChild(radioGroupRef.value.cloneNode(true));
        document.body.appendChild(div);
        var defaultCheckedRadio = div.querySelector(checkedClassName.value);
        var offsetWidth = defaultCheckedRadio.offsetWidth,
          offsetLeft = defaultCheckedRadio.offsetLeft;
        barStyle.value = {
          width: "".concat(offsetWidth, "px"),
          left: "".concat(offsetLeft, "px")
        };
        document.body.removeChild(div);
      };
      var calcBarStyle = function calcBarStyle() {
        if (props2.variant === "outline") return;
        var checkedRadio = radioGroupRef.value.querySelector(checkedClassName.value);
        if (!checkedRadio) {
          barStyle.value = {
            width: "0px",
            left: "0px"
          };
          return;
        }
        var offsetWidth = checkedRadio.offsetWidth,
          offsetLeft = checkedRadio.offsetLeft;
        if (!offsetWidth) {
          calcDefaultBarStyle();
        } else {
          barStyle.value = {
            width: "".concat(offsetWidth, "px"),
            left: "".concat(offsetLeft, "px")
          };
        }
      };
      vue.watch(innerValue, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return vue.nextTick();
              case 2:
                calcBarStyle();
              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
      vue.onMounted(function () {
        calcBarStyle();
      });
      var _toRefs2 = vue.toRefs(props2),
        name = _toRefs2.name,
        disabled = _toRefs2.disabled;
      vue.provide(RadioGroupInjectionKey, vue.reactive({
        name: name,
        disabled: disabled,
        value: innerValue,
        setValue: setInnerValue
      }));
      var radioGroupName = usePrefixClass("radio-group");
      var renderSlot = useTNodeDefault();
      var renderBlock = function renderBlock() {
        if (props2.variant.includes("filled") && !isNil_1(innerValue.value)) return vue.createVNode("div", {
          "style": barStyle.value,
          "class": "".concat(radioGroupName.value, "__bg-block")
        }, null);
      };
      var renderOptions = function renderOptions() {
        var _props2$options;
        return (_props2$options = props2.options) === null || _props2$options === void 0 ? void 0 : _props2$options.map(function (option) {
          var opt = option;
          if (isNumber_1(option) || isString_1(option)) {
            opt = {
              value: option,
              label: option.toString()
            };
          }
          return vue.createVNode(_Radio, {
            "key": "radio-group-options-".concat(opt.value, "-").concat(Math.random()),
            "name": props2.name,
            "checked": innerValue.value === opt.value,
            "disabled": "disabled" in opt ? opt.disabled : props2.disabled,
            "value": opt.value
          }, {
            "default": function _default() {
              return [typeof opt.label === "function" ? opt.label(vue.h) : opt.label];
            }
          });
        });
      };
      var groupClass = vue.computed(function () {
        var _ref2;
        return ["".concat(radioGroupName.value), SIZE.value[props2.size], (_ref2 = {}, _defineProperty$3(_ref2, "".concat(radioGroupName.value, "__outline"), props2.variant === "outline"), _defineProperty$3(_ref2, "".concat(radioGroupName.value, "--filled"), props2.variant.includes("filled")), _defineProperty$3(_ref2, "".concat(radioGroupName.value, "--primary-filled"), props2.variant === "primary-filled"), _ref2)];
      });
      return function () {
        return vue.createVNode("div", {
          "ref": radioGroupRef,
          "class": groupClass.value
        }, [renderSlot("default") || renderOptions(), renderBlock()]);
      };
    }
  });

  function ownKeys$1f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1f(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$j(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _RadioButton = vue.defineComponent({
    name: "TRadioButton",
    inheritAttrs: false,
    props: _objectSpread$1e({}, props$y),
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      vue.provide(RadioButtonInjectionKey, vue.reactive({}));
      var radioProps = vue.computed(function () {
        var res = _objectSpread$1e(_objectSpread$1e({}, props2), omit$1(attrs, Object.keys(attrs).filter(function (key) {
          return key.startsWith("on");
        })));
        return res;
      });
      var renderContent = useTNodeDefault();
      return function () {
        var _slot;
        return vue.createVNode(_Radio, radioProps.value, _isSlot$j(_slot = renderContent("default")) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      };
    }
  });

  var Radio = withInstall(_Radio);
  var RadioGroup = withInstall(_Group);
  var RadioButton = withInstall(_RadioButton);

  var props$w = {
    disabled: Boolean,
    inputNumberProps: {
      type: [Boolean, Object],
      "default": false
    },
    label: {
      type: [String, Boolean, Function],
      "default": false
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        return ["vertical", "horizontal"].includes(val);
      }
    },
    marks: {
      type: [Object, Array]
    },
    max: {
      type: Number,
      "default": 100
    },
    min: {
      type: Number,
      "default": 0
    },
    range: Boolean,
    step: {
      type: Number,
      "default": 1
    },
    showStep: {
      type: Boolean,
      "default": false
    },
    modelValue: {
      type: [Number, Array],
      "default": void 0
    },
    tooltipProps: {
      type: Object
    },
    value: {
      type: [Number, Array],
      "default": void 0
    },
    defaultValue: {
      type: [Number, Array]
    },
    onChange: Function
  };

  var getStopStyle = function getStopStyle(position, isVertical) {
    return isVertical ? {
      top: "calc(".concat(100 - position, "% - 1px)")
    } : {
      left: "".concat(position, "%")
    };
  };
  var formatSliderValue = function formatSliderValue(val, type) {
    if (type === "first") {
      if (val instanceof Array) {
        return val[0];
      }
      return val;
    }
    if (val instanceof Array) {
      return val[1];
    }
    return 0;
  };
  var formatLabel = function formatLabel(label, val) {
    if (Boolean(label) === false) {
      return String(val);
    }
    if (typeof label === "string") {
      var text = String(val);
      try {
        var rule = /\${value}%/g;
        var enableToReplace = rule.test(label);
        if (enableToReplace) {
          text = label.replace(rule, String(val));
        } else {
          text = label;
          throw new Error();
        }
      } catch (e) {
        console.warn("fail to parse label prop, please pass string such as '${value}%'");
      }
      return text;
    }
    return function () {
      return label;
    };
  };

  function ownKeys$1e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1e(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var initialProps = {
    visible: false,
    trigger: "hover",
    showArrow: true,
    overlayInnerStyle: void 0,
    overlayClassName: void 0,
    attach: "body",
    theme: "default"
  };
  var useSliderTooltip = function useSliderTooltip(tooltipConfig) {
    var tooltipRef = vue.ref();
    var showTooltip = vue.computed({
      get: function get() {
        return !tooltipConfig.value.tooltipProps === false;
      },
      set: function set(val) {
        return val;
      }
    });
    var normalizeProps = vue.ref(_objectSpread$1d({}, initialProps));
    var toggleTooltip = function toggleTooltip(toState) {
      if (!showTooltip.value) return;
      normalizeProps.value.visible = toState;
    };
    var validProps = vue.computed(function () {
      var _tooltipConfig$value = tooltipConfig.value,
        vertical = _tooltipConfig$value.vertical,
        tooltipProps = _tooltipConfig$value.tooltipProps,
        label = _tooltipConfig$value.label,
        value = _tooltipConfig$value.value;
      var placement = vertical ? "right" : "top";
      var content = formatLabel(label, value);
      if (tooltipProps instanceof Object) {
        if (!(tooltipProps !== null && tooltipProps !== void 0 && tooltipProps.placement)) {
          normalizeProps.value.placement = placement;
        }
        return _objectSpread$1d(_objectSpread$1d(_objectSpread$1d({}, normalizeProps.value), tooltipProps), {}, {
          content: content
        });
      }
      return _objectSpread$1d(_objectSpread$1d({}, normalizeProps.value), {}, {
        placement: placement,
        content: content
      });
    });
    return {
      tooltipRef: tooltipRef,
      tooltipProps: validProps,
      toggleTooltip: toggleTooltip,
      showTooltip: showTooltip
    };
  };

  var sliderPropsInjectKey = Symbol("sliderProps");

  var _SliderButton = vue.defineComponent({
    name: "TSliderButton",
    props: {
      value: {
        type: [Number],
        "default": 0
      },
      vertical: {
        type: Boolean,
        "default": false
      },
      tooltipProps: {
        type: [Boolean, Object],
        "default": true
      },
      label: {
        type: [String, Boolean, Function],
        "default": false
      }
    },
    emits: ["input"],
    setup: function setup(props, ctx) {
      var COMPONENT_NAME = usePrefixClass("slider__button");
      var tooltipConfig = vue.computed(function () {
        return props;
      });
      var _useSliderTooltip = useSliderTooltip(tooltipConfig),
        tooltipRef = _useSliderTooltip.tooltipRef,
        tooltipProps = _useSliderTooltip.tooltipProps,
        toggleTooltip = _useSliderTooltip.toggleTooltip,
        showTooltip = _useSliderTooltip.showTooltip;
      var parentProps = vue.inject(sliderPropsInjectKey);
      var buttonRef = vue.ref();
      var slideButtonProps = vue.reactive({
        dragging: false,
        isClick: false,
        startX: 0,
        startY: 0,
        startPos: 0,
        newPos: null
      });
      var rangeDiff = vue.computed(function () {
        return Number(parentProps.max) - Number(parentProps.min);
      });
      var currentPos = vue.computed(function () {
        return "".concat((props.value - parentProps.min) / rangeDiff.value * 100, "%");
      });
      var step = vue.computed(function () {
        return parentProps.step;
      });
      var wrapperStyle = vue.computed(function () {
        return props.vertical ? {
          bottom: currentPos.value
        } : {
          left: currentPos.value
        };
      });
      vue.watchEffect(function () {
        parentProps.toggleDragging(slideButtonProps.dragging);
      });
      var setPosition = function setPosition(pos) {
        var newPos = pos;
        if (newPos === null || Number.isNaN(newPos)) {
          return;
        }
        if (newPos > 100) {
          newPos = 100;
        } else if (newPos < 0) {
          newPos = 0;
        }
        var perStepLen = 100 * step.value / rangeDiff.value;
        var steps = Math.round(newPos / perStepLen);
        var value = steps * perStepLen * rangeDiff.value * 0.01;
        value += parentProps.min;
        value = Number(parseFloat("".concat(value)).toFixed(parentProps.precision));
        ctx.emit("input", value);
        vue.nextTick(function () {
          var _tooltipRef$value$upd, _tooltipRef$value;
          tooltipRef.value && ((_tooltipRef$value$upd = (_tooltipRef$value = tooltipRef.value).updatePopper) === null || _tooltipRef$value$upd === void 0 ? void 0 : _tooltipRef$value$upd.call(_tooltipRef$value));
        });
      };
      var handleMouseEnter = function handleMouseEnter() {
        buttonRef.value.focus();
        toggleTooltip(true);
      };
      var handleMouseLeave = function handleMouseLeave() {
        if (!slideButtonProps.dragging) {
          toggleTooltip(false);
        }
      };
      var onDragStart = function onDragStart(event) {
        slideButtonProps.dragging = true;
        slideButtonProps.isClick = true;
        var type = event.type;
        var clientY = event.clientY,
          clientX = event.clientX;
        if (type === "touchstart") {
          var touch = event.touches;
          var _ref = [touch[0].clientY, touch[0].clientX];
          clientY = _ref[0];
          clientX = _ref[1];
        }
        if (props.vertical) {
          slideButtonProps.startY = clientY;
        } else {
          slideButtonProps.startX = clientX;
        }
        slideButtonProps.startPos = parseFloat(currentPos.value);
        slideButtonProps.newPos = slideButtonProps.startPos;
      };
      var onDragging = function onDragging(e) {
        var event = e;
        if (!slideButtonProps.dragging) {
          return;
        }
        slideButtonProps.isClick = false;
        if (parentProps !== null && parentProps !== void 0 && parentProps.resetSize && typeof (parentProps === null || parentProps === void 0 ? void 0 : parentProps.resetSize) === "function") {
          parentProps.resetSize();
        }
        var diff = 0;
        var parentSliderSize = parentProps.sliderSize;
        if (props.vertical) {
          diff = slideButtonProps.startY - event.clientY;
        } else {
          diff = event.clientX - slideButtonProps.startX;
        }
        diff = diff / parentSliderSize * 100;
        slideButtonProps.newPos = slideButtonProps.startPos + diff;
        setPosition(slideButtonProps.newPos);
      };
      var onDragEnd = function onDragEnd() {
        if (slideButtonProps.dragging) {
          setTimeout(function () {
            slideButtonProps.dragging = false;
            toggleTooltip(false);
            if (!slideButtonProps.isClick) {
              setPosition(slideButtonProps.newPos);
            }
          }, 0);
          window.removeEventListener("mousemove", onDragging);
          window.removeEventListener("touchmove", onDragging);
          window.removeEventListener("mouseup", onDragEnd);
          window.removeEventListener("touchend", onDragEnd);
          window.removeEventListener("contextmenu", onDragEnd);
        }
      };
      function onButtonDown(event) {
        if (parentProps.disabled) {
          return;
        }
        event.preventDefault();
        onDragStart(event);
        window.addEventListener("mousemove", onDragging);
        window.addEventListener("mouseup", onDragEnd);
        window.addEventListener("touchmove", onDragging);
        window.addEventListener("touchend", onDragEnd);
        window.addEventListener("contextmenu", onDragEnd);
      }
      var onKeyDown = function onKeyDown(state) {
        if (parentProps.disabled) {
          return;
        }
        var stepLength = step.value / rangeDiff.value * 100;
        if (state === "sub") {
          stepLength = -stepLength;
        }
        slideButtonProps.newPos = parseFloat(currentPos.value) + stepLength;
        setPosition(slideButtonProps.newPos);
      };
      var onNativeKeyDown = function onNativeKeyDown(e) {
        var code = e.code;
        e.preventDefault();
        if (code === "ArrowDown" || code === "ArrowLeft") {
          onKeyDown("sub");
        }
        if (code === "ArrowUp" || code === "ArrowRight") {
          onKeyDown("add");
        }
      };
      ctx.expose({
        setPosition: setPosition
      });
      return function () {
        return vue.createVNode("div", {
          "ref": buttonRef,
          "class": "".concat(COMPONENT_NAME.value, "-wrapper"),
          "style": wrapperStyle.value,
          "tabindex": "0",
          "show-tooltip": showTooltip.value,
          "disabled": parentProps.disabled,
          "onmouseenter": handleMouseEnter,
          "onmouseleave": handleMouseLeave,
          "onmousedown": onButtonDown,
          "onTouchstart": onButtonDown,
          "onfocus": handleMouseEnter,
          "onblur": handleMouseLeave,
          "onKeydown": onNativeKeyDown
        }, [showTooltip.value ? vue.createVNode(Tooltip, vue.mergeProps({
          "ref": tooltipRef,
          "disabled": !showTooltip.value
        }, tooltipProps.value), {
          "default": function _default() {
            return [vue.createVNode("div", {
              "class": [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--dragging"), slideButtonProps.dragging)]
            }, null)];
          }
        }) : vue.createVNode("div", {
          "class": [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--dragging"), slideButtonProps.dragging)]
        }, null)]);
      };
    }
  });

  var TSliderMark = vue.defineComponent({
    name: "TSliderMark",
    props: {
      mark: {
        type: [Object, Array, String, Number]
      },
      point: {
        type: Number
      },
      onClickMarkPoint: {
        type: Function,
        "default": function _default() {}
      }
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("slider__mark");
      var changeValue = function changeValue(e) {
        var _props$onClickMarkPoi;
        e.stopPropagation();
        props === null || props === void 0 ? void 0 : (_props$onClickMarkPoi = props.onClickMarkPoint) === null || _props$onClickMarkPoi === void 0 ? void 0 : _props$onClickMarkPoi.call(props, props.point);
      };
      return function () {
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-text"),
          "onClick": changeValue
        }, [props.mark]);
      };
    }
  });

  var useSliderMark = function useSliderMark(config) {
    var name = config.value.prefixName;
    var markList = vue.computed(function () {
      var markProps = config.value;
      if (!markProps.marks) {
        return [];
      }
      var legalMarks = [];
      if (Array.isArray(markProps.marks)) {
        var marksList = cloneDeep_1(markProps.marks).sort(function (a, b) {
          return a - b;
        });
        var maxLimit = Math.max.apply(Math, _toConsumableArray(marksList).concat([markProps.max]));
        var minLimit = Math.min.apply(Math, _toConsumableArray(marksList).concat([markProps.min]));
        if (minLimit < markProps.min) {
          log.errorOnce("TSlider", "marks min value should >= props min");
        }
        if (maxLimit > markProps.max) {
          log.errorOnce("TSlider", "marks max value should <= props max");
        }
        marksList.forEach(function (item) {
          legalMarks.push({
            point: item,
            position: (item - minLimit) / (maxLimit - minLimit) * 100,
            mark: item
          });
        });
      } else {
        Object.keys(markProps.marks).map(parseFloat).sort(function (a, b) {
          return a - b;
        }).filter(function (point) {
          return point <= markProps.max && point >= markProps.min;
        }).forEach(function (point) {
          var item = {
            point: point,
            position: (point - markProps.min) * 100 / (markProps.max - markProps.min),
            mark: markProps.marks[point]
          };
          legalMarks.push(item);
        });
      }
      return legalMarks;
    });
    var renderMask = function renderMask(onChangeFn) {
      if (!markList.value.length) return null;
      return vue.createVNode("div", null, [vue.createVNode("div", {
        "class": "".concat(name, "__stops")
      }, [markList.value.map(function (item, index) {
        if (item.position === 0 || item.position === 100) return null;
        return vue.createVNode("div", {
          "class": "".concat(name, "__stop ").concat(name, "__mark-stop"),
          "style": getStopStyle(item.position, config.value.vertical),
          "key": index
        }, null);
      })]), vue.createVNode("div", {
        "class": "".concat(name, "__mark")
      }, [markList.value.map(function (item, key) {
        return vue.createVNode(TSliderMark, {
          "mark": item.mark,
          "point": item.point,
          "key": key,
          "style": getStopStyle(item.position, config.value.vertical),
          "onClickMarkPoint": onChangeFn
        }, null);
      })])]);
    };
    return renderMask;
  };

  function ownKeys$1d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1d(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var INPUT_NUMBER_PROPS_INITIAL_STATE = {
    decimalPlaces: 0,
    format: void 0,
    placeholder: "",
    theme: "column"
  };
  var useSliderInput = function useSliderInput(config) {
    var name = config.value.prefixName;
    var sliderInputState = vue.computed(function () {
      var initialState = _objectSpread$1c({}, INPUT_NUMBER_PROPS_INITIAL_STATE);
      var inputProps = config.value;
      if (typeof inputProps.inputNumberProps !== "boolean") {
        var _inputProps$inputNumb;
        var inputTheme = (_inputProps$inputNumb = inputProps.inputNumberProps) === null || _inputProps$inputNumb === void 0 ? void 0 : _inputProps$inputNumb.theme;
        initialState = _objectSpread$1c(_objectSpread$1c({}, initialState), inputProps.inputNumberProps);
        if (["column", "row", "normal"].includes(inputTheme)) {
          initialState.theme = inputTheme;
        }
      }
      return initialState;
    });
    var sliderNumberClass = vue.computed(function () {
      return ["".concat(name, "__input"), {
        "is-vertical": config.value.vertical
      }];
    });
    var renderInputNumber = function renderInputNumber(val, changeFn) {
      var normalizeChangeFn = function normalizeChangeFn(num) {
        if (num !== void 0 && !isNaN(num)) {
          changeFn(num);
        }
      };
      return vue.createVNode(InputNumber, vue.mergeProps(sliderInputState.value, {
        "class": sliderNumberClass.value,
        "value": val,
        "step": config.value.step,
        "onChange": normalizeChangeFn,
        "disabled": config.value.disabled,
        "min": config.value.min,
        "max": config.value.max
      }), null);
    };
    return renderInputNumber;
  };

  function ownKeys$1c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1c(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Slider = vue.defineComponent({
    name: "TSlider",
    model: {
      prop: "value",
      event: "change"
    },
    props: _objectSpread$1b({}, props$w),
    setup: function setup(props2, ctx) {
      var disabled = useFormDisabled();
      var COMPONENT_NAME = usePrefixClass("slider");
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS;
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        sliderValue = _useVModel2[0],
        setSliderValue = _useVModel2[1];
      var sliderContainerRef = vue.ref();
      var sliderRef = vue.ref();
      var firstButtonRef = vue.ref();
      var secondButtonRef = vue.ref();
      var firstValue = vue.ref(formatSliderValue(sliderValue.value, "first"));
      var secondValue = vue.ref(formatSliderValue(sliderValue.value, "second"));
      var dragging = vue.ref(false);
      var sliderSize = vue.ref(1);
      var vertical = vue.computed(function () {
        return props2.layout === "vertical";
      });
      var containerClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__container"), {
          "is-vertical": vertical.value
        }];
      });
      var sliderClass = vue.computed(function () {
        var _ref;
        return ["".concat(COMPONENT_NAME.value), (_ref = {
          "is-vertical": vertical.value
        }, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--with-input"), props2.inputNumberProps), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--vertical"), vertical.value), _defineProperty$3(_ref, STATUS.value.disabled, disabled.value), _ref)];
      });
      var sliderRailClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__rail"), {
          "show-input": props2.inputNumberProps,
          disabled: disabled.value
        }];
      });
      var runwayStyle = vue.computed(function () {
        return vertical.value ? {
          height: "100%"
        } : {};
      });
      var barStyle = vue.computed(function () {
        var barStart = props2.range ? "".concat(100 * (minValue.value - props2.min) / rangeDiff.value, "%") : "0%";
        var currentDiff = props2.range ? maxValue.value - minValue.value : firstValue.value - props2.min;
        var barSize = "".concat(100 * currentDiff / rangeDiff.value, "%");
        return vertical.value ? {
          height: barSize,
          bottom: barStart
        } : {
          width: barSize,
          left: barStart
        };
      });
      var rangeDiff = vue.computed(function () {
        return props2.max - props2.min;
      });
      var minValue = vue.computed(function () {
        return Math.min(firstValue.value, secondValue.value);
      });
      var maxValue = vue.computed(function () {
        return Math.max(firstValue.value, secondValue.value);
      });
      var steps = vue.computed(function () {
        if (!props2.showStep || props2.min > props2.max) return [];
        if (props2.step === 0) {
          console.warn("[Element Warn][Slider]step should not be 0.");
          return [];
        }
        var stepCount = rangeDiff.value / props2.step;
        var stepWidth = 100 * props2.step / rangeDiff.value;
        var result = [];
        for (var i = 1; i < stepCount; i++) {
          result.push(i * stepWidth);
        }
        if (props2.range) {
          var r = result.filter(function (step2) {
            return step2 < 100 * (minValue.value - props2.min) / rangeDiff.value || props2.step > 100 * (maxValue.value - props2.max) / rangeDiff.value;
          });
          return r;
        }
        return result.filter(function (step2) {
          return step2 > 100 * (firstValue.value - props2.min) / rangeDiff.value;
        });
      });
      var precision = vue.computed(function () {
        var precisions = [props2.min, props2.max, props2.step].map(function (item) {
          var decimalArr = "".concat(item).split(".");
          return decimalArr[1] ? decimalArr[1].length : 0;
        });
        return Math.max.apply(null, precisions);
      });
      var setValues = function setValues(value2) {
        var _ref2 = [props2.min, props2.max],
          min2 = _ref2[0],
          max2 = _ref2[1];
        if (min2 > max2) {
          console.warn("[Slider] max should be greater than min.");
          return;
        }
        if (props2.range && Array.isArray(value2)) {
          var _ref3 = [Math.min.apply(Math, _toConsumableArray(value2)), Math.max.apply(Math, _toConsumableArray(value2))],
            maxLimit = _ref3[0],
            minLimit = _ref3[1];
          if (maxLimit > max2) {
            maxLimit = firstValue.value;
          }
          if (maxLimit < min2) {
            maxLimit = min2;
          }
          if (minLimit < min2) {
            minLimit = secondValue.value;
          }
          if (minLimit > max2) {
            minLimit = max2;
          }
          var _ref4 = [maxLimit, minLimit];
          firstValue.value = _ref4[0];
          secondValue.value = _ref4[1];
          return [maxLimit, minLimit];
        }
        var preValue = value2;
        if (preValue < min2) {
          preValue = min2;
        }
        if (preValue > max2) {
          preValue = max2;
        }
        return preValue;
      };
      var emitChange = function emitChange(value2) {
        var changeValue2 = value2;
        if (changeValue2 === void 0) {
          if (props2.range) {
            changeValue2 = [firstValue.value, secondValue.value];
          } else {
            changeValue2 = firstValue.value;
          }
        }
        var fixValue = setValues(changeValue2);
        setSliderValue(fixValue);
      };
      var resetSize = function resetSize() {
        if (sliderRef.value) {
          sliderSize.value = sliderRef.value["client".concat(vertical.value ? "Height" : "Width")];
        }
      };
      var isAlreadyMount = vue.ref(false);
      var init = function init() {
        var valuetext;
        if (props2.range) {
          if (Array.isArray(sliderValue.value)) {
            firstValue.value = Math.max(props2.min || 0, sliderValue.value[0]);
            secondValue.value = Math.min(props2.max || 100, sliderValue.value[1]);
          } else {
            firstValue.value = props2.min || 0;
            secondValue.value = props2.max || 100;
          }
          valuetext = "".concat(firstValue.value, "-").concat(secondValue.value);
        } else {
          if (typeof sliderValue.value !== "number") {
            firstValue.value = props2.min;
          } else {
            firstValue.value = Math.min(props2.max, Math.max(props2.min, sliderValue.value));
          }
          valuetext = String(firstValue.value);
        }
        if (sliderContainerRef.value) {
          sliderContainerRef.value.setAttribute("aria-valuetext", valuetext);
        }
        resetSize();
        window.addEventListener("resize", resetSize);
      };
      var setPosition = function setPosition(percent) {
        var targetValue = percent * rangeDiff.value / 100;
        targetValue = props2.min + targetValue;
        if (!props2.range && firstButtonRef.value) {
          firstButtonRef.value.setPosition(percent);
          return;
        }
        var button;
        if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {
          button = firstValue.value < secondValue.value ? "button1" : "button2";
        } else {
          button = firstValue.value > secondValue.value ? "button1" : "button2";
        }
        if (button === "button1" && firstButtonRef.value) {
          firstButtonRef.value.setPosition(percent);
        }
        if (button === "button2" && secondButtonRef.value) {
          secondButtonRef.value.setPosition(percent);
        }
      };
      var onSliderClick = function onSliderClick(event) {
        if (disabled.value || dragging.value) {
          return;
        }
        if (!sliderRef.value) return;
        resetSize();
        var value2 = 0;
        if (vertical.value) {
          var sliderOffsetBottom = sliderRef.value.getBoundingClientRect().bottom;
          value2 = (sliderOffsetBottom - event.clientY) / sliderSize.value * 100;
          setPosition(value2);
        } else {
          var sliderOffsetLeft = sliderRef.value.getBoundingClientRect().left;
          value2 = (event.clientX - sliderOffsetLeft) / sliderSize.value * 100;
          setPosition(value2);
        }
      };
      var changeValue = function changeValue(point) {
        if (disabled.value || dragging.value) {
          return;
        }
        resetSize();
        var value2 = Number(point / rangeDiff.value * 100);
        setPosition(value2);
        emitChange(point);
      };
      vue.watch(function () {
        return sliderValue.value;
      }, function (newVal) {
        if (dragging.value === true) return;
        if (Array.isArray(newVal) && props2.range) {
          var _newVal = _slicedToArray(newVal, 2);
          firstValue.value = _newVal[0];
          secondValue.value = _newVal[1];
        } else {
          firstValue.value = newVal;
        }
      });
      vue.watch([firstValue, secondValue, dragging], function (newStates, prevStates) {
        if (newStates[0] !== prevStates[0]) {
          if (props2.range) {
            emitChange([minValue.value, maxValue.value]);
          } else {
            emitChange(firstValue.value);
          }
        }
        if (newStates[1] !== prevStates[1]) {
          if (props2.range) {
            emitChange([minValue.value, maxValue.value]);
          }
        }
        if (newStates[2] !== prevStates[2] && newStates[2] === false) {
          init();
        }
      });
      vue.onMounted(function () {
        init();
        isAlreadyMount.value = true;
      });
      vue.onBeforeUnmount(function () {
        window.removeEventListener("resize", resetSize);
      });
      var markConfig = vue.computed(function () {
        return {
          max: props2.max,
          min: props2.min,
          marks: props2.marks,
          vertical: vertical.value,
          prefixName: COMPONENT_NAME.value
        };
      });
      var renderMask = useSliderMark(markConfig);
      var inputConfig = vue.computed(function () {
        return {
          max: props2.max,
          min: props2.min,
          inputNumberProps: props2.inputNumberProps,
          step: props2.step,
          prefixName: COMPONENT_NAME.value,
          vertical: vertical.value,
          disabled: disabled.value
        };
      });
      var renderInputNumber = useSliderInput(inputConfig);
      var renderInputButton = function renderInputButton() {
        var firstInputVal = firstValue.value;
        var firstInputOnChange = function firstInputOnChange(v) {
          firstValue.value = v;
        };
        var secondInputVal = secondValue.value;
        var secondInputOnChange = function secondInputOnChange(v) {
          secondValue.value = v;
        };
        return vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__input-container"), {
            "is-vertical": vertical.value
          }]
        }, [renderInputNumber(firstInputVal, firstInputOnChange), props2.range && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__center-line")
        }, null), props2.range && renderInputNumber(secondInputVal, secondInputOnChange)]);
      };
      var toggleDragging = function toggleDragging(toState) {
        dragging.value = toState;
      };
      var _toRefs2 = vue.toRefs(props2),
        min = _toRefs2.min,
        max = _toRefs2.max,
        step = _toRefs2.step;
      vue.provide(sliderPropsInjectKey, vue.reactive({
        min: min,
        max: max,
        step: step,
        dragging: dragging,
        toggleDragging: toggleDragging,
        precision: precision,
        disabled: disabled,
        resetSize: resetSize,
        sliderSize: sliderSize
      }));
      return function () {
        return vue.createVNode("div", {
          "class": containerClass.value,
          "ref": sliderContainerRef
        }, [vue.createVNode("div", {
          "class": sliderClass.value,
          "role": "slider",
          "aria-valuemin": props2.min,
          "aria-valuemax": props2.max,
          "aria-orientation": props2.layout,
          "aria-disabled": disabled.value,
          "tooltip-props": props2.tooltipProps
        }, [vue.createVNode("div", {
          "class": sliderRailClass.value,
          "style": runwayStyle.value,
          "onClick": onSliderClick,
          "ref": sliderRef
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__track"),
          "style": barStyle.value
        }, null), vue.createVNode(_SliderButton, {
          "vertical": vertical.value,
          "value": firstValue.value,
          "ref": firstButtonRef,
          "disabled": disabled.value,
          "tooltip-props": props2.tooltipProps,
          "label": props2.label,
          "onInput": function onInput(v) {
            firstValue.value = v;
          }
        }, null), props2.range && vue.createVNode(_SliderButton, {
          "vertical": vertical.value,
          "value": secondValue.value,
          "ref": secondButtonRef,
          "disabled": disabled.value,
          "label": props2.label,
          "tooltip-props": props2.tooltipProps,
          "onInput": function onInput(v) {
            secondValue.value = v;
          }
        }, null), props2.showStep && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__stops")
        }, [steps.value.map(function (item, key) {
          if (item.position === 0 || item.position === 100) return null;
          return vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__stop"),
            "key": key,
            "style": getStopStyle(item, vertical.value)
          }, null);
        })]), renderMask(changeValue)])]), isAlreadyMount.value && props2.inputNumberProps && renderInputButton()]);
      };
    }
  });

  var Slider = withInstall(_Slider);
  var SliderButton = withInstall(_SliderButton);

  var props$v = {
    customValue: {
      type: Array
    },
    disabled: Boolean,
    label: {
      type: [Array, Function],
      "default": function _default() {
        return [];
      }
    },
    loading: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    modelValue: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Boolean],
      "default": false
    },
    onChange: Function
  };

  function ownKeys$1b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1b(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Switch = vue.defineComponent({
    name: "TSwitch",
    props: _objectSpread$1a({}, props$v),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var disabled = useFormDisabled();
      var COMPONENT_NAME = usePrefixClass("switch");
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setSwitchVal = _useVModel2[1];
      var activeValue = vue.computed(function () {
        if (props2.customValue && props2.customValue.length > 0) {
          return props2.customValue[0];
        }
        return true;
      });
      var inactiveValue = vue.computed(function () {
        if (props2.customValue && props2.customValue.length > 1) {
          return props2.customValue[1];
        }
        return false;
      });
      function handleToggle() {
        var checked = innerValue.value === activeValue.value ? inactiveValue.value : activeValue.value;
        setSwitchVal(checked);
      }
      function toggle() {
        if (disabled.value || props2.loading) {
          return;
        }
        handleToggle();
      }
      var classes = vue.computed(function () {
        var _ref2;
        return ["".concat(COMPONENT_NAME.value), SIZE.value[props2.size], (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref2, STATUS.value.loading, props2.loading), _defineProperty$3(_ref2, STATUS.value.checked, innerValue.value === activeValue.value || props2.modelValue === activeValue.value), _ref2)];
      });
      var nodeClasses = vue.computed(function () {
        var _ref3;
        return ["".concat(COMPONENT_NAME.value, "__handle"), (_ref3 = {}, _defineProperty$3(_ref3, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref3, STATUS.value.loading, props2.loading), _ref3)];
      });
      var contentClasses = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__content"), SIZE.value[props2.size], _defineProperty$3({}, STATUS.value.disabled, disabled.value)];
      });
      vue.watch(innerValue, function (val) {
        if (props2.customValue && props2.customValue.length && !props2.customValue.includes(val)) {
          throw new Error("value is not in ".concat(JSON.stringify(props2.customValue)));
        }
      }, {
        immediate: true
      });
      var content = vue.computed(function () {
        if (typeof props2.label === "function") {
          return props2.label(vue.h, {
            value: innerValue.value
          });
        }
        if (typeof props2.label === "string") {
          return props2.label;
        }
        if (Array.isArray(props2.label) && props2.label.length) {
          var label = innerValue.value === activeValue.value ? props2.label[0] : props2.label[1];
          if (!label) return;
          if (typeof label === "string") {
            return label;
          }
          if (typeof label === "function") {
            return label(vue.h);
          }
        }
        if (slots.label) {
          return slots.label({
            value: innerValue.value
          });
        }
        return null;
      });
      return function () {
        var switchContent;
        var loadingContent;
        if (props2.loading) {
          loadingContent = vue.createVNode(Loading, {
            "size": "small"
          }, null);
        } else if (content.value) {
          switchContent = content.value;
        }
        return vue.createVNode("div", {
          "class": classes.value,
          "disabled": disabled.value,
          "onClick": toggle
        }, [vue.createVNode("span", {
          "class": nodeClasses.value
        }, [loadingContent]), vue.createVNode("div", {
          "class": contentClasses.value
        }, [switchContent])]);
      };
    }
  });

  var Switch = withInstall(_Switch);

  var props$u = {
    autofocus: Boolean,
    autosize: {
      type: [Boolean, Object],
      "default": false
    },
    disabled: Boolean,
    maxcharacter: {
      type: Number
    },
    maxlength: {
      type: Number
    },
    name: {
      type: String,
      "default": ""
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: Boolean,
    status: {
      type: String,
      validator: function validator(val) {
        return ["success", "warning", "error"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    },
    modelValue: {
      type: [String, Number]
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function
  };

  var hiddenTextarea;
  var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
  var SIZING_PROPS = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];
  function calculateNodeStyling(targetElement) {
    var style = window.getComputedStyle(targetElement);
    var boxSizing = style.getPropertyValue("box-sizing") || style.getPropertyValue("-moz-box-sizing") || style.getPropertyValue("-webkit-box-sizing");
    var paddingSize = parseFloat(style.getPropertyValue("padding-bottom")) + parseFloat(style.getPropertyValue("padding-top"));
    var borderSize = parseFloat(style.getPropertyValue("border-bottom-width")) + parseFloat(style.getPropertyValue("border-top-width"));
    var sizingStyle = SIZING_PROPS.map(function (name) {
      return "".concat(name, ":").concat(style.getPropertyValue(name));
    }).join(";");
    return {
      sizingStyle: sizingStyle,
      paddingSize: paddingSize,
      borderSize: borderSize,
      boxSizing: boxSizing
    };
  }
  function calcTextareaHeight(targetElement) {
    var minRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var maxRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement("textarea");
      document.body.appendChild(hiddenTextarea);
    }
    var _calculateNodeStyling = calculateNodeStyling(targetElement),
      paddingSize = _calculateNodeStyling.paddingSize,
      borderSize = _calculateNodeStyling.borderSize,
      boxSizing = _calculateNodeStyling.boxSizing,
      sizingStyle = _calculateNodeStyling.sizingStyle;
    hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
    hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
    var height = hiddenTextarea.scrollHeight;
    var result = {};
    if (boxSizing === "border-box") {
      height += borderSize;
    } else if (boxSizing === "content-box") {
      height -= paddingSize;
    }
    hiddenTextarea.value = "";
    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
    if (minRows !== null) {
      var minHeight = singleRowHeight * minRows;
      if (boxSizing === "border-box") {
        minHeight = minHeight + paddingSize + borderSize;
      }
      height = Math.max(minHeight, height);
      result.minHeight = "".concat(minHeight, "px");
    }
    if (maxRows !== null) {
      var maxHeight = singleRowHeight * maxRows;
      if (boxSizing === "border-box") {
        maxHeight = maxHeight + paddingSize + borderSize;
      }
      height = Math.min(maxHeight, height);
    }
    result.height = "".concat(height, "px");
    hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
    hiddenTextarea = null;
    return result;
  }

  function ownKeys$1a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$19(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1a(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getValidAttrs(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (key) {
      if (typeof obj[key] !== "undefined") {
        newObj[key] = obj[key];
      }
    });
    return newObj;
  }
  var _Textarea = vue.defineComponent({
    name: "TTextarea",
    inheritAttrs: false,
    props: _objectSpread$19({}, props$u),
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs,
        expose = _ref.expose;
      var prefix = usePrefixClass();
      var name = usePrefixClass("textarea");
      var TEXTAREA_TIPS_CLASS = vue.computed(function () {
        return "".concat(name.value, "__tips");
      });
      var TEXTAREA_LIMIT = vue.computed(function () {
        return "".concat(name.value, "__limit");
      });
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var disabled = useFormDisabled();
      var textareaStyle = vue.ref({});
      var computedStyle = vue.computed(function () {
        var style = attrs.style;
        return [style, textareaStyle.value];
      });
      var refTextareaElem = vue.ref();
      var focused = vue.ref(false);
      var focus = function focus() {
        var _refTextareaElem$valu;
        return (_refTextareaElem$valu = refTextareaElem.value) === null || _refTextareaElem$valu === void 0 ? void 0 : _refTextareaElem$valu.focus();
      };
      var blur = function blur() {
        var _refTextareaElem$valu2;
        return (_refTextareaElem$valu2 = refTextareaElem.value) === null || _refTextareaElem$valu2 === void 0 ? void 0 : _refTextareaElem$valu2.blur();
      };
      var adjustTextareaHeight = function adjustTextareaHeight() {
        var _refTextareaElem$valu3, _refTextareaElem$valu4;
        if (props2.autosize === true) {
          vue.nextTick(function () {
            textareaStyle.value = calcTextareaHeight(refTextareaElem.value);
          });
        } else if (_typeof$2(props2.autosize) === "object") {
          var _props2$autosize = props2.autosize,
            minRows = _props2$autosize.minRows,
            maxRows = _props2$autosize.maxRows;
          textareaStyle.value = calcTextareaHeight(refTextareaElem.value, minRows, maxRows);
        } else if (attrs.rows) {
          textareaStyle.value = {
            height: "auto",
            minHeight: "auto"
          };
        } else if (attrs.style && (_refTextareaElem$valu3 = refTextareaElem.value) !== null && _refTextareaElem$valu3 !== void 0 && (_refTextareaElem$valu4 = _refTextareaElem$valu3.style) !== null && _refTextareaElem$valu4 !== void 0 && _refTextareaElem$valu4.height) {
          textareaStyle.value = {
            height: refTextareaElem.value.style.height
          };
        }
      };
      var setInputValue = function setInputValue() {
        var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var textareaElem = refTextareaElem.value;
        var sV = String(v);
        if (!textareaElem) {
          return;
        }
        if (textareaElem.value !== sV) {
          textareaElem.value = sV;
          innerValue.value = sV;
        }
      };
      var inputValueChangeHandle = function inputValueChangeHandle(e) {
        var target = e.target;
        var val = target.value;
        if (props2.maxcharacter && props2.maxcharacter >= 0) {
          var stringInfo = getCharacterLength(val, props2.maxcharacter);
          val = _typeof$2(stringInfo) === "object" && stringInfo.characters;
        }
        setInnerValue(val, {
          e: e
        });
        vue.nextTick(function () {
          return setInputValue(val);
        });
        adjustTextareaHeight();
      };
      var handleInput = function handleInput(e) {
        if (e.isComposing || e.inputType === "insertCompositionText") return;
        inputValueChangeHandle(e);
      };
      var onCompositionend = function onCompositionend(e) {
        inputValueChangeHandle(e);
      };
      var eventDeal = function eventDeal(name2, e) {
        var _props2$_name;
        if (disabled.value) return;
        var _name = "on".concat(name2[0].toUpperCase()).concat(name2.slice(1));
        (_props2$_name = props2[_name]) === null || _props2$_name === void 0 ? void 0 : _props2$_name.call(props2, innerValue.value, {
          e: e
        });
      };
      var emitKeyDown = function emitKeyDown(e) {
        eventDeal("keydown", e);
      };
      var emitKeyUp = function emitKeyUp(e) {
        eventDeal("keyup", e);
      };
      var emitKeypress = function emitKeypress(e) {
        eventDeal("keypress", e);
      };
      var emitFocus = function emitFocus(e) {
        var _props2$onFocus;
        adjustTextareaHeight();
        if (disabled.value) return;
        focused.value = true;
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, innerValue.value, {
          e: e
        });
      };
      var formItem = vue.inject(FormItemInjectionKey, void 0);
      var emitBlur = function emitBlur(e) {
        var _props2$onBlur;
        adjustTextareaHeight();
        focused.value = false;
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, innerValue.value, {
          e: e
        });
        formItem === null || formItem === void 0 ? void 0 : formItem.handleBlur();
      };
      var textareaClasses = vue.computed(function () {
        var _ref2;
        return [name.value, (_ref2 = {}, _defineProperty$3(_ref2, "".concat(prefix.value, "-is-disabled"), disabled.value), _defineProperty$3(_ref2, "".concat(prefix.value, "-is-readonly"), props2.readonly), _ref2)];
      });
      var inputAttrs = vue.computed(function () {
        return getValidAttrs({
          autofocus: props2.autofocus,
          disabled: disabled.value,
          readonly: props2.readonly,
          placeholder: props2.placeholder,
          maxlength: props2.maxlength || void 0,
          name: props2.name || void 0
        });
      });
      var characterNumber = vue.computed(function () {
        var characterInfo = getCharacterLength(String(innerValue.value || ""));
        if (_typeof$2(characterInfo) === "object") {
          return characterInfo.length;
        }
        return characterInfo;
      });
      vue.watch(function () {
        return innerValue.value;
      }, function () {
        return adjustTextareaHeight();
      });
      vue.watch(refTextareaElem, function (el) {
        if (!el) return;
        adjustTextareaHeight();
      });
      vue.watch(function () {
        return props2.autofocus;
      }, function (val) {
        if (val) {
          refTextareaElem.value.focus();
        }
      });
      expose({
        focus: focus,
        blur: blur
      });
      vue.onMounted(function () {
        adjustTextareaHeight();
      });
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        var _String;
        var inputEvents = getValidAttrs({
          onFocus: emitFocus,
          onBlur: emitBlur,
          onKeydown: emitKeyDown,
          onKeyup: emitKeyUp,
          onKeypress: emitKeypress
        });
        var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;
        var classes = vue.computed(function () {
          var _ref3;
          return ["".concat(name.value, "__inner"), (_ref3 = {}, _defineProperty$3(_ref3, "".concat(prefix.value, "-is-").concat(props2.status), props2.status), _defineProperty$3(_ref3, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref3, STATUS.value.focused, focused.value), _defineProperty$3(_ref3, "".concat(prefix.value, "-resize-none"), props2.maxlength), _ref3), "narrow-scrollbar"];
        });
        var tips = renderTNodeJSX("tips");
        return vue.createVNode("div", vue.mergeProps({
          "class": textareaClasses.value
        }, omit$1(attrs, ["style"])), [vue.createVNode("textarea", vue.mergeProps({
          "onInput": handleInput,
          "onCompositionend": onCompositionend,
          "ref": refTextareaElem,
          "value": innerValue.value,
          "style": computedStyle.value,
          "class": classes.value
        }, inputEvents, inputAttrs.value), null), props2.maxcharacter && vue.createVNode("span", {
          "class": TEXTAREA_LIMIT.value
        }, ["".concat(characterNumber.value, "/").concat(props2.maxcharacter)]), !props2.maxcharacter && props2.maxlength ? vue.createVNode("span", {
          "class": TEXTAREA_LIMIT.value
        }, ["".concat(innerValue.value ? (_String = String(innerValue.value)) === null || _String === void 0 ? void 0 : _String.length : 0, "/").concat(props2.maxlength)]) : null, tips && vue.createVNode("div", {
          "class": "".concat(TEXTAREA_TIPS_CLASS.value, " ").concat(name.value, "__tips--").concat(props2.status || "normal")
        }, [tips])]);
      };
    }
  });

  var Textarea = withInstall(_Textarea);

  function ownKeys$19(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$18(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$19(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$19(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TRANSFER_NAME = "TTransfer";
  function getTransferListOption(prop) {
    if (Array.isArray(prop)) {
      return {
        source: prop[0],
        target: prop[1]
      };
    }
    return {
      source: prop,
      target: prop
    };
  }
  function getDataValues(data, filterValues) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$isTreeMode = _ref.isTreeMode,
      isTreeMode = _ref$isTreeMode === void 0 ? false : _ref$isTreeMode,
      _ref$include = _ref.include,
      include = _ref$include === void 0 ? true : _ref$include;
    if (isTreeMode) {
      var result = [];
      if (data) {
        for (var i = 0; i < data.length; i++) {
          var item = data[i];
          var isInclude = filterValues.includes(item.value);
          if (!include && isInclude) {
            continue;
          }
          if (item.children && item.children.length > 0) {
            var childResult = getDataValues(item.children, filterValues, {
              isTreeMode: isTreeMode,
              include: include
            });
            result = result.concat(childResult);
          } else if (include && isInclude || !include && !isInclude) {
            result.push(item.value);
          }
        }
      }
      return result;
    }
    return data.filter(function (item) {
      if (!item) return false;
      var isInclude = filterValues.includes(item.value);
      return (include && isInclude || !include && !isInclude) && !item.disabled;
    }).map(function (item) {
      return item.value;
    });
  }
  function getTransferData(data, keys) {
    var isTreeMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var list = data.map(function (transferDataItem, index) {
      var _transferDataItem$dis;
      var labelKey = (keys === null || keys === void 0 ? void 0 : keys.label) || "label";
      var valueKey = (keys === null || keys === void 0 ? void 0 : keys.value) || "value";
      if (transferDataItem[labelKey] === void 0) {
        throw new Error("".concat(labelKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem)));
      }
      if (transferDataItem[valueKey] === void 0) {
        throw new Error("".concat(valueKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem)));
      }
      var result = {
        label: transferDataItem[labelKey],
        value: transferDataItem[valueKey],
        key: "key__value_".concat(transferDataItem[valueKey], "_index_").concat(index),
        disabled: (_transferDataItem$dis = transferDataItem.disabled) !== null && _transferDataItem$dis !== void 0 ? _transferDataItem$dis : false,
        data: transferDataItem
      };
      if (isTreeMode && transferDataItem.children) {
        result.children = getTransferData(transferDataItem.children, keys, true);
      }
      return result;
    });
    return list;
  }
  function isAllNodeValid(data, filterValues, needMatch) {
    if (filterValues.includes(data.value)) {
      return needMatch;
    }
    return false;
  }
  function isTreeNodeValid(data, filterValues, needMatch) {
    var _data$children;
    if (!data) return !needMatch;
    if (filterValues.includes(data.value)) {
      return needMatch;
    }
    if ((_data$children = data.children) !== null && _data$children !== void 0 && _data$children.length) {
      return data.children.some(function (item) {
        return isTreeNodeValid(item, filterValues, needMatch);
      });
    }
    return !needMatch;
  }
  function cloneTreeWithFilter(sourceTree, targetTree, filterValues, needMatch) {
    sourceTree.forEach(function (item) {
      var newNode;
      if (isAllNodeValid(item, filterValues, needMatch)) {
        newNode = cloneDeep_1(item);
        targetTree.push(newNode);
      } else if (isTreeNodeValid(item, filterValues, needMatch)) {
        newNode = _objectSpread$18({}, item);
        delete newNode.children;
        targetTree.push(newNode);
        if (item.children) {
          newNode.children = [];
          cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);
          if (newNode.children.length === 0) {
            delete newNode.children;
          }
        }
      }
    });
  }
  function filterTransferData(data, filterValues) {
    var needMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var isTreeMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    if (!isTreeMode) {
      if (needMatch) {
        return filterValues.map(function (value) {
          return data.find(function (item) {
            return item.value === value;
          });
        }).filter(function (item) {
          return !!item;
        });
      }
      return data.filter(function (item) {
        var isMatch = filterValues.includes(item.value);
        return !isMatch;
      });
    }
    var result = [];
    cloneTreeWithFilter(data, result, filterValues, needMatch);
    return result;
  }
  function getLefCount(nodes) {
    var total = 0;
    nodes.forEach(function (child) {
      if (child.children && child.children.length > 0) {
        total += getLefCount(child.children);
      } else {
        total += 1;
      }
    });
    return total;
  }

  var Search = vue.defineComponent({
    name: "TTransferSearch",
    props: {
      value: {
        type: String,
        "default": ""
      },
      search: {
        type: [Boolean, Object],
        "default": false
      },
      placeholder: {
        type: String,
        "default": ""
      },
      onChange: Function
    },
    setup: function setup(props) {
      var classPrefix = usePrefixClass();
      var _useGlobalIcon = useGlobalIcon({
          SearchIcon: search
        }),
        SearchIcon = _useGlobalIcon.SearchIcon;
      var handleChange = function handleChange(value, changeCtx) {
        var _props$onChange;
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
          value: value,
          e: changeCtx.e
        });
      };
      var inputProps = _typeof$2(props.search) === "object" ? props.search : {
        clearable: true
      };
      return function () {
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__search-wrapper")
        }, [vue.createVNode(Input, vue.mergeProps(inputProps, {
          "defaultValue": props.value,
          "onChange": handleChange,
          "placeholder": props.placeholder
        }), {
          "default": function _default() {
            return [vue.createVNode(SearchIcon, {
              "slot": "suffix-icon"
            }, null)];
          }
        })]);
      };
    }
  });

  function ownKeys$18(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$17(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$18(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$18(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$i(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var props$t = {
    checkboxProps: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    dataSource: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    listType: {
      type: String,
      "default": "target"
    },
    title: {
      type: [String, Function]
    },
    checkedValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    search: {
      type: [Boolean, Object],
      "default": false
    },
    transferItem: Function,
    empty: {
      type: [Function, String]
    },
    pagination: [Boolean, Object],
    footer: [Function, String],
    checkAll: Boolean,
    isTreeMode: {
      type: Boolean,
      "default": false
    },
    onCheckedChange: Function,
    onPageChange: Function,
    onScroll: Function,
    onSearch: Function
  };
  var TransferList = vue.defineComponent({
    name: "TTransferList",
    props: _objectSpread$17({}, props$t),
    setup: function setup(props2) {
      var classPrefix = usePrefixClass();
      var _useConfig = useConfig("transfer"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var filterValue = vue.ref("");
      var defaultCurrent = vue.ref(1);
      var defaultPageSize = vue.ref(0);
      var currentPage = vue.computed(function () {
        var pagination = props2.pagination;
        return (pagination === null || pagination === void 0 ? void 0 : pagination.current) || defaultCurrent.value || (pagination === null || pagination === void 0 ? void 0 : pagination.defaultCurrent);
      });
      var pageSize = vue.computed(function () {
        var pagination = props2.pagination;
        return (pagination === null || pagination === void 0 ? void 0 : pagination.pageSize) || defaultPageSize.value || (pagination === null || pagination === void 0 ? void 0 : pagination.defaultPageSize);
      });
      var filteredData = vue.computed(function () {
        return props2.dataSource.filter(function (item) {
          var label = item && item.label.toString();
          return label.toLowerCase().indexOf(filterValue.value.toLowerCase()) > -1;
        });
      });
      var pageTotal = vue.computed(function () {
        return filteredData.value && filteredData.value.length || 0;
      });
      var curPageData = vue.computed(function () {
        var pageData = filteredData.value;
        if (!props2.pagination) return pageData;
        if (pageSize.value === 0) return pageData;
        var startIndex = (currentPage.value - 1) * pageSize.value;
        var endIndex = currentPage.value * pageSize.value;
        pageData = pageData.slice(startIndex, endIndex);
        return pageData;
      });
      var paginationProps = vue.computed(function () {
        var defaultPaginationProps = {
          size: "small",
          theme: "simple",
          totalContent: false,
          pageSizeOptions: []
        };
        return _typeof$2(props2.pagination) === "object" ? _objectSpread$17(_objectSpread$17(_objectSpread$17({}, defaultPaginationProps), props2.pagination), {}, {
          current: currentPage.value,
          total: pageTotal.value,
          pageSize: pageSize.value
        }) : {};
      });
      var isAllChecked = vue.computed(function () {
        var allValue = getDataValues(props2.dataSource, [], {
          isTreeMode: props2.isTreeMode,
          include: false
        });
        return props2.checkedValue.length > 0 && (props2.isTreeMode ? allValue.every(function (item) {
          return props2.checkedValue.includes(item);
        }) : (props2.search ? filteredData.value : props2.dataSource).every(function (item) {
          return item.disabled || props2.checkedValue.includes(item.value);
        }));
      });
      var indeterminate = vue.computed(function () {
        return !isAllChecked.value && props2.checkedValue.length > 0;
      });
      var totalCount = vue.computed(function () {
        return getLefCount(props2.dataSource);
      });
      vue.watch(totalCount, function (val) {
        if (val <= (currentPage.value - 1) * pageSize.value) {
          var lastPage = Math.ceil(val / pageSize.value);
          defaultCurrent.value = lastPage;
        }
      });
      var handlePaginationChange = function handlePaginationChange(pageInfo) {
        var _props2$onPageChange;
        (_props2$onPageChange = props2.onPageChange) === null || _props2$onPageChange === void 0 ? void 0 : _props2$onPageChange.call(props2, pageInfo);
        defaultCurrent.value = pageInfo.current;
        defaultPageSize.value = pageInfo.pageSize;
      };
      var handleCheckedChange = function handleCheckedChange(val) {
        var _props2$onCheckedChan;
        (_props2$onCheckedChan = props2.onCheckedChange) === null || _props2$onCheckedChan === void 0 ? void 0 : _props2$onCheckedChan.call(props2, val);
      };
      var handleCheckedAllChange = function handleCheckedAllChange(checked) {
        if (checked) {
          var allValue = getDataValues(props2.search ? filteredData.value : props2.dataSource, [], {
            isTreeMode: props2.isTreeMode,
            include: false
          });
          handleCheckedChange(allValue);
        } else {
          handleCheckedChange([]);
        }
      };
      var scroll = function scroll(e) {
        var _props2$onScroll;
        (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 ? void 0 : _props2$onScroll.call(props2, e);
      };
      var handleSearch = function handleSearch(e) {
        var _props2$onSearch;
        var event = {
          query: e.value,
          type: props2.listType,
          e: e.e,
          trigger: e.trigger
        };
        filterValue.value = e.value;
        (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, event);
      };
      var renderTNodeJSX = useTNodeDefault();
      var renderTitle = function renderTitle() {
        var defaultNode = props2.title && typeof props2.title === "string" ? vue.createVNode("template", null, [props2.title]) : null;
        var titleNode = renderTNodeJSX("title", {
          defaultNode: defaultNode,
          params: {
            type: props2.listType
          }
        });
        return vue.createVNode("span", null, [titleNode]);
      };
      var renderContent = function renderContent() {
        var _slot2;
        var defaultNode = vue.createVNode(CheckboxGroup, {
          "value": props2.checkedValue,
          "onChange": handleCheckedChange
        }, _isSlot$i(_slot2 = curPageData.value.map(function (item, index) {
          var _slot;
          return vue.createVNode(Checkbox, vue.mergeProps({
            "disabled": props2.disabled || item.disabled,
            "value": item.value,
            "needRipple": true,
            "class": ["".concat(classPrefix.value, "-transfer__list-item"), props2.checkedValue.includes(item.value) ? "".concat(classPrefix.value, "-is-checked") : ""],
            "key": item.key
          }, props2.checkboxProps), _isSlot$i(_slot = renderTNodeJSX("transferItem", {
            defaultNode: vue.createVNode("span", null, [item.label]),
            params: {
              data: item.data,
              index: index,
              type: props2.listType
            }
          })) ? _slot : {
            "default": function _default() {
              return [_slot];
            }
          });
        })) ? _slot2 : {
          "default": function _default() {
            return [_slot2];
          }
        });
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__list-content narrow-scrollbar"),
          "onScroll": scroll
        }, [renderTNodeJSX("tree", {
          defaultNode: defaultNode,
          params: {
            data: curPageData.value,
            value: props2.checkedValue,
            onChange: handleCheckedChange
          }
        })]);
      };
      var renderEmpty = function renderEmpty() {
        var empty = props2.empty || t(globalConfig.value.empty);
        var defaultNode = typeof empty === "string" ? vue.createVNode("span", null, [empty]) : null;
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__empty")
        }, [renderTNodeJSX("empty", {
          defaultNode: defaultNode,
          params: {
            type: props2.listType
          }
        })]);
      };
      var renderFooter = function renderFooter() {
        var defaultNode = typeof props2.footer === "string" ? vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__footer")
        }, [props2.footer]) : null;
        return renderTNodeJSX("footer", {
          defaultNode: defaultNode,
          params: {
            type: props2.listType
          }
        });
      };
      return function () {
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__list ").concat(classPrefix.value, "-transfer__list-").concat(props2.listType)
        }, [vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__list-header")
        }, [vue.createVNode("div", null, [props2.checkAll && vue.createVNode(Checkbox, {
          "disabled": props2.disabled || !props2.dataSource.length,
          "checked": isAllChecked.value,
          "indeterminate": indeterminate.value,
          "onChange": handleCheckedAllChange
        }, null), vue.createVNode("span", null, [t(globalConfig.value.title, {
          checked: props2.checkedValue.length,
          total: totalCount.value
        })])]), renderTitle()]), vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-transfer__list-body"), props2.search ? "".concat(classPrefix.value, "-transfer__list--with-search") : ""]
        }, [props2.search && vue.createVNode(Search, {
          "searchValue": filterValue.value,
          "placeholder": t(globalConfig.value.placeholder),
          "onChange": handleSearch,
          "disabled": props2.disabled,
          "search": props2.search
        }, null), curPageData.value.length > 0 ? renderContent() : renderEmpty()]), props2.pagination && pageSize.value > 0 && pageTotal.value > 0 && vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__list-pagination")
        }, [vue.createVNode(Pagination, vue.mergeProps(paginationProps.value, {
          "onChange": handlePaginationChange
        }), null)]), renderFooter()]);
      };
    }
  });

  var props$s = {
    checkboxProps: {
      type: Object
    },
    checked: {
      type: Array,
      "default": void 0
    },
    defaultChecked: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    direction: {
      type: String,
      "default": "both",
      validator: function validator(val) {
        return ["left", "right", "both"].includes(val);
      }
    },
    disabled: {
      type: [Boolean, Array],
      "default": false
    },
    empty: {
      type: [String, Array, Function],
      "default": ""
    },
    footer: {
      type: [Array, Function]
    },
    keys: {
      type: Object
    },
    operation: {
      type: [Array, Function]
    },
    pagination: {
      type: [Object, Array]
    },
    search: {
      type: [Boolean, Object, Array],
      "default": false
    },
    showCheckAll: {
      type: [Boolean, Array],
      "default": true
    },
    targetSort: {
      type: String,
      "default": "original",
      validator: function validator(val) {
        return ["original", "push", "unshift"].includes(val);
      }
    },
    title: {
      type: [Array, Function],
      "default": function _default() {
        return [];
      }
    },
    transferItem: {
      type: Function
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onChange: Function,
    onCheckedChange: Function,
    onPageChange: Function,
    onScroll: Function,
    onSearch: Function
  };

  function _isSlot$h(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var TransferOperations = vue.defineComponent({
    name: "TTransferOperations",
    props: {
      leftDisabled: {
        type: Boolean,
        required: true
      },
      rightDisabled: {
        type: Boolean,
        required: true
      },
      operation: props$s.operation
    },
    emits: ["moveToRight", "moveToLeft"],
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
        emit = _ref.emit;
      var classPrefix = usePrefixClass();
      var _useGlobalIcon = useGlobalIcon({
          ChevronRightIcon: chevronRight,
          ChevronLeftIcon: chevronLeft
        }),
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
        ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon;
      var moveToRight = function moveToRight() {
        emit("moveToRight");
      };
      var moveToLeft = function moveToLeft() {
        emit("moveToLeft");
      };
      var getIconRight = function getIconRight() {
        return vue.createVNode(ChevronRightIcon, null, null);
      };
      var getIconLeft = function getIconLeft() {
        return vue.createVNode(ChevronLeftIcon, null, null);
      };
      var getIcon = function getIcon(direction) {
        if (typeof props2.operation === "function") {
          return null;
        }
        if (direction === "right" && props2.operation && typeof props2.operation[0] === "function") {
          return null;
        }
        if (direction === "left" && props2.operation && typeof props2.operation[1] === "function") {
          return null;
        }
        if (slots.operation) {
          return null;
        }
        return direction === "left" ? getIconLeft : getIconRight;
      };
      var renderButton = function renderButton(h2, direction) {
        if (typeof slots.operation === "function") {
          return slots.operation({
            direction: direction
          });
        }
        if (typeof props2.operation === "function") {
          var renderContent2 = props2.operation;
          return renderContent2(h2, {
            direction: direction
          });
        }
        var renderContent;
        if (Array.isArray(props2.operation)) {
          var _props2$operation = _slicedToArray(props2.operation, 2),
            left = _props2$operation[0],
            right = _props2$operation[1];
          renderContent = direction === "right" ? right : left;
        } else {
          renderContent = "";
        }
        return renderContent;
      };
      return function () {
        var _slot, _slot2;
        var _props2$operation2, _props2$operation3;
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__operations")
        }, [vue.createVNode(Button, {
          "variant": "outline",
          "size": "small",
          "shape": typeof ((_props2$operation2 = props2.operation) === null || _props2$operation2 === void 0 ? void 0 : _props2$operation2[1]) === "string" ? "rectangle" : "square",
          "key": props2.rightDisabled ? "right-outline" : "right-base",
          "disabled": props2.rightDisabled,
          "onClick": moveToRight,
          "icon": getIcon("right")
        }, _isSlot$h(_slot = renderButton(vue.h, "right")) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        }), vue.createVNode(Button, {
          "variant": "outline",
          "size": "small",
          "shape": typeof ((_props2$operation3 = props2.operation) === null || _props2$operation3 === void 0 ? void 0 : _props2$operation3[0]) === "string" ? "rectangle" : "square",
          "key": props2.rightDisabled ? "left-outline" : "left-base",
          "disabled": props2.leftDisabled,
          "onClick": moveToLeft,
          "icon": getIcon("left")
        }, _isSlot$h(_slot2 = renderButton(vue.h, "left")) ? _slot2 : {
          "default": function _default() {
            return [_slot2];
          }
        })]);
      };
    }
  });

  function ownKeys$17(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$16(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$17(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$17(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$g(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var SOURCE = "source";
  var TARGET = "target";
  var _Transfer = vue.defineComponent({
    name: TRANSFER_NAME,
    props: _objectSpread$16({}, props$s),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var disabled = useFormDisabled();
      var classPrefix = usePrefixClass();
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        checked = _toRefs.checked;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var _useDefaultValue = useDefaultValue(checked, props2.defaultChecked, props2.onCheckedChange, "checked"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 1),
        innerChecked = _useDefaultValue2[0];
      var valueList = vue.computed(function () {
        return innerValue.value;
      });
      var isTreeMode = vue.computed(function () {
        var treeSlot = slots.tree;
        return typeof treeSlot === "function";
      });
      var leftButtonDisabled = vue.computed(function () {
        return props2.direction === "right";
      });
      var rightButtonDisabled = vue.computed(function () {
        return props2.direction === "left";
      });
      var transferData = vue.computed(function () {
        return getTransferData(props2.data, props2.keys, isTreeMode.value);
      });
      var sourceList = vue.computed(function () {
        return filterTransferData(transferData.value, valueList.value, false, isTreeMode.value);
      });
      var targetList = vue.computed(function () {
        return filterTransferData(transferData.value, valueList.value, true, isTreeMode.value);
      });
      var checkedValue = vue.computed(function () {
        var _ref2;
        return _ref2 = {}, _defineProperty$3(_ref2, SOURCE, getDataValues(sourceList.value, innerChecked.value, {
          isTreeMode: isTreeMode.value
        })), _defineProperty$3(_ref2, TARGET, getDataValues(targetList.value, innerChecked.value, {
          isTreeMode: isTreeMode.value
        })), _ref2;
      });
      var hasFooter = vue.computed(function () {
        return !!slots.footer || !!props2.footer;
      });
      var showPagination = vue.computed(function () {
        return !!props2.pagination && !slots.content;
      });
      var showSearch = vue.computed(function () {
        return !!props2.search;
      });
      var footerOption = vue.computed(function () {
        var footer = props2.footer || "";
        return getTransferListOption(footer);
      });
      var emptyOption = vue.computed(function () {
        return getTransferListOption(props2.empty);
      });
      var searchOption = vue.computed(function () {
        return getTransferListOption(props2.search);
      });
      var checkAllOption = vue.computed(function () {
        return getTransferListOption(props2.showCheckAll);
      });
      var disabledOption = vue.computed(function () {
        return getTransferListOption(disabled.value);
      });
      var titleOption = vue.computed(function () {
        return getTransferListOption(props2.title);
      });
      var paginationOption = vue.computed(function () {
        return getTransferListOption(props2.pagination);
      });
      var handleCheckedChange = function handleCheckedChange(val, listType) {
        var _props2$onCheckedChan;
        var sourceChecked = listType === SOURCE ? val : checkedValue.value[SOURCE];
        var targetChecked = listType === TARGET ? val : checkedValue.value[TARGET];
        var checked2 = [].concat(_toConsumableArray(sourceChecked), _toConsumableArray(targetChecked));
        var event = {
          checked: checked2,
          sourceChecked: sourceChecked,
          targetChecked: targetChecked,
          type: listType
        };
        innerChecked.value = checked2;
        (_props2$onCheckedChan = props2.onCheckedChange) === null || _props2$onCheckedChan === void 0 ? void 0 : _props2$onCheckedChan.call(props2, event);
      };
      var transferTo = function transferTo(toDirection) {
        var oldTargetValue = JSON.parse(JSON.stringify(valueList.value));
        var newTargetValue;
        var selfCheckedValue = toDirection === TARGET ? checkedValue.value[SOURCE] : checkedValue.value[TARGET];
        if (toDirection === SOURCE) {
          newTargetValue = oldTargetValue.filter(function (v) {
            return !selfCheckedValue.includes(v);
          });
        } else if (props2.targetSort === "original") {
          newTargetValue = getDataValues(transferData.value, oldTargetValue.concat(selfCheckedValue), {
            isTreeMode: isTreeMode.value
          });
        } else if (props2.targetSort === "unshift") {
          newTargetValue = selfCheckedValue.concat(oldTargetValue);
        } else {
          newTargetValue = oldTargetValue.concat(selfCheckedValue);
        }
        handleCheckedChange([], toDirection === SOURCE ? TARGET : SOURCE);
        var params = {
          type: toDirection,
          movedValue: selfCheckedValue
        };
        setInnerValue(newTargetValue, params);
      };
      var transferToRight = function transferToRight() {
        transferTo(TARGET);
      };
      var transferToLeft = function transferToLeft() {
        transferTo(SOURCE);
      };
      var handleScroll = function handleScroll(e, listType) {
        var _props2$onScroll;
        var target = e.target;
        var bottomDistance = target.scrollHeight - target.scrollTop - target.clientHeight;
        var event = {
          e: e,
          bottomDistance: bottomDistance,
          type: listType
        };
        (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 ? void 0 : _props2$onScroll.call(props2, event);
      };
      var handleSearch = function handleSearch(e) {
        var _props2$onSearch;
        (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, e);
      };
      var handlePageChange = function handlePageChange(pageInfo, listType) {
        var _props2$onPageChange;
        (_props2$onPageChange = props2.onPageChange) === null || _props2$onPageChange === void 0 ? void 0 : _props2$onPageChange.call(props2, pageInfo, {
          type: listType
        });
      };
      var renderTransferList = function renderTransferList(listType) {
        var scopedSlots = pick_1(slots, ["title", "empty", "footer", "operation", "transferItem", "default", "tree"]);
        return vue.createVNode(TransferList, {
          "checkboxProps": props2.checkboxProps,
          "transferItem": props2.transferItem,
          "list-type": listType,
          "title": titleOption.value[listType],
          "data-source": listType === SOURCE ? sourceList.value : targetList.value,
          "checked-value": checkedValue.value[listType],
          "disabled": disabledOption.value[listType],
          "search": searchOption.value[listType],
          "pagination": paginationOption.value[listType],
          "check-all": checkAllOption.value[listType],
          "footer": footerOption.value[listType],
          "empty": emptyOption.value[listType],
          "onCheckedChange": function onCheckedChange($event) {
            return handleCheckedChange($event, listType);
          },
          "onScroll": function onScroll($event) {
            return handleScroll($event, listType);
          },
          "onSearch": handleSearch,
          "onPageChange": function onPageChange($event) {
            return handlePageChange($event, listType);
          },
          "isTreeMode": isTreeMode.value
        }, _isSlot$g(scopedSlots) ? scopedSlots : {
          "default": function _default() {
            return [scopedSlots];
          }
        });
      };
      return function () {
        return vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-transfer"), showSearch.value ? "".concat(classPrefix.value, "-transfer__search") : "", hasFooter.value ? "".concat(classPrefix.value, "-transfer__footer") : "", showPagination.value ? "".concat(classPrefix.value, "-transfer__pagination") : "", isTreeMode.value ? "".concat(classPrefix.value, "-transfer--with-tree") : ""]
        }, [renderTransferList(SOURCE), vue.createVNode(TransferOperations, {
          "leftDisabled": disabledOption.value[TARGET] || leftButtonDisabled.value || checkedValue.value[TARGET].length === 0,
          "rightDisabled": disabledOption.value[SOURCE] || rightButtonDisabled.value || checkedValue.value[SOURCE].length === 0,
          "operation": props2.operation,
          "onMoveToRight": transferToRight,
          "onMoveToLeft": transferToLeft
        }, {
          operation: slots.operation
        }), renderTransferList(TARGET)]);
      };
    }
  });

  var Transfer = withInstall(_Transfer);

  function ownKeys$16(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$15(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$16(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$16(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs.extend(customParseFormat);
  var _TimePicker = vue.defineComponent({
    name: "TTimePicker",
    props: _objectSpread$15({}, props$D),
    setup: function setup(props2) {
      var currentValue = vue.ref("");
      var isShowPanel = vue.ref(false);
      var _useConfig = useConfig("timePicker"),
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          TimeIcon: time
        }),
        TimeIcon = _useGlobalIcon.TimeIcon;
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var disabled = useFormDisabled();
      var _toRefs2 = vue.toRefs(props2),
        allowInput = _toRefs2.allowInput,
        format = _toRefs2.format;
      var _useConfig2 = useConfig("classPrefix"),
        classPrefix = _useConfig2.classPrefix;
      var componentName = usePrefixClass("time-picker");
      var inputClasses = vue.computed(function () {
        return ["".concat(componentName.value, "__group"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-focused"), isShowPanel.value)];
      });
      var handleShowPopup = function handleShowPopup(visible, context) {
        var _props2$onOpen, _props2$onClose;
        isShowPanel.value = visible;
        visible ? (_props2$onOpen = props2.onOpen) === null || _props2$onOpen === void 0 ? void 0 : _props2$onOpen.call(props2, context) : (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, context);
      };
      var handleClear = function handleClear(context) {
        var e = context.e;
        e.stopPropagation();
        currentValue.value = null;
        setInnerValue(null);
      };
      var handleInputChange = function handleInputChange(value2) {
        currentValue.value = value2;
      };
      var handleInputBlur = function handleInputBlur(value2, _ref2) {
        var _props2$onBlur;
        var e = _ref2.e;
        if (allowInput.value) {
          var isValidTime = validateInputValue(currentValue.value, format.value);
          if (isValidTime) {
            setInnerValue(formatInputValue(currentValue.value, format.value));
          }
        }
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, {
          value: value2,
          e: e
        });
      };
      var handleClickConfirm = function handleClickConfirm() {
        var isValidTime = validateInputValue(currentValue.value, format.value);
        if (isValidTime) setInnerValue(currentValue.value);
        isShowPanel.value = false;
      };
      var handlePanelChange = function handlePanelChange(v) {
        var _props2$onPick;
        currentValue.value = v;
        (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 ? void 0 : _props2$onPick.call(props2, v);
      };
      vue.watch(function () {
        return isShowPanel.value;
      }, function () {
        var _innerValue$value;
        currentValue.value = isShowPanel.value ? (_innerValue$value = innerValue.value) !== null && _innerValue$value !== void 0 ? _innerValue$value : "" : "";
      });
      return function () {
        var _innerValue$value2, _innerValue$value3;
        return vue.createVNode("div", {
          "class": componentName.value
        }, [vue.createVNode(SelectInput, {
          "onFocus": props2.onFocus,
          "onClear": handleClear,
          "disabled": disabled.value,
          "clearable": props2.clearable,
          "allowInput": allowInput.value,
          "className": inputClasses.value,
          "suffixIcon": function suffixIcon() {
            return vue.createVNode(TimeIcon, null, null);
          },
          "popupVisible": isShowPanel.value,
          "onInputChange": handleInputChange,
          "onBlur": handleInputBlur,
          "onPopupVisibleChange": handleShowPopup,
          "placeholder": !innerValue.value ? props2.placeholder || globalConfig.value.placeholder : void 0,
          "value": isShowPanel.value ? currentValue.value : (_innerValue$value2 = innerValue.value) !== null && _innerValue$value2 !== void 0 ? _innerValue$value2 : void 0,
          "inputValue": isShowPanel.value ? currentValue.value : (_innerValue$value3 = innerValue.value) !== null && _innerValue$value3 !== void 0 ? _innerValue$value3 : void 0,
          "inputProps": props2.inputProps,
          "popupProps": _objectSpread$15({
            overlayInnerStyle: {
              width: "auto",
              padding: 0
            }
          }, props2.popupProps),
          "panel": function panel() {
            return vue.createVNode(_TimePickerPanel, {
              "steps": props2.steps,
              "format": format.value,
              "value": currentValue.value,
              "isFooterDisplay": true,
              "isShowPanel": isShowPanel.value,
              "disableTime": props2.disableTime,
              "onChange": handlePanelChange,
              "hideDisabledTime": props2.hideDisabledTime,
              "handleConfirmClick": handleClickConfirm
            }, null);
          }
        }, null)]);
      };
    }
  });

  var props$r = {
    allowInput: Boolean,
    clearable: Boolean,
    disableTime: {
      type: Function
    },
    disabled: {
      type: [Boolean, Array],
      "default": false
    },
    format: {
      type: String,
      "default": "HH:mm:ss"
    },
    hideDisabledTime: {
      type: Boolean,
      "default": true
    },
    placeholder: {
      type: [String, Array],
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    presets: {
      type: Object
    },
    rangeInputProps: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    steps: {
      type: Array,
      "default": function _default() {
        return [1, 1, 1];
      }
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onInput: Function,
    onPick: Function
  };

  function ownKeys$15(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$14(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$15(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$15(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs.extend(customParseFormat);
  var _TimeRangePicker = vue.defineComponent({
    name: "TTimeRangePicker",
    props: _objectSpread$14(_objectSpread$14({}, props$r), {}, {
      rangeInputProps: Object,
      popupProps: Object
    }),
    setup: function setup(props2) {
      var componentName = usePrefixClass("time-range-picker");
      var _useConfig = useConfig("timePicker"),
        globalConfig = _useConfig.globalConfig;
      var _useConfig2 = useConfig("classPrefix"),
        classPrefix = _useConfig2.classPrefix;
      var _useGlobalIcon = useGlobalIcon({
          TimeIcon: time
        }),
        TimeIcon = _useGlobalIcon.TimeIcon;
      var disabled = useFormDisabled();
      var currentPanelIdx = vue.ref(void 0);
      var currentValue = vue.ref(TIME_PICKER_EMPTY);
      var isShowPanel = vue.ref(false);
      var inputClasses = vue.computed(function () {
        return ["".concat(componentName.value, "__group"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-focused"), isShowPanel.value)];
      });
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        allowInput = _toRefs.allowInput,
        format = _toRefs.format;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var handleShowPopup = function handleShowPopup(visible, context) {
        if (context.trigger === "trigger-element-click") {
          isShowPanel.value = true;
          return;
        }
        isShowPanel.value = visible;
      };
      var handleClear = function handleClear(context) {
        var e = context.e;
        e.stopPropagation();
        currentValue.value = TIME_PICKER_EMPTY;
        setInnerValue(null);
      };
      var handleClick = function handleClick(_ref2) {
        var position = _ref2.position;
        currentPanelIdx.value = position === "first" ? 0 : 1;
      };
      var handleTimeChange = function handleTimeChange(newValue) {
        if (currentPanelIdx.value === 0) {
          var _currentValue$value$;
          currentValue.value = [newValue, (_currentValue$value$ = currentValue.value[1]) !== null && _currentValue$value$ !== void 0 ? _currentValue$value$ : newValue];
        } else {
          var _currentValue$value$2;
          currentValue.value = [(_currentValue$value$2 = currentValue.value[0]) !== null && _currentValue$value$2 !== void 0 ? _currentValue$value$2 : newValue, newValue];
        }
        handleOnPick(newValue);
      };
      var handleInputBlur = function handleInputBlur(value2, _ref3) {
        var _props2$onBlur;
        var e = _ref3.e;
        if (allowInput.value) {
          var isValidTime = validateInputValue(currentValue.value[currentPanelIdx.value], format.value);
          if (isValidTime) {
            var _currentValue$value$3, _currentValue$value$4;
            var formattedVal = formatInputValue(currentValue.value[currentPanelIdx.value], format.value);
            currentPanelIdx.value === 0 ? currentValue.value = [formattedVal, (_currentValue$value$3 = currentValue.value[1]) !== null && _currentValue$value$3 !== void 0 ? _currentValue$value$3 : formattedVal] : currentValue.value = [(_currentValue$value$4 = currentValue.value[0]) !== null && _currentValue$value$4 !== void 0 ? _currentValue$value$4 : formattedVal, formattedVal];
          }
        }
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, {
          value: value2,
          e: e
        });
      };
      var handleInputChange = function handleInputChange(inputVal, _ref4) {
        var _props2$onInput;
        var e = _ref4.e,
          position = _ref4.position;
        currentValue.value = inputVal;
        (_props2$onInput = props2.onInput) === null || _props2$onInput === void 0 ? void 0 : _props2$onInput.call(props2, {
          value: innerValue.value,
          e: e,
          position: position === "first" ? "start" : "end"
        });
      };
      var handleClickConfirm = function handleClickConfirm() {
        var isValidTime = !currentValue.value.find(function (v) {
          return !validateInputValue(v, format.value);
        });
        if (isValidTime) setInnerValue(currentValue.value);
        isShowPanel.value = false;
      };
      var handleFocus = function handleFocus(value2, _ref5) {
        var _props2$onFocus;
        var e = _ref5.e,
          position = _ref5.position;
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, {
          value: value2,
          e: e,
          position: position === "first" ? "start" : "end"
        });
      };
      var handleOnPick = function handleOnPick(pickValue) {
        var _props2$onPick;
        var pickedRangeValue = [];
        var context = {};
        if (currentPanelIdx.value === 0) {
          var _currentValue$value$5;
          pickedRangeValue = [pickValue, (_currentValue$value$5 = currentValue.value[1]) !== null && _currentValue$value$5 !== void 0 ? _currentValue$value$5 : pickValue];
          context = {
            position: "start"
          };
        } else {
          var _currentValue$value$6;
          pickedRangeValue = [(_currentValue$value$6 = currentValue.value[0]) !== null && _currentValue$value$6 !== void 0 ? _currentValue$value$6 : pickValue, pickValue];
          context = {
            position: "end"
          };
        }
        (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 ? void 0 : _props2$onPick.call(props2, pickedRangeValue, context);
      };
      vue.watch(function () {
        return isShowPanel.value;
      }, function () {
        var _innerValue$value;
        currentValue.value = isShowPanel.value ? (_innerValue$value = innerValue.value) !== null && _innerValue$value !== void 0 ? _innerValue$value : TIME_PICKER_EMPTY : TIME_PICKER_EMPTY;
        if (!isShowPanel.value) currentPanelIdx.value = void 0;
      });
      return function () {
        var _innerValue$value2, _innerValue$value3;
        return vue.createVNode("div", {
          "class": componentName.value
        }, [vue.createVNode(RangeInputPopup, {
          "disabled": disabled.value,
          "popupVisible": isShowPanel.value,
          "popupProps": _objectSpread$14({
            overlayInnerStyle: {
              width: "auto",
              padding: 0
            },
            onVisibleChange: handleShowPopup
          }, props2.popupProps),
          "onInputChange": handleInputChange,
          "inputValue": isShowPanel.value ? currentValue.value : (_innerValue$value2 = innerValue.value) !== null && _innerValue$value2 !== void 0 ? _innerValue$value2 : TIME_PICKER_EMPTY,
          "rangeInputProps": _objectSpread$14({
            size: props2.size,
            clearable: props2.clearable,
            "class": inputClasses.value,
            value: isShowPanel.value ? currentValue.value : (_innerValue$value3 = innerValue.value) !== null && _innerValue$value3 !== void 0 ? _innerValue$value3 : void 0,
            placeholder: props2.placeholder || [globalConfig.value.placeholder, globalConfig.value.placeholder],
            suffixIcon: function suffixIcon() {
              return vue.createVNode(TimeIcon, null, null);
            },
            onClear: handleClear,
            onClick: handleClick,
            onFocus: handleFocus,
            onBlur: handleInputBlur,
            readonly: !allowInput.value,
            activeIndex: currentPanelIdx.value
          }, props2.rangeInputProps),
          "panel": function panel() {
            return vue.createVNode(_TimePickerPanel, {
              "steps": props2.steps,
              "format": format.value,
              "isShowPanel": isShowPanel.value,
              "disableTime": props2.disableTime,
              "hideDisabledTime": props2.hideDisabledTime,
              "isFooterDisplay": true,
              "value": currentValue.value[currentPanelIdx.value || 0],
              "onChange": handleTimeChange,
              "onPick": handleOnPick,
              "handleConfirmClick": handleClickConfirm,
              "position": currentPanelIdx.value === 0 ? "start" : "end"
            }, null);
          }
        }, null)]);
      };
    }
  });

  var TimePicker = withInstall(_TimePicker);
  var TimeRangePicker = withInstall(_TimeRangePicker);
  var TimePickerPanel = withInstall(_TimePickerPanel);

  var props$q = {
    activable: Boolean,
    actived: {
      type: Array,
      "default": void 0
    },
    defaultActived: {
      type: Array
    },
    activeMultiple: Boolean,
    allowFoldNodeOnFilter: Boolean,
    checkable: Boolean,
    checkProps: {
      type: Object
    },
    checkStrictly: Boolean,
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disableCheck: {
      type: [Boolean, Function],
      "default": false
    },
    disabled: Boolean,
    draggable: {
      type: Boolean,
      "default": false
    },
    empty: {
      type: [String, Function],
      "default": ""
    },
    expandAll: Boolean,
    expanded: {
      type: Array,
      "default": void 0
    },
    defaultExpanded: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    expandLevel: {
      type: Number,
      "default": 0
    },
    expandMutex: Boolean,
    expandOnClickNode: Boolean,
    expandParent: Boolean,
    filter: {
      type: Function
    },
    hover: Boolean,
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    keys: {
      type: Object
    },
    label: {
      type: [String, Boolean, Function],
      "default": true
    },
    lazy: {
      type: Boolean,
      "default": true
    },
    line: {
      type: [Boolean, Function],
      "default": false
    },
    load: {
      type: Function
    },
    operations: {
      type: Function
    },
    transition: {
      type: Boolean,
      "default": true
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    valueMode: {
      type: String,
      "default": "onlyLeaf",
      validator: function validator(val) {
        if (!val) return true;
        return ["onlyLeaf", "parentFirst", "all"].includes(val);
      }
    },
    onActive: Function,
    onChange: Function,
    onClick: Function,
    onExpand: Function,
    onLoad: Function
  };

  var useCLASSNAMES = function useCLASSNAMES() {
    var classPrefix = usePrefixClass();
    return vue.computed(function () {
      var tree = "".concat(classPrefix.value, "-tree");
      return {
        icon: "".concat(classPrefix.value, "-icon"),
        folderIcon: "".concat(classPrefix.value, "-folder-icon"),
        actived: "".concat(classPrefix.value, "-is-active"),
        disabled: "".concat(classPrefix.value, "-is-disabled"),
        treeIconRight: "".concat(classPrefix.value, "-icon-arrow-right"),
        treeIconDown: "".concat(classPrefix.value, "-icon-arrow-down"),
        treeNodeToggle: "".concat(classPrefix.value, "-tree-toggle"),
        tree: tree,
        treeTransition: "".concat(tree, "--transition"),
        treeBlockNode: "".concat(tree, "--block-node"),
        treeEmpty: "".concat(tree, "__empty"),
        treeList: "".concat(tree, "__list"),
        treeNode: "".concat(tree, "__item"),
        treeNodeOpen: "".concat(tree, "__item--open"),
        treeHoverAble: "".concat(tree, "--hoverable"),
        treeCheckable: "".concat(tree, "--checkable"),
        treeLabel: "".concat(tree, "__label"),
        treeLabelStrictly: "".concat(tree, "__label--strictly"),
        treeIcon: "".concat(tree, "__icon"),
        treeIconDefault: "".concat(tree, "__icon--default"),
        treeSpace: "".concat(tree, "__space"),
        treeOperations: "".concat(tree, "__operations"),
        treeNodeVisible: "".concat(tree, "__item--visible"),
        treeNodeHidden: "".concat(tree, "__item--hidden"),
        treeNodeEnter: "".concat(tree, "__item--enter-active"),
        treeNodeLeave: "".concat(tree, "__item--leave-active"),
        treeNodeDraggable: "".concat(tree, "__item--draggable"),
        treeNodeDragging: "".concat(tree, "__item--dragging"),
        treeNodeDragTipTop: "".concat(tree, "__item--tip-top"),
        treeNodeDragTipBottom: "".concat(tree, "__item--tip-bottom"),
        treeNodeDragTipHighlight: "".concat(tree, "__item--tip-highlight"),
        line: "".concat(tree, "__line"),
        lineIsLeaf: "".concat(tree, "__line--leaf"),
        lineIsFirst: "".concat(tree, "__line--first")
      };
    });
  };
  var injectKey = Symbol("treeProvider");
  var dragInjectKey = Symbol("onDrag");

  function ownKeys$14(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$13(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$14(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$14(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getParentsToRoot(element, root) {
    var list = [];
    var el = element;
    while (el && el.parentNode) {
      list.push(el);
      if (el === root) {
        break;
      }
      el = el.parentNode;
    }
    return list;
  }
  function getParentMarks(name, element, root) {
    var list = getParentsToRoot(element, root);
    return list.map(function (el) {
      var mark = {
        name: name,
        value: el.getAttribute(name) || "",
        el: el
      };
      return mark;
    }).filter(function (mark) {
      return mark.value;
    });
  }
  function getMark(name, element, root) {
    var list = getParentMarks(name, element, root);
    var info = list.pop() || null;
    return info;
  }
  function getTNode(prop) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var tnode = null;
    var item = null;
    var conf = _objectSpread$13({}, options);
    if (typeof prop === "function") {
      var _conf$node;
      item = prop(vue.h, (_conf$node = conf.node) === null || _conf$node === void 0 ? void 0 : _conf$node.getModel());
    } else if (typeof prop === "string") {
      item = prop;
    }
    if (typeof item === "string") {
      tnode = item;
    } else if (item) {
      tnode = item;
    }
    return tnode;
  }
  function isTreeNodeValue(item) {
    return typeof item === "string" || typeof item === "number";
  }
  function getNode(store, item) {
    var node = null;
    var val = null;
    if (typeof item === "string" || typeof item === "number") {
      val = item;
    } else if (item && isTreeNodeValue(item.value)) {
      val = item.value;
    }
    node = store.getNode(val);
    return node;
  }
  var getStoreConfig = function getStoreConfig(props) {
    var storeProps = pick_1(props, ["keys", "expandAll", "expandLevel", "expandMutex", "expandParent", "activable", "activeMultiple", "disabled", "draggable", "checkable", "checkStrictly", "load", "lazy", "valueMode", "filter"]);
    return storeProps;
  };

  var debounce = debounce_1,
    isObject = isObject_1;

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed `func` invocations and a `flush` method to
   * immediately invoke them. Provide `options` to indicate whether `func`
   * should be invoked on the leading and/or trailing edge of the `wait`
   * timeout. The `func` is invoked with the last arguments provided to the
   * throttled function. Subsequent calls to the throttled function return the
   * result of the last `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the throttled function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=true]
   *  Specify invoking on the leading edge of the timeout.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // Avoid excessively updating the position while scrolling.
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
   * jQuery(element).on('click', throttled);
   *
   * // Cancel the trailing throttled invocation.
   * jQuery(window).on('popstate', throttled.cancel);
   */
  function throttle$1(func, wait, options) {
    var leading = true,
      trailing = true;
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    if (isObject(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return debounce(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }
  var throttle_1 = throttle$1;

  function useDraggable(props) {
    var _toRefs = vue.toRefs(props),
      nodeRef = _toRefs.nodeRef,
      node = _toRefs.node;
    var onDrag = vue.inject(dragInjectKey);
    var isDragOver = vue.ref(false);
    var isDragging = vue.ref(false);
    var dropPosition = vue.ref(0);
    var updateDropPosition = throttle_1(function (e) {
      if (!nodeRef.value) return;
      var rect = nodeRef.value.getBoundingClientRect();
      var offsetY = window.pageYOffset + rect.top;
      var pageY = e.pageY;
      var gapHeight = rect.height / 4;
      var diff = pageY - offsetY;
      if (diff < gapHeight) {
        dropPosition.value = -1;
      } else if (diff < rect.height - gapHeight) {
        dropPosition.value = 0;
      } else {
        dropPosition.value = 1;
      }
    });
    var setDragStatus = function setDragStatus(status, e) {
      var _onDrag$onDragStart, _onDrag$onDragEnd, _onDrag$onDragOver, _onDrag$onDragLeave, _onDrag$onDrop;
      switch (status) {
        case "dragStart":
          isDragging.value = true;
          dropPosition.value = 0;
          (_onDrag$onDragStart = onDrag.onDragStart) === null || _onDrag$onDragStart === void 0 ? void 0 : _onDrag$onDragStart.call(onDrag, {
            node: node.value,
            e: e
          });
          break;
        case "dragEnd":
          isDragging.value = false;
          isDragOver.value = false;
          dropPosition.value = 0;
          updateDropPosition.cancel();
          (_onDrag$onDragEnd = onDrag.onDragEnd) === null || _onDrag$onDragEnd === void 0 ? void 0 : _onDrag$onDragEnd.call(onDrag, {
            node: node.value,
            e: e
          });
          break;
        case "dragOver":
          isDragOver.value = true;
          updateDropPosition(e);
          (_onDrag$onDragOver = onDrag.onDragOver) === null || _onDrag$onDragOver === void 0 ? void 0 : _onDrag$onDragOver.call(onDrag, {
            node: node.value,
            e: e
          });
          break;
        case "dragLeave":
          isDragOver.value = false;
          dropPosition.value = 0;
          updateDropPosition.cancel();
          (_onDrag$onDragLeave = onDrag.onDragLeave) === null || _onDrag$onDragLeave === void 0 ? void 0 : _onDrag$onDragLeave.call(onDrag, {
            node: node.value,
            e: e
          });
          break;
        case "drop":
          (_onDrag$onDrop = onDrag.onDrop) === null || _onDrag$onDrop === void 0 ? void 0 : _onDrag$onDrop.call(onDrag, {
            node: node.value,
            dropPosition: dropPosition.value,
            e: e
          });
          isDragOver.value = false;
          updateDropPosition.cancel();
          break;
      }
    };
    return {
      isDragOver: isDragOver,
      isDragging: isDragging,
      dropPosition: dropPosition,
      setDragStatus: setDragStatus
    };
  }

  function ownKeys$13(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$12(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$13(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$13(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$f(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var TreeItem = vue.defineComponent({
    name: "TTreeNode",
    props: {
      node: {
        type: Object
      },
      onClick: Function,
      onChange: Function,
      onDrop: Function,
      onDragStart: Function,
      expandOnClickNode: Boolean
    },
    setup: function setup(props) {
      var treeScope = vue.inject(injectKey);
      var isClicked = vue.ref(false);
      var label = vue.ref();
      useRipple(label);
      var CLASS_NAMES = useCLASSNAMES();
      var _useConfig = useConfig("tree"),
        globalConfig = _useConfig.globalConfig;
      var classPrefix = usePrefixClass();
      var _useGlobalIcon = useGlobalIcon({
          CaretRightSmallIcon: caretRightSmall
        }),
        CaretRightSmallIcon = _useGlobalIcon.CaretRightSmallIcon;
      var handleClick = function handleClick(evt) {
        var _srcTarget$className, _srcTarget$className$, _props$onClick;
        var node = props.node,
          expandOnClickNode = props.expandOnClickNode;
        var state = {
          mouseEvent: evt,
          event: evt,
          node: node,
          path: node.getPath()
        };
        var srcTarget = evt.target;
        var isBranchTrigger = node.children && props.expandOnClickNode && (srcTarget.className === "".concat(classPrefix.value, "-checkbox__input") || srcTarget.tagName.toLowerCase() === "input");
        if (isClicked.value || isBranchTrigger) return;
        if (expandOnClickNode && node.children && ((_srcTarget$className = srcTarget.className) === null || _srcTarget$className === void 0 ? void 0 : (_srcTarget$className$ = _srcTarget$className.indexOf) === null || _srcTarget$className$ === void 0 ? void 0 : _srcTarget$className$.call(_srcTarget$className, "".concat(classPrefix.value, "-tree__label"))) !== -1) evt.preventDefault();
        isClicked.value = true;
        setTimeout(function () {
          isClicked.value = false;
        });
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, state);
      };
      var nodeRef = vue.ref();
      var _useDraggable = useDraggable(vue.reactive({
          nodeRef: nodeRef,
          node: props.node
        })),
        isDragOver = _useDraggable.isDragOver,
        isDragging = _useDraggable.isDragging,
        dropPosition = _useDraggable.dropPosition,
        setDragStatus = _useDraggable.setDragStatus;
      var handleDragStart = function handleDragStart(evt) {
        var _props$onDragStart;
        var node = props.node;
        if (!node.isDraggable()) return;
        evt.stopPropagation();
        setDragStatus("dragStart", evt);
        try {
          var _evt$dataTransfer;
          (_evt$dataTransfer = evt.dataTransfer) === null || _evt$dataTransfer === void 0 ? void 0 : _evt$dataTransfer.setData("text/plain", "");
        } catch (e) {}
        (_props$onDragStart = props.onDragStart) === null || _props$onDragStart === void 0 ? void 0 : _props$onDragStart.call(props, node, evt);
      };
      var handleDragEnd = function handleDragEnd(evt) {
        var node = props.node;
        if (!node.isDraggable()) return;
        evt.stopPropagation();
        setDragStatus("dragEnd", evt);
      };
      var handleDragOver = function handleDragOver(evt) {
        var node = props.node;
        if (!node.isDraggable()) return;
        evt.stopPropagation();
        evt.preventDefault();
        setDragStatus("dragOver", evt);
      };
      var handleDragLeave = function handleDragLeave(evt) {
        var node = props.node;
        if (!node.isDraggable()) return;
        evt.stopPropagation();
        setDragStatus("dragLeave", evt);
      };
      var handleDrop = function handleDrop(evt) {
        var _props$onDrop;
        var node = props.node;
        if (!node.isDraggable()) return;
        evt.stopPropagation();
        evt.preventDefault();
        setDragStatus("drop", evt);
        (_props$onDrop = props.onDrop) === null || _props$onDrop === void 0 ? void 0 : _props$onDrop.call(props, node, dropPosition.value, evt);
      };
      var handleChange = function handleChange() {
        var _props$onChange;
        var node = props.node;
        var event = new Event("change");
        var state = {
          event: event,
          node: node
        };
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, state);
      };
      var itemStyles = vue.computed(function () {
        var level = props.node.level;
        var styles = "--level: ".concat(level, ";");
        return styles;
      });
      var itemClassList = vue.computed(function () {
        var _list$push, _list$push2;
        var node = props.node;
        var list = [];
        list.push(CLASS_NAMES.value.treeNode);
        list.push((_list$push = {}, _defineProperty$3(_list$push, CLASS_NAMES.value.treeNodeOpen, node.expanded), _defineProperty$3(_list$push, CLASS_NAMES.value.actived, node.isActivable() ? node.actived : false), _defineProperty$3(_list$push, CLASS_NAMES.value.disabled, node.isDisabled()), _list$push));
        list.push((_list$push2 = {}, _defineProperty$3(_list$push2, CLASS_NAMES.value.treeNodeDraggable, node.isDraggable()), _defineProperty$3(_list$push2, CLASS_NAMES.value.treeNodeDragging, isDragging.value), _defineProperty$3(_list$push2, CLASS_NAMES.value.treeNodeDragTipTop, isDragOver.value && dropPosition.value < 0), _defineProperty$3(_list$push2, CLASS_NAMES.value.treeNodeDragTipBottom, isDragOver.value && dropPosition.value > 0), _defineProperty$3(_list$push2, CLASS_NAMES.value.treeNodeDragTipHighlight, !isDragging.value && isDragOver.value && dropPosition.value === 0), _list$push2));
        return list;
      });
      var renderLine = function renderLine() {
        var node = props.node;
        var _treeScope$value = treeScope.value,
          line = _treeScope$value.line,
          scopedSlots = _treeScope$value.scopedSlots;
        var iconVisible = !!treeScope.value.icon;
        var lineNode = null;
        if (line === true) {
          if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.line) {
            lineNode = scopedSlots.line({
              node: node === null || node === void 0 ? void 0 : node.getModel()
            });
          } else if (node.parent && node.tree) {
            var vmIsLeaf = node.vmIsLeaf,
              vmIsFirst = node.vmIsFirst,
              level = node.level;
            var lineClasses = [];
            lineClasses.push(CLASS_NAMES.value.line);
            if (vmIsLeaf || !iconVisible) {
              lineClasses.push(CLASS_NAMES.value.lineIsLeaf);
            }
            if (vmIsFirst && iconVisible) {
              lineClasses.push(CLASS_NAMES.value.lineIsFirst);
            }
            var shadowStyles = [];
            var parents = node.getParents();
            parents.pop();
            parents.forEach(function (pNode, index) {
              if (!pNode.vmIsLast) {
                shadowStyles.push("calc(-".concat(index + 1, " * var(--space)) 0 var(--color)"));
              }
            });
            var styles = {
              "--level": level,
              "box-shadow": shadowStyles.join(",")
            };
            lineNode = vue.createVNode("span", {
              "class": lineClasses,
              "style": styles
            }, null);
          }
        } else {
          lineNode = getTNode(line, {
            node: node
          });
        }
        return lineNode;
      };
      var renderIcon = function renderIcon() {
        var getFolderIcon = function getFolderIcon() {
          if (isFunction_1(globalConfig.value.folderIcon)) {
            return globalConfig.value.folderIcon(vue.h);
          }
          return vue.createVNode(CaretRightSmallIcon, null, null);
        };
        var node = props.node;
        var _treeScope$value2 = treeScope.value,
          icon = _treeScope$value2.icon,
          scopedSlots = _treeScope$value2.scopedSlots;
        var isDefaultIcon = false;
        var iconNode = null;
        if (icon === true) {
          if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.icon) {
            iconNode = scopedSlots.icon({
              node: node === null || node === void 0 ? void 0 : node.getModel()
            });
          } else if (!node.vmIsLeaf) {
            isDefaultIcon = true;
            iconNode = getFolderIcon();
            if (node.loading && node.expanded) {
              iconNode = vue.createVNode(Loading, null, null);
            }
          } else {
            iconNode = "";
          }
        } else {
          iconNode = getTNode(icon, {
            node: node
          });
        }
        iconNode = vue.createVNode("span", {
          "class": [CLASS_NAMES.value.treeIcon, CLASS_NAMES.value.folderIcon, isDefaultIcon ? CLASS_NAMES.value.treeIconDefault : ""],
          "trigger": "expand",
          "ignore": "active"
        }, [iconNode]);
        return iconNode;
      };
      var renderLabel = function renderLabel() {
        var node = props.node;
        var _treeScope$value3 = treeScope.value,
          label2 = _treeScope$value3.label,
          scopedSlots = _treeScope$value3.scopedSlots,
          disableCheck = _treeScope$value3.disableCheck;
        var checkProps = treeScope.value.checkProps || {};
        var labelNode = null;
        if (label2 === true) {
          if (scopedSlots.label) {
            labelNode = scopedSlots.label({
              node: node.getModel()
            });
          } else {
            labelNode = node.label || "";
          }
        } else {
          labelNode = getTNode(label2, {
            node: node
          });
        }
        var labelClasses = [CLASS_NAMES.value.treeLabel, CLASS_NAMES.value.treeLabelStrictly, _defineProperty$3({}, CLASS_NAMES.value.actived, node.isActivable() ? node.actived : false)];
        if (node.vmCheckable) {
          var _node$children;
          var checkboxDisabled = false;
          if (typeof disableCheck === "function") {
            checkboxDisabled = disableCheck(node);
          } else {
            checkboxDisabled = !!disableCheck;
          }
          if (node.isDisabled()) {
            checkboxDisabled = true;
          }
          var itemCheckProps = _objectSpread$12(_objectSpread$12({}, checkProps), {}, {
            disabled: checkboxDisabled
          });
          var stopLabelTrigger = props.expandOnClickNode && node.children instanceof Array && ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0;
          var _labelNode = function () {
            return labelNode;
          }();
          labelNode = vue.createVNode(Checkbox, vue.mergeProps({
            "class": labelClasses,
            "checked": node.checked,
            "indeterminate": node.indeterminate,
            "disabled": node.isDisabled(),
            "name": node.value.toString(),
            "onChange": function onChange() {
              return handleChange();
            },
            "ignore": "expand",
            "stopLabelTrigger": stopLabelTrigger,
            "needRipple": true
          }, itemCheckProps), _isSlot$f(labelNode) ? labelNode : {
            "default": function _default() {
              return [_labelNode];
            }
          });
        } else {
          var inner = vue.createVNode("span", {
            "style": "position: relative"
          }, [labelNode]);
          labelNode = node.isActivable() ? vue.createVNode("span", {
            "key": "1",
            "ref": "label",
            "class": labelClasses
          }, [inner]) : vue.createVNode("span", {
            "key": "2",
            "class": labelClasses
          }, [inner]);
        }
        return labelNode;
      };
      var renderOperations = function renderOperations() {
        var node = props.node;
        var _treeScope$value4 = treeScope.value,
          operations = _treeScope$value4.operations,
          scopedSlots = _treeScope$value4.scopedSlots;
        var opNode = null;
        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.operations) {
          opNode = scopedSlots.operations({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else {
          opNode = getTNode(operations, {
            node: node
          });
        }
        if (opNode) {
          opNode = vue.createVNode("span", {
            "class": CLASS_NAMES.value.treeOperations,
            "ignore": "active,expand"
          }, [opNode]);
        }
        return opNode;
      };
      return function () {
        var node = props.node;
        return vue.createVNode("div", {
          "ref": nodeRef,
          "class": itemClassList.value,
          "data-value": node.value,
          "data-level": node.level,
          "style": itemStyles.value,
          "onClick": function onClick(evt) {
            return handleClick(evt);
          },
          "draggable": node.isDraggable(),
          "onDragstart": function onDragstart(evt) {
            return handleDragStart(evt);
          },
          "onDragend": function onDragend(evt) {
            return handleDragEnd(evt);
          },
          "onDragover": function onDragover(evt) {
            return handleDragOver(evt);
          },
          "onDragleave": function onDragleave(evt) {
            return handleDragLeave(evt);
          },
          "onDrop": function onDrop(evt) {
            return handleDrop(evt);
          }
        }, [renderLine(), renderIcon(), renderLabel(), renderOperations()]);
      };
    }
  });

  function useOnDrag(treeStore) {
    var dragNode = vue.ref();
    var _getCurrentInstance = vue.getCurrentInstance(),
      emit = _getCurrentInstance.emit;
    var onDragStart = function onDragStart(context) {
      dragNode.value = context.node;
      emit === null || emit === void 0 ? void 0 : emit("dragStart", context);
    };
    var onDragEnd = function onDragEnd(context) {
      dragNode.value = context.node;
      emit === null || emit === void 0 ? void 0 : emit("dragEnd", context);
    };
    var onDragOver = function onDragOver(context) {
      emit === null || emit === void 0 ? void 0 : emit("dragOver", context);
    };
    var onDragLeave = function onDragLeave(context) {
      emit === null || emit === void 0 ? void 0 : emit("dragLeave", context);
    };
    var onDrop = function onDrop(context) {
      var node = context.node,
        dropPosition = context.dropPosition;
      if (node.value === dragNode.value.value || node.getParents().some(function (_node) {
        return _node.value === dragNode.value.value;
      })) return;
      var nodes = treeStore.value.getNodes();
      nodes.some(function (_node, _index) {
        if (_node.value === node.value) {
          if (dropPosition === 0) {
            dragNode.value.appendTo(treeStore.value, _node);
          } else if (dropPosition < 0) {
            node.insertBefore(dragNode.value);
          } else {
            node.insertAfter(dragNode.value);
          }
          return true;
        }
        return false;
      });
      emit === null || emit === void 0 ? void 0 : emit("drop", context);
    };
    vue.provide(dragInjectKey, {
      onDragStart: onDragStart,
      onDragEnd: onDragEnd,
      onDragOver: onDragOver,
      onDragLeave: onDragLeave,
      onDrop: onDrop
    });
  }

  function ownKeys$12(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$11(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$12(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$12(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useTree(props) {
    var treeStore = vue.ref();
    var cacheMap = /* @__PURE__ */new Map();
    var treeNodeViews = vue.ref([]);
    var _toRefs = vue.toRefs(props),
      expanded = _toRefs.expanded,
      actived = _toRefs.actived,
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerChecked = _useVModel2[0],
      setInnerChecked = _useVModel2[1];
    var _useDefaultValue = useDefaultValue(actived, props.defaultActived, props.onActive, "actived"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      innerActived = _useDefaultValue2[0],
      setInnerActived = _useDefaultValue2[1];
    var _useDefaultValue3 = useDefaultValue(expanded, props.defaultExpanded, props.onExpand, "expanded"),
      _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2),
      innerExpanded = _useDefaultValue4[0],
      setInnerExpanded = _useDefaultValue4[1];
    var handleLoad = function handleLoad(info) {
      var _props$onLoad;
      var node = info.node;
      var ctx = {
        node: node.getModel()
      };
      if (innerChecked.value && innerChecked.value.length > 0) {
        treeStore.value.replaceChecked(innerChecked.value);
      }
      if (innerExpanded.value && innerExpanded.value.length > 0) {
        treeStore.value.replaceExpanded(innerExpanded.value);
      }
      if (innerActived.value && innerActived.value.length > 0) {
        treeStore.value.replaceActived(innerActived.value);
      }
      (_props$onLoad = props.onLoad) === null || _props$onLoad === void 0 ? void 0 : _props$onLoad.call(props, ctx);
    };
    var handleClick = function handleClick(state) {
      var _props$onClick;
      var expandOnClickNode = props.expandOnClickNode;
      var mouseEvent = state.mouseEvent,
        event = state.event,
        node = state.node;
      if (!node) {
        return;
      }
      var shouldExpand = expandOnClickNode;
      var shouldActive = !props.disabled && !node.disabled;
      ["trigger", "ignore"].forEach(function (markName) {
        var mark = getMark(markName, event.target, event.currentTarget);
        var markValue = (mark === null || mark === void 0 ? void 0 : mark.value) || "";
        if (markValue.indexOf("expand") >= 0) {
          if (markName === "trigger") {
            shouldExpand = true;
          }
        }
        if (markValue.indexOf("active") >= 0) {
          if (markName === "ignore") {
            shouldActive = false;
          }
        }
      });
      var ctx = {
        node: node.getModel(),
        e: mouseEvent
      };
      if (shouldExpand) {
        var tnode = getNode(treeStore.value, node);
        var expanded2 = node.setExpanded(!tnode.isExpanded());
        setInnerExpanded(expanded2, ctx);
      }
      if (shouldActive) {
        var _tnode = getNode(treeStore.value, node);
        var actived2 = node.setActived(!_tnode.isActived());
        setInnerActived(actived2, ctx);
      }
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, ctx);
    };
    var handleChange = function handleChange(state) {
      var disabled = props.disabled;
      var node = state.node,
        mouseEvent = state.mouseEvent;
      if (!node || disabled || node.disabled) {
        return;
      }
      var tnode = getNode(treeStore.value, node);
      var checked = node.setChecked(!tnode.isChecked());
      setInnerChecked(checked, {
        node: node.getModel(),
        e: mouseEvent
      });
    };
    var renderTreeNodeViews = function renderTreeNodeViews() {
      var nodes = treeStore.value.getNodes();
      treeNodeViews.value = nodes.filter(function (node) {
        return node.visible;
      }).map(function (node) {
        var nodeView = cacheMap.get(node.value);
        if (!nodeView) {
          nodeView = vue.createVNode(TreeItem, {
            "key": node.value,
            "node": node,
            "onChange": handleChange,
            "onClick": handleClick,
            "expandOnClickNode": props.expandOnClickNode
          }, null);
          cacheMap.set(node.value, nodeView);
        }
        return nodeView;
      });
      vue.nextTick(function () {
        cacheMap.forEach(function (view, value2) {
          if (!treeStore.value.getNode(value2)) {
            cacheMap["delete"](value2);
          }
        });
      });
    };
    useOnDrag(treeStore);
    var updateExpanded = function updateExpanded() {
      var expandParent = props.expandParent;
      if (Array.isArray(innerExpanded.value)) {
        var expandedMap = /* @__PURE__ */new Map();
        innerExpanded.value.forEach(function (val) {
          expandedMap.set(val, true);
          if (expandParent) {
            var node = treeStore.value.getNode(val);
            node.getParents().forEach(function (tn) {
              expandedMap.set(tn.value, true);
            });
          }
        });
        var expandedArr = Array.from(expandedMap.keys());
        treeStore.value.setExpanded(expandedArr);
      }
    };
    var init = function init() {
      var options = props.data;
      var store = new TreeStore(_objectSpread$11(_objectSpread$11({}, getStoreConfig(props)), {}, {
        onLoad: function onLoad(info) {
          handleLoad(info);
        },
        onUpdate: function onUpdate() {
          renderTreeNodeViews();
        }
      }));
      treeStore.value = store;
      if (!Array.isArray(options)) {
        options = [];
      }
      store.append(options);
      store.refreshNodes();
      if (Array.isArray(innerChecked.value)) {
        store.setChecked(innerChecked.value);
      }
      updateExpanded();
      if (Array.isArray(innerActived.value)) {
        store.setActived(innerActived.value);
      }
      renderTreeNodeViews();
    };
    vue.watch(function () {
      return props.data;
    }, function (list) {
      list = props.data;
      cacheMap.clear();
      treeStore.value.reload(list);
      treeStore.value.refreshNodes();
      if (!list.length) return;
      if (Array.isArray(innerChecked.value)) {
        treeStore.value.setChecked(innerChecked.value);
      }
      updateExpanded();
      if (Array.isArray(innerActived.value)) {
        treeStore.value.setActived(innerActived.value);
      }
      treeStore.value.refreshState();
    });
    vue.watch(function () {
      return getStoreConfig(props);
    }, function () {
      if (!treeStore.value) return;
      treeStore.value.setConfig(getStoreConfig(props));
    });
    vue.watch(innerChecked, function (nVal) {
      treeStore.value.replaceChecked(nVal);
    });
    vue.watch(innerExpanded, function (nVal) {
      treeStore.value.replaceExpanded(nVal);
    });
    vue.watch(innerActived, function (nVal) {
      treeStore.value.replaceActived(nVal);
    });
    init();
    return {
      treeStore: treeStore,
      treeNodeViews: treeNodeViews
    };
  }

  function useExposeFunc(treeStore, expose) {
    var setItem = function setItem(value, options) {
      var node = treeStore.value.getNode(value);
      var spec = options;
      var keys = Object.keys(spec);
      if (node && spec) {
        ["expanded", "actived", "checked"].forEach(function (name) {
          if (keys.includes(name)) {
            node["set".concat(upperFirst_1(name))](spec[name], {
              directly: true
            });
          }
        });
      }
    };
    var getItem = function getItem(value) {
      var node = treeStore.value.getNode(value);
      return node === null || node === void 0 ? void 0 : node.getModel();
    };
    var getItems = function getItems(value) {
      var nodes = treeStore.value.getNodes(value);
      return nodes.map(function (node) {
        return node.getModel();
      });
    };
    var appendTo = function appendTo(para, item) {
      var list = [];
      if (Array.isArray(item)) {
        list = item;
      } else {
        list = [item];
      }
      list.forEach(function (item2) {
        var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
        var node = getNode(treeStore.value, val);
        if (node) {
          treeStore.value.appendNodes(para, node);
        } else {
          treeStore.value.appendNodes(para, item2);
        }
      });
    };
    var insertBefore = function insertBefore(value, item) {
      var val = (item === null || item === void 0 ? void 0 : item.value) || "";
      var node = getNode(treeStore.value, val);
      if (node) {
        treeStore.value.insertBefore(value, node);
      } else {
        treeStore.value.insertBefore(value, item);
      }
    };
    var insertAfter = function insertAfter(value, item) {
      var val = (item === null || item === void 0 ? void 0 : item.value) || "";
      var node = getNode(treeStore.value, val);
      if (node) {
        treeStore.value.insertAfter(value, node);
      } else {
        treeStore.value.insertAfter(value, item);
      }
    };
    var remove = function remove(value) {
      return treeStore.value.remove(value);
    };
    var getIndex = function getIndex(value) {
      return treeStore.value.getNodeIndex(value);
    };
    var getParent = function getParent(value) {
      var node = treeStore.value.getParent(value);
      return node === null || node === void 0 ? void 0 : node.getModel();
    };
    var getParents = function getParents(value) {
      var nodes = treeStore.value.getParents(value);
      return nodes.map(function (node) {
        return node.getModel();
      });
    };
    var getPath = function getPath(value) {
      var node = treeStore.value.getNode(value);
      var pathNodes = [];
      if (node) {
        pathNodes = node.getPath().map(function (node2) {
          return node2.getModel();
        });
      }
      return pathNodes;
    };
    expose({
      setItem: setItem,
      getItem: getItem,
      getItems: getItems,
      appendTo: appendTo,
      insertBefore: insertBefore,
      insertAfter: insertAfter,
      remove: remove,
      getIndex: getIndex,
      getParent: getParent,
      getParents: getParents,
      getPath: getPath
    });
  }

  var _TdTree = vue.defineComponent({
    name: "TTree",
    props: props$q,
    setup: function setup(props2, _ref) {
      var expose = _ref.expose,
        slots = _ref.slots;
      var _useConfig = useConfig("tree"),
        globalConfig = _useConfig.globalConfig,
        t = _useConfig.t;
      var CLASS_NAMES = useCLASSNAMES();
      var renderTNodeJSX = useTNodeDefault();
      var statusContext = vue.computed(function () {
        var checkProps = props2.checkProps,
          empty = props2.empty,
          icon = props2.icon,
          label = props2.label,
          line = props2.line,
          disableCheck = props2.disableCheck,
          operations = props2.operations;
        return {
          checkProps: checkProps,
          empty: empty,
          icon: icon,
          label: label,
          line: line,
          disableCheck: disableCheck,
          operations: operations,
          scopedSlots: slots
        };
      });
      vue.provide(injectKey, statusContext);
      var _useTree = useTree(props2),
        treeStore = _useTree.treeStore,
        treeNodeViews = _useTree.treeNodeViews;
      useExposeFunc(treeStore, expose);
      var classList = vue.computed(function () {
        var _ref2;
        return [CLASS_NAMES.value.tree, (_ref2 = {}, _defineProperty$3(_ref2, CLASS_NAMES.value.disabled, props2.disabled), _defineProperty$3(_ref2, CLASS_NAMES.value.treeHoverAble, props2.hover), _defineProperty$3(_ref2, CLASS_NAMES.value.treeCheckable, props2.checkable), _defineProperty$3(_ref2, CLASS_NAMES.value.treeTransition, props2.transition), _defineProperty$3(_ref2, CLASS_NAMES.value.treeBlockNode, props2.expandOnClickNode), _ref2)];
      });
      return function () {
        return vue.createVNode("div", {
          "class": classList.value
        }, [treeNodeViews.value.length === 0 ? vue.createVNode("div", {
          "class": CLASS_NAMES.value.treeEmpty
        }, [renderTNodeJSX("empty", {
          defaultNode: t(globalConfig.value.empty)
        })]) : vue.createVNode(vue.TransitionGroup, {
          "name": CLASS_NAMES.value.treeNodeToggle,
          "tag": "div",
          "enter-active-class": CLASS_NAMES.value.treeNodeEnter,
          "leave-active-class": CLASS_NAMES.value.treeNodeLeave
        }, {
          "default": function _default() {
            return [treeNodeViews.value];
          }
        })]);
      };
    }
  });

  var Tree = withInstall(_TdTree);

  var props$p = {
    autoWidth: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disabled: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number]
    },
    loading: Boolean,
    loadingText: {
      type: [String, Function],
      "default": ""
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    prefixIcon: {
      type: Function
    },
    readonly: Boolean,
    selectInputProps: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    tagProps: {
      type: Object
    },
    treeProps: {
      type: Object
    },
    value: {
      type: [String, Number, Object, Array],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Object, Array],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Object, Array]
    },
    valueDisplay: {
      type: Function
    },
    valueType: {
      type: String,
      "default": "value",
      validator: function validator(val) {
        if (!val) return true;
        return ["value", "object"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onFocus: Function,
    onInputChange: Function,
    onPopupVisibleChange: Function,
    onRemove: Function,
    onSearch: Function
  };

  function ownKeys$11(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$10(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$11(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$11(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _TreeSelect = vue.defineComponent({
    name: "TTreeSelect",
    props: props$p,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var renderDefaultTNode = useTNodeDefault();
      var classPrefix = usePrefixClass();
      var _useConfig = useConfig("treeSelect"),
        globalConfig = _useConfig.globalConfig;
      var formDisabled = useFormDisabled();
      var treeRef = vue.ref(null);
      var filterByText = vue.ref(null);
      var actived = vue.ref([]);
      var expanded = vue.ref([]);
      var nodeInfo = vue.ref(null);
      var treeKey = vue.ref(0);
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        popupVisible = _toRefs.popupVisible,
        inputValue = _toRefs.inputValue;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        treeSelectValue = _useVModel2[0],
        setTreeSelectValue = _useVModel2[1];
      var _useDefaultValue = useDefaultValue(popupVisible, false, props2.onPopupVisibleChange, "popupVisible"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        innerVisible = _useDefaultValue2[0],
        setInnerVisible = _useDefaultValue2[1];
      var _useDefaultValue3 = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"),
        _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2),
        innerInputValue = _useDefaultValue4[0],
        setInnerInputValue = _useDefaultValue4[1];
      vue.watch(treeSelectValue, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return changeNodeInfo();
              case 2:
                if (!props2.multiple) {
                  actived.value = nodeInfo.value ? [nodeInfo.value.value] : [];
                }
              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
      vue.watch(function () {
        return props2.data;
      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return changeNodeInfo();
              case 2:
                treeRerender();
              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })));
      var tDisabled = vue.computed(function () {
        return formDisabled.value || props2.disabled;
      });
      var inputPlaceholder = vue.computed(function () {
        var _nodeInfo$value;
        return innerVisible.value && ((_nodeInfo$value = nodeInfo.value) === null || _nodeInfo$value === void 0 ? void 0 : _nodeInfo$value.label) || props2.placeholder || globalConfig.value.placeholder;
      });
      var popupClass = vue.computed(function () {
        return ["".concat(classPrefix.value, "-select__dropdown"), "narrow-scrollbar"];
      });
      var dropdownInnerSize = vue.computed(function () {
        return {
          small: "s",
          medium: "m",
          large: "l"
        }[props2.size];
      });
      var isObjectValue = vue.computed(function () {
        return props2.valueType === "object";
      });
      var checked = vue.computed(function () {
        if (props2.multiple) {
          if (isObjectValue.value) {
            return isArray_1(treeSelectValue.value) ? treeSelectValue.value.map(function (item) {
              return item.value;
            }) : [];
          }
          return isArray_1(treeSelectValue.value) ? treeSelectValue.value.map(function (item) {
            return item;
          }) : [];
        }
        return [];
      });
      var multiLimitDisabled = vue.computed(function () {
        return props2.multiple && !!props2.max && isArray_1(treeSelectValue.value) && props2.max <= treeSelectValue.value.length;
      });
      var realLabel = vue.computed(function () {
        if (!isEmpty_1(props2.treeProps) && !isEmpty_1(props2.treeProps.keys)) {
          return props2.treeProps.keys.label || "label";
        }
        return "label";
      });
      var realValue = vue.computed(function () {
        if (!isEmpty_1(props2.treeProps) && !isEmpty_1(props2.treeProps.keys)) {
          return props2.treeProps.keys.value || "value";
        }
        return "value";
      });
      var realChildren = vue.computed(function () {
        if (!isEmpty_1(props2.treeProps) && !isEmpty_1(props2.treeProps.keys)) {
          return props2.treeProps.keys.children || "children";
        }
        return "children";
      });
      vue.onMounted( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(!treeSelectValue.value && props2.defaultValue)) {
                  _context3.next = 3;
                  break;
                }
                _context3.next = 3;
                return change(props2.defaultValue, null, "uncheck");
              case 3:
                if (isObjectValue.value) {
                  actived.value = isArray_1(treeSelectValue.value) ? treeSelectValue.value.map(function (item) {
                    return item.value;
                  }) : [treeSelectValue.value.value];
                } else {
                  actived.value = isArray_1(treeSelectValue.value) ? treeSelectValue.value : [treeSelectValue.value];
                }
                changeNodeInfo();
              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      })));
      var change = function change(valueParam, node, trigger) {
        setTreeSelectValue(valueParam, {
          node: node,
          trigger: trigger
        });
        changeNodeInfo();
      };
      var clear = function clear(content) {
        var _props2$onClear;
        var defaultValue = props2.multiple ? [] : "";
        actived.value = [];
        change(defaultValue, null, "clear");
        (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, {
          e: content.e
        });
      };
      var treeNodeChange = function treeNodeChange(valueParam, context) {
        var current = valueParam;
        if (isObjectValue.value) {
          current = valueParam.map(function (nodeValue) {
            return getTreeNode(props2.data, nodeValue);
          });
        }
        change(current, context.node, "check");
      };
      var treeNodeActive = function treeNodeActive(valueParam, context) {
        if (!props2.multiple) {
          setInnerVisible(false);
        }
        if (props2.multiple) {
          return;
        }
        if (treeSelectValue.value === context.node.data[realValue.value]) {
          return;
        }
        var current = valueParam;
        if (isObjectValue.value) {
          var nodeValue = isEmpty_1(valueParam) ? "" : valueParam[0];
          current = getTreeNode(props2.data, nodeValue);
        } else {
          current = isEmpty_1(valueParam) ? "" : valueParam[0];
        }
        change(current, context.node, "check");
        actived.value = valueParam;
      };
      var treeNodeExpand = function treeNodeExpand(valueParam) {
        expanded.value = valueParam;
      };
      var treeNodeLoad = function treeNodeLoad() {
        changeNodeInfo();
      };
      var inputChange = function inputChange(value2) {
        var _props2$onSearch2;
        if (!innerVisible.value) {
          var _props2$onSearch;
          (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, String(value2));
          return;
        }
        setInnerInputValue(value2);
        if (!value2) {
          filterByText.value = null;
          return null;
        }
        filterByText.value = function (node) {
          if (isFunction_1(props2.filter)) {
            var filter = props2.filter(String(value2), node);
            if (isBoolean_1(filter)) {
              return filter;
            }
          }
          return node.data[realLabel.value].indexOf(value2) >= 0;
        };
        (_props2$onSearch2 = props2.onSearch) === null || _props2$onSearch2 === void 0 ? void 0 : _props2$onSearch2.call(props2, String(value2));
      };
      var tagChange = function tagChange(value2, context) {
        var _props2$onRemove;
        var trigger = context.trigger,
          index = context.index;
        if (["tag-remove", "backspace"].includes(trigger)) {
          isArray_1(treeSelectValue.value) && treeSelectValue.value.splice(index, 1);
        }
        (_props2$onRemove = props2.onRemove) === null || _props2$onRemove === void 0 ? void 0 : _props2$onRemove.call(props2, {
          value: value2,
          data: null,
          e: context && context.e
        });
        change(treeSelectValue.value, null, trigger);
      };
      var changeNodeInfo = /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return treeSelectValue.value;
                case 2:
                  if (!props2.multiple) {
                    if (treeSelectValue.value || treeSelectValue.value === 0) {
                      nodeInfo.value = getSingleNodeInfo();
                    } else {
                      nodeInfo.value = "";
                    }
                  } else if (props2.multiple) {
                    if (isArray_1(treeSelectValue.value)) {
                      nodeInfo.value = getMultipleNodeInfo();
                    } else {
                      nodeInfo.value = [];
                    }
                  } else {
                    nodeInfo.value = null;
                  }
                case 3:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));
        return function changeNodeInfo() {
          return _ref5.apply(this, arguments);
        };
      }();
      var getSingleNodeInfo = function getSingleNodeInfo() {
        var _props2$treeProps;
        var nodeValue = isObjectValue.value ? treeSelectValue.value.value : treeSelectValue.value;
        if (treeRef.value && (_props2$treeProps = props2.treeProps) !== null && _props2$treeProps !== void 0 && _props2$treeProps.load) {
          if (!isEmpty_1(props2.data)) {
            var node2 = treeRef.value.getItem(nodeValue);
            if (node2) {
              return {
                label: node2.data[realLabel.value],
                value: node2.data[realValue.value]
              };
            }
          }
          return {
            label: nodeValue,
            value: nodeValue
          };
        }
        var node = getTreeNode(props2.data, nodeValue);
        if (!node) {
          return {
            label: nodeValue,
            value: nodeValue
          };
        }
        return node;
      };
      var getMultipleNodeInfo = function getMultipleNodeInfo() {
        return treeSelectValue.value.map(function (value2) {
          var _props2$treeProps2;
          var nodeValue = isObjectValue.value ? value2.value : value2;
          if (treeRef.value && (_props2$treeProps2 = props2.treeProps) !== null && _props2$treeProps2 !== void 0 && _props2$treeProps2.load) {
            if (!isEmpty_1(props2.data)) {
              var node2 = treeRef.value.getItem(nodeValue);
              if (node2) {
                return {
                  label: node2.data[realLabel.value],
                  value: node2.data[realValue.value]
                };
              }
            }
            return {
              label: nodeValue,
              value: nodeValue
            };
          }
          var node = getTreeNode(props2.data, nodeValue);
          if (!node) {
            return {
              label: nodeValue,
              value: nodeValue
            };
          }
          return node;
        });
      };
      var getTreeNode = function getTreeNode(data, targetValue) {
        for (var i = 0, len = data.length; i < len; i++) {
          var _data$i;
          if (data[i][realValue.value] === targetValue) {
            return {
              label: data[i][realLabel.value],
              value: data[i][realValue.value]
            };
          }
          if ((_data$i = data[i]) !== null && _data$i !== void 0 && _data$i[realChildren.value]) {
            var _data$i2;
            var result = getTreeNode((_data$i2 = data[i]) === null || _data$i2 === void 0 ? void 0 : _data$i2[realChildren.value], targetValue);
            if (!isNil_1(result)) {
              return result;
            }
          }
        }
        return null;
      };
      var treeRerender = function treeRerender() {
        treeKey.value += 1;
      };
      var renderTree = function renderTree() {
        return vue.withDirectives(vue.createVNode(Tree, vue.mergeProps({
          "ref": treeRef,
          "key": treeKey.value,
          "value": _toConsumableArray(checked.value),
          "hover": true,
          "data": props2.data,
          "activable": !props2.multiple,
          "checkable": props2.multiple,
          "disabled": tDisabled.value || multiLimitDisabled.value,
          "size": props2.size,
          "filter": filterByText.value,
          "icon": !filterByText.value,
          "actived": actived.value,
          "expanded": expanded.value,
          "activeMultiple": props2.multiple,
          "onChange": treeNodeChange,
          "onActive": treeNodeActive,
          "onExpand": treeNodeExpand,
          "onLoad": treeNodeLoad,
          "expandOnClickNode": true
        }, props2.treeProps), {
          empty: function empty() {
            return renderDefaultTNode("empty", {
              defaultNode: vue.createVNode("div", {
                "class": "".concat(classPrefix.value, "-select__empty")
              }, [globalConfig.value.empty])
            });
          }
        }), [[vue.vShow, !props2.loading]]);
      };
      var renderSuffixIcon = function renderSuffixIcon() {
        var _ref6;
        return vue.createVNode(FakeArrow, {
          "isActive": innerVisible.value,
          "disabled": props2.disabled,
          "overlayClassName": (_ref6 = {}, _defineProperty$3(_ref6, "".concat(classPrefix.value, "-fake-arrow--highlight"), innerVisible.value), _defineProperty$3(_ref6, "".concat(classPrefix.value, "-fake-arrow--disable"), props2.disabled), _ref6)
        }, null);
      };
      return function () {
        return vue.createVNode(SelectInput, vue.mergeProps({
          "class": "".concat(classPrefix.value, "-tree-select"),
          "value": nodeInfo.value,
          "inputValue": innerVisible.value ? innerInputValue.value : "",
          "popupVisible": innerVisible.value,
          "disabled": tDisabled.value,
          "multiple": props2.multiple,
          "loading": props2.loading,
          "clearable": props2.clearable,
          "autoWidth": props2.autoWidth,
          "borderless": props2.borderless,
          "readonly": props2.readonly,
          "placeholder": inputPlaceholder.value,
          "allowInput": props2.filterable || isFunction_1(props2.filter),
          "minCollapsedNum": props2.minCollapsedNum,
          "collapsed-items": props2.collapsedItems,
          "popupProps": _objectSpread$10({
            overlayClassName: popupClass.value
          }, props2.popupProps),
          "inputProps": _objectSpread$10({
            size: props2.size
          }, props2.inputProps),
          "tagInputProps": {
            size: props2.size
          },
          "tagProps": _objectSpread$10({
            maxWidth: 300
          }, props2.tagProps),
          "label": function label() {
            return renderTNodeJSX("prefixIcon");
          },
          "suffixIcon": function suffixIcon() {
            return renderSuffixIcon();
          },
          "onClear": clear,
          "onBlur": function onBlur(value2, context) {
            var _props2$onBlur;
            (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, {
              value: value2,
              e: context.e
            });
          },
          "onFocus": function onFocus(value2, context) {
            var _props2$onFocus;
            (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, {
              value: value2,
              e: context.e
            });
          },
          "valueDisplay": function valueDisplay() {
            var _ref7;
            return renderTNodeJSX("valueDisplay", {
              params: props2.multiple ? {
                value: nodeInfo.value,
                onClose: function onClose(value2, context) {
                  tagChange(value2, context);
                }
              } : {
                value: nodeInfo.value || (_ref7 = {}, _defineProperty$3(_ref7, realLabel.value, ""), _defineProperty$3(_ref7, realValue.value, void 0), _ref7)
              }
            });
          },
          "onInputChange": inputChange,
          "onTagChange": tagChange,
          "onPopupVisibleChange": function onPopupVisibleChange(state) {
            return setInnerVisible(state);
          }
        }, props2.selectInputProps), {
          panel: function panel() {
            return vue.createVNode("div", {
              "class": ["".concat(classPrefix.value, "-select__dropdown-inner"), "".concat(classPrefix.value, "-select__dropdown-inner--size-").concat(dropdownInnerSize.value)]
            }, [vue.withDirectives(vue.createVNode("p", {
              "class": ["".concat(classPrefix.value, "-select-loading-tips"), "".concat(classPrefix.value, "-select__right-icon-polyfill")]
            }, [renderDefaultTNode("loadingText", {
              defaultNode: vue.createVNode("div", {
                "class": "".concat(classPrefix.value, "-select__empty")
              }, [globalConfig.value.loadingText])
            })]), [[vue.vShow, props2.loading && !tDisabled.value]]), renderTree()]);
          },
          collapsedItems: slots.collapsedItems
        });
      };
    }
  });

  var TreeSelect = withInstall(_TreeSelect);

  var props$o = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": true
    },
    colorModes: {
      type: Array,
      "default": ["monochrome", "linear-gradient"]
    },
    disabled: Boolean,
    enableAlpha: Boolean,
    format: {
      type: String,
      "default": "RGB",
      validator: function validator(val) {
        if (!val) return true;
        return ["RGB", "RGBA", "HSL", "HSLA", "HSB", "HSV", "HSVA", "HEX", "CMYK", "CSS"].includes(val);
      }
    },
    inputProps: {
      type: Object
    },
    multiple: Boolean,
    popupProps: {
      type: Object
    },
    recentColors: {
      type: Array,
      "default": void 0
    },
    defaultRecentColors: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    selectInputProps: {
      type: Object
    },
    swatchColors: {
      type: Array
    },
    value: {
      type: String,
      "default": void 0
    },
    modelValue: {
      type: String,
      "default": void 0
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    onChange: Function,
    onPaletteBarChange: Function,
    onRecentColorsChange: Function
  };

  var TD_COLOR_USED_COLORS_MAX_SIZE = 100;
  var COLOR_MODES = {
    monochrome: "\u5355\u8272",
    "linear-gradient": "\u6E10\u53D8"
  };
  var DEFAULT_COLOR = "#001F97";
  var DEFAULT_LINEAR_GRADIENT = "linear-gradient(90deg, rgba(241,29,0,1) 0%, rgba(73,106,220,1) 100%);";
  var DEFAULT_SYSTEM_SWATCH_COLORS = ["#ECF2FE", "#D4E3FC", "#BBD3FB", "#96BBF8", "#699EF5", "#4787F0", "#266FE8", "#0052D9", "#0034B5", "#001F97", "#FDECEE", "#F9D7D9", "#F8B9BE", "#F78D94", "#F36D78", "#E34D59", "#C9353F", "#B11F26", "#951114", "#680506", "#FEF3E6", "#F9E0C7", "#F7C797", "#F2995F", "#ED7B2F", "#D35A21", "#BA431B", "#9E3610", "#842B0B", "#5A1907", "#E8F8F2", "#BCEBDC", "#85DBBE", "#48C79C", "#00A870", "#078D5C", "#067945", "#056334", "#044F2A", "#033017"];
  var SATURATION_PANEL_DEFAULT_WIDTH = 230;
  var SATURATION_PANEL_DEFAULT_HEIGHT = 168;
  var SLIDER_DEFAULT_WIDTH = 186;
  var GRADIENT_SLIDER_DEFAULT_WIDTH = 176;

  var FORMATS = ["HEX", "RGB", "HSL", "HSV", "CMYK", "CSS"];

  var BASE_COMPONENT_NAME = "color-picker";
  var useBaseClassName = function useBaseClassName(className) {
    var baseClassName = usePrefixClass(BASE_COMPONENT_NAME);
    return vue.computed(function () {
      return className ? "".concat(baseClassName.value, "-").concat(className) : baseClassName.value;
    });
  };

  function ownKeys$10(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$10(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$10(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$e(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var PanelHeader = vue.defineComponent({
    name: "PanelHeader",
    props: _objectSpread$$(_objectSpread$$({}, props$o), {}, {
      mode: {
        type: String,
        "default": "color"
      },
      togglePopup: {
        type: Function
      },
      onModeChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var _useGlobalIcon = useGlobalIcon({
          CloseIcon: close
        }),
        CloseIcon = _useGlobalIcon.CloseIcon;
      var modeValue = vue.ref(props2.mode);
      var handleModeChange = function handleModeChange(v) {
        return props2.onModeChange(v);
      };
      vue.watch(function () {
        return props2.mode;
      }, function (v) {
        return modeValue.value = v;
      });
      return {
        baseClassName: baseClassName,
        CloseIcon: CloseIcon,
        modeValue: modeValue,
        handleModeChange: handleModeChange
      };
    },
    render: function render() {
      var _slot;
      var _this$colorModes,
        _this$colorModes2,
        _this = this;
      if (((_this$colorModes = this.colorModes) === null || _this$colorModes === void 0 ? void 0 : _this$colorModes.length) === 1) {
        return null;
      }
      var baseClassName = this.baseClassName;
        this.CloseIcon;
      return vue.createVNode("div", {
        "class": "".concat(baseClassName, "__head")
      }, [vue.createVNode("div", {
        "class": "".concat(baseClassName, "__mode")
      }, [((_this$colorModes2 = this.colorModes) === null || _this$colorModes2 === void 0 ? void 0 : _this$colorModes2.length) === 1 ? COLOR_MODES[this.colorModes[0]] : vue.createVNode(RadioGroup, {
        "variant": "default-filled",
        "size": "small",
        "modelValue": _this.modeValue,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.modeValue = $event;
        },
        "onChange": this.handleModeChange
      }, _isSlot$e(_slot = Object.keys(COLOR_MODES).map(function (key) {
        return vue.createVNode(RadioButton, {
          "key": key,
          "value": key
        }, {
          "default": function _default() {
            return [COLOR_MODES[key]];
          }
        });
      })) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      })])]);
    }
  });

  var rgb2cmyk = function rgb2cmyk(red, green, blue) {
    var computedC = 0;
    var computedM = 0;
    var computedY = 0;
    var computedK = 0;
    var r = parseInt("".concat(red).replace(/\s/g, ""), 10);
    var g = parseInt("".concat(green).replace(/\s/g, ""), 10);
    var b = parseInt("".concat(blue).replace(/\s/g, ""), 10);
    if (r === 0 && g === 0 && b === 0) {
      computedK = 1;
      return [0, 0, 0, 1];
    }
    computedC = 1 - r / 255;
    computedM = 1 - g / 255;
    computedY = 1 - b / 255;
    var minCMY = Math.min(computedC, Math.min(computedM, computedY));
    computedC = (computedC - minCMY) / (1 - minCMY);
    computedM = (computedM - minCMY) / (1 - minCMY);
    computedY = (computedY - minCMY) / (1 - minCMY);
    computedK = minCMY;
    return [computedC, computedM, computedY, computedK];
  };
  var cmyk2rgb = function cmyk2rgb(cyan, magenta, yellow, black) {
    var c = cyan / 100;
    var m = magenta / 100;
    var y = yellow / 100;
    var k = black / 100;
    c = c * (1 - k) + k;
    m = m * (1 - k) + k;
    y = y * (1 - k) + k;
    var r = 1 - c;
    var g = 1 - m;
    var b = 1 - y;
    r = Math.round(255 * r);
    g = Math.round(255 * g);
    b = Math.round(255 * b);
    return {
      r: r,
      g: g,
      b: b
    };
  };
  var REG_CMYK_STRING = /cmyk\((\d+%?),(\d+%?),(\d+%?),(\d+%?)\)/;
  var toNumber = function toNumber(str) {
    return Math.max(0, Math.min(255, parseInt(str, 10)));
  };
  var cmykInputToColor = function cmykInputToColor(input) {
    if (/cmyk/i.test(input)) {
      var str = input.replace(/\s/g, "");
      var match = str.match(REG_CMYK_STRING);
      var c = toNumber(match[1]);
      var m = toNumber(match[2]);
      var y = toNumber(match[3]);
      var k = toNumber(match[4]);
      var _cmyk2rgb = cmyk2rgb(c, m, y, k),
        r = _cmyk2rgb.r,
        g = _cmyk2rgb.g,
        b = _cmyk2rgb.b;
      return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
    }
    return input;
  };

  var tinycolor = {exports: {}};

  (function (module) {
    // TinyColor v1.4.2
    // https://github.com/bgrins/TinyColor
    // Brian Grinstead, MIT License

    (function (Math) {
      var trimLeft = /^\s+/,
        trimRight = /\s+$/,
        tinyCounter = 0,
        mathRound = Math.round,
        mathMin = Math.min,
        mathMax = Math.max,
        mathRandom = Math.random;
      function tinycolor(color, opts) {
        color = color ? color : '';
        opts = opts || {};

        // If input is already a tinycolor, return itself
        if (color instanceof tinycolor) {
          return color;
        }
        // If we are called as a function, call using new instead
        if (!(this instanceof tinycolor)) {
          return new tinycolor(color, opts);
        }
        var rgb = inputToRGB(color);
        this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
        this._gradientType = opts.gradientType;

        // Don't let the range of [0,255] come back in [0,1].
        // Potentially lose a little bit of precision here, but will fix issues where
        // .5 gets interpreted as half of the total, instead of half of 1
        // If it was supposed to be 128, this was already taken care of by `inputToRgb`
        if (this._r < 1) {
          this._r = mathRound(this._r);
        }
        if (this._g < 1) {
          this._g = mathRound(this._g);
        }
        if (this._b < 1) {
          this._b = mathRound(this._b);
        }
        this._ok = rgb.ok;
        this._tc_id = tinyCounter++;
      }
      tinycolor.prototype = {
        isDark: function isDark() {
          return this.getBrightness() < 128;
        },
        isLight: function isLight() {
          return !this.isDark();
        },
        isValid: function isValid() {
          return this._ok;
        },
        getOriginalInput: function getOriginalInput() {
          return this._originalInput;
        },
        getFormat: function getFormat() {
          return this._format;
        },
        getAlpha: function getAlpha() {
          return this._a;
        },
        getBrightness: function getBrightness() {
          //http://www.w3.org/TR/AERT#color-contrast
          var rgb = this.toRgb();
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        },
        getLuminance: function getLuminance() {
          //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
          var rgb = this.toRgb();
          var RsRGB, GsRGB, BsRGB, R, G, B;
          RsRGB = rgb.r / 255;
          GsRGB = rgb.g / 255;
          BsRGB = rgb.b / 255;
          if (RsRGB <= 0.03928) {
            R = RsRGB / 12.92;
          } else {
            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
          }
          if (GsRGB <= 0.03928) {
            G = GsRGB / 12.92;
          } else {
            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
          }
          if (BsRGB <= 0.03928) {
            B = BsRGB / 12.92;
          } else {
            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
          }
          return 0.2126 * R + 0.7152 * G + 0.0722 * B;
        },
        setAlpha: function setAlpha(value) {
          this._a = boundAlpha(value);
          this._roundA = mathRound(100 * this._a) / 100;
          return this;
        },
        toHsv: function toHsv() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          return {
            h: hsv.h * 360,
            s: hsv.s,
            v: hsv.v,
            a: this._a
          };
        },
        toHsvString: function toHsvString() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          var h = mathRound(hsv.h * 360),
            s = mathRound(hsv.s * 100),
            v = mathRound(hsv.v * 100);
          return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
        },
        toHsl: function toHsl() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          return {
            h: hsl.h * 360,
            s: hsl.s,
            l: hsl.l,
            a: this._a
          };
        },
        toHslString: function toHslString() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          var h = mathRound(hsl.h * 360),
            s = mathRound(hsl.s * 100),
            l = mathRound(hsl.l * 100);
          return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
        },
        toHex: function toHex(allow3Char) {
          return rgbToHex(this._r, this._g, this._b, allow3Char);
        },
        toHexString: function toHexString(allow3Char) {
          return '#' + this.toHex(allow3Char);
        },
        toHex8: function toHex8(allow4Char) {
          return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
        },
        toHex8String: function toHex8String(allow4Char) {
          return '#' + this.toHex8(allow4Char);
        },
        toRgb: function toRgb() {
          return {
            r: mathRound(this._r),
            g: mathRound(this._g),
            b: mathRound(this._b),
            a: this._a
          };
        },
        toRgbString: function toRgbString() {
          return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
        },
        toPercentageRgb: function toPercentageRgb() {
          return {
            r: mathRound(bound01(this._r, 255) * 100) + "%",
            g: mathRound(bound01(this._g, 255) * 100) + "%",
            b: mathRound(bound01(this._b, 255) * 100) + "%",
            a: this._a
          };
        },
        toPercentageRgbString: function toPercentageRgbString() {
          return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
        },
        toName: function toName() {
          if (this._a === 0) {
            return "transparent";
          }
          if (this._a < 1) {
            return false;
          }
          return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
        },
        toFilter: function toFilter(secondColor) {
          var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
          var secondHex8String = hex8String;
          var gradientType = this._gradientType ? "GradientType = 1, " : "";
          if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
          }
          return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
        },
        toString: function toString(format) {
          var formatSet = !!format;
          format = format || this._format;
          var formattedString = false;
          var hasAlpha = this._a < 1 && this._a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
          if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === "name" && this._a === 0) {
              return this.toName();
            }
            return this.toRgbString();
          }
          if (format === "rgb") {
            formattedString = this.toRgbString();
          }
          if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
          }
          if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
          }
          if (format === "hex3") {
            formattedString = this.toHexString(true);
          }
          if (format === "hex4") {
            formattedString = this.toHex8String(true);
          }
          if (format === "hex8") {
            formattedString = this.toHex8String();
          }
          if (format === "name") {
            formattedString = this.toName();
          }
          if (format === "hsl") {
            formattedString = this.toHslString();
          }
          if (format === "hsv") {
            formattedString = this.toHsvString();
          }
          return formattedString || this.toHexString();
        },
        clone: function clone() {
          return tinycolor(this.toString());
        },
        _applyModification: function _applyModification(fn, args) {
          var color = fn.apply(null, [this].concat([].slice.call(args)));
          this._r = color._r;
          this._g = color._g;
          this._b = color._b;
          this.setAlpha(color._a);
          return this;
        },
        lighten: function lighten() {
          return this._applyModification(_lighten, arguments);
        },
        brighten: function brighten() {
          return this._applyModification(_brighten, arguments);
        },
        darken: function darken() {
          return this._applyModification(_darken, arguments);
        },
        desaturate: function desaturate() {
          return this._applyModification(_desaturate, arguments);
        },
        saturate: function saturate() {
          return this._applyModification(_saturate, arguments);
        },
        greyscale: function greyscale() {
          return this._applyModification(_greyscale, arguments);
        },
        spin: function spin() {
          return this._applyModification(_spin, arguments);
        },
        _applyCombination: function _applyCombination(fn, args) {
          return fn.apply(null, [this].concat([].slice.call(args)));
        },
        analogous: function analogous() {
          return this._applyCombination(_analogous, arguments);
        },
        complement: function complement() {
          return this._applyCombination(_complement, arguments);
        },
        monochromatic: function monochromatic() {
          return this._applyCombination(_monochromatic, arguments);
        },
        splitcomplement: function splitcomplement() {
          return this._applyCombination(_splitcomplement, arguments);
        },
        triad: function triad() {
          return this._applyCombination(_triad, arguments);
        },
        tetrad: function tetrad() {
          return this._applyCombination(_tetrad, arguments);
        }
      };

      // If input is an object, force 1 into "1.0" to handle ratios properly
      // String input requires "1.0" as input, so 1 will be treated as 1
      tinycolor.fromRatio = function (color, opts) {
        if (_typeof$2(color) == "object") {
          var newColor = {};
          for (var i in color) {
            if (color.hasOwnProperty(i)) {
              if (i === "a") {
                newColor[i] = color[i];
              } else {
                newColor[i] = convertToPercentage(color[i]);
              }
            }
          }
          color = newColor;
        }
        return tinycolor(color, opts);
      };

      // Given a string or object, convert that input to RGB
      // Possible string inputs:
      //
      //     "red"
      //     "#f00" or "f00"
      //     "#ff0000" or "ff0000"
      //     "#ff000000" or "ff000000"
      //     "rgb 255 0 0" or "rgb (255, 0, 0)"
      //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
      //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
      //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
      //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
      //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
      //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
      //
      function inputToRGB(color) {
        var rgb = {
          r: 0,
          g: 0,
          b: 0
        };
        var a = 1;
        var s = null;
        var v = null;
        var l = null;
        var ok = false;
        var format = false;
        if (typeof color == "string") {
          color = stringInputToObject(color);
        }
        if (_typeof$2(color) == "object") {
          if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
          } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
          } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = "hsl";
          }
          if (color.hasOwnProperty("a")) {
            a = color.a;
          }
        }
        a = boundAlpha(a);
        return {
          ok: ok,
          format: color.format || format,
          r: mathMin(255, mathMax(rgb.r, 0)),
          g: mathMin(255, mathMax(rgb.g, 0)),
          b: mathMin(255, mathMax(rgb.b, 0)),
          a: a
        };
      }

      // Conversion Functions
      // --------------------

      // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
      // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

      // `rgbToRgb`
      // Handle bounds / percentage checking to conform to CSS color spec
      // <http://www.w3.org/TR/css3-color/>
      // *Assumes:* r, g, b in [0, 255] or [0, 1]
      // *Returns:* { r, g, b } in [0, 255]
      function rgbToRgb(r, g, b) {
        return {
          r: bound01(r, 255) * 255,
          g: bound01(g, 255) * 255,
          b: bound01(b, 255) * 255
        };
      }

      // `rgbToHsl`
      // Converts an RGB color value to HSL.
      // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
      // *Returns:* { h, s, l } in [0,1]
      function rgbToHsl(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b),
          min = mathMin(r, g, b);
        var h,
          s,
          l = (max + min) / 2;
        if (max == min) {
          h = s = 0; // achromatic
        } else {
          var d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          switch (max) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;
            case g:
              h = (b - r) / d + 2;
              break;
            case b:
              h = (r - g) / d + 4;
              break;
          }
          h /= 6;
        }
        return {
          h: h,
          s: s,
          l: l
        };
      }

      // `hslToRgb`
      // Converts an HSL color value to RGB.
      // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
      // *Returns:* { r, g, b } in the set [0, 255]
      function hslToRgb(h, s, l) {
        var r, g, b;
        h = bound01(h, 360);
        s = bound01(s, 100);
        l = bound01(l, 100);
        function hue2rgb(p, q, t) {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          if (t < 1 / 6) return p + (q - p) * 6 * t;
          if (t < 1 / 2) return q;
          if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
          return p;
        }
        if (s === 0) {
          r = g = b = l; // achromatic
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = hue2rgb(p, q, h + 1 / 3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1 / 3);
        }
        return {
          r: r * 255,
          g: g * 255,
          b: b * 255
        };
      }

      // `rgbToHsv`
      // Converts an RGB color value to HSV
      // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
      // *Returns:* { h, s, v } in [0,1]
      function rgbToHsv(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b),
          min = mathMin(r, g, b);
        var h,
          s,
          v = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;
        if (max == min) {
          h = 0; // achromatic
        } else {
          switch (max) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;
            case g:
              h = (b - r) / d + 2;
              break;
            case b:
              h = (r - g) / d + 4;
              break;
          }
          h /= 6;
        }
        return {
          h: h,
          s: s,
          v: v
        };
      }

      // `hsvToRgb`
      // Converts an HSV color value to RGB.
      // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
      // *Returns:* { r, g, b } in the set [0, 255]
      function hsvToRgb(h, s, v) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i = Math.floor(h),
          f = h - i,
          p = v * (1 - s),
          q = v * (1 - f * s),
          t = v * (1 - (1 - f) * s),
          mod = i % 6,
          r = [v, q, p, p, t, v][mod],
          g = [t, v, v, q, p, p][mod],
          b = [p, p, t, v, v, q][mod];
        return {
          r: r * 255,
          g: g * 255,
          b: b * 255
        };
      }

      // `rgbToHex`
      // Converts an RGB color to hex
      // Assumes r, g, and b are contained in the set [0, 255]
      // Returns a 3 or 6 character hex
      function rgbToHex(r, g, b, allow3Char) {
        var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];

        // Return a 3 character hex if possible
        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
        }
        return hex.join("");
      }

      // `rgbaToHex`
      // Converts an RGBA color plus alpha transparency to hex
      // Assumes r, g, b are contained in the set [0, 255] and
      // a in [0, 1]. Returns a 4 or 8 character rgba hex
      function rgbaToHex(r, g, b, a, allow4Char) {
        var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))];

        // Return a 4 character hex if possible
        if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
        }
        return hex.join("");
      }

      // `rgbaToArgbHex`
      // Converts an RGBA color to an ARGB Hex8 string
      // Rarely used, but required for "toFilter()"
      function rgbaToArgbHex(r, g, b, a) {
        var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
        return hex.join("");
      }

      // `equals`
      // Can be called with any tinycolor input
      tinycolor.equals = function (color1, color2) {
        if (!color1 || !color2) {
          return false;
        }
        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
      };
      tinycolor.random = function () {
        return tinycolor.fromRatio({
          r: mathRandom(),
          g: mathRandom(),
          b: mathRandom()
        });
      };

      // Modification Functions
      // ----------------------
      // Thanks to less.js for some of the basics here
      // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

      function _desaturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }
      function _saturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }
      function _greyscale(color) {
        return tinycolor(color).desaturate(100);
      }
      function _lighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      }
      function _brighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var rgb = tinycolor(color).toRgb();
        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
        return tinycolor(rgb);
      }
      function _darken(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      }

      // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
      // Values outside of this range will be wrapped into this range.
      function _spin(color, amount) {
        var hsl = tinycolor(color).toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return tinycolor(hsl);
      }

      // Combination Functions
      // ---------------------
      // Thanks to jQuery xColor for some of the ideas behind these
      // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

      function _complement(color) {
        var hsl = tinycolor(color).toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return tinycolor(hsl);
      }
      function _triad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 120) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 240) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }
      function _tetrad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 90) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 180) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 270) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }
      function _splitcomplement(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 72) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 216) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }
      function _analogous(color, results, slices) {
        results = results || 6;
        slices = slices || 30;
        var hsl = tinycolor(color).toHsl();
        var part = 360 / slices;
        var ret = [tinycolor(color)];
        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(tinycolor(hsl));
        }
        return ret;
      }
      function _monochromatic(color, results) {
        results = results || 6;
        var hsv = tinycolor(color).toHsv();
        var h = hsv.h,
          s = hsv.s,
          v = hsv.v;
        var ret = [];
        var modification = 1 / results;
        while (results--) {
          ret.push(tinycolor({
            h: h,
            s: s,
            v: v
          }));
          v = (v + modification) % 1;
        }
        return ret;
      }

      // Utility Functions
      // ---------------------

      tinycolor.mix = function (color1, color2, amount) {
        amount = amount === 0 ? 0 : amount || 50;
        var rgb1 = tinycolor(color1).toRgb();
        var rgb2 = tinycolor(color2).toRgb();
        var p = amount / 100;
        var rgba = {
          r: (rgb2.r - rgb1.r) * p + rgb1.r,
          g: (rgb2.g - rgb1.g) * p + rgb1.g,
          b: (rgb2.b - rgb1.b) * p + rgb1.b,
          a: (rgb2.a - rgb1.a) * p + rgb1.a
        };
        return tinycolor(rgba);
      };

      // Readability Functions
      // ---------------------
      // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

      // `contrast`
      // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
      tinycolor.readability = function (color1, color2) {
        var c1 = tinycolor(color1);
        var c2 = tinycolor(color2);
        return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
      };

      // `isReadable`
      // Ensure that foreground and background color combinations meet WCAG2 guidelines.
      // The third argument is an optional Object.
      //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
      //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
      // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

      // *Example*
      //    tinycolor.isReadable("#000", "#111") => false
      //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
      tinycolor.isReadable = function (color1, color2, wcag2) {
        var readability = tinycolor.readability(color1, color2);
        var wcag2Parms, out;
        out = false;
        wcag2Parms = validateWCAG2Parms(wcag2);
        switch (wcag2Parms.level + wcag2Parms.size) {
          case "AAsmall":
          case "AAAlarge":
            out = readability >= 4.5;
            break;
          case "AAlarge":
            out = readability >= 3;
            break;
          case "AAAsmall":
            out = readability >= 7;
            break;
        }
        return out;
      };

      // `mostReadable`
      // Given a base color and a list of possible foreground or background
      // colors for that base, returns the most readable color.
      // Optionally returns Black or White if the most readable color is unreadable.
      // *Example*
      //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
      //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
      //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
      //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
      tinycolor.mostReadable = function (baseColor, colorList, args) {
        var bestColor = null;
        var bestScore = 0;
        var readability;
        var includeFallbackColors, level, size;
        args = args || {};
        includeFallbackColors = args.includeFallbackColors;
        level = args.level;
        size = args.size;
        for (var i = 0; i < colorList.length; i++) {
          readability = tinycolor.readability(baseColor, colorList[i]);
          if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
          }
        }
        if (tinycolor.isReadable(baseColor, bestColor, {
          "level": level,
          "size": size
        }) || !includeFallbackColors) {
          return bestColor;
        } else {
          args.includeFallbackColors = false;
          return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
        }
      };

      // Big List of Colors
      // ------------------
      // <http://www.w3.org/TR/css3-color/#svg-color>
      var names = tinycolor.names = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "0ff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000",
        blanchedalmond: "ffebcd",
        blue: "00f",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        burntsienna: "ea7e5d",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "0ff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkgrey: "a9a9a9",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkslategrey: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1e90ff",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "f0f",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        grey: "808080",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgray: "d3d3d3",
        lightgreen: "90ee90",
        lightgrey: "d3d3d3",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslategray: "789",
        lightslategrey: "789",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "0f0",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "f0f",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370db",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "db7093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        rebeccapurple: "663399",
        red: "f00",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        slategrey: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        wheat: "f5deb3",
        white: "fff",
        whitesmoke: "f5f5f5",
        yellow: "ff0",
        yellowgreen: "9acd32"
      };

      // Make it easy to access colors via `hexNames[hex]`
      var hexNames = tinycolor.hexNames = flip(names);

      // Utilities
      // ---------

      // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
      function flip(o) {
        var flipped = {};
        for (var i in o) {
          if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
          }
        }
        return flipped;
      }

      // Return a valid alpha value [0,1] with all invalid values being set to 1
      function boundAlpha(a) {
        a = parseFloat(a);
        if (isNaN(a) || a < 0 || a > 1) {
          a = 1;
        }
        return a;
      }

      // Take input from [0, n] and return it as [0, 1]
      function bound01(n, max) {
        if (isOnePointZero(n)) {
          n = "100%";
        }
        var processPercent = isPercentage(n);
        n = mathMin(max, mathMax(0, parseFloat(n)));

        // Automatically convert percentage into number
        if (processPercent) {
          n = parseInt(n * max, 10) / 100;
        }

        // Handle floating point rounding errors
        if (Math.abs(n - max) < 0.000001) {
          return 1;
        }

        // Convert into [0, 1] range if it isn't already
        return n % max / parseFloat(max);
      }

      // Force a number between 0 and 1
      function clamp01(val) {
        return mathMin(1, mathMax(0, val));
      }

      // Parse a base-16 hex value into a base-10 integer
      function parseIntFromHex(val) {
        return parseInt(val, 16);
      }

      // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
      // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
      function isOnePointZero(n) {
        return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
      }

      // Check to see if string passed in is a percentage
      function isPercentage(n) {
        return typeof n === "string" && n.indexOf('%') != -1;
      }

      // Force a hex value to have 2 characters
      function pad2(c) {
        return c.length == 1 ? '0' + c : '' + c;
      }

      // Replace a decimal with it's percentage value
      function convertToPercentage(n) {
        if (n <= 1) {
          n = n * 100 + "%";
        }
        return n;
      }

      // Converts a decimal to a hex value
      function convertDecimalToHex(d) {
        return Math.round(parseFloat(d) * 255).toString(16);
      }
      // Converts a hex value to a decimal
      function convertHexToDecimal(h) {
        return parseIntFromHex(h) / 255;
      }
      var matchers = function () {
        // <http://www.w3.org/TR/css3-values/#integers>
        var CSS_INTEGER = "[-\\+]?\\d+%?";

        // <http://www.w3.org/TR/css3-values/#number-value>
        var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

        // Actual matching.
        // Parentheses and commas are optional, but not required.
        // Whitespace can take the place of commas or opening paren
        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        return {
          CSS_UNIT: new RegExp(CSS_UNIT),
          rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
          rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
          hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
          hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
          hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
          hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
          hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
          hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
      }();

      // `isValidCSSUnit`
      // Take in a single string / number and check to see if it looks like a CSS unit
      // (see `matchers` above for definition).
      function isValidCSSUnit(color) {
        return !!matchers.CSS_UNIT.exec(color);
      }

      // `stringInputToObject`
      // Permissive string parsing.  Take in a number of formats, and output an object
      // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
      function stringInputToObject(color) {
        color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
        var named = false;
        if (names[color]) {
          color = names[color];
          named = true;
        } else if (color == 'transparent') {
          return {
            r: 0,
            g: 0,
            b: 0,
            a: 0,
            format: "name"
          };
        }

        // Try to match string input using regular expressions.
        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
        // Just return an object and let the conversion functions handle that.
        // This way the result will be the same whether the tinycolor is initialized with string or object.
        var match;
        if (match = matchers.rgb.exec(color)) {
          return {
            r: match[1],
            g: match[2],
            b: match[3]
          };
        }
        if (match = matchers.rgba.exec(color)) {
          return {
            r: match[1],
            g: match[2],
            b: match[3],
            a: match[4]
          };
        }
        if (match = matchers.hsl.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            l: match[3]
          };
        }
        if (match = matchers.hsla.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            l: match[3],
            a: match[4]
          };
        }
        if (match = matchers.hsv.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            v: match[3]
          };
        }
        if (match = matchers.hsva.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            v: match[3],
            a: match[4]
          };
        }
        if (match = matchers.hex8.exec(color)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
          };
        }
        if (match = matchers.hex6.exec(color)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
          };
        }
        if (match = matchers.hex4.exec(color)) {
          return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            a: convertHexToDecimal(match[4] + '' + match[4]),
            format: named ? "name" : "hex8"
          };
        }
        if (match = matchers.hex3.exec(color)) {
          return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            format: named ? "name" : "hex"
          };
        }
        return false;
      }
      function validateWCAG2Parms(parms) {
        // return valid WCAG2 parms for isReadable.
        // If input parms are invalid, return {"level":"AA", "size":"small"}
        var level, size;
        parms = parms || {
          "level": "AA",
          "size": "small"
        };
        level = (parms.level || "AA").toUpperCase();
        size = (parms.size || "small").toLowerCase();
        if (level !== "AA" && level !== "AAA") {
          level = "AA";
        }
        if (size !== "small" && size !== "large") {
          size = "small";
        }
        return {
          "level": level,
          "size": size
        };
      }

      // Node: Export function
      if (module.exports) {
        module.exports = tinycolor;
      }
      // AMD/requirejs: Define the module
      else {
        window.tinycolor = tinycolor;
      }
    })(Math);
  })(tinycolor);
  var tinyColor = tinycolor.exports;

  var combineRegExp = function combineRegExp(regexpList, flags) {
    var source = "";
    for (var i = 0; i < regexpList.length; i++) {
      if (typeof regexpList[i] === "string") {
        source += regexpList[i];
      } else {
        source += regexpList[i].source;
      }
    }
    return new RegExp(source, flags);
  };
  var generateRegExp = function generateRegExp() {
    var searchFlags = "gi";
    var rAngle = /(?:[+-]?\d*\.?\d+)(?:deg|grad|rad|turn)/;
    var rSideCornerCapture = /to\s+((?:(?:left|right|top|bottom)(?:\s+(?:top|bottom|left|right))?))/;
    var rComma = /\s*,\s*/;
    var rColorHex = /#(?:[a-f0-9]{6}|[a-f0-9]{3})/;
    var rDigits3 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*\)/;
    var rDigits4 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*,\s*\d*\.?\d+\)/;
    var rValue = /(?:[+-]?\d*\.?\d+)(?:%|[a-z]+)?/;
    var rKeyword = /[_a-z-][_a-z0-9-]*/;
    var rColor = combineRegExp(["(?:", rColorHex, "|", "(?:rgb|hsl)", rDigits3, "|", "(?:rgba|hsla)", rDigits4, "|", rKeyword, ")"], "");
    var rColorStop = combineRegExp([rColor, "(?:\\s+", rValue, "(?:\\s+", rValue, ")?)?"], "");
    var rColorStopList = combineRegExp(["(?:", rColorStop, rComma, ")*", rColorStop], "");
    var rLineCapture = combineRegExp(["(?:(", rAngle, ")|", rSideCornerCapture, ")"], "");
    var rGradientSearch = combineRegExp(["(?:(", rLineCapture, ")", rComma, ")?(", rColorStopList, ")"], searchFlags);
    var rColorStopSearch = combineRegExp(["\\s*(", rColor, ")", "(?:\\s+", "(", rValue, "))?", "(?:", rComma, "\\s*)?"], searchFlags);
    return {
      gradientSearch: rGradientSearch,
      colorStopSearch: rColorStopSearch
    };
  };
  var parseGradient = function parseGradient(regExpLib, input) {
    var result;
    var matchColorStop;
    var stopResult;
    regExpLib.gradientSearch.lastIndex = 0;
    var matchGradient = regExpLib.gradientSearch.exec(input);
    if (matchGradient !== null) {
      result = {
        original: matchGradient[0],
        colorStopList: []
      };
      if (matchGradient[1]) {
        result.line = matchGradient[1];
      }
      if (matchGradient[2]) {
        result.angle = matchGradient[2];
      }
      if (matchGradient[3]) {
        result.sideCorner = matchGradient[3];
      }
      regExpLib.colorStopSearch.lastIndex = 0;
      matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
      while (matchColorStop !== null) {
        stopResult = {
          color: matchColorStop[1]
        };
        if (matchColorStop[2]) {
          stopResult.position = matchColorStop[2];
        }
        result.colorStopList.push(stopResult);
        matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
      }
    }
    return result;
  };
  var REGEXP_LIB = generateRegExp();
  var REG_GRADIENT = /.*gradient\s*\(((?:\([^)]*\)|[^)(]*)*)\)/gim;
  var isGradientColor = function isGradientColor(input) {
    REG_GRADIENT.lastIndex = 0;
    return REG_GRADIENT.exec(input);
  };
  var sideCornerDegreeMap = {
    top: 0,
    right: 90,
    bottom: 180,
    left: 270,
    "top left": 225,
    "left top": 225,
    "top right": 135,
    "right top": 135,
    "bottom left": 315,
    "left bottom": 315,
    "bottom right": 45,
    "right bottom": 45
  };
  var parseGradientString = function parseGradientString(input) {
    var match = isGradientColor(input);
    if (!match) {
      return false;
    }
    var gradientColors = {
      points: [],
      degree: 0
    };
    var result = parseGradient(REGEXP_LIB, match[1]);
    if (result.original.trim() !== match[1].trim()) {
      return false;
    }
    var points = result.colorStopList.map(function (_ref) {
      var color = _ref.color,
        position = _ref.position;
      var point = /* @__PURE__ */Object.create(null);
      point.color = tinyColor(color).toRgbString();
      point.left = parseFloat(position);
      return point;
    });
    gradientColors.points = points;
    var degree = parseInt(result.angle, 10);
    if (Number.isNaN(degree)) {
      degree = sideCornerDegreeMap[result.sideCorner] || 90;
    }
    gradientColors.degree = degree;
    return gradientColors;
  };

  function ownKeys$$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$$(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var mathRound = Math.round;
  var hsv2rgba = function hsv2rgba(states) {
    return tinyColor(states).toRgb();
  };
  var hsv2hsva = function hsv2hsva(states) {
    return tinyColor(states).toHsv();
  };
  var hsv2hsla = function hsv2hsla(states) {
    return tinyColor(states).toHsl();
  };
  var gradientColors2string = function gradientColors2string(object) {
    var points = object.points,
      degree = object.degree;
    var colorsStop = points.sort(function (pA, pB) {
      return pA.left - pB.left;
    }).map(function (p) {
      return "".concat(p.color, " ").concat(Math.round(p.left * 100) / 100, "%");
    });
    return "linear-gradient(".concat(degree, "deg,").concat(colorsStop.join(","), ")");
  };
  var genId = function genId() {
    return (1 + Math.random() * 4294967295).toString(16);
  };
  var genGradientPoint = function genGradientPoint(left, color) {
    return {
      id: genId(),
      left: left,
      color: color
    };
  };
  var Color = /*#__PURE__*/function () {
    function Color(input) {
      _classCallCheck(this, Color);
      _defineProperty$3(this, "states", {
        s: 100,
        v: 100,
        h: 100,
        a: 1
      });
      _defineProperty$3(this, "originColor", void 0);
      _defineProperty$3(this, "isGradient", void 0);
      _defineProperty$3(this, "gradientStates", {
        colors: [],
        degree: 0,
        selectedId: null,
        css: ""
      });
      this.update(input);
    }
    _createClass(Color, [{
      key: "update",
      value: function update(input) {
        if (input === this.originColor) {
          return;
        }
        this.originColor = input;
        this.isGradient = false;
        var gradientColors = parseGradientString(input);
        var colorInput = input;
        if (gradientColors) {
          var _points$, _this$gradientSelecte;
          this.isGradient = true;
          var object = gradientColors;
          var points = object.points.map(function (c) {
            return genGradientPoint(c.left, c.color);
          });
          this.gradientStates = {
            colors: points,
            degree: object.degree,
            selectedId: ((_points$ = points[0]) === null || _points$ === void 0 ? void 0 : _points$.id) || null
          };
          this.gradientStates.css = this.linearGradient;
          colorInput = (_this$gradientSelecte = this.gradientSelectedPoint) === null || _this$gradientSelecte === void 0 ? void 0 : _this$gradientSelecte.color;
        }
        this.updateStates(colorInput);
      }
    }, {
      key: "saturation",
      get: function get() {
        return this.states.s;
      },
      set: function set(value) {
        this.states.s = Math.max(0, Math.min(100, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "value",
      get: function get() {
        return this.states.v;
      },
      set: function set(value) {
        this.states.v = Math.max(0, Math.min(100, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "hue",
      get: function get() {
        return this.states.h;
      },
      set: function set(value) {
        this.states.h = Math.max(0, Math.min(360, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "alpha",
      get: function get() {
        return this.states.a;
      },
      set: function set(value) {
        this.states.a = Math.max(0, Math.min(1, Math.round(value * 100) / 100));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "rgb",
      get: function get() {
        var _hsv2rgba = hsv2rgba(this.states),
          r = _hsv2rgba.r,
          g = _hsv2rgba.g,
          b = _hsv2rgba.b;
        return "rgb(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ")");
      }
    }, {
      key: "rgba",
      get: function get() {
        var _hsv2rgba2 = hsv2rgba(this.states),
          r = _hsv2rgba2.r,
          g = _hsv2rgba2.g,
          b = _hsv2rgba2.b,
          a = _hsv2rgba2.a;
        return "rgba(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ", ").concat(a, ")");
      }
    }, {
      key: "hsv",
      get: function get() {
        var _this$getHsva = this.getHsva(),
          h = _this$getHsva.h,
          s = _this$getHsva.s,
          v = _this$getHsva.v;
        return "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)");
      }
    }, {
      key: "hsva",
      get: function get() {
        var _this$getHsva2 = this.getHsva(),
          h = _this$getHsva2.h,
          s = _this$getHsva2.s,
          v = _this$getHsva2.v,
          a = _this$getHsva2.a;
        return "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(a, ")");
      }
    }, {
      key: "hsl",
      get: function get() {
        var _this$getHsla = this.getHsla(),
          h = _this$getHsla.h,
          s = _this$getHsla.s,
          l = _this$getHsla.l;
        return "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
      }
    }, {
      key: "hsla",
      get: function get() {
        var _this$getHsla2 = this.getHsla(),
          h = _this$getHsla2.h,
          s = _this$getHsla2.s,
          l = _this$getHsla2.l,
          a = _this$getHsla2.a;
        return "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(a, ")");
      }
    }, {
      key: "hex",
      get: function get() {
        return tinyColor(this.states).toHexString();
      }
    }, {
      key: "hex8",
      get: function get() {
        return tinyColor(this.states).toHex8String();
      }
    }, {
      key: "cmyk",
      get: function get() {
        var _this$getCmyk = this.getCmyk(),
          c = _this$getCmyk.c,
          m = _this$getCmyk.m,
          y = _this$getCmyk.y,
          k = _this$getCmyk.k;
        return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
      }
    }, {
      key: "css",
      get: function get() {
        if (this.isGradient) {
          return this.linearGradient;
        }
        return this.rgba;
      }
    }, {
      key: "linearGradient",
      get: function get() {
        var gradientColors = this.gradientColors,
          gradientDegree = this.gradientDegree;
        return gradientColors2string({
          points: gradientColors,
          degree: gradientDegree
        });
      }
    }, {
      key: "gradientColors",
      get: function get() {
        return this.gradientStates.colors;
      },
      set: function set(colors) {
        this.gradientStates.colors = colors;
        this.gradientStates.css = this.linearGradient;
      }
    }, {
      key: "gradientSelectedId",
      get: function get() {
        return this.gradientStates.selectedId;
      },
      set: function set(id) {
        var _this$gradientSelecte2;
        if (id === this.gradientSelectedId) {
          return;
        }
        this.gradientStates.selectedId = id;
        this.updateStates((_this$gradientSelecte2 = this.gradientSelectedPoint) === null || _this$gradientSelecte2 === void 0 ? void 0 : _this$gradientSelecte2.color);
      }
    }, {
      key: "gradientDegree",
      get: function get() {
        return this.gradientStates.degree;
      },
      set: function set(degree) {
        this.gradientStates.degree = Math.max(0, Math.min(360, degree));
        this.gradientStates.css = this.linearGradient;
      }
    }, {
      key: "gradientSelectedPoint",
      get: function get() {
        var gradientColors = this.gradientColors,
          gradientSelectedId = this.gradientSelectedId;
        return gradientColors.find(function (color) {
          return color.id === gradientSelectedId;
        });
      }
    }, {
      key: "getFormatsColorMap",
      value: function getFormatsColorMap() {
        return {
          HEX: this.hex,
          CMYK: this.cmyk,
          RGB: this.rgb,
          RGBA: this.rgba,
          HSL: this.hsl,
          HSLA: this.hsla,
          HSV: this.hsv,
          HSVA: this.hsva,
          CSS: this.css
        };
      }
    }, {
      key: "updateCurrentGradientColor",
      value: function updateCurrentGradientColor() {
        var isGradient = this.isGradient,
          gradientColors = this.gradientColors,
          gradientSelectedId = this.gradientSelectedId;
        var length = gradientColors.length;
        var current = this.gradientSelectedPoint;
        if (!isGradient || length === 0 || !current) {
          return false;
        }
        var index = gradientColors.findIndex(function (color) {
          return color.id === gradientSelectedId;
        });
        var newColor = _objectSpread$_(_objectSpread$_({}, current), {}, {
          color: this.rgba
        });
        gradientColors.splice(index, 1, newColor);
        this.gradientColors = gradientColors;
        return this;
      }
    }, {
      key: "updateStates",
      value: function updateStates(input) {
        var color = tinyColor(cmykInputToColor(input));
        var hsva = color.toHsv();
        this.states = hsva;
      }
    }, {
      key: "getRgba",
      value: function getRgba() {
        var _hsv2rgba3 = hsv2rgba(this.states),
          r = _hsv2rgba3.r,
          g = _hsv2rgba3.g,
          b = _hsv2rgba3.b,
          a = _hsv2rgba3.a;
        return {
          r: mathRound(r),
          g: mathRound(g),
          b: mathRound(b),
          a: a
        };
      }
    }, {
      key: "getCmyk",
      value: function getCmyk() {
        var _this$getRgba = this.getRgba(),
          r = _this$getRgba.r,
          g = _this$getRgba.g,
          b = _this$getRgba.b;
        var _rgb2cmyk = rgb2cmyk(r, g, b),
          _rgb2cmyk2 = _slicedToArray(_rgb2cmyk, 4),
          c = _rgb2cmyk2[0],
          m = _rgb2cmyk2[1],
          y = _rgb2cmyk2[2],
          k = _rgb2cmyk2[3];
        return {
          c: mathRound(c * 100),
          m: mathRound(m * 100),
          y: mathRound(y * 100),
          k: mathRound(k * 100)
        };
      }
    }, {
      key: "getHsva",
      value: function getHsva() {
        var _hsv2hsva = hsv2hsva(this.states),
          h = _hsv2hsva.h,
          s = _hsv2hsva.s,
          v = _hsv2hsva.v,
          a = _hsv2hsva.a;
        h = mathRound(h);
        s = mathRound(s * 100);
        v = mathRound(v * 100);
        a *= 1;
        return {
          h: h,
          s: s,
          v: v,
          a: a
        };
      }
    }, {
      key: "getHsla",
      value: function getHsla() {
        var _hsv2hsla = hsv2hsla(this.states),
          h = _hsv2hsla.h,
          s = _hsv2hsla.s,
          l = _hsv2hsla.l,
          a = _hsv2hsla.a;
        h = mathRound(h);
        s = mathRound(s * 100);
        l = mathRound(l * 100);
        a *= 1;
        return {
          h: h,
          s: s,
          l: l,
          a: a
        };
      }
    }, {
      key: "equals",
      value: function equals(color) {
        return tinyColor.equals(this.rgba, color);
      }
    }], [{
      key: "isValid",
      value: function isValid(color) {
        if (parseGradientString(color)) {
          return true;
        }
        return tinyColor(color).isValid();
      }
    }, {
      key: "hsva2color",
      value: function hsva2color(h, s, v, a) {
        return tinyColor({
          h: h,
          s: s,
          v: v,
          a: a
        }).toHsvString();
      }
    }, {
      key: "hsla2color",
      value: function hsla2color(h, s, l, a) {
        return tinyColor({
          h: h,
          s: s,
          l: l,
          a: a
        }).toHslString();
      }
    }, {
      key: "rgba2color",
      value: function rgba2color(r, g, b, a) {
        return tinyColor({
          r: r,
          g: g,
          b: b,
          a: a
        }).toHsvString();
      }
    }, {
      key: "hex2color",
      value: function hex2color(hex, a) {
        var color = tinyColor(hex);
        color.setAlpha(a);
        return color.toHexString();
      }
    }, {
      key: "object2color",
      value: function object2color(object, format) {
        if (format === "CMYK") {
          var c = object.c,
            m = object.m,
            y = object.y,
            k = object.k;
          return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
        }
        var color = tinyColor(object, {
          format: format
        });
        return color.toRgbString();
      }
    }]);
    return Color;
  }();
  _defineProperty$3(Color, "isGradientColor", function (input) {
    return !!isGradientColor(input);
  });
  _defineProperty$3(Color, "compare", function (color1, color2) {
    var isGradientColor1 = Color.isGradientColor(color1);
    var isGradientColor2 = Color.isGradientColor(color2);
    if (isGradientColor1 && isGradientColor2) {
      var gradientColor1 = gradientColors2string(parseGradientString(color1));
      var gradientColor2 = gradientColors2string(parseGradientString(color2));
      return gradientColor1 === gradientColor2;
    }
    if (!isGradientColor1 && !isGradientColor2) {
      return tinyColor.equals(color1, color2);
    }
    return false;
  });
  var COLOR_OBJECT_OUTPUT_KEYS = ["alpha", "css", "hex", "hex8", "hsl", "hsla", "hsv", "hsva", "rgb", "rgba", "saturation", "value", "isGradient"];
  var getColorObject = function getColorObject(color) {
    if (!color) {
      return null;
    }
    var colorObject = /* @__PURE__ */Object.create(null);
    COLOR_OBJECT_OUTPUT_KEYS.forEach(function (key) {
      return colorObject[key] = color[key];
    });
    if (color.isGradient) {
      colorObject.linearGradient = color.linearGradient;
    }
    return colorObject;
  };

  function ownKeys$_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$_(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  var defaultsOptions = {
    start: function start(coordinate, event) {},
    drag: function drag(coordinate, event) {},
    end: function end(coordinate, event) {}
  };
  var _dragStart = /*#__PURE__*/new WeakSet();
  var _drag = /*#__PURE__*/new WeakSet();
  var _dragEnd = /*#__PURE__*/new WeakSet();
  var _getCoordinate = /*#__PURE__*/new WeakSet();
  var Draggable = /*#__PURE__*/function () {
    function Draggable(el, options) {
      _classCallCheck(this, Draggable);
      _classPrivateMethodInitSpec(this, _getCoordinate);
      _classPrivateMethodInitSpec(this, _dragEnd);
      _classPrivateMethodInitSpec(this, _drag);
      _classPrivateMethodInitSpec(this, _dragStart);
      _defineProperty$3(this, "dragging", false);
      _defineProperty$3(this, "$el", void 0);
      _defineProperty$3(this, "props", void 0);
      _defineProperty$3(this, "handles", void 0);
      this.$el = el;
      this.props = _objectSpread$Z(_objectSpread$Z({}, defaultsOptions), options);
      this.handles = {
        start: _classPrivateMethodGet(this, _dragStart, _dragStart2).bind(this),
        drag: _classPrivateMethodGet(this, _drag, _drag2).bind(this),
        end: _classPrivateMethodGet(this, _dragEnd, _dragEnd2).bind(this)
      };
      this.$el.addEventListener("mousedown", this.handles.start, false);
    }
    _createClass(Draggable, [{
      key: "destroy",
      value: function destroy() {
        this.$el.removeEventListener("mousedown", this.handles.start, false);
        window.removeEventListener("mousemove", this.handles.drag, false);
        window.removeEventListener("mouseup", this.handles.end, false);
        window.removeEventListener("contextmenu", this.handles.end, false);
      }
    }]);
    return Draggable;
  }();
  function _dragStart2(event) {
    if (this.dragging) {
      return;
    }
    window.addEventListener("mousemove", this.handles.drag, false);
    window.addEventListener("mouseup", this.handles.end, false);
    window.addEventListener("contextmenu", this.handles.end, false);
    this.dragging = true;
    this.props.start(_classPrivateMethodGet(this, _getCoordinate, _getCoordinate2).call(this, event), event);
  }
  function _drag2(event) {
    if (!this.dragging) {
      return;
    }
    this.props.drag(_classPrivateMethodGet(this, _getCoordinate, _getCoordinate2).call(this, event), event);
  }
  function _dragEnd2(event) {
    var _this = this;
    setTimeout(function () {
      _this.dragging = false;
      _this.props.end(_classPrivateMethodGet(_this, _getCoordinate, _getCoordinate2).call(_this, event), event);
    }, 0);
    window.removeEventListener("mousemove", this.handles.drag, false);
    window.removeEventListener("mouseup", this.handles.end, false);
    window.removeEventListener("contextmenu", this.handles.end, false);
  }
  function _getCoordinate2(event) {
    var rect = this.$el.getBoundingClientRect();
    var mouseEvent = event;
    var left = mouseEvent.clientX - rect.left;
    var top = mouseEvent.clientY - rect.top;
    return {
      y: Math.min(Math.max(0, top), rect.height),
      x: Math.min(Math.max(0, left), rect.width)
    };
  }

  var baseProps = {
    disabled: Boolean,
    color: {
      type: Object
    },
    onChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  };

  function ownKeys$Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DELETE_KEYS = ["delete", "backspace"];
  var LinearGradient = vue.defineComponent({
    name: "LinearGradient",
    inheritAttrs: false,
    props: _objectSpread$Y({}, baseProps),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS;
      var statusClassNames = STATUS.value;
      var refSlider = vue.ref(null);
      var sliderRect = vue.reactive({
        left: 0,
        width: GRADIENT_SLIDER_DEFAULT_WIDTH
      });
      var isDragging = vue.ref(false);
      var isMoved = vue.ref(false);
      var degree = vue.ref(props.color.gradientDegree);
      var selectedId = vue.ref(props.color.gradientSelectedId);
      var colors = vue.ref(cloneDeep_1(props.color.gradientColors));
      vue.watch(function () {
        return props.color.gradientDegree;
      }, function (value) {
        return degree.value = value;
      });
      vue.watch(function () {
        return props.color.gradientSelectedId;
      }, function (value) {
        return selectedId.value = value;
      });
      vue.watch(function () {
        return props.color.gradientColors;
      }, function (value) {
        colors.value = cloneDeep_1(value);
      }, {
        deep: true
      });
      var handleChange = function handleChange(key, payload, addUsedColor) {
        if (props.disabled) {
          return;
        }
        props.onChange({
          key: key,
          payload: payload,
          addUsedColor: addUsedColor
        });
      };
      var handleDegreeChange = function handleDegreeChange(value) {
        if (props.disabled || value === props.color.gradientDegree) {
          return;
        }
        degree.value = value;
        handleChange("degree", value, true);
      };
      var handleSelectedIdChange = function handleSelectedIdChange(value) {
        if (props.disabled) {
          return;
        }
        selectedId.value = value;
        handleChange("selectedId", value);
      };
      var handleColorsChange = function handleColorsChange(value, isEnded) {
        if (props.disabled) {
          return;
        }
        colors.value = value;
        handleChange("colors", value, isEnded);
      };
      var updateActiveThumbLeft = function updateActiveThumbLeft(left) {
        var index = colors.value.findIndex(function (c) {
          return c.id === selectedId.value;
        });
        if (index === -1) {
          return;
        }
        var point = colors.value[index];
        left = Math.max(0, Math.min(sliderRect.width, left));
        var percentLeft = left / sliderRect.width * 100;
        colors.value.splice(index, 1, {
          color: point.color,
          left: percentLeft,
          id: point.id
        });
        handleColorsChange(colors.value);
      };
      var handleStart = function handleStart(id) {
        var rect = refSlider.value.getBoundingClientRect();
        sliderRect.left = rect.left;
        sliderRect.width = rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH;
        if (isDragging.value || props.disabled) {
          return;
        }
        isMoved.value = false;
        isDragging.value = true;
        handleSelectedIdChange(id);
        refSlider.value.focus();
        window.addEventListener("mousemove", handleMove, false);
        window.addEventListener("mouseup", handleEnd, false);
        window.addEventListener("contextmenu", handleEnd, false);
      };
      var handleMove = function handleMove(e) {
        if (!isDragging.value || props.disabled) {
          return;
        }
        var left = e.clientX - sliderRect.left;
        isMoved.value = true;
        updateActiveThumbLeft(left);
      };
      var handleEnd = function handleEnd() {
        if (!isDragging.value) {
          return;
        }
        setTimeout(function () {
          isDragging.value = false;
        }, 0);
        if (isMoved.value) {
          handleColorsChange(colors.value, true);
          isMoved.value = false;
        }
        window.removeEventListener("mousemove", handleMove, false);
        window.removeEventListener("mouseup", handleEnd, false);
        window.removeEventListener("contextmenu", handleEnd, false);
      };
      var handleKeyup = function handleKeyup(e) {
        if (props.disabled) {
          return;
        }
        var points = colors.value;
        var pos = points.findIndex(function (c) {
          return c.id === selectedId.value;
        });
        var length = points.length;
        if (DELETE_KEYS.includes(e.key.toLocaleLowerCase()) && length > 2 && pos >= 0 && pos <= length - 1) {
          points.splice(pos, 1);
          if (!points[pos]) {
            pos = points[pos + 1] ? pos + 1 : points[pos - 1] ? pos - 1 : 0;
          }
          var current = points[pos];
          handleColorsChange(points, true);
          handleSelectedIdChange(current === null || current === void 0 ? void 0 : current.id);
        }
      };
      var handleThumbBarClick = function handleThumbBarClick(e) {
        if (props.disabled) {
          return;
        }
        var left = e.clientX - sliderRect.left;
        left = Math.max(0, Math.min(sliderRect.width, left));
        var percentLeft = left / sliderRect.width * 100;
        var newPoint = genGradientPoint(percentLeft, props.color.rgba);
        colors.value.push(newPoint);
        handleColorsChange(colors.value, true);
        handleSelectedIdChange(newPoint.id);
      };
      vue.onMounted(function () {
        var rect = refSlider.value.getBoundingClientRect();
        sliderRect.left = rect.left;
        sliderRect.width = rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH;
      });
      vue.onBeforeUnmount(function () {
        window.removeEventListener("mousemove", handleMove, false);
        window.removeEventListener("mouseup", handleEnd, false);
        window.removeEventListener("contextmenu", handleEnd, false);
      });
      return {
        baseClassName: baseClassName,
        statusClassNames: statusClassNames,
        refSlider: refSlider,
        degree: degree,
        selectedId: selectedId,
        colors: colors,
        handleDegreeChange: handleDegreeChange,
        handleStart: handleStart,
        handleMove: handleMove,
        handleEnd: handleEnd,
        handleKeyup: handleKeyup,
        handleThumbBarClick: handleThumbBarClick
      };
    },
    render: function render() {
      var _this = this;
      var _this$color = this.color,
        linearGradient = _this$color.linearGradient,
        gradientColors = _this$color.gradientColors;
      var colors = this.colors,
        selectedId = this.selectedId,
        degree = this.degree,
        disabled = this.disabled,
        baseClassName = this.baseClassName,
        statusClassNames = this.statusClassNames;
      var thumbBackground = gradientColors2string({
        points: gradientColors,
        degree: 90
      });
      return vue.createVNode("div", {
        "class": "".concat(baseClassName, "__gradient")
      }, [vue.createVNode("div", {
        "class": "".concat(baseClassName, "__gradient-slider")
      }, [vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__slider"), "".concat(baseClassName, "--bg-alpha")],
        "onKeyup": this.handleKeyup,
        "tabindex": 0,
        "ref": "refSlider"
      }, [vue.createVNode("ul", {
        "class": "gradient-thumbs",
        "onClick": this.handleThumbBarClick,
        "style": {
          background: thumbBackground
        }
      }, [colors.map(function (t) {
        var left = "".concat(Math.round(t.left * 100) / 100, "%");
        return vue.createVNode("li", {
          "class": ["".concat(baseClassName, "__thumb"), "gradient-thumbs__item", selectedId === t.id ? statusClassNames.active : ""],
          "key": t.id,
          "title": "".concat(t.color, " ").concat(left),
          "style": {
            color: t.color,
            left: left
          },
          "onClick": function onClick(e) {
            return e.stopPropagation();
          },
          "onMousedown": function onMousedown(e) {
            return _this.handleStart(t.id);
          }
        }, [vue.createVNode("span", {
          "class": ["gradient-thumbs__item-inner", "".concat(baseClassName, "--bg-alpha")]
        }, null)]);
      })])])]), vue.createVNode("div", {
        "class": "".concat(baseClassName, "__gradient-degree"),
        "title": "".concat(degree, "deg")
      }, [vue.createVNode(InputNumber, {
        "size": "small",
        "theme": "normal",
        "min": 0,
        "max": 360,
        "step": 1,
        "format": function format(value) {
          return "".concat(value, "\xB0");
        },
        "modelValue": _this.degree,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.degree = $event;
        },
        "onBlur": this.handleDegreeChange,
        "onEnter": this.handleDegreeChange,
        "disabled": disabled
      }, null)]), vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__gradient-preview"), "".concat(baseClassName, "--bg-alpha")]
      }, [vue.createVNode("span", {
        "class": "preview-inner",
        "style": {
          background: linearGradient
        }
      }, null)])]);
    }
  });

  function ownKeys$Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var SaturationPanel = vue.defineComponent({
    name: "SaturationPanel",
    props: _objectSpread$X({}, baseProps),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var refPanel = vue.ref(null);
      var refThumb = vue.ref(null);
      var dragInstance = vue.ref(null);
      var panelRect = vue.reactive({
        width: SATURATION_PANEL_DEFAULT_WIDTH,
        height: SATURATION_PANEL_DEFAULT_HEIGHT
      });
      var styles = vue.computed(function () {
        var _props$color = props.color,
          saturation = _props$color.saturation,
          value = _props$color.value;
        var width = panelRect.width,
          height = panelRect.height;
        var top = Math.round((1 - value) * height);
        var left = Math.round(saturation * width);
        return {
          color: props.color.rgb,
          left: "".concat(left, "px"),
          top: "".concat(top, "px")
        };
      });
      var getSaturationAndValueByCoordinate = function getSaturationAndValueByCoordinate(coordinate) {
        var width = panelRect.width,
          height = panelRect.height;
        var x = coordinate.x,
          y = coordinate.y;
        var saturation = Math.round(x / width * 100);
        var value = Math.round((1 - y / height) * 100);
        return {
          saturation: saturation,
          value: value
        };
      };
      var handleDrag = function handleDrag(coordinate, isEnded) {
        if (props.disabled) {
          return;
        }
        var _getSaturationAndValu = getSaturationAndValueByCoordinate(coordinate),
          saturation = _getSaturationAndValu.saturation,
          value = _getSaturationAndValu.value;
        props.onChange({
          saturation: saturation / 100,
          value: value / 100,
          addUsedColor: isEnded
        });
      };
      var handleDragEnd = function handleDragEnd(coordinate) {
        if (props.disabled) {
          return;
        }
        vue.nextTick(function () {
          handleDrag(coordinate, true);
        });
      };
      var panelBackground = vue.computed(function () {
        return "hsl(".concat(props.color.hue, ", 100%, 50%)");
      });
      vue.onMounted(function () {
        panelRect.width = refPanel.value.offsetWidth || SATURATION_PANEL_DEFAULT_WIDTH;
        panelRect.height = refPanel.value.offsetHeight || SATURATION_PANEL_DEFAULT_HEIGHT;
        dragInstance.value = new Draggable(refPanel.value, {
          start: function start() {
            panelRect.width = refPanel.value.offsetWidth;
            panelRect.height = refPanel.value.offsetHeight;
          },
          drag: function drag(coordinate) {
            handleDrag(coordinate);
          },
          end: handleDragEnd
        });
      });
      vue.onBeforeUnmount(function () {
        dragInstance.value.destroy();
      });
      return {
        baseClassName: baseClassName,
        refThumb: refThumb,
        refPanel: refPanel,
        styles: styles,
        panelBackground: panelBackground
      };
    },
    render: function render() {
      var baseClassName = this.baseClassName,
        styles = this.styles,
        panelBackground = this.panelBackground;
      return vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__saturation")],
        "ref": "refPanel",
        "style": {
          background: panelBackground
        }
      }, [vue.createVNode("span", {
        "class": ["".concat(baseClassName, "__thumb")],
        "role": "slider",
        "tabindex": 0,
        "ref": "refThumb",
        "style": styles
      }, null)]);
    }
  });

  function ownKeys$X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$X(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ColorSlider = vue.defineComponent({
    name: "ColorSlider",
    props: _objectSpread$W(_objectSpread$W({}, baseProps), {}, {
      className: {
        type: String,
        "default": ""
      },
      value: {
        type: Number,
        "default": 0
      },
      maxValue: {
        type: Number,
        "default": 360
      },
      railStyle: {
        type: Object
      },
      type: {
        type: String,
        "default": "hue"
      }
    }),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var refPanel = vue.ref(null);
      var refThumb = vue.ref(null);
      var dragInstance = vue.ref(null);
      var panelRect = vue.reactive({
        width: SLIDER_DEFAULT_WIDTH
      });
      var styles = vue.computed(function () {
        var width = panelRect.width;
        if (!width) {
          return;
        }
        var left = Math.round(props.value / props.maxValue * width);
        return {
          left: "".concat(left, "px"),
          color: props.color.rgb
        };
      });
      var handleDrag = function handleDrag(coordinate, isEnded) {
        if (props.disabled) {
          return;
        }
        var width = panelRect.width;
        var x = coordinate.x;
        var value = Math.round(x / width * props.maxValue * 100) / 100;
        props.onChange(value, isEnded);
      };
      var handleDragEnd = function handleDragEnd(coordinate) {
        if (props.disabled) {
          return;
        }
        handleDrag(coordinate, true);
      };
      vue.onMounted(function () {
        panelRect.width = refPanel.value.offsetWidth || SLIDER_DEFAULT_WIDTH;
        dragInstance.value = new Draggable(refPanel.value, {
          start: function start() {
            panelRect.width = refPanel.value.offsetWidth;
          },
          drag: function drag(coordinate) {
            handleDrag(coordinate);
          },
          end: handleDragEnd
        });
      });
      vue.onBeforeUnmount(function () {
        dragInstance.value.destroy();
      });
      return {
        baseClassName: baseClassName,
        refThumb: refThumb,
        refPanel: refPanel,
        styles: styles
      };
    },
    render: function render() {
      var baseClassName = this.baseClassName,
        className = this.className,
        railStyle = this.railStyle,
        styles = this.styles,
        type = this.type,
        color = this.color;
      var paddingStyle = {
        background: "linear-gradient(90deg, rgba(0,0,0,.0) 0%, rgba(0,0,0,.0) 93%, ".concat(color.rgb, " 93%, ").concat(color.rgb, " 100%)")
      };
      return vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__slider-wrapper"), "".concat(baseClassName, "__slider-wrapper--").concat(type, "-type")]
      }, [type === "alpha" && vue.createVNode("div", {
        "className": "".concat(baseClassName, "__slider-padding"),
        "style": paddingStyle
      }, null), vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__slider"), className],
        "ref": "refPanel"
      }, [vue.createVNode("div", {
        "class": "".concat(baseClassName, "__rail"),
        "style": railStyle
      }, null), vue.createVNode("span", {
        "class": ["".concat(baseClassName, "__thumb")],
        "role": "slider",
        "tabindex": 0,
        "ref": "refThumb",
        "style": styles
      }, null)])]);
    }
  });

  function ownKeys$W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$W(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var HueSlider = vue.defineComponent({
    name: "HueSlider",
    inheritAttrs: false,
    props: _objectSpread$V({}, baseProps),
    setup: function setup() {
      var baseClassName = useBaseClassName();
      return {
        baseClassName: baseClassName
      };
    },
    render: function render() {
      return vue.createVNode(ColorSlider, {
        "class": "".concat(this.baseClassName, "__hue"),
        "color": this.color,
        "value": this.color.hue,
        "onChange": this.onChange,
        "disabled": this.disabled,
        "type": "hue"
      }, null);
    }
  });

  var AlphaSlider = vue.defineComponent({
    name: "AlphaSlider",
    inheritAttrs: false,
    props: {
      color: {
        type: Object
      },
      disabled: {
        type: Boolean,
        "default": false
      },
      onChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    },
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var handleChange = function handleChange(v, isDragEnd) {
        props.onChange(v / 100, isDragEnd);
      };
      var railStyle = vue.computed(function () {
        return {
          background: "linear-gradient(to right, rgba(0, 0, 0, 0), ".concat(props.color.rgb, ")")
        };
      });
      return {
        baseClassName: baseClassName,
        railStyle: railStyle,
        handleChange: handleChange
      };
    },
    render: function render() {
      var baseClassName = this.baseClassName;
      return vue.createVNode(ColorSlider, {
        "class": ["".concat(baseClassName, "__alpha"), "".concat(baseClassName, "--bg-alpha")],
        "color": this.color,
        "value": this.color.alpha * 100,
        "onChange": this.handleChange,
        "rail-style": this.railStyle,
        "max-value": 100,
        "disabled": this.disabled,
        "type": "alpha"
      }, null);
    }
  });

  var createCompounder = _createCompounder;

  /**
   * Converts `string`, as space separated words, to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the upper cased string.
   * @example
   *
   * _.upperCase('--foo-bar');
   * // => 'FOO BAR'
   *
   * _.upperCase('fooBar');
   * // => 'FOO BAR'
   *
   * _.upperCase('__foo_bar__');
   * // => 'FOO BAR'
   */
  var upperCase = createCompounder(function (result, word, index) {
    return result + (index ? ' ' : '') + word.toUpperCase();
  });
  var upperCase_1 = upperCase;

  var FORMAT_INPUT_CONFIG = {
    RGB: [{
      key: "r",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "g",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "b",
      min: 0,
      max: 255,
      type: "inputNumber"
    }],
    HSV: [{
      key: "h",
      min: 0,
      max: 360,
      type: "inputNumber"
    }, {
      key: "s",
      min: 0,
      max: 100,
      type: "inputNumber"
    }, {
      key: "v",
      min: 0,
      max: 100,
      type: "inputNumber"
    }],
    HSL: [{
      key: "h",
      min: 0,
      max: 360,
      type: "inputNumber"
    }, {
      key: "s",
      min: 0,
      max: 100,
      type: "inputNumber"
    }, {
      key: "l",
      min: 0,
      max: 100,
      type: "inputNumber"
    }],
    CMYK: [{
      key: "c",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "m",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "y",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "k",
      min: 0,
      max: 255,
      type: "inputNumber"
    }],
    CSS: [{
      key: "css",
      type: "input",
      flex: 3
    }],
    HEX: [{
      key: "hex",
      type: "input",
      flex: 3
    }]
  };

  function ownKeys$V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$V(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var FormatInputs = vue.defineComponent({
    name: "FormatInputs",
    inheritAttrs: false,
    props: _objectSpread$U(_objectSpread$U({}, props$o), {}, {
      color: {
        type: Object
      },
      onInputChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props2) {
      var inputConfigs = vue.computed(function () {
        var configs = _toConsumableArray(FORMAT_INPUT_CONFIG[props2.format]);
        if (props2.enableAlpha) {
          configs.push({
            type: "inputNumber",
            key: "a",
            min: 0,
            max: 100,
            format: function format(value) {
              return "".concat(value, "%");
            },
            flex: 1.15
          });
        }
        return configs;
      });
      var modelValue = vue.reactive({});
      var lastModelValue = vue.reactive({});
      var getFormatColorMap = function getFormatColorMap(type) {
        var color = props2.color;
        if (type === "encode") {
          return {
            HSV: color.getHsva(),
            HSL: color.getHsla(),
            RGB: color.getRgba(),
            CMYK: color.getCmyk(),
            CSS: {
              css: color.css
            },
            HEX: {
              hex: color.hex
            }
          };
        }
        return {
          HSV: Color.object2color(modelValue, "HSV"),
          HSL: Color.object2color(modelValue, "HSL"),
          RGB: Color.object2color(modelValue, "RGB"),
          CMYK: Color.object2color(modelValue, "CMYK"),
          CSS: modelValue.css,
          HEX: modelValue.hex
        };
      };
      var updateModelValue = function updateModelValue() {
        var format = props2.format,
          color = props2.color;
        var values = getFormatColorMap("encode")[format];
        values.a = Math.round(color.alpha * 100);
        Object.keys(values).forEach(function (key) {
          modelValue[key] = values[key];
          lastModelValue[key] = values[key];
        });
      };
      updateModelValue();
      var throttleUpdate = throttle_1(updateModelValue, 100);
      vue.watch(function () {
        var _props2$color = props2.color,
          saturation = _props2$color.saturation,
          hue = _props2$color.hue,
          value = _props2$color.value,
          alpha = _props2$color.alpha;
        return [saturation, hue, value, alpha, props2.format];
      }, throttleUpdate);
      var handleChange = function handleChange(key, v) {
        if (v === lastModelValue[key]) {
          return;
        }
        var value = getFormatColorMap("decode")[props2.format];
        props2.onInputChange(value, modelValue.a / 100, key, v);
      };
      return {
        modelValue: modelValue,
        inputConfigs: inputConfigs,
        handleChange: handleChange
      };
    },
    render: function render() {
      var _this = this;
      var inputProps = _objectSpread$U({}, this.inputProps || {});
      return vue.createVNode("div", {
        "class": "input-group"
      }, [this.inputConfigs.map(function (config) {
        return vue.createVNode("div", {
          "class": "input-group__item",
          "key": config.key,
          "style": {
            flex: config.flex || 1
          }
        }, [config.type === "input" ? vue.createVNode(Input, vue.mergeProps(inputProps, {
          "align": "center",
          "size": "small",
          "disabled": _this.disabled,
          "modelValue": _this.modelValue[config.key],
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return _this.modelValue[config.key] = $event;
          },
          "maxlength": _this.format === "HEX" ? 9 : void 0,
          "title": _this.modelValue[config.key],
          "onBlur": function onBlur(v) {
            return _this.handleChange(config.key, v);
          },
          "onEnter": function onEnter(v) {
            return _this.handleChange(config.key, v);
          }
        }), null) : vue.createVNode(InputNumber, vue.mergeProps(inputProps, {
          "align": "center",
          "size": "small",
          "disabled": _this.disabled,
          "modelValue": _this.modelValue[config.key],
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return _this.modelValue[config.key] = $event;
          },
          "title": _this.modelValue[config.key],
          "min": config.min,
          "max": config.max,
          "step": 1,
          "format": config.format,
          "theme": "normal",
          "onBlur": function onBlur(v) {
            return _this.handleChange(config.key, v);
          },
          "onEnter": function onEnter(v) {
            return _this.handleChange(config.key, v);
          }
        }), null)]);
      })]);
    }
  });

  function ownKeys$U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$U(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$d(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var FormatPanel = vue.defineComponent({
    name: "FormatPanel",
    inheritAttrs: false,
    props: _objectSpread$T(_objectSpread$T({}, props$o), {}, {
      color: {
        type: Object
      },
      onModeChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      },
      onInputChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var formatModel = vue.ref(props2.format);
      vue.watch(function () {
        return [props2.format];
      }, function () {
        return formatModel.value = props2.format;
      });
      var handleModeChange = function handleModeChange(v) {
        formatModel.value = v;
        props2.onModeChange(v);
      };
      return {
        formatModel: formatModel,
        baseClassName: baseClassName,
        handleModeChange: handleModeChange
      };
    },
    render: function render() {
      var _this = this;
      var _slot;
      var formats = _toConsumableArray(FORMATS);
      var baseClassName = this.baseClassName,
        handleModeChange = this.handleModeChange;
      var newProps = _objectSpread$T(_objectSpread$T({}, this.$props), {}, {
        format: this.formatModel
      });
      var selectInputProps = _objectSpread$T({}, this.selectInputProps || {});
      return vue.createVNode("div", {
        "class": "".concat(baseClassName, "__format")
      }, [vue.createVNode("div", {
        "class": "".concat(baseClassName, "__format--item")
      }, [vue.createVNode(Select, vue.mergeProps({
        "size": "small",
        "class": "".concat(baseClassName, "__format-mode-select")
      }, selectInputProps, {
        "popupProps": {
          overlayClassName: "".concat(baseClassName, "__select-options")
        },
        "modelValue": _this.formatModel,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.formatModel = $event;
        },
        "onChange": handleModeChange
      }), _isSlot$d(_slot = formats.map(function (item) {
        return vue.createVNode(Option, {
          "key": item,
          "value": item,
          "label": upperCase_1(item),
          "style": {
            fontSize: "12px"
          }
        }, null);
      })) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      })]), vue.createVNode("div", {
        "class": "".concat(baseClassName, "__format--item")
      }, [vue.createVNode(FormatInputs, newProps, null)])]);
    }
  });

  function ownKeys$T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$T(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var SwatchesPanel = vue.defineComponent({
    name: "SwatchesPanel",
    props: _objectSpread$S(_objectSpread$S({}, baseProps), {}, {
      colors: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      title: {
        type: String,
        "default": "\u7CFB\u7EDF\u8272\u5F69"
      },
      editable: {
        type: Boolean,
        "default": false
      },
      onSetColor: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      },
      handleAddColor: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var _useGlobalIcon = useGlobalIcon({
          DeleteIcon: _delete,
          AddIcon: add$1
        }),
        DeleteIcon = _useGlobalIcon.DeleteIcon,
        AddIcon = _useGlobalIcon.AddIcon;
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS;
      var statusClassNames = STATUS.value;
      var visiblePopConfirm = vue.ref(false);
      var setVisiblePopConfirm = function setVisiblePopConfirm(visible) {
        visiblePopConfirm.value = visible;
      };
      var handleClick = function handleClick(color) {
        return props.onSetColor(color);
      };
      var isEqualCurrentColor = function isEqualCurrentColor(color) {
        return Color.compare(color, props.color.css);
      };
      var selectedColorIndex = vue.computed(function () {
        return props.colors.findIndex(function (color) {
          return isEqualCurrentColor(color);
        });
      });
      var handleRemoveColor = function handleRemoveColor() {
        var colors = _toConsumableArray(props.colors);
        var selectedIndex = selectedColorIndex.value;
        if (selectedIndex > -1) {
          colors.splice(selectedIndex, 1);
        } else {
          colors.length = 0;
        }
        props.onChange(colors);
        setVisiblePopConfirm(false);
      };
      return {
        baseClassName: baseClassName,
        DeleteIcon: DeleteIcon,
        AddIcon: AddIcon,
        statusClassNames: statusClassNames,
        selectedColorIndex: selectedColorIndex,
        visiblePopConfirm: visiblePopConfirm,
        setVisiblePopConfirm: setVisiblePopConfirm,
        handleClick: handleClick,
        isEqualCurrentColor: isEqualCurrentColor,
        handleRemoveColor: handleRemoveColor
      };
    },
    render: function render() {
      var _this = this;
      var baseClassName = this.baseClassName,
        DeleteIcon = this.DeleteIcon,
        AddIcon = this.AddIcon,
        statusClassNames = this.statusClassNames,
        title = this.title,
        editable = this.editable;
      var swatchesClass = "".concat(baseClassName, "__swatches");
      var renderActions = function renderActions() {
        if (!editable) {
          return null;
        }
        return vue.createVNode("div", {
          "class": "".concat(swatchesClass, "--actions")
        }, [vue.createVNode("span", {
          "role": "button",
          "class": "".concat(baseClassName, "__icon"),
          "onClick": function onClick() {
            return _this.handleAddColor();
          }
        }, [vue.createVNode(AddIcon, null, null)]), _this.colors.length > 0 ? vue.createVNode("span", {
          "role": "button",
          "class": "".concat(baseClassName, "__icon"),
          "onClick": function onClick() {
            return _this.handleRemoveColor();
          }
        }, [vue.createVNode(DeleteIcon, null, null)]) : null]);
      };
      return vue.createVNode("div", {
        "class": swatchesClass
      }, [vue.createVNode("h3", {
        "class": "".concat(swatchesClass, "--title")
      }, [vue.createVNode("span", null, [title]), renderActions()]), vue.createVNode("ul", {
        "class": ["".concat(swatchesClass, "--items"), "narrow-scrollbar"]
      }, [this.colors.map(function (color) {
        return vue.createVNode("li", {
          "class": ["".concat(swatchesClass, "--item"), _this.isEqualCurrentColor(color) && editable ? statusClassNames.active : ""],
          "title": color,
          "key": color,
          "onClick": function onClick() {
            if (_this.disabled) {
              return;
            }
            _this.handleClick(color);
          }
        }, [vue.createVNode("div", {
          "class": ["".concat(swatchesClass, "--color"), "".concat(baseClassName, "--bg-alpha")]
        }, [vue.createVNode("span", {
          "class": "".concat(swatchesClass, "--inner"),
          "style": {
            background: color
          }
        }, null)])]);
      })])]);
    }
  });

  function ownKeys$S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$S(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ColorPanel = vue.defineComponent({
    name: "ColorPanel",
    props: _objectSpread$R(_objectSpread$R({}, props$o), {}, {
      togglePopup: {
        type: Function
      }
    }),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS;
      var _useConfig = useConfig("colorPicker"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var statusClassNames = STATUS.value;
      var _toRefs = vue.toRefs(props2),
        inputValue = _toRefs.value,
        modelValue = _toRefs.modelValue,
        recentColors = _toRefs.recentColors;
      var _useVModel = useVModel(inputValue, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var color = vue.ref(new Color(innerValue.value || DEFAULT_COLOR));
      var updateColor = function updateColor() {
        return color.value.update(innerValue.value || DEFAULT_COLOR);
      };
      var mode = vue.ref(color.value.isGradient ? "linear-gradient" : "monochrome");
      var formatModel = vue.ref(color.value.isGradient ? "CSS" : "RGB");
      var _useDefaultValue = useDefaultValue(recentColors, props2.defaultRecentColors, props2.onRecentColorsChange, "recentColors"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        recentlyUsedColors = _useDefaultValue2[0],
        setRecentlyUsedColors = _useDefaultValue2[1];
      if (props2.colorModes.length === 1) {
        var m = props2.colorModes[0];
        mode.value = m;
      }
      var formatValue = function formatValue() {
        if (mode.value === "linear-gradient") {
          return color.value.linearGradient;
        }
        return color.value.getFormatsColorMap()[props2.format] || color.value.css;
      };
      var addRecentlyUsedColor = function addRecentlyUsedColor() {
        if (recentlyUsedColors.value === null || recentlyUsedColors.value === false) {
          return;
        }
        var colors = recentlyUsedColors.value || [];
        var currentColor = color.value.isGradient ? color.value.linearGradient : color.value.rgba;
        var index = colors.indexOf(currentColor);
        if (index > -1) {
          colors.splice(index, 1);
        }
        colors.unshift(currentColor);
        if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {
          colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;
        }
        handleRecentlyUsedColorsChange(colors);
      };
      var handleRecentlyUsedColorsChange = function handleRecentlyUsedColorsChange(colors) {
        recentlyUsedColors.value = colors;
        setRecentlyUsedColors(colors);
      };
      var emitColorChange = function emitColorChange(trigger) {
        setInnerValue(formatValue(), {
          color: getColorObject(color.value),
          trigger: trigger || "palette-saturation-brightness"
        });
      };
      vue.watch(function () {
        return [props2.defaultValue, props2.enableAlpha];
      }, updateColor);
      vue.watch(function () {
        return innerValue.value;
      }, function (newColor) {
        if (newColor !== formatValue()) {
          updateColor();
          mode.value = color.value.isGradient ? "linear-gradient" : "monochrome";
        }
      });
      var handleModeChange = function handleModeChange(value) {
        mode.value = value;
        if (value === "linear-gradient") {
          color.value.update(color.value.gradientColors.length > 0 ? color.value.linearGradient : DEFAULT_LINEAR_GRADIENT);
          return;
        }
        color.value.update(color.value.rgba);
      };
      var handleFormatModeChange = function handleFormatModeChange(format) {
        return formatModel.value = format;
      };
      var handleSatAndValueChange = function handleSatAndValueChange(_ref) {
        var saturation = _ref.saturation,
          value = _ref.value;
        var _color$value = color.value,
          sat = _color$value.saturation,
          val = _color$value.value;
        var changeTrigger = "palette-saturation-brightness";
        if (value !== val && saturation !== sat) {
          color.value.saturation = saturation;
          color.value.value = value;
          changeTrigger = "palette-saturation-brightness";
        } else if (saturation !== sat) {
          color.value.saturation = saturation;
          changeTrigger = "palette-saturation";
        } else if (value !== val) {
          color.value.value = value;
          changeTrigger = "palette-brightness";
        } else {
          return;
        }
        emitColorChange(changeTrigger);
      };
      var handleHueChange = function handleHueChange(hue) {
        var _props2$onPaletteBarC;
        color.value.hue = hue;
        emitColorChange("palette-hue-bar");
        (_props2$onPaletteBarC = props2.onPaletteBarChange) === null || _props2$onPaletteBarC === void 0 ? void 0 : _props2$onPaletteBarC.call(props2, {
          color: getColorObject(color.value)
        });
      };
      var handleAlphaChange = function handleAlphaChange(alpha) {
        color.value.alpha = alpha;
        emitColorChange("palette-alpha-bar");
      };
      var handleInputChange = function handleInputChange(input, alpha) {
        color.value.update(input);
        color.value.alpha = alpha;
        emitColorChange("input");
      };
      var handleGradientChange = function handleGradientChange(_ref2) {
        var key = _ref2.key,
          payload = _ref2.payload;
        var trigger = "palette-saturation-brightness";
        switch (key) {
          case "degree":
            color.value.gradientDegree = payload;
            trigger = "input";
            break;
          case "selectedId":
            color.value.gradientSelectedId = payload;
            break;
          case "colors":
            color.value.gradientColors = payload;
            break;
        }
        emitColorChange(trigger);
      };
      var handleSetColor = function handleSetColor(type, value) {
        var isGradientValue = Color.isGradientColor(value);
        if (isGradientValue) {
          if (props2.colorModes.includes("linear-gradient")) {
            mode.value = "linear-gradient";
            color.value.update(value);
            color.value.updateCurrentGradientColor();
          } else {
            console.warn("\u8BE5\u6A21\u5F0F\u4E0D\u652F\u6301\u6E10\u53D8\u8272");
          }
        } else if (mode.value === "linear-gradient") {
          color.value.updateStates(value);
          color.value.updateCurrentGradientColor();
        } else {
          color.value.update(value);
        }
        emitColorChange();
      };
      return {
        baseClassName: baseClassName,
        statusClassNames: statusClassNames,
        t: t,
        globalConfig: globalConfig,
        color: color,
        mode: mode,
        formatModel: formatModel,
        recentlyUsedColors: recentlyUsedColors,
        addRecentlyUsedColor: addRecentlyUsedColor,
        handleModeChange: handleModeChange,
        handleSatAndValueChange: handleSatAndValueChange,
        handleHueChange: handleHueChange,
        handleAlphaChange: handleAlphaChange,
        handleGradientChange: handleGradientChange,
        handleSetColor: handleSetColor,
        handleFormatModeChange: handleFormatModeChange,
        handleInputChange: handleInputChange,
        handleRecentlyUsedColorsChange: handleRecentlyUsedColorsChange
      };
    },
    render: function render() {
      var _systemColors,
        _this = this;
      var baseClassName = this.baseClassName,
        statusClassNames = this.statusClassNames,
        t = this.t,
        globalConfig = this.globalConfig,
        recentColors = this.recentColors;
        this.recentlyUsedColors;
        var swatchColors = this.swatchColors;
      var baseProps = {
        color: this.color,
        disabled: this.disabled
      };
      var showUsedColors = recentColors !== null && recentColors !== false;
      var systemColors = swatchColors;
      if (systemColors === void 0) {
        systemColors = _toConsumableArray(DEFAULT_SYSTEM_SWATCH_COLORS);
      }
      var showSystemColors = ((_systemColors = systemColors) === null || _systemColors === void 0 ? void 0 : _systemColors.length) > 0;
      var renderSwatches = function renderSwatches() {
        if (!showSystemColors && !showUsedColors) {
          return null;
        }
        return vue.createVNode(vue.Fragment, null, [vue.createVNode("div", {
          "class": "".concat(baseClassName, "__swatches-wrap")
        }, [showUsedColors ? vue.createVNode(SwatchesPanel, vue.mergeProps(baseProps, {
          "title": t(globalConfig.recentColorTitle),
          "editable": true,
          "colors": _this.recentlyUsedColors,
          "handleAddColor": _this.addRecentlyUsedColor,
          "onSetColor": function onSetColor(color) {
            return _this.handleSetColor("used", color);
          },
          "onChange": _this.handleRecentlyUsedColorsChange
        }), null) : null, showSystemColors ? vue.createVNode(SwatchesPanel, vue.mergeProps(baseProps, {
          "title": t(globalConfig.swatchColorTitle),
          "colors": systemColors,
          "onSetColor": function onSetColor(color) {
            return _this.handleSetColor("system", color);
          }
        }), null) : null])]);
      };
      var isGradient = this.mode === "linear-gradient";
      return vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__panel"), this.disabled ? statusClassNames.disabled : false]
      }, [vue.createVNode(PanelHeader, vue.mergeProps(this.$props, {
        "mode": this.mode,
        "onModeChange": this.handleModeChange
      }), null), vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__body")]
      }, [isGradient ? vue.createVNode(LinearGradient, vue.mergeProps(baseProps, {
        "onChange": this.handleGradientChange
      }), null) : null, vue.createVNode(SaturationPanel, vue.mergeProps(baseProps, {
        "onChange": this.handleSatAndValueChange
      }), null), vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__sliders-wrapper")]
      }, [vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__sliders")]
      }, [vue.createVNode(HueSlider, vue.mergeProps(baseProps, {
        "onChange": this.handleHueChange
      }), null), this.enableAlpha ? vue.createVNode(AlphaSlider, vue.mergeProps(baseProps, {
        "onChange": this.handleAlphaChange
      }), null) : null]), vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__sliders-preview"), "".concat(baseClassName, "--bg-alpha")]
      }, [vue.createVNode("span", {
        "class": "".concat(baseClassName, "__sliders-preview-inner"),
        "style": {
          background: isGradient ? this.color.linearGradient : this.color.rgba
        }
      }, null)])]), vue.createVNode(FormatPanel, vue.mergeProps(this.$props, {
        "color": this.color,
        "format": this.formatModel,
        "onModeChange": this.handleFormatModeChange,
        "onInputChange": this.handleInputChange
      }), null), renderSwatches()])]);
    }
  });

  function ownKeys$R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$R(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _ColorPickerPanel = vue.defineComponent({
    name: "TColorPickerPanel",
    props: _objectSpread$Q({}, props$o),
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var prefix = usePrefixClass();
      return function () {
        return vue.createVNode(ColorPanel, vue.mergeProps(_objectSpread$Q(_objectSpread$Q({}, props2), attrs), {
          "popupProps": null,
          "close-btn": false,
          "class": "".concat(prefix.value, "-is-inline")
        }), null);
      };
    }
  });

  var DefaultTrigger = vue.defineComponent({
    name: "DefaultTrigger",
    inheritAttrs: false,
    props: {
      color: {
        type: String,
        "default": ""
      },
      disabled: {
        type: Boolean,
        "default": false
      },
      inputProps: {
        type: Object,
        "default": function _default() {
          return {
            autoWidth: true
          };
        }
      },
      onTriggerChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    },
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var value = vue.ref(props.color);
      vue.watch(function () {
        return [props.color];
      }, function () {
        return value.value = props.color;
      });
      var handleChange = function handleChange(input) {
        if (input === props.color) {
          return;
        }
        if (!Color.isValid(input)) {
          value.value = props.color;
        } else {
          value.value = input;
        }
        props.onTriggerChange(value.value);
      };
      return {
        baseClassName: baseClassName,
        value: value,
        handleChange: handleChange
      };
    },
    render: function render() {
      var _this = this;
      var baseClassName = this.baseClassName;
      var inputSlots = {
        label: function label() {
          return vue.createVNode("div", {
            "class": ["".concat(baseClassName, "__trigger--default__color"), "".concat(baseClassName, "--bg-alpha")]
          }, [vue.createVNode("span", {
            "class": ["color-inner"],
            "style": {
              background: _this.value
            }
          }, null)]);
        }
      };
      return vue.createVNode("div", {
        "class": "".concat(baseClassName, "__trigger--default")
      }, [vue.createVNode(Input, vue.mergeProps(this.inputProps, {
        "modelValue": _this.value,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.value = $event;
        },
        "disabled": this.disabled,
        "onBlur": this.handleChange
      }), inputSlots)]);
    }
  });

  function ownKeys$Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _ColorPicker = vue.defineComponent({
    name: "TColorPicker",
    props: _objectSpread$P({}, props$o),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var visible = vue.ref(false);
      var setVisible = function setVisible(value) {
        return visible.value = value;
      };
      var _toRefs = vue.toRefs(props2),
        inputValue = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(inputValue, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var refTrigger = vue.ref();
      var renderPopupContent = function renderPopupContent() {
        if (props2.disabled) {
          return null;
        }
        var newProps = _objectSpread$P({}, props2);
        delete newProps.onChange;
        return vue.createVNode(ColorPanel, vue.mergeProps(newProps, {
          "disabled": props2.disabled,
          "value": innerValue.value,
          "togglePopup": setVisible,
          "onChange": function onChange(value, context) {
            return setInnerValue(value, context);
          }
        }), null);
      };
      return {
        baseClassName: baseClassName,
        innerValue: innerValue,
        visible: visible,
        refTrigger: refTrigger,
        renderPopupContent: renderPopupContent,
        setVisible: setVisible,
        setInnerValue: setInnerValue
      };
    },
    render: function render() {
      var _this = this;
      var popupProps = this.popupProps,
        disabled = this.disabled,
        baseClassName = this.baseClassName;
      var popProps = _objectSpread$P(_objectSpread$P({
        placement: "bottom-left"
      }, popupProps || {}), {}, {
        trigger: "click",
        attach: "body",
        overlayClassName: [baseClassName],
        visible: this.visible,
        overlayInnerStyle: {
          padding: 0
        },
        onVisibleChange: function onVisibleChange(visible, context) {
          if (context.trigger === "document") {
            _this.setVisible(false);
          }
        }
      });
      return vue.createVNode(Popup, vue.mergeProps(popProps, {
        "content": this.renderPopupContent
      }), {
        "default": function _default() {
          return [vue.createVNode("div", {
            "class": "".concat(baseClassName, "__trigger"),
            "onClick": function onClick() {
              return _this.setVisible(!_this.visible);
            },
            "ref": "refTrigger"
          }, [renderTNodeJSXDefault(_this, "default", vue.createVNode(DefaultTrigger, {
            "color": _this.innerValue,
            "disabled": disabled,
            "input-props": _this.inputProps,
            "onTriggerChange": _this.setInnerValue
          }, null))])];
        }
      });
    }
  });

  var ColorPickerPanel = withInstall(_ColorPickerPanel);
  var ColorPicker = withInstall(_ColorPicker);

  var props$n = {
    alt: {
      type: String,
      "default": ""
    },
    hideOnLoadFailed: Boolean,
    icon: {
      type: Function
    },
    image: {
      type: String,
      "default": ""
    },
    shape: {
      type: String,
      "default": "circle",
      validator: function validator(val) {
        return ["circle", "round"].includes(val);
      }
    },
    size: {
      type: String,
      "default": ""
    },
    onError: Function
  };

  function ownKeys$P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$P(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Avatar = vue.defineComponent({
    name: "TAvatar",
    props: props$n,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("avatar");
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var _useCommonClassName = useCommonClassName$2(),
        SIZE = _useCommonClassName.SIZE;
      var avatarGroup = vue.inject("avatarGroup", void 0);
      var avatar = vue.ref(null);
      var avatarChild = vue.ref(null);
      var isImgExist = vue.ref(true);
      var gap = vue.ref(4);
      var sizeValue = vue.ref("");
      var scale = vue.ref("");
      var isCustomSize = vue.computed(function () {
        return sizeValue.value && !SIZE.value[sizeValue.value];
      });
      var customAvatarSize = vue.computed(function () {
        return isCustomSize.value ? {
          width: sizeValue.value,
          height: sizeValue.value,
          "font-size": "".concat(Number.parseInt(sizeValue.value, 10) / 2, "px")
        } : {};
      });
      var customImageSize = vue.computed(function () {
        return isCustomSize.value ? {
          height: sizeValue.value,
          width: sizeValue.value
        } : {};
      });
      var customCharacterSize = vue.computed(function () {
        return {
          transform: scale.value
        };
      });
      var handleImgLoadError = function handleImgLoadError() {
        var _props2$onError;
        var hideOnLoadFailed = props2.hideOnLoadFailed;
        isImgExist.value = !hideOnLoadFailed;
        (_props2$onError = props2.onError) === null || _props2$onError === void 0 ? void 0 : _props2$onError.call(props2);
      };
      var setScaleParams = function setScaleParams() {
        var $avatar = avatar.value;
        var $avatarChild = avatarChild.value;
        var avatarWidth = $avatar === null || $avatar === void 0 ? void 0 : $avatar.offsetWidth;
        var avatarChildWidth = $avatarChild === null || $avatarChild === void 0 ? void 0 : $avatarChild.offsetWidth;
        if (gap.value * 2 < avatarWidth) {
          scale.value = avatarChildWidth > avatarWidth - gap.value * 2 ? "scale(".concat((avatarWidth - gap.value * 2) / avatarChildWidth, ")") : "scale(1)";
        }
      };
      vue.onMounted(function () {
        sizeValue.value = props2.size || (avatarGroup === null || avatarGroup === void 0 ? void 0 : avatarGroup.size);
        vue.nextTick(function () {
          setScaleParams();
        });
      });
      vue.onUpdated(function () {
        vue.nextTick(function () {
          setScaleParams();
        });
      });
      return function () {
        var _ref;
        var content = renderContent("default", "content");
        var icon = renderTNodeJSX("icon");
        var isIconOnly = icon && !content;
        var shape = props2.shape,
          image = props2.image,
          alt = props2.alt;
        var avatarClass = ["".concat(COMPONENT_NAME.value), SIZE.value[sizeValue.value], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--circle"), shape === "circle"), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--round"), shape === "round"), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "__icon"), !!isIconOnly), _ref)];
        content = vue.createVNode("span", {
          "ref": avatarChild,
          "style": _objectSpread$O({}, customCharacterSize.value)
        }, [content]);
        if (icon) {
          content = [icon, !isIconOnly ? content : ""];
        }
        if (image && isImgExist.value) {
          content = vue.createVNode("img", {
            "style": _objectSpread$O({}, customImageSize.value),
            "src": image,
            "alt": alt,
            "onError": handleImgLoadError
          }, null);
        }
        return vue.createVNode("div", {
          "ref": avatar,
          "class": avatarClass,
          "style": _objectSpread$O({}, customAvatarSize.value)
        }, [content]);
      };
    }
  });

  var props$m = {
    cascading: {
      type: String,
      "default": "right-up",
      validator: function validator(val) {
        return ["left-up", "right-up"].includes(val);
      }
    },
    collapseAvatar: {
      type: [String, Function]
    },
    max: {
      type: Number
    },
    placement: {
      type: String,
      validator: function validator(val) {
        return ["left", "top", "bottom", "right"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium"
    }
  };

  function _isSlot$c(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _AvatarGroup = vue.defineComponent({
    name: "TAvatarGroup",
    props: props$m,
    setup: function setup(props2) {
      vue.provide("avatarGroup", props2);
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var AVATAR_NAME = usePrefixClass("avatar");
      var COMPONENT_NAME = usePrefixClass("avatar-group");
      var isIcon = function isIcon() {
        var content = renderTNodeJSX("collapseAvatar");
        return content;
      };
      var renderIcon = function renderIcon() {
        return isIcon() && typeof props2.collapseAvatar !== "string" ? props2.collapseAvatar : null;
      };
      var renderEllipsisAvatar = function renderEllipsisAvatar(children) {
        if ((children === null || children === void 0 ? void 0 : children.length) > props2.max) {
          var content = setEllipsisContent(children);
          var outAvatar = children.slice(0, props2.max);
          outAvatar.push(vue.createVNode(_Avatar, {
            "size": props2.size,
            "icon": renderIcon()
          }, _isSlot$c(content) ? content : {
            "default": function _default() {
              return [content];
            }
          }));
          return [outAvatar];
        }
        return [children];
      };
      var setEllipsisContent = function setEllipsisContent(children) {
        var content = "";
        if (props2.collapseAvatar) {
          if (!isIcon()) {
            content = renderContent("collapseAvatar", "content");
          } else {
            content = isIcon();
          }
        } else {
          content = "+".concat(children.length - props2.max);
        }
        return content;
      };
      return function () {
        var _ref;
        var children = renderTNodeJSX("default");
        var cascading = props2.cascading,
          max = props2.max;
        var groupClass = ["".concat(COMPONENT_NAME.value), (_ref = {}, _defineProperty$3(_ref, "".concat(AVATAR_NAME.value, "--offset-right"), cascading === "right-up"), _defineProperty$3(_ref, "".concat(AVATAR_NAME.value, "--offset-left"), cascading === "left-up"), _ref)];
        var content = [children];
        if (max && max >= 0) {
          content = [renderEllipsisAvatar(children)];
        }
        return vue.createVNode("div", {
          "class": groupClass
        }, [content]);
      };
    }
  });

  var Avatar = withInstall(_Avatar);
  var AvatarGroup = withInstall(_AvatarGroup);

  var props$l = {
    color: {
      type: String,
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    count: {
      type: [String, Number, Function],
      "default": 0
    },
    "default": {
      type: [String, Function]
    },
    dot: Boolean,
    maxCount: {
      type: Number,
      "default": 99
    },
    offset: {
      type: Array
    },
    shape: {
      type: String,
      "default": "circle",
      validator: function validator(val) {
        return ["circle", "round"].includes(val);
      }
    },
    showZero: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium"].includes(val);
      }
    }
  };

  function ownKeys$O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$O(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Badge = vue.defineComponent({
    name: "TBadge",
    props: _objectSpread$N({}, props$l),
    setup: function setup(props2) {
      var renderTNodeJSX = useTNodeJSX();
      var content = vue.computed(function () {
        if (props2.dot) return "";
        if (typeof props2.count === "function") {
          return renderTNodeJSX("count");
        }
        if (Number.isNaN(Number(props2.count))) {
          return props2.count;
        }
        var count = Number(props2.count);
        return count > props2.maxCount ? "".concat(props2.maxCount, "+") : count;
      });
      var renderChildren = function renderChildren() {
        return renderTNodeJSX("default");
      };
      var getOffset = function getOffset() {
        if (!props2.offset) return {};
        var _props2$offset = _slicedToArray(props2.offset, 2),
          xOffset = _props2$offset[0],
          yOffset = _props2$offset[1];
        xOffset = Number.isNaN(Number(xOffset)) ? xOffset : "".concat(xOffset, "px");
        yOffset = Number.isNaN(Number(yOffset)) ? yOffset : "".concat(yOffset, "px");
        return {
          xOffset: xOffset,
          yOffset: yOffset
        };
      };
      var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;
      var name = "".concat(classPrefix.value, "-badge");
      var isHidden = vue.computed(function () {
        return !props2.showZero && (content.value === 0 || content.value === "0");
      });
      var badgeClassNames = vue.computed(function () {
        var _ref;
        return [(_ref = {}, _defineProperty$3(_ref, "".concat(name, "--dot"), !!props2.dot), _defineProperty$3(_ref, "".concat(name, "--circle"), !props2.dot && props2.shape === "circle"), _defineProperty$3(_ref, "".concat(name, "--round"), props2.shape === "round"), _defineProperty$3(_ref, "".concat(classPrefix.value, "-size-s"), props2.size === "small"), _ref)];
      });
      var inlineStyle = vue.computed(function () {
        var _getOffset = getOffset(),
          xOffset = _getOffset.xOffset,
          yOffset = _getOffset.yOffset;
        return {
          background: "".concat(props2.color),
          right: xOffset,
          top: yOffset
        };
      });
      return {
        content: content,
        inlineStyle: inlineStyle,
        badgeClassNames: badgeClassNames,
        isHidden: isHidden,
        renderChildren: renderChildren,
        name: name
      };
    },
    render: function render() {
      return vue.createVNode("div", vue.mergeProps({
        "class": this.name
      }, this.$attrs), [this.renderChildren(), this.isHidden ? null : vue.createVNode("sup", {
        "class": this.badgeClassNames,
        "style": this.inlineStyle
      }, [this.content])]);
    }
  });

  var Badge = withInstall(_Badge);

  var props$k = {
    cell: {
      type: [String, Function]
    },
    cellAppend: {
      type: [String, Function]
    },
    controllerConfig: {
      type: [Boolean, Object],
      "default": void 0
    },
    fillWithZero: {
      type: Boolean,
      "default": void 0
    },
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        if (!val) return true;
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": "YYYY-MM-DD"
    },
    head: {
      type: [String, Function]
    },
    isShowWeekendDefault: {
      type: Boolean,
      "default": true
    },
    mode: {
      type: String,
      "default": "month",
      validator: function validator(val) {
        if (!val) return true;
        return ["month", "year"].includes(val);
      }
    },
    month: {
      type: [String, Number]
    },
    preventCellContextmenu: Boolean,
    range: {
      type: Array
    },
    theme: {
      type: String,
      "default": "full",
      validator: function validator(val) {
        if (!val) return true;
        return ["full", "card"].includes(val);
      }
    },
    value: {
      type: [String, Date]
    },
    week: {
      type: [Array, Function]
    },
    year: {
      type: [String, Number]
    },
    onCellClick: Function,
    onCellDoubleClick: Function,
    onCellRightClick: Function,
    onControllerChange: Function,
    onMonthChange: Function
  };

  var COMPONENT_NAME = "calendar";
  var MIN_YEAR = 1970;
  var FIRST_MONTH_OF_YEAR = 1;
  var LAST_MONTH_OF_YEAR = 12;
  var DEFAULT_YEAR_CELL_NUMINROW = 4;
  var DAY_CN_MAP = {
    1: "\u4E00",
    2: "\u4E8C",
    3: "\u4E09",
    4: "\u56DB",
    5: "\u4E94",
    6: "\u516D",
    7: "\u65E5"
  };

  var getDay = function getDay(dt) {
    var day = dayjs(dt).day();
    if (day === 0) {
      day = 7;
    }
    return day;
  };
  var getDayCn = function getDayCn(num) {
    var re = "";
    var numStr = num.toString();
    if (numStr in DAY_CN_MAP) {
      re = DAY_CN_MAP[numStr];
    }
    return re;
  };
  var getCellColIndex = function getCellColIndex(firstDayOfWeek, dt) {
    var re = 0;
    var day = getDay(dt);
    if (day >= firstDayOfWeek) {
      re = day - firstDayOfWeek;
    } else {
      re = 7 - firstDayOfWeek + day;
    }
    return re;
  };
  var addDate = function addDate(dt, days) {
    var d = new Date(dt);
    d.setDate(d.getDate() + days);
    return d;
  };
  var createYearCellsData = function createYearCellsData(year, curDate, format) {
    var monthsArr = [];
    var isCurYear = curDate.year() === year;
    for (var num = FIRST_MONTH_OF_YEAR; num <= LAST_MONTH_OF_YEAR; num++) {
      var date = new Date(year, num - 1);
      var curDateMon = parseInt(curDate.format("M"), 10);
      var isCurrent = isCurYear && curDateMon === num;
      monthsArr.push({
        mode: "year",
        isCurrent: isCurrent,
        date: date,
        formattedDate: dayjs(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      });
    }
    return monthsArr;
  };
  var createMonthCellsData = function createMonthCellsData(year, month, firstDayOfWeek, curDate, format) {
    var daysArr = [];
    var begin = dayjs("".concat(year, "-").concat(month)).startOf("month").toDate();
    var end = dayjs("".concat(year, "-").concat(month)).endOf("month").toDate();
    var days = end.getDate();
    var beginDateColIndex = getCellColIndex(firstDayOfWeek, begin);
    var arr = [];
    var num = 1;
    var createCellData = function createCellData(belongTo, isCurrent, date, weekOrder) {
      var day = getDay(date);
      return {
        mode: "month",
        belongTo: belongTo,
        isCurrent: isCurrent,
        day: day,
        weekOrder: weekOrder,
        date: date,
        formattedDate: dayjs(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      };
    };
    for (var i = 0; i < beginDateColIndex; i++) {
      var date = addDate(begin, i - beginDateColIndex);
      arr.push(createCellData(-1, false, date, num));
      if (arr.length === 7) {
        daysArr.push(arr);
        arr = [];
        num += 1;
      }
    }
    for (var _i = 0; _i < days; _i++) {
      var _date = addDate(begin, _i);
      arr.push(createCellData(0, curDate.isSame(dayjs(_date)), _date, num));
      if (arr.length === 7) {
        daysArr.push(arr);
        arr = [];
        num += 1;
      }
    }
    if (arr.length) {
      var nextMonthCellNum = 7 - arr.length;
      for (var _i2 = 0; _i2 < nextMonthCellNum; _i2++) {
        var _date2 = addDate(end, _i2 + 1);
        arr.push(createCellData(1, false, _date2, num));
      }
      daysArr.push(arr);
    }
    return daysArr;
  };
  var createDefaultCurDate = function createDefaultCurDate() {
    return dayjs(dayjs().format("YYYY-MM-DD"));
  };

  function useState(props) {
    var _useConfig = useConfig(COMPONENT_NAME),
      globalConfig = _useConfig.globalConfig;
    var state = vue.reactive({
      realFirstDayOfWeek: 1,
      curDate: null,
      curSelectedYear: null,
      curSelectedMonth: null,
      curSelectedMode: null,
      isShowWeekend: true,
      controlSize: "medium"
    });
    function toToday() {
      var curDate = createDefaultCurDate();
      state.curSelectedYear = curDate.year();
      state.curSelectedMonth = parseInt(curDate.format("M"), 10);
    }
    function setCurSelectedYear(year) {
      var curSelectedYear = year ? parseInt("".concat(year), 10) : createDefaultCurDate().year();
      if (!isNaN(curSelectedYear) && curSelectedYear > 0) {
        state.curSelectedYear = curSelectedYear;
      }
    }
    function setCurSelectedMonth(month) {
      var curSelectedMonth = month ? parseInt("".concat(month), 10) : parseInt(createDefaultCurDate().format("M"), 10);
      if (!isNaN(curSelectedMonth) && curSelectedMonth > 0 && curSelectedMonth <= 12) {
        state.curSelectedMonth = curSelectedMonth;
      }
    }
    function setCurrentDate(value) {
      state.curDate = value ? dayjs(value) : createDefaultCurDate();
    }
    function checkDayVisibled(day) {
      var re = true;
      if (!state.isShowWeekend) {
        re = day !== 6 && day !== 7;
      }
      return re;
    }
    vue.watch(function () {
      return props.firstDayOfWeek;
    }, function () {
      var _ref, _props$firstDayOfWeek;
      state.realFirstDayOfWeek = (_ref = (_props$firstDayOfWeek = props.firstDayOfWeek) !== null && _props$firstDayOfWeek !== void 0 ? _props$firstDayOfWeek : globalConfig.value.firstDayOfWeek) !== null && _ref !== void 0 ? _ref : 1;
    }, {
      immediate: true
    });
    vue.watch(function () {
      return props.value;
    }, function (v) {
      setCurrentDate(v);
    }, {
      immediate: true
    });
    vue.watch(function () {
      return props.year;
    }, function (v) {
      setCurSelectedYear(v);
    }, {
      immediate: true
    });
    vue.watch(function () {
      return props.month;
    }, function (v) {
      setCurSelectedMonth(v);
    }, {
      immediate: true
    });
    vue.watch(function () {
      return props.isShowWeekendDefault;
    }, function (v) {
      state.isShowWeekend = v;
    }, {
      immediate: true
    });
    vue.watch(function () {
      return props.mode;
    }, function (v) {
      state.curSelectedMode = v;
    }, {
      immediate: true
    });
    return {
      state: state,
      toToday: toToday,
      checkDayVisibled: checkDayVisibled
    };
  }

  function useCalendarClass(props, state) {
    var prefixClass = usePrefixClass(COMPONENT_NAME);
    var body = vue.computed(function () {
      return ["".concat(prefixClass.value), "".concat(prefixClass.value, "--").concat(props.theme)];
    });
    var panel = vue.computed(function () {
      return ["".concat(prefixClass.value, "__panel"), "".concat(prefixClass.value, "__panel--").concat(state.curSelectedMode)];
    });
    var control = vue.computed(function () {
      return ["".concat(prefixClass.value, "__control")];
    });
    var title = vue.computed(function () {
      return ["".concat(prefixClass.value, "__title")];
    });
    var controlSection = vue.computed(function () {
      return ["".concat(prefixClass.value, "__control-section")];
    });
    var controlSectionCell = vue.computed(function () {
      return ["".concat(prefixClass.value, "__control-section-cell")];
    });
    var controlTag = vue.computed(function () {
      return ["".concat(prefixClass.value, "__control-tag")];
    });
    var table = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table")];
    });
    var tableHead = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-head")];
    });
    var tableHeadRow = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-head-row")];
    });
    var tableHeadCell = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-head-cell")];
    });
    var tableBody = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body")];
    });
    var tableBodyRow = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body-row")];
    });
    return {
      body: body,
      panel: panel,
      control: control,
      title: title,
      controlSection: controlSection,
      controlSectionCell: controlSectionCell,
      controlTag: controlTag,
      table: table,
      tableHead: tableHead,
      tableHeadRow: tableHeadRow,
      tableHeadCell: tableHeadCell,
      tableBody: tableBody,
      tableBodyRow: tableBodyRow
    };
  }
  function useCalendarCellClass() {
    var prefixClass = usePrefixClass(COMPONENT_NAME);
    var tableBodyCell = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body-cell")];
    });
    var tableBodyCell4Now = vue.computed(function () {
      return "".concat(prefixClass.value, "__table-body-cell--now");
    });
    var tableBodyCellDisplay = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body-cell-display")];
    });
    var tableBodyCellCsontent = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body-cell-content")];
    });
    return {
      tableBodyCell: tableBodyCell,
      tableBodyCell4Now: tableBodyCell4Now,
      tableBodyCellDisplay: tableBodyCellDisplay,
      tableBodyCellCsontent: tableBodyCellCsontent
    };
  }

  function ownKeys$N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$N(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var getDefaultControllerConfigData = function getDefaultControllerConfigData() {
    var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return {
      visible: visible,
      disabled: false,
      mode: {
        visible: true,
        radioGroupProps: {}
      },
      year: {
        visible: true,
        selectProps: {}
      },
      month: {
        visible: true,
        selectProps: {}
      },
      weekend: {
        visible: true,
        showWeekendButtonProps: {},
        hideWeekendButtonProps: {}
      },
      current: {
        visible: true,
        currentDayButtonProps: {},
        currentMonthButtonProps: {}
      }
    };
  };
  function userController(props, state) {
    var _useConfig = useConfig(COMPONENT_NAME),
      globalConfig = _useConfig.globalConfig;
    var options = vue.computed(function () {
      var dayJsFilterDate = dayjs("".concat(state.curSelectedYear, "-").concat(state.curSelectedMonth));
      var re = {
        isShowWeekend: state.isShowWeekend,
        filterDate: dayJsFilterDate.toDate(),
        formattedFilterDate: dayJsFilterDate.format(props.format),
        mode: state.curSelectedMode
      };
      return re;
    });
    var configData = vue.computed(function () {
      var _ref, _props$controllerConf;
      var controllerConfig = (_ref = (_props$controllerConf = props.controllerConfig) !== null && _props$controllerConf !== void 0 ? _props$controllerConf : globalConfig.value.controllerConfig) !== null && _ref !== void 0 ? _ref : true;
      if (typeof controllerConfig === "boolean") {
        return getDefaultControllerConfigData(controllerConfig);
      }
      return _objectSpread$M(_objectSpread$M({}, getDefaultControllerConfigData()), controllerConfig);
    });
    var visible = vue.computed(function () {
      return !!configData.value && configData.value.visible;
    });
    function checkControllerVisible(name) {
      var re = true;
      var conf = configData.value;
      if (!conf || !conf.visible || conf[name] === false || conf[name] && !conf[name].visible) {
        re = false;
      }
      return re;
    }
    function checkControllerDisabled(name, propsName) {
      var re = false;
      var conf = configData.value;
      if (conf && (conf.disabled || conf[name] && conf[name][propsName] && conf[name][propsName].disabled)) {
        re = true;
      }
      return re;
    }
    function emitControllerChange() {
      vue.nextTick(function () {
        typeof props.onControllerChange === "function" && props.onControllerChange(_objectSpread$M({}, options.value));
      });
    }
    return {
      options: options,
      configData: configData,
      visible: visible,
      checkControllerVisible: checkControllerVisible,
      checkControllerDisabled: checkControllerDisabled,
      emitControllerChange: emitControllerChange
    };
  }

  function useColHeaders(props, state) {
    var _useConfig = useConfig(COMPONENT_NAME),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var weekDipalyText = vue.computed(function () {
      return props.week || t(globalConfig.value.week).split(",");
    });
    function getWeekDisplay(weekNum) {
      var weekText = weekDipalyText.value;
      return _typeof$2(weekText) === "object" && weekText[weekNum - 1] ? weekText[weekNum - 1] : getDayCn(weekNum);
    }
    var cellColHeaders = vue.computed(function () {
      var re = [];
      var min = 1;
      var max = 7;
      for (var i = state.realFirstDayOfWeek; i <= max; i++) {
        re.push({
          num: i,
          display: getWeekDisplay(i)
        });
      }
      if (state.realFirstDayOfWeek > min) {
        for (var _i = min; _i < state.realFirstDayOfWeek; _i++) {
          re.push({
            num: _i,
            display: getWeekDisplay(_i)
          });
        }
      }
      return re;
    });
    return {
      cellColHeaders: cellColHeaders
    };
  }

  function ownKeys$M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$M(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var clickTypeEmitEventMap = {
    click: "click",
    dblclick: "dblclick",
    contextmenu: "rightclick"
  };
  var CalendarCellItem = vue.defineComponent({
    name: "TCalendarCell",
    inheritAttrs: false,
    props: {
      item: {
        type: Object,
        "default": function _default() {
          return null;
        }
      },
      fillWithZero: {
        type: Boolean,
        "default": void 0
      },
      theme: {
        type: String,
        "default": function _default() {
          return null;
        }
      },
      t: Function,
      global: Object,
      cell: [String, Function],
      cellAppend: [String, Function]
    },
    emits: _toConsumableArray(Object.values(clickTypeEmitEventMap)),
    setup: function setup(props, _ref) {
      var emit = _ref.emit;
      var renderContent = useContent();
      var cls = useCalendarCellClass();
      var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS;
      var valueDisplay = vue.computed(function () {
        if (props.item.mode === "month") {
          var _ref2, _props$fillWithZero;
          var dateNum = props.item.date.getDate();
          var fillZero = dateNum < 10 && ((_ref2 = (_props$fillWithZero = props.fillWithZero) !== null && _props$fillWithZero !== void 0 ? _props$fillWithZero : props.global.fillWithZero) !== null && _ref2 !== void 0 ? _ref2 : true);
          return fillZero ? "0".concat(dateNum) : dateNum;
        }
        var map = props.t(props.global.cellMonth).split(",");
        return map[props.item.date.getMonth().toString()];
      });
      var allowSlot = vue.computed(function () {
        return props.theme === "full";
      });
      var disabled = vue.computed(function () {
        return props.item.mode === "month" && props.item.belongTo !== 0;
      });
      var cellCls = vue.computed(function () {
        var _ref3;
        var _props$item = props.item,
          mode = _props$item.mode,
          date = _props$item.date,
          formattedDate = _props$item.formattedDate,
          isCurrent = _props$item.isCurrent;
        var isNow = mode === "year" ? new Date().getMonth() === date.getMonth() : formattedDate === dayjs().format("YYYY-MM-DD");
        return [cls.tableBodyCell.value, (_ref3 = {}, _defineProperty$3(_ref3, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref3, STATUS.value.checked, isCurrent), _defineProperty$3(_ref3, cls.tableBodyCell4Now.value, isNow), _ref3)];
      });
      var clickCell = function clickCell(e) {
        if (disabled.value) return;
        var emitName = clickTypeEmitEventMap[e.type];
        emit(emitName, e);
      };
      var renderDefaultNode = function renderDefaultNode() {
        return vue.createVNode(vue.Fragment, null, [vue.createVNode("div", {
          "class": cls.tableBodyCellDisplay.value
        }, [valueDisplay.value]), vue.createVNode("div", {
          "class": cls.tableBodyCellCsontent.value
        }, [allowSlot.value && renderContent("cellAppend", void 0, {
          params: _objectSpread$L({}, props.item)
        })])]);
      };
      return function () {
        return props.item && vue.createVNode("td", {
          "class": cellCls.value,
          "onClick": clickCell,
          "ondblclick": clickCell,
          "oncontextmenu": clickCell
        }, [renderContent("cell", void 0, {
          defaultNode: renderDefaultNode(),
          params: _objectSpread$L({}, props.item)
        })]);
      };
    }
  });

  function ownKeys$L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$L(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$b(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _Calendar = vue.defineComponent({
    name: "TCalendar",
    props: _objectSpread$K({}, props$k),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderContent = useContent();
      var _useConfig = useConfig(COMPONENT_NAME),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var _useState = useState(props2),
        state = _useState.state,
        toToday = _useState.toToday,
        checkDayVisibled = _useState.checkDayVisibled;
      var cls = useCalendarClass(props2, state);
      var _useColHeaders = useColHeaders(props2, state),
        cellColHeaders = _useColHeaders.cellColHeaders;
      var controller = userController(props2, state);
      var rangeFromTo = vue.computed(function () {
        if (!props2.range || props2.range.length < 2) {
          return null;
        }
        var _props2$range = _slicedToArray(props2.range, 2),
          v1 = _props2$range[0],
          v2 = _props2$range[1];
        if (dayjs(v1).isBefore(dayjs(v2))) {
          return {
            from: v1,
            to: v2
          };
        }
        return {
          from: v2,
          to: v1
        };
      });
      function checkMonthAndYearSelecterDisabled(year, month) {
        var disabled = false;
        if (rangeFromTo.value && rangeFromTo.value.from && rangeFromTo.value.to) {
          var beginYear = dayjs(rangeFromTo.value.from).year();
          var endYear = dayjs(rangeFromTo.value.to).year();
          if (year === beginYear) {
            var beginMon = parseInt(dayjs(rangeFromTo.value.from).format("M"), 10);
            disabled = month < beginMon;
          } else if (year === endYear) {
            var endMon = parseInt(dayjs(rangeFromTo.value.to).format("M"), 10);
            disabled = month > endMon;
          }
        }
        return disabled;
      }
      vue.watch(function () {
        return {
          year: "".concat(state.curSelectedYear),
          month: "".concat(state.curSelectedMonth)
        };
      }, function (v) {
        typeof props2.onMonthChange === "function" && props2.onMonthChange(_objectSpread$K({}, v));
        controller.emitControllerChange();
      });
      var dateSelect = {
        yearSelectOptionList: vue.computed(function () {
          var re = [];
          var begin = state.curSelectedYear - 10;
          var end = state.curSelectedYear + 10;
          if (rangeFromTo.value && rangeFromTo.value.from && rangeFromTo.value.to) {
            begin = dayjs(rangeFromTo.value.from).year();
            end = dayjs(rangeFromTo.value.to).year();
          }
          if (begin < MIN_YEAR) {
            begin = MIN_YEAR;
          }
          if (end < MIN_YEAR) {
            end = MIN_YEAR;
          }
          for (var i = begin; i <= end; i++) {
            var disabled = checkMonthAndYearSelecterDisabled(i, state.curSelectedMonth);
            re.push({
              value: i,
              label: t(globalConfig.value.yearSelection, {
                year: i
              }),
              disabled: disabled
            });
          }
          return re;
        }),
        isYearSelectVisible: vue.computed(function () {
          return controller.checkControllerVisible("year");
        }),
        isYearSelectDisabled: vue.computed(function () {
          return controller.checkControllerDisabled("year", "selectProps");
        }),
        monthSelectOptionList: vue.computed(function () {
          var re = [];
          for (var i = FIRST_MONTH_OF_YEAR; i <= LAST_MONTH_OF_YEAR; i++) {
            var disabled = checkMonthAndYearSelecterDisabled(state.curSelectedYear, i);
            re.push({
              value: i,
              label: t(globalConfig.value.monthSelection, {
                month: i
              }),
              disabled: disabled
            });
          }
          return re;
        }),
        isMonthSelectVisible: vue.computed(function () {
          return state.curSelectedMode === "month" && controller.checkControllerVisible("month");
        }),
        isMonthSelectDisabled: vue.computed(function () {
          return controller.checkControllerDisabled("month", "selectProps");
        })
      };
      var modeSelect = {
        optionList: vue.computed(function () {
          return [{
            value: "month",
            label: t(globalConfig.value.monthRadio)
          }, {
            value: "year",
            label: t(globalConfig.value.yearRadio)
          }];
        }),
        isVisible: vue.computed(function () {
          return controller.checkControllerVisible("mode");
        }),
        isDisabled: vue.computed(function () {
          return controller.checkControllerDisabled("mode", "radioGroupProps");
        })
      };
      var weekendBtn = {
        text: vue.computed(function () {
          return state.isShowWeekend ? t(globalConfig.value.hideWeekend) : t(globalConfig.value.showWeekend);
        }),
        vBind: vue.computed(function () {
          var c = controller.configData.value.weekend;
          return state.isShowWeekend ? c.hideWeekendButtonProps : c.showWeekendButtonProps;
        }),
        isVisible: vue.computed(function () {
          return props2.theme === "full" && controller.checkControllerVisible("current") && controller.checkControllerVisible("weekend");
        }),
        isDisabled: vue.computed(function () {
          var p = state.isShowWeekend ? "hideWeekendButtonProps" : "showWeekendButtonProps";
          return controller.checkControllerDisabled("weekend", p);
        })
      };
      var currentBtn = {
        text: vue.computed(function () {
          return state.curSelectedMode === "month" ? t(globalConfig.value.today) : t(globalConfig.value.thisMonth);
        }),
        vBind: vue.computed(function () {
          var c = controller.configData.value.current;
          return state.curSelectedMode === "month" ? c.currentDayButtonProps : c.currentMonthButtonProps;
        }),
        isVisible: vue.computed(function () {
          return props2.theme === "full" && controller.checkControllerVisible("current");
        }),
        isDisabled: vue.computed(function () {
          var p = state.curSelectedMode === "month" ? "currentDayButtonProps" : "currentMonthButtonProps";
          return controller.checkControllerDisabled("current", p);
        })
      };
      var renderControl = function renderControl() {
        var _slot;
        return vue.createVNode("div", {
          "class": cls.control.value
        }, [vue.createVNode("div", {
          "class": cls.title.value
        }, [renderContent("head", void 0, {
          params: _objectSpread$K({}, controller.options.value)
        })]), vue.createVNode("div", {
          "class": cls.controlSection.value
        }, [dateSelect.isYearSelectVisible.value && vue.createVNode("div", {
          "class": cls.controlSectionCell.value
        }, [vue.createVNode(Select, vue.mergeProps({
          "modelValue": state.curSelectedYear,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return state.curSelectedYear = $event;
          },
          "size": state.controlSize,
          "autoWidth": true
        }, controller.configData.value.year.selectProps, {
          "disabled": dateSelect.isYearSelectDisabled.value,
          "options": dateSelect.yearSelectOptionList.value
        }), null)]), dateSelect.isMonthSelectVisible.value && vue.createVNode("div", {
          "class": cls.controlSectionCell.value
        }, [vue.createVNode(Select, vue.mergeProps({
          "autoWidth": true,
          "modelValue": state.curSelectedMonth,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return state.curSelectedMonth = $event;
          },
          "size": state.controlSize
        }, controller.configData.value.month.selectProps, {
          "disabled": dateSelect.isMonthSelectDisabled.value,
          "options": dateSelect.monthSelectOptionList.value
        }), null)]), modeSelect.isVisible.value && vue.createVNode("div", {
          "class": cls.controlSectionCell.value,
          "style": "height: auto"
        }, [vue.createVNode(RadioGroup, vue.mergeProps({
          "modelValue": state.curSelectedMode,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return state.curSelectedMode = $event;
          },
          "variant": "default-filled",
          "size": state.controlSize
        }, controller.configData.value.mode.radioGroupProps, {
          "disabled": modeSelect.isDisabled.value,
          "onChange": controller.emitControllerChange
        }), _isSlot$b(_slot = modeSelect.optionList.value.map(function (item) {
          return vue.createVNode(RadioButton, {
            "key": item.value,
            "value": item.value
          }, {
            "default": function _default() {
              return [item.label];
            }
          });
        })) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        })]), weekendBtn.isVisible.value && vue.createVNode("div", {
          "class": cls.controlSectionCell.value
        }, [vue.createVNode(CheckTag, vue.mergeProps({
          "class": cls.controlTag.value,
          "theme": state.isShowWeekend ? "default" : "primary",
          "size": "large"
        }, weekendBtn.vBind.value, {
          "disabled": weekendBtn.isDisabled.value,
          "onClick": function onClick() {
            state.isShowWeekend = !state.isShowWeekend;
            controller.emitControllerChange();
          }
        }), {
          "default": function _default() {
            return [weekendBtn.text.value];
          }
        })]), currentBtn.isVisible.value && vue.createVNode("div", {
          "class": cls.controlSectionCell.value
        }, [vue.createVNode(Button, vue.mergeProps({
          "size": state.controlSize
        }, currentBtn.vBind.value, {
          "disabled": currentBtn.isDisabled.value,
          "onClick": function onClick() {
            toToday();
          }
        }), {
          "default": function _default() {
            return [currentBtn.text.value];
          }
        })])])]);
      };
      var cellClickEmit = function cellClickEmit(eventPropsName, e, cellData) {
        if (typeof props2[eventPropsName] === "function") {
          var options = {
            cell: _objectSpread$K(_objectSpread$K({}, cellData), controller.options.value),
            e: e
          };
          props2[eventPropsName](options);
        }
      };
      var clickCell = function clickCell(e, cellData) {
        state.curDate = dayjs(cellData.date);
        cellClickEmit("onCellClick", e, cellData);
      };
      var doubleClickCell = function doubleClickCell(e, cellData) {
        cellClickEmit("onCellDoubleClick", e, cellData);
      };
      var rightClickCell = function rightClickCell(e, cellData) {
        if (props2.preventCellContextmenu) {
          e.preventDefault();
        }
        cellClickEmit("onCellRightClick", e, cellData);
      };
      var monthCellsData = vue.computed(function () {
        var daysArr = createMonthCellsData(state.curSelectedYear, state.curSelectedMonth, state.realFirstDayOfWeek, state.curDate, props2.format);
        return daysArr;
      });
      var renderMonthBody = function renderMonthBody() {
        return vue.createVNode("table", {
          "class": cls.table.value
        }, [vue.createVNode("thead", {
          "class": cls.tableHead.value
        }, [vue.createVNode("tr", {
          "class": cls.tableHeadRow.value
        }, [cellColHeaders.value.map(function (item, index) {
          return checkDayVisibled(item.num) && vue.createVNode("th", {
            "class": cls.tableHeadCell.value
          }, [Array.isArray(props2.week) ? props2.week[index] : renderContent("week", void 0, {
            defaultNode: vue.createVNode("span", null, [item.display]),
            params: {
              day: item.num
            }
          })]);
        })])]), vue.createVNode("tbody", {
          "class": cls.tableBody.value
        }, [monthCellsData.value.map(function (week, weekIndex) {
          return vue.createVNode("tr", {
            "class": cls.tableBodyRow.value
          }, [week.map(function (item, itemIndex) {
            return (state.isShowWeekend || item.day < 6) && vue.createVNode(CalendarCellItem, {
              "key": "d-".concat(weekIndex, "-").concat(itemIndex),
              "item": item,
              "theme": props2.theme,
              "t": t,
              "global": globalConfig.value,
              "cell": props2.cell,
              "cellAppend": props2.cellAppend,
              "fillWithZero": props2.fillWithZero,
              "onClick": function onClick(e) {
                return clickCell(e, item);
              },
              "onDblclick": function onDblclick(e) {
                return doubleClickCell(e, item);
              },
              "onRightclick": function onRightclick(e) {
                return rightClickCell(e, item);
              }
            }, _objectSpread$K({}, slots));
          })]);
        })])]);
      };
      var yearCellsData = vue.computed(function () {
        var re = [];
        var monthsArr = createYearCellsData(state.curSelectedYear, state.curDate, props2.format);
        var rowCount = Math.ceil(monthsArr.length / DEFAULT_YEAR_CELL_NUMINROW);
        var index = 0;
        for (var i = 1; i <= rowCount; i++) {
          var row = [];
          for (var j = 1; j <= DEFAULT_YEAR_CELL_NUMINROW; j++) {
            row.push(monthsArr[index]);
            index += 1;
          }
          re.push(row);
        }
        return re;
      });
      var renderYearBody = function renderYearBody() {
        return vue.createVNode("table", {
          "class": cls.table.value
        }, [vue.createVNode("tbody", {
          "class": cls.tableBody.value
        }, [yearCellsData.value.map(function (cell, cellIndex) {
          return vue.createVNode("tr", {
            "class": cls.tableBodyRow.value
          }, [cell.map(function (item, itemIndex) {
            return vue.createVNode(CalendarCellItem, {
              "key": "m-".concat(cellIndex, "-").concat(itemIndex),
              "item": item,
              "theme": props2.theme,
              "t": t,
              "global": globalConfig.value,
              "cell": props2.cell,
              "cellAppend": props2.cellAppend,
              "fillWithZero": props2.fillWithZero,
              "onClick": function onClick(e) {
                return clickCell(e, item);
              },
              "onDblclick": function onDblclick(e) {
                return doubleClickCell(e, item);
              },
              "onRightclick": function onRightclick(e) {
                return rightClickCell(e, item);
              }
            }, _objectSpread$K({}, slots));
          })]);
        })])]);
      };
      return function () {
        return vue.createVNode("div", {
          "class": cls.body.value
        }, [controller.visible.value && renderControl(), vue.createVNode("div", {
          "class": cls.panel.value
        }, [state.curSelectedMode === "month" ? renderMonthBody() : renderYearBody()])]);
      };
    }
  });

  var Calendar = withInstall(_Calendar);

  var props$j = {
    actions: {
      type: [String, Function]
    },
    avatar: {
      type: [String, Function]
    },
    bordered: {
      type: Boolean,
      "default": true
    },
    content: {
      type: [String, Function]
    },
    cover: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    description: {
      type: [String, Function]
    },
    footer: {
      type: [String, Function]
    },
    header: {
      type: [String, Function]
    },
    headerBordered: Boolean,
    hoverShadow: Boolean,
    loading: {
      type: [Boolean, Function],
      "default": false
    },
    shadow: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["medium", "small"].includes(val);
      }
    },
    status: {
      type: String,
      "default": ""
    },
    subtitle: {
      type: [String, Function]
    },
    theme: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "poster1", "poster2"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    }
  };

  function _isSlot$a(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _Card = vue.defineComponent({
    name: "TCard",
    props: props$j,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("card");
      var _useCommonClassName = useCommonClassName$2(),
        SIZE = _useCommonClassName.SIZE;
      var baseCls = vue.computed(function () {
        var defaultClass = [COMPONENT_NAME.value];
        if (props2.size === "small") defaultClass.push("".concat(SIZE.value[props2.size]));
        if (props2.bordered) defaultClass.push("".concat(COMPONENT_NAME.value, "--bordered"));
        if (props2.shadow) defaultClass.push("".concat(COMPONENT_NAME.value, "--shadow"));
        if (props2.hoverShadow) defaultClass.push("".concat(COMPONENT_NAME.value, "--shadow-hover"));
        return defaultClass;
      });
      var headerCls = vue.computed(function () {
        var defaultClass = ["".concat(COMPONENT_NAME.value, "__header")];
        return props2.headerBordered ? defaultClass.concat("".concat(COMPONENT_NAME.value, "__title--bordered")) : ["".concat(COMPONENT_NAME.value, "__header")];
      });
      var headerWrapperCls = usePrefixClass("card__header-wrapper");
      var headerAvatarCls = usePrefixClass("card__avatar");
      var headerTitleCls = usePrefixClass("card__title");
      var headerSubTitleCls = usePrefixClass("card__subtitle");
      var headerDescriptionCls = usePrefixClass("card__description");
      var actionsCls = usePrefixClass("card__actions");
      var bodyCls = usePrefixClass("card__body");
      var coverCls = usePrefixClass("card__cover");
      var footerCls = usePrefixClass("card__footer");
      var footerWrapperCls = usePrefixClass("card__footer-wrapper");
      var isPoster2 = vue.computed(function () {
        return props2.theme === "poster2";
      });
      var showTitle = vue.computed(function () {
        return props2.title || slots.title;
      });
      var showHeader = vue.computed(function () {
        return props2.header || slots.header;
      });
      var showSubtitle = vue.computed(function () {
        return props2.subtitle || slots.subtitle;
      });
      var showAvatar = vue.computed(function () {
        return props2.avatar || slots.avatar;
      });
      var showDescription = vue.computed(function () {
        return props2.description || slots.description;
      });
      var showStatus = vue.computed(function () {
        return props2.status || slots.status;
      });
      var showActions = vue.computed(function () {
        return props2.actions || slots.actions;
      });
      var showFooter = vue.computed(function () {
        return props2.footer || slots.footer;
      });
      var showCover = vue.computed(function () {
        return props2.cover || slots.cover;
      });
      var showLoading = vue.computed(function () {
        return props2.loading || slots.loading;
      });
      var showContent = vue.computed(function () {
        return props2.content || slots.content || props2["default"] || slots["default"];
      });
      var isHeaderRender = vue.computed(function () {
        return showHeader.value || showTitle.value || showSubtitle.value || showDescription.value || showAvatar.value || showStatus.value && isPoster2.value || showActions.value && !isPoster2.value;
      });
      var isFooterRender = vue.computed(function () {
        return showFooter.value || showActions.value && isPoster2.value;
      });
      var renderHeader = function renderHeader() {
        if (showHeader.value) return vue.createVNode("div", {
          "class": headerCls.value
        }, [renderTNodeJSX("header")]);
        return vue.createVNode("div", {
          "class": headerCls.value
        }, [vue.createVNode("div", {
          "class": headerWrapperCls.value
        }, [showAvatar.value && vue.createVNode("div", {
          "class": headerAvatarCls.value
        }, [renderTNodeJSX("avatar")]), vue.createVNode("div", null, [showTitle.value && vue.createVNode("span", {
          "class": headerTitleCls.value
        }, [renderTNodeJSX("title")]), showSubtitle.value && vue.createVNode("span", {
          "class": headerSubTitleCls.value
        }, [renderTNodeJSX("subtitle")]), showDescription.value && vue.createVNode("p", {
          "class": headerDescriptionCls.value
        }, [renderTNodeJSX("description")])])]), showActions.value && !isPoster2.value && vue.createVNode("div", {
          "class": actionsCls.value
        }, [renderTNodeJSX("actions")]), showStatus.value && vue.createVNode("div", {
          "class": actionsCls.value
        }, [renderTNodeJSX("status")])]);
      };
      var renderCover = function renderCover() {
        var textCover = typeof props2.cover === "string";
        return vue.createVNode("div", {
          "class": coverCls.value
        }, [textCover ? vue.createVNode("img", {
          "src": props2.cover
        }, null) : renderTNodeJSX("cover")]);
      };
      return function () {
        var content = vue.createVNode("div", {
          "class": baseCls.value
        }, [isHeaderRender.value ? renderHeader() : null, showCover.value ? renderCover() : null, showContent.value && vue.createVNode("div", {
          "class": bodyCls.value
        }, [renderTNodeJSX("default") || renderTNodeJSX("content")]), isFooterRender.value && vue.createVNode("div", {
          "class": footerCls.value
        }, [vue.createVNode("div", {
          "class": footerWrapperCls.value
        }, [renderTNodeJSX("footer")]), showActions.value && isPoster2.value && vue.createVNode("div", {
          "class": actionsCls.value
        }, [renderTNodeJSX("actions")])])]);
        if (showLoading.value) {
          return renderTNodeJSX("loading") || vue.createVNode(Loading, null, _isSlot$a(content) ? content : {
            "default": function _default() {
              return [content];
            }
          });
        }
        return content;
      };
    }
  });

  var Card = withInstall(_Card);

  var props$i = {
    actions: {
      type: Array
    },
    author: {
      type: [String, Function]
    },
    avatar: {
      type: [String, Object, Function]
    },
    content: {
      type: [String, Function]
    },
    datetime: {
      type: [String, Function]
    },
    quote: {
      type: [String, Function]
    },
    reply: {
      type: [String, Function]
    }
  };

  function _isSlot$9(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _Comment = vue.defineComponent({
    name: "TComment",
    props: props$i,
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("comment");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        var reply = renderTNodeJSX("reply");
        var author = renderTNodeJSX("author");
        var datetime = renderTNodeJSX("datetime");
        var quote = renderTNodeJSX("quote");
        var actions = renderTNodeJSX("actions");
        var content = renderTNodeJSX("content");
        var avatar = renderTNodeJSX("avatar");
        var showAuthorDatetime = vue.computed(function () {
          return author || datetime;
        });
        var replyDom = reply ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__reply")
        }, [reply]) : null;
        var quoteDom = quote ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__quote")
        }, [quote]) : null;
        var avatarDom = avatar ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__avatar")
        }, [typeof avatar === "string" ? vue.createVNode("img", {
          "src": avatar,
          "alt": "",
          "class": "".concat(COMPONENT_NAME.value, "__avatar-image")
        }, null) : avatar]) : null;
        var authorDatetimeDom = showAuthorDatetime.value && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__author")
        }, [author && vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__name")
        }, [author]), datetime && vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__time")
        }, [datetime])]);
        var renderActions = function renderActions() {
          if (!actions || !actions.length) return null;
          return vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__actions")
          }, [(Array.isArray(actions) ? actions : [actions]).map(function (action, index) {
            return vue.createVNode(Button, {
              "key": "action-".concat(index),
              "size": "small",
              "variant": "text"
            }, _isSlot$9(action) ? action : {
              "default": function _default() {
                return [action];
              }
            });
          })]);
        };
        var contentDom = vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [authorDatetimeDom, vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__detail")
        }, [content]), quoteDom, renderActions()]);
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, [avatarDom, contentDom]), replyDom]);
      };
    }
  });

  var Comment$1 = withInstall(_Comment);

  function observe(element, root, callback, marginBottom) {
    if (!window || !window.IntersectionObserver) {
      callback();
      return null;
    }
    var io = null;
    try {
      io = new window.IntersectionObserver(function (entries) {
        var entry = entries[0];
        if (entry.isIntersecting) {
          callback();
          io.unobserve(element);
        }
      }, {
        rootMargin: "0px 0px ".concat(marginBottom, "px 0px"),
        root: root
      });
      io.observe(element);
    } catch (e) {
      console.error(e);
      callback();
    }
    return io;
  }

  var props$h = {
    alt: {
      type: String,
      "default": ""
    },
    disabled: Boolean,
    error: {
      type: Object
    },
    fit: {
      type: String,
      "default": "fill",
      validator: function validator(val) {
        if (!val) return true;
        return ["contain", "cover", "fill", "none", "scale-down"].includes(val);
      }
    },
    gallery: Boolean,
    lazy: Boolean,
    loading: {
      type: Object
    },
    overlayContent: {
      type: Object
    },
    overlayTrigger: {
      type: String,
      "default": "always",
      validator: function validator(val) {
        if (!val) return true;
        return ["always", "hover"].includes(val);
      }
    },
    placeholder: {
      type: Object
    },
    position: {
      type: String,
      "default": "center"
    },
    shape: {
      type: String,
      "default": "square",
      validator: function validator(val) {
        if (!val) return true;
        return ["circle", "round", "square"].includes(val);
      }
    },
    src: {
      type: String,
      "default": ""
    },
    onError: Function,
    onLoad: Function
  };

  var _Image = vue.defineComponent({
    name: "TImage",
    props: props$h,
    setup: function setup(props2) {
      var imageRef = vue.ref(null);
      var io = null;
      vue.onMounted(function () {
        if (!props2.lazy || !imageRef.value) return;
        var ioObserver = observe(imageRef.value, null, handleLoadImage, 0);
        io = ioObserver;
      });
      vue.onUnmounted(function () {
        imageRef.value && io && io.unobserve(imageRef.value);
      });
      var _useConfig = useConfig(),
        classPrefix = _useConfig.classPrefix;
      var shouldLoad = vue.ref(!props2.lazy);
      var handleLoadImage = function handleLoadImage() {
        shouldLoad.value = true;
      };
      var isLoaded = vue.ref(false);
      var handleLoad = function handleLoad() {
        var _props2$onLoad;
        isLoaded.value = true;
        (_props2$onLoad = props2.onLoad) === null || _props2$onLoad === void 0 ? void 0 : _props2$onLoad.call(props2);
      };
      var hasError = vue.ref(false);
      var handleError = function handleError() {
        var _props2$onError;
        hasError.value = true;
        (_props2$onError = props2.onError) === null || _props2$onError === void 0 ? void 0 : _props2$onError.call(props2);
      };
      var hasMouseEvent = vue.computed(function () {
        return props2.overlayTrigger === "hover";
      });
      var shouldShowOverlay = vue.ref(!hasMouseEvent.value);
      var handleToggleOverlay = function handleToggleOverlay() {
        if (hasMouseEvent.value) {
          shouldShowOverlay.value = !shouldShowOverlay.value;
        }
      };
      var renderPlaceholder = function renderPlaceholder() {
        if (!props2.placeholder) {
          return null;
        }
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image__placeholder")
        }, [props2.placeholder]);
      };
      var renderGalleryShadow = function renderGalleryShadow() {
        if (!props2.gallery) return null;
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image__gallery-shadow")
        }, null);
      };
      var renderOverlay = function renderOverlay() {
        if (!props2.overlayContent) return null;
        return vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-image__overlay-content"), !shouldShowOverlay.value && "".concat(classPrefix.value, "-image__overlay-content--hidden")]
        }, [props2.overlayContent]);
      };
      var renderTNodDefault = useTNodeDefault();
      return function () {
        return vue.createVNode("div", vue.mergeProps({
          "ref": imageRef,
          "class": ["".concat(classPrefix.value, "-image__wrapper"), "".concat(classPrefix.value, "-image__wrapper--shape-").concat(props2.shape), props2.gallery && "".concat(classPrefix.value, "-image__wrapper--gallery"), hasMouseEvent.value && "".concat(classPrefix.value, "-image__wrapper--need-hover")],
          "onMouseenter": handleToggleOverlay,
          "onMouseleave": handleToggleOverlay
        }, omit_1(props2, ["src", "alt", "fit", "position", "shape", "placeholder", "loading", "error", "overlayTrigger", "overlayContent", "lazy", "gallery", "onLoad", "onError"])), [renderPlaceholder(), renderGalleryShadow(), (hasError.value || !shouldLoad.value) && vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image")
        }, null), !(hasError.value || !shouldLoad.value) && vue.createVNode("img", {
          "src": props2.src,
          "onError": handleError,
          "onLoad": handleLoad,
          "class": ["".concat(classPrefix.value, "-image"), "".concat(classPrefix.value, "-image--fit-").concat(props2.fit), "".concat(classPrefix.value, "-image--position-").concat(props2.position)],
          "alt": props2.alt
        }, null), !(hasError.value || !shouldLoad.value) && !isLoaded.value && vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image__loading")
        }, [props2.loading || vue.createVNode("div", {
          "direction": "vertical",
          "size": 8,
          "align": "center"
        }, ["\u56FE\u7247\u52A0\u8F7D\u4E2D"])]), hasError.value && vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image__error")
        }, [renderTNodDefault("error", vue.createVNode("div", {
          "direction": "vertical",
          "size": 8,
          "align": "center"
        }, ["\u56FE\u7247\u65E0\u6CD5\u663E\u793A"]))]), renderOverlay()]);
      };
    }
  });

  var Image$1 = withInstall(_Image);

  var props$g = {
    closeBtn: {
      type: [Boolean, Function],
      "default": true
    },
    closeOnOverlay: Boolean,
    draggable: {
      type: Boolean,
      "default": void 0
    },
    imageScale: {
      type: Object
    },
    images: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    index: {
      type: Number,
      "default": void 0
    },
    defaultIndex: {
      type: Number
    },
    mode: {
      type: String,
      "default": "modal",
      validator: function validator(val) {
        if (!val) return true;
        return ["modal", "modeless"].includes(val);
      }
    },
    navigationArrow: {
      type: [Boolean, Function],
      "default": true
    },
    showOverlay: {
      type: Boolean,
      "default": void 0
    },
    title: {
      type: [String, Function]
    },
    trigger: {
      type: [String, Function]
    },
    viewerScale: {
      type: Object
    },
    visible: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultVisible: Boolean,
    zIndex: {
      type: Number
    },
    onClose: Function,
    onIndexChange: Function
  };

  var TImageViewerIcon = vue.defineComponent({
    name: "TImageModalIcon",
    props: {
      disabled: Boolean,
      onClick: Function,
      label: String,
      icon: Function
    },
    setup: function setup(props) {
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var wrapClass = vue.computed(function () {
        return ["".concat(classPrefix.value, "-image-viewer__modal-icon"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-disabled"), props.disabled)];
      });
      return function () {
        return vue.createVNode("div", {
          "class": wrapClass.value,
          "onClick": props.onClick
        }, [renderTNodeJSX("icon"), props.label && vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-image-viewer__modal-icon-label")
        }, [props.label])]);
      };
    }
  });

  function ownKeys$K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$K(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var downloadFile = function downloadFile(imgSrc) {
    var _imgSrc$split;
    var image = new Image();
    var name = (imgSrc === null || imgSrc === void 0 ? void 0 : (_imgSrc$split = imgSrc.split) === null || _imgSrc$split === void 0 ? void 0 : _imgSrc$split.call(imgSrc, "/").pop()) || Math.random().toString(32).slice(2);
    image.setAttribute("crossOrigin", "anonymous");
    image.onload = function () {
      var canvas = document.createElement("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      var context = canvas.getContext("2d");
      context.drawImage(image, 0, 0, image.width, image.height);
      canvas.toBlob(function (blob) {
        var url = URL.createObjectURL(blob);
        var a = document.createElement("a");
        a.download = name;
        a.href = url;
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      });
    };
    image.src = imgSrc;
  };
  var isImageInfo = function isImageInfo(image) {
    return typeof image !== "string";
  };
  var formatImages = function formatImages(images) {
    if (!Array.isArray(images)) return [];
    return images.map(function (item) {
      if (isImageInfo(item)) {
        return _objectSpread$J({
          download: true,
          thumbnail: item.mainImage
        }, item);
      }
      return {
        mainImage: item,
        thumbnail: item,
        download: true
      };
    });
  };
  var getOverlay = function getOverlay(props) {
    if (props.showOverlay !== void 0) {
      return props.showOverlay;
    }
    return props.mode === "modal";
  };

  var TImageViewerUtils = vue.defineComponent({
    name: "TImageViewerUtils",
    props: {
      scale: Number,
      onRotate: Function,
      onZoomIn: Function,
      onZoomOut: Function,
      onMirror: Function,
      onReset: Function,
      currentImage: {
        type: Object,
        "default": function _default() {
          return {};
        }
      }
    },
    setup: function setup(props) {
      var classPrefix = usePrefixClass();
      return function () {
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__utils")
        }, [vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__utils-content")
        }, [vue.createVNode(Tooltip, {
          "overlayClassName": "".concat(classPrefix.value, "-image-viewer__utils--tip"),
          "content": "\u955C\u50CF",
          "destroyOnClose": true,
          "placement": "top",
          "showArrow": true,
          "theme": "default"
        }, {
          "default": function _default() {
            return [vue.createVNode(TImageViewerIcon, {
              "onClick": props.onMirror,
              "icon": function icon() {
                return vue.createVNode(mirror, {
                  "size": "medium"
                }, null);
              }
            }, null)];
          }
        }), vue.createVNode(Tooltip, {
          "overlayClassName": "".concat(classPrefix.value, "-image-viewer__utils--tip"),
          "content": "\u65CB\u8F6C",
          "destroyOnClose": true,
          "placement": "top",
          "showArrow": true,
          "theme": "default"
        }, {
          "default": function _default() {
            return [vue.createVNode(TImageViewerIcon, {
              "onClick": props.onRotate,
              "icon": function icon() {
                return vue.createVNode(rotation, {
                  "size": "medium"
                }, null);
              }
            }, null)];
          }
        }), vue.createVNode(TImageViewerIcon, {
          "icon": function icon() {
            return vue.createVNode(zoomOut, {
              "size": "medium"
            }, null);
          },
          "onClick": props.onZoomOut
        }, null), vue.createVNode(TImageViewerIcon, {
          "class": "".concat(classPrefix.value, "-image-viewer__utils-scale"),
          "size": "medium",
          "label": "".concat(props.scale * 100, "%")
        }, null), vue.createVNode(TImageViewerIcon, {
          "icon": function icon() {
            return vue.createVNode(zoomIn, {
              "size": "medium"
            }, null);
          },
          "onClick": props.onZoomIn
        }, null), vue.createVNode(Tooltip, {
          "overlayClassName": "".concat(classPrefix.value, "-image-viewer__utils--tip"),
          "content": "\u539F\u59CB\u5927\u5C0F",
          "destroyOnClose": true,
          "placement": "top",
          "showArrow": true,
          "theme": "default"
        }, {
          "default": function _default() {
            return [vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-image-viewer__modal-icon")
            }, [vue.createVNode(TImageViewerIcon, {
              "icon": function icon() {
                return vue.createVNode(image, {
                  "size": "medium"
                }, null);
              },
              "onClick": props.onReset
            }, null)])];
          }
        }), props.currentImage.download && vue.createVNode(TImageViewerIcon, {
          "icon": function icon() {
            return vue.createVNode(download, {
              "size": "medium"
            }, null);
          },
          "onClick": function onClick() {
            downloadFile(props.currentImage.mainImage);
          }
        }, null)])]);
      };
    }
  });

  function ownKeys$J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$J(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useDrag$2(initTransform) {
    var transform = vue.ref(initTransform);
    var mouseDownHandler = function mouseDownHandler(e) {
      var startX = e.pageX,
        startY = e.pageY;
      var _transform$value = transform.value,
        translateX = _transform$value.translateX,
        translateY = _transform$value.translateY;
      var mouseMoveHandler = function mouseMoveHandler(e2) {
        var pageX = e2.pageX,
          pageY = e2.pageY;
        transform.value = {
          translateX: translateX + pageX - startX,
          translateY: translateY + pageY - startY
        };
      };
      var mouseUpHandler = function mouseUpHandler() {
        document.removeEventListener("mousemove", mouseMoveHandler);
        document.removeEventListener("mouseup", mouseUpHandler);
      };
      document.addEventListener("mousemove", mouseMoveHandler);
      document.addEventListener("mouseup", mouseUpHandler);
    };
    var resetTransform = function resetTransform() {
      transform.value = _objectSpread$I({}, initTransform);
    };
    return {
      transform: transform,
      mouseDownHandler: mouseDownHandler,
      resetTransform: resetTransform
    };
  }
  function useMirror() {
    var mirror = vue.ref(1);
    var onMirror = function onMirror() {
      mirror.value *= -1;
    };
    var resetMirror = function resetMirror() {
      mirror.value = 1;
    };
    return {
      mirror: mirror,
      onMirror: onMirror,
      resetMirror: resetMirror
    };
  }
  function useScale() {
    var imageScale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      max: 2,
      min: 0.5,
      step: 0.5
    };
    var max = imageScale.max,
      min = imageScale.min,
      step = imageScale.step;
    var scale = vue.ref(1);
    var onZoomIn = function onZoomIn() {
      setScale(scale.value + step);
    };
    var onZoomOut = function onZoomOut() {
      setScale(scale.value - step);
    };
    var resetScale = function resetScale() {
      scale.value = 1;
    };
    var setScale = function setScale(newScale) {
      var value = newScale;
      if (newScale < min) {
        value = min;
      }
      if (newScale > max) {
        value = max;
      }
      scale.value = value;
    };
    return {
      scale: scale,
      onZoomIn: onZoomIn,
      onZoomOut: onZoomOut,
      resetScale: resetScale
    };
  }
  function useRotate() {
    var rotate = vue.ref(0);
    var ROTATE_DEG = 90;
    var onRotate = function onRotate() {
      rotate.value += ROTATE_DEG;
    };
    var resetRotate = function resetRotate() {
      rotate.value = 0;
    };
    return {
      rotate: rotate,
      onRotate: onRotate,
      resetRotate: resetRotate
    };
  }

  var TImageItem = vue.defineComponent({
    name: "TImageItem",
    props: {
      rotate: Number,
      scale: Number,
      mirror: Number,
      src: String,
      placementSrc: String
    },
    setup: function setup(props) {
      var classPrefix = usePrefixClass();
      var error = vue.ref(false);
      var loaded = vue.ref(false);
      var _useDrag = useDrag$2({
          translateX: 0,
          translateY: 0
        }),
        transform = _useDrag.transform,
        mouseDownHandler = _useDrag.mouseDownHandler;
      var imgStyle = vue.computed(function () {
        return {
          transform: "rotate(".concat(props.rotate, "deg) scale(").concat(props.scale, ")"),
          display: !props.placementSrc || loaded.value ? "block" : "none"
        };
      });
      var placementImgStyle = vue.computed(function () {
        return {
          transform: "rotate(".concat(props.rotate, "deg) scale(").concat(props.scale, ")"),
          display: !loaded.value ? "block" : "none"
        };
      });
      var boxStyle = vue.computed(function () {
        var _transform$value = transform.value,
          translateX = _transform$value.translateX,
          translateY = _transform$value.translateY;
        return {
          transform: "translate(".concat(translateX, "px, ").concat(translateY, "px) scale(").concat(props.mirror, ", 1)")
        };
      });
      var resetStatus = function resetStatus() {
        error.value = false;
        loaded.value = false;
      };
      vue.watch(function () {
        return props.src;
      }, function () {
        resetStatus();
      });
      return function () {
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__modal-pic")
        }, [vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__modal-box"),
          "style": boxStyle.value
        }, [error.value && vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__img-error")
        }, [vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__img-error-content")
        }, [vue.createVNode(imageError, {
          "size": "4em"
        }, null), vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__img-error-text")
        }, ["\u56FE\u7247\u52A0\u8F7D\u5931\u8D25\uFF0C\u53EF\u5C1D\u8BD5\u91CD\u65B0\u52A0\u8F7D"])])]), !error.value && !!props.placementSrc && vue.createVNode("img", {
          "class": "".concat(classPrefix.value, "-image-viewer__modal-image"),
          "onMousedown": function onMousedown(event) {
            event.stopPropagation();
            mouseDownHandler(event);
          },
          "src": props.placementSrc,
          "style": placementImgStyle.value,
          "alt": "image",
          "draggable": "false"
        }, null), !error.value && vue.createVNode("img", {
          "class": "".concat(classPrefix.value, "-image-viewer__modal-image"),
          "onMousedown": function onMousedown(event) {
            event.stopPropagation();
            mouseDownHandler(event);
          },
          "src": props.src,
          "onLoad": function onLoad() {
            return loaded.value = true;
          },
          "onError": function onError() {
            return error.value = true;
          },
          "style": imgStyle.value,
          "alt": "image",
          "draggable": "false"
        }, null)])]);
      };
    }
  });

  var props$f = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    body: {
      type: [String, Function],
      "default": ""
    },
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    closeBtn: {
      type: [String, Boolean, Function],
      "default": true
    },
    closeOnEscKeydown: {
      type: Boolean,
      "default": void 0
    },
    closeOnOverlayClick: {
      type: Boolean,
      "default": void 0
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    confirmOnEnter: Boolean,
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    draggable: Boolean,
    footer: {
      type: [Boolean, Function],
      "default": true
    },
    header: {
      type: [String, Boolean, Function],
      "default": true
    },
    mode: {
      type: String,
      "default": "modal",
      validator: function validator(val) {
        if (!val) return true;
        return ["modal", "modeless", "normal", "full-screen"].includes(val);
      }
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "center"].includes(val);
      }
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showInAttachedElement: Boolean,
    showOverlay: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "info", "warning", "danger", "success"].includes(val);
      }
    },
    top: {
      type: [String, Number]
    },
    visible: Boolean,
    width: {
      type: [String, Number]
    },
    zIndex: {
      type: Number
    },
    onCancel: Function,
    onClose: Function,
    onCloseBtnClick: Function,
    onClosed: Function,
    onConfirm: Function,
    onEscKeydown: Function,
    onOpened: Function,
    onOverlayClick: Function
  };

  function ownKeys$I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$I(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useAction(action) {
    var instance = vue.getCurrentInstance();
    var renderTNodeJSX = useTNodeJSX();
    var getDefaultConfirmBtnProps = function getDefaultConfirmBtnProps(options) {
      var globalConfirm = options.globalConfirm,
        theme = options.theme,
        globalConfirmBtnTheme = options.globalConfirmBtnTheme;
      var defaultTheme = (globalConfirmBtnTheme === null || globalConfirmBtnTheme === void 0 ? void 0 : globalConfirmBtnTheme[theme]) || "primary";
      var props = {
        theme: defaultTheme,
        size: options.size,
        onClick: function onClick(e) {
          action.confirmBtnAction(e);
        }
      };
      if (isString_1(globalConfirm)) {
        props.content = globalConfirm;
      } else if (isObject_1(globalConfirm)) {
        props = _objectSpread$H(_objectSpread$H({}, props), globalConfirm);
      }
      return props;
    };
    var getDefaultCancelBtnProps = function getDefaultCancelBtnProps(options) {
      var globalCancel = options.globalCancel;
      var props = {
        theme: "default",
        size: options.size,
        onClick: function onClick(e) {
          action.cancelBtnAction(e);
        }
      };
      if (isString_1(globalCancel)) {
        props.content = globalCancel;
      } else if (isObject_1(globalCancel)) {
        props = _objectSpread$H(_objectSpread$H({}, props), globalCancel);
      }
      return props;
    };
    var getButtonByProps = function getButtonByProps(button, defaultButton, className) {
      var newOptions = defaultButton;
      if (isString_1(button)) {
        newOptions.content = button;
      } else if (isObject_1(button)) {
        newOptions = _objectSpread$H(_objectSpread$H({}, newOptions), button);
      }
      return vue.createVNode(Button, vue.mergeProps({
        "class": className
      }, newOptions), null);
    };
    var getConfirmBtn = function getConfirmBtn(options) {
      var confirmBtn = options.confirmBtn,
        className = options.className;
      if (confirmBtn === null) return null;
      if (confirmBtn && instance.slots.confirmBtn) {
        console.warn("Both $props.confirmBtn and $scopedSlots.confirmBtn exist, $props.confirmBtn is preferred.");
      }
      var defaultButtonProps = getDefaultConfirmBtnProps(options);
      if (!confirmBtn && !instance.slots.confirmBtn) {
        return vue.createVNode(Button, vue.mergeProps({
          "class": className
        }, defaultButtonProps), null);
      }
      if (confirmBtn && ["string", "object"].includes(_typeof$2(confirmBtn))) {
        return getButtonByProps(confirmBtn, defaultButtonProps, className);
      }
      return renderTNodeJSX("confirmBtn");
    };
    var getCancelBtn = function getCancelBtn(options) {
      var cancelBtn = options.cancelBtn,
        className = options.className;
      if (cancelBtn === null) return null;
      if (cancelBtn && instance.slots.cancelBtn) {
        console.warn("Both $props.cancelBtn and $scopedSlots.cancelBtn exist, $props.cancelBtn is preferred.");
      }
      var defaultButtonProps = getDefaultCancelBtnProps(options);
      if (!cancelBtn && !instance.slots.cancelBtn) {
        return vue.createVNode(Button, vue.mergeProps({
          "class": className
        }, defaultButtonProps), null);
      }
      if (cancelBtn && ["string", "object"].includes(_typeof$2(cancelBtn))) {
        return getButtonByProps(cancelBtn, defaultButtonProps);
      }
      return renderTNodeJSX("cancelBtn");
    };
    return {
      getConfirmBtn: getConfirmBtn,
      getCancelBtn: getCancelBtn
    };
  }
  function useSameTarget(handleClick) {
    var MOUSEDOWN_TARGET = false;
    var MOUSEUP_TARGET = false;
    var onClick = function onClick(e) {
      if (MOUSEDOWN_TARGET && MOUSEUP_TARGET) {
        handleClick(e);
      }
      MOUSEDOWN_TARGET = false;
      MOUSEUP_TARGET = false;
    };
    var onMousedown = function onMousedown(e) {
      MOUSEDOWN_TARGET = e.target === e.currentTarget;
    };
    var onMouseup = function onMouseup(e) {
      MOUSEUP_TARGET = e.target === e.currentTarget;
    };
    return {
      onClick: onClick,
      onMousedown: onMousedown,
      onMouseup: onMouseup
    };
  }

  var data = [];
  var push = function push(value) {
    data.push(value);
  };
  var pop = function pop() {
    data.pop();
  };
  var stack = {
    push: push,
    pop: pop,
    get top() {
      return data[data.length - 1];
    }
  };

  function GetCSSValue(v) {
    return Number.isNaN(Number(v)) ? v : "".concat(Number(v), "px");
  }
  var mousePosition;
  var getClickPosition = function getClickPosition(e) {
    mousePosition = {
      x: e.clientX,
      y: e.clientY
    };
    setTimeout(function () {
      mousePosition = null;
    }, 100);
  };
  if (typeof window !== "undefined" && window.document && window.document.documentElement) {
    document.documentElement.addEventListener("click", getClickPosition, true);
  }
  function InitDragEvent(dragBox) {
    var target = dragBox;
    var windowInnerWidth = window.innerWidth || document.documentElement.clientWidth;
    var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;
    target.addEventListener("mousedown", function (targetEvent) {
      var disX = targetEvent.clientX - target.offsetLeft;
      var disY = targetEvent.clientY - target.offsetTop;
      var dialogW = target.offsetWidth;
      var dialogH = target.offsetHeight;
      if (dialogW > windowInnerWidth || dialogH > windowInnerHeight) return;
      function mouseMoverHandler(documentEvent) {
        var left = documentEvent.clientX - disX;
        var top = documentEvent.clientY - disY;
        if (left < 0) left = 0;
        if (top < 0) top = 0;
        if (windowInnerWidth - target.offsetWidth - left < 0) left = windowInnerWidth - target.offsetWidth;
        if (windowInnerHeight - target.offsetHeight - top < 0) top = windowInnerHeight - target.offsetHeight;
        target.style.position = "absolute";
        target.style.left = "".concat(left, "px");
        target.style.top = "".concat(top, "px");
      }
      function mouseUpHandler() {
        document.removeEventListener("mousemove", mouseMoverHandler);
        document.removeEventListener("mouseup", mouseUpHandler);
      }
      document.addEventListener("mousemove", mouseMoverHandler);
      document.addEventListener("mouseup", mouseUpHandler);
      document.addEventListener("dragend", mouseUpHandler);
    });
  }
  var _Dialog = vue.defineComponent({
    name: "TDialog",
    directives: {
      TransferDom: TransferDom,
      draggable: function draggable(el, binding) {
        if (el && binding && binding.value) {
          InitDragEvent(el);
        }
      }
    },
    props: props$f,
    emits: ["update:visible"],
    setup: function setup(props2, context) {
      var _this = this;
      var COMPONENT_NAME = usePrefixClass("dialog");
      var LOCK_CLASS = usePrefixClass("dialog--lock");
      var classPrefix = usePrefixClass();
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var dialogEle = vue.ref(null);
      var _useConfig = useConfig("dialog"),
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          CloseIcon: close,
          InfoCircleFilledIcon: infoCircleFilled,
          CheckCircleFilledIcon: checkCircleFilled,
          ErrorCircleFilledIcon: errorCircleFilled
        }),
        CloseIcon = _useGlobalIcon.CloseIcon,
        InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
      var confirmBtnAction = function confirmBtnAction(e) {
        var _props2$onConfirm;
        (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
          e: e
        });
      };
      var cancelBtnAction = function cancelBtnAction(e) {
        var _props2$onCancel;
        (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
          e: e
        });
        emitCloseEvent({
          e: e,
          trigger: "cancel"
        });
      };
      var _useAction = useAction({
          confirmBtnAction: confirmBtnAction,
          cancelBtnAction: cancelBtnAction
        }),
        getConfirmBtn = _useAction.getConfirmBtn,
        getCancelBtn = _useAction.getCancelBtn;
      useDestroyOnClose();
      var scrollWidth = vue.ref(0);
      var isModal = vue.computed(function () {
        return props2.mode === "modal";
      });
      var isModeLess = vue.computed(function () {
        return props2.mode === "modeless";
      });
      var isNormal = vue.computed(function () {
        return props2.mode === "normal";
      });
      var isFullScreen = vue.computed(function () {
        return props2.mode === "full-screen";
      });
      var maskClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__mask"), !props2.showOverlay && "".concat(classPrefix.value, "-is-hidden")];
      });
      var positionClass = vue.computed(function () {
        if (isNormal.value) return [];
        if (isFullScreen.value) return ["".concat(COMPONENT_NAME.value, "__position_fullscreen")];
        return ["".concat(COMPONENT_NAME.value, "__position"), !!props2.top && "".concat(COMPONENT_NAME.value, "--top"), "".concat(props2.placement && !props2.top ? "".concat(COMPONENT_NAME.value, "--").concat(props2.placement) : "")];
      });
      var wrapClass = vue.computed(function () {
        return [!isNormal.value && "".concat(COMPONENT_NAME.value, "__wrap")];
      });
      var positionStyle = vue.computed(function () {
        if (isFullScreen.value) return {};
        var top = props2.top;
        var topStyle = {};
        if (top !== void 0) {
          var topValue = GetCSSValue(top);
          topStyle = {
            paddingTop: topValue
          };
        }
        return topStyle;
      });
      var dialogClass = vue.computed(function () {
        var dialogClass2 = ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "__modal-").concat(props2.theme), isModeLess.value && props2.draggable && "".concat(COMPONENT_NAME.value, "--draggable")];
        if (isFullScreen.value) {
          dialogClass2.push("".concat(COMPONENT_NAME.value, "__fullscreen"));
        } else {
          dialogClass2.push.apply(dialogClass2, ["".concat(COMPONENT_NAME.value, "--default"), "".concat(COMPONENT_NAME.value, "--").concat(props2.placement)]);
        }
        return dialogClass2;
      });
      var dialogStyle = vue.computed(function () {
        return !isFullScreen.value ? {
          width: GetCSSValue(props2.width)
        } : {};
      });
      vue.watch(function () {
        return props2.visible;
      }, function (value) {
        if (value) {
          if (isModal.value && !props2.showInAttachedElement || isFullScreen.value) {
            if (scrollWidth.value > 0 && props2.preventScrollThrough) {
              var bodyCssText = "position: relative;width: calc(100% - ".concat(scrollWidth.value, "px);");
              document.body.style.cssText = bodyCssText;
            }
            props2.preventScrollThrough && addClass(document.body, LOCK_CLASS.value);
            vue.nextTick(function () {
              if (mousePosition && dialogEle.value) {
                dialogEle.value.style.transformOrigin = "".concat(mousePosition.x - dialogEle.value.offsetLeft, "px ").concat(mousePosition.y - dialogEle.value.offsetTop, "px");
              }
              document.activeElement.blur();
            });
          }
        } else {
          document.body.style.cssText = "";
          removeClass(document.body, LOCK_CLASS.value);
        }
        storeUid(value);
        addKeyboardEvent(value);
      });
      var instance = vue.getCurrentInstance();
      var storeUid = function storeUid(flag) {
        if (flag) {
          stack.push(instance.uid);
        } else {
          stack.pop();
        }
      };
      var addKeyboardEvent = function addKeyboardEvent(status) {
        if (status) {
          document.addEventListener("keydown", keyboardEvent);
          props2.confirmOnEnter && document.addEventListener("keydown", keyboardEnterEvent);
        } else {
          document.removeEventListener("keydown", keyboardEvent);
          props2.confirmOnEnter && document.removeEventListener("keydown", keyboardEnterEvent);
        }
      };
      var keyboardEnterEvent = function keyboardEnterEvent(e) {
        var code = e.code;
        if ((code === "Enter" || code === "NumpadEnter") && stack.top === instance.uid) {
          var _props2$onConfirm2;
          (_props2$onConfirm2 = props2.onConfirm) === null || _props2$onConfirm2 === void 0 ? void 0 : _props2$onConfirm2.call(props2, {
            e: e
          });
        }
      };
      var keyboardEvent = function keyboardEvent(e) {
        if (e.code === "Escape" && stack.top === instance.uid) {
          var _props2$onEscKeydown, _props2$closeOnEscKey;
          (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 ? void 0 : _props2$onEscKeydown.call(props2, {
            e: e
          });
          if ((_props2$closeOnEscKey = props2.closeOnEscKeydown) !== null && _props2$closeOnEscKey !== void 0 ? _props2$closeOnEscKey : globalConfig.value.closeOnEscKeydown) {
            emitCloseEvent({
              e: e,
              trigger: "esc"
            });
          }
        }
      };
      var overlayAction = function overlayAction(e) {
        var _props2$closeOnOverla;
        if (props2.showOverlay && ((_props2$closeOnOverla = props2.closeOnOverlayClick) !== null && _props2$closeOnOverla !== void 0 ? _props2$closeOnOverla : globalConfig.value.closeOnOverlayClick)) {
          var _props2$onOverlayClic;
          (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 ? void 0 : _props2$onOverlayClic.call(props2, {
            e: e
          });
          emitCloseEvent({
            e: e,
            trigger: "overlay"
          });
        }
      };
      var _useSameTarget = useSameTarget(overlayAction),
        onClick = _useSameTarget.onClick,
        onMousedown = _useSameTarget.onMousedown,
        onMouseup = _useSameTarget.onMouseup;
      var closeBtnAction = function closeBtnAction(e) {
        var _props2$onCloseBtnCli;
        (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
          e: e
        });
        emitCloseEvent({
          trigger: "close-btn",
          e: e
        });
      };
      var afterEnter = function afterEnter() {
        var _props2$onOpened;
        (_props2$onOpened = props2.onOpened) === null || _props2$onOpened === void 0 ? void 0 : _props2$onOpened.call(props2);
      };
      var afterLeave = function afterLeave() {
        var _props2$onClosed;
        if (isModeLess.value && props2.draggable) {
          dialogEle.value.style.position = "relative";
          dialogEle.value.style.left = "unset";
          dialogEle.value.style.top = "unset";
        }
        (_props2$onClosed = props2.onClosed) === null || _props2$onClosed === void 0 ? void 0 : _props2$onClosed.call(props2);
      };
      var emitCloseEvent = function emitCloseEvent(ctx) {
        var _props2$onClose;
        (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, ctx);
        context.emit("update:visible", false);
      };
      var hasEventOn = function hasEventOn(name) {
        var _this$_events;
        var eventFuncs = (_this$_events = _this["_events"]) === null || _this$_events === void 0 ? void 0 : _this$_events[name];
        return !!(eventFuncs !== null && eventFuncs !== void 0 && eventFuncs.length);
      };
      var getIcon = function getIcon() {
        var icon = {
          info: vue.createVNode(InfoCircleFilledIcon, {
            "class": "".concat(classPrefix.value, "-is-info")
          }, null),
          warning: vue.createVNode(ErrorCircleFilledIcon, {
            "class": "".concat(classPrefix.value, "-is-warning")
          }, null),
          danger: vue.createVNode(ErrorCircleFilledIcon, {
            "class": "".concat(classPrefix.value, "-is-error")
          }, null),
          success: vue.createVNode(CheckCircleFilledIcon, {
            "class": "".concat(classPrefix.value, "-is-success")
          }, null)
        };
        return icon[props2.theme];
      };
      var renderDialog = function renderDialog() {
        var defaultHeader = vue.createVNode("h5", {
          "class": "title"
        }, null);
        var defaultCloseBtn = vue.createVNode(CloseIcon, null, null);
        var body = renderContent("default", "body");
        var defaultFooter = vue.createVNode("div", null, [getCancelBtn({
          cancelBtn: props2.cancelBtn,
          globalCancel: globalConfig.value.cancel,
          className: "".concat(COMPONENT_NAME.value, "__cancel")
        }), getConfirmBtn({
          theme: props2.theme,
          confirmBtn: props2.confirmBtn,
          globalConfirm: globalConfig.value.confirm,
          globalConfirmBtnTheme: globalConfig.value.confirmBtnTheme,
          className: "".concat(COMPONENT_NAME.value, "__confirm")
        })]);
        var headerClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__header"), "".concat(COMPONENT_NAME.value, "__header--fullscreen")] : "".concat(COMPONENT_NAME.value, "__header");
        var closeClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__close"), "".concat(COMPONENT_NAME.value, "__close--fullscreen")] : "".concat(COMPONENT_NAME.value, "__close");
        var bodyClassName = props2.theme === "default" ? ["".concat(COMPONENT_NAME.value, "__body")] : ["".concat(COMPONENT_NAME.value, "__body__icon")];
        isFullScreen.value && bodyClassName.push("".concat(COMPONENT_NAME.value, "__body--fullscreen"));
        var footerClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__footer"), "".concat(COMPONENT_NAME.value, "__footer--fullscreen")] : "".concat(COMPONENT_NAME.value, "__footer");
        var footerContent = renderTNodeJSX("footer", defaultFooter);
        var onStopDown = function onStopDown(e) {
          if (isModeLess.value && props2.draggable) e.stopPropagation();
        };
        return vue.createVNode("div", {
          "class": wrapClass.value
        }, [vue.createVNode("div", {
          "class": positionClass.value,
          "style": positionStyle.value,
          "onClick": onClick,
          "onMousedown": onMousedown,
          "onMouseup": onMouseup
        }, [vue.withDirectives(vue.createVNode("div", {
          "key": "dialog",
          "class": dialogClass.value,
          "style": dialogStyle.value,
          "ref": dialogEle
        }, [vue.createVNode("div", {
          "class": headerClassName,
          "onmousedown": onStopDown
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header-content")
        }, [getIcon(), renderTNodeJSX("header", defaultHeader)]), props2.closeBtn ? vue.createVNode("span", {
          "class": closeClassName,
          "onClick": closeBtnAction
        }, [renderTNodeJSX("closeBtn", defaultCloseBtn)]) : null]), vue.createVNode("div", {
          "class": bodyClassName,
          "onmousedown": onStopDown
        }, [body]), footerContent && vue.createVNode("div", {
          "class": footerClassName,
          "onmousedown": onStopDown
        }, [footerContent])]), [[vue.resolveDirective("draggable"), isModeLess.value && props2.draggable]])])]);
      };
      vue.onMounted(function () {
        scrollWidth.value = window.innerWidth - document.body.offsetWidth;
      });
      vue.onBeforeUnmount(function () {
        addKeyboardEvent(false);
      });
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        scrollWidth: scrollWidth,
        isModal: isModal,
        isModeLess: isModeLess,
        isFullScreen: isFullScreen,
        maskClass: maskClass,
        dialogClass: dialogClass,
        dialogStyle: dialogStyle,
        dialogEle: dialogEle,
        afterEnter: afterEnter,
        afterLeave: afterLeave,
        hasEventOn: hasEventOn,
        renderDialog: renderDialog
      };
    },
    render: function render() {
      var _ref,
        _this2 = this;
      var COMPONENT_NAME = this.COMPONENT_NAME;
      var maskView = (this.isModal || this.isFullScreen) && vue.createVNode("div", {
        "key": "mask",
        "class": this.maskClass
      }, null);
      var dialogView = this.renderDialog();
      var view = [maskView, dialogView];
      var ctxStyle = {
        zIndex: this.zIndex
      };
      var ctxClass = ["".concat(COMPONENT_NAME, "__ctx"), (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "__ctx--fixed"), this.isModal || this.isFullScreen), _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "__ctx--absolute"), this.isModal && this.showInAttachedElement), _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "__ctx--modeless"), this.isModeLess), _ref)];
      return vue.createVNode(vue.Transition, {
        "duration": 300,
        "name": "".concat(COMPONENT_NAME, "-zoom__vue"),
        "onAfterEnter": this.afterEnter,
        "onAfterLeave": this.afterLeave
      }, {
        "default": function _default() {
          return [(!_this2.destroyOnClose || _this2.visible) && vue.withDirectives(vue.createVNode("div", {
            "class": ctxClass,
            "style": ctxStyle
          }, [view]), [[vue.vShow, _this2.visible], [vue.resolveDirective("transfer-dom"), _this2.attach]])];
        }
      });
    }
  });

  function ownKeys$H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$H(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var createDialog = function createDialog(props) {
    var options = _objectSpread$G({}, props);
    var wrapper = document.createElement("div");
    var visible = vue.ref(false);
    var className = options.className;
    var component = vue.defineComponent({
      setup: function setup(props2, _ref) {
        var expose = _ref.expose;
        var dialogOptions = vue.ref(options);
        vue.onMounted(function () {
          visible.value = true;
          document.activeElement.blur();
        });
        var update = function update(newOptions) {
          dialogOptions.value = _objectSpread$G(_objectSpread$G({}, options), newOptions);
        };
        expose({
          update: update
        });
        return function () {
          var onClose = options.onClose || function () {
            visible.value = false;
          };
          delete options.className;
          return vue.h(_Dialog, _objectSpread$G({
            onClose: onClose,
            visible: visible.value
          }, dialogOptions.value));
        };
      }
    });
    var dialog = vue.createApp(component).mount(wrapper);
    if (className) {
      className.split(" ").forEach(function (name) {
        dialog.$el.classList.add(name.trim());
      });
    }
    if (options.style) {
      dialog.$el.style.cssText += options.style;
    }
    var container = getAttach(options.attach);
    if (container) {
      container.appendChild(wrapper);
    } else {
      console.error("attach is not exist");
    }
    var dialogNode = {
      show: function show() {
        visible.value = true;
      },
      hide: function hide() {
        visible.value = false;
      },
      update: function update(newOptions) {
        dialog.update(newOptions);
      },
      destroy: function destroy() {
        visible.value = false;
        setTimeout(function () {
          wrapper.parentNode.removeChild(wrapper);
        }, 300);
      }
    };
    return dialogNode;
  };
  var confirm = function confirm(props) {
    return createDialog(props);
  };
  var alert = function alert(props) {
    var options = _objectSpread$G({}, props);
    options.cancelBtn = null;
    return createDialog(options);
  };
  var extraApi$1 = {
    confirm: confirm,
    alert: alert
  };
  var DialogPlugin = createDialog;
  DialogPlugin.install = function (app) {
    app.config.globalProperties.$dialog = createDialog;
    Object.keys(extraApi$1).forEach(function (funcName) {
      app.config.globalProperties.$dialog[funcName] = extraApi$1[funcName];
    });
  };
  Object.keys(extraApi$1).forEach(function (funcName) {
    DialogPlugin[funcName] = extraApi$1[funcName];
  });

  var Dialog = withInstall(_Dialog);

  var TImageViewerModal = vue.defineComponent({
    name: "TImageViewerModal",
    props: {
      zIndex: Number,
      visible: Boolean,
      index: Number,
      images: props$g.images,
      scale: Number,
      rotate: Number,
      mirror: Number,
      title: props$g.title,
      currentImage: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      onRotate: Function,
      onZoomIn: Function,
      onZoomOut: Function,
      onMirror: Function,
      onReset: Function,
      onClose: props$g.onClose,
      draggable: {
        type: Boolean,
        "default": true
      },
      viewerScale: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      showOverlay: Boolean,
      closeBtn: props$g.closeBtn
    },
    setup: function setup(props2) {
      var classPrefix = usePrefixClass();
      var renderJSX = useTNodeJSX();
      var style = vue.computed(function () {
        return {
          minWidth: props2.viewerScale.minWidth,
          minHeight: props2.viewerScale.minHeight
        };
      });
      return function () {
        return vue.createVNode(Dialog, {
          "destroyOnClose": true,
          "attach": "body",
          "onClose": props2.onClose,
          "visible": props2.visible,
          "placement": "center",
          "mode": "modeless",
          "width": 1e3,
          "cancelBtn": null,
          "confirmBtn": null,
          "draggable": props2.draggable,
          "zIndex": props2.zIndex,
          "showOverlay": props2.showOverlay,
          "class": "".concat(classPrefix.value, "-image-viewer__dialog"),
          "header": renderJSX("title", ""),
          "footer": function footer() {
            return vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-image-viewer-mini__footer")
            }, [vue.createVNode(TImageViewerUtils, {
              "onZoomIn": props2.onZoomIn,
              "onZoomOut": props2.onZoomOut,
              "scale": props2.scale,
              "currentImage": props2.currentImage,
              "onRotate": props2.onRotate,
              "onMirror": props2.onMirror,
              "onReset": props2.onReset
            }, null)]);
          }
        }, {
          "default": function _default() {
            return [vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-image-viewer-mini__content"),
              "style": style.value
            }, [vue.createVNode(TImageItem, {
              "rotate": props2.rotate,
              "scale": props2.scale,
              "mirror": props2.mirror,
              "src": props2.currentImage.mainImage,
              "placementSrc": props2.currentImage.thumbnail
            }, null)])];
          }
        });
      };
    }
  });

  var EVENT_CODE = /* @__PURE__ */function (EVENT_CODE2) {
    EVENT_CODE2["left"] = "ArrowLeft";
    EVENT_CODE2["up"] = "ArrowUp";
    EVENT_CODE2["right"] = "ArrowRight";
    EVENT_CODE2["down"] = "ArrowDown";
    EVENT_CODE2["esc"] = "Escape";
    return EVENT_CODE2;
  }(EVENT_CODE || {});

  function ownKeys$G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$G(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _ImageViewer = vue.defineComponent({
    name: "TImageViewer",
    props: _objectSpread$F({}, props$g),
    setup: function setup(props2) {
      var _props2$defaultIndex;
      var classPrefix = usePrefixClass();
      var COMPONENT_NAME = usePrefixClass("image-viewer");
      var renderTNodeJSX = useTNodeJSX();
      var isExpand = vue.ref(true);
      var showOverlayValue = vue.computed(function () {
        return getOverlay(props2);
      });
      var _toRefs = vue.toRefs(props2),
        index = _toRefs.index,
        visible = _toRefs.visible,
        modelValue = _toRefs.modelValue;
      var _useDefaultValue = useDefaultValue(index, (_props2$defaultIndex = props2.defaultIndex) !== null && _props2$defaultIndex !== void 0 ? _props2$defaultIndex : 0, props2.onIndexChange, "index"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        indexValue = _useDefaultValue2[0],
        setIndexValue = _useDefaultValue2[1];
      var _useVModel = useVModel(visible, modelValue, props2.defaultVisible, function () {}, "visible"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        visibleValue = _useVModel2[0],
        setVisibleValue = _useVModel2[1];
      var wrapClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "-preview-image"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-hide"), !visibleValue.value)];
      });
      var headerClass = vue.computed(function () {
        return ["".concat(classPrefix.value, "-image-viewer__modal-header"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-show"), isExpand.value)];
      });
      var zIndexValue = vue.computed(function () {
        var _props2$zIndex;
        return (_props2$zIndex = props2.zIndex) !== null && _props2$zIndex !== void 0 ? _props2$zIndex : 2e3;
      });
      var toggleExpand = function toggleExpand() {
        isExpand.value = !isExpand.value;
      };
      var _useMirror = useMirror(),
        mirror = _useMirror.mirror,
        onMirror = _useMirror.onMirror,
        resetMirror = _useMirror.resetMirror;
      var _useScale = useScale(props2.imageScale),
        scale = _useScale.scale,
        onZoomIn = _useScale.onZoomIn,
        onZoomOut = _useScale.onZoomOut,
        resetScale = _useScale.resetScale;
      var _useRotate = useRotate(),
        rotate = _useRotate.rotate,
        onRotate = _useRotate.onRotate,
        resetRotate = _useRotate.resetRotate;
      var onRest = function onRest() {
        resetMirror();
        resetScale();
        resetRotate();
      };
      var images = vue.computed(function () {
        return formatImages(props2.images);
      });
      var currentImage = vue.computed(function () {
        var _images$value$indexVa;
        return (_images$value$indexVa = images.value[indexValue.value]) !== null && _images$value$indexVa !== void 0 ? _images$value$indexVa : {
          mainImage: ""
        };
      });
      var prevImage = function prevImage() {
        var newIndex = indexValue.value - 1;
        setIndexValue(newIndex < 0 ? 0 : newIndex, {
          trigger: "prev"
        });
      };
      var nextImage = function nextImage() {
        var newIndex = indexValue.value + 1;
        setIndexValue(newIndex >= images.value.length ? indexValue.value : newIndex, {
          trigger: "next"
        });
      };
      var onImgClick = function onImgClick(i) {
        setIndexValue(i);
      };
      var openHandler = function openHandler() {
        setVisibleValue(true);
      };
      var onClose = function onClose(ctx) {
        var _props2$onClose;
        setVisibleValue(false, ctx);
        (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, ctx);
      };
      var closeBtnAction = function closeBtnAction(e) {
        onClose({
          e: e,
          trigger: "close-btn"
        });
      };
      var clickOverlayHandler = function clickOverlayHandler(e) {
        if (props2.closeOnOverlay) {
          onClose({
            e: e,
            trigger: "overlay"
          });
        }
      };
      var keydownHandler = function keydownHandler(e) {
        switch (e.code) {
          case EVENT_CODE.left:
            prevImage();
            break;
          case EVENT_CODE.right:
            nextImage();
            break;
          case EVENT_CODE.up:
            onZoomIn();
            break;
          case EVENT_CODE.down:
            onZoomOut();
            break;
          case EVENT_CODE.esc:
            onClose({
              e: e,
              trigger: "esc"
            });
            break;
        }
      };
      vue.watch(function () {
        return visibleValue.value;
      }, function (val) {
        if (val) {
          window.addEventListener("keydown", keydownHandler);
          return;
        }
        window.removeEventListener("keydown", keydownHandler);
      });
      var onWheel = function onWheel(e) {
        e.preventDefault();
        var deltaY = e.deltaY,
          ctrlKey = e.ctrlKey;
        if (ctrlKey) {
          return deltaY > 0 ? onZoomOut() : onZoomIn();
        }
        deltaY > 0 ? onZoomIn() : onZoomOut();
      };
      var transStyle = vue.computed(function () {
        return {
          transform: "translateX(calc(-".concat(indexValue.value, " * (40px / 9 * 16 + 4px)))")
        };
      });
      var renderHeader = function renderHeader() {
        return vue.createVNode("div", {
          "class": headerClass.value
        }, [vue.createVNode(TImageViewerIcon, {
          "icon": function icon() {
            return vue.createVNode(chevronDown, null, null);
          },
          "class": "".concat(COMPONENT_NAME.value, "__header-pre-bt"),
          "onClick": toggleExpand
        }, null), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header-prev")
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header-trans"),
          "style": transStyle.value
        }, [images.value.map(function (image, index2) {
          return vue.createVNode("div", {
            "key": index2,
            "class": ["".concat(COMPONENT_NAME.value, "__header-box"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-active"), index2 === indexValue.value)]
          }, [vue.createVNode("img", {
            "alt": "",
            "src": image.thumbnail || image.mainImage,
            "className": "".concat(COMPONENT_NAME.value, "__header-img"),
            "onClick": function onClick() {
              return onImgClick(index2);
            }
          }, null)]);
        })])])]);
      };
      var renderNavigationArrow = function renderNavigationArrow(type) {
        var rotateDeg = type === "prev" ? 0 : 180;
        var _icon = renderTNodeJSX("navigationArrow", vue.createVNode(chevronLeft, {
          "style": {
            transform: "rotate(".concat(rotateDeg, "deg)")
          },
          "size": "24px"
        }, null));
        return vue.createVNode(TImageViewerIcon, {
          "class": "".concat(COMPONENT_NAME.value, "__modal-").concat(type, "-bt"),
          "onClick": type === "prev" ? prevImage : nextImage,
          "icon": function icon() {
            return _icon;
          }
        }, null);
      };
      return function () {
        if (props2.mode === "modeless") {
          return vue.createVNode(vue.Fragment, null, [renderTNodeJSX("trigger", {
            params: {
              open: openHandler
            }
          }), vue.createVNode(TImageViewerModal, {
            "zIndex": zIndexValue.value,
            "visible": visibleValue.value,
            "index": indexValue.value,
            "images": images.value,
            "scale": scale.value,
            "rotate": rotate.value,
            "mirror": mirror.value,
            "currentImage": currentImage.value,
            "onRotate": onRotate,
            "onZoomIn": onZoomIn,
            "onZoomOut": onZoomOut,
            "onMirror": onMirror,
            "onReset": onRest,
            "onClose": onClose,
            "draggable": props2.draggable,
            "showOverlay": showOverlayValue.value,
            "title": props2.title
          }, null)]);
        }
        return vue.createVNode(vue.Fragment, null, [renderTNodeJSX("trigger", {
          params: {
            open: openHandler
          }
        }), vue.createVNode(vue.Teleport, {
          "to": "body"
        }, {
          "default": function _default() {
            return [visibleValue.value && vue.createVNode("div", {
              "class": wrapClass.value,
              "style": {
                zIndex: zIndexValue.value
              },
              "onWheel": onWheel
            }, [!!showOverlayValue.value && vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME.value, "__modal-mask"),
              "onClick": clickOverlayHandler
            }, null), images.value.length > 1 && vue.createVNode(vue.Fragment, null, [renderHeader(), vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME.value, "__modal-index")
            }, [props2.title && renderTNodeJSX("title"), "".concat(indexValue.value + 1, "/").concat(images.value.length)]), renderNavigationArrow("prev"), renderNavigationArrow("next")]), vue.createVNode("div", {
              "class": ["".concat(COMPONENT_NAME.value, "__modal-icon"), "".concat(COMPONENT_NAME.value, "__modal-close-bt")],
              "onClick": closeBtnAction
            }, [renderTNodeJSX("closeBtn", vue.createVNode(close, {
              "size": "24px"
            }, null))]), vue.createVNode(TImageViewerUtils, {
              "onZoomIn": onZoomIn,
              "onZoomOut": onZoomOut,
              "onMirror": onMirror,
              "onReset": onRest,
              "onRotate": onRotate,
              "scale": scale.value,
              "currentImage": currentImage.value
            }, null), vue.createVNode(TImageItem, {
              "scale": scale.value,
              "rotate": rotate.value,
              "mirror": mirror.value,
              "src": currentImage.value.mainImage,
              "placementSrc": currentImage.value.thumbnail
            }, null)])];
          }
        })]);
      };
    }
  });

  var ImageViewer = withInstall(_ImageViewer);

  var props$e = {
    asyncLoading: {
      type: [String, Function]
    },
    footer: {
      type: [String, Function]
    },
    header: {
      type: [String, Function]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    split: Boolean,
    stripe: Boolean,
    onLoadMore: Function,
    onScroll: Function
  };

  var LOAD_MORE = "load-more";
  var LOADING = "loading";

  function ownKeys$F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$F(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _List = vue.defineComponent({
    name: "TList",
    props: _objectSpread$E({}, props$e),
    setup: function setup(props2) {
      var _useConfig = useConfig("list"),
        globalConfig = _useConfig.globalConfig;
      var COMPONENT_NAME = usePrefixClass("list");
      var _useCommonClassName = useCommonClassName$2(),
        SIZE = _useCommonClassName.SIZE;
      var renderTNodeJSX = useTNodeJSX();
      var listClass = vue.computed(function () {
        var _ref;
        return ["".concat(COMPONENT_NAME.value), SIZE.value[props2.size], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--split"), props2.split), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--stripe"), props2.stripe), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--vertical-action"), props2.layout === "vertical"), _ref)];
      });
      var renderContent = function renderContent() {
        var propsHeaderContent = renderTNodeJSX("header");
        var propsFooterContent = renderTNodeJSX("footer");
        return [propsHeaderContent && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header")
        }, [propsHeaderContent]), vue.createVNode("ul", {
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, [renderTNodeJSX("default")]), propsFooterContent && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__footer")
        }, [propsFooterContent])];
      };
      var handleScroll = function handleScroll(e) {
        var _props2$onScroll;
        var listElement = e.target;
        var scrollTop = listElement.scrollTop,
          scrollHeight = listElement.scrollHeight,
          clientHeight = listElement.clientHeight;
        (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 ? void 0 : _props2$onScroll.call(props2, {
          e: e,
          scrollTop: scrollTop,
          scrollBottom: scrollHeight - clientHeight - scrollTop
        });
      };
      var loadingClass = vue.computed(function () {
        return typeof props2.asyncLoading === "string" && ["loading", "load-more"].includes(props2.asyncLoading) ? "".concat(COMPONENT_NAME.value, "__load ").concat(COMPONENT_NAME.value, "__load--").concat(props2.asyncLoading) : "".concat(COMPONENT_NAME.value, "__load");
      });
      var renderLoading = function renderLoading() {
        if (props2.asyncLoading && typeof props2.asyncLoading === "string") {
          if (props2.asyncLoading === LOADING) {
            return vue.createVNode("div", null, [vue.createVNode(Loading, null, null), vue.createVNode("span", null, [globalConfig.value.loadingText])]);
          }
          if (props2.asyncLoading === LOAD_MORE) {
            return vue.createVNode("span", null, [globalConfig.value.loadingMoreText]);
          }
        }
        return renderTNodeJSX("asyncLoading");
      };
      var handleLoadMore = function handleLoadMore(e) {
        var _props2$onLoadMore;
        if (typeof props2.asyncLoading === "string" && props2.asyncLoading !== LOAD_MORE) return;
        (_props2$onLoadMore = props2.onLoadMore) === null || _props2$onLoadMore === void 0 ? void 0 : _props2$onLoadMore.call(props2, {
          e: e
        });
      };
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        listClass: listClass,
        loadingClass: loadingClass,
        renderLoading: renderLoading,
        renderContent: renderContent,
        handleScroll: handleScroll,
        handleLoadMore: handleLoadMore
      };
    },
    render: function render() {
      var listContent = this.renderContent();
      listContent = [listContent, vue.createVNode("div", {
        "class": this.loadingClass,
        "onClick": this.handleLoadMore
      }, [this.renderLoading()])];
      return vue.createVNode("div", {
        "class": this.listClass,
        "onScroll": this.handleScroll
      }, [listContent]);
    }
  });

  var _ListItem = vue.defineComponent({
    name: "TListItem",
    props: props$e,
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("list-item");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        var propsContent = renderTNodeJSX("content");
        var propsDefaultContent = renderTNodeJSX("default");
        var propsActionContent = renderTNodeJSX("action");
        return vue.createVNode("li", {
          "class": COMPONENT_NAME.value
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-main")
        }, [propsDefaultContent || propsContent, propsActionContent && vue.createVNode("li", {
          "class": "".concat(COMPONENT_NAME.value, "__action")
        }, [propsActionContent])])]);
      };
    }
  });

  var props$d = {
    avatar: {
      type: [String, Function]
    },
    description: {
      type: [String, Function]
    },
    image: {
      type: [String, Function]
    },
    title: {
      type: [String, Function]
    }
  };

  var _ListItemMeta = vue.defineComponent({
    name: "TListItemMeta",
    props: props$d,
    setup: function setup(props2, ctx) {
      var COMPONENT_NAME = usePrefixClass("list-item__meta");
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var renderAvatar = function renderAvatar() {
        if (props2.avatar || ctx.slots.avatar) {
          console.warn("`avatar` is going to be deprecated, please use `image` instead");
        }
        var thumbnail = renderContent("avatar", "image");
        if (!thumbnail) return;
        if (typeof thumbnail === "string") {
          return vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "-avatar")
          }, [vue.createVNode("img", {
            "src": thumbnail
          }, null)]);
        }
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-avatar")
        }, [thumbnail]);
      };
      return function () {
        var propsTitleContent = renderTNodeJSX("title");
        var propsDescriptionContent = renderTNodeJSX("description");
        var listItemMetaContent = [renderAvatar(), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-content")
        }, [propsTitleContent && vue.createVNode("h3", {
          "class": "".concat(COMPONENT_NAME.value, "-title")
        }, [propsTitleContent]), propsDescriptionContent && vue.createVNode("p", {
          "class": "".concat(COMPONENT_NAME.value, "-description")
        }, [propsDescriptionContent])])];
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [listItemMetaContent]);
      };
    }
  });

  var List = withInstall(_List);
  var ListItem = withInstall(_ListItem);
  var ListItemMeta = withInstall(_ListItemMeta);

  var PRO_THEME = {
    LINE: "line",
    PLUMP: "plump",
    CIRCLE: "circle"
  };
  var CIRCLE_SIZE = {
    SMALL: "small",
    MEDIUM: "medium",
    LARGE: "large"
  };
  var CIRCLE_SIZE_PX = {
    SMALL: 72,
    MEDIUM: 112,
    LARGE: 160
  };
  var CIRCLE_FONT_SIZE_RATIO = {
    SMALL: 14 / CIRCLE_SIZE_PX.SMALL,
    MEDIUM: 20 / CIRCLE_SIZE_PX.MEDIUM,
    LARGE: 36 / CIRCLE_SIZE_PX.LARGE
  };
  var STATUS_ICON = ["success", "error", "warning"];

  var props$c = {
    color: {
      type: [String, Object, Array],
      "default": ""
    },
    label: {
      type: [String, Boolean, Function],
      "default": true
    },
    percentage: {
      type: Number,
      "default": 0
    },
    size: {
      type: [String, Number],
      "default": "medium"
    },
    status: {
      type: String,
      validator: function validator(val) {
        return ["success", "error", "warning", "active"].includes(val);
      }
    },
    strokeWidth: {
      type: [String, Number]
    },
    theme: {
      type: String,
      "default": "line",
      validator: function validator(val) {
        return ["line", "plump", "circle"].includes(val);
      }
    },
    trackColor: {
      type: String,
      "default": ""
    }
  };

  var _Progress = vue.defineComponent({
    name: "TProgress",
    props: props$c,
    setup: function setup(props2) {
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("progress");
      var _useGlobalIcon = useGlobalIcon({
          CloseCircleFilledIcon: closeCircleFilled,
          CheckCircleFilledIcon: checkCircleFilled,
          ErrorCircleFilledIcon: errorCircleFilled,
          CloseIcon: close,
          CheckIcon: check,
          ErrorIcon: error
        }),
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
        CloseIcon = _useGlobalIcon.CloseIcon,
        CheckIcon = _useGlobalIcon.CheckIcon,
        ErrorIcon = _useGlobalIcon.ErrorIcon;
      var statusStyle = vue.computed(function () {
        if (props2.percentage >= 100) {
          return "success";
        }
        return props2.status || "default";
      });
      var trackBgStyle = vue.computed(function () {
        var style = {};
        if (props2.strokeWidth) {
          var height = typeof props2.strokeWidth === "string" ? props2.strokeWidth : "".concat(props2.strokeWidth, "px");
          style.height = height;
          style.borderRadius = height;
        }
        if (props2.trackColor) {
          style.backgroundColor = props2.trackColor;
        }
        return style;
      });
      var barStyle = vue.computed(function () {
        return {
          width: "".concat(props2.percentage, "%"),
          background: props2.color && getBackgroundColor(props2.color)
        };
      });
      var circlePathStyle = vue.computed(function () {
        var strokeColor = _typeof$2(props2.color) === "object" ? "" : props2.color;
        return {
          stroke: strokeColor
        };
      });
      var diameter = vue.computed(function () {
        var diameter2 = CIRCLE_SIZE_PX.MEDIUM;
        if (!props2.size) {
          return diameter2;
        }
        var SMALL = CIRCLE_SIZE.SMALL,
          LARGE = CIRCLE_SIZE.LARGE,
          MEDIUM = CIRCLE_SIZE.MEDIUM;
        switch (props2.size) {
          case SMALL:
            diameter2 = CIRCLE_SIZE_PX.SMALL;
            break;
          case MEDIUM:
            diameter2 = CIRCLE_SIZE_PX.MEDIUM;
            break;
          case LARGE:
            diameter2 = CIRCLE_SIZE_PX.LARGE;
            break;
          default:
            diameter2 = Number(props2.size);
            break;
        }
        return diameter2;
      });
      var rPoints = vue.computed(function () {
        return diameter.value / 2;
      });
      var radius = vue.computed(function () {
        return rPoints.value - circleStrokeWidth.value / 2;
      });
      var circleStyle = vue.computed(function () {
        if (props2.theme !== PRO_THEME.CIRCLE) {
          return {};
        }
        var fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.MEDIUM;
        if (diameter.value <= CIRCLE_SIZE_PX.SMALL) {
          fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.SMALL;
        } else if (diameter.value >= CIRCLE_SIZE_PX.LARGE) {
          fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.LARGE;
        }
        return {
          width: "".concat(diameter.value, "px"),
          height: "".concat(diameter.value, "px"),
          fontSize: "".concat(fontSize, "px")
        };
      });
      var circleStrokeWidth = vue.computed(function () {
        var defaultWidth = props2.size === CIRCLE_SIZE.SMALL ? 4 : 6;
        return props2.strokeWidth ? Number(props2.strokeWidth) : defaultWidth;
      });
      var strokeDashArr = vue.computed(function () {
        var radius2 = (diameter.value - circleStrokeWidth.value) / 2;
        var perimeter = Math.PI * 2 * radius2;
        var percent = props2.percentage / 100;
        return "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
      });
      var getIconMap = function getIconMap() {
        var CIRCLE_ICONS = {
          success: CheckIcon,
          warning: ErrorIcon,
          error: CloseIcon
        };
        var NORMAL_ICONS = {
          success: CheckCircleFilledIcon,
          warning: ErrorCircleFilledIcon,
          error: CloseCircleFilledIcon
        };
        return props2.theme === PRO_THEME.CIRCLE ? CIRCLE_ICONS : NORMAL_ICONS;
      };
      var getLabelContent = function getLabelContent() {
        var labelContent = "".concat(props2.percentage, "%");
        var status = props2.status || "";
        if (STATUS_ICON.includes(status) && props2.theme !== PRO_THEME.PLUMP) {
          var components = getIconMap();
          var component = components[status];
          if (component) {
            labelContent = vue.createVNode(component, {
              "class": ["".concat(COMPONENT_NAME.value, "__icon")]
            }, null);
          }
        }
        return labelContent;
      };
      return function () {
        var labelContent = vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__info")
        }, [renderTNodeJSX("label", getLabelContent())]);
        var PLUMP_SEPARATE = 10;
        var separateClasses = props2.percentage > PLUMP_SEPARATE ? "".concat(COMPONENT_NAME.value, "--over-ten") : "".concat(COMPONENT_NAME.value, "--under-ten");
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [props2.theme === PRO_THEME.LINE && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "--thin ").concat(COMPONENT_NAME.value, "--status--").concat(statusStyle.value)
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__bar"),
          "style": trackBgStyle.value
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner"),
          "style": barStyle.value
        }, null)]), labelContent]), props2.theme === PRO_THEME.PLUMP && vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__bar ").concat(COMPONENT_NAME.value, "--plump ").concat(separateClasses), _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--status--").concat(statusStyle.value), statusStyle.value)],
          "style": trackBgStyle.value
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner"),
          "style": barStyle.value
        }, [props2.percentage > PLUMP_SEPARATE && labelContent]), props2.percentage <= PLUMP_SEPARATE && labelContent]), props2.theme === PRO_THEME.CIRCLE && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "--circle ").concat(COMPONENT_NAME.value, "--status--").concat(statusStyle.value),
          "style": circleStyle.value
        }, [labelContent, vue.createVNode("svg", {
          "width": diameter.value,
          "height": diameter.value,
          "viewBox": "0 0 ".concat(diameter.value, " ").concat(diameter.value)
        }, [vue.createVNode("circle", {
          "cx": rPoints.value,
          "cy": rPoints.value,
          "r": radius.value,
          "stroke-width": circleStrokeWidth.value,
          "stroke": props2.trackColor,
          "fill": "none",
          "class": ["".concat(COMPONENT_NAME.value, "__circle-outer")]
        }, null), props2.percentage > 0 && vue.createVNode("circle", {
          "cx": rPoints.value,
          "cy": rPoints.value,
          "r": radius.value,
          "stroke-width": circleStrokeWidth.value,
          "fill": "none",
          "stroke-linecap": "round",
          "class": ["".concat(COMPONENT_NAME.value, "__circle-inner")],
          "transform": "matrix(0,-1,1,0,0,".concat(diameter.value, ")"),
          "stroke-dasharray": strokeDashArr.value,
          "style": circlePathStyle.value
        }, null)])])]);
      };
    }
  });

  var Progress = withInstall(_Progress);

  var props$b = {
    animation: {
      type: String,
      "default": "none",
      validator: function validator(val) {
        if (!val) return true;
        return ["gradient", "flashed", "none"].includes(val);
      }
    },
    delay: {
      type: Number,
      "default": 0
    },
    loading: {
      type: Boolean,
      "default": true
    },
    rowCol: {
      type: Array
    },
    theme: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["text", "avatar", "paragraph", "avatar-text", "tab", "article"].includes(val);
      }
    }
  };

  function ownKeys$E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$E(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ThemeMap = {
    text: [1],
    avatar: [{
      type: "circle",
      size: "56px"
    }],
    paragraph: [1, 1, {
      width: "70%"
    }],
    "avatar-text": [[{
      type: "circle"
    }, {
      type: "text",
      height: "32px"
    }]],
    tab: [{
      height: "30px"
    }, {
      height: "200px"
    }],
    article: [{
      type: "rect",
      height: "30px",
      width: "100%"
    }, {
      type: "rect",
      height: "200px",
      width: "100%"
    }, [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }]]
  };
  var getColItemStyle = function getColItemStyle(obj) {
    var styleName = ["width", "height", "marginRight", "marginLeft", "margin", "size", "background", "backgroundColor"];
    var style = /* @__PURE__ */Object.create(null);
    styleName.forEach(function (name) {
      if (name in obj) {
        var px = isNumber_1(obj[name]) ? "".concat(obj[name], "px") : obj[name];
        if (name === "size") {
          var _ref = [px, px];
          style.width = _ref[0];
          style.height = _ref[1];
        } else {
          style[name] = px;
        }
      }
    });
    return style;
  };
  var _Skeleton = vue.defineComponent({
    name: "TSkeleton",
    props: _objectSpread$D({}, props$b),
    setup: function setup(props2, _ref2) {
      var slots = _ref2.slots;
      var isShow = vue.ref(false);
      var COMPONENT_NAME = usePrefixClass("skeleton");
      var renderContent = useContent();
      var getColItemClass = function getColItemClass(obj) {
        return ["".concat(COMPONENT_NAME.value, "__col"), "".concat(COMPONENT_NAME.value, "--type-").concat(obj.type || "text"), _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--animation-").concat(props2.animation), props2.animation)];
      };
      var renderCols = function renderCols(_cols) {
        var cols = [];
        if (Array.isArray(_cols)) {
          cols = _cols;
        } else if (isNumber_1(_cols)) {
          cols = new Array(_cols).fill({
            type: "text"
          });
        } else {
          cols = [_cols];
        }
        return cols.map(function (obj) {
          return vue.createVNode("div", {
            "class": getColItemClass(obj),
            "style": getColItemStyle(obj)
          }, [isFunction_1(obj.content) ? obj.content(vue.h) : obj.content]);
        });
      };
      var renderRowCol = function renderRowCol(_rowCol) {
        var rowCol = _rowCol || props2.rowCol;
        var getBlockClass = function getBlockClass() {
          return ["".concat(COMPONENT_NAME.value, "__row")];
        };
        return rowCol.map(function (item) {
          return vue.createVNode("div", {
            "class": getBlockClass()
          }, [renderCols(item)]);
        });
      };
      vue.watch(function () {
        return props2.loading;
      }, function (val) {
        if (!val || props2.delay === 0) {
          isShow.value = val;
          return;
        }
        setTimeout(function () {
          isShow.value = val;
        }, props2.delay);
      }, {
        immediate: true
      });
      return function () {
        var content = renderContent("default", "content");
        if (slots["default"] && !isShow.value) {
          return vue.createVNode("div", null, [content]);
        }
        if (!isShow.value) {
          return;
        }
        var children = [];
        if (props2.theme) {
          children.push(renderRowCol(ThemeMap[props2.theme]));
        }
        if (props2.rowCol) {
          children.push(renderRowCol(props2.rowCol));
        }
        if (!props2.theme && !props2.rowCol) {
          children.push(renderRowCol([1, 1, 1, {
            width: "70%"
          }]));
        }
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [children]);
      };
    }
  });

  var Skeleton = withInstall(_Skeleton);

  var props$a = {
    animation: {
      type: String,
      "default": "slide",
      validator: function validator(val) {
        if (!val) return true;
        return ["slide", "fade"].includes(val);
      }
    },
    autoplay: {
      type: Boolean,
      "default": true
    },
    current: {
      type: Number,
      "default": 0
    },
    defaultCurrent: {
      type: Number,
      "default": 0
    },
    direction: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    duration: {
      type: Number,
      "default": 300
    },
    height: {
      type: Number
    },
    interval: {
      type: Number,
      "default": 5e3
    },
    loop: {
      type: Boolean,
      "default": true
    },
    navigation: {
      type: [Object, Function]
    },
    stopOnHover: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light", "dark"].includes(val);
      }
    },
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        if (!val) return true;
        return ["hover", "click"].includes(val);
      }
    },
    type: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "card"].includes(val);
      }
    },
    onChange: Function
  };

  function ownKeys$D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$D(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var swiperItemProps = {
    index: {
      type: Number
    },
    currentIndex: {
      type: Number
    },
    isSwitching: {
      type: Boolean,
      "default": false
    },
    getWrapAttribute: {
      type: Function
    },
    swiperItemLength: {
      type: Number,
      "default": 0
    }
  };
  var CARD_SCALE = 210 / 332;
  var itemWidth = 0.415;
  var _SwiperItem = vue.defineComponent({
    name: "TSwiperItem",
    props: _objectSpread$C(_objectSpread$C({}, props$a), swiperItemProps),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var prefix = usePrefixClass();
      var active = vue.computed(function () {
        return props2.index === props2.currentIndex;
      });
      var disposeIndex = vue.computed(function () {
        if (props2.type !== "card") return 0;
        if (props2.currentIndex === 0 && props2.index === props2.swiperItemLength - 1) {
          return -1;
        }
        if (props2.currentIndex === props2.swiperItemLength - 1 && props2.index === 0) {
          return props2.swiperItemLength;
        }
        if (props2.index < props2.currentIndex - 1 && props2.currentIndex - props2.index >= props2.swiperItemLength / 2) {
          return props2.swiperItemLength + 1;
        }
        if (props2.index > props2.currentIndex + 1 && props2.index - props2.currentIndex >= props2.swiperItemLength / 2) {
          return -2;
        }
        return props2.index;
      });
      var translateX = vue.computed(function () {
        if (props2.type !== "card") return 0;
        var wrapWidth = props2.getWrapAttribute("offsetWidth") || 0;
        var translateIndex = !active.value && props2.swiperItemLength > 2 ? disposeIndex.value : props2.index;
        var inStage = Math.abs(translateIndex - props2.currentIndex) <= 1;
        if (inStage) {
          return wrapWidth * ((translateIndex - props2.currentIndex) * (1 - itemWidth * CARD_SCALE) - itemWidth + 1) / 2;
        }
        if (translateIndex < props2.currentIndex) {
          return -itemWidth * (1 + CARD_SCALE) * wrapWidth / 2;
        }
        return (2 + itemWidth * (CARD_SCALE - 1)) * wrapWidth / 2;
      });
      var zIndex = vue.computed(function () {
        if (props2.type !== "card") return 0;
        var translateIndex = !active.value && props2.swiperItemLength > 2 ? disposeIndex.value : props2.index;
        var isActivity = translateIndex === props2.currentIndex;
        var inStage = Math.round(Math.abs(translateIndex - props2.currentIndex)) <= 1;
        if (isActivity) {
          return 2;
        }
        if (inStage) {
          return 1;
        }
        return 0;
      });
      var itemStyle = vue.computed(function () {
        if (props2.animation === "fade") {
          return {
            opacity: active.value ? 1 : 0,
            transition: props2.isSwitching ? "opacity ".concat(props2.duration / 1e3, "s") : "",
            zIndex: active.value ? 1 : 0
          };
        }
        if (props2.type === "card") {
          var translateIndex = !active.value && props2.swiperItemLength > 2 ? disposeIndex.value : props2.index;
          var isActivity = translateIndex === props2.currentIndex;
          return {
            transform: "translateX(".concat(translateX.value, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
            transition: "transform ".concat(props2.duration / 1e3, "s ease"),
            zIndex: zIndex.value
          };
        }
        return {};
      });
      return function () {
        var _ref2, _slots$default;
        return vue.createVNode("div", {
          "class": ["".concat(prefix.value, "-swiper__container__item"), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(prefix.value, "-swiper__card"), props2.type === "card"), _defineProperty$3(_ref2, "".concat(prefix.value, "-is-active"), props2.type === "card" && active.value), _defineProperty$3(_ref2, "".concat(prefix.value, "-swiper__fade"), props2.animation === "fade"), _ref2)],
          "style": itemStyle.value
        }, [((_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots, {})) || []]);
      };
    }
  });

  function ownKeys$C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$C(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$8(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var defaultNavigation = {
    placement: "inside",
    showSlideBtn: "always",
    size: "medium",
    type: "bars"
  };
  var _Swiper = vue.defineComponent({
    name: "TSwiper",
    props: _objectSpread$B({}, props$a),
    setup: function setup(props2) {
      var prefix = usePrefixClass();
      var _useGlobalIcon = useGlobalIcon({
          ChevronLeftIcon: chevronLeft,
          ChevronRightIcon: chevronRight
        }),
        ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
      var swiperTimer = 0;
      var swiperSwitchingTimer = 0;
      var isBeginToEnd = false;
      var isEndToBegin = false;
      var currentIndex = vue.ref(props2.current || props2.defaultCurrent);
      var isHovering = vue.ref(false);
      var isSwitching = vue.ref(false);
      var showArrow = vue.ref(false);
      var swiperWrap = vue.ref();
      var getChildComponentByName = useChildComponentSlots();
      var swiperItemLength = vue.ref(0);
      var navigationConfig = vue.computed(function () {
        return _objectSpread$B(_objectSpread$B({}, defaultNavigation), vue.isVNode(props2.navigation) ? {} : props2.navigation);
      });
      var isEnd = vue.computed(function () {
        if (props2.type === "card") {
          return !props2.loop && currentIndex.value + 1 >= swiperItemLength.value;
        }
        return !props2.loop && currentIndex.value + 2 >= swiperItemLength.value;
      });
      var propsToUpdateSetTimer = vue.computed(function () {
        return [props2.autoplay, currentIndex.value, props2.duration, props2.interval];
      });
      var swiperWrapClass = vue.computed(function () {
        var _ref;
        return _ref = {}, _defineProperty$3(_ref, "".concat(prefix.value, "-swiper__wrap"), true), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--inside"), navigationConfig.value.placement === "inside"), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--outside"), navigationConfig.value.placement === "outside"), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--vertical"), props2.direction === "vertical"), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--large"), navigationConfig.value.size === "large"), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--small"), navigationConfig.value.size === "small"), _ref;
      });
      var containerStyle = vue.computed(function () {
        var offsetHeight = props2.height ? "".concat(props2.height, "px") : "".concat(getWrapAttribute("offsetHeight"), "px");
        if (props2.type === "card" || props2.animation === "fade") {
          return {
            height: offsetHeight
          };
        }
        if (props2.animation === "slide") {
          var style = {
            transition: isSwitching.value ? "transform ".concat(props2.duration / 1e3, "s ease") : ""
          };
          var active = currentIndex.value;
          if (swiperItemLength.value > 1) {
            active += 1;
            if (isBeginToEnd || isEndToBegin) {
              style.transition = "";
            }
          }
          if (props2.direction === "vertical") {
            style.height = offsetHeight;
            style.transform = "translate3d(0, -".concat(active * 100, "%, 0px)");
          } else {
            style.transform = "translate3d(-".concat(active * 100, "%, 0px, 0px)");
          }
          ["msTransform", "WebkitTransform"].forEach(function (key) {
            style[key] = style.transform;
          });
          return style;
        }
        return {};
      });
      var swiperItems = function swiperItems() {
        var swiperItemList = getChildComponentByName("SwiperItem");
        swiperItemLength.value = swiperItemList.length;
        var items = swiperItemList.map(function (swiperItem, index) {
          var _slot;
          var p = _objectSpread$B(_objectSpread$B({}, props2), swiperItem.props);
          return vue.createVNode(_SwiperItem, vue.mergeProps({
            "index": index,
            "currentIndex": currentIndex.value,
            "isSwitching": isSwitching.value,
            "getWrapAttribute": getWrapAttribute,
            "swiperItemLength": swiperItemLength.value
          }, p), _isSlot$8(_slot = swiperItem.children["default"]()) ? _slot : {
            "default": function _default() {
              return [_slot];
            }
          });
        });
        if (props2.animation === "slide" && items.length > 1) {
          var first = vue.cloneVNode(items[0], {
            key: "swiper-item-append-".concat(0)
          });
          var last = vue.cloneVNode(items[items.length - 1], {
            key: "swiper-item-prepend-".concat(items.length - 1)
          });
          items.unshift(last);
          items.push(first);
        }
        return items;
      };
      var swiperTo = function swiperTo(index, context) {
        var _props2$onChange;
        var targetIndex = index % swiperItemLength.value;
        (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, targetIndex, context);
        isSwitching.value = true;
        if (props2.animation === "slide" && swiperItemLength.value > 1 && props2.type !== "card") {
          targetIndex = index;
          isBeginToEnd = false;
          isEndToBegin = false;
          if (index >= swiperItemLength.value) {
            clearTimer();
            setTimeout(function () {
              isEndToBegin = true;
              currentIndex.value = 0;
            }, props2.duration);
          }
          if (currentIndex.value === 0) {
            if (swiperItemLength.value > 2 && index !== 1 || swiperItemLength.value === 2 && index === 0) {
              targetIndex = -1;
              clearTimer();
              setTimeout(function () {
                isBeginToEnd = true;
                currentIndex.value = swiperItemLength.value - 1;
              }, props2.duration);
            }
          }
        }
        currentIndex.value = targetIndex;
      };
      var clearTimer = function clearTimer() {
        if (swiperTimer) {
          clearTimeout(swiperTimer);
          swiperTimer = 0;
        }
      };
      var setTimer = function setTimer() {
        if (props2.autoplay && props2.interval > 0) {
          clearTimer();
          swiperTimer = setTimeout(function () {
            swiperTo(currentIndex.value + 1, {
              source: "autoplay"
            });
          }, currentIndex.value === 0 ? props2.interval - (props2.duration + 50) : props2.interval);
        }
      };
      var onMouseEnter = function onMouseEnter() {
        isHovering.value = true;
        if (props2.stopOnHover) {
          clearTimer();
        }
        if (navigationConfig.value.showSlideBtn === "hover") {
          showArrow.value = true;
        }
      };
      var onMouseLeave = function onMouseLeave() {
        isHovering.value = false;
        if (!isEnd.value) {
          setTimer();
        }
        if (navigationConfig.value.showSlideBtn === "hover") {
          showArrow.value = false;
        }
      };
      var onMouseEnterNavigationItem = function onMouseEnterNavigationItem(i) {
        if (props2.trigger === "hover") {
          swiperTo(i, {
            source: "hover"
          });
        }
      };
      var onClickNavigationItem = function onClickNavigationItem(i) {
        if (props2.trigger === "click") {
          swiperTo(i, {
            source: "click"
          });
        }
      };
      var goNext = function goNext(context) {
        if (isSwitching.value) return;
        if (props2.type === "card") {
          return swiperTo(currentIndex.value + 1 >= swiperItemLength.value ? 0 : currentIndex.value + 1, context);
        }
        return swiperTo(currentIndex.value + 1, context);
      };
      var goPrevious = function goPrevious(context) {
        if (isSwitching.value) return;
        if (currentIndex.value - 1 < 0) {
          if (props2.animation === "slide" && swiperItemLength.value === 2) {
            return swiperTo(0, context);
          }
          return swiperTo(swiperItemLength.value - 1, context);
        }
        return swiperTo(currentIndex.value - 1, context);
      };
      var getWrapAttribute = function getWrapAttribute(attr) {
        var _swiperWrap$value, _swiperWrap$value$par;
        return (_swiperWrap$value = swiperWrap.value) === null || _swiperWrap$value === void 0 ? void 0 : (_swiperWrap$value$par = _swiperWrap$value.parentNode) === null || _swiperWrap$value$par === void 0 ? void 0 : _swiperWrap$value$par[attr];
      };
      var renderPagination = function renderPagination() {
        var fractionIndex = currentIndex.value + 1 > swiperItemLength.value ? 1 : currentIndex.value + 1;
        return vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow")
        }, [vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow-left"),
          "onClick": function onClick() {
            return goPrevious({
              source: "click"
            });
          }
        }, [vue.createVNode(ChevronLeftIcon, null, null)]), vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__navigation-text-fraction")
        }, [fractionIndex, "/", swiperItemLength.value]), vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow-right"),
          "onClick": function onClick() {
            return goNext({
              source: "click"
            });
          }
        }, [vue.createVNode(ChevronRightIcon, null, null)])]);
      };
      var renderArrow = function renderArrow() {
        if (!showArrow.value) return null;
        return vue.createVNode("div", {
          "class": ["".concat(prefix.value, "-swiper__arrow"), "".concat(prefix.value, "-swiper__arrow--default")]
        }, [vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow-left"),
          "onClick": function onClick() {
            return goPrevious({
              source: "click"
            });
          }
        }, [vue.createVNode(ChevronLeftIcon, null, null)]), vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow-right"),
          "onClick": function onClick() {
            return goNext({
              source: "click"
            });
          }
        }, [vue.createVNode(ChevronRightIcon, null, null)])]);
      };
      var renderNavigation = function renderNavigation() {
        var _ref2;
        if (vue.isVNode(props2.navigation)) return props2.navigation;
        if (navigationConfig.value.type === "fraction") {
          return vue.createVNode("div", {
            "class": ["".concat(prefix.value, "-swiper__navigation"), "".concat(prefix.value, "-swiper__navigation--fraction")]
          }, [renderPagination()]);
        }
        var swiperItemList = getChildComponentByName("SwiperItem");
        return vue.createVNode("ul", {
          "class": ["".concat(prefix.value, "-swiper__navigation"), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(prefix.value, "-swiper__navigation-bars"), navigationConfig.value.type === "bars"), _defineProperty$3(_ref2, "".concat(prefix.value, "-swiper__navigation-dots"), navigationConfig.value.type === "dots"), _defineProperty$3(_ref2, "".concat(prefix.value, "-swiper__navigation-dots-bar"), navigationConfig.value.type === "dots-bar"), _ref2)]
        }, [swiperItemList.map(function (_, i) {
          return vue.createVNode("li", {
            "key": i,
            "class": ["".concat(prefix.value, "-swiper__navigation-item"), _defineProperty$3({}, "".concat(prefix.value, "-is-active"), i === currentIndex.value)],
            "onMouseenter": function onMouseenter() {
              return onMouseEnterNavigationItem(i);
            },
            "onClick": function onClick() {
              return onClickNavigationItem(i);
            }
          }, [vue.createVNode("span", null, null)]);
        })]);
      };
      var renderSwiperItems = function renderSwiperItems() {
        return swiperItems();
      };
      vue.watch(function () {
        return propsToUpdateSetTimer.value;
      }, function () {
        setTimer();
      });
      vue.watch(function () {
        return isSwitching.value;
      }, function () {
        if (isSwitching.value) {
          if (swiperSwitchingTimer) clearTimeout(swiperSwitchingTimer);
          swiperSwitchingTimer = setTimeout(function () {
            isSwitching.value = false;
            swiperSwitchingTimer = 0;
            if (isEnd.value) {
              clearTimer();
            }
          }, props2.duration + 50);
        }
      });
      vue.watch(function () {
        return props2.current;
      }, function () {
        swiperTo(props2.current, {
          source: "autoplay"
        });
      });
      vue.onMounted(function () {
        setTimer();
        showArrow.value = navigationConfig.value.showSlideBtn === "always";
      });
      return function () {
        var _ref4;
        return vue.createVNode("div", {
          "class": ["".concat(prefix.value, "-swiper")],
          "onMouseenter": onMouseEnter,
          "onMouseleave": onMouseLeave,
          "ref": swiperWrap
        }, [vue.createVNode("div", {
          "class": swiperWrapClass.value
        }, [vue.createVNode("div", {
          "class": ["".concat(prefix.value, "-swiper__content"), (_ref4 = {}, _defineProperty$3(_ref4, "".concat(prefix.value, "-swiper-fade"), props2.animation === "fade"), _defineProperty$3(_ref4, "".concat(prefix.value, "-swiper-card"), props2.type === "card"), _ref4)]
        }, [vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__container"),
          "style": containerStyle.value
        }, [renderSwiperItems()])]), renderNavigation(), renderArrow()])]);
      };
    }
  });

  var Swiper = withInstall(_Swiper);
  var SwiperItem = withInstall(_SwiperItem);

  var baseTableProps = {
    allowResizeColumnWidth: {
      type: Boolean,
      "default": void 0
    },
    bordered: Boolean,
    bottomContent: {
      type: [String, Function]
    },
    cellEmptyContent: {
      type: [String, Function]
    },
    columns: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disableDataPage: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    firstFullRow: {
      type: [String, Function]
    },
    fixedRows: {
      type: Array
    },
    footData: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    footerAffixProps: {
      type: Object
    },
    footerAffixedBottom: {
      type: [Boolean, Object],
      "default": false
    },
    footerSummary: {
      type: [String, Function]
    },
    headerAffixProps: {
      type: Object
    },
    headerAffixedTop: {
      type: [Boolean, Object],
      "default": false
    },
    height: {
      type: [String, Number]
    },
    horizontalScrollAffixedBottom: {
      type: [Boolean, Object]
    },
    hover: Boolean,
    lastFullRow: {
      type: [String, Function]
    },
    loading: {
      type: [Boolean, Function],
      "default": void 0
    },
    loadingProps: {
      type: Object
    },
    maxHeight: {
      type: [String, Number]
    },
    pagination: {
      type: Object
    },
    paginationAffixedBottom: {
      type: [Boolean, Object]
    },
    resizable: Boolean,
    rowAttributes: {
      type: [Object, Array, Function]
    },
    rowClassName: {
      type: [String, Object, Array, Function]
    },
    rowKey: {
      type: String,
      "default": "id",
      required: true
    },
    rowspanAndColspan: {
      type: Function
    },
    rowspanAndColspanInFooter: {
      type: Function
    },
    scroll: {
      type: Object
    },
    showHeader: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    stripe: Boolean,
    tableContentWidth: {
      type: String,
      "default": ""
    },
    tableLayout: {
      type: String,
      "default": "fixed",
      validator: function validator(val) {
        if (!val) return true;
        return ["auto", "fixed"].includes(val);
      }
    },
    topContent: {
      type: [String, Function]
    },
    verticalAlign: {
      type: String,
      "default": "middle",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "middle", "bottom"].includes(val);
      }
    },
    onCellClick: Function,
    onPageChange: Function,
    onRowClick: Function,
    onRowDblclick: Function,
    onRowMousedown: Function,
    onRowMouseenter: Function,
    onRowMouseleave: Function,
    onRowMouseover: Function,
    onRowMouseup: Function,
    onScroll: Function,
    onScrollX: Function,
    onScrollY: Function
  };

  function getNodeDepth(columns, depthMap) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var maxDepth = depth;
    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;
      var col = columns[i];
      depthMap.set(col, depth);
      if (col !== null && col !== void 0 && (_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        var deep = getNodeDepth(col.children, depthMap, depth + 1);
        if (deep > maxDepth) {
          maxDepth = deep;
        }
      }
    }
    return maxDepth;
  }
  function getChildrenNodeWidth(node) {
    var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var countNew = count;
    var childrenList = (node === null || node === void 0 ? void 0 : node.children) || [];
    for (var i = 0, len = childrenList.length; i < len; i++) {
      var item = childrenList[i];
      if (item.children) {
        countNew = getChildrenNodeWidth(item, countNew);
      } else {
        countNew += 1;
      }
    }
    return countNew;
  }
  function getThRowspanAndColspan(columns) {
    var depthMap = /* @__PURE__ */new Map();
    var columnsDepth = getNodeDepth(columns, depthMap);
    var rowspanAndColspanMap = /* @__PURE__ */new Map();
    var loop = function loop(nodes, leafColumns2) {
      for (var i = 0, len = nodes.length; i < len; i++) {
        var _col$children2;
        var col = nodes[i];
        var rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;
        var colspan = col.children ? getChildrenNodeWidth(col) : 1;
        var span = {};
        rowspan > 1 && (span.rowspan = rowspan);
        colspan > 1 && (span.colspan = colspan);
        rowspanAndColspanMap.set(col, span);
        if (col !== null && col !== void 0 && (_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
          loop(col.children, leafColumns2);
        } else {
          leafColumns2.push(col);
        }
      }
    };
    var leafColumns = [];
    loop(columns, leafColumns);
    return {
      rowspanAndColspanMap: rowspanAndColspanMap,
      leafColumns: leafColumns
    };
  }
  function getThList(columns) {
    var loop = function loop(nodes, thRows) {
      var _children;
      var thRowData = [];
      var children = [];
      for (var i = 0, len = nodes.length; i < len; i++) {
        var _node$children;
        var node = nodes[i];
        var thList = [node];
        thRowData = thRowData.concat(thList);
        if (node !== null && node !== void 0 && (_node$children = node.children) !== null && _node$children !== void 0 && _node$children.length) {
          children = children.concat(node.children);
        }
      }
      if ((_children = children) !== null && _children !== void 0 && _children.length) {
        loop(children, thRows);
      }
      thRows.push(thRowData);
      return thRowData;
    };
    var list = [];
    loop(columns, list);
    list = list.reverse();
    return list;
  }

  function useClassName() {
    var classPrefix = usePrefixClass();
    var classNames = {
      classPrefix: classPrefix.value,
      tableBaseClass: {
        table: "".concat(classPrefix.value, "-table"),
        columnResizableTable: "".concat(classPrefix.value, "-table--column-resizable"),
        overflowVisible: "".concat(classPrefix.value, "-table--overflow-visible"),
        body: "".concat(classPrefix.value, "-table__body"),
        content: "".concat(classPrefix.value, "-table__content"),
        topContent: "".concat(classPrefix.value, "-table__top-content"),
        bottomContent: "".concat(classPrefix.value, "-table__bottom-content"),
        paginationWrap: "".concat(classPrefix.value, "-table__pagination-wrap"),
        tdLastRow: "".concat(classPrefix.value, "-table__td-last-row"),
        tdFirstCol: "".concat(classPrefix.value, "-table__td-first-col"),
        thCellInner: "".concat(classPrefix.value, "-table__th-cell-inner"),
        tableRowEdit: "".concat(classPrefix.value, "-table--row-edit"),
        cellEditable: "".concat(classPrefix.value, "-table__cell--editable"),
        cellEditWrap: "".concat(classPrefix.value, "-table__cell-wrap"),
        bordered: "".concat(classPrefix.value, "-table--bordered"),
        striped: "".concat(classPrefix.value, "-table--striped"),
        hover: "".concat(classPrefix.value, "-table--hoverable"),
        loading: "".concat(classPrefix.value, "-table--loading"),
        rowspanAndColspan: "".concat(classPrefix.value, "-table--rowspan-colspan"),
        empty: "".concat(classPrefix.value, "-table__empty"),
        emptyRow: "".concat(classPrefix.value, "-table__empty-row"),
        headerFixed: "".concat(classPrefix.value, "-table--header-fixed"),
        columnFixed: "".concat(classPrefix.value, "-table--column-fixed"),
        widthOverflow: "".concat(classPrefix.value, "-table--width-overflow"),
        multipleHeader: "".concat(classPrefix.value, "-table--multiple-header"),
        footerAffixed: "".concat(classPrefix.value, "-table--footer-affixed"),
        horizontalBarAffixed: "".concat(classPrefix.value, "-table--horizontal-bar-affixed"),
        affixedHeader: "".concat(classPrefix.value, "-table--affixed-header"),
        affixedHeaderElm: "".concat(classPrefix.value, "-table__affixed-header-elm"),
        affixedFooterElm: "".concat(classPrefix.value, "-table__affixed-footer-elm"),
        affixedFooterWrap: "".concat(classPrefix.value, "-table__affixed-footer-wrap"),
        scrollbarDivider: "".concat(classPrefix.value, "-table__scroll-bar-divider"),
        fullHeight: "".concat(classPrefix.value, "-table--full-height"),
        resizeLine: "".concat(classPrefix.value, "-table__resize-line"),
        obviousScrollbar: "".concat(classPrefix.value, "-table__scrollbar--obvious"),
        affixedHeaderWrap: "".concat(classPrefix.value, "-table__affixed-header-elm-wrap")
      },
      tdAlignClasses: {
        left: "".concat(classPrefix.value, "-align-left"),
        right: "".concat(classPrefix.value, "-align-right"),
        center: "".concat(classPrefix.value, "-align-center")
      },
      tableHeaderClasses: {
        header: "".concat(classPrefix.value, "-table__header"),
        thBordered: "".concat(classPrefix.value, "-table__header-th--bordered"),
        fixed: "".concat(classPrefix.value, "-table__header--fixed"),
        multipleHeader: "".concat(classPrefix.value, "-table__header--multiple")
      },
      tableFooterClasses: {
        footer: "".concat(classPrefix.value, "-table__footer"),
        fixed: "".concat(classPrefix.value, "-table__footer--fixed")
      },
      tableAlignClasses: {
        top: "".concat(classPrefix.value, "-vertical-align-top"),
        middle: "".concat(classPrefix.value, "-vertical-align-middle"),
        bottom: "".concat(classPrefix.value, "-vertical-align-bottom")
      },
      tableRowFixedClasses: {
        top: "".concat(classPrefix.value, "-table__row--fixed-top"),
        bottom: "".concat(classPrefix.value, "-table__row--fixed-bottom"),
        firstBottom: "".concat(classPrefix.value, "-table__row--fixed-bottom-first"),
        withoutBorderBottom: "".concat(classPrefix.value, "-table__row--without-border-bottom")
      },
      tableColFixedClasses: {
        left: "".concat(classPrefix.value, "-table__cell--fixed-left"),
        right: "".concat(classPrefix.value, "-table__cell--fixed-right"),
        lastLeft: "".concat(classPrefix.value, "-table__cell--fixed-left-last"),
        firstRight: "".concat(classPrefix.value, "-table__cell--fixed-right-first"),
        leftShadow: "".concat(classPrefix.value, "-table__content--scrollable-to-left"),
        rightShadow: "".concat(classPrefix.value, "-table__content--scrollable-to-right")
      },
      tableLayoutClasses: {
        auto: "".concat(classPrefix.value, "-table--layout-auto"),
        fixed: "".concat(classPrefix.value, "-table--layout-fixed")
      },
      tdEllipsisClass: "".concat(classPrefix.value, "-table-td--ellipsis"),
      tableFullRowClasses: {
        base: "".concat(classPrefix.value, "-table__row--full"),
        innerFullRow: "".concat(classPrefix.value, "-table__row-full-inner"),
        innerFullElement: "".concat(classPrefix.value, "-table__row-full-element"),
        firstFullRow: "".concat(classPrefix.value, "-table__first-full-row"),
        lastFullRow: "".concat(classPrefix.value, "-table__last-full-row")
      },
      tableExpandClasses: {
        iconBox: "".concat(classPrefix.value, "-table__expand-box"),
        iconCell: "".concat(classPrefix.value, "-table__expandable-icon-cell"),
        row: "".concat(classPrefix.value, "-table__expanded-row"),
        rowInner: "".concat(classPrefix.value, "-table__expanded-row-inner"),
        expanded: "".concat(classPrefix.value, "-table__row--expanded"),
        collapsed: "".concat(classPrefix.value, "-table__row--collapsed")
      },
      tableSortClasses: {
        sortable: "".concat(classPrefix.value, "-table__cell--sortable"),
        sortColumn: "".concat(classPrefix.value, "-table__sort-column"),
        title: "".concat(classPrefix.value, "-table__cell--title"),
        trigger: "".concat(classPrefix.value, "-table__cell--sort-trigger"),
        doubleIcon: "".concat(classPrefix.value, "-table__double-icons"),
        sortIcon: "".concat(classPrefix.value, "-table__sort-icon"),
        iconDirection: {
          asc: "".concat(classPrefix.value, "-table-sort-asc"),
          desc: "".concat(classPrefix.value, "-table-sort-desc")
        },
        iconActive: "".concat(classPrefix.value, "-table__sort-icon--active"),
        iconDefault: "".concat(classPrefix.value, "-icon-sort--default")
      },
      tableSelectedClasses: {
        selected: "".concat(classPrefix.value, "-table__row--selected"),
        disabled: "".concat(classPrefix.value, "-table__row--disabled"),
        checkCell: "".concat(classPrefix.value, "-table__cell-check")
      },
      tableFilterClasses: {
        filterable: "".concat(classPrefix.value, "-table__cell--filterable"),
        popup: "".concat(classPrefix.value, "-table__filter-pop"),
        icon: "".concat(classPrefix.value, "-table__filter-icon"),
        popupContent: "".concat(classPrefix.value, "-table__filter-pop-content"),
        result: "".concat(classPrefix.value, "-table__filter-result"),
        inner: "".concat(classPrefix.value, "-table__row-filter-inner"),
        bottomButtons: "".concat(classPrefix.value, "-table__filter--bottom-buttons"),
        contentInner: "".concat(classPrefix.value, "-table__filter-pop-content-inner"),
        iconWrap: "".concat(classPrefix.value, "-table__filter-icon-wrap")
      },
      asyncLoadingClass: "".concat(classPrefix.value, "-table__async-loading"),
      isFocusClass: "".concat(classPrefix.value, "-is-focus"),
      isLoadingClass: "".concat(classPrefix.value, "-is-loading"),
      isLoadMoreClass: "".concat(classPrefix.value, "-is-load-more"),
      tableTreeClasses: {
        col: "".concat(classPrefix.value, "-table__tree-col"),
        inlineCol: "".concat(classPrefix.value, "-table__tree-col--inline"),
        icon: "".concat(classPrefix.value, "-table__tree-op-icon"),
        leafNode: "".concat(classPrefix.value, "-table__tree-leaf-node")
      },
      tableDraggableClasses: {
        rowDraggable: "".concat(classPrefix.value, "-table--row-draggable"),
        rowHandlerDraggable: "".concat(classPrefix.value, "-table--row-handler-draggable"),
        colDraggable: "".concat(classPrefix.value, "-table--col-draggable"),
        handle: "".concat(classPrefix.value, "-table__handle-draggable"),
        ghost: "".concat(classPrefix.value, "-table__ele--draggable-ghost"),
        chosen: "".concat(classPrefix.value, "-table__ele--draggable-chosen"),
        dragging: "".concat(classPrefix.value, "-table__ele--draggable-dragging")
      },
      virtualScrollClasses: {
        cursor: "".concat(classPrefix.value, "-table__virtual-scroll-cursor"),
        header: "".concat(classPrefix.value, "-table__virtual-scroll-header")
      },
      positiveRotate90: "".concat(classPrefix.value, "-positive-rotate-90"),
      negativeRotate180: "".concat(classPrefix.value, "-negative-rotate-180")
    };
    return classNames;
  }

  function ownKeys$B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$B(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$7(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var TEllipsis = vue.defineComponent({
    name: "TEllipsis",
    props: {
      content: {
        type: [String, Function]
      },
      "default": {
        type: [String, Function]
      },
      tooltipContent: {
        type: [String, Number, Function]
      },
      placement: String,
      attach: Function,
      tooltipProps: Object,
      zIndex: Number,
      overlayClassName: String,
      classPrefix: {
        type: String,
        "default": "t"
      }
    },
    setup: function setup(props) {
      var root = vue.ref();
      var isOverflow = vue.ref(false);
      var ellipsisClasses = vue.computed(function () {
        return ["".concat(props.classPrefix, "-table__ellipsis"), "".concat(props.classPrefix, "-text-ellipsis")];
      });
      var innerEllipsisClassName = vue.computed(function () {
        return ["".concat(props.classPrefix, "-table__ellipsis-content"), props.overlayClassName];
      });
      var onTriggerMouseenter = function onTriggerMouseenter() {
        if (!root.value) return;
        isOverflow.value = isNodeOverflow(root.value);
      };
      var onTriggerMouseleave = function onTriggerMouseleave() {
        isOverflow.value = isNodeOverflow(root.value);
      };
      var onMouseAround = debounce_1(function (e) {
        e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
      }, 80);
      return {
        root: root,
        isOverflow: isOverflow,
        ellipsisClasses: ellipsisClasses,
        innerEllipsisClassName: innerEllipsisClassName,
        onMouseAround: onMouseAround
      };
    },
    render: function render() {
      var cellNode = renderContent(this, "default", "content");
      var ellipsisContent = vue.createVNode("div", {
        "ref": "root",
        "class": this.ellipsisClasses,
        "onMouseenter": this.onMouseAround,
        "onMouseleave": this.onMouseAround
      }, [cellNode]);
      var content = null;
      var tooltipProps = this.tooltipProps;
      if (this.isOverflow) {
        var rProps = _objectSpread$A({
          content: this.tooltipContent || function () {
            return cellNode;
          },
          destroyOnClose: true,
          zIndex: this.zIndex,
          attach: this.attach,
          placement: this.placement,
          overlayClassName: tooltipProps !== null && tooltipProps !== void 0 && tooltipProps.overlayClassName ? this.innerEllipsisClassName.concat(tooltipProps.overlayClassName) : this.innerEllipsisClassName
        }, tooltipProps);
        content = vue.createVNode(Tooltip, rProps, _isSlot$7(ellipsisContent) ? ellipsisContent : {
          "default": function _default() {
            return [ellipsisContent];
          }
        });
      } else {
        content = ellipsisContent;
      }
      return content;
    }
  });

  function ownKeys$A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$A(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$6(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  function renderTitle(slots, col, index) {
    var params = {
      col: col,
      colIndex: index
    };
    if (isFunction_1(col.title)) {
      return col.title(vue.h, params);
    }
    if (isString_1(col.title) && slots[col.title]) {
      return slots[col.title](params);
    }
    if (isFunction_1(col.render)) {
      return col.render(vue.h, _objectSpread$z(_objectSpread$z({}, params), {}, {
        type: "title",
        row: {},
        rowIndex: -1
      })) || col.title;
    }
    return col.title;
  }
  function useTableHeader(props) {
    var _useClassName = useClassName(),
      tableSortClasses = _useClassName.tableSortClasses,
      tableFilterClasses = _useClassName.tableFilterClasses;
    var spansAndLeafNodes = vue.computed(function () {
      return getThRowspanAndColspan(props.columns);
    });
    var thList = vue.computed(function () {
      return getThList(props.columns);
    });
    var isMultipleHeader = vue.computed(function () {
      return thList.value.length > 1;
    });
    var renderTitleWidthIcon = function renderTitleWidthIcon(_ref, col, colIndex, ellipsisTitle, attach, extra) {
      var _classes;
      var _ref2 = _slicedToArray(_ref, 3),
        title = _ref2[0],
        sortIcon = _ref2[1],
        filterIcon = _ref2[2];
      var classes = (_classes = {}, _defineProperty$3(_classes, tableSortClasses.sortable, sortIcon), _defineProperty$3(_classes, tableFilterClasses.filterable, filterIcon), _classes);
      var content = isFunction_1(ellipsisTitle) ? ellipsisTitle(vue.h, {
        col: col,
        colIndex: colIndex
      }) : void 0;
      var isEllipsis = ellipsisTitle !== void 0 ? Boolean(ellipsisTitle) : Boolean(col.ellipsis);
      return vue.createVNode("div", {
        "class": classes
      }, [vue.createVNode("div", {
        "class": tableSortClasses.title
      }, [isEllipsis ? vue.createVNode(TEllipsis, {
        "placement": "bottom",
        "attach": attach ? function () {
          return attach;
        } : void 0,
        "tooltipContent": content && function () {
          return content;
        },
        "tooltipProps": _typeof$2(ellipsisTitle) === "object" ? ellipsisTitle : void 0,
        "classPrefix": extra === null || extra === void 0 ? void 0 : extra.classPrefix,
        "overlayClassName": extra === null || extra === void 0 ? void 0 : extra.ellipsisOverlayClassName
      }, _isSlot$6(title) ? title : {
        "default": function _default() {
          return [title];
        }
      }) : vue.createVNode("div", null, [title]), Boolean(sortIcon || filterIcon) && vue.createVNode("div", {
        "class": tableFilterClasses.iconWrap
      }, [sortIcon, filterIcon])])]);
    };
    return {
      thList: thList,
      isMultipleHeader: isMultipleHeader,
      spansAndLeafNodes: spansAndLeafNodes,
      renderTitleWidthIcon: renderTitleWidthIcon
    };
  }

  function isRowSelectedDisabled(selectColumn, row, rowIndex) {
    var disabled = isFunction_1(selectColumn.disabled) ? selectColumn.disabled({
      row: row,
      rowIndex: rowIndex
    }) : selectColumn.disabled;
    if (selectColumn.checkProps) {
      if (isFunction_1(selectColumn.checkProps)) {
        disabled = disabled || selectColumn.checkProps({
          row: row,
          rowIndex: rowIndex
        }).disabled;
      } else if (selectColumn.checkProps === "object") {
        disabled = disabled || selectColumn.checkProps.disabled;
      }
    }
    return !!disabled;
  }
  function getColWidthAttr(col, attrKey) {
    var attr = col[attrKey];
    return isNumber_1(attr) ? attr : parseFloat(attr);
  }

  var findAllChildren = function findAllChildren(col) {
    var loopQue = [];
    var result = [];
    if (col.children) {
      col.children.forEach(function (child) {
        return loopQue.push(child);
      });
      while (loopQue.length) {
        var child = loopQue.shift();
        if (!child.children || !child.children.length) {
          result.push(child);
        } else {
          child.children.forEach(function (child2) {
            return loopQue.push(child2);
          });
        }
      }
    }
    return result;
  };
  function setThWidthListByColumnDrag(dragCol, dragWidth, effectCol, options, callback) {
    var getThWidthList = options.getThWidthList,
      DEFAULT_MIN_WIDTH = options.DEFAULT_MIN_WIDTH;
    var thWidthList = getThWidthList();
    var dragChildrenCols = findAllChildren(dragCol);
    var effectChildrenCols = findAllChildren(effectCol);
    if (dragChildrenCols.length || effectChildrenCols.length) {
      var _effectCol$resize;
      var oldWidth = 0;
      var oldEffectWidth = 0;
      var notCalculateCols = [];
      var effectColsMinWidth = 0;
      var updateMap = {};
      if (!dragChildrenCols.length) {
        dragChildrenCols.push(dragCol);
      }
      if (!effectChildrenCols.length) {
        effectChildrenCols.push(effectCol);
      }
      dragChildrenCols.forEach(function (child) {
        oldWidth += thWidthList[child.colKey] || getColWidthAttr(child, "width");
        notCalculateCols.push(child.colKey);
      });
      effectChildrenCols.forEach(function (child) {
        var _child$resize;
        oldEffectWidth += thWidthList[child.colKey] || getColWidthAttr(child, "width");
        notCalculateCols.push(child.colKey);
        effectColsMinWidth += Math.max(((_child$resize = child.resize) === null || _child$resize === void 0 ? void 0 : _child$resize.minWidth) || DEFAULT_MIN_WIDTH, getColWidthAttr(child, "minWidth") || DEFAULT_MIN_WIDTH);
      });
      dragChildrenCols.forEach(function (child) {
        updateMap[child.colKey] = thWidthList[child.colKey] / oldWidth * dragWidth;
      });
      var remainWidth = Math.max(effectColsMinWidth, oldWidth + oldEffectWidth - dragWidth, Math.max(getColWidthAttr(effectCol, "minWidth") || DEFAULT_MIN_WIDTH, ((_effectCol$resize = effectCol.resize) === null || _effectCol$resize === void 0 ? void 0 : _effectCol$resize.minWidth) || DEFAULT_MIN_WIDTH));
      effectChildrenCols.forEach(function (child) {
        var _child$resize2;
        updateMap[child.colKey] = Math.max(((_child$resize2 = child.resize) === null || _child$resize2 === void 0 ? void 0 : _child$resize2.minWidth) || DEFAULT_MIN_WIDTH, getColWidthAttr(child, "minWidth") || DEFAULT_MIN_WIDTH, thWidthList[child.colKey] / oldEffectWidth * remainWidth);
      });
      callback(updateMap, notCalculateCols);
    } else {
      var _effectCol$resize2, _callback;
      var _oldWidth = thWidthList[dragCol.colKey] || getColWidthAttr(dragCol, "width");
      var _oldEffectWidth = thWidthList[effectCol.colKey] || getColWidthAttr(effectCol, "width");
      callback((_callback = {}, _defineProperty$3(_callback, dragCol.colKey, dragWidth), _defineProperty$3(_callback, effectCol.colKey, Math.max(((_effectCol$resize2 = effectCol.resize) === null || _effectCol$resize2 === void 0 ? void 0 : _effectCol$resize2.minWidth) || DEFAULT_MIN_WIDTH, getColWidthAttr(effectCol, "minWidth") || DEFAULT_MIN_WIDTH, _oldWidth + _oldEffectWidth - dragWidth)), _callback), [dragCol.colKey, effectCol.colKey]);
    }
  }

  var setMissingColumnWidth = function setMissingColumnWidth(columns, missingWidthCols, thWidthList, tableLayout, actualWidth, tableWidth) {
    var thMap = thWidthList;
    if (actualWidth < tableWidth) {
      var widthDiff = tableWidth - actualWidth;
      var remainCols = [];
      missingWidthCols.forEach(function (col) {
        var minWidth = getColWidthAttr(col, "minWidth");
        if (minWidth) {
          thMap[col.colKey] = minWidth;
          widthDiff -= minWidth;
        } else {
          remainCols.push(col);
        }
      });
      if (widthDiff > 0) {
        if (remainCols.length) {
          var avgWidth = widthDiff / remainCols.length;
          remainCols.forEach(function (col) {
            thMap[col.colKey] = avgWidth;
          });
        } else {
          var _avgWidth = widthDiff / missingWidthCols.length;
          missingWidthCols.forEach(function (col) {
            thMap[col.colKey] += _avgWidth;
          });
        }
      } else {
        remainCols.forEach(function (col) {
          thMap[col.colKey] = 100;
        });
      }
    } else if (tableLayout === "fixed") {
      missingWidthCols.forEach(function (col) {
        thMap[col.colKey] = getColWidthAttr(col, "minWidth") || 100;
      });
    } else {
      var extraWidth = 0;
      missingWidthCols.forEach(function (col) {
        extraWidth += getColWidthAttr(col, "minWidth") || 100;
      });
      var totalWidth = extraWidth + actualWidth;
      columns.forEach(function (col) {
        if (!thMap[col.colKey]) {
          var colWidth = getColWidthAttr(col, "minWidth") || 100;
          thMap[col.colKey] = colWidth / totalWidth * tableWidth;
        } else {
          thMap[col.colKey] = thMap[col.colKey] / totalWidth * tableWidth;
        }
      });
    }
  };
  var setNormalColumnWidth = function setNormalColumnWidth(columns, thWidthList, actualWidth, tableWidth, notCalculateWidthCols) {
    var thMap = thWidthList;
    columns.forEach(function (col) {
      if (notCalculateWidthCols.includes(col.colKey)) return;
      thMap[col.colKey] = thMap[col.colKey] / actualWidth * tableWidth;
    });
  };
  var setInitialColumnWidth = function setInitialColumnWidth(missingWidthCols, thWidthList) {
    var thMap = thWidthList;
    missingWidthCols.forEach(function (col) {
      thMap[col.colKey] = getColWidthAttr(col, "minWidth") || 100;
    });
  };
  function recalculateColumnWidth(columns, thWidthList, tableLayout, tableElmWidth, notCalculateWidthCols, callback) {
    var actualWidth = 0;
    var missingWidthCols = [];
    var thMap = {};
    columns.forEach(function (col) {
      if (!thWidthList[col.colKey]) {
        thMap[col.colKey] = getColWidthAttr(col, "width");
      } else {
        thMap[col.colKey] = thWidthList[col.colKey];
      }
      var originWidth = thMap[col.colKey];
      if (originWidth) {
        actualWidth += originWidth;
      } else {
        missingWidthCols.push(col);
      }
    });
    var tableWidth = tableElmWidth;
    var needUpdate = false;
    if (tableWidth > 0) {
      if (missingWidthCols.length) {
        setMissingColumnWidth(columns, missingWidthCols, thMap, tableLayout, actualWidth, tableWidth);
        needUpdate = true;
      } else {
        if (notCalculateWidthCols.length) {
          var sum = 0;
          notCalculateWidthCols.forEach(function (colKey) {
            sum += thMap[colKey];
          });
          actualWidth -= sum;
          tableWidth -= sum;
        }
        if (actualWidth !== tableWidth || notCalculateWidthCols.length) {
          setNormalColumnWidth(columns, thMap, actualWidth, tableWidth, notCalculateWidthCols);
          needUpdate = true;
        }
      }
    } else {
      setInitialColumnWidth(missingWidthCols, thMap);
      needUpdate = true;
    }
    if (needUpdate) {
      var addon = 0;
      Object.keys(thMap).forEach(function (key) {
        var width = thMap[key];
        addon += width - Math.floor(width);
        thMap[key] = Math.floor(width) + (addon > 1 ? 1 : 0);
        if (addon > 1) {
          addon -= 1;
        }
      });
      if (addon > 0.5) {
        thMap[columns[0].colKey] += 1;
      }
    }
    callback(thMap);
  }

  var DEFAULT_MIN_WIDTH = 80;
  var DEFAULT_MAX_WIDTH = 600;
  function useColumnResize(tableContentRef, refreshTable, getThWidthList, updateThWidthList) {
    var resizeLineRef = vue.ref();
    var notCalculateWidthCols = vue.ref([]);
    var effectColMap = vue.ref({});
    var setEffectColMap = function setEffectColMap(nodes, parent) {
      if (!nodes) return;
      nodes.forEach(function (n, index) {
        var parentPrevCol = parent ? effectColMap.value[parent.colKey].prev : nodes[index + 1];
        var parentNextCol = parent ? effectColMap.value[parent.colKey].next : nodes[index - 1];
        var prev = index === 0 ? parentPrevCol : nodes[index - 1];
        var next = index === nodes.length - 1 ? parentNextCol : nodes[index + 1];
        effectColMap.value[n.colKey] = {
          prev: prev,
          next: next
        };
        setEffectColMap(n.children, n);
      });
    };
    var resizeLineParams = {
      isDragging: false,
      draggingCol: null,
      draggingStart: 0,
      effectCol: null
    };
    var resizeLineStyle = vue.reactive({
      display: "none",
      left: "10px",
      height: "10px",
      bottom: "0"
    });
    var setNotCalculateWidthCols = function setNotCalculateWidthCols(colKeys) {
      notCalculateWidthCols.value = colKeys;
    };
    var onColumnMouseover = function onColumnMouseover(e, col) {
      if (!resizeLineRef.value) return;
      var target = e.target.closest("th");
      var targetBoundRect = target.getBoundingClientRect();
      if (!resizeLineParams.isDragging) {
        var distance = 8;
        if (targetBoundRect.right - e.pageX <= distance) {
          var _col$resizable;
          var colResizable = (_col$resizable = col.resizable) !== null && _col$resizable !== void 0 ? _col$resizable : true;
          if (colResizable) {
            target.style.cursor = "col-resize";
            resizeLineParams.draggingCol = target;
            resizeLineParams.effectCol = "next";
            return;
          }
        } else if (e.pageX - targetBoundRect.left <= distance) {
          var prevEl = target.previousElementSibling;
          if (prevEl) {
            var _effectPrevCol$resiza;
            var effectPrevCol = effectColMap.value[col.colKey].prev;
            var _colResizable = (_effectPrevCol$resiza = effectPrevCol.resizable) !== null && _effectPrevCol$resiza !== void 0 ? _effectPrevCol$resiza : true;
            if (_colResizable) {
              target.style.cursor = "col-resize";
              resizeLineParams.draggingCol = prevEl;
              resizeLineParams.effectCol = "prev";
              return;
            }
          }
        }
        target.style.cursor = "";
        resizeLineParams.draggingCol = null;
        resizeLineParams.effectCol = null;
      }
    };
    var onColumnMousedown = function onColumnMousedown(e, col) {
      var _tableContentRef$valu;
      if (!resizeLineParams.draggingCol) return;
      var getMinMaxColWidth = function getMinMaxColWidth(col2, effectPrevCol2) {
        var _targetCol$resize, _targetCol$resize2;
        var targetCol = null;
        if (resizeLineParams.effectCol === "next") {
          targetCol = col2;
        } else {
          targetCol = effectPrevCol2;
        }
        var propMinWidth = isNumber_1(targetCol.minWidth) ? targetCol.minWidth : parseFloat(targetCol.minWidth);
        return {
          minColWidth: Math.max(((_targetCol$resize = targetCol.resize) === null || _targetCol$resize === void 0 ? void 0 : _targetCol$resize.minWidth) || DEFAULT_MIN_WIDTH, propMinWidth || DEFAULT_MIN_WIDTH),
          maxColWidth: ((_targetCol$resize2 = targetCol.resize) === null || _targetCol$resize2 === void 0 ? void 0 : _targetCol$resize2.maxWidth) || DEFAULT_MAX_WIDTH
        };
      };
      var target = resizeLineParams.draggingCol;
      var targetBoundRect = target.getBoundingClientRect();
      var tableBoundRect = (_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect();
      var resizeLinePos = targetBoundRect.right - tableBoundRect.left;
      var colLeft = targetBoundRect.left - tableBoundRect.left;
      var effectNextCol = effectColMap.value[col.colKey].next;
      var effectPrevCol = effectColMap.value[col.colKey].prev;
      var _getMinMaxColWidth = getMinMaxColWidth(col, effectPrevCol),
        minColWidth = _getMinMaxColWidth.minColWidth,
        maxColWidth = _getMinMaxColWidth.maxColWidth;
      var minResizeLineLeft = colLeft + minColWidth;
      var maxResizeLineLeft = colLeft + maxColWidth;
      resizeLineParams.isDragging = true;
      resizeLineParams.draggingStart = e.x;
      if (resizeLineRef !== null && resizeLineRef !== void 0 && resizeLineRef.value) {
        resizeLineStyle.display = "block";
        resizeLineStyle.left = "".concat(resizeLinePos, "px");
        resizeLineStyle.height = "".concat(tableBoundRect.bottom - targetBoundRect.top, "px");
        var parent = tableContentRef.value.parentElement.getBoundingClientRect();
        resizeLineStyle.bottom = "".concat(parent.bottom - tableBoundRect.bottom, "px");
      }
      var onDragEnd = function onDragEnd() {
        if (resizeLineParams.isDragging) {
          var width = Math.ceil(parseInt(resizeLineStyle.left, 10) - colLeft) || 0;
          if (width <= minColWidth) {
            width = minColWidth;
          } else if (width >= maxColWidth) {
            width = maxColWidth;
          }
          if (resizeLineParams.effectCol === "next") {
            setThWidthListByColumnDrag(col, width, effectNextCol, {
              getThWidthList: getThWidthList,
              DEFAULT_MIN_WIDTH: DEFAULT_MIN_WIDTH
            }, function (updateMap, notCalculateCols) {
              updateThWidthList(updateMap);
              setNotCalculateWidthCols(notCalculateCols);
            });
          } else if (resizeLineParams.effectCol === "prev") {
            setThWidthListByColumnDrag(effectPrevCol, width, col, {
              getThWidthList: getThWidthList,
              DEFAULT_MIN_WIDTH: DEFAULT_MIN_WIDTH
            }, function (updateMap, notCalculateCols) {
              updateThWidthList(updateMap);
              setNotCalculateWidthCols(notCalculateCols);
            });
          }
          resizeLineParams.isDragging = false;
          resizeLineParams.draggingCol = null;
          resizeLineParams.effectCol = null;
          target.style.cursor = "";
          resizeLineStyle.display = "none";
          resizeLineStyle.left = "0";
          document.removeEventListener("mousemove", onDragOver);
          document.removeEventListener("mouseup", onDragEnd);
          document.onselectstart = null;
          document.ondragstart = null;
        }
        refreshTable();
      };
      var onDragOver = function onDragOver(e2) {
        if (resizeLineParams.isDragging) {
          var left = resizeLinePos + e2.x - resizeLineParams.draggingStart;
          resizeLineStyle.left = "".concat(Math.min(Math.max(left, minResizeLineLeft), maxResizeLineLeft), "px");
        }
      };
      document.addEventListener("mouseup", onDragEnd);
      document.addEventListener("mousemove", onDragOver);
      document.onselectstart = function () {
        return false;
      };
      document.ondragstart = function () {
        return false;
      };
    };
    var recalculateColWidth = function recalculateColWidth(columns, thWidthList, tableLayout, tableElmWidth) {
      recalculateColumnWidth(columns, thWidthList, tableLayout, tableElmWidth, notCalculateWidthCols.value, function (widthMap) {
        updateThWidthList(widthMap);
        if (notCalculateWidthCols.value.length) {
          notCalculateWidthCols.value = [];
        }
      });
    };
    return {
      resizeLineRef: resizeLineRef,
      resizeLineStyle: resizeLineStyle,
      onColumnMouseover: onColumnMouseover,
      onColumnMousedown: onColumnMousedown,
      recalculateColWidth: recalculateColWidth,
      setEffectColMap: setEffectColMap
    };
  }

  function getScrollbarWidth() {
    var defaultScrollbarWidth = 6;
    if (!navigator) return defaultScrollbarWidth;
    if (/(Chrome|Safari)/i.test(navigator.userAgent)) return defaultScrollbarWidth;
    var scrollDiv = document.createElement("div");
    scrollDiv.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    if (/Firefox/.test(navigator.userAgent)) {
      scrollbarWidth -= 4;
    }
    if (getIEVersion() <= 11) {
      scrollbarWidth = 12;
    }
    return scrollbarWidth;
  }

  function ownKeys$z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getColumnFixedStyles(col, index, rowAndColFixedPosition, tableColFixedClasses) {
    var _thClasses;
    var fixedPos = rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(col.colKey || index);
    if (!fixedPos) return {};
    var thClasses = (_thClasses = {}, _defineProperty$3(_thClasses, tableColFixedClasses.left, col.fixed === "left"), _defineProperty$3(_thClasses, tableColFixedClasses.right, col.fixed === "right"), _defineProperty$3(_thClasses, tableColFixedClasses.lastLeft, col.fixed === "left" && fixedPos.lastLeftFixedCol), _defineProperty$3(_thClasses, tableColFixedClasses.firstRight, col.fixed === "right" && fixedPos.firstRightFixedCol), _thClasses);
    var thStyles = {
      left: col.fixed === "left" ? "".concat(fixedPos.left, "px") : void 0,
      right: col.fixed === "right" ? "".concat(fixedPos.right, "px") : void 0
    };
    return {
      style: thStyles,
      classes: thClasses
    };
  }
  function getRowFixedStyles(rowId, rowIndex, rowLength, fixedRows, rowAndColFixedPosition, tableRowFixedClasses) {
    var _rowClasses;
    if (!fixedRows || !fixedRows.length) return {
      style: void 0,
      classes: void 0
    };
    var fixedTop = rowIndex < fixedRows[0];
    var fixedBottom = rowIndex > rowLength - 1 - fixedRows[1];
    var firstFixedBottomRow = rowLength - fixedRows[1];
    var fixedPos = (rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(rowId)) || {};
    var rowClasses = (_rowClasses = {}, _defineProperty$3(_rowClasses, tableRowFixedClasses.top, fixedTop), _defineProperty$3(_rowClasses, tableRowFixedClasses.bottom, fixedBottom), _defineProperty$3(_rowClasses, tableRowFixedClasses.firstBottom, rowIndex === firstFixedBottomRow), _defineProperty$3(_rowClasses, tableRowFixedClasses.withoutBorderBottom, rowIndex === firstFixedBottomRow - 1), _rowClasses);
    var rowStyles = {
      top: fixedTop ? "".concat(fixedPos.top, "px") : void 0,
      bottom: fixedBottom ? "".concat(fixedPos.bottom, "px") : void 0
    };
    return {
      style: rowStyles,
      classes: rowClasses
    };
  }
  function useFixed(props, context, finalColumns, affixRef) {
    var _toRefs = vue.toRefs(props),
      columns = _toRefs.columns,
      tableLayout = _toRefs.tableLayout,
      tableContentWidth = _toRefs.tableContentWidth,
      fixedRows = _toRefs.fixedRows,
      firstFullRow = _toRefs.firstFullRow,
      lastFullRow = _toRefs.lastFullRow,
      maxHeight = _toRefs.maxHeight,
      headerAffixedTop = _toRefs.headerAffixedTop,
      footerAffixedBottom = _toRefs.footerAffixedBottom,
      bordered = _toRefs.bordered,
      resizable = _toRefs.resizable,
      allowResizeColumnWidth = _toRefs.allowResizeColumnWidth;
    var data = vue.ref([]);
    var tableRef = vue.ref();
    var tableContentRef = vue.ref();
    var isFixedHeader = vue.ref(false);
    var isWidthOverflow = vue.ref(false);
    var tableElmRef = vue.ref();
    var scrollbarWidth = vue.ref(6);
    var rowAndColFixedPosition = vue.ref( /* @__PURE__ */new Map());
    var showColumnShadow = vue.reactive({
      left: false,
      right: false
    });
    var virtualScrollHeaderPos = vue.ref({
      left: 0,
      top: 0
    });
    var tableWidth = vue.ref(0);
    var tableElmWidth = vue.ref(0);
    var thWidthList = vue.ref({});
    var isFixedColumn = vue.ref(false);
    var isFixedRightColumn = vue.ref(false);
    var isFixedLeftColumn = vue.ref(false);
    var columnResizable = vue.computed(function () {
      return resizable.value || allowResizeColumnWidth.value || false;
    });
    var notNeedThWidthList = vue.computed(function () {
      var _props$scroll;
      return !(props.headerAffixedTop || props.footerAffixedBottom || props.horizontalScrollAffixedBottom || ((_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual");
    });
    var recalculateColWidth = vue.ref(function () {});
    function setUseFixedTableElmRef(val) {
      tableElmRef.value = val;
    }
    function setRecalculateColWidthFuncRef(val) {
      recalculateColWidth.value = val;
    }
    function getColumnMap(columns2) {
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Map();
      var levelNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var parent = arguments.length > 4 ? arguments[4] : undefined;
      for (var i = 0, len = columns2.length; i < len; i++) {
        var _col$children;
        var col = columns2[i];
        if (["left", "right"].includes(col.fixed)) {
          isFixedColumn.value = true;
        }
        if (col.fixed === "right") {
          isFixedRightColumn.value = true;
        }
        if (col.fixed === "left") {
          isFixedLeftColumn.value = true;
        }
        var key = col.colKey || i;
        var columnInfo = {
          col: col,
          parent: parent,
          index: i
        };
        map.set(key, columnInfo);
        if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
          getColumnMap(col.children, map, levelNodes, level + 1, columnInfo);
        }
        if (levelNodes[level]) {
          levelNodes[level].push(columnInfo);
        } else {
          levelNodes[level] = [columnInfo];
        }
      }
      return {
        newColumnsMap: map,
        levelNodes: levelNodes
      };
    }
    var setFixedLeftPos = function setFixedLeftPos(columns2, initialColumnMap) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      for (var i = 0, len = columns2.length; i < len; i++) {
        var _col$children2;
        var col = columns2[i];
        if (col.fixed === "right") return;
        var colInfo = initialColumnMap.get(col.colKey || i);
        var lastColIndex = i - 1;
        while (lastColIndex >= 0 && columns2[lastColIndex].fixed !== "left") {
          lastColIndex -= 1;
        }
        var lastCol = columns2[lastColIndex];
        var defaultWidth = i === 0 ? (parent === null || parent === void 0 ? void 0 : parent.left) || 0 : 0;
        var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i - 1);
        colInfo.left = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.left) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);
        if ((_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
          setFixedLeftPos(col.children, initialColumnMap, colInfo);
        }
      }
    };
    var setFixedRightPos = function setFixedRightPos(columns2, initialColumnMap) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      for (var i = columns2.length - 1; i >= 0; i--) {
        var _col$children3;
        var col = columns2[i];
        if (col.fixed === "left") return;
        var colInfo = initialColumnMap.get(col.colKey || i);
        var lastColIndex = i + 1;
        while (lastColIndex < columns2.length && columns2[lastColIndex].fixed !== "right") {
          lastColIndex += 1;
        }
        var lastCol = columns2[lastColIndex];
        var defaultWidth = i === columns2.length - 1 ? (parent === null || parent === void 0 ? void 0 : parent.right) || 0 : 0;
        var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i + 1);
        colInfo.right = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.right) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);
        if ((_col$children3 = col.children) !== null && _col$children3 !== void 0 && _col$children3.length) {
          setFixedRightPos(col.children, initialColumnMap, colInfo);
        }
      }
    };
    var setFixedColPosition = function setFixedColPosition(trList, initialColumnMap) {
      if (!trList) return;
      for (var i = 0, len = trList.length; i < len; i++) {
        var thList = trList[i].children;
        for (var j = 0, thLen = thList.length; j < thLen; j++) {
          var _obj$col;
          var th = thList[j];
          var colKey = th.dataset.colkey;
          if (!colKey) {
            log.warn("TDesign Table", "".concat(th.innerText, " missing colKey. colKey is required for fixed column feature."));
          }
          var obj = initialColumnMap.get(colKey || j);
          if (obj !== null && obj !== void 0 && (_obj$col = obj.col) !== null && _obj$col !== void 0 && _obj$col.fixed) {
            initialColumnMap.set(colKey, _objectSpread$y(_objectSpread$y({}, obj), {}, {
              width: th.getBoundingClientRect().width
            }));
          }
        }
      }
      setFixedLeftPos(columns.value, initialColumnMap);
      setFixedRightPos(columns.value, initialColumnMap);
    };
    var setFixedRowPosition = function setFixedRowPosition(trList, initialColumnMap, thead, tfoot) {
      var _ref = fixedRows.value || [],
        _ref2 = _slicedToArray(_ref, 2),
        fixedTopRows = _ref2[0],
        fixedBottomRows = _ref2[1];
      var data2 = props.data,
        _props$rowKey = props.rowKey,
        rowKey = _props$rowKey === void 0 ? "id" : _props$rowKey;
      for (var i = 0; i < fixedTopRows; i++) {
        var tr = trList[i];
        var rowId = get_1(data2[i], rowKey);
        var thisRowInfo = initialColumnMap.get(rowId) || {};
        var lastRowId = get_1(data2[i - 1], rowKey);
        var lastRowInfo = initialColumnMap.get(lastRowId) || {};
        var defaultBottom = 0;
        if (i === 0) {
          defaultBottom = (thead === null || thead === void 0 ? void 0 : thead.getBoundingClientRect().height) || 0;
        }
        thisRowInfo.top = (lastRowInfo.top || defaultBottom) + (lastRowInfo.height || 0);
        initialColumnMap.set(rowId, _objectSpread$y(_objectSpread$y({}, thisRowInfo), {}, {
          height: tr.getBoundingClientRect().height
        }));
      }
      for (var _i = data2.length - 1; _i >= data2.length - fixedBottomRows; _i--) {
        var _tr = trList[_i];
        var _rowId = get_1(data2[_i], rowKey);
        var _thisRowInfo = initialColumnMap.get(_rowId) || {};
        var _lastRowId = get_1(data2[_i + 1], rowKey);
        var _lastRowInfo = initialColumnMap.get(_lastRowId) || {};
        var _defaultBottom = 0;
        if (_i === data2.length - 1) {
          _defaultBottom = (tfoot === null || tfoot === void 0 ? void 0 : tfoot.getBoundingClientRect().height) || 0;
        }
        _thisRowInfo.bottom = (_lastRowInfo.bottom || _defaultBottom) + (_lastRowInfo.height || 0);
        initialColumnMap.set(_rowId, _objectSpread$y(_objectSpread$y({}, _thisRowInfo), {}, {
          height: _tr.getBoundingClientRect().height
        }));
      }
    };
    var updateRowAndColFixedPosition = function updateRowAndColFixedPosition(tableContentElm, initialColumnMap) {
      rowAndColFixedPosition.value.clear();
      if (!tableContentElm) return;
      var thead = tableContentElm.querySelector("thead");
      thead && setFixedColPosition(thead.children, initialColumnMap);
      var tbody = tableContentElm.querySelector("tbody");
      var tfoot = tableContentElm.querySelector("tfoot");
      tbody && setFixedRowPosition(tbody.children, initialColumnMap, thead, tfoot);
      rowAndColFixedPosition.value = initialColumnMap;
    };
    var shadowLastScrollLeft;
    var updateColumnFixedShadow = function updateColumnFixedShadow(target, extra) {
      if (!isFixedColumn.value || !target) return;
      var scrollLeft = target.scrollLeft;
      if (shadowLastScrollLeft === scrollLeft && (!extra || !extra.skipScrollLimit)) return;
      shadowLastScrollLeft = scrollLeft;
      var isShowRight = target.clientWidth + scrollLeft < target.scrollWidth;
      showColumnShadow.left = scrollLeft > 0;
      showColumnShadow.right = isShowRight;
    };
    var setIsLastOrFirstFixedCol = function setIsLastOrFirstFixedCol(levelNodes) {
      for (var t = 0; t < levelNodes.length; t++) {
        var nodes = levelNodes[t];
        for (var i = 0, len = nodes.length; i < len; i++) {
          var _nextColMapInfo, _lastColMapInfo;
          var colMapInfo = nodes[i];
          var nextColMapInfo = nodes[i + 1];
          var parent = colMapInfo.parent;
          var isParentLastLeftFixedCol = !parent || (parent === null || parent === void 0 ? void 0 : parent.lastLeftFixedCol);
          if (isParentLastLeftFixedCol && colMapInfo.col.fixed === "left" && ((_nextColMapInfo = nextColMapInfo) === null || _nextColMapInfo === void 0 ? void 0 : _nextColMapInfo.col.fixed) !== "left") {
            colMapInfo.lastLeftFixedCol = true;
          }
          var lastColMapInfo = nodes[i - 1];
          var isParentFirstRightFixedCol = !parent || (parent === null || parent === void 0 ? void 0 : parent.firstRightFixedCol);
          if (isParentFirstRightFixedCol && colMapInfo.col.fixed === "right" && ((_lastColMapInfo = lastColMapInfo) === null || _lastColMapInfo === void 0 ? void 0 : _lastColMapInfo.col.fixed) !== "right") {
            colMapInfo.firstRightFixedCol = true;
          }
        }
      }
    };
    var updateFixedStatus = function updateFixedStatus() {
      var _getColumnMap = getColumnMap(columns.value),
        newColumnsMap = _getColumnMap.newColumnsMap,
        levelNodes = _getColumnMap.levelNodes;
      setIsLastOrFirstFixedCol(levelNodes);
      var timer = setTimeout(function () {
        var _fixedRows$value;
        if (isFixedColumn.value || (_fixedRows$value = fixedRows.value) !== null && _fixedRows$value !== void 0 && _fixedRows$value.length) {
          updateRowAndColFixedPosition(tableContentRef.value, newColumnsMap);
        }
        clearTimeout(timer);
      }, 0);
      return function () {
        clearTimeout(timer);
      };
    };
    var updateFixedHeader = function updateFixedHeader() {
      var timer = setTimeout(function () {
        if (!tableContentRef.value) return;
        isFixedHeader.value = tableContentRef.value.scrollHeight > tableContentRef.value.clientHeight;
        isWidthOverflow.value = tableContentRef.value.scrollWidth > tableContentRef.value.clientWidth;
        var pos = tableContentRef.value.getBoundingClientRect();
        virtualScrollHeaderPos.value = {
          top: pos.top,
          left: pos.left
        };
        clearTimeout(timer);
      }, 0);
    };
    var updateTableWidth = function updateTableWidth() {
      var _tableContentRef$valu, _tableElmRef$value;
      var rect = (_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect();
      if (!rect) return;
      var reduceWidth = isFixedHeader.value ? scrollbarWidth.value : 0;
      tableWidth.value = rect.width - reduceWidth - (props.bordered ? 1 : 0);
      var elmRect = tableElmRef === null || tableElmRef === void 0 ? void 0 : (_tableElmRef$value = tableElmRef.value) === null || _tableElmRef$value === void 0 ? void 0 : _tableElmRef$value.getBoundingClientRect();
      tableElmWidth.value = elmRect === null || elmRect === void 0 ? void 0 : elmRect.width;
    };
    var updateAffixPosition = function updateAffixPosition() {
      var _affixRef$paginationA, _affixRef$paginationA2, _affixRef$horizontalS, _affixRef$horizontalS2, _affixRef$headerTopAf, _affixRef$headerTopAf2, _affixRef$headerTopAf3;
      (_affixRef$paginationA = affixRef.paginationAffixRef.value) === null || _affixRef$paginationA === void 0 ? void 0 : (_affixRef$paginationA2 = _affixRef$paginationA.handleScroll) === null || _affixRef$paginationA2 === void 0 ? void 0 : _affixRef$paginationA2.call(_affixRef$paginationA);
      (_affixRef$horizontalS = affixRef.horizontalScrollAffixRef.value) === null || _affixRef$horizontalS === void 0 ? void 0 : (_affixRef$horizontalS2 = _affixRef$horizontalS.handleScroll) === null || _affixRef$horizontalS2 === void 0 ? void 0 : _affixRef$horizontalS2.call(_affixRef$horizontalS);
      (_affixRef$headerTopAf = affixRef.headerTopAffixRef) === null || _affixRef$headerTopAf === void 0 ? void 0 : (_affixRef$headerTopAf2 = _affixRef$headerTopAf.value) === null || _affixRef$headerTopAf2 === void 0 ? void 0 : (_affixRef$headerTopAf3 = _affixRef$headerTopAf2.handleScroll) === null || _affixRef$headerTopAf3 === void 0 ? void 0 : _affixRef$headerTopAf3.call(_affixRef$headerTopAf2);
    };
    var updateThWidthList = function updateThWidthList(trList) {
      if (trList instanceof HTMLCollection) {
        if (columnResizable.value) return;
        var widthMap = {};
        for (var i = 0, len = trList.length; i < len; i++) {
          var thList = trList[i].children;
          for (var j = 0, thLen = thList.length; j < thLen; j++) {
            var th = thList[j];
            var colKey = th.dataset.colkey;
            widthMap[colKey] = th.getBoundingClientRect().width;
          }
        }
        thWidthList.value = widthMap;
      } else {
        if (!thWidthList.value) {
          thWidthList.value = {};
        }
        Object.entries(trList).forEach(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
            colKey = _ref4[0],
            width = _ref4[1];
          thWidthList.value[colKey] = width;
        });
      }
    };
    var updateThWidthListHandler = function updateThWidthListHandler() {
      if (columnResizable.value) {
        recalculateColWidth.value(finalColumns.value, thWidthList.value, tableLayout.value, tableElmWidth.value);
      }
      if (notNeedThWidthList.value) return;
      var timer = setTimeout(function () {
        var _tableContentRef$valu2;
        updateTableWidth();
        var thead = (_tableContentRef$valu2 = tableContentRef.value) === null || _tableContentRef$valu2 === void 0 ? void 0 : _tableContentRef$valu2.querySelector("thead");
        if (!thead) return;
        updateThWidthList(thead.children);
        clearTimeout(timer);
      }, 0);
    };
    var resetThWidthList = function resetThWidthList() {
      thWidthList.value = {};
    };
    var emitScrollEvent = function emitScrollEvent(e) {
      var _props$onScrollX, _props$onScrollY, _props$onScroll;
      (_props$onScrollX = props.onScrollX) === null || _props$onScrollX === void 0 ? void 0 : _props$onScrollX.call(props, {
        e: e
      });
      (_props$onScrollY = props.onScrollY) === null || _props$onScrollY === void 0 ? void 0 : _props$onScrollY.call(props, {
        e: e
      });
      (_props$onScroll = props.onScroll) === null || _props$onScroll === void 0 ? void 0 : _props$onScroll.call(props, {
        e: e
      });
    };
    var getThWidthList = function getThWidthList() {
      if (!thWidthList.value) {
        thWidthList.value = {};
      }
      return thWidthList.value;
    };
    vue.watch([data, columns, bordered, tableLayout, tableContentWidth, isFixedHeader, isWidthOverflow, isFixedColumn, fixedRows, firstFullRow, lastFullRow], updateFixedStatus, {
      immediate: true
    });
    vue.watch([isFixedColumn, columns], function () {
      var timer = setTimeout(function () {
        if (isFixedColumn.value) {
          updateColumnFixedShadow(tableContentRef.value);
        }
        clearTimeout(timer);
      }, 0);
    }, {
      immediate: true
    });
    vue.watch([maxHeight, data, columns, bordered], updateFixedHeader, {
      immediate: true
    });
    vue.watch(finalColumns, function () {
      resetThWidthList();
      if (columnResizable.value) {
        recalculateColWidth.value(finalColumns.value, thWidthList.value, tableLayout.value, tableElmWidth.value);
      }
    });
    vue.watch([data, columns, bordered, tableLayout, fixedRows, isFixedHeader, headerAffixedTop, footerAffixedBottom, tableContentWidth], function () {
      updateThWidthListHandler();
      updateAffixPosition();
    }, {
      immediate: true
    });
    var refreshTable = debounce_1(function () {
      updateTableWidth();
      updateFixedHeader();
      updateThWidthListHandler();
      updateAffixPosition();
      if (isFixedColumn.value || isFixedHeader.value) {
        updateFixedStatus();
        updateColumnFixedShadow(tableContentRef.value, {
          skipScrollLimit: true
        });
      }
    }, 30);
    var onResize = refreshTable;
    var resizeObserver = null;
    function addTableResizeObserver(tableElement) {
      if (getIEVersion() < 11 || typeof window.ResizeObserver === "undefined") return;
      off$1(window, "resize", onResize);
      resizeObserver = new window.ResizeObserver(function () {
        refreshTable();
      });
      resizeObserver.observe(tableElement);
      tableRef.value = tableElement;
    }
    vue.onMounted(function () {
      var scrollWidth = getScrollbarWidth();
      scrollbarWidth.value = scrollWidth;
      var timer = setTimeout(function () {
        updateTableWidth();
        if (columnResizable.value) {
          recalculateColWidth.value(finalColumns.value, thWidthList.value, tableLayout.value, tableElmWidth.value);
        }
        clearTimeout(timer);
      });
      var isWatchResize = isFixedColumn.value || isFixedHeader.value || !notNeedThWidthList.value || !data.value.length;
      if (isWatchResize && getIEVersion() < 11 || typeof window.ResizeObserver === "undefined") {
        on$1(window, "resize", onResize);
      }
    });
    vue.onBeforeUnmount(function () {
      var _resizeObserver, _resizeObserver2;
      off$1(window, "resize", onResize);
      (_resizeObserver = resizeObserver) === null || _resizeObserver === void 0 ? void 0 : _resizeObserver.unobserve(tableRef.value);
      (_resizeObserver2 = resizeObserver) === null || _resizeObserver2 === void 0 ? void 0 : _resizeObserver2.disconnect();
    });
    var setData = function setData(dataSource) {
      data.value = dataSource;
    };
    return {
      tableWidth: tableWidth,
      tableElmWidth: tableElmWidth,
      thWidthList: thWidthList,
      isFixedHeader: isFixedHeader,
      isWidthOverflow: isWidthOverflow,
      tableContentRef: tableContentRef,
      isFixedColumn: isFixedColumn,
      showColumnShadow: showColumnShadow,
      rowAndColFixedPosition: rowAndColFixedPosition,
      virtualScrollHeaderPos: virtualScrollHeaderPos,
      scrollbarWidth: scrollbarWidth,
      setData: setData,
      refreshTable: refreshTable,
      emitScrollEvent: emitScrollEvent,
      updateThWidthListHandler: updateThWidthListHandler,
      updateColumnFixedShadow: updateColumnFixedShadow,
      setUseFixedTableElmRef: setUseFixedTableElmRef,
      getThWidthList: getThWidthList,
      updateThWidthList: updateThWidthList,
      setRecalculateColWidthFuncRef: setRecalculateColWidthFuncRef,
      addTableResizeObserver: addTableResizeObserver
    };
  }

  function ownKeys$y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function usePagination(props) {
    var _toRefs = vue.toRefs(props),
      pagination = _toRefs.pagination,
      data = _toRefs.data,
      disableDataPage = _toRefs.disableDataPage;
    var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;
    var dataSource = vue.ref([]);
    var isPaginateData = vue.ref(false);
    var updateDataSourceAndPaginate = function updateDataSourceAndPaginate() {
      var current = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      var data2 = props.data;
      var t = Boolean(!disableDataPage.value && data2.length > pageSize);
      isPaginateData.value = t;
      if (t) {
        var start = (current - 1) * pageSize;
        var end = current * pageSize;
        dataSource.value = data2.slice(start, end);
      } else {
        dataSource.value = data2;
      }
    };
    vue.watch(function () {
      var _pagination$value, _pagination$value2;
      return [(_pagination$value = pagination.value) === null || _pagination$value === void 0 ? void 0 : _pagination$value.current, (_pagination$value2 = pagination.value) === null || _pagination$value2 === void 0 ? void 0 : _pagination$value2.pageSize, data.value.length, disableDataPage];
    }, function () {
      if (!pagination.value || !pagination.value.current) return;
      updateDataSourceAndPaginate(pagination.value.current, pagination.value.pageSize);
    }, {
      immediate: true
    });
    vue.watch([data], function () {
      if (!pagination.value || !pagination.value.defaultCurrent) return;
      updateDataSourceAndPaginate(pagination.value.defaultCurrent, pagination.value.defaultPageSize);
    }, {
      immediate: true
    });
    var renderPagination = function renderPagination() {
      if (!props.pagination) return null;
      var paginationProps = _objectSpread$x({}, props.pagination);
      delete paginationProps.onChange;
      return vue.createVNode("div", {
        "class": "".concat(classPrefix.value, "-table__pagination")
      }, [vue.createVNode(Pagination, vue.mergeProps(paginationProps, {
        "onChange": function onChange(pageInfo) {
          var _props$pagination, _props$pagination$onC, _props$onPageChange;
          (_props$pagination = props.pagination) === null || _props$pagination === void 0 ? void 0 : (_props$pagination$onC = _props$pagination.onChange) === null || _props$pagination$onC === void 0 ? void 0 : _props$pagination$onC.call(_props$pagination, pageInfo);
          (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props, pageInfo, dataSource.value);
          if (pagination && !pagination.value.current && pagination.value.defaultCurrent) {
            updateDataSourceAndPaginate(pageInfo.current, pageInfo.pageSize);
          }
        }
      }), null)]);
    };
    return {
      isPaginateData: isPaginateData,
      dataSource: dataSource,
      renderPagination: renderPagination
    };
  }

  function useAffix(props) {
    var tableContentRef = vue.ref();
    var affixHeaderRef = vue.ref();
    var affixFooterRef = vue.ref();
    var horizontalScrollbarRef = vue.ref();
    var paginationRef = vue.ref();
    var showAffixHeader = vue.ref(true);
    var showAffixFooter = vue.ref(true);
    var showAffixPagination = vue.ref(true);
    var isVirtualScroll = vue.computed(function () {
      return props.scroll && props.scroll.type === "virtual" && (props.scroll.threshold || 100) < props.data.length;
    });
    var isAffixed = vue.computed(function () {
      return !!(props.headerAffixedTop || props.footerAffixedBottom || props.horizontalScrollAffixedBottom);
    });
    var lastScrollLeft = 0;
    var onHorizontalScroll = function onHorizontalScroll(scrollElement) {
      if (!isAffixed.value && !isVirtualScroll.value) return;
      var target = scrollElement;
      if (!target && tableContentRef.value) {
        lastScrollLeft = 0;
        target = tableContentRef.value;
      }
      if (!target) return;
      var left = target.scrollLeft;
      if (lastScrollLeft === left) return;
      lastScrollLeft = left;
      var toUpdateScrollElement = [tableContentRef.value, affixHeaderRef.value, affixFooterRef.value, horizontalScrollbarRef.value];
      for (var i = 0, len = toUpdateScrollElement.length; i < len; i++) {
        if (toUpdateScrollElement[i] && scrollElement !== toUpdateScrollElement[i]) {
          toUpdateScrollElement[i].scrollLeft = left;
        }
      }
    };
    var isAffixedBottomElementShow = function isAffixedBottomElementShow(elementRect, tableRect, headerHeight) {
      return tableRect.top + headerHeight < elementRect.top && elementRect.top > elementRect.height;
    };
    var getOffsetTop = function getOffsetTop(props2) {
      if (typeof props2 === "boolean") return 0;
      return props2.offsetTop || 0;
    };
    var updateAffixHeaderOrFooter = function updateAffixHeaderOrFooter() {
      var _tableContentRef$valu, _tableContentRef$valu2, _tableContentRef$valu3, _affixFooterRef$value;
      if (!isAffixed.value && !isVirtualScroll.value) return;
      var pos = (_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect();
      var headerRect = (_tableContentRef$valu2 = tableContentRef.value) === null || _tableContentRef$valu2 === void 0 ? void 0 : (_tableContentRef$valu3 = _tableContentRef$valu2.querySelector("thead")) === null || _tableContentRef$valu3 === void 0 ? void 0 : _tableContentRef$valu3.getBoundingClientRect();
      var headerHeight = (headerRect === null || headerRect === void 0 ? void 0 : headerRect.height) || 0;
      var footerRect = (_affixFooterRef$value = affixFooterRef.value) === null || _affixFooterRef$value === void 0 ? void 0 : _affixFooterRef$value.getBoundingClientRect();
      if ((props.headerAffixedTop || isVirtualScroll.value) && affixHeaderRef.value) {
        var offsetTop = getOffsetTop(props.headerAffixProps || props.headerAffixedTop);
        var footerHeight = (footerRect === null || footerRect === void 0 ? void 0 : footerRect.height) || 0;
        var r = Math.abs(pos.top) < pos.height - headerHeight - offsetTop - footerHeight;
        if (isVirtualScroll.value) {
          r = pos.top > -1 * headerRect.height;
        }
        showAffixHeader.value = r;
      }
      if (props.footerAffixedBottom && affixFooterRef !== null && affixFooterRef !== void 0 && affixFooterRef.value) {
        showAffixFooter.value = isAffixedBottomElementShow(footerRect, pos, headerHeight);
      } else if (props.horizontalScrollAffixedBottom && horizontalScrollbarRef !== null && horizontalScrollbarRef !== void 0 && horizontalScrollbarRef.value) {
        var horizontalScrollbarRect = horizontalScrollbarRef.value.getBoundingClientRect();
        showAffixFooter.value = isAffixedBottomElementShow(horizontalScrollbarRect, pos, headerHeight);
      }
      if (props.paginationAffixedBottom && paginationRef.value) {
        var pageRect = paginationRef.value.getBoundingClientRect();
        showAffixPagination.value = isAffixedBottomElementShow(pageRect, pos, headerHeight);
      }
    };
    var onDocumentScroll = function onDocumentScroll() {
      updateAffixHeaderOrFooter();
    };
    var onFootScroll = function onFootScroll() {
      onHorizontalScroll(affixFooterRef.value);
    };
    var onHeaderScroll = function onHeaderScroll() {
      onHorizontalScroll(affixHeaderRef.value);
    };
    var horizontalScrollbarScroll = function horizontalScrollbarScroll() {
      onHorizontalScroll(horizontalScrollbarRef.value);
    };
    var onTableContentScroll = function onTableContentScroll() {
      onHorizontalScroll(tableContentRef.value);
    };
    var onFootMouseEnter = function onFootMouseEnter() {
      on$1(affixFooterRef.value, "scroll", onFootScroll);
    };
    var onFootMouseLeave = function onFootMouseLeave() {
      off$1(affixFooterRef.value, "scroll", onFootScroll);
    };
    var onHeaderMouseEnter = function onHeaderMouseEnter() {
      on$1(affixHeaderRef.value, "scroll", onHeaderScroll);
    };
    var onHeaderMouseLeave = function onHeaderMouseLeave() {
      off$1(affixHeaderRef.value, "scroll", onHeaderScroll);
    };
    var onScrollbarMouseEnter = function onScrollbarMouseEnter() {
      on$1(horizontalScrollbarRef.value, "scroll", horizontalScrollbarScroll);
    };
    var onScrollbarMouseLeave = function onScrollbarMouseLeave() {
      off$1(horizontalScrollbarRef.value, "scroll", horizontalScrollbarScroll);
    };
    var onTableContentMouseEnter = function onTableContentMouseEnter() {
      on$1(tableContentRef.value, "scroll", onTableContentScroll);
    };
    var onTableContentMouseLeave = function onTableContentMouseLeave() {
      off$1(tableContentRef.value, "scroll", onTableContentScroll);
    };
    var addHorizontalScrollListeners = function addHorizontalScrollListeners() {
      if (affixHeaderRef.value) {
        on$1(affixHeaderRef.value, "mouseenter", onHeaderMouseEnter);
        on$1(affixHeaderRef.value, "mouseleave", onHeaderMouseLeave);
      }
      if (props.footerAffixedBottom && affixFooterRef.value) {
        on$1(affixFooterRef.value, "mouseenter", onFootMouseEnter);
        on$1(affixFooterRef.value, "mouseleave", onFootMouseLeave);
      }
      if (props.horizontalScrollAffixedBottom && horizontalScrollbarRef.value) {
        on$1(horizontalScrollbarRef.value, "mouseenter", onScrollbarMouseEnter);
        on$1(horizontalScrollbarRef.value, "mouseleave", onScrollbarMouseLeave);
      }
      if ((isAffixed.value || isVirtualScroll.value) && tableContentRef.value) {
        on$1(tableContentRef.value, "mouseenter", onTableContentMouseEnter);
        on$1(tableContentRef.value, "mouseleave", onTableContentMouseLeave);
      }
    };
    var removeHorizontalScrollListeners = function removeHorizontalScrollListeners() {
      if (affixHeaderRef.value) {
        off$1(affixHeaderRef.value, "mouseenter", onHeaderMouseEnter);
        off$1(affixHeaderRef.value, "mouseleave", onHeaderMouseLeave);
      }
      if (affixFooterRef.value) {
        off$1(affixFooterRef.value, "mouseenter", onFootMouseEnter);
        off$1(affixFooterRef.value, "mouseleave", onFootMouseLeave);
      }
      if (tableContentRef.value) {
        off$1(tableContentRef.value, "mouseenter", onTableContentMouseEnter);
        off$1(tableContentRef.value, "mouseleave", onTableContentMouseLeave);
      }
      if (horizontalScrollbarRef.value) {
        off$1(horizontalScrollbarRef.value, "mouseenter", onScrollbarMouseEnter);
        off$1(horizontalScrollbarRef.value, "mouseleave", onScrollbarMouseLeave);
      }
    };
    var addVerticalScrollListener = function addVerticalScrollListener() {
      if (!isAffixed.value && !props.paginationAffixedBottom) return;
      var timer = setTimeout(function () {
        if (isAffixed.value || props.paginationAffixedBottom) {
          on$1(document, "scroll", onDocumentScroll);
        } else {
          off$1(document, "scroll", onDocumentScroll);
        }
        clearTimeout(timer);
      });
    };
    vue.watch([affixHeaderRef, affixFooterRef, horizontalScrollbarRef, tableContentRef], function () {
      addHorizontalScrollListeners();
      onHorizontalScroll();
      updateAffixHeaderOrFooter();
    });
    vue.watch(isAffixed, addVerticalScrollListener);
    vue.watch(function () {
      return [props.data, props.columns, props.headerAffixedTop, props.footerAffixedBottom, props.horizontalScrollAffixedBottom];
    }, function () {
      onHorizontalScroll();
    });
    vue.onBeforeMount(function () {
      off$1(document, "scroll", onDocumentScroll);
      removeHorizontalScrollListeners();
    });
    var setTableContentRef = function setTableContentRef(tableContent) {
      tableContentRef.value = tableContent;
      addVerticalScrollListener();
    };
    return {
      showAffixHeader: showAffixHeader,
      showAffixFooter: showAffixFooter,
      showAffixPagination: showAffixPagination,
      affixHeaderRef: affixHeaderRef,
      affixFooterRef: affixFooterRef,
      horizontalScrollbarRef: horizontalScrollbarRef,
      paginationRef: paginationRef,
      onHorizontalScroll: onHorizontalScroll,
      setTableContentRef: setTableContentRef,
      updateAffixHeaderOrFooter: updateAffixHeaderOrFooter
    };
  }

  function formatRowAttributes(attributes, params) {
    if (!attributes) return void 0;
    var attrList = attributes instanceof Array ? attributes : [attributes];
    var result = {};
    for (var i = 0; i < attrList.length; i++) {
      var attrItem = attrList[i];
      if (!attrItem) continue;
      var attrProperty = isFunction_1(attrItem) ? attrItem(params) : attrItem;
      result = attrProperty instanceof Array ? formatRowAttributes(attrProperty, params) : Object.assign(result, attrProperty);
    }
    return result;
  }
  function formatRowClassNames(rowClassNames, params, rowKey) {
    var rowClassList = rowClassNames instanceof Array ? rowClassNames : [rowClassNames];
    var row = params.row,
      rowIndex = params.rowIndex;
    var customClasses = [];
    for (var i = 0, len = rowClassList.length; i < len; i++) {
      var rName = rowClassList[i];
      var tClass = isFunction_1(rName) ? rName(params) : rName;
      if (isObject_1(tClass) && !(tClass instanceof Array)) {
        tClass[rowIndex] && (tClass = tClass[rowIndex]);
        var rowId = get_1(row, rowKey || "id");
        tClass[rowId] && (tClass = tClass[rowId]);
      } else if (tClass instanceof Array) {
        tClass = formatRowClassNames(tClass, params, rowKey);
      }
      customClasses = customClasses.concat(tClass);
    }
    return customClasses;
  }
  function formatClassNames(classNames, params) {
    var classes = classNames instanceof Array ? classNames : [classNames];
    var arr = [];
    for (var i = 0, len = classes.length; i < len; i++) {
      var cls = classes[i];
      if (isFunction_1(cls)) {
        arr.push(cls(params));
      } else {
        arr.push(cls);
      }
    }
    return arr;
  }
  function getCurrentRowByKey(columns, key) {
    if (!columns || !key) return;
    var col = columns === null || columns === void 0 ? void 0 : columns.find(function (t) {
      return t.colKey === key;
    });
    if (col) return col;
    for (var i = 0, len = columns.length; i < len; i++) {
      var _columns$i, _columns$i$children;
      if ((_columns$i = columns[i]) !== null && _columns$i !== void 0 && (_columns$i$children = _columns$i.children) !== null && _columns$i$children !== void 0 && _columns$i$children.length) {
        var _columns$i2;
        return getCurrentRowByKey((_columns$i2 = columns[i]) === null || _columns$i2 === void 0 ? void 0 : _columns$i2.children, key);
      }
    }
  }
  function getAffixProps(mainAffixProps, subAffixProps) {
    if (_typeof$2(mainAffixProps) === "object") return mainAffixProps;
    if (_typeof$2(subAffixProps) === "object") return subAffixProps;
    return {};
  }
  function getEditableKeysMap(keys, list, rowKey) {
    var map = {};
    for (var i = 0, len = list.length; i < len; i++) {
      var rowValue = get_1(list[i], rowKey);
      if (keys.includes(rowValue)) {
        map[rowValue] = true;
      }
    }
    return map;
  }
  function getColumnDataByKey(columns, colKey) {
    for (var i = 0, len = columns.length; i < len; i++) {
      var _columns$i$children2;
      if (columns[i].colKey === colKey) return columns[i];
      if ((_columns$i$children2 = columns[i].children) !== null && _columns$i$children2 !== void 0 && _columns$i$children2.length) {
        var t = getColumnDataByKey(columns[i].children, colKey);
        if (t) return t;
      }
    }
    return null;
  }
  function getColumnIndexByKey(columns, colKey) {
    for (var i = 0, len = columns.length; i < len; i++) {
      var _columns$i$children3;
      if (columns[i].colKey === colKey) {
        return i;
      }
      if ((_columns$i$children3 = columns[i].children) !== null && _columns$i$children3 !== void 0 && _columns$i$children3.length) {
        var t = getColumnDataByKey(columns[i].children, colKey);
        if (t) return i;
      }
    }
    return -1;
  }

  function useLazyLoad(containerRef, childRef, params) {
    var tRowHeight = vue.computed(function () {
      return Math.max(params.rowHeight || 48, 48);
    });
    var isInit = vue.ref(params.rowIndex === 0);
    var hasLazyLoadHolder = vue.computed(function () {
      return (params === null || params === void 0 ? void 0 : params.type) === "lazy" && !isInit.value;
    });
    var requestAnimationFrame = !isServer$1 && window.requestAnimationFrame || function (cb) {
      return setTimeout(cb, 16.6);
    };
    var init = function init() {
      if (!isInit.value) {
        requestAnimationFrame(function () {
          isInit.value = true;
        });
      }
    };
    vue.onMounted(function () {
      if ((params === null || params === void 0 ? void 0 : params.type) !== "lazy") return;
      vue.nextTick(function () {
        var bufferSize = Math.max(10, params.bufferSize || 10);
        var height = tRowHeight.value * bufferSize;
        observe(childRef.value, containerRef.value, init, height);
      });
    });
    return {
      hasLazyLoadHolder: hasLazyLoadHolder,
      tRowHeight: tRowHeight
    };
  }

  function getCellKey(row, rowKey, colKey, colIndex) {
    var rowValue = get_1(row, rowKey);
    if (rowValue === void 0) {
      log.error("Table", "rowKey is wrong, can not get unique identifier of row.");
    }
    return [rowValue, colKey || colIndex].join("_");
  }
  function useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan) {
    var skipSpansMap = vue.ref( /* @__PURE__ */new Map());
    var onTrRowspanOrColspan = function onTrRowspanOrColspan(params, skipSpansValue) {
      var rowIndex = params.rowIndex,
        colIndex = params.colIndex;
      if (!skipSpansValue.rowspan && !skipSpansValue.colspan) return;
      var maxRowIndex = rowIndex + (skipSpansValue.rowspan || 1);
      var maxColIndex = colIndex + (skipSpansValue.colspan || 1);
      for (var i = rowIndex; i < maxRowIndex; i++) {
        for (var j = colIndex; j < maxColIndex; j++) {
          if (i !== rowIndex || j !== colIndex) {
            if (!data.value[i] || !columns.value[j]) return;
            var cellKey = getCellKey(data.value[i], rowKey.value, columns.value[j].colKey, j);
            var state = skipSpansMap.value.get(cellKey) || {};
            state.skipped = true;
            skipSpansMap.value.set(cellKey, state);
          }
        }
      }
    };
    var updateSkipSpansMap = function updateSkipSpansMap(data2, columns2, rowspanAndColspan2) {
      var _skipSpansMap$value;
      (_skipSpansMap$value = skipSpansMap.value) === null || _skipSpansMap$value === void 0 ? void 0 : _skipSpansMap$value.clear();
      if (!data2 || !rowspanAndColspan2) return;
      for (var i = 0, len = data2.length; i < len; i++) {
        var row = data2[i];
        for (var j = 0, colLen = columns2.length; j < colLen; j++) {
          var col = columns2[j];
          var params = {
            row: row,
            col: col,
            rowIndex: i,
            colIndex: j
          };
          var cellKey = getCellKey(row, rowKey.value, col.colKey, j);
          var state = skipSpansMap.value.get(cellKey) || {};
          var o = rowspanAndColspan2(params) || {};
          if (o.rowspan || o.colspan || state.rowspan || state.colspan) {
            o.rowspan && (state.rowspan = o.rowspan);
            o.colspan && (state.colspan = o.colspan);
            skipSpansMap.value.set(cellKey, state);
          }
          onTrRowspanOrColspan === null || onTrRowspanOrColspan === void 0 ? void 0 : onTrRowspanOrColspan(params, state);
        }
      }
    };
    vue.watch(function () {
      return [data.value, columns.value, rowspanAndColspan];
    }, function () {
      updateSkipSpansMap(data.value, columns.value, rowspanAndColspan === null || rowspanAndColspan === void 0 ? void 0 : rowspanAndColspan.value);
    }, {
      immediate: true
    });
    return {
      skipSpansMap: skipSpansMap
    };
  }

  function ownKeys$x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$x(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$5(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var TABLE_PROPS = ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
  var ROW_LISTENERS = ["click", "dblclick", "mouseover", "mousedown", "mouseenter", "mouseleave", "mouseup"];
  function renderCell(params, slots, extra) {
    var col = params.col,
      row = params.row,
      rowIndex = params.rowIndex;
    if (col.colKey === "serial-number") {
      return rowIndex + 1;
    }
    if (isFunction_1(col.cell)) {
      return col.cell(vue.h, params);
    }
    if (slots[col.colKey]) {
      return slots[col.colKey](params);
    }
    if (isString_1(col.cell) && slots[col.cell]) {
      return slots[col.cell](params);
    }
    if (isFunction_1(col.render)) {
      return col.render(vue.h, _objectSpread$w(_objectSpread$w({}, params), {}, {
        type: "cell"
      }));
    }
    var r = get_1(row, col.colKey);
    if (![void 0, "", null].includes(r)) return r;
    if (extra !== null && extra !== void 0 && extra.cellEmptyContent) {
      return isFunction_1(extra.cellEmptyContent) ? extra.cellEmptyContent(vue.h, params) : extra.cellEmptyContent;
    }
    if (slots.cellEmptyContent) return slots.cellEmptyContent(params);
    return r;
  }
  var TrElement = vue.defineComponent({
    name: "TR",
    props: _objectSpread$w(_objectSpread$w({
      row: Object,
      rowIndex: Number,
      dataLength: Number,
      ellipsisOverlayClassName: String,
      classPrefix: String,
      rowAndColFixedPosition: Map,
      skipSpansMap: Map
    }, pick_1(baseTableProps, TABLE_PROPS)), {}, {
      scrollType: String,
      rowHeight: Number,
      trs: Map,
      bufferSize: Number,
      isVirtual: Boolean,
      tableElm: {},
      tableContentElm: {}
    }),
    emits: ["row-mounted"],
    setup: function setup(props, context) {
      var _toRefs = vue.toRefs(props),
        tableContentElm = _toRefs.tableContentElm;
      var trRef = vue.ref(null);
      var _useClassName = useClassName(),
        tdEllipsisClass = _useClassName.tdEllipsisClass,
        tableBaseClass = _useClassName.tableBaseClass,
        tableColFixedClasses = _useClassName.tableColFixedClasses,
        tableRowFixedClasses = _useClassName.tableRowFixedClasses,
        tdAlignClasses = _useClassName.tdAlignClasses,
        tableDraggableClasses = _useClassName.tableDraggableClasses;
      var trStyles = vue.computed(function () {
        return getRowFixedStyles(get_1(props.row, props.rowKey || "id"), props.rowIndex, props.dataLength, props.fixedRows, props.rowAndColFixedPosition, tableRowFixedClasses);
      });
      var trAttributes = vue.computed(function () {
        return formatRowAttributes(props.rowAttributes, {
          row: props.row,
          rowIndex: props.rowIndex,
          type: "body"
        }) || {};
      });
      var classes = vue.computed(function () {
        var _trStyles$value;
        var customClasses = formatRowClassNames(props.rowClassName, {
          row: props.row,
          rowIndex: props.rowIndex,
          type: "body"
        }, props.rowKey || "id");
        return [(_trStyles$value = trStyles.value) === null || _trStyles$value === void 0 ? void 0 : _trStyles$value.classes, customClasses].filter(function (v) {
          return v;
        });
      });
      var _useLazyLoad = useLazyLoad(tableContentElm, trRef, vue.reactive(_objectSpread$w(_objectSpread$w({}, props.scroll), {}, {
          rowIndex: props.rowIndex
        }))),
        hasLazyLoadHolder = _useLazyLoad.hasLazyLoadHolder,
        tRowHeight = _useLazyLoad.tRowHeight;
      var getTrListeners = function getTrListeners(row, rowIndex) {
        var trListeners = {};
        ROW_LISTENERS.forEach(function (eventName) {
          trListeners["on".concat(upperFirst_1(eventName))] = function (e) {
            var _props;
            var p = {
              e: e,
              row: row,
              index: rowIndex
            };
            (_props = props["onRow".concat(upperFirst_1(eventName))]) === null || _props === void 0 ? void 0 : _props.call(props, p);
          };
        });
        return trListeners;
      };
      vue.onMounted(function () {
        var scrollType = props.scrollType,
          isVirtual = props.isVirtual,
          rowData = props.row,
          trs = props.trs;
        if (scrollType === "virtual") {
          if (isVirtual) {
            var $index = rowData.$index;
            trs.set($index, trRef.value);
            context.emit("row-mounted");
          }
        }
      });
      vue.onBeforeUnmount(function () {
        if (props.isVirtual) {
          var trs = props.trs,
            row = props.row;
          var $index = row.$index;
          trs["delete"]($index);
        }
      });
      return {
        trRef: trRef,
        tableColFixedClasses: tableColFixedClasses,
        tSlots: context.slots,
        tdEllipsisClass: tdEllipsisClass,
        tableBaseClass: tableBaseClass,
        tdAlignClasses: tdAlignClasses,
        tableDraggableClasses: tableDraggableClasses,
        trStyles: trStyles,
        classes: classes,
        trAttributes: trAttributes,
        tRowHeight: tRowHeight,
        hasLazyLoadHolder: hasLazyLoadHolder,
        getTrListeners: getTrListeners
      };
    },
    methods: {
      renderEllipsisCell: function renderEllipsisCell(cellParams, params) {
        var cellNode = params.cellNode;
        var col = cellParams.col,
          colIndex = cellParams.colIndex;
        var content = isFunction_1(col.ellipsis) ? col.ellipsis(vue.h, cellParams) : void 0;
        if (_typeof$2(col.ellipsis) === "object" && isFunction_1(col.ellipsis.content)) {
          content = col.ellipsis.content(vue.h, cellParams);
        }
        var tooltipProps = {};
        if (_typeof$2(col.ellipsis) === "object") {
          tooltipProps = "props" in col.ellipsis ? col.ellipsis.props : col.ellipsis || void 0;
        }
        var tableElement = this.tableElm;
        var placement = colIndex === 0 ? "top-left" : "top";
        placement = colIndex === this.columns.length - 1 ? "top-right" : placement;
        return vue.createVNode(TEllipsis, {
          "placement": placement,
          "attach": tableElement ? function () {
            return tableElement;
          } : void 0,
          "tooltipContent": content && function () {
            return content;
          },
          "tooltipProps": tooltipProps,
          "overlayClassName": this.ellipsisOverlayClassName,
          "classPrefix": this.classPrefix
        }, _isSlot$5(cellNode) ? cellNode : {
          "default": function _default() {
            return [cellNode];
          }
        });
      },
      renderTd: function renderTd(params, extra) {
        var _ref,
          _this = this;
        var col = params.col,
          colIndex = params.colIndex,
          rowIndex = params.rowIndex;
        var cellSpans = extra.cellSpans,
          dataLength = extra.dataLength,
          rowAndColFixedPosition = extra.rowAndColFixedPosition;
        var cellNode = renderCell(params, this.tSlots, {
          cellEmptyContent: extra.cellEmptyContent
        });
        var tdStyles = getColumnFixedStyles(col, colIndex, rowAndColFixedPosition, this.tableColFixedClasses);
        var customClasses = formatClassNames(col.className, _objectSpread$w(_objectSpread$w({}, params), {}, {
          type: "td"
        }));
        var classes = [tdStyles.classes, customClasses, (_ref = {}, _defineProperty$3(_ref, this.tdEllipsisClass, col.ellipsis), _defineProperty$3(_ref, this.tableBaseClass.tdLastRow, rowIndex + cellSpans.rowspan === dataLength), _defineProperty$3(_ref, this.tableBaseClass.tdFirstCol, colIndex === 0 && this.rowspanAndColspan), _defineProperty$3(_ref, this.tdAlignClasses[col.align], col.align && col.align !== "left"), _defineProperty$3(_ref, this.tableDraggableClasses.handle, col.colKey === "drag"), _ref)];
        var onClick = function onClick(e) {
          var _this$onCellClick;
          var p = _objectSpread$w(_objectSpread$w({}, params), {}, {
            e: e
          });
          (_this$onCellClick = _this.onCellClick) === null || _this$onCellClick === void 0 ? void 0 : _this$onCellClick.call(_this, p);
        };
        var normalAttrs = isFunction_1(col.attrs) ? col.attrs(_objectSpread$w(_objectSpread$w({}, params), {}, {
          type: "td"
        })) : col.attrs;
        var attrs = _objectSpread$w(_objectSpread$w({}, normalAttrs), cellSpans);
        return vue.createVNode("td", vue.mergeProps({
          "key": col.colKey || colIndex,
          "class": classes,
          "style": tdStyles.style
        }, attrs, {
          "onClick": onClick
        }), [col.ellipsis ? this.renderEllipsisCell(params, {
          cellNode: cellNode
        }) : cellNode]);
      }
    },
    render: function render() {
      var _this$columns,
        _this2 = this,
        _this$trStyles;
      var row = this.row,
        rowIndex = this.rowIndex,
        dataLength = this.dataLength,
        rowAndColFixedPosition = this.rowAndColFixedPosition;
      var columVNodeList = (_this$columns = this.columns) === null || _this$columns === void 0 ? void 0 : _this$columns.map(function (col, colIndex) {
        var cellSpans = {};
        var params = {
          row: row,
          col: col,
          rowIndex: rowIndex,
          colIndex: colIndex
        };
        var spanState = null;
        if (_this2.skipSpansMap.size) {
          var _spanState, _spanState2;
          var cellKey = getCellKey(row, _this2.rowKey, col.colKey, colIndex);
          spanState = _this2.skipSpansMap.get(cellKey) || {};
          ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
          ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
          if (spanState.skipped) return null;
        }
        return _this2.renderTd(params, {
          dataLength: dataLength,
          rowAndColFixedPosition: rowAndColFixedPosition,
          columnLength: _this2.columns.length,
          cellSpans: cellSpans,
          cellEmptyContent: _this2.cellEmptyContent
        });
      });
      return vue.createVNode("tr", vue.mergeProps({
        "ref": "trRef"
      }, this.trAttributes, {
        "style": (_this$trStyles = this.trStyles) === null || _this$trStyles === void 0 ? void 0 : _this$trStyles.style,
        "class": this.classes
      }, this.getTrListeners(row, rowIndex)), [this.hasLazyLoadHolder ? [vue.createVNode("td", {
        "style": {
          height: "".concat(this.tRowHeight, "px"),
          border: "none"
        }
      }, null)] : columVNodeList]);
    }
  });

  function ownKeys$w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$w(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var extendTableProps = ["rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
  var TBody = vue.defineComponent({
    name: "TBody",
    props: _objectSpread$v({
      classPrefix: String,
      data: Array,
      columns: Array,
      ellipsisOverlayClassName: String,
      rowAndColFixedPosition: Map,
      showColumnShadow: Object,
      tableElm: {},
      tableWidth: Number,
      isWidthOverflow: Boolean,
      translateY: Number,
      scrollType: String,
      isVirtual: Boolean,
      rowHeight: Number,
      trs: Map,
      bufferSize: Number,
      tableContentElm: {},
      handleRowMounted: Function,
      renderExpandedRow: Function,
      firstFullRow: [String, Function],
      lastFullRow: [String, Function]
    }, pick_1(baseTableProps, extendTableProps)),
    setup: function setup(props) {
      var renderTNode = useTNodeJSX();
      var _toRefs = vue.toRefs(props),
        data = _toRefs.data,
        columns = _toRefs.columns,
        rowKey = _toRefs.rowKey,
        rowspanAndColspan = _toRefs.rowspanAndColspan;
      var _useConfig = useConfig("table"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var _useClassName = useClassName(),
        tableFullRowClasses = _useClassName.tableFullRowClasses,
        tableBaseClass = _useClassName.tableBaseClass;
      var _useRowspanAndColspan = useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan),
        skipSpansMap = _useRowspanAndColspan.skipSpansMap;
      var tbodyClasses = vue.computed(function () {
        return [tableBaseClass.body];
      });
      return {
        t: t,
        globalConfig: globalConfig,
        renderTNode: renderTNode,
        tableFullRowClasses: tableFullRowClasses,
        tbodyClasses: tbodyClasses,
        tableBaseClass: tableBaseClass,
        skipSpansMap: skipSpansMap
      };
    },
    render: function render() {
      var _this = this,
        _this$data,
        _this$data2;
      var renderEmpty = function renderEmpty(columns) {
        return vue.createVNode("tr", {
          "class": [_this.tableBaseClass.emptyRow, _defineProperty$3({}, _this.tableFullRowClasses.base, _this.isWidthOverflow)]
        }, [vue.createVNode("td", {
          "colspan": columns.length
        }, [vue.createVNode("div", {
          "class": [_this.tableBaseClass.empty, _defineProperty$3({}, _this.tableFullRowClasses.innerFullRow, _this.isWidthOverflow)],
          "style": _this.isWidthOverflow ? {
            width: "".concat(_this.tableWidth, "px")
          } : {}
        }, [_this.renderTNode("empty") || _this.t(_this.globalConfig.empty)])])]);
      };
      var getFullRow = function getFullRow(columnLength2, type) {
        var tType = camelCase_1(type);
        var fullRowNode = _this.renderTNode(tType);
        if (["", null, void 0, false].includes(fullRowNode)) return null;
        var isFixedToLeft = _this.isWidthOverflow && _this.columns.find(function (col) {
          return col.fixed === "left";
        });
        var classes = [_this.tableFullRowClasses.base, _this.tableFullRowClasses[tType]];
        return vue.createVNode("tr", {
          "class": classes,
          "key": "key-full-row-".concat(type)
        }, [vue.createVNode("td", {
          "colspan": columnLength2
        }, [vue.createVNode("div", {
          "class": _defineProperty$3({}, _this.tableFullRowClasses.innerFullRow, isFixedToLeft),
          "style": isFixedToLeft ? {
            width: "".concat(_this.tableWidth, "px")
          } : {}
        }, [vue.createVNode("div", {
          "class": _this.tableFullRowClasses.innerFullElement
        }, [fullRowNode])])])]);
      };
      var columnLength = this.columns.length;
      var dataLength = this.data.length;
      var trNodeList = [];
      var properties = ["classPrefix", "ellipsisOverlayClassName", "rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "trs", "bufferSize", "isVirtual", "rowHeight", "scrollType"];
      (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.forEach(function (row, rowIndex) {
        var trProps = _objectSpread$v(_objectSpread$v({}, pick_1(_this.$props, TABLE_PROPS)), {}, {
          rowKey: _this.rowKey || "id",
          row: row,
          columns: _this.columns,
          rowIndex: rowIndex,
          dataLength: dataLength,
          skipSpansMap: _this.skipSpansMap
        }, pick_1(_this.$props, properties));
        if (_this.onCellClick) {
          trProps.onCellClick = _this.onCellClick;
        }
        var trNode = vue.createVNode(TrElement, vue.mergeProps({
          "key": get_1(row, _this.rowKey || "id") || rowIndex
        }, trProps, {
          "onRowMounted": _this.handleRowMounted
        }), _this.$slots);
        trNodeList.push(trNode);
        if (_this.renderExpandedRow) {
          var p = {
            row: row,
            index: rowIndex,
            columns: _this.columns,
            tableWidth: _this.tableWidth,
            isWidthOverflow: _this.isWidthOverflow
          };
          var expandedContent = _this.renderExpandedRow(p);
          expandedContent && trNodeList.push(expandedContent);
        }
      });
      var list = [getFullRow(columnLength, "first-full-row")].concat(trNodeList, [getFullRow(columnLength, "last-full-row")]);
      var isEmpty = !((_this$data2 = this.data) !== null && _this$data2 !== void 0 && _this$data2.length) && !this.loading && !this.firstFullRow && !this.lastFullRow;
      var translate = "translate(0, ".concat(this.translateY, "px)");
      var posStyle = {
        transform: translate,
        "-ms-transform": translate,
        "-moz-transform": translate,
        "-webkit-transform": translate
      };
      return vue.createVNode("tbody", {
        "class": this.tbodyClasses,
        "style": this.isVirtual && _objectSpread$v({}, posStyle)
      }, [isEmpty ? renderEmpty(this.columns) : list]);
    }
  });

  function formatCSSUnit(unit) {
    if (!unit) return unit;
    return isNaN(Number(unit)) ? unit : "".concat(unit, "px");
  }
  function useStyle(props) {
    var _toRefs = vue.toRefs(props),
      size = _toRefs.size,
      bordered = _toRefs.bordered,
      stripe = _toRefs.stripe,
      hover = _toRefs.hover,
      verticalAlign = _toRefs.verticalAlign,
      height = _toRefs.height,
      maxHeight = _toRefs.maxHeight,
      tableContentWidth = _toRefs.tableContentWidth;
    var _useClassName = useClassName(),
      tableBaseClass = _useClassName.tableBaseClass,
      tableAlignClasses = _useClassName.tableAlignClasses;
    var _useCommonClassName = useCommonClassName(),
      sizeClassNames = _useCommonClassName.sizeClassNames;
    var tableClasses = vue.computed(function () {
      var _ref;
      return [tableBaseClass.table, (_ref = {}, _defineProperty$3(_ref, sizeClassNames[size.value], size.value !== "medium"), _defineProperty$3(_ref, tableBaseClass.bordered, bordered.value), _defineProperty$3(_ref, tableBaseClass.striped, stripe.value), _defineProperty$3(_ref, tableBaseClass.hover, hover.value), _defineProperty$3(_ref, tableBaseClass.loading, props.loading), _defineProperty$3(_ref, tableBaseClass.affixedHeader, props.headerAffixedTop), _defineProperty$3(_ref, tableBaseClass.rowspanAndColspan, props.rowspanAndColspan), _defineProperty$3(_ref, tableAlignClasses[verticalAlign.value], verticalAlign.value !== "middle"), _ref)];
    });
    var tableContentStyles = vue.computed(function () {
      return {
        height: formatCSSUnit(height.value),
        maxHeight: formatCSSUnit(maxHeight.value)
      };
    });
    var tableElementStyles = vue.computed(function () {
      return {
        width: formatCSSUnit(tableContentWidth.value)
      };
    });
    return {
      tableClasses: tableClasses,
      sizeClassNames: sizeClassNames,
      tableElementStyles: tableElementStyles,
      tableContentStyles: tableContentStyles
    };
  }

  function ownKeys$v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$v(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$4(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var THead = vue.defineComponent({
    name: "THead",
    props: {
      classPrefix: String,
      ellipsisOverlayClassName: String,
      isFixedHeader: Boolean,
      rowAndColFixedPosition: Map,
      thWidthList: Object,
      bordered: Boolean,
      isMultipleHeader: Boolean,
      resizable: Boolean,
      spansAndLeafNodes: Object,
      thList: Array,
      columnResizeParams: Object
    },
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var theadRef = vue.ref();
      var classnames = useClassName();
      var tableHeaderClasses = classnames.tableHeaderClasses,
        tableBaseClass = classnames.tableBaseClass;
      var theadClasses = vue.computed(function () {
        var _ref2;
        return [tableHeaderClasses.header, (_ref2 = {}, _defineProperty$3(_ref2, tableHeaderClasses.fixed, props.isFixedHeader), _defineProperty$3(_ref2, tableBaseClass.bordered, props.bordered && props.isMultipleHeader), _defineProperty$3(_ref2, tableHeaderClasses.multipleHeader, props.isMultipleHeader), _ref2)];
      });
      var colspanSkipMap = vue.computed(function () {
        var map = {};
        var list = props.thList[0];
        for (var i = 0, len = list.length; i < len; i++) {
          var item = list[i];
          if (item.colspan > 1) {
            for (var j = i + 1; j < i + item.colspan; j++) {
              if (list[j]) {
                map[list[j].colKey] = true;
              }
            }
          }
        }
        return map;
      });
      return _objectSpread$u(_objectSpread$u({}, classnames), {}, {
        colspanSkipMap: colspanSkipMap,
        theadClasses: theadClasses,
        theadRef: theadRef,
        slots: slots
      });
    },
    render: function render() {
      var _this = this;
      var renderThNodeList = function renderThNodeList(rowAndColFixedPosition, thWidthList) {
        var thBorderMap = /* @__PURE__ */new Map();
        var thRowspanAndColspan = _this.spansAndLeafNodes.rowspanAndColspanMap;
        return _this.thList.map(function (row, rowIndex) {
          var thRow = row.map(function (col, index) {
            var _ref3, _col$children;
            if (_this.colspanSkipMap[col.colKey]) return null;
            var rowspanAndColspan = thRowspanAndColspan.get(col);
            if (index === 0 && rowspanAndColspan.rowspan > 1) {
              for (var j = rowIndex + 1; j < rowIndex + rowspanAndColspan.rowspan; j++) {
                thBorderMap.set(_this.thList[j][0], true);
              }
            }
            var thStyles = getColumnFixedStyles(col, index, rowAndColFixedPosition, _this.tableColFixedClasses);
            var colParams = {
              col: col,
              colIndex: index,
              row: {},
              rowIndex: -1
            };
            var customClasses = formatClassNames(col.className, _objectSpread$u(_objectSpread$u({}, colParams), {}, {
              type: "th"
            }));
            var thClasses = [thStyles.classes, customClasses, (_ref3 = {}, _defineProperty$3(_ref3, _this.tableHeaderClasses.thBordered, thBorderMap.get(col)), _defineProperty$3(_ref3, "".concat(_this.classPrefix, "-table__th-").concat(col.colKey), col.colKey), _defineProperty$3(_ref3, _this.tdAlignClasses[col.align], col.align && col.align !== "left"), _ref3)];
            var withoutChildren = !((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length);
            var width = withoutChildren && thWidthList !== null && thWidthList !== void 0 && thWidthList[col.colKey] ? "".concat(thWidthList === null || thWidthList === void 0 ? void 0 : thWidthList[col.colKey], "px") : void 0;
            var styles = _objectSpread$u(_objectSpread$u({}, thStyles.style || {}), {}, {
              width: width
            });
            var innerTh = renderTitle(_this.slots, col, index);
            var resizeColumnListener = _this.resizable ? {
              onMousedown: function onMousedown(e) {
                var _this$columnResizePar, _this$columnResizePar2;
                return (_this$columnResizePar = _this.columnResizeParams) === null || _this$columnResizePar === void 0 ? void 0 : (_this$columnResizePar2 = _this$columnResizePar.onColumnMousedown) === null || _this$columnResizePar2 === void 0 ? void 0 : _this$columnResizePar2.call(_this$columnResizePar, e, col);
              },
              onMousemove: function onMousemove(e) {
                var _this$columnResizePar3, _this$columnResizePar4;
                return (_this$columnResizePar3 = _this.columnResizeParams) === null || _this$columnResizePar3 === void 0 ? void 0 : (_this$columnResizePar4 = _this$columnResizePar3.onColumnMouseover) === null || _this$columnResizePar4 === void 0 ? void 0 : _this$columnResizePar4.call(_this$columnResizePar3, e, col);
              }
            } : {};
            var content = isFunction_1(col.ellipsisTitle) ? col.ellipsisTitle(vue.h, {
              col: col,
              colIndex: index
            }) : void 0;
            var isEllipsis = col.ellipsisTitle !== void 0 ? Boolean(col.ellipsisTitle) : Boolean(col.ellipsis);
            var attrs = (isFunction_1(col.attrs) ? col.attrs(_objectSpread$u(_objectSpread$u({}, colParams), {}, {
              type: "th"
            })) : col.attrs) || {};
            if (col.colspan > 1) {
              attrs.colspan = col.colspan;
            }
            return vue.createVNode("th", vue.mergeProps({
              "key": col.colKey,
              "data-colkey": col.colKey,
              "class": thClasses,
              "style": styles
            }, attrs, rowspanAndColspan, resizeColumnListener), [vue.createVNode("div", {
              "class": _this.tableBaseClass.thCellInner
            }, [isEllipsis ? vue.createVNode(TEllipsis, {
              "placement": "bottom",
              "attach": _this.theadRef ? function () {
                return _this.getTableNode(_this.theadRef);
              } : void 0,
              "tooltipContent": content && function () {
                return content;
              },
              "tooltipProps": _typeof$2(col.ellipsisTitle) === "object" ? col.ellipsisTitle : void 0,
              "overlayClassName": _this.ellipsisOverlayClassName,
              "classPrefix": _this.classPrefix
            }, _isSlot$4(innerTh) ? innerTh : {
              "default": function _default() {
                return [innerTh];
              }
            }) : innerTh])]);
          });
          return vue.createVNode("tr", {
            "key": rowIndex
          }, [thRow]);
        });
      };
      return vue.createVNode("thead", {
        "ref": "theadRef",
        "class": this.theadClasses
      }, [renderThNodeList(this.rowAndColFixedPosition, this.thWidthList)]);
    }
  });

  function ownKeys$u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$u(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TFoot = vue.defineComponent({
    name: "TFoot",
    props: {
      rowKey: String,
      isFixedHeader: Boolean,
      rowAndColFixedPosition: Map,
      footData: Array,
      columns: Array,
      rowAttributes: [Array, Object, Function],
      rowClassName: [Array, String, Object, Function],
      thWidthList: [Object],
      footerSummary: [String, Function],
      rowspanAndColspanInFooter: Function
    },
    setup: function setup(props, context) {
      var renderTNode = useTNodeJSX();
      var classnames = useClassName();
      var _toRefs = vue.toRefs(props),
        footData = _toRefs.footData,
        columns = _toRefs.columns,
        rowKey = _toRefs.rowKey,
        rowspanAndColspanInFooter = _toRefs.rowspanAndColspanInFooter;
      var _useRowspanAndColspan = useRowspanAndColspan(footData, columns, rowKey, rowspanAndColspanInFooter),
        skipSpansMap = _useRowspanAndColspan.skipSpansMap;
      var renderTFootCell = function renderTFootCell(p) {
        var col = p.col,
          row = p.row;
        if (isFunction_1(col.foot)) {
          return col.foot(vue.h, p);
        }
        if (isString_1(col.foot) && context.slots[col.foot]) {
          return context.slots[col.foot](p) || col.foot;
        }
        return col.foot || get_1(row, col.colKey);
      };
      return _objectSpread$t(_objectSpread$t({
        skipSpansMap: skipSpansMap
      }, classnames), {}, {
        renderTFootCell: renderTFootCell,
        renderTNode: renderTNode
      });
    },
    render: function render() {
      var _this$footData,
        _this = this;
      if (!this.columns) return null;
      var theadClasses = [this.tableFooterClasses.footer, _defineProperty$3({}, this.tableFooterClasses.fixed, this.isFixedHeader)];
      var footerDomList = (_this$footData = this.footData) === null || _this$footData === void 0 ? void 0 : _this$footData.map(function (row, rowIndex) {
        var trAttributes = formatRowAttributes(_this.rowAttributes, {
          row: row,
          rowIndex: rowIndex,
          type: "foot"
        });
        var customClasses = formatRowClassNames(_this.rowClassName, {
          row: row,
          rowIndex: rowIndex,
          type: "foot"
        }, _this.rowKey || "id");
        return vue.createVNode("tr", vue.mergeProps(trAttributes, {
          "key": rowIndex,
          "class": customClasses
        }), [_this.columns.map(function (col, colIndex) {
          var _this$thWidthList;
          var cellSpans = {};
          var spanState = null;
          if (_this.skipSpansMap.size) {
            var _spanState, _spanState2;
            var cellKey = getCellKey(row, _this.rowKey, col.colKey, colIndex);
            spanState = _this.skipSpansMap.get(cellKey) || {};
            ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
            ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
            if (spanState.skipped) return null;
          }
          var tdStyles = getColumnFixedStyles(col, colIndex, _this.rowAndColFixedPosition, _this.tableColFixedClasses);
          var style = _objectSpread$t({}, tdStyles.style);
          if ((_this$thWidthList = _this.thWidthList) !== null && _this$thWidthList !== void 0 && _this$thWidthList[col.colKey]) {
            style.width = "".concat(_this.thWidthList[col.colKey], "px");
          }
          return vue.createVNode("td", vue.mergeProps(_objectSpread$t({
            key: col.colKey
          }, cellSpans), {
            "class": tdStyles.classes,
            "style": style
          }), [_this.renderTFootCell({
            row: row,
            rowIndex: rowIndex,
            col: col,
            colIndex: colIndex
          })]);
        })]);
      });
      var footerSummary = this.renderTNode("footerSummary");
      if (!footerSummary && (!this.footData || !this.footData.length)) return null;
      return vue.createVNode("tfoot", {
        "ref": "tFooterRef",
        "class": theadClasses
      }, [footerSummary && vue.createVNode("tr", {
        "class": this.tableFullRowClasses.base
      }, [vue.createVNode("td", {
        "colspan": this.columns.length
      }, [vue.createVNode("div", {
        "class": this.tableFullRowClasses.innerFullElement
      }, [footerSummary])])]), footerDomList]);
    }
  });

  function ownKeys$t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$t(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot$3(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _BaseTable = vue.defineComponent({
    name: "TBaseTable",
    props: _objectSpread$s(_objectSpread$s({}, baseTableProps), {}, {
      renderExpandedRow: Function,
      onLeafColumnsChange: Function
    }),
    setup: function setup(props2, context) {
      var _props2$scroll2;
      var renderTNode = useTNodeJSX();
      var tableRef = vue.ref();
      var tableElmRef = vue.ref();
      var tableBodyRef = vue.ref();
      var tableFootHeight = vue.ref(0);
      var _useClassName = useClassName(),
        classPrefix = _useClassName.classPrefix,
        virtualScrollClasses = _useClassName.virtualScrollClasses,
        tableLayoutClasses = _useClassName.tableLayoutClasses,
        tableBaseClass = _useClassName.tableBaseClass,
        tableColFixedClasses = _useClassName.tableColFixedClasses;
      var _useStyle = useStyle(props2),
        tableClasses = _useStyle.tableClasses,
        sizeClassNames = _useStyle.sizeClassNames,
        tableContentStyles = _useStyle.tableContentStyles,
        tableElementStyles = _useStyle.tableElementStyles;
      var _useConfig = useConfig("table"),
        globalConfig = _useConfig.globalConfig;
      var _useTableHeader = useTableHeader(props2),
        isMultipleHeader = _useTableHeader.isMultipleHeader,
        spansAndLeafNodes = _useTableHeader.spansAndLeafNodes,
        thList = _useTableHeader.thList;
      var finalColumns = vue.computed(function () {
        var _spansAndLeafNodes$va;
        return ((_spansAndLeafNodes$va = spansAndLeafNodes.value) === null || _spansAndLeafNodes$va === void 0 ? void 0 : _spansAndLeafNodes$va.leafColumns) || props2.columns;
      });
      var paginationAffixRef = vue.ref();
      var horizontalScrollAffixRef = vue.ref();
      var headerTopAffixRef = vue.ref();
      var footerBottomAffixRef = vue.ref();
      var _useFixed = useFixed(props2, context, finalColumns, {
          paginationAffixRef: paginationAffixRef,
          horizontalScrollAffixRef: horizontalScrollAffixRef,
          headerTopAffixRef: headerTopAffixRef,
          footerBottomAffixRef: footerBottomAffixRef
        }),
        scrollbarWidth = _useFixed.scrollbarWidth,
        virtualScrollHeaderPos = _useFixed.virtualScrollHeaderPos,
        tableWidth = _useFixed.tableWidth,
        tableElmWidth = _useFixed.tableElmWidth,
        tableContentRef = _useFixed.tableContentRef,
        isFixedHeader = _useFixed.isFixedHeader,
        isWidthOverflow = _useFixed.isWidthOverflow,
        isFixedColumn = _useFixed.isFixedColumn,
        thWidthList = _useFixed.thWidthList,
        showColumnShadow = _useFixed.showColumnShadow,
        rowAndColFixedPosition = _useFixed.rowAndColFixedPosition,
        setData = _useFixed.setData,
        refreshTable = _useFixed.refreshTable,
        emitScrollEvent = _useFixed.emitScrollEvent,
        setUseFixedTableElmRef = _useFixed.setUseFixedTableElmRef,
        updateColumnFixedShadow = _useFixed.updateColumnFixedShadow,
        getThWidthList = _useFixed.getThWidthList,
        updateThWidthList = _useFixed.updateThWidthList,
        setRecalculateColWidthFuncRef = _useFixed.setRecalculateColWidthFuncRef,
        addTableResizeObserver = _useFixed.addTableResizeObserver;
      var _useAffix = useAffix(props2),
        affixHeaderRef = _useAffix.affixHeaderRef,
        affixFooterRef = _useAffix.affixFooterRef,
        horizontalScrollbarRef = _useAffix.horizontalScrollbarRef,
        paginationRef = _useAffix.paginationRef,
        showAffixHeader = _useAffix.showAffixHeader,
        showAffixFooter = _useAffix.showAffixFooter,
        showAffixPagination = _useAffix.showAffixPagination,
        onHorizontalScroll = _useAffix.onHorizontalScroll,
        setTableContentRef = _useAffix.setTableContentRef,
        updateAffixHeaderOrFooter = _useAffix.updateAffixHeaderOrFooter;
      var _usePagination = usePagination(props2),
        dataSource = _usePagination.dataSource,
        isPaginateData = _usePagination.isPaginateData,
        renderPagination = _usePagination.renderPagination;
      var columnResizeParams = useColumnResize(tableContentRef, refreshTable, getThWidthList, updateThWidthList);
      var resizeLineRef = columnResizeParams.resizeLineRef,
        resizeLineStyle = columnResizeParams.resizeLineStyle,
        recalculateColWidth = columnResizeParams.recalculateColWidth,
        setEffectColMap = columnResizeParams.setEffectColMap;
      setRecalculateColWidthFuncRef(recalculateColWidth);
      var dynamicBaseTableClasses = vue.computed(function () {
        var _ref;
        return [tableClasses.value, (_ref = {}, _defineProperty$3(_ref, tableBaseClass.headerFixed, isFixedHeader.value), _defineProperty$3(_ref, tableBaseClass.columnFixed, isFixedColumn.value), _defineProperty$3(_ref, tableBaseClass.widthOverflow, isWidthOverflow.value), _defineProperty$3(_ref, tableBaseClass.multipleHeader, isMultipleHeader.value), _defineProperty$3(_ref, tableColFixedClasses.leftShadow, showColumnShadow.left), _defineProperty$3(_ref, tableColFixedClasses.rightShadow, showColumnShadow.right), _defineProperty$3(_ref, tableBaseClass.columnResizableTable, props2.resizable), _ref)];
      });
      var tableElmClasses = vue.computed(function () {
        return [[tableLayoutClasses[props2.tableLayout]], _defineProperty$3({}, tableBaseClass.fullHeight, props2.height)];
      });
      var isVirtual = vue.computed(function () {
        var _props2$data, _props2$scroll;
        return type === "virtual" && ((_props2$data = props2.data) === null || _props2$data === void 0 ? void 0 : _props2$data.length) > (((_props2$scroll = props2.scroll) === null || _props2$scroll === void 0 ? void 0 : _props2$scroll.threshold) || 100);
      });
      var showRightDivider = vue.computed(function () {
        return props2.bordered && isFixedHeader.value && (isMultipleHeader.value && isWidthOverflow.value || !isMultipleHeader.value);
      });
      vue.watch(tableElmRef, function () {
        setUseFixedTableElmRef(tableElmRef.value);
      });
      vue.watch(function () {
        return [props2.data, dataSource];
      }, function () {
        setData(isPaginateData.value ? dataSource.value : props2.data);
      });
      vue.watch(spansAndLeafNodes, function () {
        var _props2$onLeafColumns;
        (_props2$onLeafColumns = props2.onLeafColumnsChange) === null || _props2$onLeafColumns === void 0 ? void 0 : _props2$onLeafColumns.call(props2, spansAndLeafNodes.value.leafColumns);
      }, {
        immediate: true
      });
      vue.watch(thList, function () {
        setEffectColMap(thList.value[0], null);
      }, {
        immediate: true
      });
      var onFixedChange = function onFixedChange() {
        vue.nextTick(function () {
          onHorizontalScroll();
          updateAffixHeaderOrFooter();
        });
      };
      var _ref3 = props2.scroll || {},
        type = _ref3.type,
        rowHeight = _ref3.rowHeight,
        _ref3$bufferSize = _ref3.bufferSize,
        bufferSize = _ref3$bufferSize === void 0 ? 20 : _ref3$bufferSize,
        _ref3$isFixedRowHeigh = _ref3.isFixedRowHeight,
        isFixedRowHeight = _ref3$isFixedRowHeigh === void 0 ? false : _ref3$isFixedRowHeigh;
      var _toRefs = vue.toRefs(props2),
        data = _toRefs.data;
      var _ref4 = type === "virtual" ? useVirtualScroll({
          container: tableContentRef,
          data: data,
          fixedHeight: isFixedRowHeight,
          lineHeight: rowHeight,
          bufferSize: bufferSize,
          threshold: (_props2$scroll2 = props2.scroll) === null || _props2$scroll2 === void 0 ? void 0 : _props2$scroll2.threshold
        }) : {},
        _ref4$trs = _ref4.trs,
        trs = _ref4$trs === void 0 ? null : _ref4$trs,
        _ref4$scrollHeight = _ref4.scrollHeight,
        scrollHeight = _ref4$scrollHeight === void 0 ? null : _ref4$scrollHeight,
        _ref4$visibleData = _ref4.visibleData,
        visibleData = _ref4$visibleData === void 0 ? null : _ref4$visibleData,
        _ref4$translateY = _ref4.translateY,
        translateY = _ref4$translateY === void 0 ? null : _ref4$translateY,
        _ref4$handleScroll = _ref4.handleScroll,
        handleVirtualScroll = _ref4$handleScroll === void 0 ? null : _ref4$handleScroll,
        _ref4$handleRowMounte = _ref4.handleRowMounted,
        handleRowMounted = _ref4$handleRowMounte === void 0 ? null : _ref4$handleRowMounte;
      vue.provide("tableContentRef", tableContentRef);
      vue.provide("rowHeightRef", vue.ref(rowHeight));
      var lastScrollY = 0;
      var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
        var target = e.target || e.srcElement;
        var top = target.scrollTop;
        if (lastScrollY !== top) {
          isVirtual.value && handleVirtualScroll();
        } else {
          lastScrollY = 0;
          updateColumnFixedShadow(target);
        }
        lastScrollY = top;
        emitScrollEvent(e);
      };
      var getTFootHeight = function getTFootHeight() {
        var _tableElmRef$value$qu;
        if (!tableElmRef.value) return;
        tableFootHeight.value = (_tableElmRef$value$qu = tableElmRef.value.querySelector("tfoot")) === null || _tableElmRef$value$qu === void 0 ? void 0 : _tableElmRef$value$qu.getBoundingClientRect().height;
      };
      vue.watch(tableContentRef, function () {
        setTableContentRef(tableContentRef.value);
      });
      vue.watch(tableElmRef, getTFootHeight);
      vue.watch(tableRef, function (tableRef2) {
        addTableResizeObserver(tableRef2);
      });
      vue.onMounted(function () {
        getTFootHeight();
        setTableContentRef(tableContentRef.value);
        addTableResizeObserver(tableRef.value);
      });
      return {
        thList: thList,
        classPrefix: classPrefix,
        isVirtual: isVirtual,
        globalConfig: globalConfig,
        tableFootHeight: tableFootHeight,
        virtualScrollHeaderPos: virtualScrollHeaderPos,
        tableWidth: tableWidth,
        tableElmWidth: tableElmWidth,
        tableRef: tableRef,
        tableElmRef: tableElmRef,
        sizeClassNames: sizeClassNames,
        tableBaseClass: tableBaseClass,
        spansAndLeafNodes: spansAndLeafNodes,
        dynamicBaseTableClasses: dynamicBaseTableClasses,
        tableContentStyles: tableContentStyles,
        tableElementStyles: tableElementStyles,
        virtualScrollClasses: virtualScrollClasses,
        tableLayoutClasses: tableLayoutClasses,
        tableElmClasses: tableElmClasses,
        tableContentRef: tableContentRef,
        isFixedHeader: isFixedHeader,
        isWidthOverflow: isWidthOverflow,
        isFixedColumn: isFixedColumn,
        rowAndColFixedPosition: rowAndColFixedPosition,
        showColumnShadow: showColumnShadow,
        thWidthList: thWidthList,
        isPaginateData: isPaginateData,
        dataSource: dataSource,
        scrollType: type,
        rowHeight: rowHeight,
        trs: trs,
        bufferSize: bufferSize,
        scrollHeight: scrollHeight,
        visibleData: visibleData,
        translateY: translateY,
        affixHeaderRef: affixHeaderRef,
        affixFooterRef: affixFooterRef,
        paginationRef: paginationRef,
        showAffixHeader: showAffixHeader,
        showAffixFooter: showAffixFooter,
        scrollbarWidth: scrollbarWidth,
        isMultipleHeader: isMultipleHeader,
        showRightDivider: showRightDivider,
        resizeLineRef: resizeLineRef,
        resizeLineStyle: resizeLineStyle,
        columnResizeParams: columnResizeParams,
        horizontalScrollbarRef: horizontalScrollbarRef,
        tableBodyRef: tableBodyRef,
        showAffixPagination: showAffixPagination,
        renderPagination: renderPagination,
        renderTNode: renderTNode,
        handleRowMounted: handleRowMounted,
        onFixedChange: onFixedChange,
        onHorizontalScroll: onHorizontalScroll,
        updateAffixHeaderOrFooter: updateAffixHeaderOrFooter,
        refreshTable: refreshTable,
        onInnerVirtualScroll: onInnerVirtualScroll,
        paginationAffixRef: paginationAffixRef,
        horizontalScrollAffixRef: horizontalScrollAffixRef,
        headerTopAffixRef: headerTopAffixRef,
        footerBottomAffixRef: footerBottomAffixRef
      };
    },
    render: function render() {
      var _this$spansAndLeafNod,
        _this = this,
        _navigator,
        _this$affixHeaderRef,
        _this$footData,
        _this$tableContentRef;
      var rowAndColFixedPosition = this.rowAndColFixedPosition;
      var data = this.isPaginateData ? this.dataSource : this.data;
      var columns = ((_this$spansAndLeafNod = this.spansAndLeafNodes) === null || _this$spansAndLeafNod === void 0 ? void 0 : _this$spansAndLeafNod.leafColumns) || this.columns;
      var columnResizable = this.allowResizeColumnWidth === void 0 ? this.resizable : this.allowResizeColumnWidth;
      if (columnResizable && this.tableLayout === "auto") {
        log.warn("Table", "table-layout can not be `auto` for resizable column table, set `table-layout: fixed` please.");
      }
      var defaultColWidth = this.tableLayout === "fixed" && this.isWidthOverflow ? "100px" : void 0;
      var renderColGroup = function renderColGroup() {
        var isAffixHeader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        return vue.createVNode("colgroup", null, [columns.map(function (col) {
          var style = {
            width: formatCSSUnit((isAffixHeader || columnResizable ? _this.thWidthList[col.colKey] : void 0) || col.width) || defaultColWidth
          };
          if (col.minWidth) {
            style.minWidth = formatCSSUnit(col.minWidth);
          }
          return vue.createVNode("col", {
            "key": col.colKey,
            "style": style
          }, null);
        })]);
      };
      var renderAffixedHeader = function renderAffixedHeader() {
        if (_this.showHeader === false) return null;
        return !!(_this.isVirtual || _this.headerAffixedTop) && (_this.headerAffixedTop ? vue.createVNode(Affix, vue.mergeProps({
          "offsetTop": 0
        }, getAffixProps(_this.headerAffixedTop), {
          "onFixedChange": _this.onFixedChange,
          "ref": "headerTopAffixRef"
        }), _isSlot$3(affixHeaderWithWrap) ? affixHeaderWithWrap : {
          "default": function _default() {
            return [affixHeaderWithWrap];
          }
        }) : _this.isFixedHeader && affixHeaderWithWrap);
      };
      var renderAffixedHorizontalScrollbar = function renderAffixedHorizontalScrollbar() {
        return vue.createVNode(Affix, vue.mergeProps({
          "offsetBottom": 0
        }, getAffixProps(_this.horizontalScrollAffixedBottom), {
          "style": {
            marginTop: "-".concat(_this.scrollbarWidth * 2, "px")
          },
          "horizontalScrollAffixedBottom": true,
          "ref": "horizontalScrollAffixRef"
        }), {
          "default": function _default() {
            return [vue.createVNode("div", {
              "ref": "horizontalScrollbarRef",
              "class": ["scrollbar", _this.tableBaseClass.obviousScrollbar],
              "style": {
                width: "".concat(_this.tableWidth, "px"),
                overflow: "auto",
                opacity: Number(_this.showAffixFooter)
              }
            }, [vue.createVNode("div", {
              "style": {
                width: "".concat(_this.tableElmWidth, "px"),
                height: "5px"
              }
            }, null)])];
          }
        });
      };
      var headProps = {
        isFixedHeader: this.isFixedHeader,
        rowAndColFixedPosition: this.rowAndColFixedPosition,
        isMultipleHeader: this.isMultipleHeader,
        bordered: this.bordered,
        spansAndLeafNodes: this.spansAndLeafNodes,
        thList: this.thList,
        thWidthList: this.thWidthList,
        resizable: this.resizable,
        columnResizeParams: this.columnResizeParams,
        classPrefix: this.classPrefix,
        ellipsisOverlayClassName: this.size !== "medium" ? this.sizeClassNames[this.size] : ""
      };
      var onlyVirtualScrollBordered = !!(this.isVirtual && !this.headerAffixedTop && this.bordered) && /Chrome/.test((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.userAgent);
      var borderWidth = this.bordered && onlyVirtualScrollBordered ? 1 : 0;
      var affixHeaderWrapHeight = (((_this$affixHeaderRef = this.affixHeaderRef) === null || _this$affixHeaderRef === void 0 ? void 0 : _this$affixHeaderRef.getBoundingClientRect().height) || 0) - this.scrollbarWidth - borderWidth;
      var headerOpacity = baseTableProps.headerAffixedTop ? Number(this.showAffixHeader) : 1;
      var affixHeaderWrapHeightStyle = {
        width: "".concat(this.tableWidth, "px"),
        height: "".concat(affixHeaderWrapHeight, "px"),
        opacity: headerOpacity,
        marginTop: onlyVirtualScrollBordered ? "".concat(borderWidth, "px") : 0
      };
      var affixedLeftBorder = this.bordered ? 1 : 0;
      var affixedHeader = Boolean((this.headerAffixedTop || this.isVirtual) && this.tableWidth) && vue.createVNode("div", {
        "ref": "affixHeaderRef",
        "style": {
          width: "".concat(this.tableWidth - affixedLeftBorder, "px"),
          opacity: Number(this.showAffixHeader)
        },
        "class": ["scrollbar", _defineProperty$3({}, this.tableBaseClass.affixedHeaderElm, this.headerAffixedTop || this.isVirtual)]
      }, [vue.createVNode("table", {
        "class": this.tableElmClasses,
        "style": _objectSpread$s(_objectSpread$s({}, this.tableElementStyles), {}, {
          width: "".concat(this.tableElmWidth, "px")
        })
      }, [renderColGroup(true), vue.createVNode(THead, headProps, this.$slots)])]);
      var affixHeaderWithWrap = vue.createVNode("div", {
        "class": this.tableBaseClass.affixedHeaderWrap,
        "style": affixHeaderWrapHeightStyle
      }, [affixedHeader]);
      var marginScrollbarWidth = this.isWidthOverflow ? this.scrollbarWidth : 0;
      if (this.bordered) {
        marginScrollbarWidth += 1;
      }
      var affixedFooter = Boolean(this.footerAffixedBottom && ((_this$footData = this.footData) === null || _this$footData === void 0 ? void 0 : _this$footData.length) && this.tableWidth) && vue.createVNode(Affix, vue.mergeProps({
        "class": this.tableBaseClass.affixedFooterWrap,
        "onFixedChange": this.onFixedChange,
        "offsetBottom": marginScrollbarWidth || 0
      }, getAffixProps(this.footerAffixedBottom), {
        "style": {
          marginTop: "".concat(-1 * (this.tableFootHeight + marginScrollbarWidth), "px")
        },
        "ref": "footerBottomAffixRef"
      }), {
        "default": function _default() {
          return [vue.createVNode("div", {
            "ref": "affixFooterRef",
            "style": {
              width: "".concat(_this.tableWidth - affixedLeftBorder, "px"),
              opacity: Number(_this.showAffixFooter)
            },
            "class": ["scrollbar", _defineProperty$3({}, _this.tableBaseClass.affixedFooterElm, _this.footerAffixedBottom || _this.isVirtual)]
          }, [vue.createVNode("table", {
            "class": _this.tableElmClasses,
            "style": _objectSpread$s(_objectSpread$s({}, _this.tableElementStyles), {}, {
              width: "".concat(_this.tableElmWidth, "px")
            })
          }, [renderColGroup(true), vue.createVNode(TFoot, {
            "rowKey": _this.rowKey,
            "isFixedHeader": _this.isFixedHeader,
            "rowAndColFixedPosition": rowAndColFixedPosition,
            "footData": _this.footData,
            "columns": columns,
            "rowAttributes": _this.rowAttributes,
            "rowClassName": _this.rowClassName,
            "thWidthList": _this.thWidthList,
            "footerSummary": _this.footerSummary,
            "rowspanAndColspanInFooter": _this.rowspanAndColspanInFooter
          }, _this.$slots)])])];
        }
      });
      var translate = "translate(0, ".concat(this.scrollHeight, "px)");
      var virtualStyle = {
        transform: translate,
        "-ms-transform": translate,
        "-moz-transform": translate,
        "-webkit-transform": translate
      };
      var tableBodyProps = _objectSpread$s({
        classPrefix: this.classPrefix,
        ellipsisOverlayClassName: this.size !== "medium" ? this.sizeClassNames[this.size] : "",
        rowAndColFixedPosition: rowAndColFixedPosition,
        showColumnShadow: this.showColumnShadow,
        data: this.isVirtual ? this.visibleData : data,
        columns: this.spansAndLeafNodes.leafColumns,
        tableElm: this.tableRef,
        tableWidth: this.tableWidth,
        isWidthOverflow: this.isWidthOverflow,
        isVirtual: this.isVirtual,
        translateY: this.translateY,
        scrollType: this.scrollType,
        rowHeight: this.rowHeight,
        trs: this.trs,
        bufferSize: this.bufferSize,
        scroll: this.scroll,
        cellEmptyContent: this.cellEmptyContent,
        tableContentElm: this.tableContentRef,
        handleRowMounted: this.handleRowMounted,
        renderExpandedRow: this.renderExpandedRow
      }, pick_1(this.$props, extendTableProps));
      var tableContent = vue.createVNode("div", {
        "ref": "tableContentRef",
        "class": this.tableBaseClass.content,
        "style": this.tableContentStyles,
        "onScroll": this.onInnerVirtualScroll
      }, [this.isVirtual && vue.createVNode("div", {
        "class": this.virtualScrollClasses.cursor,
        "style": virtualStyle
      }, null), vue.createVNode("table", {
        "ref": "tableElmRef",
        "class": this.tableElmClasses,
        "style": this.tableElementStyles
      }, [renderColGroup(false), this.showHeader && vue.createVNode(THead, _objectSpread$s(_objectSpread$s({}, headProps), {}, {
        thWidthList: columnResizable ? this.thWidthList : {}
      }), this.$slots), vue.createVNode(TBody, tableBodyProps, this.$slots), vue.createVNode(TFoot, {
        "rowKey": this.rowKey,
        "isFixedHeader": this.isFixedHeader,
        "rowAndColFixedPosition": rowAndColFixedPosition,
        "footData": this.footData,
        "columns": columns,
        "rowAttributes": this.rowAttributes,
        "rowClassName": this.rowClassName,
        "footerSummary": this.footerSummary,
        "rowspanAndColspanInFooter": this.rowspanAndColspanInFooter
      }, this.$slots)])]);
      var customLoadingText = this.renderTNode("loading");
      var loadingContent = this.loading !== void 0 && vue.createVNode(Loading, vue.mergeProps({
        "loading": !!this.loading,
        "text": customLoadingText ? function () {
          return customLoadingText;
        } : void 0,
        "attach": this.tableRef ? function () {
          return _this.tableRef;
        } : void 0,
        "showOverlay": true,
        "size": "small"
      }, this.loadingProps), null);
      var topContent = this.renderTNode("topContent");
      var bottomContent = this.renderTNode("bottomContent");
      var pagination = vue.createVNode("div", {
        "ref": "paginationRef",
        "class": this.tableBaseClass.paginationWrap,
        "style": {
          opacity: Number(this.showAffixPagination)
        }
      }, [this.renderPagination()]);
      var bottom = !!bottomContent && vue.createVNode("div", {
        "class": this.tableBaseClass.bottomContent
      }, [bottomContent]);
      return vue.createVNode("div", {
        "ref": "tableRef",
        "class": this.dynamicBaseTableClasses,
        "style": "position: relative"
      }, [!!topContent && vue.createVNode("div", {
        "class": this.tableBaseClass.topContent
      }, [topContent]), renderAffixedHeader(), tableContent, affixedFooter, loadingContent, this.showRightDivider && vue.createVNode("div", {
        "class": this.tableBaseClass.scrollbarDivider,
        "style": {
          right: "".concat(this.scrollbarWidth, "px"),
          height: "".concat((_this$tableContentRef = this.tableContentRef) === null || _this$tableContentRef === void 0 ? void 0 : _this$tableContentRef.getBoundingClientRect().height, "px")
        }
      }, null), bottom, this.horizontalScrollAffixedBottom && renderAffixedHorizontalScrollbar(), this.paginationAffixedBottom ? vue.createVNode(Affix, vue.mergeProps({
        "offsetBottom": 0
      }, getAffixProps(this.paginationAffixedBottom), {
        "ref": "paginationAffixRef"
      }), _isSlot$3(pagination) ? pagination : {
        "default": function _default() {
          return [pagination];
        }
      }) : pagination, vue.createVNode("div", {
        "ref": "resizeLineRef",
        "class": this.tableBaseClass.resizeLine,
        "style": this.resizeLineStyle
      }, null)]);
    }
  });

  var primaryTableProps = {
    asyncLoading: {
      type: [String, Function]
    },
    columnController: {
      type: Object
    },
    columnControllerVisible: {
      type: Boolean,
      "default": void 0
    },
    defaultColumnControllerVisible: {
      type: Boolean,
      "default": void 0
    },
    columns: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    displayColumns: {
      type: Array,
      "default": void 0
    },
    defaultDisplayColumns: {
      type: Array
    },
    dragSort: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["row", "row-handler", "col", "row-handler-col", "drag-col"].includes(val);
      }
    },
    dragSortOptions: {
      type: Object
    },
    editableCellState: {
      type: Function
    },
    editableRowKeys: {
      type: Array
    },
    expandIcon: {
      type: [Boolean, Function],
      "default": true
    },
    expandOnRowClick: Boolean,
    expandedRow: {
      type: [String, Function]
    },
    expandedRowKeys: {
      type: Array,
      "default": void 0
    },
    defaultExpandedRowKeys: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    filterIcon: {
      type: Function
    },
    filterRow: {
      type: [String, Function]
    },
    filterValue: {
      type: Object,
      "default": void 0
    },
    defaultFilterValue: {
      type: Object
    },
    hideSortTips: Boolean,
    indeterminateSelectedRowKeys: {
      type: Array
    },
    multipleSort: Boolean,
    selectedRowKeys: {
      type: Array,
      "default": void 0
    },
    defaultSelectedRowKeys: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    showSortColumnBgColor: Boolean,
    sort: {
      type: [Object, Array],
      "default": void 0
    },
    defaultSort: {
      type: [Object, Array]
    },
    sortIcon: {
      type: Function
    },
    sortOnRowDraggable: Boolean,
    onAsyncLoadingClick: Function,
    onCellClick: Function,
    onChange: Function,
    onColumnChange: Function,
    onColumnControllerVisibleChange: Function,
    onDataChange: Function,
    onDisplayColumnsChange: Function,
    onDragSort: Function,
    onExpandChange: Function,
    onFilterChange: Function,
    onRowEdit: Function,
    onRowValidate: Function,
    onSelectChange: Function,
    onSortChange: Function,
    onValidate: Function
  };

  function ownKeys$s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$s(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getColumnKeys(columns) {
    var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();
    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;
      var col = columns[i];
      col.colKey && keys.add(col.colKey);
      if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        getColumnKeys(col.children, keys);
      }
    }
    return keys;
  }
  function useColumnController(props, context) {
    var _useConfig = useConfig("table"),
      classPrefix = _useConfig.classPrefix,
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        SettingIcon: setting
      }),
      SettingIcon = _useGlobalIcon.SettingIcon;
    var _toRefs = vue.toRefs(props),
      columns = _toRefs.columns,
      columnController = _toRefs.columnController,
      displayColumns = _toRefs.displayColumns,
      columnControllerVisible = _toRefs.columnControllerVisible;
    var dialogInstance = vue.ref(null);
    var enabledColKeys = vue.computed(function () {
      var _columnController$val;
      var arr = (((_columnController$val = columnController.value) === null || _columnController$val === void 0 ? void 0 : _columnController$val.fields) || _toConsumableArray(getColumnKeys(columns.value))).filter(function (v) {
        return v;
      });
      return new Set(arr);
    });
    var keys = _toConsumableArray(getColumnKeys(columns.value));
    var _useDefaultValue = useDefaultValue(displayColumns, props.defaultDisplayColumns || keys, props.onDisplayColumnsChange, "displayColumns"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tDisplayColumns = _useDefaultValue2[0],
      setTDisplayColumns = _useDefaultValue2[1];
    var columnCheckboxKeys = vue.ref(displayColumns.value || props.defaultDisplayColumns || keys);
    var checkboxOptions = vue.computed(function () {
      return getCheckboxOptions(columns.value);
    });
    var intersectionChecked = vue.computed(function () {
      return intersection_1(columnCheckboxKeys.value, _toConsumableArray(enabledColKeys.value));
    });
    vue.watch([displayColumns], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
        val = _ref2[0];
      columnCheckboxKeys.value = val || props.defaultDisplayColumns || keys;
    });
    function getCheckboxOptions(columns2) {
      var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var _loop = function _loop(i, len) {
        var _item$children;
        var item = columns2[i];
        if (item.colKey) {
          arr.push({
            label: function label() {
              return renderTitle(context.slots, item, i);
            },
            value: item.colKey,
            disabled: !enabledColKeys.value.has(item.colKey)
          });
        }
        if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
          getCheckboxOptions(item.children, arr);
        }
      };
      for (var i = 0, len = columns2.length; i < len; i++) {
        _loop(i);
      }
      return arr;
    }
    var handleCheckChange = function handleCheckChange(val, ctx) {
      var _props$onColumnChange;
      columnCheckboxKeys.value = val;
      var params = {
        columns: val,
        type: ctx.type,
        currentColumn: getCurrentRowByKey(columns.value, String(ctx.current)),
        e: ctx.e
      };
      (_props$onColumnChange = props.onColumnChange) === null || _props$onColumnChange === void 0 ? void 0 : _props$onColumnChange.call(props, params);
    };
    var handleClickAllShowColumns = function handleClickAllShowColumns(checked, ctx) {
      if (checked) {
        var _checkboxOptions$valu, _props$onColumnChange2;
        var newData = ((_checkboxOptions$valu = checkboxOptions.value) === null || _checkboxOptions$valu === void 0 ? void 0 : _checkboxOptions$valu.map(function (t) {
          return t.value;
        })) || [];
        columnCheckboxKeys.value = newData;
        (_props$onColumnChange2 = props.onColumnChange) === null || _props$onColumnChange2 === void 0 ? void 0 : _props$onColumnChange2.call(props, {
          type: "check",
          columns: newData,
          e: ctx.e
        });
      } else {
        var _props$onColumnChange3;
        var disabledColKeys = checkboxOptions.value.filter(function (t) {
          return t.disabled;
        }).map(function (t) {
          return t.value;
        });
        columnCheckboxKeys.value = disabledColKeys;
        (_props$onColumnChange3 = props.onColumnChange) === null || _props$onColumnChange3 === void 0 ? void 0 : _props$onColumnChange3.call(props, {
          type: "uncheck",
          columns: disabledColKeys,
          e: ctx.e
        });
      }
    };
    var handleToggleColumnController = function handleToggleColumnController() {
      var _columnController$val4;
      dialogInstance.value = DialogPlugin.confirm(_objectSpread$r({
        header: globalConfig.value.columnConfigTitleText,
        body: function body() {
          var _columnController$val2, _columnController$val3;
          var widthMode = ((_columnController$val2 = columnController.value) === null || _columnController$val2 === void 0 ? void 0 : _columnController$val2.displayType) === "fixed-width" ? "fixed" : "auto";
          var checkedLength = intersectionChecked.value.length;
          var isCheckedAll = checkedLength === enabledColKeys.value.size;
          var isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.value.size;
          var defaultNode = vue.createVNode("div", {
            "class": ["".concat(classPrefix.value, "-table__column-controller"), "".concat(classPrefix.value, "-table__column-controller--").concat(widthMode)]
          }, [vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-table__column-controller-body")
          }, [vue.createVNode("p", {
            "class": "".concat(classPrefix.value, "-table__column-controller-desc")
          }, [globalConfig.value.columnConfigDescriptionText]), vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-table__column-controller-block")
          }, [vue.createVNode(Checkbox, {
            "indeterminate": isIndeterminate,
            "checked": isCheckedAll,
            "onChange": handleClickAllShowColumns
          }, {
            "default": function _default() {
              return [globalConfig.value.selectAllText];
            }
          })]), vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-table__column-controller-block")
          }, [vue.createVNode(CheckboxGroup, vue.mergeProps({
            "options": checkboxOptions.value
          }, ((_columnController$val3 = columnController.value) === null || _columnController$val3 === void 0 ? void 0 : _columnController$val3.checkboxProps) || {}, {
            "value": columnCheckboxKeys.value,
            "onChange": handleCheckChange
          }), null)])])]);
          return defaultNode;
        },
        confirmBtn: globalConfig.value.confirmText,
        cancelBtn: globalConfig.value.cancelText,
        width: 612,
        onConfirm: function onConfirm() {
          setTDisplayColumns(_toConsumableArray(columnCheckboxKeys.value));
          if (columnControllerVisible.value === void 0) {
            dialogInstance.value.hide();
          } else {
            var _props$onColumnContro;
            (_props$onColumnContro = props.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 ? void 0 : _props$onColumnContro.call(props, false, {
              trigger: "cancel"
            });
            context.emit("update:columnControllerVisible", false);
          }
        },
        onClose: function onClose() {
          if (columnControllerVisible.value === void 0) {
            dialogInstance.value.hide();
          } else {
            var _props$onColumnContro2;
            (_props$onColumnContro2 = props.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 ? void 0 : _props$onColumnContro2.call(props, false, {
              trigger: "confirm"
            });
            context.emit("update:columnControllerVisible", false);
          }
        }
      }, ((_columnController$val4 = columnController.value) === null || _columnController$val4 === void 0 ? void 0 : _columnController$val4.dialogProps) || {}));
    };
    vue.watch([columnControllerVisible], function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 1),
        visible = _ref4[0];
      if (visible === void 0) return;
      if (dialogInstance.value) {
        visible ? dialogInstance.value.show() : dialogInstance.value.hide();
      } else {
        visible && handleToggleColumnController();
      }
    }, {
      immediate: true
    });
    var renderColumnController = function renderColumnController() {
      var _props$columnControll;
      var isColumnController = !!(columnController.value && Object.keys(columnController.value).length);
      var placement = isColumnController ? columnController.value.placement || "top-right" : "";
      if (isColumnController && columnController.value.hideTriggerButton) return null;
      var classes = ["".concat(classPrefix.value, "-table__column-controller-trigger"), _defineProperty$3({}, "".concat(classPrefix.value, "-align-").concat(placement), !!placement)];
      return vue.createVNode("div", {
        "class": classes
      }, [vue.createVNode(Button, vue.mergeProps({
        "theme": "default",
        "variant": "outline",
        "onClick": handleToggleColumnController,
        "content": globalConfig.value.columnConfigButtonText
      }, (_props$columnControll = props.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps), {
        icon: function icon() {
          return vue.createVNode(SettingIcon, null, null);
        }
      })]);
    };
    return {
      tDisplayColumns: tDisplayColumns,
      columnCheckboxKeys: columnCheckboxKeys,
      checkboxOptions: checkboxOptions,
      renderColumnController: renderColumnController
    };
  }

  function useRowExpand(props, context) {
    var _toRefs = vue.toRefs(props),
      expandedRowKeys = _toRefs.expandedRowKeys;
    var renderTNode = useTNodeJSX();
    var _useConfig = useConfig("table"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        ChevronRightCircleIcon: chevronRightCircle
      }),
      ChevronRightCircleIcon = _useGlobalIcon.ChevronRightCircleIcon;
    var _useClassName = useClassName(),
      tableExpandClasses = _useClassName.tableExpandClasses,
      positiveRotate90 = _useClassName.positiveRotate90,
      tableFullRowClasses = _useClassName.tableFullRowClasses;
    var _useDefaultValue = useDefaultValue(expandedRowKeys, props.defaultExpandedRowKeys || [], props.onExpandChange, "expandedRowKeys"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tExpandedRowKeys = _useDefaultValue2[0],
      setTExpandedRowKeys = _useDefaultValue2[1];
    var showExpandedRow = vue.computed(function () {
      return Boolean(props.expandedRow || context.slots.expandedRow || context.slots["expanded-row"]);
    });
    var showExpandIconColumn = vue.computed(function () {
      return props.expandIcon !== false && showExpandedRow.value;
    });
    var isFirstColumnFixed = vue.computed(function () {
      var _props$columns, _props$columns$;
      return ((_props$columns = props.columns) === null || _props$columns === void 0 ? void 0 : (_props$columns$ = _props$columns[0]) === null || _props$columns$ === void 0 ? void 0 : _props$columns$.fixed) === "left";
    });
    var onToggleExpand = function onToggleExpand(e, row) {
      props.expandOnRowClick && e.stopPropagation();
      var currentId = get_1(row, props.rowKey || "id");
      var index = tExpandedRowKeys.value.indexOf(currentId);
      var newKeys = _toConsumableArray(tExpandedRowKeys.value);
      index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);
      setTExpandedRowKeys(newKeys, {
        expandedRowData: props.data.filter(function (t2) {
          return newKeys.includes(get_1(t2, props.rowKey || "id"));
        }),
        currentRowData: row
      });
    };
    var renderExpandIcon = function renderExpandIcon(_, p) {
      var row = p.row,
        rowIndex = p.rowIndex;
      var currentId = get_1(row, props.rowKey || "id");
      var expanded = tExpandedRowKeys.value.includes(currentId);
      var icon = renderTNode("expandIcon", {
        defaultNode: t(globalConfig.value.expandIcon) || vue.createVNode(ChevronRightCircleIcon, null, null),
        params: {
          row: row,
          index: rowIndex
        }
      });
      if (!icon) return null;
      var classes = [tableExpandClasses.iconBox, tableExpandClasses[expanded ? "expanded" : "collapsed"], _defineProperty$3({}, positiveRotate90, expanded)];
      return vue.createVNode("span", {
        "class": classes,
        "onClick": function onClick(e) {
          return onToggleExpand(e, row);
        }
      }, [icon]);
    };
    var getExpandColumn = function getExpandColumn() {
      var expandCol = {
        colKey: "__EXPAND_ROW_ICON_COLUMN__",
        width: 46,
        className: tableExpandClasses.iconCell,
        fixed: isFirstColumnFixed.value ? "left" : void 0,
        cell: renderExpandIcon
      };
      return expandCol;
    };
    var renderExpandedRow = function renderExpandedRow(p) {
      var rowId = get_1(p.row, props.rowKey || "id");
      if (!tExpandedRowKeys.value || !tExpandedRowKeys.value.includes(rowId)) return null;
      var isFixedLeft = p.isWidthOverflow && props.columns.find(function (item) {
        return item.fixed === "left";
      });
      return vue.createVNode("tr", {
        "key": "expand_".concat(rowId),
        "class": [tableExpandClasses.row, _defineProperty$3({}, tableFullRowClasses.base, isFixedLeft)]
      }, [vue.createVNode("td", {
        "colspan": p.columns.length
      }, [vue.createVNode("div", {
        "class": [tableExpandClasses.rowInner, _defineProperty$3({}, tableFullRowClasses.innerFullRow, isFixedLeft)],
        "style": isFixedLeft ? {
          width: "".concat(p.tableWidth, "px")
        } : {}
      }, [vue.createVNode("div", {
        "class": tableFullRowClasses.innerFullElement
      }, [renderTNode("expandedRow", {
        params: p
      })])])])]);
    };
    var onInnerExpandRowClick = function onInnerExpandRowClick(p) {
      onToggleExpand(p.e, p.row);
    };
    return {
      showExpandedRow: showExpandedRow,
      showExpandIconColumn: showExpandIconColumn,
      getExpandColumn: getExpandColumn,
      renderExpandedRow: renderExpandedRow,
      onInnerExpandRowClick: onInnerExpandRowClick
    };
  }

  function ownKeys$r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$r(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useRowSelect(props, tableSelectedClasses) {
    var _toRefs = vue.toRefs(props),
      selectedRowKeys = _toRefs.selectedRowKeys,
      columns = _toRefs.columns,
      data = _toRefs.data,
      rowKey = _toRefs.rowKey;
    var selectedRowClassNames = vue.ref();
    var _useDefaultValue = useDefaultValue(selectedRowKeys, props.defaultSelectedRowKeys || [], props.onSelectChange, "selectedRowKeys"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tSelectedRowKeys = _useDefaultValue2[0],
      setTSelectedRowKeys = _useDefaultValue2[1];
    var selectedRowDataMap = vue.ref( /* @__PURE__ */new Map());
    var selectColumn = vue.computed(function () {
      return props.columns.find(function (_ref) {
        var type = _ref.type;
        return ["multiple", "single"].includes(type);
      });
    });
    var canSelectedRows = vue.computed(function () {
      return data.value.filter(function (row, rowIndex) {
        return !isDisabled(row, rowIndex);
      });
    });
    var intersectionKeys = vue.computed(function () {
      return intersection_1(tSelectedRowKeys.value, canSelectedRows.value.map(function (t) {
        return get_1(t, props.rowKey || "id");
      }));
    });
    vue.watch([data, columns, tSelectedRowKeys, selectColumn, rowKey], function () {
      var _selectColumn$value;
      var disabledRowFunc = function disabledRowFunc(p) {
        return selectColumn.value.disabled(p) ? tableSelectedClasses.disabled : "";
      };
      var disabledRowClass = (_selectColumn$value = selectColumn.value) !== null && _selectColumn$value !== void 0 && _selectColumn$value.disabled ? disabledRowFunc : void 0;
      var selected = new Set(tSelectedRowKeys.value);
      var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
        var row = _ref2.row;
        var rowId = get_1(row, props.rowKey || "id");
        return selected.has(rowId) ? tableSelectedClasses.selected : "";
      };
      var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
      selectedRowClassNames.value = [disabledRowClass, selectedRowClass];
    }, {
      immediate: true
    });
    function isDisabled(row, rowIndex) {
      return isRowSelectedDisabled(selectColumn.value, row, rowIndex);
    }
    function getSelectedHeader() {
      return function () {
        var isIndeterminate = intersectionKeys.value.length > 0 && intersectionKeys.value.length < canSelectedRows.value.length;
        var isChecked = intersectionKeys.value.length !== 0 && canSelectedRows.value.length !== 0 && intersectionKeys.value.length === canSelectedRows.value.length;
        return vue.createVNode(Checkbox, {
          "checked": isChecked,
          "indeterminate": isIndeterminate,
          "disabled": !canSelectedRows.value.length,
          "onChange": handleSelectAll
        }, null);
      };
    }
    function renderSelectCell(p) {
      var column = p.col,
        _p$row = p.row,
        row = _p$row === void 0 ? {} : _p$row,
        rowIndex = p.rowIndex;
      var checked = tSelectedRowKeys.value.includes(get_1(row, props.rowKey || "id"));
      var disabled = typeof column.disabled === "function" ? column.disabled({
        row: row,
        rowIndex: rowIndex
      }) : column.disabled;
      var checkProps = isFunction_1(column.checkProps) ? column.checkProps({
        row: row,
        rowIndex: rowIndex
      }) : column.checkProps;
      var selectBoxProps = _objectSpread$q(_objectSpread$q({
        checked: checked,
        disabled: disabled
      }, checkProps), {}, {
        onClick: function onClick(e) {
          if (_typeof$2(e) === "object" && "e" in e) {
            var _e$e;
            (_e$e = e.e) === null || _e$e === void 0 ? void 0 : _e$e.stopPropagation();
          } else {
            e === null || e === void 0 ? void 0 : e.stopPropagation();
          }
        },
        onChange: function onChange() {
          return handleSelectChange(row);
        }
      });
      if (column.type === "single") return vue.createVNode(Radio, selectBoxProps, null);
      if (column.type === "multiple") {
        var _props$indeterminateS;
        var isIndeterminate = (_props$indeterminateS = props.indeterminateSelectedRowKeys) !== null && _props$indeterminateS !== void 0 && _props$indeterminateS.length ? props.indeterminateSelectedRowKeys.includes(get_1(row, props.rowKey)) : false;
        return vue.createVNode(Checkbox, vue.mergeProps({
          "indeterminate": isIndeterminate
        }, selectBoxProps), null);
      }
      return null;
    }
    function handleSelectChange() {
      var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys.value);
      var reRowKey = props.rowKey || "id";
      var id = get_1(row, reRowKey);
      var selectedRowIndex = selectedRowKeys2.indexOf(id);
      var isExisted = selectedRowIndex !== -1;
      if (selectColumn.value.type === "multiple") {
        isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
      } else if (selectColumn.value.type === "single") {
        selectedRowKeys2 = !isExisted ? [id] : [];
      } else {
        log.warn("Table", "`column.type` must be one of `multiple` and `single`");
        return;
      }
      setTSelectedRowKeys(selectedRowKeys2, {
        selectedRowData: selectedRowKeys2.map(function (t) {
          return selectedRowDataMap.value.get(t);
        }),
        currentRowKey: id,
        currentRowData: row,
        type: isExisted ? "uncheck" : "check"
      });
    }
    function handleSelectAll(checked) {
      var _selectedRowKeys$valu;
      var reRowKey = props.rowKey || "id";
      var canSelectedRowKeys = canSelectedRows.value.map(function (record) {
        return get_1(record, reRowKey);
      });
      var disabledSelectedRowKeys = ((_selectedRowKeys$valu = selectedRowKeys.value) === null || _selectedRowKeys$valu === void 0 ? void 0 : _selectedRowKeys$valu.filter(function (id) {
        return !canSelectedRowKeys.includes(id);
      })) || [];
      var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
      setTSelectedRowKeys(allIds, {
        selectedRowData: checked ? allIds.map(function (t) {
          return selectedRowDataMap.value.get(t);
        }) : [],
        type: checked ? "check" : "uncheck",
        currentRowKey: "CHECK_ALL_BOX"
      });
    }
    function formatToRowSelectColumn(col) {
      var isSelection = ["multiple", "single"].includes(col.type);
      if (!isSelection) return col;
      return _objectSpread$q(_objectSpread$q({}, col), {}, {
        width: col.width || 64,
        className: [tableSelectedClasses.checkCell, col.className],
        cell: function cell(_, p) {
          return renderSelectCell(p);
        },
        title: col.type === "multiple" ? getSelectedHeader() : col.title
      });
    }
    vue.watch([data, rowKey], function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
        data2 = _ref4[0],
        rowKey2 = _ref4[1];
      for (var i = 0, len = data2.length; i < len; i++) {
        selectedRowDataMap.value.set(get_1(data2[i], rowKey2 || "id"), data2[i]);
      }
    }, {
      immediate: true
    });
    return {
      selectedRowClassNames: selectedRowClassNames,
      formatToRowSelectColumn: formatToRowSelectColumn
    };
  }

  function _isSlot$2(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var SorterButton = vue.defineComponent({
    name: "TSorterButton",
    props: {
      sortType: {
        type: String,
        "default": "all"
      },
      sortOrder: {
        type: String,
        "default": function _default() {
          return "";
        }
      },
      sortIcon: Function,
      tooltipProps: Object,
      hideSortTips: Boolean
    },
    emits: ["sort-icon-click"],
    setup: function setup(props, context) {
      var _useClassName = useClassName(),
        tableSortClasses = _useClassName.tableSortClasses,
        negativeRotate180 = _useClassName.negativeRotate180;
      var renderTNode = useTNodeDefault();
      var _useConfig = useConfig("table"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          ChevronDownIcon: chevronDown
        }),
        ChevronDownIcon = _useGlobalIcon.ChevronDownIcon;
      var allowSortTypes = vue.computed(function () {
        return props.sortType === "all" ? ["asc", "desc"] : [props.sortType];
      });
      var onSortIconClick = function onSortIconClick(e, direction) {
        context.emit("sort-icon-click", e, {
          descending: direction === "desc"
        });
      };
      return {
        t: t,
        globalConfig: globalConfig,
        ChevronDownIcon: ChevronDownIcon,
        tableSortClasses: tableSortClasses,
        negativeRotate180: negativeRotate180,
        allowSortTypes: allowSortTypes,
        onSortIconClick: onSortIconClick,
        renderTNode: renderTNode
      };
    },
    methods: {
      getSortIcon: function getSortIcon(direction, activeClass) {
        var _this = this;
        var ChevronDownIcon = this.ChevronDownIcon;
        var defaultIcon = this.t(this.globalConfig.sortIcon) || vue.createVNode(ChevronDownIcon, null, null);
        var icon = this.renderTNode("sortIcon", defaultIcon);
        var sortClassName = [activeClass, this.tableSortClasses.sortIcon, this.tableSortClasses.iconDirection[direction], _defineProperty$3({}, this.negativeRotate180, direction === "asc")];
        return vue.createVNode("span", {
          "class": sortClassName,
          "onClick": function onClick(e) {
            return _this.onSortIconClick(e, direction);
          }
        }, [icon]);
      }
    },
    render: function render() {
      var _this2 = this;
      var tableSortClasses = this.tableSortClasses;
      var classes = [tableSortClasses.trigger, _defineProperty$3({}, tableSortClasses.doubleIcon, this.allowSortTypes.length > 1)];
      var tooltips = {
        asc: this.globalConfig.sortAscendingOperationText,
        desc: this.globalConfig.sortDescendingOperationText
      };
      var sortButton = this.allowSortTypes.map(function (direction) {
        var _slot;
        var _this2$hideSortTips;
        var activeClass = direction === _this2.sortOrder ? tableSortClasses.iconActive : tableSortClasses.iconDefault;
        var cancelTips = _this2.globalConfig.sortCancelOperationText;
        var tips = direction === _this2.sortOrder ? cancelTips : tooltips[direction];
        if ((_this2$hideSortTips = _this2.hideSortTips) !== null && _this2$hideSortTips !== void 0 ? _this2$hideSortTips : _this2.globalConfig.hideSortTips) return _this2.getSortIcon(direction, activeClass);
        return vue.createVNode(Tooltip, vue.mergeProps({
          "content": tips,
          "placement": "right"
        }, _this2.tooltipProps, {
          "showArrow": false,
          "class": _this2.tableSortClasses.iconDirection[direction]
        }), _isSlot$2(_slot = _this2.getSortIcon(direction, activeClass)) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      });
      return vue.createVNode("div", {
        "class": classes
      }, [sortButton]);
    }
  });

  function ownKeys$q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useSorter(props, _ref) {
    _ref.emit;
      var slots = _ref.slots;
    var _toRefs = vue.toRefs(props),
      sort = _toRefs.sort,
      data = _toRefs.data;
    var originalData = vue.ref();
    var _useDefaultValue = useDefaultValue(sort, props.defaultSort, props.onSortChange, "sort"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tSortInfo = _useDefaultValue2[0],
      setTSortInfo = _useDefaultValue2[1];
    var _useDefaultValue3 = useDefaultValue(data, [], props.onDataChange, "data"),
      _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2),
      tData = _useDefaultValue4[0],
      setTData = _useDefaultValue4[1];
    var sorterFuncMap = vue.computed(function () {
      return getSorterFuncMap(props.columns);
    });
    var sortArray = vue.computed(function () {
      var sort2 = tSortInfo.value;
      if (!sort2) return [];
      return Array.isArray(sort2) ? sort2 : [sort2];
    });
    var sortMap = vue.computed(function () {
      var sortMap2 = {};
      sortArray.value.forEach(function (info, index) {
        var sortBy = info.sortBy;
        sortMap2[sortBy] = _objectSpread$p({
          index: index
        }, info);
      });
      return sortMap2;
    });
    function getSorterFuncMap(columns) {
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      for (var i = 0, len = columns.length; i < len; i++) {
        var _col$children;
        var col = columns[i];
        if (isFunction_1(col.sorter)) {
          map[col.colKey] = col.sorter;
        }
        if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
          getSorterFuncMap(col.children, map);
        }
      }
      return map;
    }
    function handleDataSort(sortInfo) {
      var sort2 = sortInfo;
      if (!Object.keys(sorterFuncMap.value).length) return;
      if (!originalData.value) {
        originalData.value = tData.value;
      }
      var isEmptyArraySort = !sort2 || sort2 instanceof Array && !sort2.length;
      var isEmptyObjectSort = !(sort2 instanceof Array) && !(sort2 !== null && sort2 !== void 0 && sort2.sortBy);
      if (isEmptyArraySort || isEmptyObjectSort) {
        setTData(originalData.value, {
          trigger: "sort"
        });
        return originalData.value;
      }
      var formatedSort = sort2 instanceof Array ? sort2 : [sort2];
      var newData = tData.value.slice().sort(function (a, b) {
        var sortResult = 0;
        for (var i = 0, len = formatedSort.length; i < len; i++) {
          var item = formatedSort[i];
          var sortFunc = sorterFuncMap.value[item.sortBy];
          if (sortResult === 0 && sortFunc) {
            sortResult = item.descending ? sortFunc(b, a) : sortFunc(a, b);
          } else {
            break;
          }
        }
        return sortResult;
      });
      if (JSON.stringify(newData) === JSON.stringify(tData.value)) return;
      setTData(newData, {
        trigger: "sort"
      });
      return newData;
    }
    function handleSortHeaderClick(col, p) {
      var _props$onChange;
      var sortInfo;
      if (props.multipleSort) {
        sortInfo = getMultipleNextSort(col, p);
      } else {
        var sort2 = tSortInfo.value instanceof Array ? tSortInfo.value[0] : tSortInfo.value;
        sortInfo = getSingleNextSort(col, sort2, p);
      }
      var newData = handleDataSort(sortInfo);
      var currentData = newData || tData.value;
      var currentDataSource = currentData;
      setTSortInfo(sortInfo, {
        currentDataSource: currentDataSource,
        col: col
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
        sorter: sortInfo
      }, {
        currentData: currentData,
        trigger: "sorter"
      });
    }
    function getSortOrder(descending) {
      if (descending === void 0) return;
      return descending ? "desc" : "asc";
    }
    function getSingleNextSort(col, sortInfo, p) {
      if (sortInfo && sortInfo.sortBy === col.colKey && sortInfo.descending === p.descending) {
        return void 0;
      }
      return {
        sortBy: col.colKey,
        descending: p.descending
      };
    }
    function getMultipleNextSort(col, p) {
      var sort2 = tSortInfo.value;
      if (!(sort2 instanceof Array)) return;
      var colKey = col.colKey;
      var result = _toConsumableArray(sort2);
      for (var i = 0, len = sort2.length; i < len; i++) {
        if (sort2[i].sortBy === colKey) {
          var next = getSingleNextSort(col, sort2[i], p);
          next ? result[i] = next : result.splice(i, 1);
          return result;
        }
      }
      result.push({
        sortBy: colKey,
        descending: p.descending
      });
      return result;
    }
    function renderSortIcon(_ref2) {
      var _sortMap$value$col$co;
      var col = _ref2.col;
      if (!col.sorter) return null;
      var sorterButtonsProps = {
        sortType: col.sortType,
        sortOrder: getSortOrder((_sortMap$value$col$co = sortMap.value[col.colKey]) === null || _sortMap$value$col$co === void 0 ? void 0 : _sortMap$value$col$co.descending),
        sortIcon: props.sortIcon,
        hideSortTips: props.hideSortTips
      };
      return vue.createVNode(SorterButton, vue.mergeProps(sorterButtonsProps, {
        "onSortIconClick": function onSortIconClick(_, p) {
          return handleSortHeaderClick(col, p);
        }
      }), {
        sortIcon: slots.sortIcon
      });
    }
    return {
      renderSortIcon: renderSortIcon
    };
  }

  function ownKeys$p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$p(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TableFilterController = vue.defineComponent({
    name: "TableFilterController",
    props: {
      column: Object,
      tFilterValue: Object,
      innerFilterValue: Object,
      tableFilterClasses: Object,
      isFocusClass: String,
      primaryTableElement: {},
      onVisibleChange: Function
    },
    emits: ["inner-filter-change", "reset", "confirm"],
    setup: function setup(props) {
      var triggerElementRef = vue.ref(null);
      var renderTNode = useTNodeDefault();
      var _useConfig = useConfig("table"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          FilterIcon: filter
        }),
        FilterIcon = _useGlobalIcon.FilterIcon;
      var filterPopupVisible = vue.ref(false);
      var onFilterPopupVisibleChange = function onFilterPopupVisibleChange(visible) {
        var _props$onVisibleChang;
        filterPopupVisible.value = visible;
        (_props$onVisibleChang = props.onVisibleChange) === null || _props$onVisibleChang === void 0 ? void 0 : _props$onVisibleChang.call(props, visible);
      };
      return {
        t: t,
        globalConfig: globalConfig,
        FilterIcon: FilterIcon,
        filterPopupVisible: filterPopupVisible,
        triggerElementRef: triggerElementRef,
        renderTNode: renderTNode,
        onFilterPopupVisibleChange: onFilterPopupVisibleChange
      };
    },
    render: function render() {
      var _this = this,
        _this$tFilterValue;
      var getFilterContent = function getFilterContent(column2) {
        var _column2$filter, _column2$filter2, _this$innerFilterValu;
        var types = ["single", "multiple", "input"];
        if (column2.type && !types.includes(column2.filter.type)) {
          console.error("TDesign Table Error: column.filter.type must be the following: ".concat(JSON.stringify(types)));
          return;
        }
        var component = {
          single: RadioGroup,
          multiple: CheckboxGroup,
          input: Input
        }[column2.filter.type] || column2.filter.component;
        if (!component && !column2.filter.component) return;
        var filterComponentProps = _objectSpread$o(_objectSpread$o({
          options: ["single", "multiple"].includes(column2.filter.type) ? (_column2$filter = column2.filter) === null || _column2$filter === void 0 ? void 0 : _column2$filter.list : void 0
        }, ((_column2$filter2 = column2.filter) === null || _column2$filter2 === void 0 ? void 0 : _column2$filter2.props) || {}), {}, {
          value: (_this$innerFilterValu = _this.innerFilterValue) === null || _this$innerFilterValu === void 0 ? void 0 : _this$innerFilterValu[column2.colKey],
          onChange: function onChange(val) {
            _this.$emit("inner-filter-change", val, column2);
          }
        });
        if (column2.filter.confirmEvents) {
          column2.filter.confirmEvents.forEach(function (event) {
            filterComponentProps[event] = function () {
              _this.$emit("confirm", column2);
              _this.filterPopupVisible = false;
            };
          });
        }
        var renderComponent = function renderComponent() {
          var _this$innerFilterValu2;
          if (!component) return null;
          var isVueComponent = !!component.setup;
          if (typeof column2.filter.component === "function" && !isVueComponent) {
            return column2.filter.component(function (v, b) {
              var tProps = _typeof$2(b) === "object" && "attrs" in b ? b.attrs : {};
              return vue.h(v, {
                props: _objectSpread$o(_objectSpread$o({}, filterComponentProps), tProps)
              });
            });
          }
          return vue.createVNode(component, vue.mergeProps({
            "value": (_this$innerFilterValu2 = _this.innerFilterValue) === null || _this$innerFilterValu2 === void 0 ? void 0 : _this$innerFilterValu2[column2.colKey]
          }, filterComponentProps), null);
        };
        return vue.createVNode("div", {
          "class": _this.tableFilterClasses.contentInner
        }, [renderComponent()]);
      };
      var getBottomButtons = function getBottomButtons(column2) {
        if (!column2.filter.showConfirmAndReset) return;
        return vue.createVNode("div", {
          "class": _this.tableFilterClasses.bottomButtons
        }, [vue.createVNode(Button, {
          "theme": "default",
          "size": "small",
          "onClick": function onClick() {
            _this.$emit("reset", column2);
            _this.filterPopupVisible = false;
          }
        }, {
          "default": function _default() {
            return [_this.globalConfig.resetText];
          }
        }), vue.createVNode(Button, {
          "theme": "primary",
          "size": "small",
          "onClick": function onClick() {
            _this.$emit("confirm", column2);
            _this.filterPopupVisible = false;
          }
        }, {
          "default": function _default() {
            return [_this.globalConfig.confirmText];
          }
        })]);
      };
      var column = this.column;
      var FilterIcon = this.FilterIcon;
      if (!column.filter || column.filter && !Object.keys(column.filter).length) return null;
      var defaultFilterIcon = this.t(this.globalConfig.filterIcon) || vue.createVNode(FilterIcon, null, null);
      var filterValue = (_this$tFilterValue = this.tFilterValue) === null || _this$tFilterValue === void 0 ? void 0 : _this$tFilterValue[column.colKey];
      var isObjectTrue = _typeof$2(filterValue) === "object" && !isEmpty_1(filterValue);
      var isValueTrue = filterValue && _typeof$2(filterValue) !== "object";
      return vue.createVNode(Popup, {
        "attach": this.primaryTableElement ? function () {
          return _this.primaryTableElement;
        } : void 0,
        "visible": this.filterPopupVisible,
        "destroyOnClose": true,
        "trigger": "click",
        "placement": "bottom-right",
        "showArrow": true,
        "overlayClassName": this.tableFilterClasses.popup,
        "onVisibleChange": function onVisibleChange(val) {
          return _this.onFilterPopupVisibleChange(val);
        },
        "class": [this.tableFilterClasses.icon, _defineProperty$3({}, this.isFocusClass, isObjectTrue || isValueTrue)],
        "content": function content() {
          return vue.createVNode("div", {
            "class": _this.tableFilterClasses.popupContent
          }, [getFilterContent(column), getBottomButtons(column)]);
        }
      }, {
        "default": function _default() {
          return [vue.createVNode("div", {
            "ref": "triggerElementRef"
          }, [_this.renderTNode("filterIcon", defaultFilterIcon)])];
        }
      });
    }
  });

  function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$o(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function isFilterValueExist(value) {
    var isArrayTrue = value instanceof Array && value.length;
    var isObject = _typeof$2(value) === "object" && !(value instanceof Array);
    var isObjectTrue = isObject && Object.keys(value).length;
    return isArrayTrue || isObjectTrue || !["null", "", "undefined"].includes(String(value));
  }
  function filterEmptyData(data) {
    var newFilterValue = {};
    Object.keys(data).forEach(function (key) {
      var item = data[key];
      if (isFilterValueExist(item)) {
        newFilterValue[key] = item;
      }
    });
    return newFilterValue;
  }
  function useFilter(props, context) {
    var primaryTableRef = vue.ref(null);
    var _useConfig = useConfig("table"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var renderTNode = useTNodeDefault();
    var _toRefs = vue.toRefs(props),
      filterValue = _toRefs.filterValue;
    var _useClassName = useClassName(),
      tableFilterClasses = _useClassName.tableFilterClasses,
      isFocusClass = _useClassName.isFocusClass;
    var isTableOverflowHidden = vue.ref();
    var _useDefaultValue = useDefaultValue(filterValue, props.defaultFilterValue, props.onFilterChange, "filterValue"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tFilterValue = _useDefaultValue2[0],
      setTFilterValue = _useDefaultValue2[1];
    var innerFilterValue = vue.ref(tFilterValue.value);
    var hasEmptyCondition = vue.computed(function () {
      var filterEmpty = filterEmptyData(tFilterValue.value || {});
      return !tFilterValue.value || !Object.keys(filterEmpty).length;
    });
    vue.watch([tFilterValue], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
        val = _ref2[0];
      innerFilterValue.value = val;
    });
    function renderFirstFilterRow() {
      var _props$pagination, _props$data;
      if (hasEmptyCondition.value) return null;
      var defaultNode = vue.createVNode("div", {
        "class": tableFilterClasses.result
      }, [vue.createVNode("span", null, [t(globalConfig.value.searchResultText, {
        result: getFilterResultContent(),
        count: ((_props$pagination = props.pagination) === null || _props$pagination === void 0 ? void 0 : _props$pagination.total) || ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length)
      })]), vue.createVNode(Button, {
        "theme": "primary",
        "variant": "text",
        "onClick": onResetAll
      }, {
        "default": function _default() {
          return [globalConfig.value.clearFilterResultButtonText];
        }
      })]);
      var filterContent = renderTNode("filterRow");
      if (props.filterRow && !filterContent) return null;
      return vue.createVNode("div", {
        "class": tableFilterClasses.inner
      }, [filterContent || defaultNode]);
    }
    function getFilterResultContent() {
      var arr = [];
      props.columns.filter(function (col) {
        return col.filter;
      }).forEach(function (col) {
        var value = tFilterValue.value[col.colKey];
        if (col.filter.list && !["null", "", "undefined"].includes(String(value))) {
          var formattedValue = value instanceof Array ? value : [value];
          var label = [];
          col.filter.list.forEach(function (option) {
            if (formattedValue.includes(option.value)) {
              label.push(option.label);
            }
          });
          value = label.join();
        }
        if (isFilterValueExist(value)) {
          arr.push("".concat(col.title, "\uFF1A").concat(value));
        }
      });
      return arr.join("\uFF1B");
    }
    function onInnerFilterChange(val, column) {
      var filterValue2 = _objectSpread$n(_objectSpread$n({}, innerFilterValue.value), {}, _defineProperty$3({}, column.colKey, val));
      innerFilterValue.value = filterValue2;
      if (!column.filter.showConfirmAndReset) {
        emitFilterChange(filterValue2, column);
      }
    }
    function emitFilterChange(filterValue2, column) {
      var _props$onChange;
      setTFilterValue(filterValue2, {
        col: column
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
        filter: filterValue2
      }, {
        trigger: "filter"
      });
    }
    function onReset(column) {
      var _ref3, _column$filter$resetV;
      var filterValue2 = _objectSpread$n(_objectSpread$n({}, tFilterValue.value), {}, _defineProperty$3({}, column.colKey, (_ref3 = (_column$filter$resetV = column.filter.resetValue) !== null && _column$filter$resetV !== void 0 ? _column$filter$resetV : {
        single: "",
        multiple: [],
        input: ""
      }[column.filter.type]) !== null && _ref3 !== void 0 ? _ref3 : ""));
      emitFilterChange(filterValue2, column);
    }
    function onResetAll() {
      emitFilterChange({}, void 0);
    }
    function onConfirm(column) {
      emitFilterChange(innerFilterValue.value, column);
    }
    function renderFilterIcon(_ref4) {
      var _primaryTableRef$valu;
      var col = _ref4.col;
      return vue.createVNode(TableFilterController, {
        "column": col,
        "filterIcon": props.filterIcon,
        "tFilterValue": tFilterValue.value,
        "innerFilterValue": innerFilterValue.value,
        "tableFilterClasses": tableFilterClasses,
        "isFocusClass": isFocusClass,
        "onReset": onReset,
        "onConfirm": onConfirm,
        "onInnerFilterChange": onInnerFilterChange,
        "primaryTableElement": (_primaryTableRef$valu = primaryTableRef.value) === null || _primaryTableRef$valu === void 0 ? void 0 : _primaryTableRef$valu.$el,
        "onVisibleChange": onPopupVisibleChange
      }, {
        filterIcon: context.slots.filterIcon
      });
    }
    function setFilterPrimaryTableRef(primaryTableElement) {
      primaryTableRef.value = primaryTableElement;
    }
    function onPopupVisibleChange(visible) {
      if (visible && !isTableOverflowHidden.value) {
        isTableOverflowHidden.value = !visible;
      }
    }
    return {
      hasEmptyCondition: hasEmptyCondition,
      isTableOverflowHidden: isTableOverflowHidden,
      renderFilterIcon: renderFilterIcon,
      renderFirstFilterRow: renderFirstFilterRow,
      setFilterPrimaryTableRef: setFilterPrimaryTableRef
    };
  }

  /**!
   * Sortable 1.15.0
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   */
  function ownKeys$n(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys$n(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$n(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }
    return _typeof(obj);
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var version = "1.15.0";
  function userAgent(pattern) {
    if (typeof window !== 'undefined' && window.navigator) {
      return !! /*@__PURE__*/navigator.userAgent.match(pattern);
    }
  }
  var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
  var Edge = userAgent(/Edge/i);
  var FireFox = userAgent(/firefox/i);
  var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
  var IOS = userAgent(/iP(ad|od|hone)/i);
  var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
  var captureMode = {
    capture: false,
    passive: false
  };
  function on(el, event, fn) {
    el.addEventListener(event, fn, !IE11OrLess && captureMode);
  }
  function off(el, event, fn) {
    el.removeEventListener(event, fn, !IE11OrLess && captureMode);
  }
  function matches( /**HTMLElement*/
  el, /**String*/
  selector) {
    if (!selector) return;
    selector[0] === '>' && (selector = selector.substring(1));
    if (el) {
      try {
        if (el.matches) {
          return el.matches(selector);
        } else if (el.msMatchesSelector) {
          return el.msMatchesSelector(selector);
        } else if (el.webkitMatchesSelector) {
          return el.webkitMatchesSelector(selector);
        }
      } catch (_) {
        return false;
      }
    }
    return false;
  }
  function getParentOrHost(el) {
    return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
  }
  function closest( /**HTMLElement*/
  el, /**String*/
  selector, /**HTMLElement*/
  ctx, includeCTX) {
    if (el) {
      ctx = ctx || document;
      do {
        if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
          return el;
        }
        if (el === ctx) break;
        /* jshint boss:true */
      } while (el = getParentOrHost(el));
    }
    return null;
  }
  var R_SPACE = /\s+/g;
  function toggleClass(el, name, state) {
    if (el && name) {
      if (el.classList) {
        el.classList[state ? 'add' : 'remove'](name);
      } else {
        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
      }
    }
  }
  function css(el, prop, val) {
    var style = el && el.style;
    if (style) {
      if (val === void 0) {
        if (document.defaultView && document.defaultView.getComputedStyle) {
          val = document.defaultView.getComputedStyle(el, '');
        } else if (el.currentStyle) {
          val = el.currentStyle;
        }
        return prop === void 0 ? val : val[prop];
      } else {
        if (!(prop in style) && prop.indexOf('webkit') === -1) {
          prop = '-webkit-' + prop;
        }
        style[prop] = val + (typeof val === 'string' ? '' : 'px');
      }
    }
  }
  function matrix(el, selfOnly) {
    var appliedTransforms = '';
    if (typeof el === 'string') {
      appliedTransforms = el;
    } else {
      do {
        var transform = css(el, 'transform');
        if (transform && transform !== 'none') {
          appliedTransforms = transform + ' ' + appliedTransforms;
        }
        /* jshint boss:true */
      } while (!selfOnly && (el = el.parentNode));
    }
    var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
    /*jshint -W056 */

    return matrixFn && new matrixFn(appliedTransforms);
  }
  function find(ctx, tagName, iterator) {
    if (ctx) {
      var list = ctx.getElementsByTagName(tagName),
        i = 0,
        n = list.length;
      if (iterator) {
        for (; i < n; i++) {
          iterator(list[i], i);
        }
      }
      return list;
    }
    return [];
  }
  function getWindowScrollingElement() {
    var scrollingElement = document.scrollingElement;
    if (scrollingElement) {
      return scrollingElement;
    } else {
      return document.documentElement;
    }
  }
  /**
   * Returns the "bounding client rect" of given element
   * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
   * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
   * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
   * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
   * @param  {[HTMLElement]} container              The parent the element will be placed in
   * @return {Object}                               The boundingClientRect of el, with specified adjustments
   */

  function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
    if (!el.getBoundingClientRect && el !== window) return;
    var elRect, top, left, bottom, right, height, width;
    if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
      elRect = el.getBoundingClientRect();
      top = elRect.top;
      left = elRect.left;
      bottom = elRect.bottom;
      right = elRect.right;
      height = elRect.height;
      width = elRect.width;
    } else {
      top = 0;
      left = 0;
      bottom = window.innerHeight;
      right = window.innerWidth;
      height = window.innerHeight;
      width = window.innerWidth;
    }
    if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
      // Adjust for translate()
      container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
      // Not needed on <= IE11

      if (!IE11OrLess) {
        do {
          if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
            var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

            top -= containerRect.top + parseInt(css(container, 'border-top-width'));
            left -= containerRect.left + parseInt(css(container, 'border-left-width'));
            bottom = top + elRect.height;
            right = left + elRect.width;
            break;
          }
          /* jshint boss:true */
        } while (container = container.parentNode);
      }
    }
    if (undoScale && el !== window) {
      // Adjust for scale()
      var elMatrix = matrix(container || el),
        scaleX = elMatrix && elMatrix.a,
        scaleY = elMatrix && elMatrix.d;
      if (elMatrix) {
        top /= scaleY;
        left /= scaleX;
        width /= scaleX;
        height /= scaleY;
        bottom = top + height;
        right = left + width;
      }
    }
    return {
      top: top,
      left: left,
      bottom: bottom,
      right: right,
      width: width,
      height: height
    };
  }
  /**
   * Checks if a side of an element is scrolled past a side of its parents
   * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
   * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
   * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
   * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
   */

  function isScrolledPast(el, elSide, parentSide) {
    var parent = getParentAutoScrollElement(el, true),
      elSideVal = getRect(el)[elSide];
    /* jshint boss:true */

    while (parent) {
      var parentSideVal = getRect(parent)[parentSide],
        visible = void 0;
      if (parentSide === 'top' || parentSide === 'left') {
        visible = elSideVal >= parentSideVal;
      } else {
        visible = elSideVal <= parentSideVal;
      }
      if (!visible) return parent;
      if (parent === getWindowScrollingElement()) break;
      parent = getParentAutoScrollElement(parent, false);
    }
    return false;
  }
  /**
   * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
   * and non-draggable elements
   * @param  {HTMLElement} el       The parent element
   * @param  {Number} childNum      The index of the child
   * @param  {Object} options       Parent Sortable's options
   * @return {HTMLElement}          The child at index childNum, or null if not found
   */

  function getChild(el, childNum, options, includeDragEl) {
    var currentChild = 0,
      i = 0,
      children = el.children;
    while (i < children.length) {
      if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
        if (currentChild === childNum) {
          return children[i];
        }
        currentChild++;
      }
      i++;
    }
    return null;
  }
  /**
   * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
   * @param  {HTMLElement} el       Parent element
   * @param  {selector} selector    Any other elements that should be ignored
   * @return {HTMLElement}          The last child, ignoring ghostEl
   */

  function lastChild(el, selector) {
    var last = el.lastElementChild;
    while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
      last = last.previousElementSibling;
    }
    return last || null;
  }
  /**
   * Returns the index of an element within its parent for a selected set of
   * elements
   * @param  {HTMLElement} el
   * @param  {selector} selector
   * @return {number}
   */

  function index(el, selector) {
    var index = 0;
    if (!el || !el.parentNode) {
      return -1;
    }
    /* jshint boss:true */

    while (el = el.previousElementSibling) {
      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
        index++;
      }
    }
    return index;
  }
  /**
   * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
   * The value is returned in real pixels.
   * @param  {HTMLElement} el
   * @return {Array}             Offsets in the format of [left, top]
   */

  function getRelativeScrollOffset(el) {
    var offsetLeft = 0,
      offsetTop = 0,
      winScroller = getWindowScrollingElement();
    if (el) {
      do {
        var elMatrix = matrix(el),
          scaleX = elMatrix.a,
          scaleY = elMatrix.d;
        offsetLeft += el.scrollLeft * scaleX;
        offsetTop += el.scrollTop * scaleY;
      } while (el !== winScroller && (el = el.parentNode));
    }
    return [offsetLeft, offsetTop];
  }
  /**
   * Returns the index of the object within the given array
   * @param  {Array} arr   Array that may or may not hold the object
   * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
   * @return {Number}      The index of the object in the array, or -1
   */

  function indexOfObject(arr, obj) {
    for (var i in arr) {
      if (!arr.hasOwnProperty(i)) continue;
      for (var key in obj) {
        if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
      }
    }
    return -1;
  }
  function getParentAutoScrollElement(el, includeSelf) {
    // skip to window
    if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
    var elem = el;
    var gotSelf = false;
    do {
      // we don't need to get elem css if it isn't even overflowing in the first place (performance)
      if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
        var elemCSS = css(elem);
        if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
          if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
          if (gotSelf || includeSelf) return elem;
          gotSelf = true;
        }
      }
      /* jshint boss:true */
    } while (elem = elem.parentNode);
    return getWindowScrollingElement();
  }
  function extend(dst, src) {
    if (dst && src) {
      for (var key in src) {
        if (src.hasOwnProperty(key)) {
          dst[key] = src[key];
        }
      }
    }
    return dst;
  }
  function isRectEqual(rect1, rect2) {
    return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
  }
  var _throttleTimeout;
  function throttle(callback, ms) {
    return function () {
      if (!_throttleTimeout) {
        var args = arguments,
          _this = this;
        if (args.length === 1) {
          callback.call(_this, args[0]);
        } else {
          callback.apply(_this, args);
        }
        _throttleTimeout = setTimeout(function () {
          _throttleTimeout = void 0;
        }, ms);
      }
    };
  }
  function cancelThrottle() {
    clearTimeout(_throttleTimeout);
    _throttleTimeout = void 0;
  }
  function scrollBy(el, x, y) {
    el.scrollLeft += x;
    el.scrollTop += y;
  }
  function clone(el) {
    var Polymer = window.Polymer;
    var $ = window.jQuery || window.Zepto;
    if (Polymer && Polymer.dom) {
      return Polymer.dom(el).cloneNode(true);
    } else if ($) {
      return $(el).clone(true)[0];
    } else {
      return el.cloneNode(true);
    }
  }
  var expando = 'Sortable' + new Date().getTime();
  function AnimationStateManager() {
    var animationStates = [],
      animationCallbackId;
    return {
      captureAnimationState: function captureAnimationState() {
        animationStates = [];
        if (!this.options.animation) return;
        var children = [].slice.call(this.el.children);
        children.forEach(function (child) {
          if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
          animationStates.push({
            target: child,
            rect: getRect(child)
          });
          var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation

          if (child.thisAnimationDuration) {
            var childMatrix = matrix(child, true);
            if (childMatrix) {
              fromRect.top -= childMatrix.f;
              fromRect.left -= childMatrix.e;
            }
          }
          child.fromRect = fromRect;
        });
      },
      addAnimationState: function addAnimationState(state) {
        animationStates.push(state);
      },
      removeAnimationState: function removeAnimationState(target) {
        animationStates.splice(indexOfObject(animationStates, {
          target: target
        }), 1);
      },
      animateAll: function animateAll(callback) {
        var _this = this;
        if (!this.options.animation) {
          clearTimeout(animationCallbackId);
          if (typeof callback === 'function') callback();
          return;
        }
        var animating = false,
          animationTime = 0;
        animationStates.forEach(function (state) {
          var time = 0,
            target = state.target,
            fromRect = target.fromRect,
            toRect = getRect(target),
            prevFromRect = target.prevFromRect,
            prevToRect = target.prevToRect,
            animatingRect = state.rect,
            targetMatrix = matrix(target, true);
          if (targetMatrix) {
            // Compensate for current animation
            toRect.top -= targetMatrix.f;
            toRect.left -= targetMatrix.e;
          }
          target.toRect = toRect;
          if (target.thisAnimationDuration) {
            // Could also check if animatingRect is between fromRect and toRect
            if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) &&
            // Make sure animatingRect is on line between toRect & fromRect
            (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
              // If returning to same place as started from animation and on same axis
              time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
            }
          } // if fromRect != toRect: animate

          if (!isRectEqual(toRect, fromRect)) {
            target.prevFromRect = fromRect;
            target.prevToRect = toRect;
            if (!time) {
              time = _this.options.animation;
            }
            _this.animate(target, animatingRect, toRect, time);
          }
          if (time) {
            animating = true;
            animationTime = Math.max(animationTime, time);
            clearTimeout(target.animationResetTimer);
            target.animationResetTimer = setTimeout(function () {
              target.animationTime = 0;
              target.prevFromRect = null;
              target.fromRect = null;
              target.prevToRect = null;
              target.thisAnimationDuration = null;
            }, time);
            target.thisAnimationDuration = time;
          }
        });
        clearTimeout(animationCallbackId);
        if (!animating) {
          if (typeof callback === 'function') callback();
        } else {
          animationCallbackId = setTimeout(function () {
            if (typeof callback === 'function') callback();
          }, animationTime);
        }
        animationStates = [];
      },
      animate: function animate(target, currentRect, toRect, duration) {
        if (duration) {
          css(target, 'transition', '');
          css(target, 'transform', '');
          var elMatrix = matrix(this.el),
            scaleX = elMatrix && elMatrix.a,
            scaleY = elMatrix && elMatrix.d,
            translateX = (currentRect.left - toRect.left) / (scaleX || 1),
            translateY = (currentRect.top - toRect.top) / (scaleY || 1);
          target.animatingX = !!translateX;
          target.animatingY = !!translateY;
          css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
          this.forRepaintDummy = repaint(target); // repaint

          css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
          css(target, 'transform', 'translate3d(0,0,0)');
          typeof target.animated === 'number' && clearTimeout(target.animated);
          target.animated = setTimeout(function () {
            css(target, 'transition', '');
            css(target, 'transform', '');
            target.animated = false;
            target.animatingX = false;
            target.animatingY = false;
          }, duration);
        }
      }
    };
  }
  function repaint(target) {
    return target.offsetWidth;
  }
  function calculateRealTime(animatingRect, fromRect, toRect, options) {
    return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
  }
  var plugins = [];
  var defaults = {
    initializeByDefault: true
  };
  var PluginManager = {
    mount: function mount(plugin) {
      // Set default static properties
      for (var option in defaults) {
        if (defaults.hasOwnProperty(option) && !(option in plugin)) {
          plugin[option] = defaults[option];
        }
      }
      plugins.forEach(function (p) {
        if (p.pluginName === plugin.pluginName) {
          throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
        }
      });
      plugins.push(plugin);
    },
    pluginEvent: function pluginEvent(eventName, sortable, evt) {
      var _this = this;
      this.eventCanceled = false;
      evt.cancel = function () {
        _this.eventCanceled = true;
      };
      var eventNameGlobal = eventName + 'Global';
      plugins.forEach(function (plugin) {
        if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

        if (sortable[plugin.pluginName][eventNameGlobal]) {
          sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
            sortable: sortable
          }, evt));
        } // Only fire plugin event if plugin is enabled in this sortable,
        // and plugin has event defined

        if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
          sortable[plugin.pluginName][eventName](_objectSpread2({
            sortable: sortable
          }, evt));
        }
      });
    },
    initializePlugins: function initializePlugins(sortable, el, defaults, options) {
      plugins.forEach(function (plugin) {
        var pluginName = plugin.pluginName;
        if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
        var initialized = new plugin(sortable, el, sortable.options);
        initialized.sortable = sortable;
        initialized.options = sortable.options;
        sortable[pluginName] = initialized; // Add default options from plugin

        _extends(defaults, initialized.defaults);
      });
      for (var option in sortable.options) {
        if (!sortable.options.hasOwnProperty(option)) continue;
        var modified = this.modifyOption(sortable, option, sortable.options[option]);
        if (typeof modified !== 'undefined') {
          sortable.options[option] = modified;
        }
      }
    },
    getEventProperties: function getEventProperties(name, sortable) {
      var eventProperties = {};
      plugins.forEach(function (plugin) {
        if (typeof plugin.eventProperties !== 'function') return;
        _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
      });
      return eventProperties;
    },
    modifyOption: function modifyOption(sortable, name, value) {
      var modifiedValue;
      plugins.forEach(function (plugin) {
        // Plugin must exist on the Sortable
        if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

        if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
          modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
        }
      });
      return modifiedValue;
    }
  };
  function dispatchEvent(_ref) {
    var sortable = _ref.sortable,
      rootEl = _ref.rootEl,
      name = _ref.name,
      targetEl = _ref.targetEl,
      cloneEl = _ref.cloneEl,
      toEl = _ref.toEl,
      fromEl = _ref.fromEl,
      oldIndex = _ref.oldIndex,
      newIndex = _ref.newIndex,
      oldDraggableIndex = _ref.oldDraggableIndex,
      newDraggableIndex = _ref.newDraggableIndex,
      originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      extraEventProperties = _ref.extraEventProperties;
    sortable = sortable || rootEl && rootEl[expando];
    if (!sortable) return;
    var evt,
      options = sortable.options,
      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent(name, {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent(name, true, true);
    }
    evt.to = toEl || rootEl;
    evt.from = fromEl || rootEl;
    evt.item = targetEl || rootEl;
    evt.clone = cloneEl;
    evt.oldIndex = oldIndex;
    evt.newIndex = newIndex;
    evt.oldDraggableIndex = oldDraggableIndex;
    evt.newDraggableIndex = newDraggableIndex;
    evt.originalEvent = originalEvent;
    evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;
    var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));
    for (var option in allEventProperties) {
      evt[option] = allEventProperties[option];
    }
    if (rootEl) {
      rootEl.dispatchEvent(evt);
    }
    if (options[onName]) {
      options[onName].call(sortable, evt);
    }
  }
  var _excluded$2 = ["evt"];
  var pluginEvent = function pluginEvent(eventName, sortable) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      originalEvent = _ref.evt,
      data = _objectWithoutProperties(_ref, _excluded$2);
    PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
      dragEl: dragEl,
      parentEl: parentEl,
      ghostEl: ghostEl,
      rootEl: rootEl,
      nextEl: nextEl,
      lastDownEl: lastDownEl,
      cloneEl: cloneEl,
      cloneHidden: cloneHidden,
      dragStarted: moved,
      putSortable: putSortable,
      activeSortable: Sortable.active,
      originalEvent: originalEvent,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex,
      hideGhostForTarget: _hideGhostForTarget,
      unhideGhostForTarget: _unhideGhostForTarget,
      cloneNowHidden: function cloneNowHidden() {
        cloneHidden = true;
      },
      cloneNowShown: function cloneNowShown() {
        cloneHidden = false;
      },
      dispatchSortableEvent: function dispatchSortableEvent(name) {
        _dispatchEvent({
          sortable: sortable,
          name: name,
          originalEvent: originalEvent
        });
      }
    }, data));
  };
  function _dispatchEvent(info) {
    dispatchEvent(_objectSpread2({
      putSortable: putSortable,
      cloneEl: cloneEl,
      targetEl: dragEl,
      rootEl: rootEl,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex
    }, info));
  }
  var dragEl,
    parentEl,
    ghostEl,
    rootEl,
    nextEl,
    lastDownEl,
    cloneEl,
    cloneHidden,
    oldIndex,
    newIndex,
    oldDraggableIndex,
    newDraggableIndex,
    activeGroup,
    putSortable,
    awaitingDragStarted = false,
    ignoreNextClick = false,
    sortables = [],
    tapEvt,
    touchEvt,
    lastDx,
    lastDy,
    tapDistanceLeft,
    tapDistanceTop,
    moved,
    lastTarget,
    lastDirection,
    pastFirstInvertThresh = false,
    isCircumstantialInvert = false,
    targetMoveDistance,
    // For positioning ghost absolutely
    ghostRelativeParent,
    ghostRelativeParentInitialScroll = [],
    // (left, top)
    _silent = false,
    savedInputChecked = [];
  /** @const */

  var documentExists = typeof document !== 'undefined',
    PositionGhostAbsolutely = IOS,
    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
    // This will not pass for IE9, because IE9 DnD only works on anchors
    supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
    supportCssPointerEvents = function () {
      if (!documentExists) return; // false when <= IE11

      if (IE11OrLess) {
        return false;
      }
      var el = document.createElement('x');
      el.style.cssText = 'pointer-events:auto';
      return el.style.pointerEvents === 'auto';
    }(),
    _detectDirection = function _detectDirection(el, options) {
      var elCSS = css(el),
        elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
        child1 = getChild(el, 0, options),
        child2 = getChild(el, 1, options),
        firstChildCSS = child1 && css(child1),
        secondChildCSS = child2 && css(child2),
        firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
        secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;
      if (elCSS.display === 'flex') {
        return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
      }
      if (elCSS.display === 'grid') {
        return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
      }
      if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
        var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
        return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
      }
      return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
    },
    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
      var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
        dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
        dragElOppLength = vertical ? dragRect.width : dragRect.height,
        targetS1Opp = vertical ? targetRect.left : targetRect.top,
        targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
        targetOppLength = vertical ? targetRect.width : targetRect.height;
      return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
    },
    /**
     * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
     * @param  {Number} x      X position
     * @param  {Number} y      Y position
     * @return {HTMLElement}   Element of the first found nearest Sortable
     */
    _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
      var ret;
      sortables.some(function (sortable) {
        var threshold = sortable[expando].options.emptyInsertThreshold;
        if (!threshold || lastChild(sortable)) return;
        var rect = getRect(sortable),
          insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
          insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;
        if (insideHorizontally && insideVertically) {
          return ret = sortable;
        }
      });
      return ret;
    },
    _prepareGroup = function _prepareGroup(options) {
      function toFn(value, pull) {
        return function (to, from, dragEl, evt) {
          var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;
          if (value == null && (pull || sameGroup)) {
            // Default pull value
            // Default pull and put value if same group
            return true;
          } else if (value == null || value === false) {
            return false;
          } else if (pull && value === 'clone') {
            return value;
          } else if (typeof value === 'function') {
            return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
          } else {
            var otherGroup = (pull ? to : from).options.group.name;
            return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
          }
        };
      }
      var group = {};
      var originalGroup = options.group;
      if (!originalGroup || _typeof(originalGroup) != 'object') {
        originalGroup = {
          name: originalGroup
        };
      }
      group.name = originalGroup.name;
      group.checkPull = toFn(originalGroup.pull, true);
      group.checkPut = toFn(originalGroup.put);
      group.revertClone = originalGroup.revertClone;
      options.group = group;
    },
    _hideGhostForTarget = function _hideGhostForTarget() {
      if (!supportCssPointerEvents && ghostEl) {
        css(ghostEl, 'display', 'none');
      }
    },
    _unhideGhostForTarget = function _unhideGhostForTarget() {
      if (!supportCssPointerEvents && ghostEl) {
        css(ghostEl, 'display', '');
      }
    }; // #1184 fix - Prevent click event on fallback if dragged but item not changed position

  if (documentExists && !ChromeForAndroid) {
    document.addEventListener('click', function (evt) {
      if (ignoreNextClick) {
        evt.preventDefault();
        evt.stopPropagation && evt.stopPropagation();
        evt.stopImmediatePropagation && evt.stopImmediatePropagation();
        ignoreNextClick = false;
        return false;
      }
    }, true);
  }
  var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
    if (dragEl) {
      evt = evt.touches ? evt.touches[0] : evt;
      var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);
      if (nearest) {
        // Create imitation event
        var event = {};
        for (var i in evt) {
          if (evt.hasOwnProperty(i)) {
            event[i] = evt[i];
          }
        }
        event.target = event.rootEl = nearest;
        event.preventDefault = void 0;
        event.stopPropagation = void 0;
        nearest[expando]._onDragOver(event);
      }
    }
  };
  var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
    if (dragEl) {
      dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
    }
  };
  /**
   * @class  Sortable
   * @param  {HTMLElement}  el
   * @param  {Object}       [options]
   */

  function Sortable(el, options) {
    if (!(el && el.nodeType && el.nodeType === 1)) {
      throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
    }
    this.el = el; // root element

    this.options = options = _extends({}, options); // Export instance

    el[expando] = this;
    var defaults = {
      group: null,
      sort: true,
      disabled: false,
      store: null,
      handle: null,
      draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
      swapThreshold: 1,
      // percentage; 0 <= x <= 1
      invertSwap: false,
      // invert always
      invertedSwapThreshold: null,
      // will be set to same as swapThreshold if default
      removeCloneOnHide: true,
      direction: function direction() {
        return _detectDirection(el, this.options);
      },
      ghostClass: 'sortable-ghost',
      chosenClass: 'sortable-chosen',
      dragClass: 'sortable-drag',
      ignore: 'a, img',
      filter: null,
      preventOnFilter: true,
      animation: 0,
      easing: null,
      setData: function setData(dataTransfer, dragEl) {
        dataTransfer.setData('Text', dragEl.textContent);
      },
      dropBubble: false,
      dragoverBubble: false,
      dataIdAttr: 'data-id',
      delay: 0,
      delayOnTouchOnly: false,
      touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
      forceFallback: false,
      fallbackClass: 'sortable-fallback',
      fallbackOnBody: false,
      fallbackTolerance: 0,
      fallbackOffset: {
        x: 0,
        y: 0
      },
      supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,
      emptyInsertThreshold: 5
    };
    PluginManager.initializePlugins(this, el, defaults); // Set default options

    for (var name in defaults) {
      !(name in options) && (options[name] = defaults[name]);
    }
    _prepareGroup(options); // Bind all private methods

    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    } // Setup drag mode

    this.nativeDraggable = options.forceFallback ? false : supportDraggable;
    if (this.nativeDraggable) {
      // Touch start threshold cannot be greater than the native dragstart threshold
      this.options.touchStartThreshold = 1;
    } // Bind events

    if (options.supportPointer) {
      on(el, 'pointerdown', this._onTapStart);
    } else {
      on(el, 'mousedown', this._onTapStart);
      on(el, 'touchstart', this._onTapStart);
    }
    if (this.nativeDraggable) {
      on(el, 'dragover', this);
      on(el, 'dragenter', this);
    }
    sortables.push(this.el); // Restore sorting

    options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

    _extends(this, AnimationStateManager());
  }
  Sortable.prototype = /** @lends Sortable.prototype */
  {
    constructor: Sortable,
    _isOutsideThisEl: function _isOutsideThisEl(target) {
      if (!this.el.contains(target) && target !== this.el) {
        lastTarget = null;
      }
    },
    _getDirection: function _getDirection(evt, target) {
      return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
    },
    _onTapStart: function _onTapStart( /** Event|TouchEvent */
    evt) {
      if (!evt.cancelable) return;
      var _this = this,
        el = this.el,
        options = this.options,
        preventOnFilter = options.preventOnFilter,
        type = evt.type,
        touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
        target = (touch || evt).target,
        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
        filter = options.filter;
      _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.

      if (dragEl) {
        return;
      }
      if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
        return; // only left button and enabled
      } // cancel dnd if original target is content editable

      if (originalTarget.isContentEditable) {
        return;
      } // Safari ignores further event handling after mousedown

      if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
        return;
      }
      target = closest(target, options.draggable, el, false);
      if (target && target.animated) {
        return;
      }
      if (lastDownEl === target) {
        // Ignoring duplicate `down`
        return;
      } // Get the index of the dragged element within its parent

      oldIndex = index(target);
      oldDraggableIndex = index(target, options.draggable); // Check filter

      if (typeof filter === 'function') {
        if (filter.call(this, evt, target, this)) {
          _dispatchEvent({
            sortable: _this,
            rootEl: originalTarget,
            name: 'filter',
            targetEl: target,
            toEl: el,
            fromEl: el
          });
          pluginEvent('filter', _this, {
            evt: evt
          });
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      } else if (filter) {
        filter = filter.split(',').some(function (criteria) {
          criteria = closest(originalTarget, criteria.trim(), el, false);
          if (criteria) {
            _dispatchEvent({
              sortable: _this,
              rootEl: criteria,
              name: 'filter',
              targetEl: target,
              fromEl: el,
              toEl: el
            });
            pluginEvent('filter', _this, {
              evt: evt
            });
            return true;
          }
        });
        if (filter) {
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      }

      if (options.handle && !closest(originalTarget, options.handle, el, false)) {
        return;
      } // Prepare `dragstart`

      this._prepareDragStart(evt, touch, target);
    },
    _prepareDragStart: function _prepareDragStart( /** Event */
    evt, /** Touch */
    touch, /** HTMLElement */
    target) {
      var _this = this,
        el = _this.el,
        options = _this.options,
        ownerDocument = el.ownerDocument,
        dragStartFn;
      if (target && !dragEl && target.parentNode === el) {
        var dragRect = getRect(target);
        rootEl = el;
        dragEl = target;
        parentEl = dragEl.parentNode;
        nextEl = dragEl.nextSibling;
        lastDownEl = target;
        activeGroup = options.group;
        Sortable.dragged = dragEl;
        tapEvt = {
          target: dragEl,
          clientX: (touch || evt).clientX,
          clientY: (touch || evt).clientY
        };
        tapDistanceLeft = tapEvt.clientX - dragRect.left;
        tapDistanceTop = tapEvt.clientY - dragRect.top;
        this._lastX = (touch || evt).clientX;
        this._lastY = (touch || evt).clientY;
        dragEl.style['will-change'] = 'all';
        dragStartFn = function dragStartFn() {
          pluginEvent('delayEnded', _this, {
            evt: evt
          });
          if (Sortable.eventCanceled) {
            _this._onDrop();
            return;
          } // Delayed drag has been triggered
          // we can re-enable the events: touchmove/mousemove

          _this._disableDelayedDragEvents();
          if (!FireFox && _this.nativeDraggable) {
            dragEl.draggable = true;
          } // Bind the events: dragstart/dragend

          _this._triggerDragStart(evt, touch); // Drag start event

          _dispatchEvent({
            sortable: _this,
            name: 'choose',
            originalEvent: evt
          }); // Chosen item

          toggleClass(dragEl, options.chosenClass, true);
        }; // Disable "draggable"

        options.ignore.split(',').forEach(function (criteria) {
          find(dragEl, criteria.trim(), _disableDraggable);
        });
        on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mouseup', _this._onDrop);
        on(ownerDocument, 'touchend', _this._onDrop);
        on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

        if (FireFox && this.nativeDraggable) {
          this.options.touchStartThreshold = 4;
          dragEl.draggable = true;
        }
        pluginEvent('delayStart', this, {
          evt: evt
        }); // Delay is impossible for native DnD in Edge or IE

        if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
          if (Sortable.eventCanceled) {
            this._onDrop();
            return;
          } // If the user moves the pointer or let go the click or touch
          // before the delay has been reached:
          // disable the delayed drag

          on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
          on(ownerDocument, 'touchend', _this._disableDelayedDrag);
          on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
          on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
          on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
          options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
        } else {
          dragStartFn();
        }
      }
    },
    _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler( /** TouchEvent|PointerEvent **/
    e) {
      var touch = e.touches ? e.touches[0] : e;
      if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
        this._disableDelayedDrag();
      }
    },
    _disableDelayedDrag: function _disableDelayedDrag() {
      dragEl && _disableDraggable(dragEl);
      clearTimeout(this._dragStartTimer);
      this._disableDelayedDragEvents();
    },
    _disableDelayedDragEvents: function _disableDelayedDragEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._disableDelayedDrag);
      off(ownerDocument, 'touchend', this._disableDelayedDrag);
      off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
      off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
    },
    _triggerDragStart: function _triggerDragStart( /** Event */
    evt, /** Touch */
    touch) {
      touch = touch || evt.pointerType == 'touch' && evt;
      if (!this.nativeDraggable || touch) {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._onTouchMove);
        } else if (touch) {
          on(document, 'touchmove', this._onTouchMove);
        } else {
          on(document, 'mousemove', this._onTouchMove);
        }
      } else {
        on(dragEl, 'dragend', this);
        on(rootEl, 'dragstart', this._onDragStart);
      }
      try {
        if (document.selection) {
          // Timeout neccessary for IE9
          _nextTick(function () {
            document.selection.empty();
          });
        } else {
          window.getSelection().removeAllRanges();
        }
      } catch (err) {}
    },
    _dragStarted: function _dragStarted(fallback, evt) {
      awaitingDragStarted = false;
      if (rootEl && dragEl) {
        pluginEvent('dragStarted', this, {
          evt: evt
        });
        if (this.nativeDraggable) {
          on(document, 'dragover', _checkOutsideTargetEl);
        }
        var options = this.options; // Apply effect

        !fallback && toggleClass(dragEl, options.dragClass, false);
        toggleClass(dragEl, options.ghostClass, true);
        Sortable.active = this;
        fallback && this._appendGhost(); // Drag start event

        _dispatchEvent({
          sortable: this,
          name: 'start',
          originalEvent: evt
        });
      } else {
        this._nulling();
      }
    },
    _emulateDragOver: function _emulateDragOver() {
      if (touchEvt) {
        this._lastX = touchEvt.clientX;
        this._lastY = touchEvt.clientY;
        _hideGhostForTarget();
        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        var parent = target;
        while (target && target.shadowRoot) {
          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
          if (target === parent) break;
          parent = target;
        }
        dragEl.parentNode[expando]._isOutsideThisEl(target);
        if (parent) {
          do {
            if (parent[expando]) {
              var inserted = void 0;
              inserted = parent[expando]._onDragOver({
                clientX: touchEvt.clientX,
                clientY: touchEvt.clientY,
                target: target,
                rootEl: parent
              });
              if (inserted && !this.options.dragoverBubble) {
                break;
              }
            }
            target = parent; // store last element
          }
          /* jshint boss:true */ while (parent = parent.parentNode);
        }
        _unhideGhostForTarget();
      }
    },
    _onTouchMove: function _onTouchMove( /**TouchEvent*/
    evt) {
      if (tapEvt) {
        var options = this.options,
          fallbackTolerance = options.fallbackTolerance,
          fallbackOffset = options.fallbackOffset,
          touch = evt.touches ? evt.touches[0] : evt,
          ghostMatrix = ghostEl && matrix(ghostEl, true),
          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging

        if (!Sortable.active && !awaitingDragStarted) {
          if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
            return;
          }
          this._onDragStart(evt, true);
        }
        if (ghostEl) {
          if (ghostMatrix) {
            ghostMatrix.e += dx - (lastDx || 0);
            ghostMatrix.f += dy - (lastDy || 0);
          } else {
            ghostMatrix = {
              a: 1,
              b: 0,
              c: 0,
              d: 1,
              e: dx,
              f: dy
            };
          }
          var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
          css(ghostEl, 'webkitTransform', cssMatrix);
          css(ghostEl, 'mozTransform', cssMatrix);
          css(ghostEl, 'msTransform', cssMatrix);
          css(ghostEl, 'transform', cssMatrix);
          lastDx = dx;
          lastDy = dy;
          touchEvt = touch;
        }
        evt.cancelable && evt.preventDefault();
      }
    },
    _appendGhost: function _appendGhost() {
      // Bug if using scale(): https://stackoverflow.com/questions/2637058
      // Not being adjusted for
      if (!ghostEl) {
        var container = this.options.fallbackOnBody ? document.body : rootEl,
          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
          options = this.options; // Position absolutely

        if (PositionGhostAbsolutely) {
          // Get relatively positioned parent
          ghostRelativeParent = container;
          while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
            ghostRelativeParent = ghostRelativeParent.parentNode;
          }
          if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
            if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
            rect.top += ghostRelativeParent.scrollTop;
            rect.left += ghostRelativeParent.scrollLeft;
          } else {
            ghostRelativeParent = getWindowScrollingElement();
          }
          ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
        }
        ghostEl = dragEl.cloneNode(true);
        toggleClass(ghostEl, options.ghostClass, false);
        toggleClass(ghostEl, options.fallbackClass, true);
        toggleClass(ghostEl, options.dragClass, true);
        css(ghostEl, 'transition', '');
        css(ghostEl, 'transform', '');
        css(ghostEl, 'box-sizing', 'border-box');
        css(ghostEl, 'margin', 0);
        css(ghostEl, 'top', rect.top);
        css(ghostEl, 'left', rect.left);
        css(ghostEl, 'width', rect.width);
        css(ghostEl, 'height', rect.height);
        css(ghostEl, 'opacity', '0.8');
        css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
        css(ghostEl, 'zIndex', '100000');
        css(ghostEl, 'pointerEvents', 'none');
        Sortable.ghost = ghostEl;
        container.appendChild(ghostEl); // Set transform-origin

        css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
      }
    },
    _onDragStart: function _onDragStart( /**Event*/
    evt, /**boolean*/
    fallback) {
      var _this = this;
      var dataTransfer = evt.dataTransfer;
      var options = _this.options;
      pluginEvent('dragStart', this, {
        evt: evt
      });
      if (Sortable.eventCanceled) {
        this._onDrop();
        return;
      }
      pluginEvent('setupClone', this);
      if (!Sortable.eventCanceled) {
        cloneEl = clone(dragEl);
        cloneEl.removeAttribute("id");
        cloneEl.draggable = false;
        cloneEl.style['will-change'] = '';
        this._hideClone();
        toggleClass(cloneEl, this.options.chosenClass, false);
        Sortable.clone = cloneEl;
      } // #1143: IFrame support workaround

      _this.cloneId = _nextTick(function () {
        pluginEvent('clone', _this);
        if (Sortable.eventCanceled) return;
        if (!_this.options.removeCloneOnHide) {
          rootEl.insertBefore(cloneEl, dragEl);
        }
        _this._hideClone();
        _dispatchEvent({
          sortable: _this,
          name: 'clone'
        });
      });
      !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

      if (fallback) {
        ignoreNextClick = true;
        _this._loopId = setInterval(_this._emulateDragOver, 50);
      } else {
        // Undo what was set in _prepareDragStart before drag started
        off(document, 'mouseup', _this._onDrop);
        off(document, 'touchend', _this._onDrop);
        off(document, 'touchcancel', _this._onDrop);
        if (dataTransfer) {
          dataTransfer.effectAllowed = 'move';
          options.setData && options.setData.call(_this, dataTransfer, dragEl);
        }
        on(document, 'drop', _this); // #1276 fix:

        css(dragEl, 'transform', 'translateZ(0)');
      }
      awaitingDragStarted = true;
      _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
      on(document, 'selectstart', _this);
      moved = true;
      if (Safari) {
        css(document.body, 'user-select', 'none');
      }
    },
    // Returns true - if no further action is needed (either inserted or another condition)
    _onDragOver: function _onDragOver( /**Event*/
    evt) {
      var el = this.el,
        target = evt.target,
        dragRect,
        targetRect,
        revert,
        options = this.options,
        group = options.group,
        activeSortable = Sortable.active,
        isOwner = activeGroup === group,
        canSort = options.sort,
        fromSortable = putSortable || activeSortable,
        vertical,
        _this = this,
        completedFired = false;
      if (_silent) return;
      function dragOverEvent(name, extra) {
        pluginEvent(name, _this, _objectSpread2({
          evt: evt,
          isOwner: isOwner,
          axis: vertical ? 'vertical' : 'horizontal',
          revert: revert,
          dragRect: dragRect,
          targetRect: targetRect,
          canSort: canSort,
          fromSortable: fromSortable,
          target: target,
          completed: completed,
          onMove: function onMove(target, after) {
            return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
          },
          changed: changed
        }, extra));
      } // Capture animation state

      function capture() {
        dragOverEvent('dragOverAnimationCapture');
        _this.captureAnimationState();
        if (_this !== fromSortable) {
          fromSortable.captureAnimationState();
        }
      } // Return invocation when dragEl is inserted (or completed)

      function completed(insertion) {
        dragOverEvent('dragOverCompleted', {
          insertion: insertion
        });
        if (insertion) {
          // Clones must be hidden before folding animation to capture dragRectAbsolute properly
          if (isOwner) {
            activeSortable._hideClone();
          } else {
            activeSortable._showClone(_this);
          }
          if (_this !== fromSortable) {
            // Set ghost class to new sortable's ghost class
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
            toggleClass(dragEl, options.ghostClass, true);
          }
          if (putSortable !== _this && _this !== Sortable.active) {
            putSortable = _this;
          } else if (_this === Sortable.active && putSortable) {
            putSortable = null;
          } // Animation

          if (fromSortable === _this) {
            _this._ignoreWhileAnimating = target;
          }
          _this.animateAll(function () {
            dragOverEvent('dragOverAnimationComplete');
            _this._ignoreWhileAnimating = null;
          });
          if (_this !== fromSortable) {
            fromSortable.animateAll();
            fromSortable._ignoreWhileAnimating = null;
          }
        } // Null lastTarget if it is not inside a previously swapped element

        if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
          lastTarget = null;
        } // no bubbling and not fallback

        if (!options.dragoverBubble && !evt.rootEl && target !== document) {
          dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted

          !insertion && nearestEmptyInsertDetectEvent(evt);
        }
        !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
        return completedFired = true;
      } // Call when dragEl has been inserted

      function changed() {
        newIndex = index(dragEl);
        newDraggableIndex = index(dragEl, options.draggable);
        _dispatchEvent({
          sortable: _this,
          name: 'change',
          toEl: el,
          newIndex: newIndex,
          newDraggableIndex: newDraggableIndex,
          originalEvent: evt
        });
      }
      if (evt.preventDefault !== void 0) {
        evt.cancelable && evt.preventDefault();
      }
      target = closest(target, options.draggable, el, true);
      dragOverEvent('dragOver');
      if (Sortable.eventCanceled) return completedFired;
      if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
        return completed(false);
      }
      ignoreNextClick = false;
      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
      : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
        vertical = this._getDirection(evt, target) === 'vertical';
        dragRect = getRect(dragEl);
        dragOverEvent('dragOverValid');
        if (Sortable.eventCanceled) return completedFired;
        if (revert) {
          parentEl = rootEl; // actualization

          capture();
          this._hideClone();
          dragOverEvent('revert');
          if (!Sortable.eventCanceled) {
            if (nextEl) {
              rootEl.insertBefore(dragEl, nextEl);
            } else {
              rootEl.appendChild(dragEl);
            }
          }
          return completed(true);
        }
        var elLastChild = lastChild(el, options.draggable);
        if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
          // Insert to end of list
          // If already at end of list: Do not insert
          if (elLastChild === dragEl) {
            return completed(false);
          } // if there is a last element, it is the target

          if (elLastChild && el === evt.target) {
            target = elLastChild;
          }
          if (target) {
            targetRect = getRect(target);
          }
          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
            capture();
            if (elLastChild && elLastChild.nextSibling) {
              // the last draggable element is not the last node
              el.insertBefore(dragEl, elLastChild.nextSibling);
            } else {
              el.appendChild(dragEl);
            }
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
          // Insert to start of list
          var firstChild = getChild(el, 0, options, true);
          if (firstChild === dragEl) {
            return completed(false);
          }
          target = firstChild;
          targetRect = getRect(target);
          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
            capture();
            el.insertBefore(dragEl, firstChild);
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (target.parentNode === el) {
          targetRect = getRect(target);
          var direction = 0,
            targetBeforeFirstSwap,
            differentLevel = dragEl.parentNode !== el,
            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
            side1 = vertical ? 'top' : 'left',
            scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;
          if (lastTarget !== target) {
            targetBeforeFirstSwap = targetRect[side1];
            pastFirstInvertThresh = false;
            isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
          }
          direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
          var sibling;
          if (direction !== 0) {
            // Check if target is beside dragEl in respective direction (ignoring hidden elements)
            var dragIndex = index(dragEl);
            do {
              dragIndex -= direction;
              sibling = parentEl.children[dragIndex];
            } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
          } // If dragEl is already beside target: Do not insert

          if (direction === 0 || sibling === target) {
            return completed(false);
          }
          lastTarget = target;
          lastDirection = direction;
          var nextSibling = target.nextElementSibling,
            after = false;
          after = direction === 1;
          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);
          if (moveVector !== false) {
            if (moveVector === 1 || moveVector === -1) {
              after = moveVector === 1;
            }
            _silent = true;
            setTimeout(_unsilent, 30);
            capture();
            if (after && !nextSibling) {
              el.appendChild(dragEl);
            } else {
              target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
            } // Undo chrome's scroll adjustment (has no effect on other browsers)

            if (scrolledPastTop) {
              scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
            }
            parentEl = dragEl.parentNode; // actualization
            // must be done before animation

            if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
              targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
            }
            changed();
            return completed(true);
          }
        }
        if (el.contains(dragEl)) {
          return completed(false);
        }
      }
      return false;
    },
    _ignoreWhileAnimating: null,
    _offMoveEvents: function _offMoveEvents() {
      off(document, 'mousemove', this._onTouchMove);
      off(document, 'touchmove', this._onTouchMove);
      off(document, 'pointermove', this._onTouchMove);
      off(document, 'dragover', nearestEmptyInsertDetectEvent);
      off(document, 'mousemove', nearestEmptyInsertDetectEvent);
      off(document, 'touchmove', nearestEmptyInsertDetectEvent);
    },
    _offUpEvents: function _offUpEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._onDrop);
      off(ownerDocument, 'touchend', this._onDrop);
      off(ownerDocument, 'pointerup', this._onDrop);
      off(ownerDocument, 'touchcancel', this._onDrop);
      off(document, 'selectstart', this);
    },
    _onDrop: function _onDrop( /**Event*/
    evt) {
      var el = this.el,
        options = this.options; // Get the index of the dragged element within its parent

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      pluginEvent('drop', this, {
        evt: evt
      });
      parentEl = dragEl && dragEl.parentNode; // Get again after plugin event

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      if (Sortable.eventCanceled) {
        this._nulling();
        return;
      }
      awaitingDragStarted = false;
      isCircumstantialInvert = false;
      pastFirstInvertThresh = false;
      clearInterval(this._loopId);
      clearTimeout(this._dragStartTimer);
      _cancelNextTick(this.cloneId);
      _cancelNextTick(this._dragStartId); // Unbind events

      if (this.nativeDraggable) {
        off(document, 'drop', this);
        off(el, 'dragstart', this._onDragStart);
      }
      this._offMoveEvents();
      this._offUpEvents();
      if (Safari) {
        css(document.body, 'user-select', '');
      }
      css(dragEl, 'transform', '');
      if (evt) {
        if (moved) {
          evt.cancelable && evt.preventDefault();
          !options.dropBubble && evt.stopPropagation();
        }
        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);
        if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
          // Remove clone(s)
          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
        }
        if (dragEl) {
          if (this.nativeDraggable) {
            off(dragEl, 'dragend', this);
          }
          _disableDraggable(dragEl);
          dragEl.style['will-change'] = ''; // Remove classes
          // ghostClass is added in dragStarted

          if (moved && !awaitingDragStarted) {
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
          }
          toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

          _dispatchEvent({
            sortable: this,
            name: 'unchoose',
            toEl: parentEl,
            newIndex: null,
            newDraggableIndex: null,
            originalEvent: evt
          });
          if (rootEl !== parentEl) {
            if (newIndex >= 0) {
              // Add event
              _dispatchEvent({
                rootEl: parentEl,
                name: 'add',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              }); // Remove event

              _dispatchEvent({
                sortable: this,
                name: 'remove',
                toEl: parentEl,
                originalEvent: evt
              }); // drag from one list and drop into another

              _dispatchEvent({
                rootEl: parentEl,
                name: 'sort',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              });
              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
            putSortable && putSortable.save();
          } else {
            if (newIndex !== oldIndex) {
              if (newIndex >= 0) {
                // drag & drop within the same list
                _dispatchEvent({
                  sortable: this,
                  name: 'update',
                  toEl: parentEl,
                  originalEvent: evt
                });
                _dispatchEvent({
                  sortable: this,
                  name: 'sort',
                  toEl: parentEl,
                  originalEvent: evt
                });
              }
            }
          }
          if (Sortable.active) {
            /* jshint eqnull:true */
            if (newIndex == null || newIndex === -1) {
              newIndex = oldIndex;
              newDraggableIndex = oldDraggableIndex;
            }
            _dispatchEvent({
              sortable: this,
              name: 'end',
              toEl: parentEl,
              originalEvent: evt
            }); // Save sorting

            this.save();
          }
        }
      }
      this._nulling();
    },
    _nulling: function _nulling() {
      pluginEvent('nulling', this);
      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
      savedInputChecked.forEach(function (el) {
        el.checked = true;
      });
      savedInputChecked.length = lastDx = lastDy = 0;
    },
    handleEvent: function handleEvent( /**Event*/
    evt) {
      switch (evt.type) {
        case 'drop':
        case 'dragend':
          this._onDrop(evt);
          break;
        case 'dragenter':
        case 'dragover':
          if (dragEl) {
            this._onDragOver(evt);
            _globalDragOver(evt);
          }
          break;
        case 'selectstart':
          evt.preventDefault();
          break;
      }
    },
    /**
     * Serializes the item into an array of string.
     * @returns {String[]}
     */
    toArray: function toArray() {
      var order = [],
        el,
        children = this.el.children,
        i = 0,
        n = children.length,
        options = this.options;
      for (; i < n; i++) {
        el = children[i];
        if (closest(el, options.draggable, this.el, false)) {
          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
        }
      }
      return order;
    },
    /**
     * Sorts the elements according to the array.
     * @param  {String[]}  order  order of the items
     */
    sort: function sort(order, useAnimation) {
      var items = {},
        rootEl = this.el;
      this.toArray().forEach(function (id, i) {
        var el = rootEl.children[i];
        if (closest(el, this.options.draggable, rootEl, false)) {
          items[id] = el;
        }
      }, this);
      useAnimation && this.captureAnimationState();
      order.forEach(function (id) {
        if (items[id]) {
          rootEl.removeChild(items[id]);
          rootEl.appendChild(items[id]);
        }
      });
      useAnimation && this.animateAll();
    },
    /**
     * Save the current sorting
     */
    save: function save() {
      var store = this.options.store;
      store && store.set && store.set(this);
    },
    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param   {HTMLElement}  el
     * @param   {String}       [selector]  default: `options.draggable`
     * @returns {HTMLElement|null}
     */
    closest: function closest$1(el, selector) {
      return closest(el, selector || this.options.draggable, this.el, false);
    },
    /**
     * Set/get option
     * @param   {string} name
     * @param   {*}      [value]
     * @returns {*}
     */
    option: function option(name, value) {
      var options = this.options;
      if (value === void 0) {
        return options[name];
      } else {
        var modifiedValue = PluginManager.modifyOption(this, name, value);
        if (typeof modifiedValue !== 'undefined') {
          options[name] = modifiedValue;
        } else {
          options[name] = value;
        }
        if (name === 'group') {
          _prepareGroup(options);
        }
      }
    },
    /**
     * Destroy
     */
    destroy: function destroy() {
      pluginEvent('destroy', this);
      var el = this.el;
      el[expando] = null;
      off(el, 'mousedown', this._onTapStart);
      off(el, 'touchstart', this._onTapStart);
      off(el, 'pointerdown', this._onTapStart);
      if (this.nativeDraggable) {
        off(el, 'dragover', this);
        off(el, 'dragenter', this);
      } // Remove draggable attributes

      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
        el.removeAttribute('draggable');
      });
      this._onDrop();
      this._disableDelayedDragEvents();
      sortables.splice(sortables.indexOf(this.el), 1);
      this.el = el = null;
    },
    _hideClone: function _hideClone() {
      if (!cloneHidden) {
        pluginEvent('hideClone', this);
        if (Sortable.eventCanceled) return;
        css(cloneEl, 'display', 'none');
        if (this.options.removeCloneOnHide && cloneEl.parentNode) {
          cloneEl.parentNode.removeChild(cloneEl);
        }
        cloneHidden = true;
      }
    },
    _showClone: function _showClone(putSortable) {
      if (putSortable.lastPutMode !== 'clone') {
        this._hideClone();
        return;
      }
      if (cloneHidden) {
        pluginEvent('showClone', this);
        if (Sortable.eventCanceled) return; // show clone at dragEl or original position

        if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
          rootEl.insertBefore(cloneEl, dragEl);
        } else if (nextEl) {
          rootEl.insertBefore(cloneEl, nextEl);
        } else {
          rootEl.appendChild(cloneEl);
        }
        if (this.options.group.revertClone) {
          this.animate(dragEl, cloneEl);
        }
        css(cloneEl, 'display', '');
        cloneHidden = false;
      }
    }
  };
  function _globalDragOver( /**Event*/
  evt) {
    if (evt.dataTransfer) {
      evt.dataTransfer.dropEffect = 'move';
    }
    evt.cancelable && evt.preventDefault();
  }
  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
    var evt,
      sortable = fromEl[expando],
      onMoveFn = sortable.options.onMove,
      retVal; // Support for new CustomEvent feature

    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent('move', {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent('move', true, true);
    }
    evt.to = toEl;
    evt.from = fromEl;
    evt.dragged = dragEl;
    evt.draggedRect = dragRect;
    evt.related = targetEl || toEl;
    evt.relatedRect = targetRect || getRect(toEl);
    evt.willInsertAfter = willInsertAfter;
    evt.originalEvent = originalEvent;
    fromEl.dispatchEvent(evt);
    if (onMoveFn) {
      retVal = onMoveFn.call(sortable, evt, originalEvent);
    }
    return retVal;
  }
  function _disableDraggable(el) {
    el.draggable = false;
  }
  function _unsilent() {
    _silent = false;
  }
  function _ghostIsFirst(evt, vertical, sortable) {
    var rect = getRect(getChild(sortable.el, 0, sortable.options, true));
    var spacer = 10;
    return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;
  }
  function _ghostIsLast(evt, vertical, sortable) {
    var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
    var spacer = 10;
    return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
  }
  function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
    var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
      targetLength = vertical ? targetRect.height : targetRect.width,
      targetS1 = vertical ? targetRect.top : targetRect.left,
      targetS2 = vertical ? targetRect.bottom : targetRect.right,
      invert = false;
    if (!invertSwap) {
      // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
      if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
        // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
        // check if past first invert threshold on side opposite of lastDirection
        if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
          // past first invert threshold, do not restrict inverted threshold to dragEl shadow
          pastFirstInvertThresh = true;
        }
        if (!pastFirstInvertThresh) {
          // dragEl shadow (target move distance shadow)
          if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
          : mouseOnAxis > targetS2 - targetMoveDistance) {
            return -lastDirection;
          }
        } else {
          invert = true;
        }
      } else {
        // Regular
        if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
          return _getInsertDirection(target);
        }
      }
    }
    invert = invert || invertSwap;
    if (invert) {
      // Invert of regular
      if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
        return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
      }
    }
    return 0;
  }
  /**
   * Gets the direction dragEl must be swapped relative to target in order to make it
   * seem that dragEl has been "inserted" into that element's position
   * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
   * @return {Number}                   Direction dragEl must be swapped
   */

  function _getInsertDirection(target) {
    if (index(dragEl) < index(target)) {
      return 1;
    } else {
      return -1;
    }
  }
  /**
   * Generate id
   * @param   {HTMLElement} el
   * @returns {String}
   * @private
   */

  function _generateId(el) {
    var str = el.tagName + el.className + el.src + el.href + el.textContent,
      i = str.length,
      sum = 0;
    while (i--) {
      sum += str.charCodeAt(i);
    }
    return sum.toString(36);
  }
  function _saveInputCheckedState(root) {
    savedInputChecked.length = 0;
    var inputs = root.getElementsByTagName('input');
    var idx = inputs.length;
    while (idx--) {
      var el = inputs[idx];
      el.checked && savedInputChecked.push(el);
    }
  }
  function _nextTick(fn) {
    return setTimeout(fn, 0);
  }
  function _cancelNextTick(id) {
    return clearTimeout(id);
  } // Fixed #973:

  if (documentExists) {
    on(document, 'touchmove', function (evt) {
      if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
        evt.preventDefault();
      }
    });
  } // Export utils

  Sortable.utils = {
    on: on,
    off: off,
    css: css,
    find: find,
    is: function is(el, selector) {
      return !!closest(el, selector, el, false);
    },
    extend: extend,
    throttle: throttle,
    closest: closest,
    toggleClass: toggleClass,
    clone: clone,
    index: index,
    nextTick: _nextTick,
    cancelNextTick: _cancelNextTick,
    detectDirection: _detectDirection,
    getChild: getChild
  };
  /**
   * Get the Sortable instance of an element
   * @param  {HTMLElement} element The element
   * @return {Sortable|undefined}         The instance of Sortable
   */

  Sortable.get = function (element) {
    return element[expando];
  };
  /**
   * Mount a plugin to Sortable
   * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
   */

  Sortable.mount = function () {
    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
      plugins[_key] = arguments[_key];
    }
    if (plugins[0].constructor === Array) plugins = plugins[0];
    plugins.forEach(function (plugin) {
      if (!plugin.prototype || !plugin.prototype.constructor) {
        throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
      }
      if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
      PluginManager.mount(plugin);
    });
  };
  /**
   * Create sortable instance
   * @param {HTMLElement}  el
   * @param {Object}      [options]
   */

  Sortable.create = function (el, options) {
    return new Sortable(el, options);
  }; // Export

  Sortable.version = version;
  var autoScrolls = [],
    scrollEl,
    scrollRootEl,
    scrolling = false,
    lastAutoScrollX,
    lastAutoScrollY,
    touchEvt$1,
    pointerElemChangedInterval;
  function AutoScrollPlugin() {
    function AutoScroll() {
      this.defaults = {
        scroll: true,
        forceAutoScrollFallback: false,
        scrollSensitivity: 30,
        scrollSpeed: 10,
        bubbleScroll: true
      }; // Bind all private methods

      for (var fn in this) {
        if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
          this[fn] = this[fn].bind(this);
        }
      }
    }
    AutoScroll.prototype = {
      dragStarted: function dragStarted(_ref) {
        var originalEvent = _ref.originalEvent;
        if (this.sortable.nativeDraggable) {
          on(document, 'dragover', this._handleAutoScroll);
        } else {
          if (this.options.supportPointer) {
            on(document, 'pointermove', this._handleFallbackAutoScroll);
          } else if (originalEvent.touches) {
            on(document, 'touchmove', this._handleFallbackAutoScroll);
          } else {
            on(document, 'mousemove', this._handleFallbackAutoScroll);
          }
        }
      },
      dragOverCompleted: function dragOverCompleted(_ref2) {
        var originalEvent = _ref2.originalEvent;

        // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
        if (!this.options.dragOverBubble && !originalEvent.rootEl) {
          this._handleAutoScroll(originalEvent);
        }
      },
      drop: function drop() {
        if (this.sortable.nativeDraggable) {
          off(document, 'dragover', this._handleAutoScroll);
        } else {
          off(document, 'pointermove', this._handleFallbackAutoScroll);
          off(document, 'touchmove', this._handleFallbackAutoScroll);
          off(document, 'mousemove', this._handleFallbackAutoScroll);
        }
        clearPointerElemChangedInterval();
        clearAutoScrolls();
        cancelThrottle();
      },
      nulling: function nulling() {
        touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
        autoScrolls.length = 0;
      },
      _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
        this._handleAutoScroll(evt, true);
      },
      _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
        var _this = this;
        var x = (evt.touches ? evt.touches[0] : evt).clientX,
          y = (evt.touches ? evt.touches[0] : evt).clientY,
          elem = document.elementFromPoint(x, y);
        touchEvt$1 = evt; // IE does not seem to have native autoscroll,
        // Edge's autoscroll seems too conditional,
        // MACOS Safari does not have autoscroll,
        // Firefox and Chrome are good

        if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
          autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

          var ogElemScroller = getParentAutoScrollElement(elem, true);
          if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
            pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

            pointerElemChangedInterval = setInterval(function () {
              var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);
              if (newElem !== ogElemScroller) {
                ogElemScroller = newElem;
                clearAutoScrolls();
              }
              autoScroll(evt, _this.options, newElem, fallback);
            }, 10);
            lastAutoScrollX = x;
            lastAutoScrollY = y;
          }
        } else {
          // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
          if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
            clearAutoScrolls();
            return;
          }
          autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
        }
      }
    };
    return _extends(AutoScroll, {
      pluginName: 'scroll',
      initializeByDefault: true
    });
  }
  function clearAutoScrolls() {
    autoScrolls.forEach(function (autoScroll) {
      clearInterval(autoScroll.pid);
    });
    autoScrolls = [];
  }
  function clearPointerElemChangedInterval() {
    clearInterval(pointerElemChangedInterval);
  }
  var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
    if (!options.scroll) return;
    var x = (evt.touches ? evt.touches[0] : evt).clientX,
      y = (evt.touches ? evt.touches[0] : evt).clientY,
      sens = options.scrollSensitivity,
      speed = options.scrollSpeed,
      winScroller = getWindowScrollingElement();
    var scrollThisInstance = false,
      scrollCustomFn; // New scroll root, set scrollEl

    if (scrollRootEl !== rootEl) {
      scrollRootEl = rootEl;
      clearAutoScrolls();
      scrollEl = options.scroll;
      scrollCustomFn = options.scrollFn;
      if (scrollEl === true) {
        scrollEl = getParentAutoScrollElement(rootEl, true);
      }
    }
    var layersOut = 0;
    var currentParent = scrollEl;
    do {
      var el = currentParent,
        rect = getRect(el),
        top = rect.top,
        bottom = rect.bottom,
        left = rect.left,
        right = rect.right,
        width = rect.width,
        height = rect.height,
        canScrollX = void 0,
        canScrollY = void 0,
        scrollWidth = el.scrollWidth,
        scrollHeight = el.scrollHeight,
        elCSS = css(el),
        scrollPosX = el.scrollLeft,
        scrollPosY = el.scrollTop;
      if (el === winScroller) {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
      } else {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
      }
      var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
      var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);
      if (!autoScrolls[layersOut]) {
        for (var i = 0; i <= layersOut; i++) {
          if (!autoScrolls[i]) {
            autoScrolls[i] = {};
          }
        }
      }
      if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
        autoScrolls[layersOut].el = el;
        autoScrolls[layersOut].vx = vx;
        autoScrolls[layersOut].vy = vy;
        clearInterval(autoScrolls[layersOut].pid);
        if (vx != 0 || vy != 0) {
          scrollThisInstance = true;
          /* jshint loopfunc:true */

          autoScrolls[layersOut].pid = setInterval(function () {
            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
            if (isFallback && this.layer === 0) {
              Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely
            }

            var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
            var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
            if (typeof scrollCustomFn === 'function') {
              if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
                return;
              }
            }
            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
          }.bind({
            layer: layersOut
          }), 24);
        }
      }
      layersOut++;
    } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));
    scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
  }, 30);
  var drop = function drop(_ref) {
    var originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      dragEl = _ref.dragEl,
      activeSortable = _ref.activeSortable,
      dispatchSortableEvent = _ref.dispatchSortableEvent,
      hideGhostForTarget = _ref.hideGhostForTarget,
      unhideGhostForTarget = _ref.unhideGhostForTarget;
    if (!originalEvent) return;
    var toSortable = putSortable || activeSortable;
    hideGhostForTarget();
    var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
    var target = document.elementFromPoint(touch.clientX, touch.clientY);
    unhideGhostForTarget();
    if (toSortable && !toSortable.el.contains(target)) {
      dispatchSortableEvent('spill');
      this.onSpill({
        dragEl: dragEl,
        putSortable: putSortable
      });
    }
  };
  function Revert() {}
  Revert.prototype = {
    startIndex: null,
    dragStart: function dragStart(_ref2) {
      var oldDraggableIndex = _ref2.oldDraggableIndex;
      this.startIndex = oldDraggableIndex;
    },
    onSpill: function onSpill(_ref3) {
      var dragEl = _ref3.dragEl,
        putSortable = _ref3.putSortable;
      this.sortable.captureAnimationState();
      if (putSortable) {
        putSortable.captureAnimationState();
      }
      var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);
      if (nextSibling) {
        this.sortable.el.insertBefore(dragEl, nextSibling);
      } else {
        this.sortable.el.appendChild(dragEl);
      }
      this.sortable.animateAll();
      if (putSortable) {
        putSortable.animateAll();
      }
    },
    drop: drop
  };
  _extends(Revert, {
    pluginName: 'revertOnSpill'
  });
  function Remove() {}
  Remove.prototype = {
    onSpill: function onSpill(_ref4) {
      var dragEl = _ref4.dragEl,
        putSortable = _ref4.putSortable;
      var parentSortable = putSortable || this.sortable;
      parentSortable.captureAnimationState();
      dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
      parentSortable.animateAll();
    },
    drop: drop
  };
  _extends(Remove, {
    pluginName: 'removeOnSpill'
  });
  Sortable.mount(new AutoScrollPlugin());
  Sortable.mount(Remove, Revert);

  function swapDragArrayElement(data, currentIndex, targetIndex) {
    var newData = _toConsumableArray(data);
    if (targetIndex - currentIndex > 0) {
      newData.splice(targetIndex + 1, 0, newData[currentIndex]);
      newData.splice(currentIndex, 1);
    } else {
      newData.splice(targetIndex, 0, newData[currentIndex]);
      newData.splice(currentIndex + 1, 1);
    }
    return newData;
  }

  function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$m(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useDragSort(props, context) {
    var _toRefs = vue.toRefs(props),
      sortOnRowDraggable = _toRefs.sortOnRowDraggable,
      dragSort = _toRefs.dragSort,
      data = _toRefs.data,
      rowKey = _toRefs.rowKey;
    var _useClassName = useClassName(),
      tableDraggableClasses = _useClassName.tableDraggableClasses,
      tableBaseClass = _useClassName.tableBaseClass,
      tableFullRowClasses = _useClassName.tableFullRowClasses;
    var primaryTableRef = vue.ref(null);
    var columns = vue.ref(props.columns || []);
    var dragCol = vue.computed(function () {
      return columns.value.find(function (item) {
        return item.colKey === "drag";
      });
    });
    var isRowDraggable = vue.computed(function () {
      return sortOnRowDraggable.value || dragSort.value === "row";
    });
    var isRowHandlerDraggable = vue.computed(function () {
      return ["row-handler", "row-handler-col"].includes(dragSort.value) && !!dragCol.value;
    });
    var isColDraggable = vue.computed(function () {
      return ["col", "row-handler-col"].includes(dragSort.value);
    });
    var lastRowList = vue.ref([]);
    var lastColList = vue.ref([]);
    if (props.sortOnRowDraggable) {
      log.error("Table", "`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.");
    }
    vue.watch([data], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
        data2 = _ref2[0];
      lastRowList.value = (data2 === null || data2 === void 0 ? void 0 : data2.map(function (item) {
        return get_1(item, rowKey.value);
      })) || [];
    }, {
      immediate: true
    });
    vue.watch(columns, function (columns2) {
      lastColList.value = columns2 ? columns2.map(function (t) {
        return t.colKey;
      }) : [];
    }, {
      immediate: true
    });
    function getDataPageIndex(index) {
      var pagination = props.pagination;
      if (!props.disableDataPage && pagination && data.value.length > pagination.pageSize) {
        return pagination.pageSize * (pagination.current - 1) + index;
      }
      return index;
    }
    var registerRowDragEvent = function registerRowDragEvent(element) {
      if (!isRowHandlerDraggable.value && !isRowDraggable.value) return;
      var dragContainer = element === null || element === void 0 ? void 0 : element.querySelector("tbody");
      if (!dragContainer) {
        console.error("tbody does not exist.");
        return null;
      }
      var dragInstanceTmp = null;
      var baseOptions = _objectSpread$m({
        animation: 150,
        ghostClass: tableDraggableClasses.ghost,
        chosenClass: tableDraggableClasses.chosen,
        dragClass: tableDraggableClasses.dragging,
        filter: ".".concat(tableFullRowClasses.base),
        onMove: function onMove(evt) {
          return !hasClass(evt.related, tableFullRowClasses.base);
        },
        onEnd: function onEnd(evt) {
          var _dragInstanceTmp, _props$onDragSort;
          (_dragInstanceTmp = dragInstanceTmp) === null || _dragInstanceTmp === void 0 ? void 0 : _dragInstanceTmp.sort(lastRowList.value);
          var currentIndex = evt.oldIndex,
            targetIndex = evt.newIndex;
          if (isFunction_1(props.firstFullRow) && props.firstFullRow(vue.h) || context.slots.firstFullRow) {
            currentIndex -= 1;
            targetIndex -= 1;
          }
          var params = {
            data: data.value,
            currentIndex: currentIndex,
            current: data.value[currentIndex],
            targetIndex: targetIndex,
            target: data.value[targetIndex],
            newData: swapDragArrayElement(_toConsumableArray(props.data), getDataPageIndex(currentIndex), getDataPageIndex(targetIndex)),
            e: evt,
            sort: "row"
          };
          params.currentData = params.newData;
          (_props$onDragSort = props.onDragSort) === null || _props$onDragSort === void 0 ? void 0 : _props$onDragSort.call(props, params);
        }
      }, props.dragSortOptions);
      if (!dragContainer) return;
      if (isRowDraggable.value) {
        dragInstanceTmp = new Sortable(dragContainer, _objectSpread$m({}, baseOptions));
      } else {
        dragInstanceTmp = new Sortable(dragContainer, _objectSpread$m(_objectSpread$m({}, baseOptions), {}, {
          handle: ".".concat(tableDraggableClasses.handle)
        }));
      }
      lastRowList.value = dragInstanceTmp.toArray();
    };
    var registerOneLevelColDragEvent = function registerOneLevelColDragEvent(container, recover) {
      var dragInstanceTmp = null;
      var options = _objectSpread$m(_objectSpread$m({
        animation: 150
      }, props.dragSortOptions), {}, {
        dataIdAttr: "data-colkey",
        direction: "vertical",
        ghostClass: tableDraggableClasses.ghost,
        chosenClass: tableDraggableClasses.chosen,
        dragClass: tableDraggableClasses.dragging,
        handle: ".".concat(tableBaseClass.thCellInner),
        onEnd: function onEnd(evt) {
          var _props$onDragSort2;
          if (recover) {
            var _dragInstanceTmp2;
            (_dragInstanceTmp2 = dragInstanceTmp) === null || _dragInstanceTmp2 === void 0 ? void 0 : _dragInstanceTmp2.sort(_toConsumableArray(lastColList.value));
          }
          var oldIndex = evt.oldIndex,
            newIndex = evt.newIndex,
            targetElement = evt.target;
          var currentIndex = recover ? oldIndex : newIndex;
          var targetIndex = recover ? newIndex : oldIndex;
          var oldElement = targetElement.children[currentIndex];
          var newElement = targetElement.children[targetIndex];
          var current = getColumnDataByKey(columns.value, oldElement.dataset.colkey);
          var target = getColumnDataByKey(columns.value, newElement.dataset.colkey);
          if (!current || !current.colKey) {
            log.error("Table", "colKey is missing in ".concat(JSON.stringify(current)));
          }
          if (!target || !target.colKey) {
            log.error("Table", "colKey is missing in ".concat(JSON.stringify(target)));
          }
          currentIndex = getColumnIndexByKey(props.columns, current.colKey);
          targetIndex = getColumnIndexByKey(props.columns, target.colKey);
          var params = {
            data: columns.value,
            currentIndex: currentIndex,
            current: current,
            targetIndex: targetIndex,
            target: target,
            newData: swapDragArrayElement(_toConsumableArray(props.columns), currentIndex, targetIndex),
            e: evt,
            sort: "col"
          };
          params.currentData = params.newData;
          (_props$onDragSort2 = props.onDragSort) === null || _props$onDragSort2 === void 0 ? void 0 : _props$onDragSort2.call(props, params);
        }
      });
      if (!container) return;
      dragInstanceTmp = new Sortable(container, options);
      return dragInstanceTmp;
    };
    var registerColDragEvent = function registerColDragEvent(tableElement) {
      if (!isColDraggable.value || !tableElement) return;
      var trList = tableElement.querySelectorAll("thead > tr");
      if (trList.length <= 1) {
        var _trList = _slicedToArray(trList, 1),
          container = _trList[0];
        var dragInstanceTmp = registerOneLevelColDragEvent(container, true);
        lastColList.value = dragInstanceTmp === null || dragInstanceTmp === void 0 ? void 0 : dragInstanceTmp.toArray();
      } else {
        trList.forEach(function (container) {
          registerOneLevelColDragEvent(container, false);
        });
      }
    };
    function setDragSortPrimaryTableRef(primaryTableElement) {
      primaryTableRef.value = primaryTableElement;
    }
    function setDragSortColumns(val) {
      columns.value = val;
    }
    vue.watch([primaryTableRef], function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 1),
        val = _ref4[0];
      if (!val || !val.$el) return;
      registerRowDragEvent(val.$el);
      registerColDragEvent(val.$el);
      var timer = setTimeout(function () {
        if (val.$refs.affixHeaderRef) {
          registerColDragEvent(val.$refs.affixHeaderRef);
        }
        clearTimeout(timer);
      });
    });
    return {
      isRowDraggable: isRowDraggable,
      isRowHandlerDraggable: isRowHandlerDraggable,
      isColDraggable: isColDraggable,
      setDragSortPrimaryTableRef: setDragSortPrimaryTableRef,
      setDragSortColumns: setDragSortColumns
    };
  }

  function useAsyncLoading(props, context) {
    var renderTNode = useTNodeJSX();
    var _useConfig = useConfig("table"),
      globalConfig = _useConfig.globalConfig;
    var _useClassName = useClassName(),
      isLoadingClass = _useClassName.isLoadingClass,
      isLoadMoreClass = _useClassName.isLoadMoreClass,
      asyncLoadingClass = _useClassName.asyncLoadingClass;
    var classes = vue.computed(function () {
      var _ref;
      return [asyncLoadingClass, (_ref = {}, _defineProperty$3(_ref, isLoadingClass, props.asyncLoading === "loading"), _defineProperty$3(_ref, isLoadMoreClass, props.asyncLoading === "load-more"), _ref)];
    });
    function onLoadClick() {
      var _props$onAsyncLoading;
      if (typeof props.asyncLoading !== "string") return;
      (_props$onAsyncLoading = props.onAsyncLoadingClick) === null || _props$onAsyncLoading === void 0 ? void 0 : _props$onAsyncLoading.call(props, {
        status: props.asyncLoading
      });
    }
    function renderAsyncLoading() {
      var asyncLoadingNode = renderTNode("asyncLoading");
      if (isString_1(asyncLoadingNode)) {
        var asyncLoading = props.asyncLoading;
        var loadingText = {
          "load-more": globalConfig.value.loadingMoreText,
          loading: globalConfig.value.loadingText
        }[String(asyncLoading)];
        return vue.createVNode("div", {
          "class": classes.value,
          "onClick": onLoadClick
        }, [vue.createVNode(Loading, {
          "loading": asyncLoading === "loading",
          "size": "small",
          "text": loadingText
        }, null)]);
      }
      if (![null, false, void 0].includes(asyncLoadingNode)) {
        return vue.createVNode("div", {
          "class": classes.value,
          "onClick": onLoadClick
        }, [asyncLoadingNode]);
      }
      return null;
    }
    return {
      renderAsyncLoading: renderAsyncLoading
    };
  }

  function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$l(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var EditableCell = vue.defineComponent({
    name: "TableEditableCell",
    props: {
      row: Object,
      rowIndex: Number,
      col: Object,
      colIndex: Number,
      oldCell: [Function, String],
      tableBaseClass: Object,
      cellEmptyContent: [Function, String],
      editable: {
        type: Boolean,
        "default": void 0
      },
      readonly: {
        type: Boolean
      },
      errors: {
        type: Array,
        "default": void 0
      },
      onChange: Function,
      onValidate: Function,
      onRuleChange: Function
    },
    setup: function setup(props, context) {
      var _props$col$edit;
      var _toRefs = vue.toRefs(props),
        row = _toRefs.row,
        col = _toRefs.col;
      var tableEditableCellRef = vue.ref(null);
      var isEdit = vue.ref(((_props$col$edit = props.col.edit) === null || _props$col$edit === void 0 ? void 0 : _props$col$edit.defaultEditable) || false);
      var editValue = vue.ref();
      var errorList = vue.ref();
      var _useGlobalIcon = useGlobalIcon({
          Edit1Icon: edit1
        }),
        Edit1Icon = _useGlobalIcon.Edit1Icon;
      var cellParams = vue.computed(function () {
        return {
          rowIndex: props.rowIndex,
          colIndex: props.colIndex,
          col: props.col,
          row: props.row
        };
      });
      var currentRow = vue.computed(function () {
        var newRow = _objectSpread$l({}, row.value);
        set_1(newRow, col.value.colKey, editValue.value);
        return newRow;
      });
      var cellNode = vue.computed(function () {
        var node = renderCell({
          row: currentRow.value,
          col: _objectSpread$l(_objectSpread$l({}, col.value), {}, {
            cell: props.oldCell
          }),
          rowIndex: props.rowIndex,
          colIndex: props.colIndex
        }, context.slots, {
          cellEmptyContent: props.cellEmptyContent
        });
        return node;
      });
      var componentProps = vue.computed(function () {
        var _edit$abortEditOnEven;
        var edit = col.value.edit;
        if (!edit) return {};
        var editProps = isFunction_1(edit.props) ? edit.props(_objectSpread$l(_objectSpread$l({}, cellParams.value), {}, {
          editedRow: currentRow.value
        })) : _objectSpread$l({}, edit.props);
        delete editProps.onChange;
        delete editProps.value;
        (_edit$abortEditOnEven = edit.abortEditOnEvent) === null || _edit$abortEditOnEven === void 0 ? void 0 : _edit$abortEditOnEven.forEach(function (item) {
          delete editProps[item];
        });
        return editProps;
      });
      var isAbortEditOnChange = vue.computed(function () {
        var _edit$abortEditOnEven2;
        var edit = col.value.edit;
        if (!edit) return false;
        return Boolean((_edit$abortEditOnEven2 = edit.abortEditOnEvent) === null || _edit$abortEditOnEven2 === void 0 ? void 0 : _edit$abortEditOnEven2.includes("onChange"));
      });
      var validateEdit = function validateEdit(trigger) {
        return new Promise(function (resolve) {
          var params = {
            result: [_objectSpread$l(_objectSpread$l({}, cellParams.value), {}, {
              errorList: [],
              value: editValue.value
            })],
            trigger: trigger
          };
          var rules = isFunction_1(col.value.edit.rules) ? col.value.edit.rules(cellParams.value) : col.value.edit.rules;
          if (!col.value.edit || !rules || !rules.length) {
            var _props$onValidate;
            (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, params);
            resolve(true);
            return;
          }
          validate(editValue.value, rules).then(function (result) {
            var _props$onValidate2;
            var list = result === null || result === void 0 ? void 0 : result.filter(function (t) {
              return !t.result;
            });
            params.result[0].errorList = list;
            (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 ? void 0 : _props$onValidate2.call(props, params);
            if (!list || !list.length) {
              resolve(true);
            } else {
              errorList.value = list;
              resolve(list);
            }
          });
        });
      };
      var isSame = function isSame(a, b) {
        if (_typeof$2(a) === "object" && _typeof$2(b) === "object") {
          return JSON.stringify(a) === JSON.stringify(b);
        }
        return a === b;
      };
      var updateAndSaveAbort = function updateAndSaveAbort(outsideAbortEvent) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        validateEdit("self").then(function (result) {
          if (result !== true) return;
          var oldValue = get_1(row.value, col.value.colKey);
          if (!isSame(editValue.value, oldValue)) {
            editValue.value = oldValue;
            outsideAbortEvent === null || outsideAbortEvent === void 0 ? void 0 : outsideAbortEvent.apply(void 0, args);
          }
          var timer = setTimeout(function () {
            isEdit.value = false;
            errorList.value = [];
            clearTimeout(timer);
          }, 0);
        });
      };
      var listeners = vue.computed(function () {
        var _edit$abortEditOnEven3;
        var edit = col.value.edit;
        var isCellEditable = props.editable === void 0;
        if (!isEdit.value || !isCellEditable) return;
        if (!(edit !== null && edit !== void 0 && (_edit$abortEditOnEven3 = edit.abortEditOnEvent) !== null && _edit$abortEditOnEven3 !== void 0 && _edit$abortEditOnEven3.length)) return {};
        var tListeners = {};
        var outsideAbortEvent = edit === null || edit === void 0 ? void 0 : edit.onEdited;
        edit.abortEditOnEvent.forEach(function (itemEvent) {
          if (itemEvent === "onChange") return;
          tListeners[itemEvent] = function () {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            updateAndSaveAbort.apply(void 0, [outsideAbortEvent, _objectSpread$l(_objectSpread$l({}, cellParams.value), {}, {
              trigger: itemEvent,
              newRowData: currentRow.value
            })].concat(args));
          };
        });
        return tListeners;
      });
      var onEditChange = function onEditChange(val) {
        var _props$onChange, _props$onRuleChange;
        editValue.value = val;
        var params = _objectSpread$l(_objectSpread$l({}, cellParams.value), {}, {
          value: val,
          editedRow: _objectSpread$l(_objectSpread$l({}, props.row), {}, _defineProperty$3({}, props.col.colKey, val))
        });
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, params);
        (_props$onRuleChange = props.onRuleChange) === null || _props$onRuleChange === void 0 ? void 0 : _props$onRuleChange.call(props, params);
        var isCellEditable = props.editable === void 0;
        if (isCellEditable && isAbortEditOnChange.value) {
          var _col$value$edit;
          var outsideAbortEvent = (_col$value$edit = col.value.edit) === null || _col$value$edit === void 0 ? void 0 : _col$value$edit.onEdited;
          for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            args[_key3 - 1] = arguments[_key3];
          }
          updateAndSaveAbort.apply(void 0, [outsideAbortEvent, _objectSpread$l(_objectSpread$l({}, cellParams.value), {}, {
            trigger: "onChange",
            newRowData: currentRow.value
          })].concat(args));
        }
      };
      var documentClickHandler = function documentClickHandler(e) {
        var _e$path, _tableEditableCellRef;
        if (!col.value.edit || !col.value.edit.component) return;
        if (!isEdit.value) return;
        if ((_e$path = e.path) !== null && _e$path !== void 0 && _e$path.includes((_tableEditableCellRef = tableEditableCellRef.value) === null || _tableEditableCellRef === void 0 ? void 0 : _tableEditableCellRef.$el)) return;
        for (var i = 0, len = e.path.length; i < len; i++) {
          var _node$classList, _node$classList$value;
          var node = e.path[i];
          if ((_node$classList = node.classList) !== null && _node$classList !== void 0 && (_node$classList$value = _node$classList.value) !== null && _node$classList$value !== void 0 && _node$classList$value.includes("popup__content")) {
            return;
          }
        }
        var outsideAbortEvent = col.value.edit.onEdited;
        updateAndSaveAbort(outsideAbortEvent, _objectSpread$l(_objectSpread$l({}, cellParams.value), {}, {
          trigger: "document",
          newRowData: currentRow.value
        }));
      };
      var cellValue = vue.computed(function () {
        return get_1(row.value, col.value.colKey);
      });
      vue.watch(cellValue, function (cellValue2) {
        var val = cellValue2;
        if (_typeof$2(val) === "object" && val !== null) {
          val = val instanceof Array ? _toConsumableArray(val) : _objectSpread$l({}, val);
        }
        editValue.value = val;
      }, {
        immediate: true
      });
      vue.watch(isEdit, function (isEdit2) {
        var isCellEditable = props.editable === void 0;
        if (!col.value.edit || !col.value.edit.component || !isCellEditable) return;
        if (isEdit2) {
          document.addEventListener("click", documentClickHandler);
        } else {
          document.removeEventListener("click", documentClickHandler);
        }
      }, {
        immediate: true
      });
      vue.watch(function () {
        return [props.editable, props.row, props.col, props.rowIndex, props.colIndex];
      }, function (_ref) {
        var _ref2 = _slicedToArray(_ref, 1),
          editable = _ref2[0];
        if (editable === false) {
          editValue.value = cellValue.value;
        } else if (editable === true) {
          var _props$onRuleChange2;
          (_props$onRuleChange2 = props.onRuleChange) === null || _props$onRuleChange2 === void 0 ? void 0 : _props$onRuleChange2.call(props, _objectSpread$l(_objectSpread$l({}, cellParams.value), {}, {
            value: cellValue.value,
            editedRow: row.value
          }));
        }
      }, {
        immediate: true
      });
      vue.watch(function () {
        return props.errors;
      }, function (errors) {
        errorList.value = errors;
      });
      return function () {
        var _col$value$edit3, _errorList$value, _errorList$value$, _errorList$value2, _errorList$value2$;
        if (props.readonly) {
          return cellNode.value;
        }
        if (props.editable === void 0 && !isEdit.value || props.editable === false) {
          var _col$value$edit2;
          return vue.createVNode("div", {
            "class": props.tableBaseClass.cellEditable,
            "onClick": function onClick(e) {
              isEdit.value = true;
              e.stopPropagation();
            }
          }, [cellNode.value, ((_col$value$edit2 = col.value.edit) === null || _col$value$edit2 === void 0 ? void 0 : _col$value$edit2.showEditIcon) !== false && vue.createVNode(Edit1Icon, {
            "size": "12px"
          }, null)]);
        }
        var Component = (_col$value$edit3 = col.value.edit) === null || _col$value$edit3 === void 0 ? void 0 : _col$value$edit3.component;
        if (!Component) {
          log.error("Table", "edit.component is required.");
          return null;
        }
        var errorMessage = (_errorList$value = errorList.value) === null || _errorList$value === void 0 ? void 0 : (_errorList$value$ = _errorList$value[0]) === null || _errorList$value$ === void 0 ? void 0 : _errorList$value$.message;
        return vue.createVNode("div", {
          "class": props.tableBaseClass.cellEditWrap,
          "onClick": function onClick(e) {
            e.stopPropagation();
          }
        }, [vue.createVNode(Component, vue.mergeProps({
          "ref": "tableEditableCellRef",
          "status": errorMessage ? ((_errorList$value2 = errorList.value) === null || _errorList$value2 === void 0 ? void 0 : (_errorList$value2$ = _errorList$value2[0]) === null || _errorList$value2$ === void 0 ? void 0 : _errorList$value2$.type) || "error" : void 0,
          "tips": errorMessage
        }, componentProps.value, listeners.value, {
          "value": editValue.value,
          "onChange": onEditChange
        }), null)]);
      };
    }
  });

  function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$k(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var cellRuleMap = /* @__PURE__ */new Map();
  function useRowEdit(props) {
    var errorListMap = vue.ref({});
    var editableKeysMap = vue.computed(function () {
      return getEditableKeysMap(props.editableRowKeys, props.data, props.rowKey || "id");
    });
    var getErrorListMapByErrors = function getErrorListMapByErrors(errors) {
      var errorMap = {};
      errors.forEach(function (_ref) {
        var row = _ref.row,
          col = _ref.col,
          errorList = _ref.errorList;
        var rowValue = get_1(row, props.rowKey || "id");
        var key = [rowValue, col.colKey].join("__");
        if (errorList !== null && errorList !== void 0 && errorList.length) {
          errorMap[key] = errorList;
        } else {
          delete errorMap[key];
        }
      });
      return errorMap;
    };
    var validateOneRowData = function validateOneRowData(rowValue) {
      var rowRules = cellRuleMap.get(rowValue);
      if (!rowRules) return;
      var list = rowRules.map(function (item) {
        return new Promise(function (resolve) {
          var editedRow = item.editedRow,
            col = item.col;
          var rules = isFunction_1(col.edit.rules) ? col.edit.rules(item) : col.edit.rules;
          if (!col.edit || !rules || !rules.length) {
            resolve(_objectSpread$k(_objectSpread$k({}, item), {}, {
              errorList: []
            }));
            return;
          }
          validate(editedRow[col.colKey], rules).then(function (r) {
            resolve(_objectSpread$k(_objectSpread$k({}, item), {}, {
              errorList: r.filter(function (t) {
                return !t.result;
              })
            }));
          });
        });
      });
      return new Promise(function (resolve, reject) {
        Promise.all(list).then(function (errors) {
          resolve({
            errors: errors.filter(function (t) {
              var _t$errorList;
              return (_t$errorList = t.errorList) === null || _t$errorList === void 0 ? void 0 : _t$errorList.length;
            }),
            errorMap: getErrorListMapByErrors(errors)
          });
        }, reject);
      });
    };
    var validateRowData = function validateRowData(rowValue) {
      return new Promise(function (resolve, reject) {
        validateOneRowData(rowValue).then(function (_ref2) {
          var _props$onRowValidate;
          var errors = _ref2.errors,
            errorMap = _ref2.errorMap;
          errorListMap.value = errorMap;
          var tTrigger = "parent";
          (_props$onRowValidate = props.onRowValidate) === null || _props$onRowValidate === void 0 ? void 0 : _props$onRowValidate.call(props, {
            trigger: tTrigger,
            result: errors
          });
          resolve({
            trigger: tTrigger,
            result: errors
          });
        }, reject);
      });
    };
    var validateTableData = function validateTableData() {
      var promiseList = [];
      var data = props.data || [];
      for (var i = 0, len = data.length; i < len; i++) {
        var rowValue = get_1(data[i], props.rowKey || "id");
        promiseList.push(validateOneRowData(rowValue));
      }
      return new Promise(function (resolve, reject) {
        Promise.all(promiseList).then(function (rList) {
          var _props$onValidate;
          var allErrorListMap = {};
          rList.forEach(function () {
            var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                errors: [],
                errorMap: {}
              },
              errorMap = _ref3.errorMap;
            errorMap && Object.assign(allErrorListMap, errorMap);
          });
          errorListMap.value = allErrorListMap;
          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, {
            result: allErrorListMap
          });
          resolve({
            result: allErrorListMap
          });
        }, reject);
      });
    };
    var onRuleChange = function onRuleChange(context) {
      if (props.editableRowKeys) {
        var rowValue = get_1(context.row, props.rowKey || "id");
        var rules = cellRuleMap.get(rowValue);
        if (rules) {
          var index = rules.findIndex(function (t) {
            return t.col.colKey === context.col.colKey;
          });
          if (index === -1) {
            rules.push(context);
          } else {
            rules[index] = context;
          }
          cellRuleMap.set(rowValue, rules);
        } else {
          cellRuleMap.set(rowValue, [context]);
        }
      }
    };
    var clearValidateData = function clearValidateData() {
      errorListMap.value = {};
    };
    return {
      errorListMap: errorListMap,
      editableKeysMap: editableKeysMap,
      validateTableData: validateTableData,
      validateRowData: validateRowData,
      onRuleChange: onRuleChange,
      clearValidateData: clearValidateData
    };
  }

  function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$j(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var OMIT_PROPS = ["hideSortTips", "dragSort", "defaultExpandedRowKeys", "defaultSelectedRowKeys", "columnController", "filterRow", "sortOnRowDraggable", "expandOnRowClick", "multipleSort", "expandIcon", "onChange", "onAsyncLoadingClick", "onColumnChange", "onColumnControllerVisibleChange", "onDataChange", "onDisplayColumnsChange", "onDragSort", "onExpandChange", "onFilterChange", "onSelectChange", "onSortChange"];
  var _PrimaryTable = vue.defineComponent({
    name: "TPrimaryTable",
    props: _objectSpread$j(_objectSpread$j({}, baseTableProps), primaryTableProps),
    setup: function setup(props, context) {
      var renderTNode = useTNodeJSX();
      var _toRefs = vue.toRefs(props),
        columns = _toRefs.columns,
        columnController = _toRefs.columnController;
      var primaryTableRef = vue.ref(null);
      var _useClassName = useClassName(),
        classPrefix = _useClassName.classPrefix,
        tableDraggableClasses = _useClassName.tableDraggableClasses,
        tableBaseClass = _useClassName.tableBaseClass,
        tableSelectedClasses = _useClassName.tableSelectedClasses,
        tableSortClasses = _useClassName.tableSortClasses;
      var _useStyle = useStyle(props),
        sizeClassNames = _useStyle.sizeClassNames;
      var _useColumnController = useColumnController(props, context),
        tDisplayColumns = _useColumnController.tDisplayColumns,
        renderColumnController = _useColumnController.renderColumnController;
      var _useRowExpand = useRowExpand(props, context),
        showExpandedRow = _useRowExpand.showExpandedRow,
        showExpandIconColumn = _useRowExpand.showExpandIconColumn,
        getExpandColumn = _useRowExpand.getExpandColumn,
        renderExpandedRow = _useRowExpand.renderExpandedRow,
        onInnerExpandRowClick = _useRowExpand.onInnerExpandRowClick;
      var _useSorter = useSorter(props, context),
        renderSortIcon = _useSorter.renderSortIcon;
      var _useRowSelect = useRowSelect(props, tableSelectedClasses),
        formatToRowSelectColumn = _useRowSelect.formatToRowSelectColumn,
        selectedRowClassNames = _useRowSelect.selectedRowClassNames;
      var _useFilter = useFilter(props, context),
        hasEmptyCondition = _useFilter.hasEmptyCondition,
        isTableOverflowHidden = _useFilter.isTableOverflowHidden,
        renderFilterIcon = _useFilter.renderFilterIcon,
        renderFirstFilterRow = _useFilter.renderFirstFilterRow,
        setFilterPrimaryTableRef = _useFilter.setFilterPrimaryTableRef;
      var _useDragSort = useDragSort(props, context),
        isRowHandlerDraggable = _useDragSort.isRowHandlerDraggable,
        isRowDraggable = _useDragSort.isRowDraggable,
        isColDraggable = _useDragSort.isColDraggable,
        setDragSortPrimaryTableRef = _useDragSort.setDragSortPrimaryTableRef,
        setDragSortColumns = _useDragSort.setDragSortColumns;
      var _useTableHeader = useTableHeader(props),
        renderTitleWidthIcon = _useTableHeader.renderTitleWidthIcon;
      var _useAsyncLoading = useAsyncLoading(props),
        renderAsyncLoading = _useAsyncLoading.renderAsyncLoading;
      var _useEditableRow = useRowEdit(props),
        errorListMap = _useEditableRow.errorListMap,
        editableKeysMap = _useEditableRow.editableKeysMap,
        validateRowData = _useEditableRow.validateRowData,
        validateTableData = _useEditableRow.validateTableData,
        onRuleChange = _useEditableRow.onRuleChange,
        clearValidateData = _useEditableRow.clearValidateData;
      var primaryTableClasses = vue.computed(function () {
        var _ref;
        return _ref = {}, _defineProperty$3(_ref, tableDraggableClasses.colDraggable, isColDraggable.value), _defineProperty$3(_ref, tableDraggableClasses.rowHandlerDraggable, isRowHandlerDraggable.value), _defineProperty$3(_ref, tableDraggableClasses.rowDraggable, isRowDraggable.value), _defineProperty$3(_ref, tableBaseClass.overflowVisible, isTableOverflowHidden.value === false), _defineProperty$3(_ref, tableBaseClass.tableRowEdit, props.editableRowKeys), _ref;
      });
      var tRowClassNames = vue.computed(function () {
        var tClassNames = [props.rowClassName, selectedRowClassNames.value];
        return tClassNames.filter(function (v) {
          return v;
        });
      });
      var tRowAttributes = vue.computed(function () {
        var tAttributes = [props.rowAttributes];
        if (isRowHandlerDraggable.value || isRowDraggable.value) {
          tAttributes.push(function (_ref2) {
            var row = _ref2.row;
            return {
              "data-id": get_1(row, props.rowKey || "id")
            };
          });
        }
        return tAttributes.filter(function (v) {
          return v;
        });
      });
      vue.onMounted(function () {
        setFilterPrimaryTableRef(primaryTableRef.value);
        setDragSortPrimaryTableRef(primaryTableRef.value);
      });
      context.expose({
        validateRowData: validateRowData,
        validateTableData: validateTableData,
        clearValidateData: clearValidateData,
        refreshTable: function refreshTable() {
          primaryTableRef.value.refreshTable();
        }
      });
      var getColumns = function getColumns(columns2) {
        var arr = [];
        var _loop = function _loop(i, len) {
          var _item$children, _tDisplayColumns$valu, _item$edit, _item$children2, _item$children3;
          var item = _objectSpread$j({}, columns2[i]);
          var isDisplayColumn = ((_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.length) || ((_tDisplayColumns$valu = tDisplayColumns.value) === null || _tDisplayColumns$valu === void 0 ? void 0 : _tDisplayColumns$valu.includes(item.colKey));
          if (!isDisplayColumn && props.columnController) return "continue";
          item = formatToRowSelectColumn(item);
          var sort = props.sort;
          if (item.sorter && props.showSortColumnBgColor) {
            var sorts = sort instanceof Array ? sort : [sort];
            var sortedColumn = sorts.find(function (sort2) {
              return sort2 && sort2.sortBy === item.colKey && sort2.descending !== void 0;
            });
            if (sortedColumn) {
              item.className = item.className instanceof Array ? item.className.concat(tableSortClasses.sortColumn) : [item.className, tableSortClasses.sortColumn];
            }
          }
          if (item.sorter || item.filter) {
            var titleContent = renderTitle(context.slots, item, i);
            var _item = item,
              ellipsisTitle = _item.ellipsisTitle;
            item.title = function (h2, p) {
              var _primaryTableRef$valu;
              var sortIcon = item.sorter ? renderSortIcon(p) : null;
              var filterIcon = item.filter ? renderFilterIcon(p) : null;
              var attach = (_primaryTableRef$valu = primaryTableRef.value) === null || _primaryTableRef$valu === void 0 ? void 0 : _primaryTableRef$valu.tableContentRef;
              return renderTitleWidthIcon([titleContent, sortIcon, filterIcon], p.col, p.colIndex, ellipsisTitle, attach, {
                classPrefix: classPrefix,
                ellipsisOverlayClassName: props.size !== "medium" ? sizeClassNames[props.size] : ""
              });
            };
            item.ellipsisTitle = false;
          }
          if ((_item$edit = item.edit) !== null && _item$edit !== void 0 && _item$edit.component) {
            var oldCell = item.cell;
            item.cell = function (h2, p) {
              var cellProps = _objectSpread$j(_objectSpread$j({}, p), {}, {
                oldCell: oldCell,
                tableBaseClass: tableBaseClass,
                cellEmptyContent: props.cellEmptyContent,
                onChange: props.onRowEdit,
                onValidate: props.onRowValidate,
                onRuleChange: onRuleChange
              });
              if (props.editableRowKeys) {
                var _errorListMap$value;
                var rowValue = get_1(p.row, props.rowKey || "id");
                cellProps.editable = editableKeysMap.value[rowValue] || false;
                var key = [rowValue, p.col.colKey].join("__");
                var errorList = (_errorListMap$value = errorListMap.value) === null || _errorListMap$value === void 0 ? void 0 : _errorListMap$value[key];
                errorList && (cellProps.errors = errorList);
              }
              if (props.editableCellState) {
                cellProps.readonly = !props.editableCellState(p);
              }
              return vue.createVNode(EditableCell, cellProps, context.slots);
            };
          }
          if ((_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
            item.children = getColumns(item.children);
          }
          if (!item.children || (_item$children3 = item.children) !== null && _item$children3 !== void 0 && _item$children3.length) {
            arr.push(item);
          }
        };
        for (var i = 0, len = columns2.length; i < len; i++) {
          var _ret = _loop(i);
          if (_ret === "continue") continue;
        }
        return arr;
      };
      var tColumns = vue.computed(function () {
        var cols = getColumns(columns.value);
        if (showExpandIconColumn.value) {
          cols.unshift(getExpandColumn());
        }
        return cols;
      });
      var onInnerPageChange = function onInnerPageChange(pageInfo, newData) {
        var _props$onPageChange, _props$onChange;
        (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props, pageInfo, newData);
        var changeParams = [{
          pagination: pageInfo
        }, {
          trigger: "pagination",
          currentData: newData
        }];
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call.apply(_props$onChange, [props].concat(changeParams));
      };
      return function () {
        var formatNode = function formatNode(api, renderInnerNode, condition, extra) {
          if (!condition) return props[api];
          var innerNode = renderInnerNode(vue.h);
          var propsNode = renderTNode(api);
          if (innerNode && !propsNode) return function () {
            return innerNode;
          };
          if (propsNode && !innerNode) return function () {
            return propsNode;
          };
          if (innerNode && propsNode) {
            return function () {
              return extra !== null && extra !== void 0 && extra.reverse ? vue.createVNode("div", null, [innerNode, propsNode]) : vue.createVNode("div", null, [propsNode, innerNode]);
            };
          }
          return null;
        };
        var isColumnController = !!(columnController.value && Object.keys(columnController.value).length);
        var placement = isColumnController ? columnController.value.placement || "top-right" : "";
        var isBottomController = isColumnController && (placement === null || placement === void 0 ? void 0 : placement.indexOf("bottom")) !== -1;
        var topContent = formatNode("topContent", renderColumnController, isColumnController && !isBottomController);
        var bottomContent = formatNode("bottomContent", renderColumnController, isBottomController, {
          reverse: true
        });
        var firstFullRow = formatNode("firstFullRow", renderFirstFilterRow, !hasEmptyCondition.value);
        var lastFullRow = formatNode("lastFullRow", renderAsyncLoading, !!props.asyncLoading);
        var baseTableProps2 = _objectSpread$j(_objectSpread$j({}, omit_1(props, OMIT_PROPS)), {}, {
          rowClassName: tRowClassNames.value,
          rowAttributes: tRowAttributes.value,
          columns: tColumns.value,
          topContent: topContent,
          bottomContent: bottomContent,
          firstFullRow: firstFullRow,
          lastFullRow: lastFullRow,
          onPageChange: onInnerPageChange,
          renderExpandedRow: showExpandedRow.value ? renderExpandedRow : void 0
        });
        if (props.expandOnRowClick) {
          baseTableProps2.onRowClick = onInnerExpandRowClick;
        }
        return vue.createVNode(_BaseTable, vue.mergeProps({
          "ref": primaryTableRef
        }, baseTableProps2, {
          "class": primaryTableClasses.value,
          "onLeafColumnsChange": setDragSortColumns
        }), context.slots);
      };
    }
  });

  var enhancedTableProps = {
    beforeDragSort: {
      type: Function
    },
    tree: {
      type: Object
    },
    treeExpandAndFoldIcon: {
      type: Function
    },
    onAbnormalDragSort: Function,
    onTreeExpandChange: Function
  };

  function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$i(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL = {
    code: 1001,
    reason: "The same level of rows can not be swapped."
  };
  var TableTreeStore = /*#__PURE__*/function () {
    function TableTreeStore() {
      _classCallCheck(this, TableTreeStore);
      _defineProperty$3(this, "treeDataMap", /* @__PURE__ */new Map());
      _defineProperty$3(this, "expandAllRowIndex", void 0);
      this.treeDataMap = /* @__PURE__ */new Map();
    }
    _createClass(TableTreeStore, [{
      key: "initialTreeStore",
      value: function initialTreeStore(dataSource, columns, keys) {
        var _this$treeDataMap;
        (_this$treeDataMap = this.treeDataMap) === null || _this$treeDataMap === void 0 ? void 0 : _this$treeDataMap.clear();
        this.initialTreeDataMap(this.treeDataMap, dataSource, columns[0], keys);
      }
    }, {
      key: "getAllUniqueKeys",
      value: function getAllUniqueKeys(data, keys) {
        var arr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        for (var i = 0, len = data.length; i < len; i++) {
          var item = data[i];
          arr.push(get_1(item, keys.rowKey));
          var children = get_1(item, keys.childrenKey);
          if (children !== null && children !== void 0 && children.length) {
            this.getAllUniqueKeys(children, keys, arr);
          }
        }
        return arr;
      }
    }, {
      key: "toggleExpandData",
      value: function toggleExpandData(p, dataSource, keys) {
        if (!p) {
          log.error("EnhancedTable", "the node you want to toggleExpand doest not exist in `data`");
          return dataSource;
        }
        var rowValue = get_1(p.row, keys.rowKey);
        if (rowValue === void 0) {
          log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
          return [];
        }
        var childrenNodes = get_1(p.row, keys.childrenKey);
        if (childrenNodes === true) return dataSource;
        var r = this.treeDataMap.get(rowValue);
        r.rowIndex = p.rowIndex;
        r.expanded = !r.expanded;
        this.treeDataMap.set(rowValue, r);
        return this.updateExpandRow(r, dataSource, keys);
      }
    }, {
      key: "updateExpandRow",
      value: function updateExpandRow(changeRow, dataSource, keys) {
        var row = changeRow.row,
          rowIndex = changeRow.rowIndex,
          expanded = changeRow.expanded;
        var treeDataMap = this.treeDataMap;
        var childrenNodes = get_1(row, keys.childrenKey);
        if (!row || !childrenNodes) return dataSource;
        if (expanded) {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          updateRowExpandLength(treeDataMap, row, childrenNodes.length, "expand", keys);
          dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));
        } else {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          var len = changeRow.expandChildrenLength || childrenNodes.length;
          updateRowExpandLength(treeDataMap, row, -1 * len, "fold", keys);
          dataSource.splice(rowIndex + 1, len);
        }
        updateRowIndex(treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: rowIndex + 1
        });
        return dataSource;
      }
    }, {
      key: "getData",
      value: function getData(key) {
        return this.treeDataMap.get(key);
      }
    }, {
      key: "updateData",
      value: function updateData(rowValue, newRowData, dataSource, keys) {
        var newRowValue = get_1(newRowData, keys.rowKey);
        var rowState = this.treeDataMap.get(rowValue);
        if (!rowState || rowState.rowIndex === -1) {
          updateRowData(dataSource, rowValue, newRowData, {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          return -1;
        }
        if (get_1(newRowData, keys.childrenKey) === true) {
          var oldChildren = get_1(rowState.row, keys.childrenKey);
          if (oldChildren !== null && oldChildren !== void 0 && oldChildren.length) {
            for (var i = 0, len = oldChildren.length; i < len; i++) {
              var rowValue2 = get_1(oldChildren[i], keys.rowKey);
              var state = this.treeDataMap.get(rowValue2);
              if (state) {
                this.treeDataMap["delete"](rowValue2);
              }
            }
          }
        }
        var currentRowIndex = rowState.rowIndex;
        rowState.row = newRowData;
        rowState.id = newRowValue;
        if (rowState.parent) {
          var siblings = get_1(rowState.parent.row, keys.childrenKey);
          var index = siblings.findIndex(function (item) {
            return get_1(item, keys.rowKey) === rowValue;
          });
          siblings[index] = newRowData;
        }
        this.treeDataMap.set(newRowValue, rowState);
        if (rowValue !== newRowValue) {
          this.treeDataMap["delete"](rowValue);
        }
        return currentRowIndex;
      }
    }, {
      key: "remove",
      value: function remove(key, dataSource, keys) {
        var r = this.treeDataMap.get(key);
        if (r && r.rowIndex >= 0) {
          var removeNumber = (r.expandChildrenLength || 0) + 1;
          dataSource.splice(r.rowIndex, removeNumber);
          if (r.parent) {
            var siblings = get_1(r.parent.row, keys.childrenKey);
            var index = siblings.findIndex(function (item) {
              return get_1(item, keys.rowKey) === key;
            });
            siblings.splice(index, 1);
            updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, "delete", keys);
          }
          this.treeDataMap["delete"](key);
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: r.rowIndex,
            rowKey: keys.rowKey,
            type: "remove"
          });
        } else {
          log.warn("EnhancedTable", "Do not remove this node, which is not appeared.");
        }
        return dataSource;
      }
    }, {
      key: "appendTo",
      value: function appendTo(rowValue, newData, dataSource, keys) {
        var state = this.treeDataMap.get(rowValue);
        if (!this.validateDataExist(state, rowValue)) return dataSource;
        var children = get_1(state.row, keys.childrenKey);
        var isShowNewNode = state.expanded || !(children !== null && children !== void 0 && children.length);
        var tmpData = newData instanceof Array ? newData : [newData];
        var newChildrenData = [];
        var firstNewChildrenIndex = -1;
        for (var i = 0, len = tmpData.length; i < len; i++) {
          var oneData = tmpData[i];
          var newRowValue = get_1(oneData, keys.rowKey);
          var mapState = this.treeDataMap.get(newRowValue);
          if (!this.validateDataDoubleExist(mapState, newRowValue)) {
            log.warn("Table", "Duplicated Data `".concat(newRowValue, "` has been removed."));
          } else {
            var rowIndex = isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + (i + 1) : -1;
            if (i === 0) {
              firstNewChildrenIndex = rowIndex;
            }
            var newState = {
              id: newRowValue,
              row: oneData,
              rowIndex: rowIndex,
              level: state.level + 1,
              expanded: false,
              expandChildrenLength: 0,
              disabled: false,
              path: _toConsumableArray(state.path),
              parent: state
            };
            newState.path = newState.path.concat(newState);
            newChildrenData.push(oneData);
            this.treeDataMap.set(newRowValue, newState);
          }
        }
        if (!newChildrenData.length) return dataSource;
        if (children !== null && children !== void 0 && children.length) {
          state.row[keys.childrenKey] = state.row[keys.childrenKey].concat(newChildrenData);
        } else {
          state.row[keys.childrenKey] = newChildrenData;
          state.expanded = true;
        }
        if (isShowNewNode) {
          dataSource.splice.apply(dataSource, [firstNewChildrenIndex, 0].concat(newChildrenData));
          var newChildrenCount = newChildrenData.length || 1;
          updateRowExpandLength(this.treeDataMap, state.row, newChildrenCount, "insert", {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: firstNewChildrenIndex + newChildrenData.length - 1,
            rowKey: keys.rowKey,
            type: "add",
            count: 1
          });
        }
        return dataSource;
      }
    }, {
      key: "appendToRoot",
      value: function appendToRoot(newData, dataSource, keys) {
        var newDataSource = dataSource.concat(newData);
        var tmpNewData = newData instanceof Array ? newData : [newData];
        var dataSourceLen = dataSource.length;
        for (var i = 0, len = tmpNewData.length; i < len; i++) {
          var rowValue = get_1(tmpNewData[i], keys.rowKey);
          if (!rowValue) {
            log.error("Table", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            continue;
          }
          var state = {
            id: rowValue,
            row: tmpNewData[i],
            rowIndex: dataSourceLen + i,
            level: 0,
            expanded: false,
            expandChildrenLength: 0,
            disabled: false
          };
          state.path = [state];
          this.treeDataMap.set(rowValue, state);
        }
        return newDataSource;
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(rowValue, newData, dataSource, keys) {
        return this.insert(rowValue, newData, dataSource, keys, "after");
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(rowValue, newData, dataSource, keys) {
        return this.insert(rowValue, newData, dataSource, keys, "before");
      }
    }, {
      key: "insert",
      value: function insert(rowValue, newData, dataSource, keys, type) {
        var state = this.treeDataMap.get(rowValue);
        if (!this.validateDataExist(state, rowValue)) return dataSource;
        var newRowValue = get_1(newData, keys.rowKey);
        var mapState = this.treeDataMap.get(newRowValue);
        if (!this.validateDataDoubleExist(mapState, newRowValue)) return dataSource;
        var rowIndex = type === "after" ? state.rowIndex + 1 : state.rowIndex;
        var newState = {
          id: newRowValue,
          row: newData,
          rowIndex: rowIndex,
          level: state.level,
          expanded: false,
          expandChildrenLength: 0,
          disabled: false,
          path: state.path.slice(0, -1),
          parent: state.parent
        };
        newState.path = newState.path.concat(newState);
        var dataIndex = type === "after" ? state.rowIndex + (state.expandChildrenLength + 1) : state.rowIndex;
        dataSource.splice(dataIndex, 0, newData);
        var distance = type === "after" ? 1 : 0;
        if (state.parent) {
          var childrenIndex = state.parent.row[keys.childrenKey].findIndex(function (t) {
            return rowValue === get_1(t, keys.rowKey);
          });
          state.parent.row[keys.childrenKey].splice(childrenIndex + distance, 0, newData);
          updateRowExpandLength(this.treeDataMap, state.parent.row, 1, "insert", keys);
        }
        this.treeDataMap.set(newRowValue, newState);
        updateRowIndex(this.treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: state.rowIndex + 1,
          type: "add"
        });
        return dataSource;
      }
    }, {
      key: "swapData",
      value: function swapData(dataSource, params, keys) {
        var startIndex = params.currentIndex;
        var endIndex = params.targetIndex;
        if (startIndex === endIndex) return {
          dataSource: dataSource,
          result: true
        };
        var startRowValue = get_1(params.current, keys.rowKey);
        var endRowValue = get_1(params.target, keys.rowKey);
        var startState = this.treeDataMap.get(startRowValue);
        var endState = this.treeDataMap.get(endRowValue);
        if (startState.level !== endState.level) {
          return {
            dataSource: dataSource,
            result: false,
            code: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.code,
            reason: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.reason
          };
        }
        var startLastIndex = startIndex + startState.expandChildrenLength + 1;
        var endLastIndex = endIndex + endState.expandChildrenLength + 1;
        var startRowList = dataSource.slice(startIndex, startLastIndex);
        var endRowList = dataSource.slice(endIndex, endLastIndex);
        if (startIndex > endIndex) {
          var middleRowList = dataSource.slice(endLastIndex, startIndex);
          var allSwapList = startRowList.concat(endRowList, middleRowList);
          dataSource.splice(endIndex, allSwapList.length);
          dataSource.splice.apply(dataSource, [endIndex, 0].concat(_toConsumableArray(allSwapList)));
          updateRowIndex(this.treeDataMap, dataSource, {
            rowKey: keys.rowKey,
            minRowIndex: endIndex,
            maxRowIndex: startLastIndex
          });
        } else {
          var _middleRowList = dataSource.slice(startLastIndex, endIndex);
          var _allSwapList = _middleRowList.concat(endRowList, startRowList);
          dataSource.splice(startIndex, _allSwapList.length);
          dataSource.splice.apply(dataSource, [startIndex, 0].concat(_toConsumableArray(_allSwapList)));
          updateRowIndex(this.treeDataMap, dataSource, {
            rowKey: keys.rowKey,
            minRowIndex: startIndex,
            maxRowIndex: endLastIndex
          });
        }
        if (startState.parent) {
          var children = startState.parent.row[keys.childrenKey];
          var count = 0;
          var targetIndex = -1;
          var currentIndex = -1;
          for (var i = 0, len = children.length; i < len; i++) {
            if (get_1(children[i], keys.rowKey) === startRowValue) {
              targetIndex = i;
              count += 1;
            }
            if (get_1(children[i], keys.rowKey) === endRowValue) {
              currentIndex = i;
              count += 1;
            }
            if (count >= 2) break;
          }
          children[targetIndex] = params.target;
          children[currentIndex] = params.current;
        }
        return {
          dataSource: dataSource,
          result: true
        };
      }
    }, {
      key: "expandAll",
      value: function expandAll(dataSource, keys) {
        var _this = this;
        this.expandAllRowIndex = 0;
        var expandLoop = function expandLoop(dataSource2, keys2) {
          var newData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          var parentExpanded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
          var parent = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
          for (var i = 0, len = dataSource2.length; i < len; i++) {
            var item = dataSource2[i];
            var rowValue = get_1(item, keys2.rowKey);
            var state = _this.treeDataMap.get(rowValue);
            var children = get_1(item, keys2.childrenKey);
            var originalExpanded = state.expanded;
            state.rowIndex = _this.expandAllRowIndex;
            if (children !== true && children !== null && children !== void 0 && children.length) {
              state.expanded = true;
            }
            state.expandChildrenLength = (children === null || children === void 0 ? void 0 : children.length) || 0;
            _this.expandAllRowIndex += 1;
            if (!parentExpanded) {
              newData.push(item);
            }
            _this.treeDataMap.set(rowValue, state);
            if (children !== null && children !== void 0 && children.length && !originalExpanded) {
              var tmpParent = parent;
              while ((_tmpParent = tmpParent) !== null && _tmpParent !== void 0 && _tmpParent.row) {
                var _tmpParent;
                tmpParent.expandChildrenLength += children.length;
                _this.treeDataMap.set(tmpParent.id, tmpParent);
                tmpParent = tmpParent.parent;
              }
              expandLoop(children, keys2, newData, originalExpanded, state);
            }
          }
          return newData;
        };
        return expandLoop(dataSource, keys);
      }
    }, {
      key: "foldAll",
      value: function foldAll(dataSource, keys) {
        var newData = [];
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);
          var state = this.treeDataMap.get(rowValue);
          state.rowIndex = state.level === 0 ? i : -1;
          state.expanded = false;
          state.expandChildrenLength = 0;
          if (state.level === 0) {
            newData.push(item);
          }
          var children = get_1(item, keys.childrenKey);
          if (children !== null && children !== void 0 && children.length) {
            this.foldAll(children, keys);
          }
        }
        return newData;
      }
    }, {
      key: "getTreeNode",
      value: function getTreeNode(dataSource, keys) {
        var treeData = [];
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);
          var state = this.treeDataMap.get(rowValue);
          if (state.level === 0) {
            treeData.push(item);
          }
        }
        return treeData;
      }
    }, {
      key: "getTreeExpandedRow",
      value: function getTreeExpandedRow(dataSource, keys) {
        var _this2 = this;
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "data";
        var arr = [];
        dataSource.forEach(function (item) {
          var rowValue = get_1(item, keys.rowKey);
          var rowState = _this2.treeDataMap.get(rowValue);
          if (!rowState.expanded) return;
          if (type === "unique") {
            arr.push(rowValue);
          } else if (type === "data") {
            arr.push(item);
          } else {
            arr.push(rowState);
          }
        });
        return arr;
      }
    }, {
      key: "initialTreeDataMap",
      value: function initialTreeDataMap(treeDataMap, dataSource, column, keys) {
        var level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var parent = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);
          if (rowValue === void 0) {
            log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            return;
          }
          var children = get_1(item, keys.childrenKey);
          var state = {
            id: rowValue,
            row: item,
            rowIndex: level === 0 ? i : -1,
            level: level,
            expanded: false,
            expandChildrenLength: 0,
            disabled: isRowSelectedDisabled(column, item, i),
            parent: parent
          };
          state.path = parent ? parent.path.concat(state) : [state];
          treeDataMap.set(rowValue, state);
          if (children !== null && children !== void 0 && children.length) {
            this.initialTreeDataMap(treeDataMap, children, column, keys, level + 1, state);
          }
        }
      }
    }, {
      key: "updateDisabledState",
      value: function updateDisabledState(dataSource, column, keys) {
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);
          if (rowValue === void 0) {
            log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            return;
          }
          var state = this.treeDataMap.get(rowValue);
          state.disabled = isRowSelectedDisabled(column, item, i);
          this.treeDataMap.set(rowValue, state);
          var children = get_1(item, keys.childrenKey);
          if (children !== null && children !== void 0 && children.length) {
            this.updateDisabledState(children, column, keys);
          }
        }
      }
    }, {
      key: "validateDataExist",
      value: function validateDataExist(state, rowValue) {
        if (!state) {
          log.warn("EnhancedTable", "".concat(rowValue, " does not exist."));
          return false;
        }
        return true;
      }
    }, {
      key: "validateDataDoubleExist",
      value: function validateDataDoubleExist(state, rowValue) {
        if (state) {
          log.warn("EnhancedTable", "Duplicated Key. ".concat(rowValue, " already exists."));
          return false;
        }
        return true;
      }
    }]);
    return TableTreeStore;
  }();
  function updateRowExpandLength(treeDataMap, row, distance, type, keys) {
    var tmp = row;
    while (tmp) {
      var _state$parent;
      var state = treeDataMap.get(get_1(tmp, keys.rowKey));
      var expandLen = (state.expandChildrenLength || 0) + distance;
      state.expandChildrenLength = Math.max(0, expandLen);
      tmp = state === null || state === void 0 ? void 0 : (_state$parent = state.parent) === null || _state$parent === void 0 ? void 0 : _state$parent.row;
    }
    if (type === "fold") {
      clearRowExpandLength(treeDataMap, row, keys);
    }
  }
  function clearRowExpandLength(treeDataMap, row, keys) {
    var children = get_1(row, keys.childrenKey);
    if (children !== null && children !== void 0 && children.length) {
      children.forEach(function (item) {
        var state = treeDataMap.get(get_1(item, keys.rowKey));
        if (!state) return;
        state.expandChildrenLength = 0;
        clearRowExpandLength(treeDataMap, state.row, keys);
      });
    }
  }
  function updateChildrenRowState(treeDataMap, rowState, expanded, keys) {
    var row = rowState.row,
      rowIndex = rowState.rowIndex;
    var childrenNodes = get_1(row, keys.childrenKey);
    childrenNodes.forEach(function (item, kidRowIndex) {
      var rowValue = get_1(item, keys.rowKey);
      var index = expanded ? rowIndex + 1 + kidRowIndex : -1;
      var curState = treeDataMap.get(rowValue);
      var newState = _objectSpread$i(_objectSpread$i({}, curState), {}, {
        row: item,
        rowIndex: index,
        expanded: false,
        parent: rowState
      });
      treeDataMap.set(rowValue, newState);
      if (!expanded) {
        var children = get_1(item, keys.childrenKey);
        if (children !== null && children !== void 0 && children.length) {
          updateChildrenRowState(treeDataMap, _objectSpread$i(_objectSpread$i({}, newState), {}, {
            rowIndex: -1,
            expanded: false
          }), expanded, keys);
        }
      }
    });
  }
  function updateRowData(data, key, newData, keys) {
    for (var i = 0, len = data.length; i < len; i++) {
      var item = data[i];
      if (get_1(item, keys.rowKey) === key) {
        data[i] = newData;
        return;
      }
      var children = get_1(item, keys.childrenKey) || [];
      if (children !== null && children !== void 0 && children.length) {
        updateRowData(children, key, newData, keys);
      }
    }
  }
  function updateRowIndex(treeDataMap, dataSource, extra) {
    var start = extra.minRowIndex || 0;
    var end = extra.maxRowIndex || dataSource.length;
    for (var rowIndex = start; rowIndex < end; rowIndex++) {
      var item = dataSource[rowIndex];
      var state = treeDataMap.get(get_1(item, extra.rowKey));
      if (!state) {
        log.warn("Table", "tree map went wrong");
      }
      state.rowIndex = rowIndex + ((extra === null || extra === void 0 ? void 0 : extra.count) || 1) - 1;
    }
  }

  function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$h(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useTreeData(props, context) {
    var _toRefs = vue.toRefs(props),
      data = _toRefs.data,
      columns = _toRefs.columns;
    var _useConfig = useConfig("table"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        AddRectangleIcon: addRectangle,
        MinusRectangleIcon: minusRectangle
      }),
      AddRectangleIcon = _useGlobalIcon.AddRectangleIcon,
      MinusRectangleIcon = _useGlobalIcon.MinusRectangleIcon;
    var store = vue.ref(new TableTreeStore());
    var treeNodeCol = vue.ref();
    var dataSource = vue.ref([]);
    var _useClassName = useClassName(),
      tableTreeClasses = _useClassName.tableTreeClasses;
    var renderTNode = useTNodeDefault();
    var rowDataKeys = vue.computed(function () {
      var _props$tree;
      return {
        rowKey: props.rowKey || "id",
        childrenKey: ((_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
      };
    });
    var checkedColumn = vue.computed(function () {
      return columns.value.find(function (col) {
        return col.colKey === "row-select";
      });
    });
    vue.watch(checkedColumn, function (column) {
      if (!store.value) return;
      store.value.updateDisabledState(dataSource.value, column, rowDataKeys.value);
    });
    var foldIcon = function foldIcon(context2) {
      var params = _objectSpread$h(_objectSpread$h({}, context2), {}, {
        type: "fold"
      });
      var defaultFoldIcon = t(globalConfig.value.treeExpandAndFoldIcon, vue.h, params) || vue.createVNode(MinusRectangleIcon, null, null);
      return renderTNode("treeExpandAndFoldIcon", {
        defaultNode: defaultFoldIcon,
        params: params
      });
    };
    var expandIcon = function expandIcon(context2) {
      var params = _objectSpread$h(_objectSpread$h({}, context2), {}, {
        type: "expand"
      });
      var defaultExpandIcon = t(globalConfig.value.treeExpandAndFoldIcon, vue.h, params) || vue.createVNode(AddRectangleIcon, null, null);
      return renderTNode("treeExpandAndFoldIcon", {
        defaultNode: defaultExpandIcon,
        params: params
      });
    };
    var uniqueKeys = vue.computed(function () {
      var _store$value, _store$value$getAllUn;
      return ((_store$value = store.value) === null || _store$value === void 0 ? void 0 : (_store$value$getAllUn = _store$value.getAllUniqueKeys(data.value, rowDataKeys.value)) === null || _store$value$getAllUn === void 0 ? void 0 : _store$value$getAllUn.join()) || "";
    });
    vue.watch([uniqueKeys], function () {
      if (!data.value) return;
      if (!props.tree) {
        dataSource.value = data.value;
        return;
      }
      resetData(data.value);
    }, {
      immediate: true
    });
    vue.onUnmounted(function () {
      var _store$value$treeData;
      if (!props.tree) return;
      (_store$value$treeData = store.value.treeDataMap) === null || _store$value$treeData === void 0 ? void 0 : _store$value$treeData.clear();
      store.value = null;
    });
    vue.watch(function () {
      var _props$tree2;
      return [columns, (_props$tree2 = props.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.treeNodeColumnIndex];
    }, function () {
      treeNodeCol.value = getTreeNodeColumnCol();
    }, {
      immediate: true
    });
    function resetData(data2) {
      var _props$tree3;
      var newVal = cloneDeep_1(data2);
      store.value.initialTreeStore(newVal, props.columns, rowDataKeys.value);
      if ((_props$tree3 = props.tree) !== null && _props$tree3 !== void 0 && _props$tree3.defaultExpandAll) {
        newVal = store.value.expandAll(newVal, rowDataKeys.value);
      }
      dataSource.value = newVal;
    }
    function getTreeNodeStyle(level) {
      var _props$tree4, _props$tree5;
      if (level === void 0) return;
      var indent = ((_props$tree4 = props.tree) === null || _props$tree4 === void 0 ? void 0 : _props$tree4.indent) === void 0 ? 24 : (_props$tree5 = props.tree) === null || _props$tree5 === void 0 ? void 0 : _props$tree5.indent;
      return indent ? {
        paddingLeft: "".concat(level * indent || 1, "px")
      } : {};
    }
    function toggleExpandData(p, trigger) {
      var _store$value2, _store$value2$treeDat, _props$onTreeExpandCh;
      dataSource.value = _toConsumableArray(store.value.toggleExpandData(p, dataSource.value, rowDataKeys.value));
      var rowValue = get_1(p.row, rowDataKeys.value.rowKey);
      var rowState = (_store$value2 = store.value) === null || _store$value2 === void 0 ? void 0 : (_store$value2$treeDat = _store$value2.treeDataMap) === null || _store$value2$treeDat === void 0 ? void 0 : _store$value2$treeDat.get(rowValue);
      (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 ? void 0 : _props$onTreeExpandCh.call(props, {
        row: p.row,
        rowIndex: p.rowIndex,
        rowState: rowState,
        trigger: trigger
      });
    }
    function getTreeNodeColumnCol() {
      var _props$tree6;
      var columns2 = props.columns;
      var treeNodeColumnIndex = ((_props$tree6 = props.tree) === null || _props$tree6 === void 0 ? void 0 : _props$tree6.treeNodeColumnIndex) || 0;
      while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
        var _columns2$treeNodeCol, _columns2$treeNodeCol2;
        treeNodeColumnIndex += 1;
      }
      return columns2[treeNodeColumnIndex];
    }
    function formatTreeColumn(col) {
      if (!props.tree || col.colKey !== treeNodeCol.value.colKey) return col;
      var newCol = _objectSpread$h({}, treeNodeCol.value);
      newCol.cell = function (h2, p) {
        var cellInfo = renderCell(_objectSpread$h(_objectSpread$h({}, p), {}, {
          col: _objectSpread$h({}, treeNodeCol.value)
        }), context.slots, {
          cellEmptyContent: props.cellEmptyContent
        });
        var currentState = store.value.treeDataMap.get(get_1(p.row, rowDataKeys.value.rowKey));
        var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);
        var classes = _defineProperty$3({}, tableTreeClasses.inlineCol, !!col.ellipsis);
        var childrenNodes = get_1(p.row, rowDataKeys.value.childrenKey);
        if (childrenNodes && childrenNodes instanceof Array || childrenNodes === true) {
          var _store$value$treeData2;
          var iconNode = (_store$value$treeData2 = store.value.treeDataMap.get(get_1(p.row, rowDataKeys.value.rowKey))) !== null && _store$value$treeData2 !== void 0 && _store$value$treeData2.expanded ? foldIcon(p) : expandIcon(p);
          return vue.createVNode("div", {
            "class": [tableTreeClasses.col, classes],
            "style": colStyle
          }, [!!(childrenNodes.length || childrenNodes === true) && vue.createVNode("span", {
            "class": tableTreeClasses.icon,
            "onClick": function onClick() {
              return toggleExpandData(p, "expand-fold-icon");
            }
          }, [iconNode]), cellInfo]);
        }
        return vue.createVNode("div", {
          "style": colStyle,
          "class": [classes, tableTreeClasses.leafNode]
        }, [vue.createVNode("span", {
          "class": tableTreeClasses.icon
        }, null), cellInfo]);
      };
      if (newCol.ellipsis === true) {
        newCol.ellipsis = function (h2, p) {
          return renderCell(_objectSpread$h(_objectSpread$h({}, p), {}, {
            col: _objectSpread$h({}, treeNodeCol.value)
          }), context.slots);
        };
      }
      return newCol;
    }
    function setData(key, newRowData) {
      var rowIndex = store.value.updateData(key, newRowData, dataSource.value, rowDataKeys.value);
      var newData = _toConsumableArray(dataSource.value);
      newData[rowIndex] = newRowData;
      dataSource.value = newData;
    }
    function getData(key) {
      return store.value.getData(key);
    }
    function remove(key) {
      dataSource.value = _toConsumableArray(store.value.remove(key, dataSource.value, rowDataKeys.value));
    }
    function appendTo() {
      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var newData = arguments.length > 1 ? arguments[1] : undefined;
      if (!key) {
        dataSource.value = store.value.appendToRoot(newData, dataSource.value, rowDataKeys.value);
        return;
      }
      dataSource.value = _toConsumableArray(store.value.appendTo(key, newData, dataSource.value, rowDataKeys.value));
    }
    function insertAfter(rowValue, newData) {
      dataSource.value = _toConsumableArray(store.value.insertAfter(rowValue, newData, dataSource.value, rowDataKeys.value));
    }
    function insertBefore(rowValue, newData) {
      dataSource.value = _toConsumableArray(store.value.insertBefore(rowValue, newData, dataSource.value, rowDataKeys.value));
    }
    function expandAll() {
      dataSource.value = _toConsumableArray(store.value.expandAll(dataSource.value, rowDataKeys.value));
    }
    function foldAll() {
      dataSource.value = _toConsumableArray(store.value.foldAll(dataSource.value, rowDataKeys.value));
    }
    function swapData(params) {
      var r = store.value.swapData(dataSource.value, params, rowDataKeys.value);
      if (r.result) {
        dataSource.value = _toConsumableArray(r.dataSource);
      } else {
        var _props$onAbnormalDrag;
        var params2 = {
          code: r.code,
          reason: r.reason
        };
        (_props$onAbnormalDrag = props.onAbnormalDragSort) === null || _props$onAbnormalDrag === void 0 ? void 0 : _props$onAbnormalDrag.call(props, params2);
      }
    }
    function getTreeNode() {
      return store.value.getTreeNode(dataSource.value, rowDataKeys.value);
    }
    function getTreeExpandedRow() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "data";
      return store.value.getTreeExpandedRow(dataSource.value, rowDataKeys.value, type);
    }
    return {
      store: store,
      rowDataKeys: rowDataKeys,
      dataSource: dataSource,
      swapData: swapData,
      setData: setData,
      getData: getData,
      remove: remove,
      appendTo: appendTo,
      insertAfter: insertAfter,
      insertBefore: insertBefore,
      formatTreeColumn: formatTreeColumn,
      toggleExpandData: toggleExpandData,
      expandAll: expandAll,
      foldAll: foldAll,
      getTreeNode: getTreeNode,
      resetData: resetData,
      getTreeExpandedRow: getTreeExpandedRow
    };
  }

  function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$g(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var childrenMap = /* @__PURE__ */new Map();
  function getChildrenData(treeDataMap, data, keys, r) {
    if (childrenMap.get(data)) return childrenMap.get(data);
    var result = r || {
      allChildren: [],
      allChildrenKeys: [],
      leafNodeKeys: []
    };
    var children = get_1(data, keys.childrenKey);
    if (!children || !children.length) return result;
    var selectableChildren = children.filter(function (item) {
      var _treeDataMap$get;
      return !((_treeDataMap$get = treeDataMap.get(get_1(item, keys.rowKey))) !== null && _treeDataMap$get !== void 0 && _treeDataMap$get.disabled);
    });
    result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(selectableChildren)));
    for (var i = 0, len = children.length; i < len; i++) {
      var tItem = children[i];
      var c = get_1(tItem, keys.childrenKey);
      if (c !== null && c !== void 0 && c.length) {
        var nextLevelData = getChildrenData(treeDataMap, tItem, keys, result);
        result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(nextLevelData.allChildren)));
      }
    }
    for (var _i = 0, _len = result.allChildren.length; _i < _len; _i++) {
      var item = result.allChildren[_i];
      var children2 = get_1(item, keys.childrenKey);
      var rowValue = get_1(item, keys.rowKey);
      result.allChildrenKeys.push(rowValue);
      if (!children2 || !children2.length) {
        result.leafNodeKeys.push(rowValue);
      }
    }
    result.allChildrenKeys = _toConsumableArray(new Set(result.allChildrenKeys));
    result.leafNodeKeys = _toConsumableArray(new Set(result.leafNodeKeys));
    return result;
  }
  function removeChildrenKeys(p, r) {
    var selectedRowKeys = p.selectedRowKeys,
      removeKeys = p.removeKeys;
    var result = r || {
      data: [],
      keys: []
    };
    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];
      if (!removeKeys.includes(key)) {
        result.keys.push(key);
      }
    }
    return result;
  }
  function getRowDataByKeys(p) {
    var treeDataMap = p.treeDataMap,
      selectedRowKeys = p.selectedRowKeys;
    var result = [];
    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];
      result.push(treeDataMap.get(key));
    }
    return result;
  }
  function useTreeSelect(props, treeDataMap) {
    var _toRefs = vue.toRefs(props),
      selectedRowKeys = _toRefs.selectedRowKeys,
      tree = _toRefs.tree,
      data = _toRefs.data,
      indeterminateSelectedRowKeys = _toRefs.indeterminateSelectedRowKeys;
    var tIndeterminateSelectedRowKeys = vue.ref([]);
    var _useDefaultValue = useDefaultValue(selectedRowKeys, props.defaultSelectedRowKeys || [], props.onSelectChange, "selectedRowKeys"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tSelectedRowKeys = _useDefaultValue2[0],
      setTSelectedRowKeys = _useDefaultValue2[1];
    var rowDataKeys = vue.computed(function () {
      var _props$tree;
      return {
        rowKey: props.rowKey || "id",
        childrenKey: ((_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
      };
    });
    vue.watch([tree, treeDataMap, data, tSelectedRowKeys], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        tree2 = _ref2[0],
        treeDataMap2 = _ref2[1];
      if (!tree2 || !treeDataMap2.size || tree2.checkStrictly) return;
      updateIndeterminateState();
    });
    function updateIndeterminateState() {
      if (!tree.value || tree.value.checkStrictly) return;
      if (!tSelectedRowKeys.value.length) {
        tIndeterminateSelectedRowKeys.value = [];
        return;
      }
      var keys = [];
      var parentMap = {};
      for (var i = 0, len = tSelectedRowKeys.value.length; i < len; i++) {
        var rowValue = tSelectedRowKeys.value[i];
        var state = treeDataMap.value.get(rowValue);
        var children = get_1(state.row, rowDataKeys.value.childrenKey);
        if (!children || !children.length) {
          var parentTmp = state.parent;
          while (parentTmp) {
            if (!parentMap[parentTmp.id]) {
              parentMap[parentTmp.id] = [];
            }
            parentMap[parentTmp.id].push(state.row);
            var checkedLength = parentMap[parentTmp.id].length;
            var _getChildrenData = getChildrenData(treeDataMap.value, parentTmp.row, rowDataKeys.value),
              allChildrenKeys = _getChildrenData.allChildrenKeys;
            var parentTmpIndex = keys.indexOf(parentTmp.id);
            var selectedIndex = tSelectedRowKeys.value.indexOf(parentTmp.id);
            if (checkedLength > 0 && checkedLength < allChildrenKeys.length && selectedIndex === -1) {
              parentTmpIndex === -1 && keys.push(parentTmp.id);
            } else {
              parentTmpIndex !== -1 && keys.splice(parentTmpIndex, 1);
            }
            parentTmp = parentTmp.parent;
          }
        }
      }
      tIndeterminateSelectedRowKeys.value = keys;
    }
    function updateParentCheckedState(selectedKeys, currentRowKey, type) {
      if (!tree.value || tree.value.checkStrictly) return;
      var keys = _toConsumableArray(selectedKeys);
      var state = treeDataMap.value.get(currentRowKey);
      var parentTmp = state.parent;
      while (parentTmp) {
        var _getChildrenData2 = getChildrenData(treeDataMap.value, parentTmp.row, rowDataKeys.value),
          leafNodeKeys = _getChildrenData2.leafNodeKeys;
        var checkedChildrenKeys = intersection_1(leafNodeKeys, selectedKeys);
        var selectedIndex = keys.indexOf(parentTmp.id);
        if (type === "uncheck") {
          selectedIndex !== -1 && keys.splice(selectedIndex, 1);
        } else if (checkedChildrenKeys.length === leafNodeKeys.length) {
          selectedIndex === -1 && keys.push(parentTmp.id);
        }
        parentTmp = parentTmp.parent;
      }
      return keys;
    }
    function onInnerSelectChange(rowKeys, extraData) {
      if (!tree.value || tree.value.checkStrictly) {
        setTSelectedRowKeys(rowKeys, extraData);
        return;
      }
      if (extraData.currentRowKey === "CHECK_ALL_BOX") {
        handleSelectAll(extraData);
      } else {
        handleSelect(rowKeys, extraData);
      }
    }
    function handleSelectAll(extraData) {
      var newRowKeys = [];
      var newRowData = [];
      if (extraData.type === "check") {
        var arr = _toConsumableArray(treeDataMap.value.values());
        for (var i = 0, len = arr.length; i < len; i++) {
          var item = arr[i];
          if (!item.disabled) {
            newRowData.push(item.row);
            newRowKeys.push(get_1(item.row, rowDataKeys.value.rowKey));
          }
        }
      }
      var newExtraData = _objectSpread$g(_objectSpread$g({}, extraData), {}, {
        selectedRowData: newRowData || []
      });
      setTSelectedRowKeys(newRowKeys, newExtraData);
    }
    function handleSelect(rowKeys, extraData) {
      var _props$tree2;
      var newRowKeys = _toConsumableArray(rowKeys);
      if (((_props$tree2 = props.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.checkStrictly) === false) {
        if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "check") {
          var result = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value);
          var allChildrenKeys = result.allChildrenKeys;
          childrenMap.set(extraData.currentRowData, result);
          newRowKeys = _toConsumableArray(new Set(newRowKeys.concat(allChildrenKeys)));
        } else if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "uncheck") {
          var children = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value);
          var _result = removeChildrenKeys({
            selectedRowKeys: rowKeys,
            removeKeys: children.allChildrenKeys
          });
          newRowKeys = _result.keys;
        }
      }
      newRowKeys = updateParentCheckedState(newRowKeys, extraData.currentRowKey, extraData.type);
      var newRowData = getRowDataByKeys({
        treeDataMap: treeDataMap.value,
        selectedRowKeys: newRowKeys
      });
      var newExtraData = _objectSpread$g(_objectSpread$g({}, extraData), {}, {
        selectedRowData: newRowData
      });
      setTSelectedRowKeys(newRowKeys, newExtraData);
    }
    return {
      tIndeterminateSelectedRowKeys: indeterminateSelectedRowKeys.value ? indeterminateSelectedRowKeys : tIndeterminateSelectedRowKeys,
      onInnerSelectChange: onInnerSelectChange
    };
  }

  var _excluded$1 = ["store", "dataSource", "formatTreeColumn", "swapData"];
  function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$f(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _EnhancedTable = vue.defineComponent({
    name: "TEnhancedTable",
    props: _objectSpread$f(_objectSpread$f(_objectSpread$f({}, baseTableProps), primaryTableProps), enhancedTableProps),
    setup: function setup(props, context) {
      var primaryTableRef = vue.ref(null);
      var _useTreeData = useTreeData(props, context),
        store = _useTreeData.store,
        dataSource = _useTreeData.dataSource,
        formatTreeColumn = _useTreeData.formatTreeColumn,
        swapData = _useTreeData.swapData,
        treeInstanceFunctions = _objectWithoutProperties$1(_useTreeData, _excluded$1);
      var treeDataMap = vue.ref(store.value.treeDataMap);
      var _useTreeSelect = useTreeSelect(props, treeDataMap),
        tIndeterminateSelectedRowKeys = _useTreeSelect.tIndeterminateSelectedRowKeys,
        onInnerSelectChange = _useTreeSelect.onInnerSelectChange;
      var getColumns = function getColumns(columns) {
        var arr = [];
        for (var i = 0, len = columns.length; i < len; i++) {
          var _item$children, _item$children2;
          var item = _objectSpread$f({}, columns[i]);
          item = formatTreeColumn(item);
          if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
            item.children = getColumns(item.children);
          }
          if (!item.children || (_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
            arr.push(item);
          }
        }
        return arr;
      };
      var tColumns = vue.computed(function () {
        var isTreeData = !props.tree || !Object.keys(props.tree).length;
        return isTreeData ? props.columns : getColumns(props.columns);
      });
      var onDragSortChange = function onDragSortChange(params) {
        var _props$onDragSort;
        if (props.beforeDragSort && !props.beforeDragSort(params)) return;
        swapData({
          current: params.current,
          target: params.target,
          currentIndex: params.currentIndex,
          targetIndex: params.targetIndex
        });
        (_props$onDragSort = props.onDragSort) === null || _props$onDragSort === void 0 ? void 0 : _props$onDragSort.call(props, params);
      };
      context.expose(_objectSpread$f(_objectSpread$f({
        store: store.value,
        dataSource: dataSource.value
      }, treeInstanceFunctions), {}, {
        validateRowData: function validateRowData(rowValue) {
          primaryTableRef.value.validateRowData(rowValue);
        },
        validateTableData: function validateTableData() {
          primaryTableRef.value.validateTableData();
        },
        clearValidateData: function clearValidateData() {
          primaryTableRef.value.clearValidateData();
        },
        refreshTable: function refreshTable() {
          primaryTableRef.value.refreshTable();
        }
      }));
      return function () {
        var _getCurrentInstance = vue.getCurrentInstance(),
          vnode = _getCurrentInstance.vnode;
        var enhancedProps = _objectSpread$f(_objectSpread$f({}, vnode.props), {}, {
          data: dataSource.value,
          columns: tColumns.value,
          indeterminateSelectedRowKeys: tIndeterminateSelectedRowKeys.value,
          disableDataPage: Boolean(props.tree && Object.keys(props.tree).length),
          onSelectChange: onInnerSelectChange,
          onDragSort: onDragSortChange
        });
        return vue.createVNode(_PrimaryTable, vue.mergeProps(enhancedProps, {
          "ref": primaryTableRef
        }), context.slots);
      };
    }
  });

  var BaseTable = withInstall(_BaseTable);
  var PrimaryTable = withInstall(_PrimaryTable);
  var EnhancedTable = withInstall(_EnhancedTable);
  var table = cloneDeep_1(_PrimaryTable);
  var Table = withInstall(table, "TTable");

  var TimeLineProps = {
    labelAlign: {
      type: String,
      "default": "left",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "alternate", "top", "bottom"].includes(val);
      }
    },
    layout: {
      type: String,
      "default": "vertical",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    mode: {
      type: String,
      "default": "alternate",
      validator: function validator(val) {
        if (!val) return true;
        return ["alternate", "same"].includes(val);
      }
    },
    reverse: Boolean,
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "dot"].includes(val);
      }
    }
  };

  var DefaultAlign = {
    vertical: ["left", "right"],
    horizontal: ["top", "bottom"]
  };
  var TimelineInjectKey = Symbol("timeLineProvide");

  var TimeLineItemProps = {
    content: {
      type: [String, Function]
    },
    dot: {
      type: Function
    },
    dotColor: {
      type: String,
      "default": "default"
    },
    label: {
      type: [String, Function]
    },
    labelAlign: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top", "bottom"].includes(val);
      }
    },
    loading: Boolean
  };

  function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$e(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DefaultTheme = ["default", "primary", "success", "warning", "error"];
  var _TimelineItem = vue.defineComponent({
    name: "TTimelineItem",
    props: _objectSpread$e(_objectSpread$e({}, TimeLineItemProps), {}, {
      index: {
        type: Number
      }
    }),
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("timeline-item");
      var TimelineProvider = vue.inject(TimelineInjectKey);
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var getPositionClassName = function getPositionClassName(index) {
        var _TimelineProvider$val = TimelineProvider.value,
          layout = _TimelineProvider$val.layout,
          renderAlign = _TimelineProvider$val.renderAlign;
        var left = layout === "horizontal" ? "top" : "left";
        var right = layout === "horizontal" ? "bottom" : "right";
        if (renderAlign === "alternate") {
          return props.labelAlign || index % 2 === 0 ? "".concat(COMPONENT_NAME.value, "-").concat(left) : "".concat(COMPONENT_NAME.value, "-").concat(right);
        }
        if (renderAlign === "left" || renderAlign === "top") {
          return "".concat(COMPONENT_NAME.value, "-").concat(left);
        }
        if (renderAlign === "right" || renderAlign === "bottom") {
          return "".concat(COMPONENT_NAME.value, "-").concat(right);
        }
        return "";
      };
      return function () {
        var _ref, _ref2;
        var _TimelineProvider$val2 = TimelineProvider.value,
          mode = _TimelineProvider$val2.mode,
          theme = _TimelineProvider$val2.theme,
          itemsStatus = _TimelineProvider$val2.itemsStatus,
          reverse = _TimelineProvider$val2.reverse;
        var label = props.label,
          loading = props.loading,
          dotColor = props.dotColor,
          index = props.index;
        var dotElement = renderTNodeJSX("dot");
        if (dotElement) {
          dotElement = vue.h(renderTNodeJSX("dot"), {
            "class": "".concat(COMPONENT_NAME.value, "__dot-content")
          });
        }
        return vue.createVNode("li", {
          "class": ["".concat(COMPONENT_NAME.value), "".concat(getPositionClassName(props.index))]
        }, [mode === "alternate" && label && vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__label"), "".concat(COMPONENT_NAME.value, "__label--").concat(mode)]
        }, [label]), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__wrapper")
        }, [vue.createVNode("div", {
          "class": (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "__dot"), true), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "__dot--custom"), !!dotElement || !dotElement && loading), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "__dot--").concat(dotColor), DefaultTheme.includes(dotColor)), _ref),
          "style": {
            borderColor: !DefaultTheme.includes(dotColor) && dotColor
          }
        }, [!dotElement && loading && vue.createVNode(Loading, {
          "size": "12px",
          "class": "".concat(COMPONENT_NAME.value, "__dot-content")
        }, null), dotElement]), vue.createVNode("div", {
          "class": (_ref2 = {}, _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "__tail"), true), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "__tail--theme-").concat(theme), true), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "__tail--status-").concat(itemsStatus[index]), reverse), _ref2)
        }, null)]), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [renderContent("default", "content"), mode === "same" && label && vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__label"), "".concat(COMPONENT_NAME.value, "__label--").concat(mode)]
        }, [label])])]);
      };
    }
  });

  var _Timeline = vue.defineComponent({
    name: "TTimeline",
    props: TimeLineProps,
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("timeline");
      var renderAlign = vue.computed(function () {
        var labelAlign = props.labelAlign,
          layout = props.layout;
        var res = layout === "vertical" ? "left" : "top";
        if (layout === "vertical" && labelAlign) {
          var index = DefaultAlign.horizontal.indexOf(labelAlign);
          var isError = index !== -1;
          isError && log.warn("Timeline", 'If layout is vertical, align should be "left","alternate" or "right" ');
          res = isError ? DefaultAlign.vertical[index] : labelAlign;
        }
        if (layout === "horizontal" && labelAlign) {
          var _index = DefaultAlign.vertical.indexOf(labelAlign);
          var _isError = _index !== -1;
          _isError && log.warn("Timeline", 'If layout is horizontal, align should be "top","alternate" or "bottom" ');
          res = _isError ? DefaultAlign.horizontal[_index] : labelAlign;
        }
        return res;
      });
      var getChildComponentSlots = useChildComponentSlots();
      var timelineItems = vue.computed(function () {
        var items = getChildComponentSlots("TTimelineItem");
        if (props.reverse) {
          items.reverse();
        }
        return items;
      });
      var TimeLineProvide = vue.computed(function () {
        var theme = props.theme,
          reverse = props.reverse,
          layout = props.layout,
          labelAlign = props.labelAlign,
          mode = props.mode;
        return {
          theme: theme,
          reverse: reverse,
          itemsStatus: [""],
          layout: layout,
          globalAlign: labelAlign,
          mode: mode,
          renderAlign: renderAlign.value
        };
      });
      var hasLabelItem = 1;
      vue.provide(TimelineInjectKey, TimeLineProvide);
      return function () {
        var _ref;
        return vue.createVNode("ul", {
          "class": ["".concat(COMPONENT_NAME.value), (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "-").concat(renderAlign.value), true), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "-reverse"), props.reverse), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "-").concat(props.layout), true), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "-label"), hasLabelItem), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "-label--").concat(props.mode), true), _ref)]
        }, [timelineItems.value.map(function (item, index) {
          return vue.createVNode(_TimelineItem, vue.mergeProps(item.props, {
            "index": index,
            "class": _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "-item--last"), index === timelineItems.value.length - 1)
          }), item.children);
        })]);
      };
    }
  });

  var Timeline = withInstall(_Timeline);
  var TimelineItem = withInstall(_TimelineItem);

  var props$9 = {
    borderless: Boolean,
    defaultExpandAll: Boolean,
    disabled: Boolean,
    expandIcon: {
      type: [Boolean, Function],
      "default": true
    },
    expandIconPlacement: {
      type: String,
      "default": "left",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right"].includes(val);
      }
    },
    expandMutex: Boolean,
    expandOnRowClick: {
      type: Boolean,
      "default": true
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array
    },
    onChange: Function
  };

  var _Collapse = vue.defineComponent({
    name: "TCollapse",
    props: props$9,
    setup: function setup(props2, context) {
      var componentName = usePrefixClass("collapse");
      var borderlessClass = usePrefixClass("-border-less");
      var renderTNodeJSX = useTNodeJSX();
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        expandMutex = _toRefs.expandMutex,
        borderless = _toRefs.borderless,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        collapseValue = _useVModel2[0],
        setCollapseValue = _useVModel2[1];
      var updateCollapseValue = function updateCollapseValue(value2) {
        var newValue = [].concat(collapseValue.value || []);
        var index = newValue.indexOf(value2);
        if (index >= 0) {
          newValue.splice(index, 1);
        } else if (expandMutex.value) {
          newValue = [value2];
        } else {
          newValue.push(value2);
        }
        setCollapseValue(newValue);
      };
      var classes = vue.computed(function () {
        return [componentName.value, _defineProperty$3({}, borderlessClass.value, !!borderless.value)];
      });
      var getUniqId = function () {
        var index = 0;
        return function () {
          return index++;
        };
      }();
      vue.provide("collapseValue", collapseValue);
      vue.provide("updateCollapseValue", updateCollapseValue);
      vue.provide("collapseProps", vue.toRefs(props2));
      vue.provide("getUniqId", getUniqId);
      vue.provide("renderParentTNode", renderTNodeJSX);
      return function () {
        var nodes = renderTNodeJSX("default");
        return vue.createVNode("div", {
          "class": classes.value
        }, [nodes]);
      };
    }
  });

  var props$8 = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnCollapse: Boolean,
    disabled: {
      type: Boolean,
      "default": void 0
    },
    expandIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    header: {
      type: [String, Function]
    },
    headerRightContent: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    }
  };

  function useCollapseAnimation() {
    var beforeEnter = function beforeEnter(el) {
      el.dataset.oldPaddingTop = el.style.paddingTop;
      el.dataset.oldPaddingBottom = el.style.paddingBottom;
      el.style.height = "0";
      el.style.paddingTop = "0";
      el.style.paddingBottom = "0";
    };
    var enter = function enter(el) {
      el.dataset.oldOverflow = el.style.overflow;
      el.style.height = "".concat(el.scrollHeight, "px");
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
      el.style.overflow = "hidden";
    };
    var afterEnter = function afterEnter(el) {
      el.style.height = "";
      el.style.overflow = el.dataset.oldOverflow;
    };
    var beforeLeave = function beforeLeave(el) {
      el.dataset.oldPaddingTop = el.style.paddingTop;
      el.dataset.oldPaddingBottom = el.style.paddingBottom;
      el.dataset.oldOverflow = el.style.overflow;
      el.style.height = "".concat(el.scrollHeight, "px");
      el.style.overflow = "hidden";
    };
    var leave = function leave(el) {
      if (el.scrollHeight !== 0) {
        el.style.height = "0";
        el.style.paddingTop = "0";
        el.style.paddingBottom = "0";
      }
    };
    var afterLeave = function afterLeave(el) {
      el.style.height = "";
      el.style.overflow = el.dataset.oldOverflow;
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    };
    return {
      beforeEnter: beforeEnter,
      enter: enter,
      afterEnter: afterEnter,
      beforeLeave: beforeLeave,
      leave: leave,
      afterLeave: afterLeave
    };
  }

  function _isSlot$1(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _CollapsePanel = vue.defineComponent({
    name: "TCollapsePanel",
    props: props$8,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var componentName = usePrefixClass("collapse-panel");
      var disableClass = usePrefixClass("is-disabled");
      var clickableClass = usePrefixClass("is-clickable");
      var transitionClass = usePrefixClass("slide-down");
      var _toRefs = vue.toRefs(props2),
        value = _toRefs.value,
        disabled = _toRefs.disabled,
        destroyOnCollapse = _toRefs.destroyOnCollapse;
      var collapseValue = vue.inject("collapseValue");
      var updateCollapseValue = vue.inject("updateCollapseValue");
      var getUniqId = vue.inject("getUniqId", function () {
        return void 0;
      }, false);
      var _inject = vue.inject("collapseProps"),
        defaultExpandAll = _inject.defaultExpandAll,
        disableAll = _inject.disabled,
        expandIconPlacement = _inject.expandIconPlacement,
        expandOnRowClick = _inject.expandOnRowClick;
      var renderParentTNode = vue.inject("renderParentTNode");
      var innerValue = value.value || getUniqId();
      if (defaultExpandAll.value) {
        updateCollapseValue(innerValue);
      }
      var _useCollapseAnimation = useCollapseAnimation(),
        beforeEnter = _useCollapseAnimation.beforeEnter,
        enter = _useCollapseAnimation.enter,
        afterEnter = _useCollapseAnimation.afterEnter,
        beforeLeave = _useCollapseAnimation.beforeLeave,
        leave = _useCollapseAnimation.leave,
        afterLeave = _useCollapseAnimation.afterLeave;
      var iconRef = vue.ref();
      var isDisabled = vue.computed(function () {
        return disabled.value || disableAll.value;
      });
      var isActive = vue.computed(function () {
        return collapseValue.value instanceof Array ? collapseValue.value.includes(innerValue) : collapseValue.value === innerValue;
      });
      var classes = vue.computed(function () {
        return [componentName.value, _defineProperty$3({}, disableClass.value, isDisabled.value)];
      });
      var panelExpandIcon = vue.computed(function () {
        return slots.expandIcon || props2.expandIcon;
      });
      var handleClick = function handleClick(e) {
        var canExpand = expandOnRowClick.value || e.currentTarget === iconRef.value;
        if (canExpand && !isDisabled.value) {
          updateCollapseValue(innerValue);
        }
        e.stopPropagation();
      };
      var renderDefaultIcon = function renderDefaultIcon() {
        return vue.createVNode(FakeArrow, {
          "overlayClassName": "".concat(componentName.value, "__icon--default")
        }, null);
      };
      var renderIcon = function renderIcon() {
        var tNodeRender = panelExpandIcon.value === void 0 ? renderParentTNode : renderTNodeJSX;
        return vue.createVNode("div", {
          "ref": iconRef,
          "class": "".concat(componentName.value, "__icon ").concat(componentName.value, "__icon--").concat(expandIconPlacement.value, " ").concat(isActive.value ? "".concat(componentName.value, "__icon--active") : ""),
          "onClick": handleClick
        }, [tNodeRender("expandIcon", renderDefaultIcon())]);
      };
      var renderBlank = function renderBlank() {
        return vue.createVNode("div", {
          "class": "".concat(componentName.value, "__header--blank")
        }, null);
      };
      var renderHeader = function renderHeader() {
        var cls = ["".concat(componentName.value, "__header"), _defineProperty$3({}, clickableClass.value, expandOnRowClick.value && !isDisabled.value)];
        return vue.createVNode("div", {
          "class": cls,
          "onClick": handleClick
        }, [expandIconPlacement.value === "left" && renderIcon(), renderTNodeJSX("header"), renderBlank(), renderTNodeJSX("headerRightContent"), expandIconPlacement.value === "right" && renderIcon()]);
      };
      var renderBodyByNormal = function renderBodyByNormal() {
        return vue.withDirectives(vue.createVNode("div", {
          "class": "".concat(componentName.value, "__body")
        }, [vue.createVNode("div", {
          "class": "".concat(componentName.value, "__content")
        }, [renderContent("default", "content")])]), [[vue.vShow, isActive.value]]);
      };
      var renderBodyDestroyOnCollapse = function renderBodyDestroyOnCollapse() {
        return isActive.value ? vue.createVNode("div", {
          "class": "".concat(componentName.value, "__body")
        }, [vue.createVNode("div", {
          "class": "".concat(componentName.value, "__content")
        }, [renderContent("default", "content")])]) : null;
      };
      var renderBody = function renderBody() {
        return destroyOnCollapse.value ? renderBodyDestroyOnCollapse() : renderBodyByNormal();
      };
      return function () {
        var _slot;
        return vue.createVNode("div", {
          "class": classes.value
        }, [vue.createVNode("div", {
          "class": "".concat(componentName.value, "__wrapper")
        }, [renderHeader(), vue.createVNode(vue.Transition, {
          "name": transitionClass.value,
          "onBeforeEnter": beforeEnter,
          "onEnter": enter,
          "onAfterEnter": afterEnter,
          "onBeforeLeave": beforeLeave,
          "onLeave": leave,
          "onAfterLeave": afterLeave
        }, _isSlot$1(_slot = renderBody()) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        })])]);
      };
    }
  });

  var Collapse = withInstall(_Collapse);
  var CollapsePanel = withInstall(_CollapsePanel);

  var props$7 = {
    alpha: {
      type: Number,
      "default": 1
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    height: {
      type: Number
    },
    isRepeat: {
      type: Boolean,
      "default": true
    },
    lineSpace: {
      type: Number,
      "default": 16
    },
    movable: Boolean,
    moveInterval: {
      type: Number,
      "default": 3e3
    },
    offset: {
      type: Array
    },
    removable: {
      type: Boolean,
      "default": true
    },
    rotate: {
      type: Number,
      "default": -22
    },
    watermarkContent: {
      type: [Object, Array]
    },
    width: {
      type: Number
    },
    x: {
      type: Number
    },
    y: {
      type: Number
    },
    zIndex: {
      type: Number
    }
  };

  function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$d(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function generateBase64Url(_ref, onFinish) {
    var width = _ref.width,
      height = _ref.height,
      gapX = _ref.gapX,
      gapY = _ref.gapY,
      offsetLeft = _ref.offsetLeft,
      offsetTop = _ref.offsetTop,
      rotate = _ref.rotate,
      alpha = _ref.alpha,
      watermarkContent = _ref.watermarkContent,
      lineSpace = _ref.lineSpace;
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    if (!ctx) {
      console.warn("\u5F53\u524D\u73AF\u5883\u4E0D\u652F\u6301Canvas, \u65E0\u6CD5\u7ED8\u5236\u6C34\u5370");
      onFinish("");
      return;
    }
    var ratio = window.devicePixelRatio || 1;
    var canvasWidth = (gapX + width) * ratio;
    var canvasHeight = (gapY + height) * ratio;
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    canvas.style.width = "".concat(gapX + width, "px");
    canvas.style.height = "".concat(gapY + height, "px");
    ctx.translate(offsetLeft * ratio, offsetTop * ratio);
    ctx.rotate(Math.PI / 180 * Number(rotate));
    ctx.globalAlpha = alpha;
    var markWidth = width * ratio;
    var markHeight = height * ratio;
    ctx.fillStyle = "transparent";
    ctx.fillRect(0, 0, markWidth, markHeight);
    var contents = Array.isArray(watermarkContent) ? watermarkContent : [_objectSpread$d({}, watermarkContent)];
    var top = 0;
    contents.forEach(function (item) {
      if (item.url) {
        var url = item.url,
          _item$isGrayscale = item.isGrayscale,
          isGrayscale = _item$isGrayscale === void 0 ? false : _item$isGrayscale;
        item.top = top;
        top += height;
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.referrerPolicy = "no-referrer";
        img.src = url;
        img.onload = function () {
          ctx.drawImage(img, 0, item.top * ratio, width * ratio, height * ratio);
          if (isGrayscale) {
            var imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
            var pixels = imgData.data;
            for (var i = 0; i < pixels.length; i += 4) {
              var lightness = (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3;
              pixels[i] = lightness;
              pixels[i + 1] = lightness;
              pixels[i + 2] = lightness;
            }
            ctx.putImageData(imgData, 0, 0);
          }
          onFinish(canvas.toDataURL());
        };
      } else if (item.text) {
        var text = item.text,
          _item$fontColor = item.fontColor,
          fontColor = _item$fontColor === void 0 ? "rgba(0, 0, 0, 0.1)" : _item$fontColor,
          _item$fontSize = item.fontSize,
          fontSize = _item$fontSize === void 0 ? 16 : _item$fontSize,
          _item$fontWeight = item.fontWeight,
          fontWeight = _item$fontWeight === void 0 ? "normal" : _item$fontWeight;
        item.top = top;
        top += lineSpace;
        var markSize = Number(fontSize) * ratio;
        ctx.font = "normal normal ".concat(fontWeight, " ").concat(markSize, "px/").concat(markHeight, "px undefined");
        ctx.textAlign = "start";
        ctx.textBaseline = "top";
        ctx.fillStyle = fontColor;
        ctx.fillText(text, 0, item.top * ratio);
      }
    });
    onFinish(canvas.toDataURL());
  }

  function randomMovingStyle() {
    var align = Math.floor(Math.random() * 4);
    var p1 = Math.floor(Math.random() * 70) + 30;
    var leftTopLimit = 0;
    var bottomLimit = 95;
    var rightLimit = 90;
    var keyframesStyle = "\n  @keyframes watermark {\n    0%   {left: ".concat(align === 1 ? rightLimit : align === 3 ? leftTopLimit : p1, "%; top: ").concat(align === 0 ? leftTopLimit : align === 2 ? bottomLimit : p1, "%;}\n    25% {left: ").concat(align === 0 ? rightLimit : align === 2 ? leftTopLimit : 100 - p1, "%; top: ").concat(align === 1 ? bottomLimit : align === 3 ? leftTopLimit : p1, "%;}\n    50% {left: ").concat(align === 1 ? leftTopLimit : align === 3 ? rightLimit : 100 - p1, "%; top: ").concat(align === 0 ? bottomLimit : align === 2 ? leftTopLimit : 100 - p1, "%;}\n    75% {left: ").concat(align === 0 ? leftTopLimit : align === 2 ? rightLimit : p1, "%; top: ").concat(align === 1 ? leftTopLimit : align === 3 ? bottomLimit : 100 - p1, "%;}\n    100% {left: ").concat(align === 1 ? rightLimit : align === 3 ? leftTopLimit : p1, "%; top: ").concat(align === 0 ? leftTopLimit : align === 2 ? bottomLimit : p1, "%;}\n  }\n  ");
    return keyframesStyle;
  }

  var injectStyle = function injectStyle(style) {
    var styleElement = document.createElement("style");
    var styleSheet = null;
    document.head.appendChild(styleElement);
    styleSheet = styleElement.sheet;
    styleSheet.insertRule(style, styleSheet.cssRules.length);
  };

  var _excluded = ["window"];
  var defaultWindow = typeof window !== "undefined" ? window : void 0;
  function unrefElement(elRef) {
    var _plain$$el;
    var plain = vue.unref(elRef);
    return (_plain$$el = plain === null || plain === void 0 ? void 0 : plain.$el) !== null && _plain$$el !== void 0 ? _plain$$el : plain;
  }
  function tryOnScopeDispose(fn) {
    if (vue.getCurrentScope()) {
      vue.onScopeDispose(fn);
      return true;
    }
    return false;
  }
  function useMutationObserver(target, callback) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _options$window = options.window,
      window2 = _options$window === void 0 ? defaultWindow : _options$window,
      mutationOptions = _objectWithoutProperties$1(options, _excluded);
    var observer;
    var isSupported = window2 && "MutationObserver" in window2;
    var cleanup = function cleanup() {
      if (observer) {
        observer.disconnect();
        observer = void 0;
      }
    };
    var stopWatch = vue.watch(function () {
      return unrefElement(target);
    }, function (el) {
      cleanup();
      if (isSupported && window2 && el) {
        observer = new MutationObserver(callback);
        observer.observe(el, mutationOptions);
      }
    }, {
      immediate: true
    });
    var stop = function stop() {
      cleanup();
      stopWatch();
    };
    tryOnScopeDispose(stop);
    return {
      isSupported: isSupported,
      stop: stop
    };
  }

  var _Watermark = vue.defineComponent({
    name: "TWatermark",
    props: props$7,
    setup: function setup(props2) {
      var backgroundImage = vue.ref("");
      var watermarkRef = vue.ref();
      var watermarkContentRef = vue.ref();
      var parent = vue.ref();
      var offset = vue.reactive(props2.offset || []);
      var gapX = vue.computed(function () {
        return props2.movable ? 0 : props2.x;
      });
      var gapY = vue.computed(function () {
        return props2.movable ? 0 : props2.y;
      });
      var rotate = vue.computed(function () {
        return props2.movable ? 0 : props2.rotate;
      });
      var backgroundRepeat = vue.computed(function () {
        if (props2.movable) {
          return "no-repeat";
        }
        return props2.isRepeat ? "repeat" : "no-repeat";
      });
      var offsetLeft = vue.computed(function () {
        return offset[0] || gapX.value / 2;
      });
      var offsetTop = vue.computed(function () {
        return offset[1] || gapY.value / 2;
      });
      var bgImageOptions = {
        width: props2.width,
        height: props2.height,
        rotate: rotate.value,
        lineSpace: props2.lineSpace,
        alpha: props2.alpha,
        gapX: gapX.value,
        gapY: gapY.value,
        watermarkContent: props2.watermarkContent,
        offsetLeft: offsetLeft.value,
        offsetTop: offsetTop.value
      };
      var injectWaterMark = function injectWaterMark() {
        generateBase64Url(bgImageOptions, function (base64Url) {
          backgroundImage.value = base64Url;
        });
        var keyframesStyle = randomMovingStyle();
        injectStyle(keyframesStyle);
      };
      vue.onMounted(function () {
        injectWaterMark();
        parent.value = watermarkRef.value.parentElement;
        useMutationObserver(parent.value, function (mutations) {
          if (props2.removable) return;
          mutations.forEach(function (mutation) {
            if (mutation.type === "childList") {
              var removeNodes = mutation.removedNodes;
              removeNodes.forEach(function (node) {
                var element = node;
                if (element === watermarkRef.value) {
                  parent.value.appendChild(element);
                }
                if (element === watermarkContentRef.value) {
                  watermarkRef.value.appendChild(element);
                }
              });
            }
          });
        }, {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true
        });
      });
      vue.watch(function () {
        return props2.watermarkContent;
      }, injectWaterMark, {
        deep: true
      });
      return {
        gapX: gapX,
        gapY: gapY,
        backgroundRepeat: backgroundRepeat,
        backgroundImage: backgroundImage,
        watermarkRef: watermarkRef,
        watermarkContentRef: watermarkContentRef,
        bgImageOptions: bgImageOptions
      };
    },
    render: function render() {
      var COMPONENT_NAME = usePrefixClass("watermark");
      var renderContent = useContent();
      return vue.createVNode("div", {
        "style": {
          position: "relative",
          overflow: "hidden",
          width: "100%"
        },
        "class": COMPONENT_NAME.value,
        "ref": "watermarkRef"
      }, [renderContent("default", "content"), vue.createVNode("div", {
        "ref": "watermarkContentRef",
        "style": {
          zIndex: this.zIndex,
          position: "absolute",
          left: 0,
          right: 0,
          top: 0,
          bottom: 0,
          width: "100%",
          height: "100%",
          backgroundSize: "".concat(this.gapX + this.width, "px"),
          pointerEvents: "none",
          backgroundRepeat: this.backgroundRepeat,
          backgroundImage: "url('".concat(this.backgroundImage, "')"),
          animation: this.movable ? "watermark infinite ".concat(this.moveInterval * 4 / 60, "s") : "none"
        }
      }, null)]);
    }
  });

  var Watermark = withInstall(_Watermark);

  var props$6 = {
    allowHalf: Boolean,
    color: {
      type: [String, Array],
      "default": "#ED7B2F"
    },
    count: {
      type: Number,
      "default": 5
    },
    disabled: Boolean,
    gap: {
      type: Number,
      "default": 4
    },
    icon: {
      type: Function
    },
    showText: Boolean,
    size: {
      type: String,
      "default": "24px"
    },
    texts: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    value: {
      type: Number,
      "default": void 0
    },
    modelValue: {
      type: Number,
      "default": void 0
    },
    defaultValue: {
      type: Number,
      "default": 0
    },
    onChange: Function
  };

  function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$c(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Rate = vue.defineComponent({
    name: "TRate",
    props: _objectSpread$c({}, props$6),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var activeColor = Array.isArray(props2.color) ? props2.color[0] : props2.color;
      var defaultColor = Array.isArray(props2.color) ? props2.color[1] : "var(--td-bg-color-component)";
      var _toRefs = vue.toRefs(props2),
        inputValue = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(inputValue, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        starValue = _useVModel2[0],
        setStarValue = _useVModel2[1];
      var hoverValue = vue.ref(void 0);
      var root = vue.ref();
      var displayValue = vue.computed(function () {
        return Number(hoverValue.value || starValue.value);
      });
      var displayText = vue.computed(function () {
        return props2.texts.length === 0 ? ["\u6781\u5DEE", "\u5931\u671B", "\u4E00\u822C", "\u6EE1\u610F", "\u60CA\u559C"] : props2.texts;
      });
      var RateIcon = function RateIcon(iconProps) {
        if (slots.icon !== void 0) {
          return renderTNodeJSX("icon", {
            params: iconProps
          });
        }
        return vue.createVNode(starFilled, iconProps, null);
      };
      var getStarValue = function getStarValue(event, index) {
        if (props2.allowHalf) {
          var _root$value$getBoundi = root.value.getBoundingClientRect(),
            left = _root$value$getBoundi.left;
          var firstStar = root.value.firstChild.nextSibling;
          var _firstStar$getBoundin = firstStar.getBoundingClientRect(),
            width = _firstStar$getBoundin.width;
          var clientX = event.clientX;
          var starMiddle = width * (index - 0.5) + props2.gap * (index - 1);
          if (clientX - left >= starMiddle) return index;
          if (clientX - left < starMiddle) return index - 0.5;
        }
        return index;
      };
      var mouseEnterHandler = function mouseEnterHandler(event, index) {
        if (props2.disabled) return;
        hoverValue.value = getStarValue(event, index);
      };
      var mouseLeaveHandler = function mouseLeaveHandler() {
        if (props2.disabled) return;
        hoverValue.value = void 0;
      };
      var clickHandler = function clickHandler(event, index) {
        if (props2.disabled) return;
        setStarValue(getStarValue(event, index));
      };
      var getStarCls = function getStarCls(index) {
        if (props2.allowHalf && index + 0.5 === displayValue.value) return "".concat(classPrefix.value, "-rate__item--half");
        if (index >= displayValue.value) return "";
        if (index < displayValue.value) return "".concat(classPrefix.value, "-rate__item--full");
      };
      var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;
      return function () {
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-rate"),
          "onMouseleave": mouseLeaveHandler
        }, [vue.createVNode("ul", {
          "class": "".concat(classPrefix.value, "-rate__list"),
          "style": {
            gap: "".concat(props2.gap, "px")
          },
          "ref": root
        }, [_toConsumableArray(Array(Number(props2.count))).map(function (_, index) {
          return vue.createVNode("li", {
            "key": index,
            "class": ["".concat(classPrefix.value, "-rate__item"), getStarCls(index)],
            "onClick": function onClick(event) {
              return clickHandler(event, index + 1);
            },
            "onMousemove": function onMousemove(event) {
              return mouseEnterHandler(event, index + 1);
            }
          }, [props2.showText ? vue.createVNode(Tooltip, {
            "key": index,
            "content": displayText.value[displayValue.value - 1]
          }, {
            "default": function _default() {
              return [vue.createVNode("div", {
                "class": "".concat(classPrefix.value, "-rate__star-top")
              }, [vue.createVNode(RateIcon, {
                "size": props2.size,
                "color": activeColor
              }, null)]), vue.createVNode("div", {
                "class": "".concat(classPrefix.value, "-rate__star-bottom")
              }, [vue.createVNode(RateIcon, {
                "size": props2.size,
                "color": defaultColor
              }, null)])];
            }
          }) : vue.createVNode(vue.Fragment, null, [vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-rate__star-top")
          }, [vue.createVNode(RateIcon, {
            "size": props2.size,
            "color": activeColor
          }, null)]), vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-rate__star-bottom")
          }, [vue.createVNode(RateIcon, {
            "size": props2.size,
            "color": defaultColor
          }, null)])])]);
        })]), props2.showText && vue.createVNode("div", {
          "className": "".concat(classPrefix.value, "-rate__text")
        }, [displayText.value[displayValue.value - 1]])]);
      };
    }
  });

  var Rate = withInstall(_Rate);

  var props$5 = {
    close: {
      type: [String, Boolean, Function],
      "default": false
    },
    "default": {
      type: [String, Function]
    },
    icon: {
      type: Function
    },
    maxLine: {
      type: Number,
      "default": 0
    },
    message: {
      type: [String, Function]
    },
    operation: {
      type: Function
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        return ["success", "info", "warning", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    },
    onClose: Function,
    onClosed: Function
  };

  var _Alert = vue.defineComponent({
    name: "TAlert",
    props: props$5,
    setup: function setup(props2) {
      var _useConfig = useConfig("alert"),
        globalConfig = _useConfig.globalConfig,
        classPrefix = _useConfig.classPrefix;
      var _useGlobalIcon = useGlobalIcon({
          CheckCircleFilledIcon: checkCircleFilled,
          CloseIcon: close,
          ErrorCircleFilledIcon: errorCircleFilled,
          HelpCircleFilledIcon: helpCircleFilled,
          InfoCircleFilledIcon: infoCircleFilled
        }),
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        CloseIcon = _useGlobalIcon.CloseIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
        HelpCircleFilledIcon = _useGlobalIcon.HelpCircleFilledIcon,
        InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon;
      var COMPONENT_NAME = usePrefixClass("alert");
      var renderTNodeJSX = useTNodeJSX();
      var renderIconTNode = useIcon();
      var alertRef = vue.ref(null);
      var descriptionRef = vue.ref(null);
      var descHeight = vue.ref(0);
      var visible = vue.ref(true);
      var collapsed = vue.ref(true);
      var renderIcon = function renderIcon() {
        var Component = {
          info: InfoCircleFilledIcon,
          success: CheckCircleFilledIcon,
          warning: ErrorCircleFilledIcon,
          error: ErrorCircleFilledIcon,
          question: HelpCircleFilledIcon
        };
        var iconContent = renderIconTNode("icon", Component);
        return iconContent ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__icon")
        }, [iconContent]) : null;
      };
      var renderClose = function renderClose() {
        var close = props2.close;
        var closeContent = null;
        if (close === true || close === "") {
          closeContent = vue.createVNode(CloseIcon, null, null);
        } else if (typeof close === "string") {
          closeContent = close;
        } else {
          closeContent = renderIconTNode("close");
        }
        return closeContent ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__close"),
          "onClick": handleClose
        }, [closeContent]) : null;
      };
      var renderTitle = function renderTitle() {
        var titleContent = renderTNodeJSX("title");
        return titleContent ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__title")
        }, [" ", titleContent]) : null;
      };
      var renderMessage = function renderMessage() {
        var operationContent = renderTNodeJSX("operation");
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__message")
        }, [renderDescription(), operationContent ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__operation")
        }, [operationContent]) : null]);
      };
      var renderDescription = function renderDescription() {
        var _descriptionRef$value, _descriptionRef$value2;
        var messageContent;
        messageContent = renderTNodeJSX("default");
        if (!messageContent) {
          messageContent = renderTNodeJSX("message");
        }
        var contentLength = Array.isArray(messageContent) ? messageContent.length : 1;
        var hasCollapse = props2.maxLine > 0 && props2.maxLine < contentLength;
        var height = (_descriptionRef$value = descriptionRef.value) === null || _descriptionRef$value === void 0 ? void 0 : (_descriptionRef$value2 = _descriptionRef$value.children[0]) === null || _descriptionRef$value2 === void 0 ? void 0 : _descriptionRef$value2.offsetHeight;
        if (hasCollapse && collapsed.value) {
          messageContent = messageContent.slice(0, props2.maxLine);
          height && (descriptionRef.value.style.height = "".concat(descHeight.value, "px"));
        } else if (hasCollapse) {
          height && (descriptionRef.value.style.height = "".concat(height * (contentLength - props2.maxLine) + descHeight.value, "px"));
        }
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__description"),
          "ref": descriptionRef
        }, [hasCollapse ? messageContent.map(function (content) {
          return vue.createVNode("div", null, [content]);
        }) : messageContent, hasCollapse ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__collapse"),
          "onClick": function onClick() {
            collapsed.value = !collapsed.value;
          }
        }, [collapsed.value ? globalConfig.value.expandText : globalConfig.value.collapseText]) : null]);
      };
      var renderContent = function renderContent() {
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [renderTitle(), renderMessage()]);
      };
      var handleClose = function handleClose(e) {
        var _props2$onClose;
        (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, {
          e: e
        });
        addClass(alertRef.value, "".concat(COMPONENT_NAME.value, "--closing"));
      };
      var handleCloseEnd = function handleCloseEnd(e) {
        var isTransitionTarget = e.target === alertRef.value;
        if (e.propertyName === "opacity" && isTransitionTarget) {
          var _props2$onClosed;
          visible.value = false;
          (_props2$onClosed = props2.onClosed) === null || _props2$onClosed === void 0 ? void 0 : _props2$onClosed.call(props2, {
            e: e
          });
        }
      };
      vue.onMounted(function () {
        on$1(alertRef.value, "transitionend", handleCloseEnd);
        descHeight.value = descriptionRef.value.offsetHeight;
      });
      vue.onBeforeUnmount(function () {
        off$1(alertRef.value, "transitionend", handleCloseEnd);
      });
      return function () {
        return vue.createVNode("div", {
          "ref": alertRef,
          "class": ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "--").concat(props2.theme), _defineProperty$3({}, "".concat(classPrefix.value, "-is-hidden"), !visible.value)]
        }, [renderIcon(), renderContent(), renderClose()]);
      };
    }
  });

  var Alert = withInstall(_Alert);

  var props$4 = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    body: {
      type: [String, Function]
    },
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    closeBtn: {
      type: [String, Boolean, Function]
    },
    closeOnEscKeydown: {
      type: Boolean,
      "default": void 0
    },
    closeOnOverlayClick: {
      type: Boolean,
      "default": void 0
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    footer: {
      type: [Boolean, Function],
      "default": true
    },
    header: {
      type: [String, Boolean, Function],
      "default": true
    },
    mode: {
      type: String,
      "default": "overlay",
      validator: function validator(val) {
        if (!val) return true;
        return ["overlay", "push"].includes(val);
      }
    },
    placement: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top", "bottom"].includes(val);
      }
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showInAttachedElement: Boolean,
    showOverlay: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": void 0
    },
    sizeDraggable: Boolean,
    visible: Boolean,
    zIndex: {
      type: Number
    },
    onCancel: Function,
    onClose: Function,
    onCloseBtnClick: Function,
    onConfirm: Function,
    onEscKeydown: Function,
    onOverlayClick: Function
  };

  var useDrag$1 = function useDrag(props) {
    var isSizeDragging = vue.ref(false);
    var draggedSizeValue = vue.ref(null);
    var enableDrag = function enableDrag() {
      document.addEventListener("mouseup", handleMouseup, true);
      document.addEventListener("mousemove", handleMousemove, true);
      isSizeDragging.value = true;
    };
    var handleMouseup = function handleMouseup() {
      document.removeEventListener("mouseup", handleMouseup, true);
      document.removeEventListener("mousemove", handleMousemove, true);
      isSizeDragging.value = false;
    };
    var handleMousemove = function handleMousemove(e) {
      var x = e.x,
        y = e.y;
      var maxHeight = document.documentElement.clientHeight;
      var maxWidth = document.documentElement.clientWidth;
      var offsetHeight = 8;
      var offsetWidth = 8;
      if (isSizeDragging.value && props.sizeDraggable) {
        if (props.placement === "right") {
          var moveLeft = Math.min(Math.max(maxWidth - x + offsetWidth, offsetWidth), maxWidth);
          draggedSizeValue.value = "".concat(moveLeft, "px");
        }
        if (props.placement === "left") {
          var moveRight = Math.min(Math.max(x + offsetWidth, offsetWidth), maxWidth);
          draggedSizeValue.value = "".concat(moveRight, "px");
        }
        if (props.placement === "top") {
          var moveBottom = Math.min(Math.max(y + offsetHeight, offsetHeight), maxHeight);
          draggedSizeValue.value = "".concat(moveBottom, "px");
        }
        if (props.placement === "bottom") {
          var moveTop = Math.min(Math.max(maxHeight - y + offsetHeight, offsetHeight), maxHeight);
          draggedSizeValue.value = "".concat(moveTop, "px");
        }
      }
    };
    var draggableLineStyles = vue.computed(function () {
      var _ref;
      var isHorizontal = ["right", "left"].includes(props.placement);
      var oppositeMap = {
        left: "right",
        right: "left",
        top: "bottom",
        bottom: "top"
      };
      return _ref = {
        zIndex: 1,
        position: "absolute",
        background: "transparent"
      }, _defineProperty$3(_ref, oppositeMap[props.placement], 0), _defineProperty$3(_ref, "width", isHorizontal ? "16px" : "100%"), _defineProperty$3(_ref, "height", isHorizontal ? "100%" : "16px"), _defineProperty$3(_ref, "cursor", isHorizontal ? "col-resize" : "row-resize"), _ref;
    });
    return {
      draggedSizeValue: draggedSizeValue,
      enableDrag: enableDrag,
      draggableLineStyles: draggableLineStyles
    };
  };

  var _Drawer = vue.defineComponent({
    name: "TDrawer",
    directives: {
      TransferDom: TransferDom
    },
    props: props$4,
    emits: ["update:visible"],
    setup: function setup(props2, context) {
      var destroyOnCloseVisible = vue.ref(false);
      var isVisible = vue.ref(false);
      var _useConfig = useConfig("drawer"),
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          CloseIcon: close
        }),
        CloseIcon = _useGlobalIcon.CloseIcon;
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var COMPONENT_NAME = usePrefixClass("drawer");
      var LOCK_CLASS = usePrefixClass("drawer--lock");
      var _useDrag = useDrag$1(props2),
        draggedSizeValue = _useDrag.draggedSizeValue,
        enableDrag = _useDrag.enableDrag,
        draggableLineStyles = _useDrag.draggableLineStyles;
      var confirmBtnAction = function confirmBtnAction(e) {
        var _props2$onConfirm;
        (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
          e: e
        });
      };
      var cancelBtnAction = function cancelBtnAction(e) {
        var _props2$onCancel;
        (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
          e: e
        });
        closeDrawer({
          trigger: "cancel",
          e: e
        });
      };
      var _useAction = useAction({
          confirmBtnAction: confirmBtnAction,
          cancelBtnAction: cancelBtnAction
        }),
        getConfirmBtn = _useAction.getConfirmBtn,
        getCancelBtn = _useAction.getCancelBtn;
      var drawerEle = vue.ref(null);
      var drawerClasses = vue.computed(function () {
        var _ref;
        return [COMPONENT_NAME.value, "".concat(COMPONENT_NAME.value, "--").concat(props2.placement), (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--open"), isVisible.value), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--attach"), props2.showInAttachedElement), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--without-mask"), !props2.showOverlay), _ref)];
      });
      var sizeValue = vue.computed(function () {
        var _props2$size;
        if (draggedSizeValue.value) return draggedSizeValue.value;
        var size = (_props2$size = props2.size) !== null && _props2$size !== void 0 ? _props2$size : globalConfig.value.size;
        var defaultSize = isNaN(Number(size)) ? size : "".concat(size, "px");
        return {
          small: "300px",
          medium: "500px",
          large: "760px"
        }[size] || defaultSize;
      });
      var wrapperStyles = vue.computed(function () {
        return {
          transform: isVisible.value ? "translateX(0)" : void 0,
          width: ["left", "right"].includes(props2.placement) ? sizeValue.value : "",
          height: ["top", "bottom"].includes(props2.placement) ? sizeValue.value : ""
        };
      });
      var wrapperClasses = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__content-wrapper"), "".concat(COMPONENT_NAME.value, "__content-wrapper--").concat(props2.placement)];
      });
      var parentNode = vue.computed(function () {
        return drawerEle.value && drawerEle.value.parentNode;
      });
      var modeAndPlacement = vue.computed(function () {
        return [props2.mode, props2.placement].join();
      });
      var footerStyle = vue.computed(function () {
        return {
          display: "flex",
          justifyContent: props2.placement === "right" ? "flex-start" : "flex-end"
        };
      });
      var handlePushMode = function handlePushMode() {
        if (props2.mode !== "push") return;
        vue.nextTick(function () {
          if (!parentNode.value) return;
          parentNode.value.style.cssText = "transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;";
        });
      };
      var updatePushMode = function updatePushMode() {
        if (!parentNode.value) return;
        if (props2.mode !== "push" || !parentNode.value) return;
        var marginStr = {
          left: "margin: 0 0 0 ".concat(sizeValue.value),
          right: "margin: 0 0 0 -".concat(sizeValue.value),
          top: "margin: ".concat(sizeValue.value, " 0 0 0"),
          bottom: "margin: -".concat(sizeValue.value, " 0 0 0")
        }[props2.placement];
        if (isVisible.value) {
          parentNode.value.style.cssText += marginStr;
        } else {
          parentNode.value.style.cssText = parentNode.value.style.cssText.replace(/margin:.+;/, "");
        }
      };
      var getDefaultFooter = function getDefaultFooter() {
        var confirmBtn = getConfirmBtn({
          confirmBtn: props2.confirmBtn,
          globalConfirm: globalConfig.value.confirm,
          className: "".concat(COMPONENT_NAME.value, "__confirm")
        });
        var cancelBtn = getCancelBtn({
          cancelBtn: props2.cancelBtn,
          globalCancel: globalConfig.value.cancel,
          className: "".concat(COMPONENT_NAME.value, "__cancel")
        });
        return vue.createVNode("div", {
          "style": footerStyle.value
        }, [props2.placement === "right" ? confirmBtn : null, cancelBtn, props2.placement !== "right" ? confirmBtn : null]);
      };
      vue.watch(modeAndPlacement, function () {
        handlePushMode();
      }, {
        immediate: true
      });
      vue.watch(function () {
        return props2.visible;
      }, function (value) {
        if (isServer$1) return;
        if (value && !props2.showInAttachedElement) {
          props2.preventScrollThrough && addClass(document.body, LOCK_CLASS.value);
        } else {
          props2.preventScrollThrough && removeClass(document.body, LOCK_CLASS.value);
        }
        if (props2.destroyOnClose) {
          if (value) {
            destroyOnCloseVisible.value = false;
            setTimeout(function () {
              isVisible.value = true;
            });
          } else {
            isVisible.value = false;
            setTimeout(function () {
              destroyOnCloseVisible.value = true;
            }, 200);
          }
        } else if (destroyOnCloseVisible.value === true && value) {
          destroyOnCloseVisible.value = false;
          setTimeout(function () {
            isVisible.value = true;
          });
        } else {
          isVisible.value = value;
        }
      }, {
        immediate: true
      });
      var handleCloseBtnClick = function handleCloseBtnClick(e) {
        var _props2$onCloseBtnCli;
        (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
          e: e
        });
        closeDrawer({
          trigger: "close-btn",
          e: e
        });
      };
      var handleWrapperClick = function handleWrapperClick(e) {
        var _props2$onOverlayClic, _props2$closeOnOverla;
        (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 ? void 0 : _props2$onOverlayClic.call(props2, {
          e: e
        });
        if ((_props2$closeOnOverla = props2.closeOnOverlayClick) !== null && _props2$closeOnOverla !== void 0 ? _props2$closeOnOverla : globalConfig.value.closeOnOverlayClick) {
          closeDrawer({
            trigger: "overlay",
            e: e
          });
        }
      };
      var onKeyDown = function onKeyDown(e) {
        var _props2$closeOnEscKey;
        if (((_props2$closeOnEscKey = props2.closeOnEscKeydown) !== null && _props2$closeOnEscKey !== void 0 ? _props2$closeOnEscKey : globalConfig.value.closeOnEscKeydown) && e.key === "Escape") {
          var _props2$onEscKeydown;
          (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 ? void 0 : _props2$onEscKeydown.call(props2, {
            e: e
          });
          closeDrawer({
            trigger: "esc",
            e: e
          });
        }
      };
      var closeDrawer = function closeDrawer(params) {
        var _props2$onClose;
        (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, params);
        context.emit("update:visible", false);
      };
      vue.onUpdated(function () {
        updatePushMode();
      });
      return function () {
        if (destroyOnCloseVisible.value) return;
        var body = renderContent("body", "default");
        var headerContent = renderTNodeJSX("header");
        var defaultFooter = getDefaultFooter();
        return vue.withDirectives(vue.createVNode("div", {
          "ref": drawerEle,
          "class": drawerClasses.value,
          "style": {
            zIndex: props2.zIndex
          },
          "onKeydown": onKeyDown,
          "tabindex": 0
        }, [props2.showOverlay && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__mask"),
          "onClick": handleWrapperClick
        }, null), vue.createVNode("div", {
          "class": wrapperClasses.value,
          "style": wrapperStyles.value
        }, [headerContent && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header")
        }, [headerContent]), props2.closeBtn && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__close-btn"),
          "onClick": handleCloseBtnClick
        }, [renderTNodeJSX("closeBtn", vue.createVNode(CloseIcon, null, null))]), vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__body"), "narrow-scrollbar"]
        }, [body]), props2.footer && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__footer")
        }, [renderTNodeJSX("footer", defaultFooter)]), props2.sizeDraggable && vue.createVNode("div", {
          "style": draggableLineStyles.value,
          "onMousedown": enableDrag
        }, null)])]), [[vue.resolveDirective("transfer-dom"), props2.attach]]);
      };
    }
  });

  var Drawer = withInstall(_Drawer);

  var props$3 = {
    counter: {
      type: Function
    },
    current: {
      type: Number,
      "default": void 0
    },
    modelValue: {
      type: Number,
      "default": void 0
    },
    defaultCurrent: {
      type: Number
    },
    finishButtonProps: {
      type: Object,
      "default": {
        content: "\u5B8C\u6210",
        theme: "primary"
      }
    },
    hideCounter: Boolean,
    hidePrev: Boolean,
    hideSkip: Boolean,
    highlightPadding: {
      type: Number,
      "default": 8
    },
    mode: {
      type: String,
      "default": "popup",
      validator: function validator(val) {
        if (!val) return true;
        return ["popup", "dialog"].includes(val);
      }
    },
    nextButtonProps: {
      type: Object,
      "default": {
        content: "\u4E0B\u4E00\u6B65",
        theme: "primary"
      }
    },
    prevButtonProps: {
      type: Object,
      "default": {
        content: "\u4E0A\u4E00\u6B65",
        theme: "default"
      }
    },
    showOverlay: {
      type: Boolean,
      "default": true
    },
    skipButtonProps: {
      type: Object,
      "default": {
        content: "\u8DF3\u8FC7",
        theme: "default"
      }
    },
    steps: {
      type: Array
    },
    zIndex: {
      type: Number,
      "default": 999999
    },
    onChange: Function,
    onFinish: Function,
    onNextStepClick: Function,
    onPrevStepClick: Function,
    onSkip: Function
  };

  function getScrollParent(element) {
    var style = window.getComputedStyle(element);
    var excludeStaticParent = style.position === "absolute";
    var overflowRegex = /(auto|scroll)/;
    if (style.position === "fixed") return document.body;
    for (var parent = element; parent.parentElement;) {
      parent = parent.parentElement;
      style = window.getComputedStyle(parent);
      if (excludeStaticParent && style.position === "static") {
        continue;
      }
      if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) return parent;
    }
    return document.body;
  }
  function scrollToParentVisibleArea(element) {
    var parent = getScrollParent(element);
    if (parent === document.body) return;
    if (elementInViewport(element, parent)) return;
    parent.scrollTop = element.offsetTop - parent.offsetTop;
  }

  function getRelativePosition(elm) {
    var relativeElm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.body;
    var _getWindowScroll = getWindowScroll$1(),
      scrollTop = _getWindowScroll.scrollTop,
      scrollLeft = _getWindowScroll.scrollLeft;
    var _elm$getBoundingClien = elm.getBoundingClientRect(),
      elmTop = _elm$getBoundingClien.top,
      elmLeft = _elm$getBoundingClien.left;
    var _relativeElm$getBound = relativeElm.getBoundingClientRect(),
      relElmTop = _relativeElm$getBound.top,
      relElmLeft = _relativeElm$getBound.left;
    var relativeElmPosition = getElmCssPropValue(relativeElm, "position");
    if (relativeElm.tagName.toLowerCase() !== "body" && relativeElmPosition === "relative" || relativeElmPosition === "sticky") {
      return {
        top: elmTop - relElmTop,
        left: elmLeft - relElmLeft
      };
    }
    if (isFixed(elm)) {
      return {
        top: elmTop,
        left: elmLeft
      };
    }
    return {
      top: elmTop + scrollTop,
      left: elmLeft + scrollLeft
    };
  }

  function getTargetElm(elm) {
    if (elm) {
      var targetElement = null;
      if (typeof elm === "string") {
        targetElement = document.querySelector(elm);
      } else if (typeof elm === "function") {
        targetElement = elm();
      } else {
        throw new Error("elm should be string or function");
      }
      if (targetElement) {
        return targetElement;
      }
      throw new Error("There is no element with given.");
    } else {
      return document.body;
    }
  }

  function scrollToElm(elm) {
    var rect = elm.getBoundingClientRect();
    if (!elementInViewport(elm)) {
      var winHeight = getWindowSize().height;
      rect.bottom - (rect.bottom - rect.top);
      scrollTo(rect.top - (winHeight / 2 - rect.height / 2), {});
    }
  }

  var _Guide = vue.defineComponent({
    name: "TGuide",
    directives: {
      TransferDom: TransferDom
    },
    props: props$3,
    setup: function setup(props2) {
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("guide");
      var LOCK_CLASS = usePrefixClass("guide--lock");
      var _toRefs = vue.toRefs(props2),
        current = _toRefs.current,
        modelValue = _toRefs.modelValue,
        hideCounter = _toRefs.hideCounter,
        hidePrev = _toRefs.hidePrev,
        hideSkip = _toRefs.hideSkip,
        steps = _toRefs.steps,
        zIndex = _toRefs.zIndex;
      var _useVModel = useVModel(current, modelValue, props2.defaultCurrent, props2.onChange, "current"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerCurrent = _useVModel2[0],
        setInnerCurrent = _useVModel2[1];
      var overlayLayerRef = vue.ref();
      var highlightLayerRef = vue.ref();
      var referenceLayerRef = vue.ref();
      var currentHighlightLayerElm = vue.ref();
      var nextHighlightLayerElm = vue.ref();
      var dialogWrapperRef = vue.ref();
      var dialogTooltipRef = vue.ref();
      var actived = vue.ref(false);
      var stepsTotal = vue.computed(function () {
        return steps.value.length;
      });
      var currentStepInfo = vue.computed(function () {
        return steps.value[innerCurrent.value];
      });
      var isPopup = vue.computed(function () {
        return getCurrentCrossProps("mode") === "popup";
      });
      var currentElmIsFixed = vue.computed(function () {
        return isFixed(currentHighlightLayerElm.value || document.body);
      });
      var getCurrentCrossProps = function getCurrentCrossProps(propsName) {
        var _currentStepInfo$valu;
        return (_currentStepInfo$valu = currentStepInfo.value[propsName]) !== null && _currentStepInfo$valu !== void 0 ? _currentStepInfo$valu : props2[propsName];
      };
      var setHighlightLayerPosition = function setHighlightLayerPosition(highlighLayer) {
        var _getRelativePosition = getRelativePosition(nextHighlightLayerElm.value, currentHighlightLayerElm.value),
          top = _getRelativePosition.top,
          left = _getRelativePosition.left;
        var _nextHighlightLayerEl = nextHighlightLayerElm.value.getBoundingClientRect(),
          width = _nextHighlightLayerEl.width,
          height = _nextHighlightLayerEl.height;
        var highlightPadding = getCurrentCrossProps("highlightPadding");
        if (isPopup.value) {
          width += highlightPadding * 2;
          height += highlightPadding * 2;
          top -= highlightPadding;
          left -= highlightPadding;
        } else {
          var _getWindowScroll = getWindowScroll$1(),
            scrollTop = _getWindowScroll.scrollTop,
            scrollLeft = _getWindowScroll.scrollLeft;
          top += scrollTop;
          left += scrollLeft;
        }
        setStyle$1(highlighLayer, {
          width: "".concat(width, "px"),
          height: "".concat(height, "px"),
          top: "".concat(top, "px"),
          left: "".concat(left, "px")
        });
      };
      var showPopupGuide = function showPopupGuide() {
        var currentElement = getTargetElm(currentStepInfo.value.element);
        nextHighlightLayerElm.value = currentElement;
        vue.nextTick(function () {
          scrollToParentVisibleArea(nextHighlightLayerElm.value);
          setHighlightLayerPosition(highlightLayerRef.value);
          setHighlightLayerPosition(referenceLayerRef.value);
          scrollToElm(nextHighlightLayerElm.value);
          currentHighlightLayerElm.value = currentElement;
        });
      };
      var destroyTooltipElm = function destroyTooltipElm() {
        var _referenceLayerRef$va;
        (_referenceLayerRef$va = referenceLayerRef.value) === null || _referenceLayerRef$va === void 0 ? void 0 : _referenceLayerRef$va.parentNode.removeChild(referenceLayerRef.value);
      };
      var showDialogGuide = function showDialogGuide() {
        vue.nextTick(function () {
          var currentElement = dialogTooltipRef.value;
          nextHighlightLayerElm.value = currentElement;
          scrollToParentVisibleArea(nextHighlightLayerElm.value);
          setHighlightLayerPosition(highlightLayerRef.value);
          scrollToElm(nextHighlightLayerElm.value);
          currentHighlightLayerElm.value = currentElement;
        });
      };
      var destroyDialogTooltipElm = function destroyDialogTooltipElm() {
        var _dialogTooltipRef$val, _dialogWrapperRef$val;
        (_dialogTooltipRef$val = dialogTooltipRef.value) === null || _dialogTooltipRef$val === void 0 ? void 0 : _dialogTooltipRef$val.parentNode.removeChild(dialogTooltipRef.value);
        (_dialogWrapperRef$val = dialogWrapperRef.value) === null || _dialogWrapperRef$val === void 0 ? void 0 : _dialogWrapperRef$val.parentNode.removeChild(dialogWrapperRef.value);
      };
      var showGuide = function showGuide() {
        if (isPopup.value) {
          destroyDialogTooltipElm();
          showPopupGuide();
        } else {
          destroyTooltipElm();
          showDialogGuide();
        }
      };
      var destroyGuide = function destroyGuide() {
        var _highlightLayerRef$va, _overlayLayerRef$valu;
        destroyTooltipElm();
        destroyDialogTooltipElm();
        (_highlightLayerRef$va = highlightLayerRef.value) === null || _highlightLayerRef$va === void 0 ? void 0 : _highlightLayerRef$va.parentNode.removeChild(highlightLayerRef.value);
        (_overlayLayerRef$valu = overlayLayerRef.value) === null || _overlayLayerRef$valu === void 0 ? void 0 : _overlayLayerRef$valu.parentNode.removeChild(overlayLayerRef.value);
        removeClass(document.body, LOCK_CLASS.value);
      };
      var handleSkip = function handleSkip(e) {
        var _props2$onSkip;
        var total = stepsTotal.value;
        actived.value = false;
        setInnerCurrent(-1, {
          e: e,
          total: total
        });
        (_props2$onSkip = props2.onSkip) === null || _props2$onSkip === void 0 ? void 0 : _props2$onSkip.call(props2, {
          e: e,
          current: -1,
          total: total
        });
      };
      var handlePrev = function handlePrev(e) {
        var _props2$onPrevStepCli;
        var total = stepsTotal.value;
        setInnerCurrent(innerCurrent.value - 1, {
          e: e,
          total: total
        });
        (_props2$onPrevStepCli = props2.onPrevStepClick) === null || _props2$onPrevStepCli === void 0 ? void 0 : _props2$onPrevStepCli.call(props2, {
          e: e,
          prev: innerCurrent.value - 1,
          current: innerCurrent.value,
          total: total
        });
      };
      var handleNext = function handleNext(e) {
        var _props2$onNextStepCli;
        var total = stepsTotal.value;
        setInnerCurrent(innerCurrent.value + 1, {
          e: e,
          total: total
        });
        (_props2$onNextStepCli = props2.onNextStepClick) === null || _props2$onNextStepCli === void 0 ? void 0 : _props2$onNextStepCli.call(props2, {
          e: e,
          next: innerCurrent.value + 1,
          current: innerCurrent.value,
          total: total
        });
      };
      var handleFinish = function handleFinish(e) {
        var _props2$onFinish;
        var total = stepsTotal.value;
        actived.value = false;
        setInnerCurrent(-1, {
          e: e,
          total: total
        });
        (_props2$onFinish = props2.onFinish) === null || _props2$onFinish === void 0 ? void 0 : _props2$onFinish.call(props2, {
          e: e,
          current: -1,
          total: total
        });
      };
      var initGuide = function initGuide() {
        if (innerCurrent.value >= 0 && innerCurrent.value < steps.value.length) {
          if (!actived.value) {
            actived.value = true;
            addClass(document.body, LOCK_CLASS.value);
          }
          showGuide();
        }
      };
      vue.watch(innerCurrent, function (val) {
        if (val >= 0 && val < steps.value.length) {
          initGuide();
        } else {
          actived.value = false;
          destroyGuide();
        }
      });
      vue.onMounted(function () {
        initGuide();
      });
      return function () {
        var renderOverlayLayer = function renderOverlayLayer() {
          return vue.withDirectives(vue.createVNode("div", {
            "ref": overlayLayerRef,
            "class": "".concat(COMPONENT_NAME.value, "__overlay"),
            "style": {
              zIndex: zIndex.value - 2
            }
          }, null), [[vue.resolveDirective("transfer-dom"), "body"]]);
        };
        var renderHighlightLayer = function renderHighlightLayer() {
          var style = {
            zIndex: zIndex.value - 1
          };
          var highlightClass = ["".concat(COMPONENT_NAME.value, "__highlight"), "".concat(COMPONENT_NAME.value, "__highlight--").concat(isPopup.value ? "popup" : "dialog"), "".concat(COMPONENT_NAME.value, "--").concat(currentElmIsFixed.value && isPopup.value ? "fixed" : "absolute")];
          var showOverlay = getCurrentCrossProps("showOverlay");
          var maskClass = ["".concat(COMPONENT_NAME.value, "__highlight--").concat(showOverlay ? "mask" : "nomask")];
          var highlightContent = currentStepInfo.value.highlightContent;
          var showHighlightContent = highlightContent && isPopup.value;
          return vue.withDirectives(vue.createVNode("div", {
            "ref": highlightLayerRef,
            "class": highlightClass.concat(showHighlightContent ? highlightClass : maskClass),
            "style": style
          }, [showHighlightContent && vue.createVNode(highlightContent, {
            "class": highlightClass.concat(maskClass),
            "style": style
          }, null)]), [[vue.resolveDirective("transfer-dom"), "body"]]);
        };
        var renderCounter = function renderCounter() {
          var popupSlotCounter = renderTNodeJSX("counter", {
            params: {
              total: stepsTotal.value,
              current: innerCurrent.value
            }
          });
          var popupDefaultCounter = vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__counter")
          }, [popupSlotCounter || vue.createVNode("span", null, [innerCurrent.value + 1, "/", stepsTotal.value])]);
          return vue.createVNode(vue.Fragment, null, [!hideCounter.value && popupDefaultCounter]);
        };
        var renderAction = function renderAction(mode) {
          var isLast = innerCurrent.value === stepsTotal.value - 1;
          var isFirst = innerCurrent.value === 0;
          var buttonSize = mode === "popup" ? "small" : "medium";
          return vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__action")
          }, [!hideSkip.value && !isLast && vue.createVNode(Button, vue.mergeProps({
            "class": "".concat(COMPONENT_NAME.value, "__skip"),
            "theme": "default",
            "size": buttonSize,
            "variant": "base",
            "onClick": handleSkip
          }, getCurrentCrossProps("skipButtonProps")), null), !hidePrev.value && !isFirst && vue.createVNode(Button, vue.mergeProps({
            "class": "".concat(COMPONENT_NAME.value, "__prev"),
            "theme": "primary",
            "size": buttonSize,
            "variant": "base",
            "onClick": handlePrev
          }, getCurrentCrossProps("prevButtonProps")), null), !isLast && vue.createVNode(Button, vue.mergeProps({
            "class": "".concat(COMPONENT_NAME.value, "__next"),
            "theme": "primary",
            "size": buttonSize,
            "variant": "base",
            "onClick": handleNext
          }, getCurrentCrossProps("nextButtonProps")), null), isLast && vue.createVNode(Button, vue.mergeProps({
            "class": "".concat(COMPONENT_NAME.value, "__finish"),
            "theme": "primary",
            "size": buttonSize,
            "variant": "base",
            "onClick": handleFinish
          }, props2.finishButtonProps), null)]);
        };
        var renderTooltipBody = function renderTooltipBody() {
          var title = vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__title")
          }, [currentStepInfo.value.title]);
          var descBody = currentStepInfo.value.body;
          if (typeof descBody === "string") ; else {
            vue.createVNode(descBody, null, null);
          }
          var desc = vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__desc")
          }, [typeof descBody === "string" ? descBody : vue.createVNode(descBody, null, null)]);
          return vue.createVNode(vue.Fragment, null, [title, desc]);
        };
        var renderPopupContent = function renderPopupContent() {
          var footerClasses = ["".concat(COMPONENT_NAME.value, "__footer"), "".concat(COMPONENT_NAME.value, "__footer--popup")];
          var action = vue.createVNode("div", {
            "class": footerClasses
          }, [renderCounter(), renderAction("popup")]);
          return vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__tooltip")
          }, [renderTooltipBody(), action]);
        };
        var renderPopupGuide = function renderPopupGuide() {
          var content = currentStepInfo.value.content;
          var renderBody;
          if (content) {
            var contentProps = {
              handlePrev: handlePrev,
              handleNext: handleNext,
              handleSkip: handleSkip,
              handleFinish: handleFinish,
              current: innerCurrent.value,
              total: stepsTotal.value
            };
            renderBody = function renderBody() {
              return vue.createVNode(content, contentProps, null);
            };
          } else {
            renderBody = renderPopupContent;
          }
          var classes = ["".concat(COMPONENT_NAME.value, "__reference"), "".concat(COMPONENT_NAME.value, "--").concat(currentElmIsFixed.value ? "fixed" : "absolute")];
          return vue.createVNode(Popup, {
            "visible": true,
            "show-arrow": !content,
            "zIndex": zIndex.value,
            "overlayClassName": currentStepInfo.value.stepOverlayClass,
            "overlayInnerClassName": _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__popup--content"), !!content),
            "placement": currentStepInfo.value.placement
          }, {
            "default": function _default() {
              return [vue.withDirectives(vue.createVNode("div", {
                "ref": referenceLayerRef,
                "class": classes
              }, null), [[vue.resolveDirective("transfer-dom"), "body"]])];
            },
            content: renderBody
          });
        };
        var renderDialogGuide = function renderDialogGuide() {
          var _ref3;
          var style = {
            zIndex: zIndex.value
          };
          var wrapperClasses = ["".concat(COMPONENT_NAME.value, "__wrapper"), _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__wrapper--center"), currentStepInfo.value.placement === "center")];
          var dialogClasses = ["".concat(COMPONENT_NAME.value, "__reference"), "".concat(COMPONENT_NAME.value, "--absolute"), "".concat(COMPONENT_NAME.value, "__dialog"), (_ref3 = {}, _defineProperty$3(_ref3, "".concat(COMPONENT_NAME.value, "__dialog--nomask"), !getCurrentCrossProps("showOverlay")), _defineProperty$3(_ref3, currentStepInfo.value.stepOverlayClass, !!currentStepInfo.value.stepOverlayClass), _ref3)];
          var footerClasses = ["".concat(COMPONENT_NAME.value, "__footer"), "".concat(COMPONENT_NAME.value, "__footer--popup")];
          return vue.createVNode(vue.Fragment, null, [vue.withDirectives(vue.createVNode("div", {
            "ref": dialogWrapperRef,
            "class": wrapperClasses,
            "style": style
          }, [vue.createVNode("div", {
            "ref": dialogTooltipRef,
            "class": dialogClasses
          }, [renderTooltipBody(), vue.createVNode("div", {
            "class": footerClasses
          }, [renderCounter(), renderAction("dialog")])])]), [[vue.resolveDirective("transfer-dom"), "body"]])]);
        };
        var renderGuide = function renderGuide() {
          return vue.createVNode(vue.Fragment, null, [renderOverlayLayer(), renderHighlightLayer(), isPopup.value ? renderPopupGuide() : renderDialogGuide()]);
        };
        return vue.createVNode(vue.Fragment, null, [actived.value && renderGuide()]);
      };
    }
  });

  var Guide = withInstall(_Guide);

  var Message = withInstall(_Message);

  var props$2 = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    duration: {
      type: Number,
      "default": 3e3
    },
    footer: {
      type: [String, Function]
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        return ["info", "success", "warning", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    },
    onCloseBtnClick: Function,
    onDurationEnd: Function
  };

  var DEFAULT_Z_INDEX = 6e3;
  var DISTANCE = "16px";
  var PLACEMENT_OFFSET = {
    "top-left": {
      left: DISTANCE,
      top: DISTANCE
    },
    "top-right": {
      right: DISTANCE,
      top: DISTANCE
    },
    "bottom-right": {
      right: DISTANCE,
      bottom: DISTANCE
    },
    "bottom-left": {
      left: DISTANCE,
      bottom: DISTANCE
    }
  };
  var PLACEMENT_LIST = Object.keys(PLACEMENT_OFFSET);

  var ANIMATION_OPTION = {
    duration: 200,
    easing: "linear"
  };
  var fadeIn = function fadeIn(dom, placement) {
    if (!dom) return;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
    var keyframes = getFadeInKeyframes(placement, offsetWidth, offsetHeight);
    if (!keyframes) return;
    dom.animate && dom.animate(keyframes, ANIMATION_OPTION);
  };
  var fadeOut = function fadeOut(dom, placement, onFinish) {
    if (!dom) return;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
    var keyframes = getFadeOutKeyframes(placement, offsetWidth, offsetHeight);
    if (!keyframes) return onFinish();
    var animate = dom.animate && dom.animate(keyframes, ANIMATION_OPTION);
    if (animate) {
      animate.onfinish = function () {
        onFinish();
      };
    } else {
      dom.style.display = "none";
      onFinish();
    }
  };
  var getFadeInKeyframes = function getFadeInKeyframes(placement, offsetWidth, offsetHeight) {
    if (!PLACEMENT_LIST.includes(placement)) return null;
    if (placement === "top-right") {
      return [{
        opacity: 0,
        transform: "translateX(".concat(offsetWidth, "px)")
      }, {
        opacity: 1,
        transform: "translateX(0px)"
      }];
    }
    if (placement === "bottom-right") {
      return [{
        opacity: 0,
        transform: "translateX(".concat(offsetWidth, "px)"),
        marginBottom: "-".concat(offsetHeight, "px")
      }, {
        opacity: 1,
        transform: "translateX(0px)"
      }];
    }
    if (placement === "top-left") {
      return [{
        opacity: 0,
        transform: "translateX(-".concat(offsetWidth, "px)")
      }, {
        opacity: 1,
        transform: "translateX(0px)"
      }];
    }
    if (placement === "bottom-left") {
      return [{
        opacity: 0,
        transform: "translateX(-".concat(offsetWidth, "px)"),
        marginBottom: "-".concat(offsetHeight, "px")
      }, {
        opacity: 1,
        transform: "translateX(0px)"
      }];
    }
  };
  var getFadeOutKeyframes = function getFadeOutKeyframes(placement, offsetWidth, offsetHeight) {
    if (!PLACEMENT_LIST.includes(placement)) return null;
    if (placement === "top-right") {
      return [{
        opacity: 1,
        transform: "translateX(0px)"
      }, {
        opacity: 0,
        transform: "translateX(".concat(offsetWidth, "px)"),
        marginBottom: "-".concat(offsetHeight, "px")
      }];
    }
    if (placement === "bottom-right") {
      return [{
        opacity: 1,
        transform: "translateX(0px)"
      }, {
        opacity: 0,
        transform: "translateX(".concat(offsetWidth, "px)")
      }];
    }
    if (placement === "top-left") {
      return [{
        opacity: 1,
        transform: "translateX(0px)"
      }, {
        opacity: 0,
        transform: "translateX(-".concat(offsetWidth, "px)"),
        marginBottom: "-".concat(offsetHeight, "px")
      }];
    }
    if (placement === "bottom-left") {
      return [{
        opacity: 1,
        transform: "translateX(0px)"
      }, {
        opacity: 0,
        transform: "translateX(-".concat(offsetWidth, "px)")
      }];
    }
  };

  function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$b(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Notification = vue.defineComponent({
    name: "TNotification",
    props: _objectSpread$b(_objectSpread$b({}, props$2), {}, {
      placement: String
    }),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
        expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("notification");
      var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;
      var _useGlobalIcon = useGlobalIcon({
          InfoCircleFilledIcon: infoCircleFilled,
          CheckCircleFilledIcon: checkCircleFilled,
          CloseIcon: close
        }),
        InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        CloseIcon = _useGlobalIcon.CloseIcon;
      var renderTNode = useTNodeJSX();
      var renderContent = useContent();
      var timer = vue.ref(null);
      var notificationRef = vue.ref(null);
      var close$1 = function close(e) {
        var dom = notificationRef.value;
        fadeOut(dom, props2.placement, function () {
          var _props2$onCloseBtnCli;
          (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
            e: e
          });
        });
      };
      var renderIcon = function renderIcon() {
        var iconContent;
        if (props2.icon === false) return null;
        if (isFunction_1(props2.icon)) {
          iconContent = props2.icon(vue.h);
        } else if (slots.icon) {
          iconContent = slots.icon(null);
        } else if (props2.theme) {
          var iconType = props2.theme === "success" ? vue.createVNode(CheckCircleFilledIcon, {
            "class": "".concat(classPrefix.value, "-is-").concat(props2.theme)
          }, null) : vue.createVNode(InfoCircleFilledIcon, {
            "class": "".concat(classPrefix.value, "-is-").concat(props2.theme)
          }, null);
          iconContent = vue.createVNode("div", {
            "class": "t-notification__icon"
          }, [iconType]);
        }
        return iconContent;
      };
      var renderClose = function renderClose() {
        var defaultClose = vue.createVNode(CloseIcon, null, null);
        return vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-message__close"),
          "onClick": close$1
        }, [renderTNode("closeBtn", defaultClose)]);
      };
      var renderMainContent = function renderMainContent() {
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [renderContent("default", "content")]);
      };
      var clearTimer = function clearTimer() {
        props2.duration && clearTimeout(timer.value);
      };
      var setTimer = function setTimer() {
        if (!props2.duration) {
          return;
        }
        timer.value = Number(setTimeout(function () {
          clearTimer();
          var dom = notificationRef.value;
          fadeOut(dom, props2.placement, function () {
            var _props2$onDurationEnd;
            (_props2$onDurationEnd = props2.onDurationEnd) === null || _props2$onDurationEnd === void 0 ? void 0 : _props2$onDurationEnd.call(props2);
          });
        }, props2.duration));
      };
      vue.onBeforeMount(function () {
        props2.duration && setTimer();
      });
      vue.onMounted(function () {
        var dom = notificationRef.value;
        fadeIn(dom, props2.placement);
      });
      expose({
        close: close$1
      });
      return function () {
        return vue.createVNode("div", {
          "ref": notificationRef,
          "class": "".concat(COMPONENT_NAME.value),
          "onMouseenter": clearTimer,
          "onMouseleave": setTimer
        }, [renderIcon(), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__main")
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__title__wrap")
        }, [vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__title")
        }, [renderTNode("title")]), renderClose()]), renderMainContent(), renderTNode("footer")])]);
      };
    }
  });

  function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var NotificationList = vue.defineComponent({
    props: {
      placement: {
        type: String,
        "default": "top-right",
        validator: function validator(v) {
          return ["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(v) > -1;
        }
      }
    },
    setup: function setup(props, _ref) {
      var expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("notification-list");
      var placement = props.placement;
      var list = vue.ref([]);
      var notificationList = vue.ref([]);
      var styles = vue.computed(function () {
        return _objectSpread$a({
          zIndex: DEFAULT_Z_INDEX
        }, PLACEMENT_OFFSET[placement]);
      });
      var add = function add(options) {
        list.value.push(options);
        return list.value.length - 1;
      };
      var remove = function remove(index) {
        list.value.splice(index, 1);
      };
      var removeAll = function removeAll() {
        list.value = [];
      };
      var getOffset = function getOffset(val) {
        if (!val) return;
        return isNaN(Number(val)) ? val : "".concat(val, "px");
      };
      var notificationStyles = function notificationStyles(item) {
        var styles2 = {
          marginBottom: DISTANCE
        };
        if (item.offset) {
          styles2.position = "relative";
          styles2.left = getOffset(item.offset[0]);
          styles2.top = getOffset(item.offset[1]);
        }
        if (item.zIndex) styles2["z-index"] = item.zIndex;
        return styles2;
      };
      var getProps = function getProps(index, item) {
        return _objectSpread$a(_objectSpread$a({}, item), {}, {
          onCloseBtnClick: function onCloseBtnClick(e) {
            if (item.onCloseBtnClick) {
              item.onCloseBtnClick(e);
            }
            return remove(index);
          },
          onDurationEnd: function onDurationEnd() {
            if (item.onDurationEnd) {
              item.onDurationEnd();
            }
            return remove(index);
          }
        });
      };
      var addChild = function addChild(el) {
        if (el) {
          notificationList.value.push(el);
        }
      };
      expose({
        add: add,
        remove: remove,
        removeAll: removeAll,
        list: list,
        notificationList: notificationList
      });
      return function () {
        if (!list.value.length) return;
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__show"),
          "style": styles.value
        }, [list.value.map(function (item, index) {
          return vue.createVNode(_Notification, vue.mergeProps({
            "ref": addChild,
            "key": item.id,
            "style": notificationStyles(item)
          }, getProps(index, item)), null);
        })]);
      };
    }
  });

  function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var seed = 0;
  var instanceMap = /* @__PURE__ */new Map();
  var NotificationFunction = function NotificationFunction(options) {
    seed += 1;
    var hackOptions = _objectSpread$9({
      placement: "top-right",
      zIndex: 6e3,
      attach: "body",
      id: seed
    }, options);
    hackOptions.content = options.content ? options.content : "";
    var attachEl = getAttach(hackOptions.attach);
    if (!instanceMap.get(attachEl)) {
      instanceMap.set(attachEl, {});
    }
    var tmpInstance = instanceMap.get(attachEl)[hackOptions.placement];
    if (!tmpInstance) {
      var wrapper = document.createElement("div");
      var instance = vue.createApp(NotificationList, {
        placement: hackOptions.placement
      }).mount(wrapper);
      instance.add(hackOptions);
      instanceMap.get(attachEl)[hackOptions.placement] = instance;
      tmpInstance = instance;
      attachEl.appendChild(instance.$el);
    } else {
      tmpInstance.add(hackOptions);
    }
    return new Promise(function (resolve) {
      var ins = instanceMap.get(attachEl)[hackOptions.placement];
      vue.nextTick(function () {
        var notificationList = ins.notificationList;
        resolve(notificationList[notificationList.length - 1]);
      });
    });
  };
  var showThemeNotification = function showThemeNotification(theme, options) {
    var hackOptions = _objectSpread$9(_objectSpread$9({}, options), {}, {
      theme: theme
    });
    return NotificationFunction(hackOptions);
  };
  var extraApi = {
    info: function info(options) {
      return showThemeNotification("info", options);
    },
    success: function success(options) {
      return showThemeNotification("success", options);
    },
    warning: function warning(options) {
      return showThemeNotification("warning", options);
    },
    error: function error(options) {
      return showThemeNotification("error", options);
    },
    close: function close(promise) {
      promise.then(function (instance) {
        return instance.close();
      });
    },
    closeAll: function closeAll() {
      instanceMap.forEach(function (attach) {
        Object.keys(attach).forEach(function (placement) {
          attach[placement].removeAll();
        });
      });
    }
  };
  var NotificationPlugin = showThemeNotification;
  NotificationPlugin.install = function (app) {
    app.config.globalProperties.$notify = showThemeNotification;
    Object.keys(extraApi).forEach(function (funcName) {
      app.config.globalProperties.$notify[funcName] = extraApi[funcName];
    });
  };
  Object.keys(extraApi).forEach(function (funcName) {
    NotificationPlugin[funcName] = extraApi[funcName];
  });

  var Notification = withInstall(_Notification);

  var props$1 = {
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: {
      type: Boolean,
      "default": true
    },
    icon: {
      type: Function
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "warning", "danger"].includes(val);
      }
    },
    triggerElement: {
      type: [String, Function]
    },
    visible: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultVisible: Boolean,
    onCancel: Function,
    onConfirm: Function,
    onVisibleChange: Function
  };

  function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Popconfirm = vue.defineComponent({
    name: "TPopconfirm",
    props: props$1,
    setup: function setup(props2) {
      var _useConfig = useConfig("popconfirm"),
        globalConfig = _useConfig.globalConfig;
      var COMPONENT_NAME = usePrefixClass("popconfirm");
      var _useGlobalIcon = useGlobalIcon({
          InfoCircleFilledIcon: infoCircleFilled,
          ErrorCircleFilledIcon: errorCircleFilled
        }),
        InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
      var _toRefs = vue.toRefs(props2),
        visible = _toRefs.visible,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerVisible = _useVModel2[0],
        setInnerVisible = _useVModel2[1];
      var confirmBtnAction = function confirmBtnAction(e) {
        var _props2$onConfirm;
        (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
          e: e
        });
        setInnerVisible(false, {
          e: e
        });
      };
      var cancelBtnAction = function cancelBtnAction(e) {
        var _props2$onCancel;
        (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
          e: e
        });
        setInnerVisible(false, {
          e: e
        });
      };
      var _useAction = useAction({
          confirmBtnAction: confirmBtnAction,
          cancelBtnAction: cancelBtnAction
        }),
        getConfirmBtn = _useAction.getConfirmBtn,
        getCancelBtn = _useAction.getCancelBtn;
      var renderTNodeJSX = useTNodeJSX();
      var innerPopupProps = vue.computed(function () {
        return _objectSpread$8({
          showArrow: props2.showArrow,
          overlayClassName: COMPONENT_NAME.value,
          trigger: "click",
          destroyOnClose: props2.destroyOnClose,
          placement: props2.placement
        }, props2.popupProps);
      });
      var renderTNodeDefault = useTNodeDefault();
      var renderContent = function renderContent() {
        var cancelBtn = getCancelBtn({
          cancelBtn: props2.cancelBtn,
          globalCancel: globalConfig.value.cancel,
          className: "".concat(COMPONENT_NAME.value, "__cancel"),
          size: "small"
        });
        var confirmBtn = getConfirmBtn({
          theme: props2.theme,
          confirmBtn: props2.confirmBtn,
          globalConfirm: globalConfig.value.confirm,
          globalConfirmBtnTheme: globalConfig.value.confirmBtnTheme,
          className: "".concat(COMPONENT_NAME.value, "__confirm"),
          size: "small"
        });
        var renderIcon = function renderIcon() {
          var Icon = {
            "default": InfoCircleFilledIcon,
            warning: ErrorCircleFilledIcon,
            danger: ErrorCircleFilledIcon
          }[props2.theme];
          var theme = props2.theme || "default";
          return renderTNodeDefault("icon", vue.createVNode(Icon, {
            "class": "".concat(COMPONENT_NAME.value, "__icon--").concat(theme)
          }, null));
        };
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__body")
        }, [renderIcon(), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, [renderTNodeJSX("content")])]), Boolean(cancelBtn || confirmBtn) && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__buttons")
        }, [cancelBtn, confirmBtn])]);
      };
      var onPopupVisibleChange = function onPopupVisibleChange(val, context) {
        setInnerVisible(val, context);
      };
      var renderTNodeContent = useContent();
      return function () {
        return vue.createVNode(Popup, vue.mergeProps({
          "visible": innerVisible.value
        }, innerPopupProps.value, {
          "onVisibleChange": onPopupVisibleChange
        }), {
          "default": function _default() {
            return [renderTNodeContent("default", "triggerElement")];
          },
          content: renderContent
        });
      };
    }
  });

  var Popconfirm = withInstall(_Popconfirm);

  var props = {
    abridgeName: {
      type: Array
    },
    accept: {
      type: String,
      "default": ""
    },
    action: {
      type: String,
      "default": ""
    },
    allowUploadDuplicateFile: Boolean,
    autoUpload: {
      type: Boolean,
      "default": true
    },
    beforeAllFilesUpload: {
      type: Function
    },
    beforeUpload: {
      type: Function
    },
    data: {
      type: Object
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    dragContent: {
      type: [String, Function]
    },
    draggable: {
      type: Boolean,
      "default": void 0
    },
    fileListDisplay: {
      type: Function
    },
    files: {
      type: Array,
      "default": void 0
    },
    defaultFiles: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    format: {
      type: Function
    },
    formatRequest: {
      type: Function
    },
    formatResponse: {
      type: Function
    },
    headers: {
      type: Object
    },
    isBatchUpload: Boolean,
    locale: {
      type: Object
    },
    max: {
      type: Number,
      "default": 0
    },
    method: {
      type: String,
      "default": "POST",
      validator: function validator(val) {
        if (!val) return true;
        return ["POST", "GET", "PUT", "OPTION", "PATCH", "post", "get", "put", "option", "patch"].includes(val);
      }
    },
    multiple: Boolean,
    name: {
      type: String,
      "default": "file"
    },
    placeholder: {
      type: String,
      "default": ""
    },
    requestMethod: {
      type: Function
    },
    showUploadProgress: {
      type: Boolean,
      "default": true
    },
    sizeLimit: {
      type: [Number, Object]
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "file",
      validator: function validator(val) {
        if (!val) return true;
        return ["custom", "file", "file-input", "file-flow", "image", "image-flow"].includes(val);
      }
    },
    tips: {
      type: String,
      "default": ""
    },
    trigger: {
      type: Function
    },
    triggerButtonProps: {
      type: Object
    },
    uploadAllFilesInOneRequest: Boolean,
    useMockProgress: {
      type: Boolean,
      "default": true
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    withCredentials: Boolean,
    onCancelUpload: Function,
    onChange: Function,
    onDragenter: Function,
    onDragleave: Function,
    onDrop: Function,
    onFail: Function,
    onOneFileFail: Function,
    onOneFileSuccess: Function,
    onPreview: Function,
    onProgress: Function,
    onRemove: Function,
    onSelectChange: Function,
    onSuccess: Function,
    onValidate: Function,
    onWaitingUploadFilesChange: Function
  };

  var SIZE_MAP = {
    B: 1,
    KB: 1024,
    MB: 1048576,
    GB: 1073741824
  };
  function returnFileSize(number) {
    if (number < SIZE_MAP.KB) {
      return "".concat(number, " Bytes");
    }
    if (number >= SIZE_MAP.KB && number < SIZE_MAP.MB) {
      return "".concat((number / SIZE_MAP.KB).toFixed(1), " KB");
    }
    if (number >= SIZE_MAP.MB && number < SIZE_MAP.GB) {
      return "".concat((number / SIZE_MAP.MB).toFixed(1), " MB");
    }
    if (number >= SIZE_MAP.GB) {
      return "".concat((number / SIZE_MAP.GB).toFixed(1), " GB");
    }
    return "";
  }
  function getCurrentDate() {
    var needTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var d = new Date();
    var month = d.getMonth() + 1;
    month = month < 10 ? "0".concat(month) : month;
    var date = "".concat(d.getFullYear(), "-").concat(month, "-").concat(d.getDate());
    var time = "".concat(d.getHours(), ":").concat(d.getMinutes(), ":").concat(d.getSeconds());
    if (needTime) return [date, time].join(" ");
    return date;
  }
  function abridgeName(inputName) {
    var leftCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
    var rightCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;
    var name = inputName;
    var leftLength = 0;
    var rightLength = 0;
    if (!name) return "";
    for (var i = 0; i < name.length; i++) {
      var w = name[i];
      var isCn = escape(w).indexOf("%u") === 0;
      if (i < leftCount * 2 && leftLength < leftCount) {
        isCn ? leftLength += 1 : leftLength += 2;
      } else if (i > i - rightCount && rightLength < rightCount) {
        isCn ? rightLength += 1 : rightLength += 2;
      }
    }
    return name.replace(new RegExp("^(.{".concat(leftLength, "})(.+)(.{").concat(rightLength, "})$")), "$1\u2026$3");
  }
  function getFileSizeText(number) {
    if (number < 1024) {
      return "".concat(number, " Bytes");
    }
    if (number >= 1024 && number < 1048576) {
      return "".concat((number / 1024).toFixed(1), " KB");
    }
    if (number >= 1048576) {
      return "".concat((number / 1048576).toFixed(1), " MB");
    }
    return "";
  }
  function isOverSizeLimit(fileSize, sizeLimit, unit) {
    var units = ["B", "KB", "MB", "GB"];
    var KBIndex = 1;
    var index = units.indexOf(unit);
    if (index === -1) {
      log.warn("Upload", "`sizeLimit.unit` can only be one of ".concat(units.join()));
      index = KBIndex;
    }
    var num = SIZE_MAP[unit];
    return fileSize > sizeLimit * num;
  }
  function getFileUrlByFileRaw(fileRaw) {
    return new Promise(function (resolve) {
      if (!fileRaw) {
        resolve("");
        return;
      }
      var reader = new FileReader();
      reader.readAsDataURL(fileRaw);
      reader.onload = function (event) {
        var _event$target;
        resolve((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);
      };
    });
  }

  var commonProps = {
    files: Array,
    toUploadFiles: Array,
    displayFiles: Array,
    theme: String,
    abridgeName: Array,
    placeholder: String,
    classPrefix: String,
    tips: String,
    status: String,
    locale: Object,
    sizeOverLimitMessage: String,
    autoUpload: Boolean,
    disabled: Boolean,
    uploading: Boolean,
    tipsClasses: [String, Array, Object],
    errorClasses: [String, Array, Object],
    "default": Function,
    fileListDisplay: Function,
    onRemove: Function
  };

  function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var NormalFile = vue.defineComponent({
    name: "UploadNormalFile",
    props: _objectSpread$7({
      multiple: Boolean
    }, commonProps),
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var _toRefs = vue.toRefs(props),
        theme = _toRefs.theme,
        disabled = _toRefs.disabled,
        classPrefix = _toRefs.classPrefix,
        locale = _toRefs.locale;
      var _useGlobalIcon = useGlobalIcon({
          CloseIcon: close,
          TimeFilledIcon: timeFilled,
          CheckCircleFilledIcon: checkCircleFilled,
          ErrorCircleFilledIcon: errorCircleFilled,
          CloseCircleFilledIcon: closeCircleFilled
        }),
        CloseIcon = _useGlobalIcon.CloseIcon,
        TimeFilledIcon = _useGlobalIcon.TimeFilledIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;
      var renderTNodeJSX = useTNodeJSX();
      var uploadPrefix = "".concat(classPrefix.value, "-upload");
      var renderProgress = function renderProgress(percent) {
        return vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__single-progress")
        }, [vue.createVNode(Loading, null, null), vue.createVNode("span", {
          "class": "".concat(uploadPrefix, "__single-percent")
        }, [percent || 0, "%"])]);
      };
      var renderFilePreviewAsText = function renderFilePreviewAsText(files) {
        var _files$;
        if (theme.value !== "file") return null;
        if (!props.multiple && ((_files$ = files[0]) === null || _files$ === void 0 ? void 0 : _files$.status) === "fail") {
          return null;
        }
        return files.map(function (file, index) {
          return vue.createVNode("div", {
            "class": "".concat(uploadPrefix, "__single-display-text ").concat(uploadPrefix, "__display-text--margin"),
            "key": file.name + index + file.percent + file.status
          }, [file.url ? vue.createVNode(Link, {
            "href": file.url,
            "target": "_blank",
            "hover": "color",
            "size": "small",
            "class": "".concat(uploadPrefix, "__single-name")
          }, {
            "default": function _default() {
              return [file.name];
            }
          }) : vue.createVNode("span", {
            "class": "".concat(uploadPrefix, "__single-name")
          }, [file.name]), file.status === "fail" && vue.createVNode("div", {
            "class": "".concat(uploadPrefix, "__flow-status")
          }, [vue.createVNode(ErrorCircleFilledIcon, null, null)]), file.status === "waiting" && vue.createVNode("div", {
            "class": "".concat(uploadPrefix, "__flow-status")
          }, [vue.createVNode(TimeFilledIcon, null, null)]), file.status === "progress" && renderProgress(file.percent), !disabled.value && file.status !== "progress" && vue.createVNode(CloseIcon, {
            "class": "".concat(uploadPrefix, "__icon-delete"),
            "onClick": function onClick(e) {
              return props.onRemove({
                e: e,
                file: file,
                index: index
              });
            }
          }, null)]);
        });
      };
      var renderFilePreviewAsInput = function renderFilePreviewAsInput() {
        var _props$abridgeName;
        if (theme.value !== "file-input") return;
        var file = props.displayFiles[0];
        var inputTextClass = ["".concat(classPrefix.value, "-input__inner"), _defineProperty$3({}, "".concat(uploadPrefix, "__placeholder"), !props.displayFiles[0])];
        var disabledClass = disabled.value ? "".concat(classPrefix.value, "-is-disabled") : "";
        var fileName = (_props$abridgeName = props.abridgeName) !== null && _props$abridgeName !== void 0 && _props$abridgeName.length && file !== null && file !== void 0 && file.name ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file === null || file === void 0 ? void 0 : file.name;
        return vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__single-input-preview ").concat(classPrefix.value, "-input ").concat(disabledClass)
        }, [vue.createVNode("div", {
          "class": inputTextClass
        }, [vue.createVNode("span", {
          "class": "".concat(uploadPrefix, "__single-input-text")
        }, [file !== null && file !== void 0 && file.name ? fileName : props.placeholder]), (file === null || file === void 0 ? void 0 : file.status) === "progress" && renderProgress(file.percent), (file === null || file === void 0 ? void 0 : file.status) === "waiting" && vue.createVNode(TimeFilledIcon, {
          "class": "".concat(uploadPrefix, "__status-icon")
        }, null), (file === null || file === void 0 ? void 0 : file.url) && file.status === "success" && vue.createVNode(CheckCircleFilledIcon, {
          "class": "".concat(uploadPrefix, "__status-icon")
        }, null), (file === null || file === void 0 ? void 0 : file.name) && file.status === "fail" && vue.createVNode(ErrorCircleFilledIcon, {
          "class": "".concat(uploadPrefix, "__status-icon")
        }, null), !disabled.value && vue.createVNode(CloseCircleFilledIcon, {
          "class": "".concat(uploadPrefix, "__single-input-clear"),
          "onClick": function onClick(_ref3) {
            var e = _ref3.e;
            return props.onRemove({
              e: e,
              file: file,
              index: 0
            });
          }
        }, null)])]);
      };
      return function () {
        var _slots$default, _displayFiles$, _displayFiles$0$respo;
        var classes = ["".concat(uploadPrefix, "__single"), "".concat(uploadPrefix, "__single-").concat(theme.value)];
        var fileListDisplay = renderTNodeJSX("fileListDisplay", {
          params: {
            files: props.displayFiles
          }
        });
        var displayFiles = props.displayFiles;
        return vue.createVNode("div", {
          "class": classes
        }, [theme.value === "file-input" && renderFilePreviewAsInput(), (_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots), theme.value === "file" && props.placeholder && !displayFiles[0] && vue.createVNode("small", {
          "class": props.tipsClasses
        }, [props.placeholder]), fileListDisplay || renderFilePreviewAsText(displayFiles), props.sizeOverLimitMessage && vue.createVNode("small", {
          "class": props.errorClasses
        }, [props.sizeOverLimitMessage]), !props.multiple && ((_displayFiles$ = displayFiles[0]) === null || _displayFiles$ === void 0 ? void 0 : _displayFiles$.status) === "fail" && theme.value === "file" ? vue.createVNode("small", {
          "class": props.errorClasses
        }, [((_displayFiles$0$respo = displayFiles[0].response) === null || _displayFiles$0$respo === void 0 ? void 0 : _displayFiles$0$respo.error) || locale.value.progress.failText]) : null]);
      };
    }
  });

  function useDrag(props) {
    var target = vue.ref(null);
    var dragActive = vue.ref(false);
    var handleDrop = function handleDrop(event) {
      var _props$onDragFileChan, _props$onDrop;
      event.preventDefault();
      (_props$onDragFileChan = props.onDragFileChange) === null || _props$onDragFileChan === void 0 ? void 0 : _props$onDragFileChan.call(props, event);
      (_props$onDrop = props.onDrop) === null || _props$onDrop === void 0 ? void 0 : _props$onDrop.call(props, {
        e: event
      });
      dragActive.value = false;
    };
    var handleDragenter = function handleDragenter(event) {
      var _props$onDragenter;
      event.preventDefault();
      target.value = event.target;
      (_props$onDragenter = props.onDragenter) === null || _props$onDragenter === void 0 ? void 0 : _props$onDragenter.call(props, {
        e: event
      });
      dragActive.value = true;
    };
    var handleDragleave = function handleDragleave(event) {
      var _props$onDragleave;
      if (event.target !== target.value) return;
      event.preventDefault();
      (_props$onDragleave = props.onDragleave) === null || _props$onDragleave === void 0 ? void 0 : _props$onDragleave.call(props, {
        e: event
      });
      dragActive.value = false;
    };
    var handleDragover = function handleDragover(event) {
      event.preventDefault();
    };
    return {
      target: target,
      dragActive: dragActive,
      handleDrop: handleDrop,
      handleDragenter: handleDragenter,
      handleDragleave: handleDragleave,
      handleDragover: handleDragover
    };
  }

  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DraggerFile = vue.defineComponent({
    name: "UploadDraggerFile",
    props: _objectSpread$6(_objectSpread$6({}, commonProps), {}, {
      trigger: Function,
      triggerUpload: Function,
      uploadFiles: Function,
      cancelUpload: Function,
      dragEvents: Object
    }),
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var _toRefs = vue.toRefs(props),
        displayFiles = _toRefs.displayFiles,
        locale = _toRefs.locale,
        disabled = _toRefs.disabled;
      var _useCommonClassName = useCommonClassName(),
        sizeClassNames = _useCommonClassName.sizeClassNames;
      var uploadPrefix = "".concat(props.classPrefix, "-upload");
      var drag = useDrag(props.dragEvents);
      var dragActive = drag.dragActive;
      var draggerFileRef = vue.ref();
      var classes = vue.computed(function () {
        var _displayFiles$value$;
        return ["".concat(uploadPrefix, "__dragger"), _defineProperty$3({}, "".concat(uploadPrefix, "__dragger-center"), !displayFiles.value[0]), _defineProperty$3({}, "".concat(uploadPrefix, "__dragger-error"), ((_displayFiles$value$ = displayFiles.value[0]) === null || _displayFiles$value$ === void 0 ? void 0 : _displayFiles$value$.status) === "fail")];
      });
      var _useGlobalIcon = useGlobalIcon({
          CheckCircleFilledIcon: checkCircleFilled,
          ErrorCircleFilledIcon: errorCircleFilled
        }),
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
      var renderImage = function renderImage() {
        var _file$response;
        var file = displayFiles.value[0];
        if (!file) return null;
        var url = file.url || ((_file$response = file.response) === null || _file$response === void 0 ? void 0 : _file$response.url);
        return vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__dragger-img-wrap")
        }, [url && vue.createVNode(ImageViewer, {
          "images": [url],
          "trigger": function trigger(h2, _ref4) {
            var open = _ref4.open;
            return vue.createVNode("img", {
              "src": url,
              "onClick": open
            }, null);
          }
        }, null)]);
      };
      var renderUploading = function renderUploading() {
        var file = displayFiles.value[0];
        if (!file) return null;
        if (file.status === "progress") {
          return vue.createVNode("div", {
            "class": "".concat(uploadPrefix, "__single-progress")
          }, [vue.createVNode(Loading, null, null), vue.createVNode("span", {
            "class": "".concat(uploadPrefix, "__single-percent")
          }, [file.percent, "%"])]);
        }
      };
      var renderMainPreview = function renderMainPreview() {
        var _locale$value;
        var file = displayFiles.value[0];
        if (!file) return null;
        var fileName = props.abridgeName ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
        return vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__dragger-progress")
        }, [props.theme === "image" && renderImage(), vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__dragger-progress-info")
        }, [vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__dragger-text")
        }, [vue.createVNode("span", {
          "class": "".concat(uploadPrefix, "__single-name")
        }, [fileName]), file.status === "progress" && renderUploading(), file.status === "success" && vue.createVNode(CheckCircleFilledIcon, null, null), file.status === "fail" && vue.createVNode(ErrorCircleFilledIcon, null, null)]), vue.createVNode("small", {
          "class": "".concat(sizeClassNames.small)
        }, [locale.value.file.fileSizeText, "\uFF1A", getFileSizeText(file.size)]), vue.createVNode("small", {
          "class": "".concat(sizeClassNames.small)
        }, [locale.value.file.fileOperationDateText, "\uFF1A", file.uploadTime || "-"]), vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__dragger-btns")
        }, [["progress", "waiting"].includes(file.status) && !disabled && vue.createVNode(Link, {
          "theme": "primary",
          "hover": "color",
          "class": "".concat(uploadPrefix, "__dragger-progress-cancel"),
          "onClick": function onClick(e) {
            var _props$cancelUpload;
            return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
              e: e,
              file: props.toUploadFiles[0] || props.files[0]
            });
          }
        }, {
          "default": function _default() {
            return [(_locale$value = locale.value) === null || _locale$value === void 0 ? void 0 : _locale$value.cancelUploadText];
          }
        }), !props.autoUpload && file.status === "waiting" && vue.createVNode(Link, {
          "theme": "primary",
          "hover": "color",
          "disabled": disabled.value,
          "onClick": function onClick() {
            var _props$uploadFiles;
            return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
          },
          "class": "".concat(uploadPrefix, "__dragger-upload-btn")
        }, {
          "default": function _default() {
            return [locale.value.triggerUploadText.normal];
          }
        })]), ["fail", "success"].includes(file === null || file === void 0 ? void 0 : file.status) && !disabled.value && vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__dragger-btns")
        }, [vue.createVNode(Link, {
          "theme": "primary",
          "hover": "color",
          "disabled": disabled.value,
          "class": "".concat(uploadPrefix, "__dragger-progress-cancel"),
          "onClick": props.triggerUpload
        }, {
          "default": function _default() {
            return [locale.value.triggerUploadText.reupload];
          }
        }), vue.createVNode(Link, {
          "theme": "danger",
          "hover": "color",
          "disabled": disabled.value,
          "class": "".concat(uploadPrefix, "__dragger-delete-btn"),
          "onClick": function onClick(e) {
            return props.onRemove({
              e: e,
              index: 0,
              file: file
            });
          }
        }, {
          "default": function _default() {
            return [locale.value.triggerUploadText["delete"]];
          }
        })])])]);
      };
      var renderDefaultDragElement = function renderDefaultDragElement() {
        var _locale$value$trigger;
        var unActiveElement = vue.createVNode("div", null, [vue.createVNode("span", {
          "class": "".concat(uploadPrefix, "--highlight")
        }, [(_locale$value$trigger = locale.value.triggerUploadText) === null || _locale$value$trigger === void 0 ? void 0 : _locale$value$trigger.normal]), vue.createVNode("span", null, ["\xA0\xA0/\xA0\xA0", locale.value.dragger.draggingText])]);
        var activeElement = vue.createVNode("div", null, [locale.value.dragger.dragDropText]);
        return dragActive.value ? activeElement : unActiveElement;
      };
      var getContent = function getContent() {
        var _slots$default;
        var file = displayFiles.value[0];
        if (file && ["progress", "success", "fail", "waiting"].includes(file.status)) {
          return renderMainPreview();
        }
        return vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__trigger"),
          "onClick": props.triggerUpload
        }, [((_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots)) || renderDefaultDragElement()]);
      };
      return function () {
        var _props$trigger;
        return vue.createVNode("div", {
          "ref": draggerFileRef,
          "class": classes.value,
          "onDrop": drag.handleDrop,
          "onDragenter": drag.handleDragenter,
          "onDragover": drag.handleDragover,
          "onDragleave": drag.handleDragleave
        }, [((_props$trigger = props.trigger) === null || _props$trigger === void 0 ? void 0 : _props$trigger.call(props, vue.h, {
          files: displayFiles.value,
          dragActive: dragActive.value
        })) || getContent()]);
      };
    }
  });

  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ImageCard = vue.defineComponent({
    name: "UploadImageCard",
    props: _objectSpread$5(_objectSpread$5({}, commonProps), {}, {
      multiple: Boolean,
      max: Number,
      disabled: Boolean,
      showUploadProgress: Boolean,
      triggerUpload: Function,
      uploadFiles: Function,
      cancelUpload: Function,
      onPreview: Function
    }),
    setup: function setup(props) {
      var _toRefs = vue.toRefs(props),
        displayFiles = _toRefs.displayFiles,
        locale = _toRefs.locale,
        classPrefix = _toRefs.classPrefix,
        multiple = _toRefs.multiple,
        max = _toRefs.max;
      var _useGlobalIcon = useGlobalIcon({
          AddIcon: add$1,
          BrowseIcon: browse,
          DeleteIcon: _delete,
          ErrorCircleFilledIcon: errorCircleFilled
        }),
        BrowseIcon = _useGlobalIcon.BrowseIcon,
        DeleteIcon = _useGlobalIcon.DeleteIcon,
        AddIcon = _useGlobalIcon.AddIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
      var showTrigger = vue.computed(function () {
        var _displayFiles$value;
        if (multiple.value) {
          return !max.value || displayFiles.value.length < max.value;
        }
        return !((_displayFiles$value = displayFiles.value) !== null && _displayFiles$value !== void 0 && _displayFiles$value[0]);
      });
      var renderMainContent = function renderMainContent(file, index) {
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__card-content ").concat(classPrefix.value, "-upload__card-box")
        }, [vue.createVNode("img", {
          "class": "".concat(classPrefix.value, "-upload__card-image"),
          "src": file.url
        }, null), vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__card-mask")
        }, [vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-upload__card-mask-item"),
          "onClick": function onClick(e) {
            return e.stopPropagation();
          }
        }, [vue.createVNode(ImageViewer, {
          "images": displayFiles.value.map(function (t) {
            return t.url;
          }),
          "defaultIndex": index,
          "trigger": function trigger(h, _ref) {
            var open = _ref.open;
            return vue.createVNode(BrowseIcon, {
              "onClick": function onClick(_ref2) {
                var _props$onPreview;
                var e = _ref2.e;
                (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 ? void 0 : _props$onPreview.call(props, {
                  file: file,
                  index: index,
                  e: e
                });
                open();
              }
            }, null);
          }
        }, null)]), !props.disabled && vue.createVNode(vue.Fragment, null, [vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-upload__card-mask-item-divider")
        }, null), vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-upload__card-mask-item"),
          "onClick": function onClick(e) {
            return e.stopPropagation();
          }
        }, [vue.createVNode(DeleteIcon, {
          "onClick": function onClick(_ref3) {
            var _props$onRemove;
            var e = _ref3.e;
            return props === null || props === void 0 ? void 0 : (_props$onRemove = props.onRemove) === null || _props$onRemove === void 0 ? void 0 : _props$onRemove.call(props, {
              e: e,
              file: file,
              index: index
            });
          }
        }, null)])])])]);
      };
      var renderProgressFile = function renderProgressFile(file, loadCard) {
        var _locale$value, _locale$value$progres;
        return vue.createVNode("div", {
          "class": loadCard
        }, [vue.createVNode(Loading, {
          "loading": true,
          "size": "medium"
        }, null), vue.createVNode("p", null, [(_locale$value = locale.value) === null || _locale$value === void 0 ? void 0 : (_locale$value$progres = _locale$value.progress) === null || _locale$value$progres === void 0 ? void 0 : _locale$value$progres.uploadingText, props.showUploadProgress ? " ".concat(file.percent, "%") : ""])]);
      };
      var renderFailFile = function renderFailFile(file, index, loadCard) {
        var _file$response, _locale$value2, _locale$value2$progre;
        return vue.createVNode("div", {
          "class": loadCard
        }, [vue.createVNode(ErrorCircleFilledIcon, null, null), vue.createVNode("p", null, [((_file$response = file.response) === null || _file$response === void 0 ? void 0 : _file$response.error) || ((_locale$value2 = locale.value) === null || _locale$value2 === void 0 ? void 0 : (_locale$value2$progre = _locale$value2.progress) === null || _locale$value2$progre === void 0 ? void 0 : _locale$value2$progre.failText)]), vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__card-mask")
        }, [vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-upload__card-mask-item"),
          "onClick": function onClick(e) {
            return e.stopPropagation();
          }
        }, [vue.createVNode(DeleteIcon, {
          "onClick": function onClick(_ref4) {
            var _props$onRemove2;
            var e = _ref4.e;
            return props === null || props === void 0 ? void 0 : (_props$onRemove2 = props.onRemove) === null || _props$onRemove2 === void 0 ? void 0 : _props$onRemove2.call(props, {
              e: e,
              file: file,
              index: index
            });
          }
        }, null)])])]);
      };
      return function () {
        var _displayFiles$value2, _locale$value3, _locale$value3$trigge;
        var cardItemClasses = "".concat(classPrefix.value, "-upload__card-item ").concat(classPrefix.value, "-is-background");
        return vue.createVNode("div", null, [vue.createVNode("ul", {
          "class": "".concat(classPrefix.value, "-upload__card")
        }, [(_displayFiles$value2 = displayFiles.value) === null || _displayFiles$value2 === void 0 ? void 0 : _displayFiles$value2.map(function (file, index) {
          var loadCard = "".concat(classPrefix.value, "-upload__card-container ").concat(classPrefix.value, "-upload__card-box");
          var fileName = props.abridgeName ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
          return vue.createVNode("li", {
            "class": cardItemClasses,
            "key": index
          }, [file.status === "progress" && renderProgressFile(file, loadCard), file.status === "fail" && renderFailFile(file, index, loadCard), !["progress", "fail"].includes(file.status) && file.url && renderMainContent(file, index), vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-upload__card-name")
          }, [fileName])]);
        }), showTrigger.value && vue.createVNode("li", {
          "class": cardItemClasses,
          "onClick": props.triggerUpload
        }, [vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__card-container ").concat(classPrefix.value, "-upload__card-box")
        }, [vue.createVNode(AddIcon, null, null), vue.createVNode("p", {
          "class": "".concat(classPrefix.value, "-size-s")
        }, [(_locale$value3 = locale.value) === null || _locale$value3 === void 0 ? void 0 : (_locale$value3$trigge = _locale$value3.triggerUploadText) === null || _locale$value3$trigge === void 0 ? void 0 : _locale$value3$trigge.image])])])])]);
      };
    }
  });

  var classnames = {exports: {}};

  (function (module) {
    /* global define */

    (function () {

      var hasOwn = {}.hasOwnProperty;
      function classNames() {
        var classes = [];
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg) continue;
          var argType = _typeof$2(arg);
          if (argType === 'string' || argType === 'number') {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);
              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === 'object') {
            if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
              classes.push(arg.toString());
              continue;
            }
            for (var key in arg) {
              if (hasOwn.call(arg, key) && arg[key]) {
                classes.push(key);
              }
            }
          }
        }
        return classes.join(' ');
      }
      if (module.exports) {
        classNames["default"] = classNames;
        module.exports = classNames;
      } else {
        window.classNames = classNames;
      }
    })();
  })(classnames);
  var classNames = classnames.exports;

  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _isSlot(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var MultipleFlowList = vue.defineComponent({
    name: "UploadMultipleFlowList",
    props: _objectSpread$4(_objectSpread$4({}, commonProps), {}, {
      uploadFiles: Function,
      cancelUpload: Function,
      dragEvents: Object,
      disabled: Boolean,
      isBatchUpload: Boolean,
      draggable: Boolean,
      onPreview: Function
    }),
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var _toRefs = vue.toRefs(props),
        locale = _toRefs.locale,
        uploading = _toRefs.uploading,
        disabled = _toRefs.disabled,
        displayFiles = _toRefs.displayFiles,
        classPrefix = _toRefs.classPrefix;
      var uploadPrefix = "".concat(classPrefix.value, "-upload");
      var renderTNodeJSX = useTNodeJSX();
      var _useGlobalIcon = useGlobalIcon({
          BrowseIcon: browse,
          DeleteIcon: _delete,
          CheckCircleFilledIcon: checkCircleFilled,
          ErrorCircleFilledIcon: errorCircleFilled,
          TimeFilledIcon: timeFilled
        }),
        BrowseIcon = _useGlobalIcon.BrowseIcon,
        DeleteIcon = _useGlobalIcon.DeleteIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
        TimeFilledIcon = _useGlobalIcon.TimeFilledIcon;
      var drag = useDrag(props.dragEvents);
      var uploadText = vue.computed(function () {
        if (uploading.value) return "".concat(locale.value.progress.uploadingText);
        return locale.value.triggerUploadText.normal;
      });
      var innerDragEvents = vue.computed(function () {
        var draggable = props.draggable === void 0 ? true : props.draggable;
        return draggable ? {
          onDrop: drag.handleDrop,
          onDragenter: drag.handleDragenter,
          onDragover: drag.handleDragover,
          onDragleave: drag.handleDragleave
        } : {};
      });
      var getStatusMap = function getStatusMap() {
        var iconMap = {
          success: vue.createVNode(CheckCircleFilledIcon, null, null),
          fail: vue.createVNode(ErrorCircleFilledIcon, null, null),
          progress: vue.createVNode(Loading, null, null),
          waiting: vue.createVNode(TimeFilledIcon, null, null)
        };
        var progress = locale.value.progress;
        var textMap = {
          success: progress === null || progress === void 0 ? void 0 : progress.successText,
          fail: progress === null || progress === void 0 ? void 0 : progress.failText,
          progress: progress === null || progress === void 0 ? void 0 : progress.uploadingText,
          waiting: progress === null || progress === void 0 ? void 0 : progress.waitingText
        };
        return {
          iconMap: iconMap,
          textMap: textMap
        };
      };
      var renderEmpty = function renderEmpty() {
        return vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__flow-empty")
        }, [drag.dragActive.value ? locale.value.dragger.dragDropText : locale.value.dragger.clickAndDragText]);
      };
      var renderImgItem = function renderImgItem(file, index) {
        var _getStatusMap = getStatusMap(),
          iconMap = _getStatusMap.iconMap,
          textMap = _getStatusMap.textMap;
        return vue.createVNode("li", {
          "class": "".concat(uploadPrefix, "__card-item"),
          "key": file.name + index + file.percent + file.status
        }, [vue.createVNode("div", {
          "class": classNames(["".concat(uploadPrefix, "__card-content"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-bordered"), file.status !== "waiting")])
        }, [["fail", "progress"].includes(file.status) && vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__card-status-wrap")
        }, [iconMap[file.status], vue.createVNode("p", null, [textMap[file.status], file.status === "progress" ? " ".concat(file.percent, "%") : ""])]), (["waiting", "success"].includes(file.status) || !file.status && file.url) && vue.createVNode("img", {
          "class": "".concat(uploadPrefix, "__card-image"),
          "src": file.url || "//tdesign.gtimg.com/tdesign-default-img.png"
        }, null), vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__card-mask")
        }, [file.url && vue.createVNode("span", {
          "class": "".concat(uploadPrefix, "__card-mask-item")
        }, [vue.createVNode(ImageViewer, {
          "images": displayFiles.value.map(function (t) {
            return t.url;
          }),
          "defaultIndex": index,
          "trigger": function trigger(h2, _ref3) {
            var open = _ref3.open;
            return vue.createVNode(BrowseIcon, {
              "onClick": function onClick(_ref4) {
                var _props$onPreview;
                var e = _ref4.e;
                open();
                (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 ? void 0 : _props$onPreview.call(props, {
                  file: file,
                  index: index,
                  e: e
                });
              }
            }, null);
          }
        }, null), vue.createVNode("span", {
          "class": "".concat(uploadPrefix, "__card-mask-item-divider")
        }, null)]), !disabled.value && vue.createVNode("span", {
          "class": "".concat(uploadPrefix, "__card-mask-item"),
          "onClick": function onClick(e) {
            return props.onRemove({
              e: e,
              index: index,
              file: file
            });
          }
        }, [vue.createVNode(DeleteIcon, null, null)])])]), vue.createVNode("p", {
          "class": "".concat(uploadPrefix, "__card-name")
        }, [abridgeName(file.name)])]);
      };
      var renderStatus = function renderStatus(file) {
        var _getStatusMap2 = getStatusMap(),
          iconMap = _getStatusMap2.iconMap,
          textMap = _getStatusMap2.textMap;
        return vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__flow-status")
        }, [iconMap[file.status], vue.createVNode("span", null, [textMap[file.status], file.status === "progress" ? " ".concat(file.percent, "%") : ""])]);
      };
      var renderNormalActionCol = function renderNormalActionCol(file, index) {
        var _locale$value, _locale$value$trigger;
        return vue.createVNode("td", null, [vue.createVNode(Link, {
          "theme": "primary",
          "hover": "color",
          "content": (_locale$value = locale.value) === null || _locale$value === void 0 ? void 0 : (_locale$value$trigger = _locale$value.triggerUploadText) === null || _locale$value$trigger === void 0 ? void 0 : _locale$value$trigger["delete"],
          "onClick": function onClick(e) {
            return props.onRemove({
              e: e,
              index: index,
              file: file
            });
          }
        }, null)]);
      };
      var renderBatchActionCol = function renderBatchActionCol(index) {
        var _locale$value2, _locale$value2$trigge;
        return index === 0 ? vue.createVNode("td", {
          "rowSpan": displayFiles.value.length,
          "class": "".concat(uploadPrefix, "__flow-table__batch-row")
        }, [vue.createVNode(Link, {
          "theme": "primary",
          "hover": "color",
          "content": (_locale$value2 = locale.value) === null || _locale$value2 === void 0 ? void 0 : (_locale$value2$trigge = _locale$value2.triggerUploadText) === null || _locale$value2$trigge === void 0 ? void 0 : _locale$value2$trigge["delete"],
          "onClick": function onClick(e) {
            return props.onRemove({
              e: e,
              index: -1,
              file: null
            });
          }
        }, null)]) : null;
      };
      var renderFileList = function renderFileList() {
        var _locale$value$file, _locale$value$file2, _locale$value$file3, _locale$value$file4;
        var customList = renderTNodeJSX("fileListDisplay", {
          params: {
            files: props.displayFiles,
            dragEvents: innerDragEvents.value
          }
        });
        if (customList) return customList;
        return vue.createVNode("table", vue.mergeProps({
          "class": "".concat(uploadPrefix, "__flow-table")
        }, innerDragEvents.value), [vue.createVNode("thead", null, [vue.createVNode("tr", null, [vue.createVNode("th", null, [(_locale$value$file = locale.value.file) === null || _locale$value$file === void 0 ? void 0 : _locale$value$file.fileNameText]), vue.createVNode("th", {
          "style": {
            minWidth: "120px"
          }
        }, [(_locale$value$file2 = locale.value.file) === null || _locale$value$file2 === void 0 ? void 0 : _locale$value$file2.fileSizeText]), vue.createVNode("th", {
          "style": {
            minWidth: "120px"
          }
        }, [(_locale$value$file3 = locale.value.file) === null || _locale$value$file3 === void 0 ? void 0 : _locale$value$file3.fileStatusText]), disabled.value ? null : vue.createVNode("th", null, [(_locale$value$file4 = locale.value.file) === null || _locale$value$file4 === void 0 ? void 0 : _locale$value$file4.fileOperationText])])]), vue.createVNode("tbody", null, [!displayFiles.value.length && vue.createVNode("tr", null, [vue.createVNode("td", {
          "colSpan": 4
        }, [renderEmpty()])]), displayFiles.value.map(function (file, index) {
          var _props$abridgeName;
          var showBatchUploadAction = props.isBatchUpload;
          var deleteNode = showBatchUploadAction && !displayFiles.value.find(function (item) {
            return item.status !== "success";
          }) ? renderBatchActionCol(index) : renderNormalActionCol(file, index);
          var fileName = (_props$abridgeName = props.abridgeName) !== null && _props$abridgeName !== void 0 && _props$abridgeName.length ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
          return vue.createVNode("tr", {
            "key": file.name + index
          }, [vue.createVNode("td", null, [file.url ? vue.createVNode(Link, {
            "href": file.url,
            "target": "_blank",
            "hover": "color"
          }, _isSlot(fileName) ? fileName : {
            "default": function _default() {
              return [fileName];
            }
          }) : fileName]), vue.createVNode("td", null, [returnFileSize(file.size)]), vue.createVNode("td", null, [renderStatus(file)]), disabled.value ? null : deleteNode]);
        })])]);
      };
      return function () {
        var _slots$default, _locale$value3;
        var cardClassName = "".concat(uploadPrefix, "__flow-card-area");
        return vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__flow ").concat(uploadPrefix, "__flow-").concat(props.theme)
        }, [vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__flow-op")
        }, [(_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots), props.placeholder && vue.createVNode("small", {
          "class": "".concat(uploadPrefix, "__flow-placeholder ").concat(uploadPrefix, "__placeholder")
        }, [props.placeholder])]), props.theme === "image-flow" && vue.createVNode("div", vue.mergeProps({
          "class": cardClassName
        }, innerDragEvents.value), [displayFiles.value.length ? vue.createVNode("ul", {
          "class": "".concat(uploadPrefix, "__card clearfix")
        }, [displayFiles.value.map(function (file, index) {
          return renderImgItem(file, index);
        })]) : renderEmpty()]), props.theme === "file-flow" && (displayFiles.value.length ? renderFileList() : vue.createVNode("div", vue.mergeProps({
          "class": cardClassName
        }, innerDragEvents.value), [renderEmpty()])), !props.autoUpload && vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__flow-bottom")
        }, [vue.createVNode(Button, {
          "theme": "default",
          "onClick": function onClick(e) {
            var _props$cancelUpload;
            return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
              e: e
            });
          },
          "disabled": disabled.value || !uploading.value,
          "content": (_locale$value3 = locale.value) === null || _locale$value3 === void 0 ? void 0 : _locale$value3.cancelUploadText
        }, null), vue.createVNode(Button, {
          "disabled": disabled.value || uploading.value || !displayFiles.value.length,
          "theme": "primary",
          "loading": uploading.value,
          "onClick": function onClick() {
            var _props$uploadFiles;
            return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
          },
          "content": uploadText.value
        }, null)])]);
      };
    }
  });

  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$4(arr) || _nonIterableRest();
  }

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function xhr(_ref) {
    var _files$;
    var _ref$method = _ref.method,
      method = _ref$method === void 0 ? "POST" : _ref$method,
      action = _ref.action,
      _ref$withCredentials = _ref.withCredentials,
      withCredentials = _ref$withCredentials === void 0 ? false : _ref$withCredentials,
      _ref$headers = _ref.headers,
      headers = _ref$headers === void 0 ? {} : _ref$headers,
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data,
      file = _ref.file,
      _ref$files = _ref.files,
      files = _ref$files === void 0 ? [] : _ref$files,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? "file" : _ref$name,
      _ref$useMockProgress = _ref.useMockProgress,
      useMockProgress = _ref$useMockProgress === void 0 ? true : _ref$useMockProgress,
      formatRequest = _ref.formatRequest,
      onError = _ref.onError,
      onProgress = _ref.onProgress,
      onSuccess = _ref.onSuccess;
    var innerFiles = files || [];
    var percent = 0;
    var xhr2 = new XMLHttpRequest();
    if (withCredentials) {
      xhr2.withCredentials = true;
    }
    var timer1;
    var timer2;
    if (useMockProgress && ((_files$ = files[0]) === null || _files$ === void 0 ? void 0 : _files$.status) === "progress") {
      var timer22 = setTimeout(function () {
        timer1 = setInterval(function () {
          if (percent + 10 < 100) {
            percent = Math.max(percent + 10, percent);
            if (files[0] && percent !== files[0].percent) {
              files[0].percent = percent;
              onProgress({
                percent: percent,
                file: file || innerFiles[0],
                files: innerFiles.map(function (file2) {
                  return _objectSpread$3(_objectSpread$3({}, file2), {}, {
                    percent: percent
                  });
                }),
                type: "mock"
              });
            }
          } else {
            clearInterval(timer1);
          }
        }, 300);
        clearTimeout(timer22);
      }, 300);
    }
    var requestData = {};
    if (data) {
      var extraData = typeof data === "function" ? data(file) : data;
      Object.assign(requestData, extraData);
    }
    innerFiles.forEach(function (file2, index) {
      var fileField = innerFiles.length > 1 ? "".concat(name, "[").concat(index, "]") : name;
      requestData[fileField] = file2.raw;
      requestData[name] = file2.raw;
    });
    if (formatRequest) {
      requestData = formatRequest(requestData);
    }
    var formData = new FormData();
    Object.keys(requestData).forEach(function (key) {
      formData.append(key, requestData[key]);
    });
    xhr2.open(method, action, true);
    Object.keys(headers).forEach(function (key) {
      xhr2.setRequestHeader(key, headers[key]);
    });
    xhr2.onerror = function (event) {
      onError({
        event: event,
        file: file,
        files: innerFiles
      });
      clearInterval(timer1);
      clearTimeout(timer2);
    };
    if (xhr2.upload) {
      xhr2.upload.onprogress = function (event) {
        var _innerFiles$;
        var realPercent = 0;
        if (event.total > 0) {
          realPercent = Math.round(event.loaded / event.total * 100);
        }
        percent = Math.max(realPercent, percent);
        if (percent !== realPercent && ((_innerFiles$ = innerFiles[0]) === null || _innerFiles$ === void 0 ? void 0 : _innerFiles$.percent) !== percent) {
          var progressFiles = innerFiles.map(function (item) {
            return _objectSpread$3(_objectSpread$3({}, item), {}, {
              percent: percent
            });
          });
          onProgress({
            event: event,
            percent: percent,
            file: file || progressFiles[0],
            files: progressFiles,
            type: "real"
          });
        }
      };
    }
    xhr2.onload = function (event) {
      var response = {};
      var isFail = xhr2.status < 200 || xhr2.status >= 300;
      if (isFail) {
        return onError({
          event: event,
          file: file,
          files: innerFiles,
          response: response
        });
      }
      var text = xhr2.responseText || xhr2.response;
      try {
        response = JSON.parse(text);
      } catch (e) {
        response = text;
      }
      clearInterval(timer1);
      clearTimeout(timer2);
      innerFiles.forEach(function (file2) {
        var _response;
        file2.percent = 100;
        file2.status = "success";
        file2.uploadTime = ((_response = response) === null || _response === void 0 ? void 0 : _response.uploadTime) || getCurrentDate();
      });
      onSuccess({
        event: event,
        file: file || innerFiles[0],
        files: _toConsumableArray(innerFiles),
        response: response
      });
    };
    xhr2.send(formData);
    return xhr2;
  }

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function handleBeforeUpload(file, params) {
    var sizeLimit = params.sizeLimit,
      beforeUpload = params.beforeUpload;
    var sizePromise = new Promise(function (resolve) {
      var result = null;
      if (sizeLimit) {
        var sizeLimitObj = typeof sizeLimit === "number" ? {
          size: sizeLimit,
          unit: "KB"
        } : sizeLimit;
        var limit = isOverSizeLimit(file.size, sizeLimitObj.size, sizeLimitObj.unit);
        if (limit) {
          result = sizeLimitObj;
        }
      }
      resolve(result);
    });
    var promiseList = [sizePromise, void 0];
    if (typeof beforeUpload === "function") {
      var r = beforeUpload(file);
      var p = r instanceof Promise ? r : new Promise(function (resolve) {
        return resolve(r);
      });
      promiseList[1] = p;
    }
    return new Promise(function (resolve) {
      Promise.all(promiseList).then(function (r) {
        resolve(r);
      });
    });
  }
  function handleError(options) {
    var event = options.event,
      files = options.files,
      response = options.response,
      formatResponse = options.formatResponse;
    files.forEach(function (file) {
      file.status = "fail";
    });
    var res = response;
    if (typeof formatResponse === "function") {
      res = formatResponse(response, {
        file: files[0],
        currentFiles: files
      });
    }
    return {
      response: res,
      event: event,
      files: files
    };
  }
  function handleSuccess(params) {
    var event = params.event,
      files = params.files,
      response = params.response;
    if ((files === null || files === void 0 ? void 0 : files.length) <= 0) {
      log.error("Upload", "Empty File in Success Callback");
    }
    files.forEach(function (file) {
      var _file$response;
      file.percent = 100;
      file.status = "success";
      (_file$response = file.response) === null || _file$response === void 0 ? true : delete _file$response.error;
    });
    var res = response;
    files[0].url = res.url || files[0].url;
    return {
      response: res,
      event: event,
      files: files
    };
  }
  function handleRequestMethodResponse(res) {
    if (!res) {
      log.error("Upload", "`requestMethodResponse` is required.");
      return false;
    }
    if (!res.status) {
      log.error("Upload", "`requestMethodResponse.status` is missing, which value only can be `success` or `fail`");
      return false;
    }
    if (!["success", "fail"].includes(res.status)) {
      log.error("Upload", "`requestMethodResponse.status` must be `success` or `fail`, examples `{ status: 'success', response: { url: '' } }`");
      return false;
    }
    if (res.status === "success" && (!res.response || !res.response.url)) {
      log.warn("Upload", "`requestMethodResponse.response.url` is required as `status` is `success`");
    }
    return true;
  }
  function uploadOneRequest(params) {
    var action = params.action,
      toUploadFiles = params.toUploadFiles,
      requestMethod = params.requestMethod;
    return new Promise(function (resolve) {
      if (!action && !requestMethod) {
        log.error("Upload", "one of action and requestMethod must be exist.");
        resolve({});
        return;
      }
      if (!toUploadFiles || !toUploadFiles.length) {
        log.warn("Upload", "No files need to be uploaded");
        resolve({});
        return;
      }
      toUploadFiles.forEach(function (file) {
        file.status = "progress";
      });
      if (requestMethod) {
        requestMethod(params.multiple ? toUploadFiles : toUploadFiles[0]).then(function (res) {
          if (!handleRequestMethodResponse(res)) {
            resolve({});
            return;
          }
          var response = res.response;
          if (res.status === "fail") {
            response = response || {};
            response.error = res.error || response.error;
          }
          toUploadFiles.forEach(function (file) {
            file.status = res.status;
            file.response = response;
            file.url = response.url;
          });
          var result = {
            response: response,
            file: toUploadFiles[0],
            files: toUploadFiles
          };
          if (res.status === "success") {
            var _params$onResponseSuc;
            (_params$onResponseSuc = params.onResponseSuccess) === null || _params$onResponseSuc === void 0 ? void 0 : _params$onResponseSuc.call(params, result);
          } else if (res.status === "fail") {
            var _params$onResponseErr;
            (_params$onResponseErr = params.onResponseError) === null || _params$onResponseErr === void 0 ? void 0 : _params$onResponseErr.call(params, result);
          }
          resolve({
            status: res.status,
            data: result
          });
        });
      } else {
        var _params$setXhrObject;
        var xhrReq = xhr({
          action: params.action,
          files: params.toUploadFiles,
          useMockProgress: params.useMockProgress,
          onError: function onError(p) {
            var _params$onResponseErr2;
            var r = handleError(_objectSpread$2(_objectSpread$2({}, p), {}, {
              formatResponse: params.formatResponse
            }));
            (_params$onResponseErr2 = params.onResponseError) === null || _params$onResponseErr2 === void 0 ? void 0 : _params$onResponseErr2.call(params, r);
            resolve({
              status: "fail",
              data: r
            });
          },
          onProgress: params.onResponseProgress,
          onSuccess: function onSuccess(p) {
            var formatResponse = params.formatResponse;
            var res = p.response;
            if (typeof formatResponse === "function") {
              res = formatResponse(p.response, {
                file: p.file,
                currentFiles: p.files
              });
            }
            if (res.error) {
              var _params$onResponseErr3;
              var r = handleError(_objectSpread$2(_objectSpread$2({}, p), {}, {
                response: res
              }));
              (_params$onResponseErr3 = params.onResponseError) === null || _params$onResponseErr3 === void 0 ? void 0 : _params$onResponseErr3.call(params, r);
              resolve({
                status: "fail",
                data: r
              });
            } else {
              var _params$onResponseSuc2;
              p.file.response = res;
              p.files[0].response = res;
              var _r = handleSuccess(_objectSpread$2(_objectSpread$2({}, p), {}, {
                response: res
              }));
              (_params$onResponseSuc2 = params.onResponseSuccess) === null || _params$onResponseSuc2 === void 0 ? void 0 : _params$onResponseSuc2.call(params, _r);
              resolve({
                status: "success",
                data: _r
              });
            }
          },
          formatRequest: params.formatRequest,
          data: params.data,
          name: params.name,
          headers: params.headers,
          withCredentials: params.withCredentials,
          method: params.method
        });
        (_params$setXhrObject = params.setXhrObject) === null || _params$setXhrObject === void 0 ? void 0 : _params$setXhrObject.call(params, {
          files: params.toUploadFiles,
          xhrReq: xhrReq
        });
      }
    });
  }
  function upload(params) {
    var uploadAllFilesInOneRequest = params.uploadAllFilesInOneRequest,
      toUploadFiles = params.toUploadFiles,
      uploadedFiles = params.uploadedFiles,
      isBatchUpload = params.isBatchUpload;
    var thisUploadFiles = toUploadFiles.filter(function (t) {
      return !t.response || t.response && !t.response.error;
    });
    return new Promise(function (resolve) {
      if (uploadAllFilesInOneRequest || !params.multiple) {
        uploadOneRequest(params).then(function (r) {
          if (r.status === "success") {
            r.data.files = isBatchUpload || !params.multiple ? r.data.files : uploadedFiles.concat(r.data.files);
          }
          var failedFiles = r.status === "fail" ? r.data.files : [];
          resolve(_objectSpread$2(_objectSpread$2({}, r), {}, {
            failedFiles: failedFiles
          }));
        });
        return;
      }
      var list = thisUploadFiles.map(function (file) {
        return uploadOneRequest(_objectSpread$2(_objectSpread$2({}, params), {}, {
          toUploadFiles: [file]
        }));
      });
      Promise.all(list).then(function (arr) {
        var files = [];
        var failedFiles = [];
        arr.forEach(function (one) {
          if (one.status === "success") {
            files.push(one.data.files[0]);
          } else if (one.status === "fail") {
            failedFiles.push(one.data.files[0]);
          }
        });
        var tFiles = params.autoUpload ? uploadedFiles.concat(files) : uploadedFiles;
        var newFiles = isBatchUpload || !params.multiple ? files : tFiles;
        resolve({
          status: files.length ? "success" : "fail",
          data: {
            files: newFiles
          },
          failedFiles: failedFiles,
          list: arr
        });
      });
    });
  }
  function formatToUploadFile(tmpFiles, format, autoUpload) {
    return tmpFiles.map(function (fileRaw) {
      var file = fileRaw;
      if (typeof format === "function") {
        file = format(fileRaw);
      }
      var uploadFile = _objectSpread$2({
        raw: fileRaw,
        lastModified: fileRaw.lastModified,
        name: fileRaw.name,
        size: fileRaw.size,
        type: fileRaw.type,
        percent: 0,
        status: autoUpload ? "progress" : "waiting"
      }, file);
      return uploadFile;
    });
  }
  function validateFile(params) {
    var files = params.files,
      uploadValue = params.uploadValue,
      max = params.max,
      allowUploadDuplicateFile = params.allowUploadDuplicateFile;
    return new Promise(function (resolve) {
      var tmpFiles = files.filter(function (file) {
        var sameNameFile = uploadValue.find(function (t) {
          return t.name === file.name;
        });
        return allowUploadDuplicateFile || !sameNameFile;
      });
      var hasSameNameFile = false;
      if (tmpFiles.length < files.length) {
        hasSameNameFile = true;
      }
      if (!tmpFiles.length) {
        var tFiles = formatToUploadFile(files, params.format, params.autoUpload);
        resolve({
          hasSameNameFile: hasSameNameFile,
          file: tFiles === null || tFiles === void 0 ? void 0 : tFiles[0],
          files: tFiles,
          validateResult: {
            type: "FILTER_FILE_SAME_NAME"
          }
        });
        return;
      }
      var lengthOverLimit = false;
      if (max && tmpFiles.length && !params.isBatchUpload) {
        tmpFiles = tmpFiles.slice(0, max - uploadValue.length);
        if (tmpFiles.length !== files.length) {
          lengthOverLimit = true;
        }
      }
      var formattedFiles = formatToUploadFile(tmpFiles, params.format, params.autoUpload);
      var allFileValidatePromise;
      if (params.beforeAllFilesUpload) {
        var _params$beforeAllFile;
        var r = (_params$beforeAllFile = params.beforeAllFilesUpload) === null || _params$beforeAllFile === void 0 ? void 0 : _params$beforeAllFile.call(params, formattedFiles);
        allFileValidatePromise = r instanceof Promise ? r : new Promise(function (resolve2) {
          return resolve2(r);
        });
      }
      var promiseList = formattedFiles.map(function (file) {
        return new Promise(function (resolve2) {
          handleBeforeUpload(file, {
            beforeUpload: params.beforeUpload,
            sizeLimit: params.sizeLimit
          }).then(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
              sizeResult = _ref2[0],
              customResult = _ref2[1];
            if (sizeResult) {
              resolve2({
                file: file,
                validateResult: {
                  type: "FILE_OVER_SIZE_LIMIT",
                  extra: sizeResult
                }
              });
            } else if (customResult === false) {
              resolve2({
                file: file,
                validateResult: {
                  type: "CUSTOM_BEFORE_UPLOAD"
                }
              });
            }
            resolve2({
              file: file
            });
          });
        });
      });
      Promise.all([allFileValidatePromise].concat(promiseList)).then(function (results) {
        var _results = _toArray(results),
          allFilesResult = _results[0],
          others = _results.slice(1);
        if (allFilesResult === false) {
          resolve({
            lengthOverLimit: lengthOverLimit,
            hasSameNameFile: hasSameNameFile,
            validateResult: {
              type: "BEFORE_ALL_FILES_UPLOAD"
            },
            files: formattedFiles
          });
        } else {
          resolve({
            lengthOverLimit: lengthOverLimit,
            hasSameNameFile: hasSameNameFile,
            fileValidateList: others,
            files: formattedFiles
          });
        }
      });
    });
  }
  function getFilesAndErrors(fileValidateList, getError) {
    var sizeLimitErrors = [];
    var toFiles = [];
    fileValidateList.forEach(function (oneFile) {
      var _oneFile$validateResu, _oneFile$validateResu2;
      if (((_oneFile$validateResu = oneFile.validateResult) === null || _oneFile$validateResu === void 0 ? void 0 : _oneFile$validateResu.type) === "CUSTOM_BEFORE_UPLOAD") return;
      if (((_oneFile$validateResu2 = oneFile.validateResult) === null || _oneFile$validateResu2 === void 0 ? void 0 : _oneFile$validateResu2.type) === "FILE_OVER_SIZE_LIMIT") {
        if (!oneFile.file.response) {
          oneFile.file.response = {};
        }
        oneFile.file.response.error = oneFile.file.response.error || getError(oneFile.validateResult.extra);
        sizeLimitErrors.push(oneFile);
        return;
      }
      toFiles.push(oneFile.file);
    });
    return {
      sizeLimitErrors: sizeLimitErrors,
      toFiles: toFiles
    };
  }
  function getTriggerTextField(p) {
    if (p.isBatchUpload && p.status) return "reupload";
    if (p.status === "fail") return "reupload";
    if (p.status === "progress") return "uploading";
    if (p.status === "success" || !p.autoUpload && p.status === "waiting") {
      return p.multiple ? "continueUpload" : "reupload";
    }
    return "fileInput";
  }
  function getDisplayFiles(params) {
    var multiple = params.multiple,
      uploadValue = params.uploadValue,
      toUploadFiles = params.toUploadFiles,
      autoUpload = params.autoUpload;
    var waitingUploadFiles = autoUpload ? toUploadFiles : toUploadFiles.filter(function (file) {
      return file.status !== "success";
    });
    if (multiple && !params.isBatchUpload) {
      if (!autoUpload) return uploadValue;
      return (waitingUploadFiles.length ? uploadValue.concat(waitingUploadFiles) : uploadValue) || [];
    }
    return (waitingUploadFiles.length ? waitingUploadFiles : uploadValue) || [];
  }

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useUpload(props) {
    var inputRef = vue.ref();
    var _toRefs = vue.toRefs(props),
      disabled = _toRefs.disabled,
      autoUpload = _toRefs.autoUpload,
      isBatchUpload = _toRefs.isBatchUpload,
      multiple = _toRefs.multiple,
      files = _toRefs.files,
      modelValue = _toRefs.modelValue,
      defaultFiles = _toRefs.defaultFiles;
    var _useConfig = useConfig("upload"),
      globalConfig = _useConfig.globalConfig,
      t = _useConfig.t,
      classPrefix = _useConfig.classPrefix;
    var _useVModel = useVModel(files, modelValue, defaultFiles.value, props.onChange, "files"),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      uploadValue = _useVModel2[0],
      setUploadValue = _useVModel2[1];
    var xhrReq = vue.ref([]);
    var toUploadFiles = vue.ref([]);
    var sizeOverLimitMessage = vue.ref("");
    var locale = vue.computed(function () {
      return merge_1({}, globalConfig.value, props.locale);
    });
    var tipsClasses = "".concat(classPrefix.value, "-upload__tips ").concat(classPrefix.value, "-size-s");
    var errorClasses = [tipsClasses].concat("".concat(classPrefix.value, "-upload__tips-error"));
    var triggerUploadText = vue.computed(function () {
      var _uploadValue$value, _uploadValue$value$;
      var field = getTriggerTextField({
        isBatchUpload: isBatchUpload.value,
        multiple: multiple.value,
        status: (_uploadValue$value = uploadValue.value) === null || _uploadValue$value === void 0 ? void 0 : (_uploadValue$value$ = _uploadValue$value[0]) === null || _uploadValue$value$ === void 0 ? void 0 : _uploadValue$value$.status,
        autoUpload: autoUpload.value
      });
      return locale.value.triggerUploadText[field];
    });
    var uploading = vue.ref(false);
    var displayFiles = vue.computed(function () {
      return getDisplayFiles({
        multiple: props.multiple,
        toUploadFiles: toUploadFiles.value,
        uploadValue: uploadValue.value,
        autoUpload: autoUpload.value,
        isBatchUpload: isBatchUpload.value
      });
    });
    var updateFilesProgress = function updateFilesProgress() {
      if (props.autoUpload) {
        toUploadFiles.value = _toConsumableArray(toUploadFiles.value);
      }
    };
    var onResponseError = function onResponseError(p) {
      var _props$onOneFileFail;
      if (!p || !p.files || !p.files[0]) return;
      var response = p.response,
        event = p.event,
        files2 = p.files;
      updateFilesProgress();
      (_props$onOneFileFail = props.onOneFileFail) === null || _props$onOneFileFail === void 0 ? void 0 : _props$onOneFileFail.call(props, {
        e: event,
        file: files2 === null || files2 === void 0 ? void 0 : files2[0],
        currentFiles: files2,
        failedFiles: files2,
        response: response
      });
      if (!props.multiple || props.isBatchUpload) {
        setUploadValue([], {
          trigger: "progress-fail",
          e: p.event,
          file: p.files[0]
        });
      }
    };
    var onResponseProgress = function onResponseProgress(p) {
      var _props$onProgress;
      updateFilesProgress();
      (_props$onProgress = props.onProgress) === null || _props$onProgress === void 0 ? void 0 : _props$onProgress.call(props, {
        e: p.event,
        file: p.file,
        currentFiles: p.files,
        percent: p.percent,
        type: p.type
      });
    };
    var onResponseSuccess = function onResponseSuccess(p) {
      if (props.multiple && !props.uploadAllFilesInOneRequest) {
        var _props$onOneFileSucce;
        updateFilesProgress();
        (_props$onOneFileSucce = props.onOneFileSuccess) === null || _props$onOneFileSucce === void 0 ? void 0 : _props$onOneFileSucce.call(props, {
          e: p.event,
          file: p.files[0],
          response: p.response
        });
      }
    };
    function getSizeLimitError(sizeLimitObj) {
      var limit = sizeLimitObj;
      return limit.message ? t(limit.message, {
        sizeLimit: limit.size
      }) : "".concat(t(locale.value.sizeLimitMessage, {
        sizeLimit: limit.size
      }), " ").concat(limit.unit);
    }
    var handleNonAutoUpload = function handleNonAutoUpload(toFiles) {
      var _uploadValue$value$2;
      var tmpFiles = props.multiple && !(isBatchUpload.value && ((_uploadValue$value$2 = uploadValue.value[0]) === null || _uploadValue$value$2 === void 0 ? void 0 : _uploadValue$value$2.status) === "success") ? uploadValue.value.concat(toFiles) : toFiles;
      if (["image", "image-flow"].includes(props.theme)) {
        var list = tmpFiles.map(function (file) {
          return new Promise(function (resolve) {
            getFileUrlByFileRaw(file.raw).then(function (url) {
              resolve(_objectSpread$1(_objectSpread$1({}, file), {}, {
                url: url
              }));
            });
          });
        });
        Promise.all(list).then(function (files2) {
          setUploadValue(files2, {
            trigger: "add",
            index: uploadValue.value.length,
            file: files2[0]
          });
        });
      } else {
        setUploadValue(tmpFiles, {
          trigger: "add",
          index: uploadValue.value.length,
          file: tmpFiles[0]
        });
      }
      toUploadFiles.value = [];
    };
    var onFileChange = function onFileChange(files2) {
      var _props$onSelectChange;
      if (disabled.value) return;
      (_props$onSelectChange = props.onSelectChange) === null || _props$onSelectChange === void 0 ? void 0 : _props$onSelectChange.call(props, _toConsumableArray(files2), {
        currentSelectedFiles: toUploadFiles
      });
      validateFile({
        uploadValue: uploadValue.value,
        files: _toConsumableArray(files2),
        allowUploadDuplicateFile: props.allowUploadDuplicateFile,
        max: props.max,
        sizeLimit: props.sizeLimit,
        isBatchUpload: isBatchUpload.value,
        autoUpload: autoUpload.value,
        format: props.format,
        beforeUpload: props.beforeUpload,
        beforeAllFilesUpload: props.beforeAllFilesUpload
      }).then(function (args) {
        var _args$validateResult;
        if (((_args$validateResult = args.validateResult) === null || _args$validateResult === void 0 ? void 0 : _args$validateResult.type) === "BEFORE_ALL_FILES_UPLOAD") return;
        if (args.lengthOverLimit) {
          var _props$onValidate;
          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, {
            type: "FILES_OVER_LENGTH_LIMIT",
            files: args.files
          });
        }
        if (args.hasSameNameFile) {
          var _props$onValidate2;
          (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 ? void 0 : _props$onValidate2.call(props, {
            type: "FILTER_FILE_SAME_NAME",
            files: args.files
          });
        }
        if (args.fileValidateList instanceof Array) {
          var _props$onWaitingUploa;
          var _getFilesAndErrors = getFilesAndErrors(args.fileValidateList, getSizeLimitError),
            sizeLimitErrors = _getFilesAndErrors.sizeLimitErrors,
            toFiles = _getFilesAndErrors.toFiles;
          var tmpWaitingFiles = autoUpload.value ? toFiles : toUploadFiles.value.concat(toFiles);
          toUploadFiles.value = tmpWaitingFiles;
          (_props$onWaitingUploa = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa === void 0 ? void 0 : _props$onWaitingUploa.call(props, {
            files: tmpWaitingFiles,
            trigger: "validate"
          });
          if (sizeLimitErrors[0]) {
            var _props$onValidate3;
            sizeOverLimitMessage.value = sizeLimitErrors[0].file.response.error;
            (_props$onValidate3 = props.onValidate) === null || _props$onValidate3 === void 0 ? void 0 : _props$onValidate3.call(props, {
              type: "FILE_OVER_SIZE_LIMIT",
              files: sizeLimitErrors.map(function (t2) {
                return t2.file;
              })
            });
          } else {
            sizeOverLimitMessage.value = "";
          }
          if (autoUpload.value) {
            uploadFiles(tmpWaitingFiles);
          } else {
            handleNonAutoUpload(tmpWaitingFiles);
          }
        }
      });
      inputRef.value.value = null;
    };
    var onNormalFileChange = function onNormalFileChange(e) {
      onFileChange === null || onFileChange === void 0 ? void 0 : onFileChange(e.target.files);
    };
    function onDragFileChange(e) {
      onFileChange === null || onFileChange === void 0 ? void 0 : onFileChange(e.dataTransfer.files);
    }
    function uploadFiles(toFiles) {
      var notUploadedFiles = uploadValue.value.filter(function (t2) {
        return t2.status !== "success";
      });
      var files2 = autoUpload.value ? toFiles || toUploadFiles.value : notUploadedFiles;
      if (!files2 || !files2.length) return;
      uploading.value = true;
      xhrReq.value = [];
      upload({
        action: props.action,
        headers: props.headers,
        name: props.name,
        withCredentials: props.withCredentials,
        uploadedFiles: uploadValue.value,
        toUploadFiles: files2,
        multiple: props.multiple,
        isBatchUpload: isBatchUpload.value,
        autoUpload: props.autoUpload,
        uploadAllFilesInOneRequest: props.uploadAllFilesInOneRequest,
        useMockProgress: props.useMockProgress,
        data: props.data,
        requestMethod: props.requestMethod,
        formatRequest: props.formatRequest,
        formatResponse: props.formatResponse,
        onResponseProgress: onResponseProgress,
        onResponseSuccess: onResponseSuccess,
        onResponseError: onResponseError,
        setXhrObject: function setXhrObject(xhr) {
          var _xhr$files$;
          if ((_xhr$files$ = xhr.files[0]) !== null && _xhr$files$ !== void 0 && _xhr$files$.raw && xhrReq.value.find(function (item) {
            var _item$files$;
            return ((_item$files$ = item.files[0]) === null || _item$files$ === void 0 ? void 0 : _item$files$.raw) === xhr.files[0].raw;
          })) return;
          xhrReq.value = xhrReq.value.concat(xhr);
        }
      }).then(function (_ref) {
        var status = _ref.status,
          data = _ref.data,
          list = _ref.list,
          failedFiles = _ref.failedFiles;
        uploading.value = false;
        if (status === "success") {
          var _props$onSuccess;
          if (props.autoUpload) {
            setUploadValue(_toConsumableArray(data.files), {
              trigger: "add",
              file: data.files[0]
            });
          }
          (_props$onSuccess = props.onSuccess) === null || _props$onSuccess === void 0 ? void 0 : _props$onSuccess.call(props, {
            fileList: data.files,
            currentFiles: files2,
            file: files2[0],
            results: list === null || list === void 0 ? void 0 : list.map(function (t2) {
              return t2.data;
            }),
            response: data.response || list.map(function (t2) {
              return t2.data.response;
            })
          });
          xhrReq.value = [];
        } else if (failedFiles !== null && failedFiles !== void 0 && failedFiles[0]) {
          var _props$onFail;
          (_props$onFail = props.onFail) === null || _props$onFail === void 0 ? void 0 : _props$onFail.call(props, {
            e: data.event,
            file: failedFiles[0],
            failedFiles: failedFiles,
            currentFiles: files2,
            response: data.response
          });
        }
        if (autoUpload.value) {
          var _props$onWaitingUploa2;
          toUploadFiles.value = failedFiles;
          (_props$onWaitingUploa2 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa2 === void 0 ? void 0 : _props$onWaitingUploa2.call(props, {
            files: failedFiles,
            trigger: "uploaded"
          });
        }
      }, function (p) {
        onResponseError(p);
        uploading.value = false;
      });
    }
    function onInnerRemove(p) {
      var _p$e$stopPropagation, _p$e, _props$onRemove;
      sizeOverLimitMessage.value = "";
      (_p$e$stopPropagation = (_p$e = p.e).stopPropagation) === null || _p$e$stopPropagation === void 0 ? void 0 : _p$e$stopPropagation.call(_p$e);
      var changePrams = {
        e: p.e,
        trigger: "remove",
        index: p.index,
        file: p.file
      };
      if (props.isBatchUpload || !props.multiple) {
        var _props$onWaitingUploa3;
        toUploadFiles.value = [];
        (_props$onWaitingUploa3 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa3 === void 0 ? void 0 : _props$onWaitingUploa3.call(props, {
          files: [],
          trigger: "remove"
        });
        setUploadValue([], changePrams);
      } else if (!props.autoUpload) {
        uploadValue.value.splice(p.index, 1);
        setUploadValue(_toConsumableArray(uploadValue.value), changePrams);
      } else {
        if (p.index < uploadValue.value.length) {
          uploadValue.value.splice(p.index, 1);
          setUploadValue(_toConsumableArray(uploadValue.value), changePrams);
        } else {
          var _props$onWaitingUploa4;
          toUploadFiles.value.splice(p.index - uploadValue.value.length, 1);
          toUploadFiles.value = _toConsumableArray(toUploadFiles.value);
          (_props$onWaitingUploa4 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa4 === void 0 ? void 0 : _props$onWaitingUploa4.call(props, {
            files: _toConsumableArray(toUploadFiles.value),
            trigger: "remove"
          });
        }
      }
      (_props$onRemove = props.onRemove) === null || _props$onRemove === void 0 ? void 0 : _props$onRemove.call(props, p);
    }
    var triggerUpload = function triggerUpload(e) {
      var _e$stopPropagation;
      if (disabled.value) return;
      e === null || e === void 0 ? void 0 : (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 ? void 0 : _e$stopPropagation.call(e);
      inputRef.value.click();
    };
    var cancelUpload = function cancelUpload(context) {
      var _xhrReq$value;
      (_xhrReq$value = xhrReq.value) === null || _xhrReq$value === void 0 ? void 0 : _xhrReq$value.forEach(function (item) {
        var _item$xhrReq;
        (_item$xhrReq = item.xhrReq) === null || _item$xhrReq === void 0 ? void 0 : _item$xhrReq.abort();
      });
      uploading.value = false;
      if (autoUpload.value) {
        toUploadFiles.value = toUploadFiles.value.map(function (item) {
          return _objectSpread$1(_objectSpread$1({}, item), {}, {
            status: "waiting"
          });
        });
      } else {
        setUploadValue(uploadValue.value.map(function (item) {
          if (item.status !== "success") {
            return _objectSpread$1(_objectSpread$1({}, item), {}, {
              status: "waiting"
            });
          }
          return item;
        }), {
          trigger: "abort"
        });
      }
      if (context !== null && context !== void 0 && context.file) {
        onInnerRemove === null || onInnerRemove === void 0 ? void 0 : onInnerRemove({
          file: context.file,
          e: context.e,
          index: 0
        });
      }
    };
    return {
      t: t,
      locale: locale,
      classPrefix: classPrefix,
      triggerUploadText: triggerUploadText,
      toUploadFiles: toUploadFiles,
      uploadValue: uploadValue,
      displayFiles: displayFiles,
      sizeOverLimitMessage: sizeOverLimitMessage,
      uploading: uploading,
      tipsClasses: tipsClasses,
      errorClasses: errorClasses,
      inputRef: inputRef,
      disabled: disabled,
      xhrReq: xhrReq,
      uploadFiles: uploadFiles,
      onFileChange: onFileChange,
      onNormalFileChange: onNormalFileChange,
      onDragFileChange: onDragFileChange,
      onInnerRemove: onInnerRemove,
      triggerUpload: triggerUpload,
      cancelUpload: cancelUpload
    };
  }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var CustomFile = vue.defineComponent({
    name: "UploadCustomFile",
    props: _objectSpread(_objectSpread({}, commonProps), {}, {
      dragEvents: Object,
      draggable: Boolean,
      dragContent: Function,
      trigger: Function,
      triggerUpload: Function,
      childrenNode: [String, Function]
    }),
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var _toRefs = vue.toRefs(props),
        classPrefix = _toRefs.classPrefix,
        displayFiles = _toRefs.displayFiles;
      var drag = useDrag(props.dragEvents);
      var dragActive = drag.dragActive;
      var renderContent = useContent();
      var renderDragContent = function renderDragContent() {
        var _props$childrenNode;
        var params = {
          dragActive: dragActive.value,
          files: displayFiles.value
        };
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__dragger ").concat(classPrefix.value, "-upload__dragger-center"),
          "onDrop": drag.handleDrop,
          "onDragenter": drag.handleDragenter,
          "onDragover": drag.handleDragover,
          "onDragleave": drag.handleDragleave,
          "onClick": props.triggerUpload
        }, [vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__trigger")
        }, [renderContent("dragContent", "trigger", {
          params: params
        }) || ((_props$childrenNode = props.childrenNode) === null || _props$childrenNode === void 0 ? void 0 : _props$childrenNode.call(props, params))])]);
      };
      return function () {
        var _props$childrenNode2, _slots$default;
        return vue.createVNode(vue.Fragment, null, [props.draggable ? renderDragContent() : vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__trigger"),
          "onClick": props.triggerUpload
        }, [((_props$childrenNode2 = props.childrenNode) === null || _props$childrenNode2 === void 0 ? void 0 : _props$childrenNode2.call(props, {
          files: displayFiles.value
        })) || ((_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots))])]);
      };
    }
  });

  var _Upload = vue.defineComponent({
    name: "TUpload",
    props: props,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
        expose = _ref.expose;
      var renderContent = useContent();
      var _useUpload = useUpload(props2),
        locale = _useUpload.locale,
        classPrefix = _useUpload.classPrefix,
        triggerUploadText = _useUpload.triggerUploadText,
        toUploadFiles = _useUpload.toUploadFiles,
        displayFiles = _useUpload.displayFiles,
        uploadValue = _useUpload.uploadValue,
        sizeOverLimitMessage = _useUpload.sizeOverLimitMessage,
        uploading = _useUpload.uploading,
        tipsClasses = _useUpload.tipsClasses,
        errorClasses = _useUpload.errorClasses,
        inputRef = _useUpload.inputRef,
        disabled = _useUpload.disabled,
        onInnerRemove = _useUpload.onInnerRemove,
        uploadFiles = _useUpload.uploadFiles,
        onNormalFileChange = _useUpload.onNormalFileChange,
        onDragFileChange = _useUpload.onDragFileChange,
        triggerUpload = _useUpload.triggerUpload,
        cancelUpload = _useUpload.cancelUpload;
      expose({
        upload: inputRef.value,
        uploading: uploading,
        triggerUpload: triggerUpload,
        uploadFiles: uploadFiles,
        cancelUpload: cancelUpload
      });
      var renderTrigger = function renderTrigger() {
        var getDefaultTrigger = function getDefaultTrigger() {
          if (props2.theme === "file-input") {
            return vue.createVNode(Button, vue.mergeProps({
              "disabled": disabled.value,
              "variant": "outline"
            }, props2.triggerButtonProps), {
              "default": function _default() {
                return [triggerUploadText.value];
              }
            });
          }
          return vue.createVNode(Button, vue.mergeProps({
            "disabled": disabled.value,
            "variant": "outline",
            "icon": function icon() {
              return vue.createVNode(upload$1, null, null);
            }
          }, props2.triggerButtonProps), {
            "default": function _default() {
              return [triggerUploadText.value];
            }
          });
        };
        return renderContent("default", "trigger") || getDefaultTrigger();
      };
      var commonDisplayFileProps = vue.computed(function () {
        return {
          files: uploadValue.value,
          toUploadFiles: toUploadFiles.value,
          displayFiles: displayFiles.value,
          theme: props2.theme,
          placeholder: props2.placeholder,
          disabled: disabled.value,
          tips: props2.tips,
          status: props2.status,
          sizeOverLimitMessage: sizeOverLimitMessage.value,
          uploading: uploading.value,
          classPrefix: classPrefix.value,
          tipsClasses: tipsClasses,
          errorClasses: errorClasses,
          locale: locale.value,
          autoUpload: props2.autoUpload,
          abridgeName: props2.abridgeName,
          fileListDisplay: props2.fileListDisplay,
          onRemove: onInnerRemove
        };
      });
      var dragProps = {
        onDragFileChange: onDragFileChange,
        onDragenter: props2.onDragenter,
        onDragleave: props2.onDragleave,
        onDrop: props2.onDrop
      };
      var getNormalFileNode = function getNormalFileNode() {
        return vue.createVNode(NormalFile, vue.mergeProps(commonDisplayFileProps.value, {
          "multiple": props2.multiple
        }), {
          "default": function _default() {
            return [vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-upload__trigger"),
              "onClick": triggerUpload
            }, [renderTrigger()])];
          },
          fileListDisplay: slots.fileListDisplay
        });
      };
      var getSingleFileDraggerUploadNode = function getSingleFileDraggerUploadNode() {
        return vue.createVNode(DraggerFile, vue.mergeProps(commonDisplayFileProps.value, {
          "dragEvents": dragProps,
          "trigger": props2.trigger,
          "cancelUpload": cancelUpload,
          "triggerUpload": triggerUpload,
          "uploadFiles": uploadFiles
        }), null);
      };
      var getImageCardUploadNode = function getImageCardUploadNode() {
        return vue.createVNode(ImageCard, vue.mergeProps(commonDisplayFileProps.value, {
          "multiple": props2.multiple,
          "max": props2.max,
          "showUploadProgress": props2.showUploadProgress,
          "triggerUpload": triggerUpload,
          "uploadFiles": uploadFiles,
          "cancelUpload": cancelUpload,
          "onPreview": props2.onPreview
        }), null);
      };
      var getFlowListNode = function getFlowListNode() {
        return vue.createVNode(MultipleFlowList, vue.mergeProps(commonDisplayFileProps.value, {
          "isBatchUpload": props2.isBatchUpload,
          "draggable": props2.draggable,
          "dragEvents": dragProps,
          "uploadFiles": uploadFiles,
          "cancelUpload": cancelUpload,
          "onPreview": props2.onPreview,
          "slots": Object.keys(slots).length ? slots : void 0
        }), {
          "default": function _default() {
            return [vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-upload__trigger"),
              "onClick": triggerUpload
            }, [renderTrigger()])];
          }
        });
      };
      var getCustomFile = function getCustomFile() {
        return vue.createVNode(CustomFile, vue.mergeProps(commonDisplayFileProps.value, {
          "draggable": props2.draggable,
          "dragContent": props2.dragContent,
          "dragEvents": dragProps,
          "triggerUpload": triggerUpload,
          "trigger": props2.trigger,
          "childrenNode": slots["default"]
        }), {
          "default": function _default() {
            return [renderTrigger()];
          },
          dragContent: slots.dragContent,
          trigger: slots.trigger
        });
      };
      return function () {
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload")
        }, [vue.createVNode("input", {
          "ref": inputRef,
          "type": "file",
          "disabled": disabled.value,
          "onChange": onNormalFileChange,
          "multiple": props2.multiple,
          "accept": props2.accept,
          "hidden": true
        }, null), ["file", "file-input"].includes(props2.theme) && !props2.draggable && getNormalFileNode(), ["file", "image"].includes(props2.theme) && props2.draggable && getSingleFileDraggerUploadNode(), props2.theme === "image" && !props2.draggable && getImageCardUploadNode(), ["image-flow", "file-flow"].includes(props2.theme) && getFlowListNode(), props2.theme === "custom" && getCustomFile(), props2.tips && vue.createVNode("small", {
          "class": [tipsClasses, _defineProperty$3({}, "".concat(classPrefix.value, "-upload__tips-").concat(props2.status), props2.status)]
        }, [props2.tips])]);
      };
    }
  });

  var Upload = withInstall(_Upload);

  var _ConfigProvider = vue.defineComponent({
    name: "TConfigProvider",
    props: {
      globalConfig: Object
    },
    setup: function setup(props) {
      var defaultData = cloneDeep_1(defaultGlobalConfig);
      vue.provide(configProviderInjectKey, vue.computed(function () {
        return mergeWith(defaultData, props.globalConfig);
      }));
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        return vue.createVNode("div", null, [renderTNodeJSX("default")]);
      };
    }
  });

  var ConfigProvider = withInstall(_ConfigProvider);

  var components = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Button: Button,
    Icon: Icon,
    Link: Link,
    Row: Row,
    Col: Col,
    Aside: Aside,
    Layout: Layout,
    Header: Header,
    Footer: Footer,
    Content: Content$1,
    Divider: Divider,
    Space: Space,
    Affix: Affix,
    Anchor: Anchor,
    AnchorItem: AnchorItem,
    AnchorTarget: AnchorTarget,
    Breadcrumb: Breadcrumb,
    BreadcrumbItem: BreadcrumbItem,
    Dropdown: Dropdown,
    DropdownItem: DropdownItem,
    DropdownMenu: DropdownMenu,
    Jumper: Jumper,
    Menu: Menu,
    HeadMenu: HeadMenu,
    Submenu: Submenu,
    MenuItem: MenuItem,
    MenuGroup: MenuGroup,
    Pagination: Pagination,
    Steps: Steps,
    StepItem: StepItem,
    Tabs: Tabs,
    TabPanel: TabPanel,
    AutoComplete: AutoComplete,
    HighlightOption: HighlightOption,
    Cascader: Cascader,
    CascaderPanel: CascaderPanel,
    Checkbox: Checkbox,
    CheckboxGroup: CheckboxGroup,
    DatePicker: DatePicker,
    DatePickerPanel: DatePickerPanel,
    DateRangePicker: DateRangePicker,
    DateRangePickerPanel: DateRangePickerPanel,
    Form: Form,
    FormItem: FormItem,
    InputAdornment: InputAdornment,
    Input: Input,
    InputGroup: InputGroup,
    InputNumber: InputNumber,
    Radio: Radio,
    RadioGroup: RadioGroup,
    RadioButton: RadioButton,
    Select: Select,
    Option: Option,
    OptionGroup: OptionGroup,
    Slider: Slider,
    SliderButton: SliderButton,
    Switch: Switch,
    TagInput: TagInput,
    SelectInput: SelectInput,
    Textarea: Textarea,
    Transfer: Transfer,
    TimePicker: TimePicker,
    TimeRangePicker: TimeRangePicker,
    TimePickerPanel: TimePickerPanel,
    TreeSelect: TreeSelect,
    ColorPickerPanel: ColorPickerPanel,
    ColorPicker: ColorPicker,
    RangeInput: RangeInput,
    RangeInputPopup: RangeInputPopup,
    Avatar: Avatar,
    AvatarGroup: AvatarGroup,
    Badge: Badge,
    Calendar: Calendar,
    Card: Card,
    Comment: Comment$1,
    Image: Image$1,
    ImageViewer: ImageViewer,
    List: List,
    ListItem: ListItem,
    ListItemMeta: ListItemMeta,
    Progress: Progress,
    Skeleton: Skeleton,
    Swiper: Swiper,
    SwiperItem: SwiperItem,
    BaseTable: BaseTable,
    PrimaryTable: PrimaryTable,
    EnhancedTable: EnhancedTable,
    Table: Table,
    Tag: Tag,
    CheckTag: CheckTag,
    Timeline: Timeline,
    TimelineItem: TimelineItem,
    Tooltip: Tooltip,
    Tree: Tree,
    Collapse: Collapse,
    CollapsePanel: CollapsePanel,
    Watermark: Watermark,
    Rate: Rate,
    Alert: Alert,
    DialogPlugin: DialogPlugin,
    Dialog: Dialog,
    Drawer: Drawer,
    Guide: Guide,
    LoadingPlugin: LoadingPlugin,
    Loading: Loading,
    MessagePlugin: MessagePlugin,
    Message: Message,
    NotifyPlugin: NotificationPlugin,
    Notification: Notification,
    Popconfirm: Popconfirm,
    Popup: Popup,
    Upload: Upload,
    ConfigProvider: ConfigProvider
  });

  function install(app, config) {
    Object.keys(components).forEach(function (key) {
      /plugin/i.test(key) ? app.use(components[key]) : app.use(components[key], config);
    });
  }
  var tdesign = {
    install: install,
    version: "0.24.9"
  };

  if (typeof console !== "undefined" && console.warn && typeof window !== "undefined") {
    console.warn("You are using a whole package of TDesign!");
  }

  exports.Affix = Affix;
  exports.Alert = Alert;
  exports.Anchor = Anchor;
  exports.AnchorItem = AnchorItem;
  exports.AnchorTarget = AnchorTarget;
  exports.Aside = Aside;
  exports.AutoComplete = AutoComplete;
  exports.Avatar = Avatar;
  exports.AvatarGroup = AvatarGroup;
  exports.Badge = Badge;
  exports.BaseTable = BaseTable;
  exports.Breadcrumb = Breadcrumb;
  exports.BreadcrumbItem = BreadcrumbItem;
  exports.Button = Button;
  exports.Calendar = Calendar;
  exports.Card = Card;
  exports.Cascader = Cascader;
  exports.CascaderPanel = CascaderPanel;
  exports.CheckTag = CheckTag;
  exports.Checkbox = Checkbox;
  exports.CheckboxGroup = CheckboxGroup;
  exports.Col = Col;
  exports.Collapse = Collapse;
  exports.CollapsePanel = CollapsePanel;
  exports.ColorPicker = ColorPicker;
  exports.ColorPickerPanel = ColorPickerPanel;
  exports.Comment = Comment$1;
  exports.ConfigProvider = ConfigProvider;
  exports.Content = Content$1;
  exports.DatePicker = DatePicker;
  exports.DatePickerPanel = DatePickerPanel;
  exports.DateRangePicker = DateRangePicker;
  exports.DateRangePickerPanel = DateRangePickerPanel;
  exports.Dialog = Dialog;
  exports.DialogPlugin = DialogPlugin;
  exports.Divider = Divider;
  exports.Drawer = Drawer;
  exports.Dropdown = Dropdown;
  exports.DropdownItem = DropdownItem;
  exports.DropdownMenu = DropdownMenu;
  exports.EnhancedTable = EnhancedTable;
  exports.Footer = Footer;
  exports.Form = Form;
  exports.FormItem = FormItem;
  exports.Guide = Guide;
  exports.HeadMenu = HeadMenu;
  exports.Header = Header;
  exports.HighlightOption = HighlightOption;
  exports.Icon = Icon;
  exports.Image = Image$1;
  exports.ImageViewer = ImageViewer;
  exports.Input = Input;
  exports.InputAdornment = InputAdornment;
  exports.InputGroup = InputGroup;
  exports.InputNumber = InputNumber;
  exports.Jumper = Jumper;
  exports.Layout = Layout;
  exports.Link = Link;
  exports.List = List;
  exports.ListItem = ListItem;
  exports.ListItemMeta = ListItemMeta;
  exports.Loading = Loading;
  exports.LoadingPlugin = LoadingPlugin;
  exports.Menu = Menu;
  exports.MenuGroup = MenuGroup;
  exports.MenuItem = MenuItem;
  exports.Message = Message;
  exports.MessagePlugin = MessagePlugin;
  exports.Notification = Notification;
  exports.NotifyPlugin = NotificationPlugin;
  exports.Option = Option;
  exports.OptionGroup = OptionGroup;
  exports.Pagination = Pagination;
  exports.Popconfirm = Popconfirm;
  exports.Popup = Popup;
  exports.PrimaryTable = PrimaryTable;
  exports.Progress = Progress;
  exports.Radio = Radio;
  exports.RadioButton = RadioButton;
  exports.RadioGroup = RadioGroup;
  exports.RangeInput = RangeInput;
  exports.RangeInputPopup = RangeInputPopup;
  exports.Rate = Rate;
  exports.Row = Row;
  exports.Select = Select;
  exports.SelectInput = SelectInput;
  exports.Skeleton = Skeleton;
  exports.Slider = Slider;
  exports.SliderButton = SliderButton;
  exports.Space = Space;
  exports.StepItem = StepItem;
  exports.Steps = Steps;
  exports.Submenu = Submenu;
  exports.Swiper = Swiper;
  exports.SwiperItem = SwiperItem;
  exports.Switch = Switch;
  exports.TabPanel = TabPanel;
  exports.Table = Table;
  exports.Tabs = Tabs;
  exports.Tag = Tag;
  exports.TagInput = TagInput;
  exports.Textarea = Textarea;
  exports.TimePicker = TimePicker;
  exports.TimePickerPanel = TimePickerPanel;
  exports.TimeRangePicker = TimeRangePicker;
  exports.Timeline = Timeline;
  exports.TimelineItem = TimelineItem;
  exports.Tooltip = Tooltip;
  exports.Transfer = Transfer;
  exports.Tree = Tree;
  exports.TreeSelect = TreeSelect;
  exports.Upload = Upload;
  exports.Watermark = Watermark;
  exports["default"] = tdesign;
  exports.install = install;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=tdesign.js.map
