import { TdDatePickerProps, TdDateRangePickerProps, TdDatePickerPanelProps, TdDateRangePickerPanelProps } from './type';
import './style';
export * from './type';
export declare type DatePickerProps = TdDatePickerProps;
export interface DatePickerPanelProps extends TdDatePickerPanelProps, Pick<TdDatePickerProps, 'modelValue'> {
}
export declare type DateRangePickerProps = TdDateRangePickerProps;
export interface DateRangePickerPanelProps extends TdDateRangePickerPanelProps, Pick<TdDateRangePickerProps, 'modelValue'> {
}
export declare const DatePicker: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: import("./type").DateValue;
            disabled: boolean;
            mode: "month" | "year" | "quarter" | "week" | "date";
            placeholder: string;
            format: string;
            modelValue: import("./type").DateValue;
            defaultValue: import("./type").DateValue;
            clearable: boolean;
            allowInput: boolean;
            enableTimePicker: boolean;
            presetsPlacement: "left" | "top" | "bottom" | "right";
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            allowInput: BooleanConstructor;
            clearable: BooleanConstructor;
            disableDate: {
                type: import("vue").PropType<import("./type").DisableDate>;
            };
            disabled: BooleanConstructor;
            enableTimePicker: BooleanConstructor;
            firstDayOfWeek: {
                type: NumberConstructor;
                validator(val: number): boolean;
            };
            format: {
                type: StringConstructor;
                default: any;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            mode: {
                type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
                default: "month" | "year" | "quarter" | "week" | "date";
                validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
            };
            placeholder: {
                type: import("vue").PropType<string>;
                default: any;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            prefixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            presets: {
                type: import("vue").PropType<import("./type").PresetDate>;
            };
            presetsPlacement: {
                type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
                default: "left" | "top" | "bottom" | "right";
                validator(val: "left" | "top" | "bottom" | "right"): boolean;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            suffixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            timePickerProps: {
                type: import("vue").PropType<import("..").TdTimePickerProps>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").DateValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").DateValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").DateValue>;
                default: string;
            };
            valueType: {
                type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
                validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
            };
            onBlur: import("vue").PropType<(context: {
                value: import("./type").DateValue;
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
                dayjsValue?: import("dayjs").Dayjs;
                trigger?: import("./type").DatePickerTriggerSource;
            }) => void>;
            onFocus: import("vue").PropType<(context: {
                value: import("./type").DateValue;
                e: FocusEvent;
            }) => void>;
            onPick: import("vue").PropType<(value: import("./type").DateValue) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "mode" | "placeholder" | "format" | "modelValue" | "defaultValue" | "clearable" | "allowInput" | "enableTimePicker" | "presetsPlacement">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            allowInput: BooleanConstructor;
            clearable: BooleanConstructor;
            disableDate: {
                type: import("vue").PropType<import("./type").DisableDate>;
            };
            disabled: BooleanConstructor;
            enableTimePicker: BooleanConstructor;
            firstDayOfWeek: {
                type: NumberConstructor;
                validator(val: number): boolean;
            };
            format: {
                type: StringConstructor;
                default: any;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            mode: {
                type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
                default: "month" | "year" | "quarter" | "week" | "date";
                validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
            };
            placeholder: {
                type: import("vue").PropType<string>;
                default: any;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            prefixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            presets: {
                type: import("vue").PropType<import("./type").PresetDate>;
            };
            presetsPlacement: {
                type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
                default: "left" | "top" | "bottom" | "right";
                validator(val: "left" | "top" | "bottom" | "right"): boolean;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            suffixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            timePickerProps: {
                type: import("vue").PropType<import("..").TdTimePickerProps>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").DateValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").DateValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").DateValue>;
                default: string;
            };
            valueType: {
                type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
                validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
            };
            onBlur: import("vue").PropType<(context: {
                value: import("./type").DateValue;
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
                dayjsValue?: import("dayjs").Dayjs;
                trigger?: import("./type").DatePickerTriggerSource;
            }) => void>;
            onFocus: import("vue").PropType<(context: {
                value: import("./type").DateValue;
                e: FocusEvent;
            }) => void>;
            onPick: import("vue").PropType<(value: import("./type").DateValue) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: import("./type").DateValue;
            disabled: boolean;
            mode: "month" | "year" | "quarter" | "week" | "date";
            placeholder: string;
            format: string;
            modelValue: import("./type").DateValue;
            defaultValue: import("./type").DateValue;
            clearable: boolean;
            allowInput: boolean;
            enableTimePicker: boolean;
            presetsPlacement: "left" | "top" | "bottom" | "right";
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        disableDate: {
            type: import("vue").PropType<import("./type").DisableDate>;
        };
        disabled: BooleanConstructor;
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        inputProps: {
            type: import("vue").PropType<import("..").TdInputProps>;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetDate>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: string;
        };
        valueType: {
            type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
            validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").DateValue;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
            dayjsValue?: import("dayjs").Dayjs;
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").DateValue;
            e: FocusEvent;
        }) => void>;
        onPick: import("vue").PropType<(value: import("./type").DateValue) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disableDate: {
        type: import("vue").PropType<import("./type").DisableDate>;
    };
    disabled: BooleanConstructor;
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetDate>;
    };
    presetsPlacement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    timePickerProps: {
        type: import("vue").PropType<import("..").TdTimePickerProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").DateValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateValue>;
        default: string;
    };
    valueType: {
        type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
        validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").DateValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
        dayjsValue?: import("dayjs").Dayjs;
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").DateValue;
        e: FocusEvent;
    }) => void>;
    onPick: import("vue").PropType<(value: import("./type").DateValue) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").DateValue;
    disabled: boolean;
    mode: "month" | "year" | "quarter" | "week" | "date";
    placeholder: string;
    format: string;
    modelValue: import("./type").DateValue;
    defaultValue: import("./type").DateValue;
    clearable: boolean;
    allowInput: boolean;
    enableTimePicker: boolean;
    presetsPlacement: "left" | "top" | "bottom" | "right";
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const DatePickerPanel: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: import("./type").DateValue;
            disabled: boolean;
            mode: "month" | "year" | "quarter" | "week" | "date";
            format: string;
            modelValue: import("./type").DateValue;
            defaultValue: import("./type").DateValue;
            enableTimePicker: boolean;
            presetsPlacement: "left" | "top" | "bottom" | "right";
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            onCellClick: import("vue").PropType<(context: {
                date: Date;
                e: MouseEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
                dayjsValue?: import("dayjs").Dayjs;
                e?: MouseEvent;
                trigger?: import("./type").DatePickerTriggerSource;
            }) => void>;
            onConfirm: import("vue").PropType<(context: {
                date: Date;
                e: MouseEvent;
            }) => void>;
            onMonthChange: import("vue").PropType<(context: {
                month: number;
                date: Date;
                e?: MouseEvent;
                trigger: import("./type").DatePickerMonthChangeTrigger;
            }) => void>;
            onPanelClick: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onPresetClick: import("vue").PropType<(context: {
                preset: import("./type").PresetDate;
                e: MouseEvent;
            }) => void>;
            onTimeChange: import("vue").PropType<(context: {
                time: string;
                date: Date;
                trigger: import("./type").DatePickerTimeChangeTrigger;
                e?: MouseEvent;
            }) => void>;
            onYearChange: import("vue").PropType<(context: {
                year: number;
                date: Date;
                trigger: import("./type").DatePickerYearChangeTrigger;
                e?: MouseEvent;
            }) => void>;
            value: {
                type: import("vue").PropType<import("./type").DateValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").DateValue>;
                default: string;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").DateValue>;
                default: any;
            };
            disabled: BooleanConstructor;
            disableDate: {
                type: import("vue").PropType<import("./type").DisableDate>;
            };
            enableTimePicker: BooleanConstructor;
            firstDayOfWeek: {
                type: NumberConstructor;
                validator(val: number): boolean;
            };
            format: {
                type: StringConstructor;
                default: any;
            };
            mode: {
                type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
                default: "month" | "year" | "quarter" | "week" | "date";
                validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
            };
            presets: {
                type: import("vue").PropType<import("./type").PresetDate>;
            };
            presetsPlacement: {
                type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
                default: "left" | "top" | "bottom" | "right";
                validator(val: "left" | "top" | "bottom" | "right"): boolean;
            };
            timePickerProps: {
                type: import("vue").PropType<import("..").TdTimePickerProps>;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "mode" | "format" | "modelValue" | "defaultValue" | "enableTimePicker" | "presetsPlacement">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            onCellClick: import("vue").PropType<(context: {
                date: Date;
                e: MouseEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
                dayjsValue?: import("dayjs").Dayjs;
                e?: MouseEvent;
                trigger?: import("./type").DatePickerTriggerSource;
            }) => void>;
            onConfirm: import("vue").PropType<(context: {
                date: Date;
                e: MouseEvent;
            }) => void>;
            onMonthChange: import("vue").PropType<(context: {
                month: number;
                date: Date;
                e?: MouseEvent;
                trigger: import("./type").DatePickerMonthChangeTrigger;
            }) => void>;
            onPanelClick: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onPresetClick: import("vue").PropType<(context: {
                preset: import("./type").PresetDate;
                e: MouseEvent;
            }) => void>;
            onTimeChange: import("vue").PropType<(context: {
                time: string;
                date: Date;
                trigger: import("./type").DatePickerTimeChangeTrigger;
                e?: MouseEvent;
            }) => void>;
            onYearChange: import("vue").PropType<(context: {
                year: number;
                date: Date;
                trigger: import("./type").DatePickerYearChangeTrigger;
                e?: MouseEvent;
            }) => void>;
            value: {
                type: import("vue").PropType<import("./type").DateValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").DateValue>;
                default: string;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").DateValue>;
                default: any;
            };
            disabled: BooleanConstructor;
            disableDate: {
                type: import("vue").PropType<import("./type").DisableDate>;
            };
            enableTimePicker: BooleanConstructor;
            firstDayOfWeek: {
                type: NumberConstructor;
                validator(val: number): boolean;
            };
            format: {
                type: StringConstructor;
                default: any;
            };
            mode: {
                type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
                default: "month" | "year" | "quarter" | "week" | "date";
                validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
            };
            presets: {
                type: import("vue").PropType<import("./type").PresetDate>;
            };
            presetsPlacement: {
                type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
                default: "left" | "top" | "bottom" | "right";
                validator(val: "left" | "top" | "bottom" | "right"): boolean;
            };
            timePickerProps: {
                type: import("vue").PropType<import("..").TdTimePickerProps>;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: import("./type").DateValue;
            disabled: boolean;
            mode: "month" | "year" | "quarter" | "week" | "date";
            format: string;
            modelValue: import("./type").DateValue;
            defaultValue: import("./type").DateValue;
            enableTimePicker: boolean;
            presetsPlacement: "left" | "top" | "bottom" | "right";
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        onCellClick: import("vue").PropType<(context: {
            date: Date;
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
            dayjsValue?: import("dayjs").Dayjs;
            e?: MouseEvent;
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date;
            e: MouseEvent;
        }) => void>;
        onMonthChange: import("vue").PropType<(context: {
            month: number;
            date: Date;
            e?: MouseEvent;
            trigger: import("./type").DatePickerMonthChangeTrigger;
        }) => void>;
        onPanelClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
        onTimeChange: import("vue").PropType<(context: {
            time: string;
            date: Date;
            trigger: import("./type").DatePickerTimeChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        onYearChange: import("vue").PropType<(context: {
            year: number;
            date: Date;
            trigger: import("./type").DatePickerYearChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        value: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: any;
        };
        disabled: BooleanConstructor;
        disableDate: {
            type: import("vue").PropType<import("./type").DisableDate>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetDate>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    onCellClick: import("vue").PropType<(context: {
        date: Date;
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
        dayjsValue?: import("dayjs").Dayjs;
        e?: MouseEvent;
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onConfirm: import("vue").PropType<(context: {
        date: Date;
        e: MouseEvent;
    }) => void>;
    onMonthChange: import("vue").PropType<(context: {
        month: number;
        date: Date;
        e?: MouseEvent;
        trigger: import("./type").DatePickerMonthChangeTrigger;
    }) => void>;
    onPanelClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPresetClick: import("vue").PropType<(context: {
        preset: import("./type").PresetDate;
        e: MouseEvent;
    }) => void>;
    onTimeChange: import("vue").PropType<(context: {
        time: string;
        date: Date;
        trigger: import("./type").DatePickerTimeChangeTrigger;
        e?: MouseEvent;
    }) => void>;
    onYearChange: import("vue").PropType<(context: {
        year: number;
        date: Date;
        trigger: import("./type").DatePickerYearChangeTrigger;
        e?: MouseEvent;
    }) => void>;
    value: {
        type: import("vue").PropType<import("./type").DateValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateValue>;
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateValue>;
        default: any;
    };
    disabled: BooleanConstructor;
    disableDate: {
        type: import("vue").PropType<import("./type").DisableDate>;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetDate>;
    };
    presetsPlacement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    timePickerProps: {
        type: import("vue").PropType<import("..").TdTimePickerProps>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").DateValue;
    disabled: boolean;
    mode: "month" | "year" | "quarter" | "week" | "date";
    format: string;
    modelValue: import("./type").DateValue;
    defaultValue: import("./type").DateValue;
    enableTimePicker: boolean;
    presetsPlacement: "left" | "top" | "bottom" | "right";
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const DateRangePicker: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: import("./type").DateRangeValue;
            disabled: boolean;
            mode: "month" | "year" | "quarter" | "week" | "date";
            separator: string;
            format: string;
            modelValue: import("./type").DateRangeValue;
            defaultValue: import("./type").DateRangeValue;
            clearable: boolean;
            allowInput: boolean;
            enableTimePicker: boolean;
            presetsPlacement: "left" | "top" | "bottom" | "right";
            panelPreselection: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            allowInput: BooleanConstructor;
            clearable: BooleanConstructor;
            disableDate: {
                type: import("vue").PropType<import("./type").DisableRangeDate>;
            };
            disabled: BooleanConstructor;
            enableTimePicker: BooleanConstructor;
            firstDayOfWeek: {
                type: NumberConstructor;
                validator(val: number): boolean;
            };
            format: {
                type: StringConstructor;
                default: string;
            };
            mode: {
                type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
                default: "month" | "year" | "quarter" | "week" | "date";
                validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
            };
            panelPreselection: {
                type: BooleanConstructor;
                default: boolean;
            };
            placeholder: {
                type: import("vue").PropType<string | string[]>;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            prefixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            presets: {
                type: import("vue").PropType<import("./type").PresetRange>;
            };
            presetsPlacement: {
                type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
                default: "left" | "top" | "bottom" | "right";
                validator(val: "left" | "top" | "bottom" | "right"): boolean;
            };
            rangeInputProps: {
                type: import("vue").PropType<import("..").TdRangeInputProps>;
            };
            separator: {
                type: StringConstructor;
                default: string;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            suffixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            timePickerProps: {
                type: import("vue").PropType<import("..").TdTimePickerProps>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").DateRangeValue>;
                default: () => import("./type").DateRangeValue;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").DateRangeValue>;
                default: () => import("./type").DateRangeValue;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").DateRangeValue>;
                default: () => import("./type").DateRangeValue;
            };
            valueType: {
                type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
                validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
            };
            onBlur: import("vue").PropType<(context: {
                value: import("./type").DateRangeValue;
                partial: import("./type").DateRangePickerPartial;
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
                dayjsValue?: import("dayjs").Dayjs[];
                trigger?: import("./type").DatePickerTriggerSource;
            }) => void>;
            onFocus: import("vue").PropType<(context: {
                value: import("./type").DateRangeValue;
                partial: import("./type").DateRangePickerPartial;
                e: FocusEvent;
            }) => void>;
            onInput: import("vue").PropType<(context: {
                input: string;
                value: import("./type").DateRangeValue;
                partial: import("./type").DateRangePickerPartial;
                e: InputEvent;
            }) => void>;
            onPick: import("vue").PropType<(value: import("./type").DateValue, context: import("./type").PickContext) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "mode" | "separator" | "format" | "modelValue" | "defaultValue" | "clearable" | "allowInput" | "enableTimePicker" | "presetsPlacement" | "panelPreselection">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            allowInput: BooleanConstructor;
            clearable: BooleanConstructor;
            disableDate: {
                type: import("vue").PropType<import("./type").DisableRangeDate>;
            };
            disabled: BooleanConstructor;
            enableTimePicker: BooleanConstructor;
            firstDayOfWeek: {
                type: NumberConstructor;
                validator(val: number): boolean;
            };
            format: {
                type: StringConstructor;
                default: string;
            };
            mode: {
                type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
                default: "month" | "year" | "quarter" | "week" | "date";
                validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
            };
            panelPreselection: {
                type: BooleanConstructor;
                default: boolean;
            };
            placeholder: {
                type: import("vue").PropType<string | string[]>;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            prefixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            presets: {
                type: import("vue").PropType<import("./type").PresetRange>;
            };
            presetsPlacement: {
                type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
                default: "left" | "top" | "bottom" | "right";
                validator(val: "left" | "top" | "bottom" | "right"): boolean;
            };
            rangeInputProps: {
                type: import("vue").PropType<import("..").TdRangeInputProps>;
            };
            separator: {
                type: StringConstructor;
                default: string;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            suffixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            timePickerProps: {
                type: import("vue").PropType<import("..").TdTimePickerProps>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").DateRangeValue>;
                default: () => import("./type").DateRangeValue;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").DateRangeValue>;
                default: () => import("./type").DateRangeValue;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").DateRangeValue>;
                default: () => import("./type").DateRangeValue;
            };
            valueType: {
                type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
                validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
            };
            onBlur: import("vue").PropType<(context: {
                value: import("./type").DateRangeValue;
                partial: import("./type").DateRangePickerPartial;
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
                dayjsValue?: import("dayjs").Dayjs[];
                trigger?: import("./type").DatePickerTriggerSource;
            }) => void>;
            onFocus: import("vue").PropType<(context: {
                value: import("./type").DateRangeValue;
                partial: import("./type").DateRangePickerPartial;
                e: FocusEvent;
            }) => void>;
            onInput: import("vue").PropType<(context: {
                input: string;
                value: import("./type").DateRangeValue;
                partial: import("./type").DateRangePickerPartial;
                e: InputEvent;
            }) => void>;
            onPick: import("vue").PropType<(value: import("./type").DateValue, context: import("./type").PickContext) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: import("./type").DateRangeValue;
            disabled: boolean;
            mode: "month" | "year" | "quarter" | "week" | "date";
            separator: string;
            format: string;
            modelValue: import("./type").DateRangeValue;
            defaultValue: import("./type").DateRangeValue;
            clearable: boolean;
            allowInput: boolean;
            enableTimePicker: boolean;
            presetsPlacement: "left" | "top" | "bottom" | "right";
            panelPreselection: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        disableDate: {
            type: import("vue").PropType<import("./type").DisableRangeDate>;
        };
        disabled: BooleanConstructor;
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetRange>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        rangeInputProps: {
            type: import("vue").PropType<import("..").TdRangeInputProps>;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: () => import("./type").DateRangeValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: () => import("./type").DateRangeValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: () => import("./type").DateRangeValue;
        };
        valueType: {
            type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
            validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").DateRangeValue;
            partial: import("./type").DateRangePickerPartial;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
            dayjsValue?: import("dayjs").Dayjs[];
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").DateRangeValue;
            partial: import("./type").DateRangePickerPartial;
            e: FocusEvent;
        }) => void>;
        onInput: import("vue").PropType<(context: {
            input: string;
            value: import("./type").DateRangeValue;
            partial: import("./type").DateRangePickerPartial;
            e: InputEvent;
        }) => void>;
        onPick: import("vue").PropType<(value: import("./type").DateValue, context: import("./type").PickContext) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disableDate: {
        type: import("vue").PropType<import("./type").DisableRangeDate>;
    };
    disabled: BooleanConstructor;
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
    };
    panelPreselection: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetRange>;
    };
    presetsPlacement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    rangeInputProps: {
        type: import("vue").PropType<import("..").TdRangeInputProps>;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    timePickerProps: {
        type: import("vue").PropType<import("..").TdTimePickerProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: () => import("./type").DateRangeValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: () => import("./type").DateRangeValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: () => import("./type").DateRangeValue;
    };
    valueType: {
        type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
        validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").DateRangeValue;
        partial: import("./type").DateRangePickerPartial;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
        dayjsValue?: import("dayjs").Dayjs[];
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").DateRangeValue;
        partial: import("./type").DateRangePickerPartial;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        input: string;
        value: import("./type").DateRangeValue;
        partial: import("./type").DateRangePickerPartial;
        e: InputEvent;
    }) => void>;
    onPick: import("vue").PropType<(value: import("./type").DateValue, context: import("./type").PickContext) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").DateRangeValue;
    disabled: boolean;
    mode: "month" | "year" | "quarter" | "week" | "date";
    separator: string;
    format: string;
    modelValue: import("./type").DateRangeValue;
    defaultValue: import("./type").DateRangeValue;
    clearable: boolean;
    allowInput: boolean;
    enableTimePicker: boolean;
    presetsPlacement: "left" | "top" | "bottom" | "right";
    panelPreselection: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const DateRangePickerPanel: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: import("./type").DateRangeValue;
            disabled: boolean;
            mode: "month" | "year" | "quarter" | "week" | "date";
            format: string;
            modelValue: import("./type").DateRangeValue;
            defaultValue: import("./type").DateRangeValue;
            enableTimePicker: boolean;
            presetsPlacement: "left" | "top" | "bottom" | "right";
            panelPreselection: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            onCellClick: import("vue").PropType<(context: {
                date: Date[];
                partial: import("./type").DateRangePickerPartial;
                e: MouseEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
                dayjsValue?: import("dayjs").Dayjs[];
                partial: import("./type").DateRangePickerPartial;
                e?: MouseEvent;
                trigger?: import("./type").DatePickerTriggerSource;
            }) => void>;
            onConfirm: import("vue").PropType<(context: {
                date: Date[];
                e: MouseEvent;
            }) => void>;
            onMonthChange: import("vue").PropType<(context: {
                month: number;
                date: Date[];
                partial: import("./type").DateRangePickerPartial;
                e?: MouseEvent;
                trigger: import("./type").DatePickerMonthChangeTrigger;
            }) => void>;
            onPanelClick: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onPresetClick: import("vue").PropType<(context: {
                preset: import("./type").PresetDate;
                e: MouseEvent;
            }) => void>;
            onTimeChange: import("vue").PropType<(context: {
                time: string;
                date: Date[];
                partial: import("./type").DateRangePickerPartial;
                trigger: import("./type").DatePickerTimeChangeTrigger;
                e?: MouseEvent;
            }) => void>;
            onYearChange: import("vue").PropType<(context: {
                year: number;
                date: Date[];
                partial: import("./type").DateRangePickerPartial;
                trigger: import("./type").DatePickerYearChangeTrigger;
                e?: MouseEvent;
            }) => void>;
            value: {
                type: import("vue").PropType<import("./type").DateRangeValue>;
                default: () => import("./type").DateRangeValue;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").DateRangeValue>;
                default: () => import("./type").DateRangeValue;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").DateRangeValue>;
                default: () => import("./type").DateRangeValue;
            };
            disabled: BooleanConstructor;
            disableDate: {
                type: import("vue").PropType<import("./type").DisableRangeDate>;
            };
            enableTimePicker: BooleanConstructor;
            firstDayOfWeek: {
                type: NumberConstructor;
                validator(val: number): boolean;
            };
            format: {
                type: StringConstructor;
                default: string;
            };
            mode: {
                type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
                default: "month" | "year" | "quarter" | "week" | "date";
                validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
            };
            presets: {
                type: import("vue").PropType<import("./type").PresetRange>;
            };
            presetsPlacement: {
                type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
                default: "left" | "top" | "bottom" | "right";
                validator(val: "left" | "top" | "bottom" | "right"): boolean;
            };
            timePickerProps: {
                type: import("vue").PropType<import("..").TdTimePickerProps>;
            };
            panelPreselection: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "mode" | "format" | "modelValue" | "defaultValue" | "enableTimePicker" | "presetsPlacement" | "panelPreselection">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            onCellClick: import("vue").PropType<(context: {
                date: Date[];
                partial: import("./type").DateRangePickerPartial;
                e: MouseEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
                dayjsValue?: import("dayjs").Dayjs[];
                partial: import("./type").DateRangePickerPartial;
                e?: MouseEvent;
                trigger?: import("./type").DatePickerTriggerSource;
            }) => void>;
            onConfirm: import("vue").PropType<(context: {
                date: Date[];
                e: MouseEvent;
            }) => void>;
            onMonthChange: import("vue").PropType<(context: {
                month: number;
                date: Date[];
                partial: import("./type").DateRangePickerPartial;
                e?: MouseEvent;
                trigger: import("./type").DatePickerMonthChangeTrigger;
            }) => void>;
            onPanelClick: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onPresetClick: import("vue").PropType<(context: {
                preset: import("./type").PresetDate;
                e: MouseEvent;
            }) => void>;
            onTimeChange: import("vue").PropType<(context: {
                time: string;
                date: Date[];
                partial: import("./type").DateRangePickerPartial;
                trigger: import("./type").DatePickerTimeChangeTrigger;
                e?: MouseEvent;
            }) => void>;
            onYearChange: import("vue").PropType<(context: {
                year: number;
                date: Date[];
                partial: import("./type").DateRangePickerPartial;
                trigger: import("./type").DatePickerYearChangeTrigger;
                e?: MouseEvent;
            }) => void>;
            value: {
                type: import("vue").PropType<import("./type").DateRangeValue>;
                default: () => import("./type").DateRangeValue;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").DateRangeValue>;
                default: () => import("./type").DateRangeValue;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").DateRangeValue>;
                default: () => import("./type").DateRangeValue;
            };
            disabled: BooleanConstructor;
            disableDate: {
                type: import("vue").PropType<import("./type").DisableRangeDate>;
            };
            enableTimePicker: BooleanConstructor;
            firstDayOfWeek: {
                type: NumberConstructor;
                validator(val: number): boolean;
            };
            format: {
                type: StringConstructor;
                default: string;
            };
            mode: {
                type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
                default: "month" | "year" | "quarter" | "week" | "date";
                validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
            };
            presets: {
                type: import("vue").PropType<import("./type").PresetRange>;
            };
            presetsPlacement: {
                type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
                default: "left" | "top" | "bottom" | "right";
                validator(val: "left" | "top" | "bottom" | "right"): boolean;
            };
            timePickerProps: {
                type: import("vue").PropType<import("..").TdTimePickerProps>;
            };
            panelPreselection: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: import("./type").DateRangeValue;
            disabled: boolean;
            mode: "month" | "year" | "quarter" | "week" | "date";
            format: string;
            modelValue: import("./type").DateRangeValue;
            defaultValue: import("./type").DateRangeValue;
            enableTimePicker: boolean;
            presetsPlacement: "left" | "top" | "bottom" | "right";
            panelPreselection: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        onCellClick: import("vue").PropType<(context: {
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
            dayjsValue?: import("dayjs").Dayjs[];
            partial: import("./type").DateRangePickerPartial;
            e?: MouseEvent;
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date[];
            e: MouseEvent;
        }) => void>;
        onMonthChange: import("vue").PropType<(context: {
            month: number;
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            e?: MouseEvent;
            trigger: import("./type").DatePickerMonthChangeTrigger;
        }) => void>;
        onPanelClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
        onTimeChange: import("vue").PropType<(context: {
            time: string;
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            trigger: import("./type").DatePickerTimeChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        onYearChange: import("vue").PropType<(context: {
            year: number;
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            trigger: import("./type").DatePickerYearChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        value: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: () => import("./type").DateRangeValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: () => import("./type").DateRangeValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: () => import("./type").DateRangeValue;
        };
        disabled: BooleanConstructor;
        disableDate: {
            type: import("vue").PropType<import("./type").DisableRangeDate>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetRange>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    onCellClick: import("vue").PropType<(context: {
        date: Date[];
        partial: import("./type").DateRangePickerPartial;
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
        dayjsValue?: import("dayjs").Dayjs[];
        partial: import("./type").DateRangePickerPartial;
        e?: MouseEvent;
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onConfirm: import("vue").PropType<(context: {
        date: Date[];
        e: MouseEvent;
    }) => void>;
    onMonthChange: import("vue").PropType<(context: {
        month: number;
        date: Date[];
        partial: import("./type").DateRangePickerPartial;
        e?: MouseEvent;
        trigger: import("./type").DatePickerMonthChangeTrigger;
    }) => void>;
    onPanelClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPresetClick: import("vue").PropType<(context: {
        preset: import("./type").PresetDate;
        e: MouseEvent;
    }) => void>;
    onTimeChange: import("vue").PropType<(context: {
        time: string;
        date: Date[];
        partial: import("./type").DateRangePickerPartial;
        trigger: import("./type").DatePickerTimeChangeTrigger;
        e?: MouseEvent;
    }) => void>;
    onYearChange: import("vue").PropType<(context: {
        year: number;
        date: Date[];
        partial: import("./type").DateRangePickerPartial;
        trigger: import("./type").DatePickerYearChangeTrigger;
        e?: MouseEvent;
    }) => void>;
    value: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: () => import("./type").DateRangeValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: () => import("./type").DateRangeValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: () => import("./type").DateRangeValue;
    };
    disabled: BooleanConstructor;
    disableDate: {
        type: import("vue").PropType<import("./type").DisableRangeDate>;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetRange>;
    };
    presetsPlacement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    timePickerProps: {
        type: import("vue").PropType<import("..").TdTimePickerProps>;
    };
    panelPreselection: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").DateRangeValue;
    disabled: boolean;
    mode: "month" | "year" | "quarter" | "week" | "date";
    format: string;
    modelValue: import("./type").DateRangeValue;
    defaultValue: import("./type").DateRangeValue;
    enableTimePicker: boolean;
    presetsPlacement: "left" | "top" | "bottom" | "right";
    panelPreselection: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default DatePicker;
