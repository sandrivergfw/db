/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var dayjs = require('dayjs');
var datePicker_hooks_useSingleValue = require('./hooks/useSingleValue.js');
var _common_js_datePicker_format = require('../_common/js/date-picker/format.js');
var _common_js_datePicker_utils = require('../_common/js/date-picker/utils.js');
var datePicker_datePickerPanelProps = require('./date-picker-panel-props.js');
var datePicker_props = require('./props.js');
var datePicker_panel_SinglePanel = require('./panel/SinglePanel.js');
require('@babel/runtime/helpers/slicedToArray');
require('../hooks/useVModel.js');
require('lodash/kebabCase');
require('../_common/js/log/log.js');
require('@babel/runtime/helpers/objectDestructuringEmpty');
require('@babel/runtime/helpers/extends');
require('../_chunks/dep-6d934009.js');
require('../_chunks/dep-2424c37b.js');
require('lodash/chunk');
require('../hooks/useConfig.js');
require('../config-provider/useConfig.js');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('./panel/PanelContent.js');
require('./base/Header.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../jumper/index.js');
require('../jumper/jumper.js');
require('lodash/isObject');
require('tdesign-icons-vue-next');
require('../jumper/props.js');
require('../hooks/useGlobalIcon.js');
require('../button/index.js');
require('../button/button.js');
require('../loading/index.js');
require('../loading/directive.js');
require('../loading/plugin.js');
require('../loading/loading.js');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../utils/dom.js');
require('lodash/isString');
require('../utils/easing.js');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/camelCase');
require('../utils/transfer-dom.js');
require('../loading/props.js');
require('../utils/withInstall.js');
require('../button/props.js');
require('../hooks/useRipple.js');
require('../hooks/useKeepAnimation.js');
require('../utils/set-style.js');
require('../form/hooks.js');
require('../hooks/tnode.js');
require('../select/select.js');
require('lodash/pick');
require('lodash/isArray');
require('lodash/debounce');
require('lodash/cloneDeep');
require('lodash/get');
require('lodash/intersection');
require('../common-components/fake-arrow.js');
require('../select-input/index.js');
require('../select-input/select-input.js');
require('../popup/index.js');
require('../popup/popup.js');
require('@babel/runtime/helpers/typeof');
require('@popperjs/core');
require('../popup/props.js');
require('../popup/container.js');
require('../select-input/props.js');
require('../select-input/useSingle.js');
require('../input/index.js');
require('../input/input.js');
require('../input/props.js');
require('../input/useInput.js');
require('../form/const.js');
require('../input/useLengthLimit.js');
require('../input/useInputEventHandler.js');
require('../input/useInputWidth.js');
require('../input/input-group.js');
require('../hooks/useDefaultValue.js');
require('../select-input/useMultiple.js');
require('../tag-input/index.js');
require('../tag-input/tag-input.js');
require('../tag-input/props.js');
require('../tag-input/hooks/useTagScroll.js');
require('../tag-input/useTagList.js');
require('../tag/index.js');
require('../tag/tag.js');
require('../tag/props.js');
require('../tag/check-tag.js');
require('../tag/check-tag-props.js');
require('../tag-input/hooks/useHover.js');
require('../tag-input/hooks/useDragSorter.js');
require('../select-input/useOverlayInnerStyle.js');
require('../select/select-panel.js');
require('lodash/omit');
require('../select/option.js');
require('../select/option-props.js');
require('../checkbox/index.js');
require('../checkbox/checkbox.js');
require('../checkbox/props.js');
require('../checkbox/constants.js');
require('../checkbox/group.js');
require('../checkbox/checkbox-group-props.js');
require('../hooks/slot.js');
require('../select/helper.js');
require('../select/optionGroup.js');
require('../select/option-group-props.js');
require('../select/props.js');
require('../select/hooks/usePanelVirtualScroll.js');
require('../hooks/useVirtualScroll.js');
require('../select/hooks/useSelectOptions.js');
require('./base/Table.js');
require('./base/Cell.js');
require('../time-picker/panel/time-picker-panel.js');
require('../_common/js/time-picker/const.js');
require('../time-picker/panel/props.js');
require('../time-picker/props.js');
require('../time-picker/panel/single-panel.js');
require('lodash/range');
require('lodash/padStart');
require('../_common/js/time-picker/utils.js');
require('./panel/ExtraContent.js');
require('./base/Footer.js');
require('./hooks/useTableData.js');
require('./hooks/useDisableDate.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _DatePickerPanel = vue.defineComponent({
  name: "TDatePickerPanel",
  props: _objectSpread({
    value: datePicker_props["default"].value,
    defaultValue: datePicker_props["default"].defaultValue,
    modelValue: datePicker_props["default"].modelValue,
    disabled: datePicker_props["default"].disabled,
    disableDate: datePicker_props["default"].disableDate,
    enableTimePicker: datePicker_props["default"].enableTimePicker,
    firstDayOfWeek: datePicker_props["default"].firstDayOfWeek,
    format: datePicker_props["default"].format,
    mode: datePicker_props["default"].mode,
    presets: datePicker_props["default"].presets,
    presetsPlacement: datePicker_props["default"].presetsPlacement,
    timePickerProps: datePicker_props["default"].timePickerProps
  }, datePicker_datePickerPanelProps["default"]),
  setup: function setup(props) {
    var _useSingleValue = datePicker_hooks_useSingleValue["default"](props),
      cacheValue = _useSingleValue.cacheValue,
      value = _useSingleValue.value,
      year = _useSingleValue.year,
      month = _useSingleValue.month,
      time = _useSingleValue.time,
      onChange = _useSingleValue.onChange;
    var formatRef = vue.computed(function () {
      return _common_js_datePicker_format.getDefaultFormat({
        mode: props.mode,
        format: props.format,
        enableTimePicker: props.enableTimePicker
      });
    });
    function onCellClick(date, _ref) {
      var _props$onCellClick;
      var e = _ref.e;
      (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, {
        date: date,
        e: e
      });
      if (props.mode === "date") {
        year.value = date.getFullYear();
        month.value = date.getMonth();
      }
      if (props.enableTimePicker) {
        cacheValue.value = _common_js_datePicker_format.formatDate(date, {
          format: formatRef.value.format
        });
      } else {
        onChange === null || onChange === void 0 ? void 0 : onChange(_common_js_datePicker_format.formatDate(date, {
          format: formatRef.value.format
        }), {
          dayjsValue: _common_js_datePicker_format.parseToDayjs(date, formatRef.value.format),
          trigger: "pick"
        });
      }
    }
    function onJumperClick(_ref2) {
      var trigger = _ref2.trigger;
      var triggerMap = {
        prev: "arrow-previous",
        next: "arrow-next"
      };
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[props.mode] || 0;
      var current = new Date(year.value, month.value);
      var next = null;
      if (trigger === "prev") {
        next = _common_js_datePicker_utils.subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = _common_js_datePicker_utils.addMonth(current, monthCount);
      }
      var nextYear = next.getFullYear();
      var nextMonth = next.getMonth();
      if (year.value !== nextYear) {
        var _props$onYearChange;
        (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, {
          year: nextYear,
          date: dayjs__default["default"](value.value).toDate(),
          trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
        });
      }
      if (month.value !== nextMonth) {
        var _props$onMonthChange;
        (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, {
          month: nextMonth,
          date: dayjs__default["default"](value.value).toDate(),
          trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
        });
      }
      year.value = nextYear;
      month.value = nextMonth;
    }
    function onTimePickerChange(val) {
      var _props$onTimeChange;
      time.value = val;
      var _extractTimeObj = _common_js_datePicker_utils.extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;
      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var currentDate = !dayjs__default["default"](cacheValue.value, formatRef.value.format).isValid() ? dayjs__default["default"]() : dayjs__default["default"](cacheValue.value, formatRef.value.format);
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      cacheValue.value = _common_js_datePicker_format.formatDate(nextDate, {
        format: formatRef.value.format
      });
      (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 ? void 0 : _props$onTimeChange.call(props, {
        time: val,
        date: dayjs__default["default"](value.value).toDate(),
        trigger: "time-hour"
      });
    }
    function onConfirmClick(_ref3) {
      var _props$onConfirm;
      var e = _ref3.e;
      onChange === null || onChange === void 0 ? void 0 : onChange(_common_js_datePicker_format.formatDate(cacheValue.value, {
        format: formatRef.value.format
      }), {
        dayjsValue: _common_js_datePicker_format.parseToDayjs(cacheValue.value, formatRef.value.format),
        trigger: "confirm"
      });
      (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
        date: dayjs__default["default"](cacheValue.value).toDate(),
        e: e
      });
    }
    function onPresetClick(presetValue, _ref4) {
      var _props$onPresetClick;
      var e = _ref4.e,
        preset = _ref4.preset;
      var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;
      onChange === null || onChange === void 0 ? void 0 : onChange(_common_js_datePicker_format.formatDate(presetVal, {
        format: formatRef.value.format
      }), {
        dayjsValue: _common_js_datePicker_format.parseToDayjs(presetVal, formatRef.value.format),
        trigger: "preset"
      });
      (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 ? void 0 : _props$onPresetClick.call(props, {
        e: e,
        preset: preset
      });
    }
    function onYearChange(nextYear) {
      var _props$onYearChange2;
      year.value = nextYear;
      (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 ? void 0 : _props$onYearChange2.call(props, {
        year: year.value,
        date: dayjs__default["default"](value.value).toDate(),
        trigger: "year-select"
      });
    }
    function onMonthChange(nextMonth) {
      var _props$onMonthChange2;
      month.value = nextMonth;
      (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 ? void 0 : _props$onMonthChange2.call(props, {
        month: month.value,
        date: dayjs__default["default"](value.value).toDate(),
        trigger: "month-select"
      });
    }
    var panelProps = vue.computed(function () {
      return {
        value: cacheValue.value,
        year: year.value,
        month: month.value,
        mode: props.mode,
        format: formatRef.value.format,
        presets: props.presets,
        time: time.value,
        disableDate: props.disableDate,
        firstDayOfWeek: props.firstDayOfWeek,
        timePickerProps: props.timePickerProps,
        enableTimePicker: props.enableTimePicker,
        presetsPlacement: props.presetsPlacement,
        panelClick: props.onPanelClick,
        onCellClick: onCellClick,
        onJumperClick: onJumperClick,
        onConfirmClick: onConfirmClick,
        onPresetClick: onPresetClick,
        onYearChange: onYearChange,
        onMonthChange: onMonthChange,
        onTimePickerChange: onTimePickerChange
      };
    });
    return function () {
      return vue.createVNode(datePicker_panel_SinglePanel["default"], panelProps.value, null);
    };
  }
});

exports["default"] = _DatePickerPanel;
//# sourceMappingURL=DatePickerPanel.js.map
