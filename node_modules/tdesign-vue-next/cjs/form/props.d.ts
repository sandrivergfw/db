import { TdFormProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    colon: BooleanConstructor;
    data: {
        type: PropType<import("./type").Data>;
        default: () => {};
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    errorMessage: {
        type: PropType<import("./type").FormErrorMessage>;
    };
    formControlledComponents: {
        type: PropType<string[]>;
    };
    labelAlign: {
        type: PropType<"left" | "top" | "right">;
        default: "left" | "top" | "right";
        validator(val: TdFormProps['labelAlign']): boolean;
    };
    labelWidth: {
        type: PropType<string | number>;
        default: string;
    };
    layout: {
        type: PropType<"inline" | "vertical">;
        default: "inline" | "vertical";
        validator(val: TdFormProps['layout']): boolean;
    };
    preventSubmitDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    resetType: {
        type: PropType<"empty" | "initial">;
        default: "empty" | "initial";
        validator(val: TdFormProps['resetType']): boolean;
    };
    rules: {
        type: PropType<{
            [x: string]: import("./type").FormRule[];
        }>;
    };
    scrollToFirstError: {
        type: PropType<"" | "auto" | "smooth">;
        default: "" | "auto" | "smooth";
        validator(val: TdFormProps['scrollToFirstError']): boolean;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    statusIcon: {
        type: PropType<boolean | ((h: typeof import("vue").h, props: import("./type").TdFormItemProps) => import("../common").SlotReturnValue)>;
        default: any;
    };
    submitWithWarningMessage: BooleanConstructor;
    onReset: PropType<(context: {
        e?: Event;
    }) => void>;
    onSubmit: PropType<(context: import("./type").SubmitContext<import("./type").Data>) => void>;
    onValidate: PropType<(result: import("./type").ValidateResultContext<import("./type").Data>) => void>;
};
export default _default;
