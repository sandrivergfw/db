{"version":3,"file":"form.js","sources":["../../src/form/form.tsx"],"sourcesContent":["import { computed, defineComponent, provide, reactive, ref, toRefs } from 'vue';\nimport isEmpty from 'lodash/isEmpty';\nimport isBoolean from 'lodash/isBoolean';\nimport isArray from 'lodash/isArray';\nimport isFunction from 'lodash/isFunction';\nimport { requestSubmit } from '../utils/dom';\nimport { FormItemValidateResult } from './form-item';\nimport {\n  Data,\n  FormResetParams,\n  FormValidateMessage,\n  FormValidateParams,\n  FormValidateResult,\n  TdFormProps,\n  ValidateResultList,\n} from './type';\nimport props from './props';\nimport { FormInjectionKey, FormItemContext, useCLASSNAMES } from './const';\nimport { FormResetEvent, FormSubmitEvent } from '../common';\n\nimport { FormDisabledProvider } from './hooks';\nimport { usePrefixClass, useTNodeJSX } from '../hooks';\n\ntype Result = FormValidateResult<TdFormProps['data']>;\n\nexport default defineComponent({\n  name: 'TForm',\n\n  props: { ...props },\n\n  setup(props, { expose }) {\n    const renderContent = useTNodeJSX();\n    const { disabled } = toRefs(props);\n    provide<FormDisabledProvider>('formDisabled', {\n      disabled,\n    });\n\n    const formRef = ref<HTMLFormElement>(null);\n    const children = ref<FormItemContext[]>([]);\n\n    const { showErrorMessage, labelWidth, labelAlign, data, colon, requiredMark, rules, errorMessage, resetType } =\n      toRefs(props);\n    provide(\n      FormInjectionKey,\n      reactive({\n        showErrorMessage,\n        labelWidth,\n        labelAlign,\n        data,\n        colon,\n        requiredMark,\n        rules,\n        errorMessage,\n        resetType,\n        children,\n        renderContent,\n      }),\n    );\n\n    const COMPONENT_NAME = usePrefixClass('form');\n    const CLASS_NAMES = useCLASSNAMES();\n    const formClass = computed(() => [\n      CLASS_NAMES.value.form,\n      { [`${COMPONENT_NAME.value}-inline`]: props.layout === 'inline' },\n    ]);\n\n    const FORM_ITEM_CLASS_PREFIX = usePrefixClass('form-item__');\n\n    const getFirstError = (result: Result) => {\n      if (isBoolean(result)) return '';\n      const [firstKey] = Object.keys(result);\n      if (props.scrollToFirstError) {\n        scrollTo(`.${FORM_ITEM_CLASS_PREFIX.value + firstKey}`);\n      }\n      const resArr = result[firstKey] as ValidateResultList;\n      if (!isArray(resArr)) return '';\n      return resArr.filter((item) => !item.result)[0].message;\n    };\n    // 校验不通过时，滚动到第一个错误表单\n    const scrollTo = (selector: string) => {\n      const dom = formRef.value?.querySelector(selector);\n      const behavior = props.scrollToFirstError;\n      if (behavior) {\n        dom && dom.scrollIntoView({ behavior });\n      }\n    };\n\n    const needValidate = (name: string | number, fields: string[] | undefined) => {\n      if (!fields || !Array.isArray(fields)) return true;\n      return fields.indexOf(`${name}`) !== -1;\n    };\n    const formatValidateResult = <T extends Data>(validateResultList: FormItemValidateResult<T>[]) => {\n      const result = validateResultList.reduce((r, err) => Object.assign(r || {}, err), {});\n      Object.keys(result).forEach((key) => {\n        if (result[key] === true) {\n          delete result[key];\n        }\n      });\n      return isEmpty(result) ? true : result;\n    };\n    const validate = async (param?: FormValidateParams): Promise<Result> => {\n      const { fields, trigger = 'all', showErrorMessage } = param || {};\n      const list = children.value\n        .filter((child) => isFunction(child.validate) && needValidate(String(child.name), fields))\n        .map((child) => child.validate(trigger, showErrorMessage));\n      const arr = await Promise.all(list);\n      const result = formatValidateResult(arr);\n      const firstError = getFirstError(result);\n      props.onValidate?.({\n        validateResult: result,\n        firstError,\n      });\n      return result;\n    };\n    const validateOnly = async (params?: Omit<FormValidateParams, 'showErrorMessage'>) => {\n      const { fields, trigger = 'all' } = params || {};\n      const list = children.value\n        .filter((child) => isFunction(child.validateOnly) && needValidate(String(child.name), fields))\n        .map((child) => child.validateOnly(trigger));\n      const arr = await Promise.all(list);\n      return formatValidateResult(arr);\n    };\n    const submitParams = ref<Pick<FormValidateParams, 'showErrorMessage'>>();\n    const onSubmit = (e?: FormSubmitEvent) => {\n      if (props.preventSubmitDefault && e) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      validate(submitParams.value).then((r) => {\n        props.onSubmit?.({ validateResult: r, firstError: getFirstError(r), e });\n      });\n      submitParams.value = undefined;\n    };\n    const submit = async (params?: Pick<FormValidateParams, 'showErrorMessage'>) => {\n      submitParams.value = params;\n      requestSubmit(formRef.value);\n    };\n\n    const resetParams = ref<FormResetParams<Data>>();\n    const onReset = (e?: FormResetEvent) => {\n      if (props.preventSubmitDefault && e) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      children.value\n        .filter((child) => isFunction(child.resetField) && needValidate(String(child.name), resetParams.value?.fields))\n        .forEach((child) => child.resetField(resetParams.value?.type));\n      resetParams.value = undefined;\n      props.onReset?.({ e });\n    };\n    const reset = <FormData extends Data>(params?: FormResetParams<FormData>) => {\n      (resetParams.value as any) = params;\n      formRef.value.reset();\n    };\n\n    const clearValidate = (fields?: Array<string>) => {\n      children.value.forEach((child) => {\n        if (isFunction(child.resetHandler) && needValidate(String(child.name), fields)) {\n          child.resetHandler();\n        }\n      });\n    };\n    const setValidateMessage = (validateMessage: FormValidateMessage<FormData>) => {\n      const keys = Object.keys(validateMessage);\n      if (!keys.length) return;\n      const list = children.value\n        .filter((child) => isFunction(child.setValidateMessage) && keys.includes(`${child.name}`))\n        .map((child) => child.setValidateMessage(validateMessage[child.name]));\n      Promise.all(list);\n    };\n\n    expose({ validate, submit, reset, clearValidate, setValidateMessage, validateOnly });\n\n    return () => (\n      <form ref={formRef} class={formClass.value} onSubmit={(e) => onSubmit(e)} onReset={(e) => onReset(e)}>\n        {renderContent('default')}\n      </form>\n    );\n  },\n});\n"],"names":["defineComponent","name","props","setup","expose","renderContent","useTNodeJSX","toRefs","disabled","provide","formRef","ref","children","showErrorMessage","labelWidth","labelAlign","data","colon","requiredMark","rules","errorMessage","resetType","FormInjectionKey","reactive","COMPONENT_NAME","usePrefixClass","CLASS_NAMES","useCLASSNAMES","formClass","computed","value","form","layout","FORM_ITEM_CLASS_PREFIX","getFirstError","result","isBoolean","Object","keys","_slicedToArray","firstKey","scrollToFirstError","scrollTo","resArr","isArray","filter","item","message","selector","dom","querySelector","behavior","scrollIntoView","needValidate","fields","Array","indexOf","formatValidateResult","validateResultList","reduce","r","err","assign","forEach","key","isEmpty","validate","_asyncToGenerator","_regeneratorRuntime","param","trigger","list","child","isFunction","String","map","Promise","all","arr","firstError","onValidate","validateResult","validateOnly","params","submitParams","onSubmit","e","preventSubmitDefault","preventDefault","stopPropagation","then","submit","requestSubmit","resetParams","onReset","resetField","type","reset","clearValidate","resetHandler","setValidateMessage","validateMessage","length","includes","_createVNode"],"mappings":"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"}