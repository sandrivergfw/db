import { TdFormProps, TdFormItemProps } from './type';
import './style';
export * from './type';
export declare type FormProps = TdFormProps;
export declare type FormItemProps = TdFormItemProps;
export declare const Form: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            data: {};
            disabled: boolean;
            layout: "inline" | "vertical";
            showErrorMessage: boolean;
            labelAlign: "left" | "top" | "right";
            labelWidth: string | number;
            statusIcon: boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("../common").SlotReturnValue);
            requiredMark: boolean;
            colon: boolean;
            resetType: "empty" | "initial";
            scrollToFirstError: "" | "auto" | "smooth";
            preventSubmitDefault: boolean;
            submitWithWarningMessage: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            colon: BooleanConstructor;
            data: {
                type: import("vue").PropType<import("./type").Data>;
                default: () => {};
            };
            disabled: {
                type: BooleanConstructor;
                default: any;
            };
            errorMessage: {
                type: import("vue").PropType<import("./type").FormErrorMessage>;
            };
            formControlledComponents: {
                type: import("vue").PropType<string[]>;
            };
            labelAlign: {
                type: import("vue").PropType<"left" | "top" | "right">;
                default: "left" | "top" | "right";
                validator(val: "left" | "top" | "right"): boolean;
            };
            labelWidth: {
                type: import("vue").PropType<string | number>;
                default: string;
            };
            layout: {
                type: import("vue").PropType<"inline" | "vertical">;
                default: "inline" | "vertical";
                validator(val: "inline" | "vertical"): boolean;
            };
            preventSubmitDefault: {
                type: BooleanConstructor;
                default: boolean;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: any;
            };
            resetType: {
                type: import("vue").PropType<"empty" | "initial">;
                default: "empty" | "initial";
                validator(val: "empty" | "initial"): boolean;
            };
            rules: {
                type: import("vue").PropType<{
                    [x: string]: import("./type").FormRule[];
                }>;
            };
            scrollToFirstError: {
                type: import("vue").PropType<"" | "auto" | "smooth">;
                default: "" | "auto" | "smooth";
                validator(val: "" | "auto" | "smooth"): boolean;
            };
            showErrorMessage: {
                type: BooleanConstructor;
                default: boolean;
            };
            statusIcon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("../common").SlotReturnValue)>;
                default: any;
            };
            submitWithWarningMessage: BooleanConstructor;
            onReset: import("vue").PropType<(context: {
                e?: Event;
            }) => void>;
            onSubmit: import("vue").PropType<(context: import("./type").SubmitContext<import("./type").Data>) => void>;
            onValidate: import("vue").PropType<(result: import("./type").ValidateResultContext<import("./type").Data>) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "data" | "disabled" | "layout" | "showErrorMessage" | "labelAlign" | "labelWidth" | "statusIcon" | "requiredMark" | "colon" | "resetType" | "scrollToFirstError" | "preventSubmitDefault" | "submitWithWarningMessage">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            colon: BooleanConstructor;
            data: {
                type: import("vue").PropType<import("./type").Data>;
                default: () => {};
            };
            disabled: {
                type: BooleanConstructor;
                default: any;
            };
            errorMessage: {
                type: import("vue").PropType<import("./type").FormErrorMessage>;
            };
            formControlledComponents: {
                type: import("vue").PropType<string[]>;
            };
            labelAlign: {
                type: import("vue").PropType<"left" | "top" | "right">;
                default: "left" | "top" | "right";
                validator(val: "left" | "top" | "right"): boolean;
            };
            labelWidth: {
                type: import("vue").PropType<string | number>;
                default: string;
            };
            layout: {
                type: import("vue").PropType<"inline" | "vertical">;
                default: "inline" | "vertical";
                validator(val: "inline" | "vertical"): boolean;
            };
            preventSubmitDefault: {
                type: BooleanConstructor;
                default: boolean;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: any;
            };
            resetType: {
                type: import("vue").PropType<"empty" | "initial">;
                default: "empty" | "initial";
                validator(val: "empty" | "initial"): boolean;
            };
            rules: {
                type: import("vue").PropType<{
                    [x: string]: import("./type").FormRule[];
                }>;
            };
            scrollToFirstError: {
                type: import("vue").PropType<"" | "auto" | "smooth">;
                default: "" | "auto" | "smooth";
                validator(val: "" | "auto" | "smooth"): boolean;
            };
            showErrorMessage: {
                type: BooleanConstructor;
                default: boolean;
            };
            statusIcon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("../common").SlotReturnValue)>;
                default: any;
            };
            submitWithWarningMessage: BooleanConstructor;
            onReset: import("vue").PropType<(context: {
                e?: Event;
            }) => void>;
            onSubmit: import("vue").PropType<(context: import("./type").SubmitContext<import("./type").Data>) => void>;
            onValidate: import("vue").PropType<(result: import("./type").ValidateResultContext<import("./type").Data>) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            data: {};
            disabled: boolean;
            layout: "inline" | "vertical";
            showErrorMessage: boolean;
            labelAlign: "left" | "top" | "right";
            labelWidth: string | number;
            statusIcon: boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("../common").SlotReturnValue);
            requiredMark: boolean;
            colon: boolean;
            resetType: "empty" | "initial";
            scrollToFirstError: "" | "auto" | "smooth";
            preventSubmitDefault: boolean;
            submitWithWarningMessage: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        colon: BooleanConstructor;
        data: {
            type: import("vue").PropType<import("./type").Data>;
            default: () => {};
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        errorMessage: {
            type: import("vue").PropType<import("./type").FormErrorMessage>;
        };
        formControlledComponents: {
            type: import("vue").PropType<string[]>;
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "right">;
            default: "left" | "top" | "right";
            validator(val: "left" | "top" | "right"): boolean;
        };
        labelWidth: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        layout: {
            type: import("vue").PropType<"inline" | "vertical">;
            default: "inline" | "vertical";
            validator(val: "inline" | "vertical"): boolean;
        };
        preventSubmitDefault: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: any;
        };
        resetType: {
            type: import("vue").PropType<"empty" | "initial">;
            default: "empty" | "initial";
            validator(val: "empty" | "initial"): boolean;
        };
        rules: {
            type: import("vue").PropType<{
                [x: string]: import("./type").FormRule[];
            }>;
        };
        scrollToFirstError: {
            type: import("vue").PropType<"" | "auto" | "smooth">;
            default: "" | "auto" | "smooth";
            validator(val: "" | "auto" | "smooth"): boolean;
        };
        showErrorMessage: {
            type: BooleanConstructor;
            default: boolean;
        };
        statusIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("../common").SlotReturnValue)>;
            default: any;
        };
        submitWithWarningMessage: BooleanConstructor;
        onReset: import("vue").PropType<(context: {
            e?: Event;
        }) => void>;
        onSubmit: import("vue").PropType<(context: import("./type").SubmitContext<import("./type").Data>) => void>;
        onValidate: import("vue").PropType<(result: import("./type").ValidateResultContext<import("./type").Data>) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    colon: BooleanConstructor;
    data: {
        type: import("vue").PropType<import("./type").Data>;
        default: () => {};
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    errorMessage: {
        type: import("vue").PropType<import("./type").FormErrorMessage>;
    };
    formControlledComponents: {
        type: import("vue").PropType<string[]>;
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "top" | "right">;
        default: "left" | "top" | "right";
        validator(val: "left" | "top" | "right"): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    layout: {
        type: import("vue").PropType<"inline" | "vertical">;
        default: "inline" | "vertical";
        validator(val: "inline" | "vertical"): boolean;
    };
    preventSubmitDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    resetType: {
        type: import("vue").PropType<"empty" | "initial">;
        default: "empty" | "initial";
        validator(val: "empty" | "initial"): boolean;
    };
    rules: {
        type: import("vue").PropType<{
            [x: string]: import("./type").FormRule[];
        }>;
    };
    scrollToFirstError: {
        type: import("vue").PropType<"" | "auto" | "smooth">;
        default: "" | "auto" | "smooth";
        validator(val: "" | "auto" | "smooth"): boolean;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    statusIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("../common").SlotReturnValue)>;
        default: any;
    };
    submitWithWarningMessage: BooleanConstructor;
    onReset: import("vue").PropType<(context: {
        e?: Event;
    }) => void>;
    onSubmit: import("vue").PropType<(context: import("./type").SubmitContext<import("./type").Data>) => void>;
    onValidate: import("vue").PropType<(result: import("./type").ValidateResultContext<import("./type").Data>) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    data: {};
    disabled: boolean;
    layout: "inline" | "vertical";
    showErrorMessage: boolean;
    labelAlign: "left" | "top" | "right";
    labelWidth: string | number;
    statusIcon: boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("../common").SlotReturnValue);
    requiredMark: boolean;
    colon: boolean;
    resetType: "empty" | "initial";
    scrollToFirstError: "" | "auto" | "smooth";
    preventSubmitDefault: boolean;
    submitWithWarningMessage: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const FormItem: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            label: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            for: string;
            showErrorMessage: boolean;
            statusIcon: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            requiredMark: boolean;
            successBorder: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            for: {
                type: StringConstructor;
                default: string;
            };
            help: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            labelAlign: {
                type: import("vue").PropType<"left" | "top" | "right">;
                validator(val: "left" | "top" | "right"): boolean;
            };
            labelWidth: {
                type: import("vue").PropType<string | number>;
            };
            name: {
                type: import("vue").PropType<string | number>;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: any;
            };
            rules: {
                type: import("vue").PropType<import("./type").FormRule[]>;
            };
            showErrorMessage: {
                type: BooleanConstructor;
                default: any;
            };
            statusIcon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: any;
            };
            successBorder: BooleanConstructor;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "label" | "for" | "showErrorMessage" | "statusIcon" | "requiredMark" | "successBorder">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            for: {
                type: StringConstructor;
                default: string;
            };
            help: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            labelAlign: {
                type: import("vue").PropType<"left" | "top" | "right">;
                validator(val: "left" | "top" | "right"): boolean;
            };
            labelWidth: {
                type: import("vue").PropType<string | number>;
            };
            name: {
                type: import("vue").PropType<string | number>;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: any;
            };
            rules: {
                type: import("vue").PropType<import("./type").FormRule[]>;
            };
            showErrorMessage: {
                type: BooleanConstructor;
                default: any;
            };
            statusIcon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: any;
            };
            successBorder: BooleanConstructor;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            label: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            for: string;
            showErrorMessage: boolean;
            statusIcon: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            requiredMark: boolean;
            successBorder: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        for: {
            type: StringConstructor;
            default: string;
        };
        help: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string;
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "right">;
            validator(val: "left" | "top" | "right"): boolean;
        };
        labelWidth: {
            type: import("vue").PropType<string | number>;
        };
        name: {
            type: import("vue").PropType<string | number>;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: any;
        };
        rules: {
            type: import("vue").PropType<import("./type").FormRule[]>;
        };
        showErrorMessage: {
            type: BooleanConstructor;
            default: any;
        };
        statusIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: any;
        };
        successBorder: BooleanConstructor;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    for: {
        type: StringConstructor;
        default: string;
    };
    help: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "top" | "right">;
        validator(val: "left" | "top" | "right"): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
    };
    name: {
        type: import("vue").PropType<string | number>;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    rules: {
        type: import("vue").PropType<import("./type").FormRule[]>;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: any;
    };
    statusIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    successBorder: BooleanConstructor;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    label: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    for: string;
    showErrorMessage: boolean;
    statusIcon: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    requiredMark: boolean;
    successBorder: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Form;
