{"version":3,"file":"form-item.js","sources":["../../src/form/form-item.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  VNode,\n  watch,\n} from 'vue';\nimport {\n  CheckCircleFilledIcon as TdCheckCircleFilledIcon,\n  CloseCircleFilledIcon as TdCloseCircleFilledIcon,\n  ErrorCircleFilledIcon as TdErrorCircleFilledIcon,\n} from 'tdesign-icons-vue-next';\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport lodashGet from 'lodash/get';\nimport lodashSet from 'lodash/set';\nimport isNil from 'lodash/isNil';\nimport lodashTemplate from 'lodash/template';\nimport { validate } from './form-model';\nimport {\n  AllValidateResult,\n  Data,\n  FormErrorMessage,\n  FormItemValidateMessage,\n  FormRule,\n  ValidateTriggerType,\n  ValueType,\n} from './type';\nimport props from './form-item-props';\nimport {\n  AnalysisValidateResult,\n  ErrorListType,\n  FormInjectionKey,\n  FormItemContext,\n  FormItemInjectionKey,\n  SuccessListType,\n  useCLASSNAMES,\n  ValidateStatus,\n} from './const';\n\nimport { useConfig, usePrefixClass, useTNodeJSX } from '../hooks';\nimport { useGlobalIcon } from '../hooks/useGlobalIcon';\n\ntype IconConstructor = typeof TdErrorCircleFilledIcon;\n\nexport type FormItemValidateResult<T extends Data = Data> = { [key in keyof T]: boolean | AllValidateResult[] };\n\nexport default defineComponent({\n  name: 'TFormItem',\n\n  props: { ...props },\n  setup(props, { slots }) {\n    const renderContent = useTNodeJSX();\n    const CLASS_NAMES = useCLASSNAMES();\n    const { globalConfig } = useConfig('form');\n    const { CheckCircleFilledIcon, CloseCircleFilledIcon, ErrorCircleFilledIcon } = useGlobalIcon({\n      CheckCircleFilledIcon: TdCheckCircleFilledIcon,\n      CloseCircleFilledIcon: TdCloseCircleFilledIcon,\n      ErrorCircleFilledIcon: TdErrorCircleFilledIcon,\n    });\n    const form = inject(FormInjectionKey, undefined);\n\n    const FORM_ITEM_CLASS_PREFIX = usePrefixClass('form-item__');\n\n    const needRequiredMark = computed(() => {\n      const requiredMark = props.requiredMark ?? form?.requiredMark ?? globalConfig.value.requiredMark;\n      const isRequired = innerRules.value.filter((rule) => rule.required).length > 0;\n      return requiredMark ?? isRequired;\n    });\n\n    const hasLabel = computed(() => slots.label || props.label);\n    const hasColon = computed(() => !!(form?.colon && hasLabel.value));\n    const FROM_LABEL = usePrefixClass('form__label');\n    const labelAlign = computed(() => (isNil(props.labelAlign) ? form?.labelAlign : props.labelAlign));\n    const labelWidth = computed(() => (isNil(props.labelWidth) ? form?.labelWidth : props.labelWidth));\n\n    const labelClasses = computed(() => [\n      CLASS_NAMES.value.label,\n      {\n        [`${FROM_LABEL.value}--required`]: needRequiredMark.value,\n        [`${FROM_LABEL.value}--colon`]: hasColon.value,\n        [`${FROM_LABEL.value}--top`]: hasLabel.value && (labelAlign.value === 'top' || !labelWidth.value),\n        [`${FROM_LABEL.value}--left`]: labelAlign.value === 'left' && labelWidth.value,\n        [`${FROM_LABEL.value}--right`]: labelAlign.value === 'right' && labelWidth.value,\n      },\n    ]);\n\n    const renderLabel = () => {\n      if (Number(labelWidth.value) === 0) return;\n\n      let labelStyle = {};\n      if (labelWidth.value && labelAlign.value !== 'top') {\n        if (typeof labelWidth.value === 'number') {\n          labelStyle = { width: `${labelWidth.value}px` };\n        } else {\n          labelStyle = { width: labelWidth.value };\n        }\n      }\n\n      return (\n        <div class={labelClasses.value} style={labelStyle}>\n          <label for={props.for}>{renderContent('label')}</label>\n        </div>\n      );\n    };\n\n    /** Suffix Icon */\n    const getDefaultIcon = (): VNode => {\n      const resultIcon = (Icon: IconConstructor) => (\n        <span class={CLASS_NAMES.value.status}>\n          <Icon />\n        </span>\n      );\n      const list = errorList.value;\n      if (verifyStatus.value === ValidateStatus.SUCCESS) {\n        return resultIcon(CheckCircleFilledIcon);\n      }\n      if (list?.[0]) {\n        const type = list[0].type || 'error';\n        const icon =\n          {\n            error: CloseCircleFilledIcon,\n            warning: ErrorCircleFilledIcon,\n          }[type] || CheckCircleFilledIcon;\n        return resultIcon(icon as IconConstructor);\n      }\n      return null;\n    };\n    const renderSuffixIcon = () => {\n      const { statusIcon } = props;\n      if (statusIcon === false) return;\n\n      let resultIcon = renderContent('statusIcon', { defaultNode: getDefaultIcon() });\n      if (resultIcon) return <span class={CLASS_NAMES.value.status}>{resultIcon}</span>;\n      if (resultIcon === false) return;\n\n      resultIcon = form?.renderContent('statusIcon', { defaultNode: getDefaultIcon() });\n      if (resultIcon) return resultIcon;\n    };\n    /** Suffix Icon END */\n\n    /** Content Style */\n    const errorClasses = computed(() => {\n      if (!showErrorMessage.value) return '';\n      if (verifyStatus.value === ValidateStatus.SUCCESS) {\n        return props.successBorder\n          ? [CLASS_NAMES.value.success, CLASS_NAMES.value.successBorder].join(' ')\n          : CLASS_NAMES.value.success;\n      }\n      if (!errorList.value.length) return;\n      const type = errorList.value[0].type || 'error';\n      return type === 'error' ? CLASS_NAMES.value.error : CLASS_NAMES.value.warning;\n    });\n    const contentClasses = computed(() => [CLASS_NAMES.value.controls, errorClasses.value]);\n    const contentStyle = computed(() => {\n      let contentStyle = {};\n      if (labelWidth.value && labelAlign.value !== 'top') {\n        if (typeof labelWidth.value === 'number') {\n          contentStyle = { marginLeft: `${labelWidth.value}px` };\n        } else {\n          contentStyle = { marginLeft: labelWidth.value };\n        }\n      }\n\n      return contentStyle;\n    });\n    /** Content Style END */\n\n    const errorList = ref<ErrorListType[]>([]);\n    const successList = ref<SuccessListType[]>([]);\n    const verifyStatus = ref(ValidateStatus.TO_BE_VALIDATED);\n    const resetValidating = ref(false);\n    const needResetField = ref(false);\n\n    const resetHandler = () => {\n      needResetField.value = false;\n      errorList.value = [];\n      successList.value = [];\n      verifyStatus.value = ValidateStatus.TO_BE_VALIDATED;\n    };\n    const getEmptyValue = (): ValueType => {\n      const type = Object.prototype.toString.call(lodashGet(form?.data, props.name));\n      let emptyValue: ValueType;\n      if (type === '[object String]') {\n        emptyValue = '';\n      }\n      if (type === '[object Array]') {\n        emptyValue = [];\n      }\n      if (type === '[object Object]') {\n        emptyValue = {};\n      }\n      return emptyValue;\n    };\n    const resetField = async (resetType: 'initial' | 'empty' | undefined = form?.resetType) => {\n      if (!props.name) return;\n\n      if (resetType === 'empty') lodashSet(form?.data, props.name, getEmptyValue());\n      else if (resetType === 'initial') lodashSet(form?.data, props.name, initialValue.value);\n\n      await nextTick();\n      if (resetValidating.value) {\n        needResetField.value = true;\n      } else {\n        resetHandler();\n      }\n    };\n\n    const errorMessages = computed<FormErrorMessage>(() => form?.errorMessage ?? globalConfig.value.errorMessage);\n    const innerRules = computed<FormRule[]>(() => {\n      if (props.rules?.length) return props.rules;\n      if (!props.name) return [];\n      const index = `${props.name}`.lastIndexOf('.') || -1;\n      const pRuleName = `${props.name}`.slice(index + 1);\n      return lodashGet(form?.rules, props.name) || lodashGet(form?.rules, pRuleName) || [];\n    });\n\n    const analysisValidateResult = async (trigger: ValidateTriggerType): Promise<AnalysisValidateResult> => {\n      const result: AnalysisValidateResult = {\n        successList: [],\n        errorList: [],\n        rules: [],\n        resultList: [],\n        allowSetValue: false,\n      };\n      result.rules =\n        trigger === 'all'\n          ? innerRules.value\n          : innerRules.value.filter((item) => (item.trigger || 'change') === trigger);\n      if (innerRules.value.length && !result.rules?.length) {\n        return result;\n      }\n      result.allowSetValue = true;\n      result.resultList = await validate(value.value, result.rules);\n      result.errorList = result.resultList\n        .filter((item) => item.result !== true)\n        .map((item: ErrorListType) => {\n          Object.keys(item).forEach((key) => {\n            if (!item.message && errorMessages.value[key]) {\n              const compiled = lodashTemplate(errorMessages.value[key]);\n              const name = typeof props.label === 'string' ? props.label : props.name;\n              item.message = compiled({\n                name,\n                validate: item[key],\n              });\n            }\n          });\n          return item;\n        });\n      // 仅有自定义校验方法才会存在 successList\n      result.successList = result.resultList.filter(\n        (item) => item.result === true && item.message && item.type === 'success',\n      ) as SuccessListType[];\n\n      return result;\n    };\n    const validateHandler = async <T extends Data = Data>(\n      trigger: ValidateTriggerType,\n      showErrorMessage?: boolean,\n    ): Promise<FormItemValidateResult<T>> => {\n      resetValidating.value = true;\n      // undefined | boolean\n      freeShowErrorMessage.value = showErrorMessage;\n      const {\n        successList: innerSuccessList,\n        errorList: innerErrorList,\n        rules,\n        resultList,\n        allowSetValue,\n      } = await analysisValidateResult(trigger);\n\n      if (allowSetValue) {\n        successList.value = innerSuccessList;\n        errorList.value = innerErrorList;\n      }\n      // 根据校验结果设置校验状态\n      if (rules.length) {\n        verifyStatus.value = innerErrorList.length ? ValidateStatus.FAIL : ValidateStatus.SUCCESS;\n      }\n      // 重置处理\n      if (needResetField.value) {\n        resetHandler();\n      }\n      resetValidating.value = false;\n\n      return {\n        [props.name]: innerErrorList.length === 0 ? true : resultList,\n      } as FormItemValidateResult<T>;\n    };\n    const validateOnly = async <T extends Data>(trigger: ValidateTriggerType): Promise<FormItemValidateResult<T>> => {\n      const { errorList: innerErrorList, resultList } = await analysisValidateResult(trigger);\n\n      return {\n        [props.name]: innerErrorList.length === 0 ? true : resultList,\n      } as FormItemValidateResult<T>;\n    };\n\n    const setValidateMessage = (validateMessage: FormItemValidateMessage[]) => {\n      if (!validateMessage && !Array.isArray(validateMessage)) return;\n      if (validateMessage.length === 0) {\n        errorList.value = [];\n        verifyStatus.value = ValidateStatus.SUCCESS;\n      }\n      errorList.value = validateMessage.map((item) => ({ ...item, result: false }));\n      verifyStatus.value = ValidateStatus.FAIL;\n    };\n\n    const value = computed<ValueType>(() => form?.data && lodashGet(form?.data, props.name));\n    const initialValue = ref<ValueType>(undefined);\n    const { name } = toRefs(props);\n    const context: FormItemContext = reactive({\n      name,\n      resetHandler,\n      resetField,\n      validate: validateHandler,\n      validateOnly,\n      setValidateMessage,\n    });\n\n    onMounted(() => {\n      initialValue.value = cloneDeep(value.value);\n      form?.children.push(context);\n    });\n    onBeforeUnmount(() => {\n      if (form) form.children = form?.children.filter((ctx) => ctx !== context);\n    });\n    watch(\n      value,\n      async () => {\n        await validateHandler('change');\n      },\n      { deep: true },\n    );\n\n    const freeShowErrorMessage = ref<boolean>(undefined);\n    const showErrorMessage = computed(() => {\n      if (typeof freeShowErrorMessage.value === 'boolean') return freeShowErrorMessage.value;\n      if (typeof props.showErrorMessage === 'boolean') return props.showErrorMessage;\n      return form?.showErrorMessage;\n    });\n\n    const classes = computed(() => [\n      CLASS_NAMES.value.formItem,\n      FORM_ITEM_CLASS_PREFIX.value + (props.name || ''),\n      {\n        [CLASS_NAMES.value.formItemWithHelp]: helpNode.value,\n        [CLASS_NAMES.value.formItemWithExtra]: extraNode.value,\n      },\n    ]);\n    const helpNode = computed<VNode>(() => {\n      const help = renderContent('help');\n      if (help) return <div class={CLASS_NAMES.value.help}>{help}</div>;\n      return null;\n    });\n    const extraNode = computed<VNode>(() => {\n      const getExtraNode = (content: string) => <div class={CLASS_NAMES.value.extra}>{content}</div>;\n      const list = errorList.value;\n      if (showErrorMessage.value && list?.[0]?.message) {\n        return getExtraNode(list[0].message);\n      }\n      if (successList.value.length) {\n        return getExtraNode(successList.value[0].message);\n      }\n      return null;\n    });\n\n    const handleBlur = async () => {\n      await validateHandler('blur');\n    };\n    provide(FormItemInjectionKey, {\n      handleBlur,\n    });\n\n    return () => (\n      <div class={classes.value}>\n        {renderLabel()}\n        <div class={contentClasses.value} style={contentStyle.value}>\n          <div class={CLASS_NAMES.value.controlsContent}>\n            {renderContent('default')}\n            {renderSuffixIcon()}\n          </div>\n          {[helpNode.value, extraNode.value]}\n        </div>\n      </div>\n    );\n  },\n});\n"],"names":["defineComponent","name","props","setup","slots","renderContent","useTNodeJSX","CLASS_NAMES","useCLASSNAMES","useConfig","globalConfig","useGlobalIcon","CheckCircleFilledIcon","TdCheckCircleFilledIcon","CloseCircleFilledIcon","TdCloseCircleFilledIcon","ErrorCircleFilledIcon","TdErrorCircleFilledIcon","form","inject","FormInjectionKey","FORM_ITEM_CLASS_PREFIX","usePrefixClass","needRequiredMark","computed","requiredMark","value","isRequired","innerRules","filter","rule","required","length","hasLabel","label","hasColon","colon","FROM_LABEL","labelAlign","isNil","labelWidth","labelClasses","_defineProperty","renderLabel","Number","labelStyle","width","_createVNode","getDefaultIcon","resultIcon","Icon","status","list","errorList","verifyStatus","ValidateStatus","SUCCESS","type","icon","error","warning","renderSuffixIcon","statusIcon","defaultNode","errorClasses","showErrorMessage","successBorder","success","join","contentClasses","controls","contentStyle","marginLeft","ref","successList","TO_BE_VALIDATED","resetValidating","needResetField","resetHandler","getEmptyValue","Object","prototype","toString","call","lodashGet","data","emptyValue","resetField","_asyncToGenerator","_regeneratorRuntime","resetType","lodashSet","initialValue","nextTick","errorMessages","errorMessage","rules","index","lastIndexOf","pRuleName","slice","analysisValidateResult","trigger","result","resultList","allowSetValue","item","validate","map","keys","forEach","key","message","compiled","lodashTemplate","validateHandler","freeShowErrorMessage","innerSuccessList","innerErrorList","FAIL","validateOnly","setValidateMessage","validateMessage","Array","isArray","toRefs","context","reactive","onMounted","cloneDeep","children","push","onBeforeUnmount","ctx","watch","deep","classes","formItem","formItemWithHelp","helpNode","formItemWithExtra","extraNode","help","getExtraNode","content","extra","handleBlur","provide","FormItemInjectionKey","controlsContent"],"mappings":"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"}