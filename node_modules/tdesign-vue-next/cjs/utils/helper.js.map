{"version":3,"file":"helper.js","sources":["../../src/utils/helper.ts"],"sourcesContent":["import camelCase from 'lodash/camelCase';\n\nexport function omit(obj: object, fields: string[]): object {\n  const shallowCopy = {\n    ...obj,\n  };\n  for (let i = 0; i < fields.length; i++) {\n    const key = fields[i];\n    delete shallowCopy[key];\n  }\n  return shallowCopy;\n}\n\nexport function removeEmptyAttrs<T>(obj: T): Partial<T> {\n  const newObj = {};\n\n  Object.keys(obj).forEach((key) => {\n    if (typeof obj[key] !== 'undefined' || obj[key] === null) {\n      newObj[key] = obj[key];\n    }\n  });\n\n  return newObj;\n}\n\nexport function getTabElementByValue(tabs: [] = [], value: string): object {\n  const [result] = tabs.filter((item) => {\n    const { id } = item;\n    return `${id}` === `${value}`;\n  });\n  return result || null;\n}\n\nexport function firstUpperCase(str: string): string {\n  return str.toLowerCase().replace(/( |^)[a-z]/g, (char: string) => char.toUpperCase());\n}\n\nexport type Gradients = { [percent: string]: string };\nexport type FromTo = { from: string; to: string };\nexport type LinearGradient = { direction?: string } & (Gradients | FromTo);\nexport function getBackgroundColor(color: string | string[] | LinearGradient): string {\n  if (typeof color === 'string') {\n    return color;\n  }\n  if (Array.isArray(color)) {\n    if (color[0] && color[0][0] === '#') {\n      color.unshift('90deg');\n    }\n    return `linear-gradient( ${color.join(',')} )`;\n  }\n  const { from, to, direction = 'to right', ...rest } = color;\n  let keys = Object.keys(rest);\n  if (keys.length) {\n    keys = keys.sort((a, b) => parseFloat(a.substr(0, a.length - 1)) - parseFloat(b.substr(0, b.length - 1)));\n    const tempArr = keys.map((key: any) => `${rest[key]} ${key}`);\n    return `linear-gradient(${direction}, ${tempArr.join(',')})`;\n  }\n  return `linear-gradient(${direction}, ${from}, ${to})`;\n}\n\n// keyboard-event => onKeyboardEvent\nexport function getPropsApiByEvent(eventName: string) {\n  return camelCase(`on-${eventName}`);\n}\n\n/**\n * 计算字符串字符的长度并可以截取字符串。\n * @param str 传入字符串\n * @param maxCharacter 规定最大字符串长度\n * @returns 当没有传入maxCharacter时返回字符串字符长度，当传入maxCharacter时返回截取之后的字符串和长度。\n */\nexport function getCharacterLength(str: string, maxCharacter?: number) {\n  const hasMaxCharacter = typeof maxCharacter === 'number';\n  if (!str || str.length === 0) {\n    if (hasMaxCharacter) {\n      return {\n        length: 0,\n        characters: str,\n      };\n    }\n    return 0;\n  }\n  let len = 0;\n  for (let i = 0; i < str.length; i++) {\n    let currentStringLength = 0;\n    if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {\n      currentStringLength = 2;\n    } else {\n      currentStringLength = 1;\n    }\n    if (hasMaxCharacter && len + currentStringLength > maxCharacter) {\n      return {\n        length: len,\n        characters: str.slice(0, i),\n      };\n    }\n    len += currentStringLength;\n  }\n  if (hasMaxCharacter) {\n    return {\n      length: len,\n      characters: str,\n    };\n  }\n  return len;\n}\n\n/**\n * 兼容样式中支持number/string类型的传值 得出最后的结果。\n * @param param number或string类型的可用于样式上的值\n * @returns 可使用的样式值。\n */\nexport function pxCompat(param: string | number) {\n  return typeof param === 'number' ? `${param}px` : param;\n}\n"],"names":["omit","obj","fields","shallowCopy","i","length","key","removeEmptyAttrs","newObj","Object","keys","forEach","getTabElementByValue","tabs","value","filter","item","id","_slicedToArray","result","firstUpperCase","str","toLowerCase","replace","char","toUpperCase","getBackgroundColor","color","Array","isArray","unshift","join","from","to","direction","rest","sort","a","b","parseFloat","substr","tempArr","map","getPropsApiByEvent","eventName","camelCase","getCharacterLength","maxCharacter","hasMaxCharacter","characters","len","currentStringLength","charCodeAt","slice","pxCompat","param"],"mappings":"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"}