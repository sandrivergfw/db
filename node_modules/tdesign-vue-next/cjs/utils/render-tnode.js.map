{"version":3,"file":"render-tnode.js","sources":["../../src/utils/render-tnode.ts"],"sourcesContent":["import { h, ComponentPublicInstance, VNode, isVNode } from 'vue';\nimport isEmpty from 'lodash/isEmpty';\nimport isString from 'lodash/isString';\nimport isFunction from 'lodash/isFunction';\nimport isObject from 'lodash/isObject';\nimport camelCase from 'lodash/camelCase';\nimport kebabCase from 'lodash/kebabCase';\n\nexport interface JSXRenderContext {\n  defaultNode?: VNode | string;\n  params?: Record<string, any>;\n  // 是否不打印 LOG\n  silent?: boolean;\n}\n\nexport type OptionsType = VNode | JSXRenderContext | string;\n\nexport function getDefaultNode(options?: OptionsType) {\n  let defaultNode;\n  if (isObject(options) && 'defaultNode' in options) {\n    defaultNode = options.defaultNode;\n  } else if (isVNode(options) || isString(options)) {\n    defaultNode = options;\n  }\n\n  return defaultNode;\n}\n\nexport function getParams(options?: OptionsType) {\n  return isObject(options) && 'params' in options ? options.params : {};\n}\n\n// 同时支持驼峰命名和中划线命名的插槽，示例：value-display 和 valueDisplay\nexport function handleSlots(instance: ComponentPublicInstance, params: Record<string, any>, name: string) {\n  // 检查是否存在 驼峰命名 的插槽\n  let node = instance.$slots[camelCase(name)]?.(params);\n  if (node) return node;\n  // 检查是否存在 中划线命名 的插槽\n  node = instance.$slots[kebabCase(name)]?.(params);\n  if (node) return node;\n  return null;\n}\n\n/**\n * 通过JSX的方式渲染 TNode，props 和 插槽同时处理，也能处理默认值为 true 则渲染默认节点的情况\n * @param vm 组件实例\n * @param name 插槽和属性名称\n * @param options 值可能为默认渲染节点，也可能是默认渲染节点和参数的集合\n * @example renderTNodeJSX(this, 'closeBtn')  优先级 props function 大于 插槽\n * @example renderTNodeJSX(this, 'closeBtn', <close-icon />)。 当属性值为 true 时则渲染 <close-icon />\n * @example renderTNodeJSX(this, 'closeBtn', { defaultNode: <close-icon />, params })。 params 为渲染节点时所需的参数\n */\nexport const renderTNodeJSX = (instance: ComponentPublicInstance, name: string, options?: OptionsType) => {\n  // assemble params && defaultNode\n  const params = getParams(options);\n  const defaultNode = getDefaultNode(options);\n\n  // 处理 props 类型的Node\n  let propsNode;\n  if (name in instance) {\n    propsNode = instance[name];\n  }\n\n  // 是否静默日志\n  // const isSilent = Boolean(isObject(options) && 'silent' in options && options.silent);\n  // // 同名插槽和属性同时存在，则提醒用户只需要选择一种方式即可\n  // if (instance.$slots[name] && propsNode && propsNode !== true && !isSilent) {\n  //   console.warn(`Both $slots.${name} and $props.${name} exist, $props.${name} is preferred`);\n  // }\n\n  // propsNode 为 false 不渲染\n  if (propsNode === false) return;\n  if (propsNode === true && defaultNode) {\n    return handleSlots(instance, params, name) || defaultNode;\n  }\n\n  // 同名 props 和 slot 优先处理 props\n  if (isFunction(propsNode)) return propsNode(h, params);\n  const isPropsEmpty = [undefined, params, ''].includes(propsNode);\n  // Props 为空，但插槽存在\n  if (isPropsEmpty && (instance.$slots[camelCase(name)] || instance.$slots[kebabCase(name)])) {\n    return handleSlots(instance, params, name);\n  }\n  return propsNode;\n};\n\n/**\n * 通过JSX的方式渲染 TNode，props 和 插槽同时处理。与 renderTNodeJSX 区别在于 属性值为 undefined 时会渲染默认节点\n * @param vm 组件实例\n * @param name 插槽和属性名称\n * @example renderTNodeJSX(this, 'closeBtn')\n * @example renderTNodeJSX(this, 'closeBtn', <close-icon />)。this.closeBtn 为空时，则兜底渲染 <close-icon />\n * @example renderTNodeJSX(this, 'closeBtn', { defaultNode: <close-icon />, params }) 。params 为渲染节点时所需的参数\n */\nexport const renderTNodeJSXDefault = (vm: ComponentPublicInstance, name: string, options?: OptionsType) => {\n  const defaultNode = getDefaultNode(options);\n  return renderTNodeJSX(vm, name, options) || defaultNode;\n};\n\n/**\n * 用于处理相同名称的 TNode 渲染\n * @param vm 组件实例\n * @param name1 第一个名称，优先级高于 name2\n * @param name2 第二个名称\n * @param defaultNode 默认渲染内容：当 name1 和 name2 都为空时会启动默认内容渲染\n * @example renderContent(this, 'default', 'content')\n * @example renderContent(this, 'default', 'content', '我是默认内容')\n * @example renderContent(this, 'default', 'content', { defaultNode: '我是默认内容', params })\n */\nexport const renderContent = (vm: ComponentPublicInstance, name1: string, name2: string, options?: OptionsType) => {\n  const params = getParams(options);\n  const defaultNode = getDefaultNode(options);\n\n  const toParams = params ? { params } : undefined;\n\n  const node1 = renderTNodeJSX(vm, name1, toParams);\n  const node2 = renderTNodeJSX(vm, name2, toParams);\n\n  const res = isEmpty(node1) ? node2 : node1;\n  return isEmpty(res) ? defaultNode : res;\n};\n"],"names":["getDefaultNode","options","defaultNode","isObject","isVNode","isString","getParams","params","handleSlots","instance","name","node","$slots","camelCase","kebabCase","renderTNodeJSX","propsNode","isFunction","h","isPropsEmpty","includes","renderTNodeJSXDefault","vm","renderContent","name1","name2","toParams","node1","node2","res","isEmpty"],"mappings":"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"}