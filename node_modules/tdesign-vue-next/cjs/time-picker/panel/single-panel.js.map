{"version":3,"file":"single-panel.js","sources":["../../../src/time-picker/panel/single-panel.tsx"],"sourcesContent":["import { computed, defineComponent, ref, watch, toRefs, onMounted, reactive, nextTick } from 'vue';\nimport debounce from 'lodash/debounce';\nimport range from 'lodash/range';\nimport padStart from 'lodash/padStart';\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\n\nimport { panelColProps } from './props';\nimport {\n  EPickerCols,\n  TWELVE_HOUR_FORMAT,\n  TIME_FORMAT,\n  AM,\n  PM,\n  MERIDIEM_LIST,\n} from '../../_common/js/time-picker/const';\nimport { closestLookup } from '../../_common/js/time-picker/utils';\nimport { useConfig } from '../../hooks/useConfig';\n\ndayjs.extend(customParseFormat);\n\nconst timeArr = [EPickerCols.hour, EPickerCols.minute, EPickerCols.second, EPickerCols.milliSecond];\n\nconst panelOffset = {\n  top: 15,\n  bottom: 21,\n};\n\nexport default defineComponent({\n  name: 'TTimePickerPanelCol',\n  props: {\n    ...panelColProps(),\n    position: String,\n    triggerScroll: Boolean,\n    onChange: Function,\n    resetTriggerScroll: Function,\n    isShowPanel: Boolean,\n  },\n\n  setup(props) {\n    const { steps, value, format, position, triggerScroll } = toRefs(props);\n\n    const { globalConfig } = useConfig('timePicker');\n\n    const { classPrefix } = useConfig();\n\n    const cols = ref<Array<EPickerCols>>([]);\n    const bodyRef = ref();\n    const maskRef = ref(null);\n    // 每个滚动列的ref 顺序不定 所以只要有5列标识即可\n    const colsRef = reactive({ 0: null, 1: null, 2: null, 3: null, 4: null, 5: null });\n\n    const dayjsValue = computed(() => {\n      const isStepsSet = !!steps.value.filter((v) => v > 1).length;\n\n      if (value.value) return dayjs(value.value, format.value);\n\n      if (isStepsSet) return dayjs().hour(0).minute(0).second(0);\n\n      return dayjs();\n    });\n\n    const panelClassName = computed(() => `${classPrefix.value}-time-picker__panel`);\n\n    // 面板打开时 触发滚动 初始化面板\n    watch(\n      () => dayjsValue.value,\n      () => {\n        if (dayjsValue.value) updateTimeScrollPos(true);\n      },\n    );\n\n    // 时间通过外部触发时 同样触发滚动\n    watch(\n      () => triggerScroll.value,\n      () => {\n        if (triggerScroll.value) {\n          updateTimeScrollPos(true);\n        }\n      },\n    );\n\n    onMounted(() => {\n      const match = format.value.match(TIME_FORMAT);\n\n      const [, startCol, hourCol, minuteCol, secondCol, milliSecondCol, endCol] = match;\n      const { meridiem, hour, minute, second, milliSecond } = EPickerCols;\n\n      const renderCol = [\n        startCol && meridiem,\n        hourCol && hour,\n        minuteCol && minute,\n        secondCol && second,\n        milliSecondCol && milliSecond,\n        endCol && meridiem,\n      ].filter((v) => !!v);\n\n      cols.value = renderCol;\n    });\n\n    // 获取每个时间的高度\n    const getItemHeight = () => {\n      const maskDom = maskRef.value?.querySelector('div');\n      if (!maskDom) {\n        return {\n          offsetHeight: 0,\n          margin: 0,\n        };\n      }\n      return {\n        offsetHeight: maskDom.offsetHeight,\n        margin: parseInt(getComputedStyle(maskDom).marginTop, 10),\n      };\n    };\n\n    const timeItemCanUsed = (col: EPickerCols, el: string | number) => {\n      const colIdx = timeArr.indexOf(col);\n      if (colIdx !== -1) {\n        const params: [number, number, number] = [\n          dayjsValue.value.hour(),\n          dayjsValue.value.minute(),\n          dayjsValue.value.second(),\n        ];\n        params[colIdx] = Number(el);\n        return !props.disableTime?.(...params, { partial: position.value || 'start' })?.[col]?.includes(Number(el));\n      }\n      return true;\n    };\n\n    // 获取需要渲染的column\n    const getColList = (col: EPickerCols) => {\n      let count = 0;\n\n      if (timeArr.includes(col)) {\n        // hour、minute and second columns\n        const colIdx = timeArr.indexOf(col);\n        const colStep = steps.value[colIdx] || 1;\n\n        if (col === EPickerCols.hour)\n          count = TWELVE_HOUR_FORMAT.test(format.value) ? 11 : 23; // 小时最大为23 12小时制最大为11\n        else if (col === EPickerCols.milliSecond) count = 999; // 毫秒最大为999\n        else count = 59;\n\n        const colList = range(0, count + 1, Number(colStep)).map((v) => padStart(String(v), 2, '0')) || [];\n        return props.hideDisabledTime && !!props.disableTime\n          ? colList.filter((t) => {\n              const params: [number, number, number] = [\n                dayjsValue.value.hour(),\n                dayjsValue.value.minute(),\n                dayjsValue.value.second(),\n              ];\n              params[colIdx] = Number(t);\n              return !props\n                .disableTime?.(...params, { partial: position.value || 'start' })\n                ?.[col]?.includes(Number(t));\n            })\n          : colList;\n      }\n      // meridiem column\n      return MERIDIEM_LIST;\n    };\n\n    const getScrollDistance = (col: EPickerCols, time: number | string) => {\n      if (col === EPickerCols.hour && /[h]{1}/.test(format.value))\n        // eslint-disable-next-line no-param-reassign\n        (time as number) %= 12; // 一定是数字，直接cast\n\n      const itemIdx = getColList(col).indexOf(padStart(String(time), 2, '0'));\n      const { offsetHeight, margin } = getItemHeight();\n      const timeItemTotalHeight = offsetHeight + margin;\n      const distance = Math.abs(Math.max(0, itemIdx) * timeItemTotalHeight);\n      return distance;\n    };\n\n    const handleScroll = (col: EPickerCols, idx: number) => {\n      let val: number | string;\n      let formattedVal: string;\n      if (!props.isShowPanel) return;\n\n      const scrollTop = (colsRef[idx]?.scrollTop || 0) + panelOffset.top;\n      const { offsetHeight, margin } = getItemHeight();\n      const timeItemTotalHeight = offsetHeight + margin;\n      let colStep = Math.abs(Math.round(scrollTop / timeItemTotalHeight + 0.5));\n\n      const meridiem = MERIDIEM_LIST[Math.min(colStep - 1, 1)].toLowerCase(); // 处理PM、AM与am、pm\n\n      if (Number.isNaN(colStep)) colStep = 1;\n      if (timeArr.includes(col)) {\n        // hour、minute、 second and milliSecond\n        let max = 59;\n        if (col === EPickerCols.hour) max = /[h]{1}/.test(format.value) ? 11 : 23; // 小时最大为23 12小时制最大为11\n        else if (col === EPickerCols.milliSecond) max = 999; // 毫秒最大为999\n\n        const colIdx = timeArr.indexOf(col);\n        const availableArr = range(0, max + 1, Number(steps.value[colIdx]) || 1);\n        val = closestLookup(\n          availableArr,\n          Number(getColList(col)[Math.min(colStep - 1, max + 1, availableArr.length - 1)]),\n          Number(steps.value[colIdx]) || 1,\n        );\n        if (Number.isNaN(val)) val = availableArr[availableArr.length - 1];\n        if (col === EPickerCols.hour && cols.value.includes(EPickerCols.meridiem) && dayjsValue.value.hour() >= 12) {\n          // 如果是十二小时制需要再判断\n          val = Number(val) + 12;\n        }\n      }\n      // meridiem columns\n      else val = meridiem;\n\n      const distance = getScrollDistance(col, val);\n      if (!dayjs(dayjsValue.value).isValid() || (value.value && !dayjs(value.value, format.value, true).isValid()))\n        return;\n\n      if (timeArr.includes(col)) {\n        if (timeItemCanUsed(col, val)) formattedVal = dayjsValue.value[col]?.(val).format(format.value);\n      } else {\n        const currentHour = dayjsValue.value.hour();\n        if (meridiem === AM && currentHour >= 12) {\n          formattedVal = dayjsValue.value.hour(currentHour - 12).format(format.value);\n        } else if (meridiem === PM && currentHour < 12) {\n          formattedVal = dayjsValue.value.hour(currentHour + 12).format(format.value);\n        } else {\n          formattedVal = dayjsValue.value.format(format.value);\n        }\n      }\n      if (formattedVal !== value.value) props.onChange?.(formattedVal);\n\n      if (distance !== scrollTop) {\n        const scrollCtrl = colsRef[cols.value.indexOf(col)];\n\n        if (!scrollCtrl || scrollCtrl.scrollTop === distance) return;\n\n        scrollCtrl.scrollTo?.({\n          top: distance,\n          behavior: 'smooth',\n        });\n      }\n    };\n\n    const scrollToTime = (\n      col: EPickerCols,\n      time: number | string,\n      idx: number,\n      behavior: 'auto' | 'smooth' = 'auto',\n    ) => {\n      const distance = getScrollDistance(col, time);\n      const scrollCtrl = colsRef[idx];\n      if (!scrollCtrl || scrollCtrl.scrollTop === distance || !timeItemCanUsed(col, time)) return;\n\n      scrollCtrl.scrollTo?.({\n        top: distance,\n        behavior,\n      });\n    };\n\n    const handleTimeItemClick = (col: EPickerCols, el: string | number, idx: number) => {\n      if (!timeItemCanUsed(col, el)) return;\n      if (timeArr.includes(col)) {\n        if (\n          col === EPickerCols.hour &&\n          dayjsValue.value.format('a') === PM &&\n          cols.value.includes(EPickerCols.meridiem)\n        ) {\n          // eslint-disable-next-line no-param-reassign\n          el = Number(el) + 12;\n        }\n        scrollToTime(col, el, idx, 'smooth');\n      } else {\n        const currentHour = dayjsValue.value.hour();\n        if (el === AM && currentHour >= 12) {\n          props.onChange(dayjsValue.value.hour(currentHour - 12).format(format.value));\n        } else if (el === PM && currentHour < 12) {\n          props.onChange(dayjsValue.value.hour(currentHour + 12).format(format.value));\n        }\n      }\n    };\n\n    // update each columns scroll distance\n    const updateTimeScrollPos = (isAutoScroll = false) => {\n      const behavior = value.value && !isAutoScroll ? 'smooth' : 'auto';\n      const isStepsSet = !!steps.value.filter((v) => v > 1).length;\n      nextTick(() => {\n        cols.value.forEach((col: EPickerCols, idx: number) => {\n          if (!isStepsSet || (isStepsSet && value.value)) {\n            // 如果没有设置大于1的steps或设置了大于1的step 正常处理滚动\n            scrollToTime(\n              col,\n              timeArr.includes(col) ? dayjsValue.value[col]?.() : dayjsValue.value.format('a'),\n              idx,\n              behavior,\n            );\n          } else {\n            // 否则初始化到每列第一个选项\n            scrollToTime(col, getColList(col)?.[0], idx, behavior);\n          }\n        });\n      });\n\n      props.resetTriggerScroll();\n    };\n\n    const isCurrent = (col: EPickerCols, colItem: string | number) => {\n      let colVal: number;\n      if (col === EPickerCols.meridiem) {\n        const currentMeridiem = dayjsValue.value.format('a');\n        return currentMeridiem === colItem;\n      }\n      colVal = dayjsValue.value[col]?.();\n      if (col === EPickerCols.hour && /[h]{1}/.test(format.value)) {\n        colVal %= 12;\n      }\n      return colVal === Number(colItem);\n    };\n\n    return () => (\n      <div class={`${panelClassName.value}-body`} ref={bodyRef}>\n        <div class={`${panelClassName.value}-body-active-mask`} ref={maskRef}>\n          {/* 渲染遮罩层 */}\n          {cols.value.map?.((col, idx) => (\n            <div key={`${col}_${idx}`} />\n          ))}\n        </div>\n        {/* 渲染实际滚动列 */}\n        {cols.value.map?.((col, idx) => (\n          <ul\n            key={`${col}_${idx}`}\n            ref={(el) => (colsRef[idx] = el)}\n            class={`${panelClassName.value}-body-scroll`}\n            onScroll={debounce(() => handleScroll(col, idx), 50)}\n          >\n            {getColList(col).map((el) => (\n              <li\n                key={el}\n                class={[\n                  `${panelClassName.value}-body-scroll-item`,\n                  {\n                    [`${classPrefix.value}-is-disabled`]: !timeItemCanUsed(col, el),\n                    [`${classPrefix.value}-is-current`]: isCurrent(col, el),\n                  },\n                ]}\n                onClick={() => handleTimeItemClick(col, el, idx)}\n              >\n                {/* eslint-disable-next-line no-nested-ternary */}\n                {timeArr.includes(col)\n                  ? TWELVE_HOUR_FORMAT.test(format.value) && col === EPickerCols.hour && el === '00'\n                    ? '12'\n                    : el\n                  : globalConfig.value[el === AM ? 'anteMeridiem' : 'postMeridiem']}\n              </li>\n            ))}\n          </ul>\n        ))}\n      </div>\n    );\n  },\n});\n"],"names":["dayjs","extend","customParseFormat","timeArr","EPickerCols","hour","minute","second","milliSecond","panelOffset","top","bottom","defineComponent","name","props","panelColProps","position","String","triggerScroll","Boolean","onChange","Function","resetTriggerScroll","isShowPanel","setup","toRefs","steps","value","format","useConfig","globalConfig","classPrefix","cols","ref","bodyRef","maskRef","colsRef","reactive","dayjsValue","computed","isStepsSet","filter","v","length","panelClassName","watch","updateTimeScrollPos","onMounted","match","TIME_FORMAT","_slicedToArray","startCol","hourCol","minuteCol","secondCol","milliSecondCol","endCol","meridiem","renderCol","getItemHeight","maskDom","querySelector","offsetHeight","margin","parseInt","getComputedStyle","marginTop","timeItemCanUsed","col","el","colIdx","indexOf","params","Number","disableTime","partial","includes","getColList","count","colStep","TWELVE_HOUR_FORMAT","test","colList","range","map","padStart","hideDisabledTime","t","MERIDIEM_LIST","getScrollDistance","time","itemIdx","timeItemTotalHeight","distance","Math","abs","max","handleScroll","idx","val","formattedVal","scrollTop","round","min","toLowerCase","isNaN","availableArr","closestLookup","isValid","currentHour","AM","PM","scrollCtrl","scrollTo","behavior","scrollToTime","handleTimeItemClick","isAutoScroll","nextTick","forEach","isCurrent","colItem","colVal","currentMeridiem","_createVNode","debounce","_defineProperty"],"mappings":"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"}