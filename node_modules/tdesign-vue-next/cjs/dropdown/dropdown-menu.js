/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var dropdown_dropdownItem = require('./dropdown-item.js');
var dropdown_props = require('./props.js');
var divider_index = require('../divider/index.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
require('./dropdown-item-props.js');
require('../hooks/useRipple.js');
require('../hooks/useKeepAnimation.js');
require('../config-provider/useConfig.js');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../utils/set-style.js');
require('../hooks/tnode.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('../divider/divider.js');
require('../divider/props.js');
require('../utils/withInstall.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _DropdownMenu = vue.defineComponent({
  name: "TDropdownMenu",
  props: _objectSpread({}, dropdown_props["default"]),
  setup: function setup(props) {
    var dropdownClass = hooks_useConfig.usePrefixClass("dropdown");
    var dropdownMenuClass = hooks_useConfig.usePrefixClass("dropdown__menu");
    var _useGlobalIcon = hooks_useGlobalIcon.useGlobalIcon({
        ChevronRightIcon: tdesignIconsVueNext.ChevronRightIcon,
        ChevronLeftIcon: tdesignIconsVueNext.ChevronLeftIcon
      }),
      ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
      ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon;
    var handleItemClick = function handleItemClick(options) {
      var _data$onClick, _props$onClick;
      var data = options.data,
        context = options.context;
      data === null || data === void 0 ? void 0 : (_data$onClick = data.onClick) === null || _data$onClick === void 0 ? void 0 : _data$onClick.call(data, data, context);
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, data, context);
    };
    var renderOptions = function renderOptions(data) {
      var _data$forEach;
      var arr = [];
      var renderContent;
      (_data$forEach = data.forEach) === null || _data$forEach === void 0 ? void 0 : _data$forEach.call(data, function (menu, idx) {
        var optionItem = _objectSpread({}, menu);
        if (optionItem.children) {
          var _ref;
          optionItem.children = renderOptions(optionItem.children);
          renderContent = vue.createVNode("div", {
            "key": idx
          }, [vue.createVNode(dropdown_dropdownItem["default"], {
            "style": optionItem.style,
            "class": ["".concat(dropdownClass.value, "__item"), "".concat(dropdownClass.value, "__item--suffix"), optionItem["class"]],
            "value": optionItem.value,
            "theme": optionItem.theme,
            "active": optionItem.active,
            "prefixIcon": optionItem.prefixIcon,
            "disabled": optionItem.disabled,
            "minColumnWidth": props.minColumnWidth,
            "maxColumnWidth": props.maxColumnWidth,
            "isSubmenu": true
          }, {
            "default": function _default() {
              return [vue.createVNode("div", {
                "class": "".concat(dropdownClass.value, "__item-content")
              }, [props.direction === "right" ? vue.createVNode(vue.Fragment, null, [vue.createVNode("span", {
                "class": "".concat(dropdownClass.value, "__item-text")
              }, [optionItem.content]), vue.createVNode(ChevronRightIcon, {
                "class": "".concat(dropdownClass.value, "__item-direction"),
                "size": "16"
              }, null)]) : vue.createVNode(vue.Fragment, null, [vue.createVNode(ChevronLeftIcon, {
                "class": "".concat(dropdownClass.value, "__item-direction"),
                "size": "16"
              }, null), vue.createVNode("span", {
                "class": "".concat(dropdownClass.value, "__item-text")
              }, [optionItem.content])])]), vue.createVNode("div", {
                "class": ["".concat(dropdownClass.value, "__submenu"), (_ref = {}, _defineProperty__default["default"](_ref, "".concat(dropdownClass.value, "__submenu--disabled"), optionItem.disabled), _defineProperty__default["default"](_ref, "".concat(dropdownClass.value, "__submenu--").concat(props.direction), props.direction), _ref)],
                "style": {
                  top: "".concat(idx * 30, "px")
                }
              }, [vue.createVNode("ul", null, [optionItem.children])])];
            }
          }), optionItem.divider ? vue.createVNode(divider_index.Divider, null, null) : null]);
        } else {
          renderContent = vue.createVNode("div", {
            "key": idx
          }, [vue.createVNode(dropdown_dropdownItem["default"], {
            "style": optionItem.style,
            "class": ["".concat(dropdownClass.value, "__item"), optionItem["class"]],
            "value": optionItem.value,
            "theme": optionItem.theme,
            "active": optionItem.active,
            "prefixIcon": optionItem.prefixIcon,
            "disabled": optionItem.disabled,
            "minColumnWidth": props.minColumnWidth,
            "maxColumnWidth": props.maxColumnWidth,
            "onClick": optionItem.disabled || optionItem.children ? function () {
              return null;
            } : function (value, context) {
              return handleItemClick({
                data: optionItem,
                context: context
              });
            }
          }, {
            "default": function _default() {
              return [vue.createVNode("span", {
                "class": "".concat(dropdownClass.value, "__item-text")
              }, [optionItem.content])];
            }
          }), optionItem.divider ? vue.createVNode(divider_index.Divider, null, null) : null]);
        }
        arr.push(renderContent);
      });
      return arr;
    };
    return function () {
      return vue.createVNode("div", {
        "class": [dropdownMenuClass.value, "".concat(dropdownMenuClass.value, "--").concat(props.direction)],
        "style": {
          maxHeight: "".concat(props.maxHeight, "px")
        }
      }, [renderOptions(props.options)]);
    };
  }
});

exports["default"] = _DropdownMenu;
//# sourceMappingURL=dropdown-menu.js.map
