/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var omit = require('lodash/omit');
var isArray = require('lodash/isArray');
var popup_index = require('../popup/index.js');
var dropdown_dropdownMenu = require('./dropdown-menu.js');
var dropdown_props = require('./props.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_tnode = require('../hooks/tnode.js');
var dropdown_hooks_useDropdownOptions = require('./hooks/useDropdownOptions.js');
require('../popup/popup.js');
require('@babel/runtime/helpers/typeof');
require('@babel/runtime/helpers/slicedToArray');
require('@popperjs/core');
require('../utils/dom.js');
require('../_chunks/dep-6d934009.js');
require('lodash/isString');
require('../utils/easing.js');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../_common/js/utils/set-style.js');
require('../popup/props.js');
require('../popup/container.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../hooks/useVModel.js');
require('../utils/withInstall.js');
require('../config-provider/useConfig.js');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('tdesign-icons-vue-next');
require('./dropdown-item.js');
require('./dropdown-item-props.js');
require('../hooks/useRipple.js');
require('../hooks/useKeepAnimation.js');
require('../utils/set-style.js');
require('../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../divider/index.js');
require('../divider/divider.js');
require('../divider/props.js');
require('../hooks/useGlobalIcon.js');
require('../hooks/slot.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var omit__default = /*#__PURE__*/_interopDefaultLegacy(omit);
var isArray__default = /*#__PURE__*/_interopDefaultLegacy(isArray);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _Dropdown = vue.defineComponent({
  name: "TDropdown",
  props: dropdown_props["default"],
  setup: function setup(props2, _ref) {
    var attrs = _ref.attrs;
      _ref.slots;
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("dropdown");
    var popupElem = vue.ref(null);
    var isPopupVisible = vue.ref(false);
    var manualCloseTimeout = vue.computed(function () {
      var _props2$popupProps;
      var delay = (_props2$popupProps = props2.popupProps) === null || _props2$popupProps === void 0 ? void 0 : _props2$popupProps.delay;
      if (typeof delay === "number") return delay + 10;
      if (isArray__default["default"](delay)) return delay[1] + 10;
      return 160;
    });
    var handleMenuClick = function handleMenuClick(data, context) {
      var _props2$onClick;
      if (props2.hideAfterItemClick) {
        var _props2$popupProps2, _props2$popupProps2$o;
        setTimeout(function () {
          return isPopupVisible.value = false;
        }, manualCloseTimeout.value);
        (_props2$popupProps2 = props2.popupProps) === null || _props2$popupProps2 === void 0 ? void 0 : (_props2$popupProps2$o = _props2$popupProps2.onVisibleChange) === null || _props2$popupProps2$o === void 0 ? void 0 : _props2$popupProps2$o.call(_props2$popupProps2, false, context);
      }
      props2 === null || props2 === void 0 ? void 0 : (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, data, context);
    };
    var handleVisibleChange = function handleVisibleChange(visible, context) {
      var _props2$popupProps3, _props2$popupProps3$o;
      isPopupVisible.value = visible;
      (_props2$popupProps3 = props2.popupProps) === null || _props2$popupProps3 === void 0 ? void 0 : (_props2$popupProps3$o = _props2$popupProps3.onVisibleChange) === null || _props2$popupProps3$o === void 0 ? void 0 : _props2$popupProps3$o.call(_props2$popupProps3, visible, context);
    };
    return function () {
      var _renderTNodeJSX, _props2$popupProps4;
      var trigger = (_renderTNodeJSX = renderTNodeJSX("default")) === null || _renderTNodeJSX === void 0 ? void 0 : _renderTNodeJSX[0];
      var options = dropdown_hooks_useDropdownOptions["default"](props2);
      var popupParams = _objectSpread(_objectSpread(_objectSpread({}, attrs), {}, {
        disabled: props2.disabled,
        placement: props2.placement,
        trigger: props2.trigger
      }, omit__default["default"](props2.popupProps, "onVisibleChange")), {}, {
        overlayInnerClassName: [COMPONENT_NAME.value, (_props2$popupProps4 = props2.popupProps) === null || _props2$popupProps4 === void 0 ? void 0 : _props2$popupProps4.overlayInnerClassName]
      });
      return vue.createVNode(popup_index.Popup, vue.mergeProps({
        "destroyOnClose": true,
        "ref": popupElem,
        "visible": isPopupVisible.value,
        "onVisibleChange": handleVisibleChange,
        "expandAnimation": true
      }, popupParams), {
        "default": function _default() {
          return [trigger];
        },
        content: function content() {
          return vue.createVNode(dropdown_dropdownMenu["default"], vue.mergeProps(omit__default["default"](props2, "onClick"), {
            "options": options.value,
            "onClick": handleMenuClick
          }), null);
        }
      });
    };
  }
});

exports["default"] = _Dropdown;
//# sourceMappingURL=dropdown.js.map
