{"version":3,"file":"transfer-list.js","sources":["../../../src/transfer/components/transfer-list.tsx"],"sourcesContent":["import { defineComponent, VNode, PropType, ref, computed, watch } from 'vue';\nimport {\n  EmptyType,\n  SearchEvent,\n  SearchOption,\n  TransferValue,\n  TdTransferProps,\n  TransferListType,\n  TransferItemOption,\n} from '../interface';\nimport { PageInfo, TdPaginationProps, Pagination } from '../../pagination';\nimport { Checkbox as TCheckbox, CheckboxGroup as TCheckboxGroup, CheckboxProps } from '../../checkbox';\nimport { getLefCount, getDataValues } from '../utils';\nimport Search from './transfer-search';\nimport { useTNodeDefault } from '../../hooks/tnode';\n\nimport { useConfig, usePrefixClass } from '../../hooks/useConfig';\n\nconst props = {\n  checkboxProps: {\n    type: Object as PropType<CheckboxProps>,\n    default: () => ({}),\n  },\n  dataSource: {\n    type: Array as PropType<Array<TransferItemOption>>,\n    default(): Array<TransferItemOption> {\n      return [];\n    },\n  },\n  listType: {\n    type: String as PropType<TransferListType>,\n    default: 'target',\n  },\n  title: {\n    type: [String, Function],\n  },\n  checkedValue: {\n    type: Array as PropType<Array<TransferValue>>,\n    default(): Array<TransferValue> {\n      return [];\n    },\n  },\n  disabled: {\n    type: Boolean,\n    default: false,\n  },\n  search: {\n    type: [Boolean, Object] as PropType<SearchOption>,\n    default: false,\n  },\n  transferItem: Function as PropType<TdTransferProps['transferItem']>,\n  empty: {\n    type: [Function, String] as PropType<EmptyType>,\n  },\n  pagination: [Boolean, Object],\n  footer: [Function, String],\n  checkAll: Boolean,\n  isTreeMode: {\n    type: Boolean as PropType<boolean>,\n    default: false,\n  },\n  onCheckedChange: Function as PropType<(event: Array<TransferValue>) => void>,\n  onPageChange: Function,\n  onScroll: Function,\n  onSearch: Function,\n};\n\nexport default defineComponent({\n  name: 'TTransferList',\n  props: { ...props },\n  setup(props) {\n    const classPrefix = usePrefixClass();\n    const { t, globalConfig } = useConfig('transfer');\n    // 搜索框输入内容\n    const filterValue = ref('');\n    // 用于兼容处理 Pagination 的非受控属性（非受控属性仅有 change 事件变化，无 props 变化，因此只需监听事件）\n    const defaultCurrent = ref(1);\n    // 用于兼容处理 Pagination 的非受控属性\n    const defaultPageSize = ref(0);\n\n    const currentPage = computed(() => {\n      const pagination = props.pagination as any;\n      return pagination?.current || defaultCurrent.value || pagination?.defaultCurrent;\n    });\n    const pageSize = computed(() => {\n      const pagination = props.pagination as any;\n      return pagination?.pageSize || defaultPageSize.value || pagination?.defaultPageSize;\n    });\n    const filteredData = computed(() => {\n      return props.dataSource.filter((item: TransferItemOption) => {\n        const label = item && item.label.toString();\n        return label.toLowerCase().indexOf(filterValue.value.toLowerCase()) > -1;\n      });\n    });\n\n    const pageTotal = computed(() => {\n      return (filteredData.value && filteredData.value.length) || 0;\n    });\n\n    const curPageData = computed(() => {\n      let pageData = filteredData.value;\n      if (!props.pagination) return pageData;\n      if (pageSize.value === 0) return pageData;\n      const startIndex = (currentPage.value - 1) * pageSize.value;\n      const endIndex = currentPage.value * pageSize.value;\n      pageData = pageData.slice(startIndex, endIndex);\n      return pageData;\n    });\n    const paginationProps = computed(() => {\n      const defaultPaginationProps: TdPaginationProps = {\n        size: 'small',\n        theme: 'simple',\n        totalContent: false,\n        pageSizeOptions: [],\n      };\n      return typeof props.pagination === 'object'\n        ? {\n            ...defaultPaginationProps,\n            ...props.pagination,\n            current: currentPage.value,\n            total: pageTotal.value,\n            pageSize: pageSize.value,\n          }\n        : {};\n    });\n\n    const isAllChecked = computed(() => {\n      const allValue = getDataValues(props.dataSource, [], { isTreeMode: props.isTreeMode, include: false });\n\n      return (\n        props.checkedValue.length > 0 &&\n        (props.isTreeMode\n          ? allValue.every((item) => props.checkedValue.includes(item))\n          : (props.search ? filteredData.value : props.dataSource).every(\n              (item: TransferItemOption) => item.disabled || props.checkedValue.includes(item.value),\n            ))\n      );\n    });\n    const indeterminate = computed(() => {\n      return !isAllChecked.value && props.checkedValue.length > 0;\n    });\n\n    const totalCount = computed(() => {\n      return getLefCount(props.dataSource);\n    });\n\n    watch(totalCount, (val) => {\n      if (val <= (currentPage.value - 1) * pageSize.value) {\n        const lastPage = Math.ceil(val / pageSize.value);\n        defaultCurrent.value = lastPage;\n      }\n    });\n\n    const handlePaginationChange = (pageInfo: PageInfo) => {\n      props.onPageChange?.(pageInfo);\n      defaultCurrent.value = pageInfo.current;\n      defaultPageSize.value = pageInfo.pageSize;\n    };\n    const handleCheckedChange = (val: Array<TransferValue>) => {\n      props.onCheckedChange?.(val);\n    };\n    const handleCheckedAllChange = (checked: boolean) => {\n      if (checked) {\n        const allValue = getDataValues(props.search ? filteredData.value : props.dataSource, [], {\n          isTreeMode: props.isTreeMode,\n          include: false,\n        });\n        handleCheckedChange(allValue);\n      } else {\n        handleCheckedChange([]);\n      }\n    };\n    const scroll = (e: Event) => {\n      props.onScroll?.(e);\n    };\n    const handleSearch = (e: any) => {\n      const event: SearchEvent = {\n        query: e.value,\n        type: props.listType as TransferListType,\n        e: e.e,\n        trigger: e.trigger,\n      };\n      filterValue.value = e.value;\n      props.onSearch?.(event);\n    };\n    const renderTNodeJSX = useTNodeDefault();\n    const renderTitle = () => {\n      const defaultNode = props.title && typeof props.title === 'string' ? <template>{props.title}</template> : null;\n      const titleNode = renderTNodeJSX('title', {\n        defaultNode,\n        params: {\n          type: props.listType,\n        },\n      });\n      return <span>{titleNode}</span>;\n    };\n    const renderContent = () => {\n      const defaultNode = (\n        <TCheckboxGroup value={props.checkedValue} onChange={handleCheckedChange}>\n          {curPageData.value.map((item, index) => (\n            <TCheckbox\n              disabled={props.disabled || item.disabled}\n              value={item.value}\n              needRipple={true}\n              class={[\n                `${classPrefix.value}-transfer__list-item`,\n                props.checkedValue.includes(item.value) ? `${classPrefix.value}-is-checked` : '',\n              ]}\n              key={item.key}\n              {...props.checkboxProps}\n            >\n              {renderTNodeJSX('transferItem', {\n                defaultNode: <span>{item.label}</span>,\n                params: { data: item.data, index, type: props.listType },\n              })}\n            </TCheckbox>\n          ))}\n        </TCheckboxGroup>\n      );\n      return (\n        <div class={`${classPrefix.value}-transfer__list-content narrow-scrollbar`} onScroll={scroll}>\n          {renderTNodeJSX('tree', {\n            defaultNode,\n            params: {\n              data: curPageData.value,\n              value: props.checkedValue,\n              onChange: handleCheckedChange,\n            },\n          })}\n        </div>\n      );\n    };\n    const renderEmpty = () => {\n      const empty = props.empty || t(globalConfig.value.empty);\n      const defaultNode: VNode = typeof empty === 'string' ? <span>{empty}</span> : null;\n      return (\n        <div class={`${classPrefix.value}-transfer__empty`}>\n          {renderTNodeJSX('empty', {\n            defaultNode,\n            params: {\n              type: props.listType,\n            },\n          })}\n        </div>\n      );\n    };\n    const renderFooter = () => {\n      const defaultNode =\n        typeof props.footer === 'string' ? (\n          <div class={`${classPrefix.value}-transfer__footer`}>{props.footer}</div>\n        ) : null;\n      return renderTNodeJSX('footer', {\n        defaultNode,\n        params: {\n          type: props.listType,\n        },\n      });\n    };\n\n    return () => (\n      <div class={`${classPrefix.value}-transfer__list ${classPrefix.value}-transfer__list-${props.listType}`}>\n        <div class={`${classPrefix.value}-transfer__list-header`}>\n          <div>\n            {props.checkAll && (\n              <TCheckbox\n                disabled={props.disabled || !props.dataSource.length}\n                checked={isAllChecked.value}\n                indeterminate={indeterminate.value}\n                onChange={handleCheckedAllChange}\n              />\n            )}\n            <span>\n              {t(globalConfig.value.title, {\n                checked: props.checkedValue.length,\n                total: totalCount.value,\n              })}\n            </span>\n          </div>\n          {renderTitle()}\n        </div>\n        <div\n          class={[\n            `${classPrefix.value}-transfer__list-body`,\n            props.search ? `${classPrefix.value}-transfer__list--with-search` : '',\n          ]}\n        >\n          {props.search && (\n            <Search\n              searchValue={filterValue.value}\n              placeholder={t(globalConfig.value.placeholder)}\n              onChange={handleSearch}\n              disabled={props.disabled}\n              search={props.search}\n            />\n          )}\n          {curPageData.value.length > 0 ? renderContent() : renderEmpty()}\n        </div>\n        {props.pagination && pageSize.value > 0 && pageTotal.value > 0 && (\n          <div class={`${classPrefix.value}-transfer__list-pagination`}>\n            <Pagination {...paginationProps.value} onChange={handlePaginationChange} />\n          </div>\n        )}\n        {renderFooter()}\n      </div>\n    );\n  },\n});\n"],"names":["_isVNode","props","checkboxProps","type","Object","dataSource","Array","listType","String","title","Function","checkedValue","disabled","Boolean","search","transferItem","empty","pagination","footer","checkAll","isTreeMode","onCheckedChange","onPageChange","onScroll","onSearch","defineComponent","name","setup","classPrefix","usePrefixClass","useConfig","t","globalConfig","filterValue","ref","defaultCurrent","defaultPageSize","currentPage","computed","current","value","pageSize","filteredData","filter","item","label","toString","toLowerCase","indexOf","pageTotal","length","curPageData","pageData","startIndex","endIndex","slice","paginationProps","defaultPaginationProps","size","theme","totalContent","pageSizeOptions","_typeof","total","isAllChecked","allValue","getDataValues","include","every","includes","indeterminate","totalCount","getLefCount","watch","val","lastPage","Math","ceil","handlePaginationChange","pageInfo","handleCheckedChange","handleCheckedAllChange","checked","scroll","e","handleSearch","event","query","trigger","renderTNodeJSX","useTNodeDefault","renderTitle","defaultNode","_createVNode","titleNode","params","renderContent","TCheckboxGroup","map","index","key","data","onChange","renderEmpty","renderFooter","TCheckbox","placeholder"],"mappings":"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"}