{"version":3,"file":"transfer-operations.js","sources":["../../../src/transfer/components/transfer-operations.tsx"],"sourcesContent":["import { defineComponent, createElementVNode, PropType, h } from 'vue';\nimport { ChevronRightIcon as TdChevronRightIcon, ChevronLeftIcon as TdChevronLeftIcon } from 'tdesign-icons-vue-next';\n\nimport Button from '../../button';\nimport { TNode } from '../../common';\nimport { usePrefixClass } from '../../hooks/useConfig';\nimport { useGlobalIcon } from '../../hooks/useGlobalIcon';\nimport props from '../props';\n\nexport default defineComponent({\n  name: 'TTransferOperations',\n  props: {\n    // 控制左按钮的禁用与否\n    leftDisabled: {\n      type: Boolean as PropType<boolean>,\n      required: true,\n    },\n    // 控制右按钮的禁用与否\n    rightDisabled: {\n      type: Boolean as PropType<boolean>,\n      required: true,\n    },\n    operation: props.operation,\n  },\n  emits: ['moveToRight', 'moveToLeft'],\n  setup(props, { slots, emit }) {\n    const classPrefix = usePrefixClass();\n    const { ChevronRightIcon, ChevronLeftIcon } = useGlobalIcon({\n      ChevronRightIcon: TdChevronRightIcon,\n      ChevronLeftIcon: TdChevronLeftIcon,\n    });\n    const moveToRight = () => {\n      emit('moveToRight');\n    };\n    const moveToLeft = () => {\n      emit('moveToLeft');\n    };\n    const getIconRight = () => {\n      return <ChevronRightIcon />;\n    };\n    const getIconLeft = () => {\n      return <ChevronLeftIcon />;\n    };\n    const getIcon = (direction: 'left' | 'right') => {\n      if (typeof props.operation === 'function') {\n        return null;\n      }\n      if (direction === 'right' && props.operation && typeof props.operation[0] === 'function') {\n        return null;\n      }\n      if (direction === 'left' && props.operation && typeof props.operation[1] === 'function') {\n        return null;\n      }\n\n      if (slots.operation) {\n        return null;\n      }\n\n      return direction === 'left' ? getIconLeft : getIconRight;\n    };\n    // right:去右边，left:去左边\n    const renderButton = (h: typeof createElementVNode, direction: 'left' | 'right') => {\n      if (typeof slots.operation === 'function') {\n        return slots.operation({\n          direction,\n        });\n      }\n      if (typeof props.operation === 'function') {\n        const renderContent = props.operation;\n        return renderContent(h as any, { direction });\n      }\n      let renderContent: string | TNode;\n      if (Array.isArray(props.operation)) {\n        const [left, right] = props.operation;\n        renderContent = direction === 'right' ? right : left;\n      } else {\n        renderContent = '';\n      }\n      return renderContent;\n    };\n\n    return () => (\n      <div class={`${classPrefix.value}-transfer__operations`}>\n        <Button\n          variant=\"outline\"\n          size=\"small\"\n          shape={typeof props.operation?.[1] === 'string' ? 'rectangle' : 'square'}\n          key={props.rightDisabled ? 'right-outline' : 'right-base'}\n          disabled={props.rightDisabled}\n          onClick={moveToRight}\n          icon={getIcon('right')}\n        >\n          {renderButton(h, 'right')}\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"small\"\n          shape={typeof props.operation?.[0] === 'string' ? 'rectangle' : 'square'}\n          key={props.rightDisabled ? 'left-outline' : 'left-base'}\n          disabled={props.leftDisabled}\n          onClick={moveToLeft}\n          icon={getIcon('left')}\n        >\n          {renderButton(h, 'left')}\n        </Button>\n      </div>\n    );\n  },\n});\n"],"names":["_isVNode","defineComponent","name","props","leftDisabled","type","Boolean","required","rightDisabled","operation","emits","setup","slots","emit","classPrefix","usePrefixClass","useGlobalIcon","ChevronRightIcon","TdChevronRightIcon","ChevronLeftIcon","TdChevronLeftIcon","moveToRight","moveToLeft","getIconRight","_createVNode","getIconLeft","getIcon","direction","renderButton","h","renderContent","Array","isArray","left","right","value","Button"],"mappings":"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"}