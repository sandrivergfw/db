import { TdTransferProps } from './type';
import './style';
export declare type TransferProps = TdTransferProps;
export declare const Transfer: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            search: boolean;
            data: import("./type").DataOption[];
            direction: "both" | "left" | "right";
            value: import("./type").TransferValue[];
            title: import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("../common").SlotReturnValue);
            disabled: boolean | boolean[];
            empty: import("./type").EmptyType | import("./type").EmptyType[];
            checked: import("./type").TransferValue[];
            modelValue: import("./type").TransferValue[];
            defaultChecked: import("./type").TransferValue[];
            defaultValue: import("./type").TransferValue[];
            showCheckAll: boolean | boolean[];
            targetSort: "push" | "unshift" | "original";
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            checkboxProps: {
                type: import("vue").PropType<import("..").TdCheckboxProps>;
            };
            checked: {
                type: import("vue").PropType<import("./type").TransferValue[]>;
                default: any;
            };
            defaultChecked: {
                type: import("vue").PropType<import("./type").TransferValue[]>;
                default: () => import("./type").TransferValue[];
            };
            data: {
                type: import("vue").PropType<import("./type").DataOption[]>;
                default: () => import("./type").DataOption[];
            };
            direction: {
                type: import("vue").PropType<"both" | "left" | "right">;
                default: "both" | "left" | "right";
                validator(val: "both" | "left" | "right"): boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean | boolean[]>;
                default: boolean;
            };
            empty: {
                type: import("vue").PropType<import("./type").EmptyType | import("./type").EmptyType[]>;
                default: string;
            };
            footer: {
                type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                    type: import("./type").TransferListType;
                }) => import("../common").SlotReturnValue)>;
            };
            keys: {
                type: import("vue").PropType<import("../common").KeysType>;
            };
            operation: {
                type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                    direction: "left" | "right";
                }) => import("../common").SlotReturnValue)>;
            };
            pagination: {
                type: import("vue").PropType<import("..").TdPaginationProps | import("..").TdPaginationProps[]>;
            };
            search: {
                type: import("vue").PropType<import("./type").SearchOption | import("./type").SearchOption[]>;
                default: boolean;
            };
            showCheckAll: {
                type: import("vue").PropType<boolean | boolean[]>;
                default: boolean;
            };
            targetSort: {
                type: import("vue").PropType<"push" | "unshift" | "original">;
                default: "push" | "unshift" | "original";
                validator(val: "push" | "unshift" | "original"): boolean;
            };
            title: {
                type: import("vue").PropType<import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                    type: import("./type").TransferListType;
                }) => import("../common").SlotReturnValue)>;
                default: () => import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                    type: import("./type").TransferListType;
                }) => import("../common").SlotReturnValue);
            };
            transferItem: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TransferItem<import("./type").DataOption>) => import("../common").SlotReturnValue>;
            };
            value: {
                type: import("vue").PropType<import("./type").TransferValue[]>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TransferValue[]>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TransferValue[]>;
                default: () => import("./type").TransferValue[];
            };
            onChange: import("vue").PropType<(targetValue: import("./type").TransferValue[], context: import("./type").TargetParams) => void>;
            onCheckedChange: import("vue").PropType<(options: import("./type").CheckedOptions) => void>;
            onPageChange: import("vue").PropType<(page: import("..").PageInfo, context: {
                type: import("./type").TransferListType;
            }) => void>;
            onScroll: import("vue").PropType<(options: {
                e: Event;
                bottomDistance: number;
                type: import("./type").TransferListType;
            }) => void>;
            onSearch: import("vue").PropType<(options: import("./type").SearchContext) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "search" | "data" | "direction" | "value" | "title" | "disabled" | "empty" | "checked" | "modelValue" | "defaultChecked" | "defaultValue" | "showCheckAll" | "targetSort">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            checkboxProps: {
                type: import("vue").PropType<import("..").TdCheckboxProps>;
            };
            checked: {
                type: import("vue").PropType<import("./type").TransferValue[]>;
                default: any;
            };
            defaultChecked: {
                type: import("vue").PropType<import("./type").TransferValue[]>;
                default: () => import("./type").TransferValue[];
            };
            data: {
                type: import("vue").PropType<import("./type").DataOption[]>;
                default: () => import("./type").DataOption[];
            };
            direction: {
                type: import("vue").PropType<"both" | "left" | "right">;
                default: "both" | "left" | "right";
                validator(val: "both" | "left" | "right"): boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean | boolean[]>;
                default: boolean;
            };
            empty: {
                type: import("vue").PropType<import("./type").EmptyType | import("./type").EmptyType[]>;
                default: string;
            };
            footer: {
                type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                    type: import("./type").TransferListType;
                }) => import("../common").SlotReturnValue)>;
            };
            keys: {
                type: import("vue").PropType<import("../common").KeysType>;
            };
            operation: {
                type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                    direction: "left" | "right";
                }) => import("../common").SlotReturnValue)>;
            };
            pagination: {
                type: import("vue").PropType<import("..").TdPaginationProps | import("..").TdPaginationProps[]>;
            };
            search: {
                type: import("vue").PropType<import("./type").SearchOption | import("./type").SearchOption[]>;
                default: boolean;
            };
            showCheckAll: {
                type: import("vue").PropType<boolean | boolean[]>;
                default: boolean;
            };
            targetSort: {
                type: import("vue").PropType<"push" | "unshift" | "original">;
                default: "push" | "unshift" | "original";
                validator(val: "push" | "unshift" | "original"): boolean;
            };
            title: {
                type: import("vue").PropType<import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                    type: import("./type").TransferListType;
                }) => import("../common").SlotReturnValue)>;
                default: () => import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                    type: import("./type").TransferListType;
                }) => import("../common").SlotReturnValue);
            };
            transferItem: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TransferItem<import("./type").DataOption>) => import("../common").SlotReturnValue>;
            };
            value: {
                type: import("vue").PropType<import("./type").TransferValue[]>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TransferValue[]>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TransferValue[]>;
                default: () => import("./type").TransferValue[];
            };
            onChange: import("vue").PropType<(targetValue: import("./type").TransferValue[], context: import("./type").TargetParams) => void>;
            onCheckedChange: import("vue").PropType<(options: import("./type").CheckedOptions) => void>;
            onPageChange: import("vue").PropType<(page: import("..").PageInfo, context: {
                type: import("./type").TransferListType;
            }) => void>;
            onScroll: import("vue").PropType<(options: {
                e: Event;
                bottomDistance: number;
                type: import("./type").TransferListType;
            }) => void>;
            onSearch: import("vue").PropType<(options: import("./type").SearchContext) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            search: boolean;
            data: import("./type").DataOption[];
            direction: "both" | "left" | "right";
            value: import("./type").TransferValue[];
            title: import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("../common").SlotReturnValue);
            disabled: boolean | boolean[];
            empty: import("./type").EmptyType | import("./type").EmptyType[];
            checked: import("./type").TransferValue[];
            modelValue: import("./type").TransferValue[];
            defaultChecked: import("./type").TransferValue[];
            defaultValue: import("./type").TransferValue[];
            showCheckAll: boolean | boolean[];
            targetSort: "push" | "unshift" | "original";
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        checkboxProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checked: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: any;
        };
        defaultChecked: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: () => import("./type").TransferValue[];
        };
        data: {
            type: import("vue").PropType<import("./type").DataOption[]>;
            default: () => import("./type").DataOption[];
        };
        direction: {
            type: import("vue").PropType<"both" | "left" | "right">;
            default: "both" | "left" | "right";
            validator(val: "both" | "left" | "right"): boolean;
        };
        disabled: {
            type: import("vue").PropType<boolean | boolean[]>;
            default: boolean;
        };
        empty: {
            type: import("vue").PropType<import("./type").EmptyType | import("./type").EmptyType[]>;
            default: string;
        };
        footer: {
            type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("../common").SlotReturnValue)>;
        };
        keys: {
            type: import("vue").PropType<import("../common").KeysType>;
        };
        operation: {
            type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                direction: "left" | "right";
            }) => import("../common").SlotReturnValue)>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps | import("..").TdPaginationProps[]>;
        };
        search: {
            type: import("vue").PropType<import("./type").SearchOption | import("./type").SearchOption[]>;
            default: boolean;
        };
        showCheckAll: {
            type: import("vue").PropType<boolean | boolean[]>;
            default: boolean;
        };
        targetSort: {
            type: import("vue").PropType<"push" | "unshift" | "original">;
            default: "push" | "unshift" | "original";
            validator(val: "push" | "unshift" | "original"): boolean;
        };
        title: {
            type: import("vue").PropType<import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("../common").SlotReturnValue)>;
            default: () => import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("../common").SlotReturnValue);
        };
        transferItem: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TransferItem<import("./type").DataOption>) => import("../common").SlotReturnValue>;
        };
        value: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: () => import("./type").TransferValue[];
        };
        onChange: import("vue").PropType<(targetValue: import("./type").TransferValue[], context: import("./type").TargetParams) => void>;
        onCheckedChange: import("vue").PropType<(options: import("./type").CheckedOptions) => void>;
        onPageChange: import("vue").PropType<(page: import("..").PageInfo, context: {
            type: import("./type").TransferListType;
        }) => void>;
        onScroll: import("vue").PropType<(options: {
            e: Event;
            bottomDistance: number;
            type: import("./type").TransferListType;
        }) => void>;
        onSearch: import("vue").PropType<(options: import("./type").SearchContext) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    checkboxProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checked: {
        type: import("vue").PropType<import("./type").TransferValue[]>;
        default: any;
    };
    defaultChecked: {
        type: import("vue").PropType<import("./type").TransferValue[]>;
        default: () => import("./type").TransferValue[];
    };
    data: {
        type: import("vue").PropType<import("./type").DataOption[]>;
        default: () => import("./type").DataOption[];
    };
    direction: {
        type: import("vue").PropType<"both" | "left" | "right">;
        default: "both" | "left" | "right";
        validator(val: "both" | "left" | "right"): boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean;
    };
    empty: {
        type: import("vue").PropType<import("./type").EmptyType | import("./type").EmptyType[]>;
        default: string;
    };
    footer: {
        type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
            type: import("./type").TransferListType;
        }) => import("../common").SlotReturnValue)>;
    };
    keys: {
        type: import("vue").PropType<import("../common").KeysType>;
    };
    operation: {
        type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
            direction: "left" | "right";
        }) => import("../common").SlotReturnValue)>;
    };
    pagination: {
        type: import("vue").PropType<import("..").TdPaginationProps | import("..").TdPaginationProps[]>;
    };
    search: {
        type: import("vue").PropType<import("./type").SearchOption | import("./type").SearchOption[]>;
        default: boolean;
    };
    showCheckAll: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean;
    };
    targetSort: {
        type: import("vue").PropType<"push" | "unshift" | "original">;
        default: "push" | "unshift" | "original";
        validator(val: "push" | "unshift" | "original"): boolean;
    };
    title: {
        type: import("vue").PropType<import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
            type: import("./type").TransferListType;
        }) => import("../common").SlotReturnValue)>;
        default: () => import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
            type: import("./type").TransferListType;
        }) => import("../common").SlotReturnValue);
    };
    transferItem: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TransferItem<import("./type").DataOption>) => import("../common").SlotReturnValue>;
    };
    value: {
        type: import("vue").PropType<import("./type").TransferValue[]>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TransferValue[]>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TransferValue[]>;
        default: () => import("./type").TransferValue[];
    };
    onChange: import("vue").PropType<(targetValue: import("./type").TransferValue[], context: import("./type").TargetParams) => void>;
    onCheckedChange: import("vue").PropType<(options: import("./type").CheckedOptions) => void>;
    onPageChange: import("vue").PropType<(page: import("..").PageInfo, context: {
        type: import("./type").TransferListType;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event;
        bottomDistance: number;
        type: import("./type").TransferListType;
    }) => void>;
    onSearch: import("vue").PropType<(options: import("./type").SearchContext) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    search: boolean;
    data: import("./type").DataOption[];
    direction: "both" | "left" | "right";
    value: import("./type").TransferValue[];
    title: import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
        type: import("./type").TransferListType;
    }) => import("../common").SlotReturnValue);
    disabled: boolean | boolean[];
    empty: import("./type").EmptyType | import("./type").EmptyType[];
    checked: import("./type").TransferValue[];
    modelValue: import("./type").TransferValue[];
    defaultChecked: import("./type").TransferValue[];
    defaultValue: import("./type").TransferValue[];
    showCheckAll: boolean | boolean[];
    targetSort: "push" | "unshift" | "original";
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Transfer;
