{"version":3,"file":"progress.js","sources":["../../src/progress/progress.tsx"],"sourcesContent":["import { defineComponent, VNode, computed, CSSProperties } from 'vue';\nimport {\n  CloseCircleFilledIcon as TdCloseCircleFilledIcon,\n  CheckCircleFilledIcon as TdCheckCircleFilledIcon,\n  ErrorCircleFilledIcon as TdErrorCircleFilledIcon,\n  CloseIcon as TdCloseIcon,\n  CheckIcon as TdCheckIcon,\n  ErrorIcon as TdErrorIcon,\n} from 'tdesign-icons-vue-next';\n\nimport { getBackgroundColor } from '../utils/helper';\nimport { PRO_THEME, CIRCLE_SIZE, CIRCLE_SIZE_PX, STATUS_ICON, CIRCLE_FONT_SIZE_RATIO } from './constants';\nimport props from './props';\nimport { usePrefixClass } from '../hooks/useConfig';\nimport { useGlobalIcon } from '../hooks/useGlobalIcon';\nimport { useTNodeJSX } from '../hooks/tnode';\n\nexport default defineComponent({\n  name: 'TProgress',\n  props,\n  setup(props) {\n    const renderTNodeJSX = useTNodeJSX();\n    const COMPONENT_NAME = usePrefixClass('progress');\n    const { CloseCircleFilledIcon, CheckCircleFilledIcon, ErrorCircleFilledIcon, CloseIcon, CheckIcon, ErrorIcon } =\n      useGlobalIcon({\n        CloseCircleFilledIcon: TdCloseCircleFilledIcon,\n        CheckCircleFilledIcon: TdCheckCircleFilledIcon,\n        ErrorCircleFilledIcon: TdErrorCircleFilledIcon,\n        CloseIcon: TdCloseIcon,\n        CheckIcon: TdCheckIcon,\n        ErrorIcon: TdErrorIcon,\n      });\n\n    const statusStyle = computed(() => {\n      if (props.percentage >= 100) {\n        return 'success';\n      }\n      return props.status || 'default';\n    });\n\n    const trackBgStyle = computed(() => {\n      const style: CSSProperties = {};\n      if (props.strokeWidth) {\n        const height = typeof props.strokeWidth === 'string' ? props.strokeWidth : `${props.strokeWidth}px`;\n        style.height = height;\n        style.borderRadius = height;\n      }\n      if (props.trackColor) {\n        style.backgroundColor = props.trackColor;\n      }\n      return style;\n    });\n\n    const barStyle = computed(() => {\n      return {\n        width: `${props.percentage}%`,\n        background: props.color && getBackgroundColor(props.color),\n      };\n    });\n\n    const circlePathStyle = computed(() => {\n      const strokeColor = typeof props.color === 'object' ? '' : props.color;\n      return {\n        stroke: strokeColor,\n      };\n    });\n\n    // theme=circle 获取直径\n    const diameter = computed(() => {\n      let diameter = CIRCLE_SIZE_PX.MEDIUM;\n      if (!props.size) {\n        return diameter;\n      }\n      const { SMALL, LARGE, MEDIUM } = CIRCLE_SIZE;\n      switch (props.size) {\n        case SMALL:\n          diameter = CIRCLE_SIZE_PX.SMALL;\n          break;\n        case MEDIUM:\n          diameter = CIRCLE_SIZE_PX.MEDIUM;\n          break;\n        case LARGE:\n          diameter = CIRCLE_SIZE_PX.LARGE;\n          break;\n        default:\n          diameter = Number(props.size);\n          break;\n      }\n      return diameter;\n    });\n\n    const rPoints = computed(() => {\n      return diameter.value / 2;\n    });\n\n    const radius = computed(() => {\n      return rPoints.value - circleStrokeWidth.value / 2;\n    });\n\n    const circleStyle = computed(() => {\n      if (props.theme !== PRO_THEME.CIRCLE) {\n        return {};\n      }\n\n      let fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.MEDIUM;\n      if (diameter.value <= CIRCLE_SIZE_PX.SMALL) {\n        fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.SMALL;\n      } else if (diameter.value >= CIRCLE_SIZE_PX.LARGE) {\n        fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.LARGE;\n      }\n\n      return {\n        width: `${diameter.value}px`,\n        height: `${diameter.value}px`,\n        fontSize: `${fontSize}px`,\n      };\n    });\n\n    const circleStrokeWidth = computed(() => {\n      const defaultWidth = props.size === CIRCLE_SIZE.SMALL ? 4 : 6;\n      return props.strokeWidth ? Number(props.strokeWidth) : defaultWidth;\n    });\n\n    const strokeDashArr = computed(() => {\n      const radius = (diameter.value - circleStrokeWidth.value) / 2;\n      const perimeter = Math.PI * 2 * radius;\n      const percent = props.percentage / 100;\n      return `${perimeter * percent}  ${perimeter * (1 - percent)}`;\n    });\n\n    const getIconMap = () => {\n      const CIRCLE_ICONS = {\n        success: CheckIcon,\n        warning: ErrorIcon,\n        error: CloseIcon,\n      };\n      const NORMAL_ICONS = {\n        success: CheckCircleFilledIcon,\n        warning: ErrorCircleFilledIcon,\n        error: CloseCircleFilledIcon,\n      };\n      return props.theme === PRO_THEME.CIRCLE ? CIRCLE_ICONS : NORMAL_ICONS;\n    };\n    const getLabelContent = () => {\n      let labelContent: string | VNode = `${props.percentage}%`;\n      const status = props.status || '';\n      if (STATUS_ICON.includes(status) && props.theme !== PRO_THEME.PLUMP) {\n        const components = getIconMap();\n        const component = components[status];\n        if (component) {\n          labelContent = <component class={[`${COMPONENT_NAME.value}__icon`]}></component>;\n        }\n      }\n      return labelContent;\n    };\n\n    return () => {\n      const labelContent = (\n        <div class={`${COMPONENT_NAME.value}__info`}>{renderTNodeJSX('label', getLabelContent())}</div>\n      );\n      // 进度大于 10 ，进度百分比显示在内部；进度百分比小于 10 进度显示在外部\n      const PLUMP_SEPARATE = 10;\n      const separateClasses =\n        props.percentage > PLUMP_SEPARATE ? `${COMPONENT_NAME.value}--over-ten` : `${COMPONENT_NAME.value}--under-ten`;\n      return (\n        <div class={COMPONENT_NAME.value}>\n          {props.theme === PRO_THEME.LINE && (\n            <div class={`${COMPONENT_NAME.value}--thin ${COMPONENT_NAME.value}--status--${statusStyle.value}`}>\n              <div class={`${COMPONENT_NAME.value}__bar`} style={trackBgStyle.value}>\n                <div class={`${COMPONENT_NAME.value}__inner`} style={barStyle.value}></div>\n              </div>\n              {labelContent}\n            </div>\n          )}\n\n          {props.theme === PRO_THEME.PLUMP && (\n            <div\n              class={[\n                `${COMPONENT_NAME.value}__bar ${COMPONENT_NAME.value}--plump ${separateClasses}`,\n                { [`${COMPONENT_NAME.value}--status--${statusStyle.value}`]: statusStyle.value },\n              ]}\n              style={trackBgStyle.value}\n            >\n              <div class={`${COMPONENT_NAME.value}__inner`} style={barStyle.value}>\n                {props.percentage > PLUMP_SEPARATE && labelContent}\n              </div>\n              {props.percentage <= PLUMP_SEPARATE && labelContent}\n            </div>\n          )}\n\n          {props.theme === PRO_THEME.CIRCLE && (\n            <div\n              class={`${COMPONENT_NAME.value}--circle ${COMPONENT_NAME.value}--status--${statusStyle.value}`}\n              style={circleStyle.value}\n            >\n              {labelContent}\n              <svg width={diameter.value} height={diameter.value} viewBox={`0 0 ${diameter.value} ${diameter.value}`}>\n                <circle\n                  cx={rPoints.value}\n                  cy={rPoints.value}\n                  r={radius.value}\n                  stroke-width={circleStrokeWidth.value}\n                  stroke={props.trackColor}\n                  fill=\"none\"\n                  class={[`${COMPONENT_NAME.value}__circle-outer`]}\n                />\n                {props.percentage > 0 && (\n                  <circle\n                    cx={rPoints.value}\n                    cy={rPoints.value}\n                    r={radius.value}\n                    stroke-width={circleStrokeWidth.value}\n                    fill=\"none\"\n                    stroke-linecap=\"round\"\n                    class={[`${COMPONENT_NAME.value}__circle-inner`]}\n                    transform={`matrix(0,-1,1,0,0,${diameter.value})`}\n                    stroke-dasharray={strokeDashArr.value}\n                    style={circlePathStyle.value}\n                  />\n                )}\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["defineComponent","name","props","setup","renderTNodeJSX","useTNodeJSX","COMPONENT_NAME","usePrefixClass","useGlobalIcon","CloseCircleFilledIcon","TdCloseCircleFilledIcon","CheckCircleFilledIcon","TdCheckCircleFilledIcon","ErrorCircleFilledIcon","TdErrorCircleFilledIcon","CloseIcon","TdCloseIcon","CheckIcon","TdCheckIcon","ErrorIcon","TdErrorIcon","statusStyle","computed","percentage","status","trackBgStyle","style","strokeWidth","height","borderRadius","trackColor","backgroundColor","barStyle","width","background","color","getBackgroundColor","circlePathStyle","strokeColor","_typeof","stroke","diameter","CIRCLE_SIZE_PX","MEDIUM","size","SMALL","CIRCLE_SIZE","LARGE","Number","rPoints","value","radius","circleStrokeWidth","circleStyle","theme","PRO_THEME","CIRCLE","fontSize","CIRCLE_FONT_SIZE_RATIO","defaultWidth","strokeDashArr","perimeter","Math","PI","percent","getIconMap","CIRCLE_ICONS","success","warning","error","NORMAL_ICONS","getLabelContent","labelContent","STATUS_ICON","includes","PLUMP","components","component","_createVNode","PLUMP_SEPARATE","separateClasses","LINE","_defineProperty"],"mappings":"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"}