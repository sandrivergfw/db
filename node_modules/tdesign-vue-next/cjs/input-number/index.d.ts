import { TdInputNumberProps } from './type';
import './style';
export * from './type';
export declare type InputNumberProps = TdInputNumberProps;
export declare const InputNumber: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            max: import("./type").InputNumberValue;
            value: import("./type").InputNumberValue;
            disabled: boolean;
            size: "small" | "medium" | "large";
            readonly: boolean;
            step: import("./type").InputNumberValue;
            placeholder: string;
            min: import("./type").InputNumberValue;
            modelValue: import("./type").InputNumberValue;
            theme: "normal" | "column" | "row";
            autoWidth: boolean;
            largeNumber: boolean;
            allowInputOverLimit: boolean;
            decimalPlaces: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            align: {
                type: import("vue").PropType<"center" | "left" | "right">;
                validator(val: "center" | "left" | "right"): boolean;
            };
            allowInputOverLimit: {
                type: BooleanConstructor;
                default: boolean;
            };
            autoWidth: BooleanConstructor;
            decimalPlaces: {
                type: NumberConstructor;
                default: any;
            };
            disabled: BooleanConstructor;
            format: {
                type: import("vue").PropType<(value: import("./type").InputNumberValue, context?: {
                    fixedNumber?: import("./type").InputNumberValue;
                }) => import("./type").InputNumberValue>;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            largeNumber: BooleanConstructor;
            max: {
                type: import("vue").PropType<import("./type").InputNumberValue>;
                default: number;
            };
            min: {
                type: import("vue").PropType<import("./type").InputNumberValue>;
                default: number;
            };
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            readonly: BooleanConstructor;
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            step: {
                type: import("vue").PropType<import("./type").InputNumberValue>;
                default: number;
            };
            suffix: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            theme: {
                type: import("vue").PropType<"normal" | "column" | "row">;
                default: "normal" | "column" | "row";
                validator(val: "normal" | "column" | "row"): boolean;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").InputNumberValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").InputNumberValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").InputNumberValue>;
            };
            onBlur: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").InputNumberValue, context: import("./type").ChangeContext) => void>;
            onEnter: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
                e: KeyboardEvent;
            }) => void>;
            onFocus: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
                e: FocusEvent;
            }) => void>;
            onKeydown: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
                e: KeyboardEvent;
            }) => void>;
            onKeypress: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
                e: KeyboardEvent;
            }) => void>;
            onKeyup: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
                e: KeyboardEvent;
            }) => void>;
            onValidate: import("vue").PropType<(context: {
                error?: "exceed-maximum" | "below-minimum";
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "max" | "value" | "disabled" | "size" | "readonly" | "step" | "placeholder" | "min" | "modelValue" | "theme" | "autoWidth" | "largeNumber" | "allowInputOverLimit" | "decimalPlaces">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            align: {
                type: import("vue").PropType<"center" | "left" | "right">;
                validator(val: "center" | "left" | "right"): boolean;
            };
            allowInputOverLimit: {
                type: BooleanConstructor;
                default: boolean;
            };
            autoWidth: BooleanConstructor;
            decimalPlaces: {
                type: NumberConstructor;
                default: any;
            };
            disabled: BooleanConstructor;
            format: {
                type: import("vue").PropType<(value: import("./type").InputNumberValue, context?: {
                    fixedNumber?: import("./type").InputNumberValue;
                }) => import("./type").InputNumberValue>;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            largeNumber: BooleanConstructor;
            max: {
                type: import("vue").PropType<import("./type").InputNumberValue>;
                default: number;
            };
            min: {
                type: import("vue").PropType<import("./type").InputNumberValue>;
                default: number;
            };
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            readonly: BooleanConstructor;
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            step: {
                type: import("vue").PropType<import("./type").InputNumberValue>;
                default: number;
            };
            suffix: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            theme: {
                type: import("vue").PropType<"normal" | "column" | "row">;
                default: "normal" | "column" | "row";
                validator(val: "normal" | "column" | "row"): boolean;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").InputNumberValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").InputNumberValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").InputNumberValue>;
            };
            onBlur: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").InputNumberValue, context: import("./type").ChangeContext) => void>;
            onEnter: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
                e: KeyboardEvent;
            }) => void>;
            onFocus: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
                e: FocusEvent;
            }) => void>;
            onKeydown: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
                e: KeyboardEvent;
            }) => void>;
            onKeypress: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
                e: KeyboardEvent;
            }) => void>;
            onKeyup: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
                e: KeyboardEvent;
            }) => void>;
            onValidate: import("vue").PropType<(context: {
                error?: "exceed-maximum" | "below-minimum";
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
            max: import("./type").InputNumberValue;
            value: import("./type").InputNumberValue;
            disabled: boolean;
            size: "small" | "medium" | "large";
            readonly: boolean;
            step: import("./type").InputNumberValue;
            placeholder: string;
            min: import("./type").InputNumberValue;
            modelValue: import("./type").InputNumberValue;
            theme: "normal" | "column" | "row";
            autoWidth: boolean;
            largeNumber: boolean;
            allowInputOverLimit: boolean;
            decimalPlaces: number;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<"center" | "left" | "right">;
            validator(val: "center" | "left" | "right"): boolean;
        };
        allowInputOverLimit: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoWidth: BooleanConstructor;
        decimalPlaces: {
            type: NumberConstructor;
            default: any;
        };
        disabled: BooleanConstructor;
        format: {
            type: import("vue").PropType<(value: import("./type").InputNumberValue, context?: {
                fixedNumber?: import("./type").InputNumberValue;
            }) => import("./type").InputNumberValue>;
        };
        inputProps: {
            type: import("vue").PropType<import("..").TdInputProps>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        largeNumber: BooleanConstructor;
        max: {
            type: import("vue").PropType<import("./type").InputNumberValue>;
            default: number;
        };
        min: {
            type: import("vue").PropType<import("./type").InputNumberValue>;
            default: number;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        readonly: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        step: {
            type: import("vue").PropType<import("./type").InputNumberValue>;
            default: number;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        theme: {
            type: import("vue").PropType<"normal" | "column" | "row">;
            default: "normal" | "column" | "row";
            validator(val: "normal" | "column" | "row"): boolean;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").InputNumberValue>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").InputNumberValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").InputNumberValue>;
        };
        onBlur: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").InputNumberValue, context: import("./type").ChangeContext) => void>;
        onEnter: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
            e: FocusEvent;
        }) => void>;
        onKeydown: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeypress: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeyup: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onValidate: import("vue").PropType<(context: {
            error?: "exceed-maximum" | "below-minimum";
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    align: {
        type: import("vue").PropType<"center" | "left" | "right">;
        validator(val: "center" | "left" | "right"): boolean;
    };
    allowInputOverLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoWidth: BooleanConstructor;
    decimalPlaces: {
        type: NumberConstructor;
        default: any;
    };
    disabled: BooleanConstructor;
    format: {
        type: import("vue").PropType<(value: import("./type").InputNumberValue, context?: {
            fixedNumber?: import("./type").InputNumberValue;
        }) => import("./type").InputNumberValue>;
    };
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    largeNumber: BooleanConstructor;
    max: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: number;
    };
    min: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: number;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    step: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: number;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    theme: {
        type: import("vue").PropType<"normal" | "column" | "row">;
        default: "normal" | "column" | "row";
        validator(val: "normal" | "column" | "row"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
    };
    onBlur: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").InputNumberValue, context: import("./type").ChangeContext) => void>;
    onEnter: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onValidate: import("vue").PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
    max: import("./type").InputNumberValue;
    value: import("./type").InputNumberValue;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    step: import("./type").InputNumberValue;
    placeholder: string;
    min: import("./type").InputNumberValue;
    modelValue: import("./type").InputNumberValue;
    theme: "normal" | "column" | "row";
    autoWidth: boolean;
    largeNumber: boolean;
    allowInputOverLimit: boolean;
    decimalPlaces: number;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default InputNumber;
