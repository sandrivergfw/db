/// <reference types="lodash" />
import { PropType } from 'vue';
export declare const BASE_TABLE_EVENTS: string[];
export declare const BASE_TABLE_ALL_EVENTS: string[];
export interface TableListeners {
    [key: string]: Function;
}
declare const _default: import("vue").DefineComponent<{
    renderExpandedRow: PropType<(params: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
    onLeafColumnsChange: PropType<(columns: import("./interface").BaseTableColumns) => void>;
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    columns: {
        type: PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]>;
        default: () => import("./type").BaseTableCol<import("./type").TableRowData>[];
    };
    data: {
        type: PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    disableDataPage: BooleanConstructor;
    empty: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    firstFullRow: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: PropType<number[]>;
    };
    footData: {
        type: PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    footerAffixProps: {
        type: PropType<Partial<import("../affix").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: PropType<boolean | Partial<import("../affix").TdAffixProps>>;
        default: boolean;
    };
    footerSummary: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: PropType<Partial<import("../affix").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: PropType<boolean | Partial<import("../affix").TdAffixProps>>;
        default: boolean;
    };
    height: {
        type: PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: PropType<boolean | Partial<import("../affix").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    loading: {
        type: PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    loadingProps: {
        type: PropType<import("../loading").TdLoadingProps>;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    pagination: {
        type: PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: PropType<boolean | Partial<import("../affix").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
    };
    rowClassName: {
        type: PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    scroll: {
        type: PropType<import("./type").TableScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onCellClick: PropType<(context: import("./type").BaseTableCellEventContext<import("./type").TableRowData>) => void>;
    onPageChange: PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
    onRowClick: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowDblclick: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMousedown: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseenter: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseleave: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseover: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseup: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onScroll: PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: PropType<(params: {
        e: WheelEvent;
    }) => void>;
}, {
    thList: import("vue").ComputedRef<import("./interface").BaseTableColumns[]>;
    classPrefix: string;
    isVirtual: import("vue").ComputedRef<boolean>;
    globalConfig: import("vue").ComputedRef<({
        expandIcon: any;
        sortIcon: any;
        filterIcon: any;
        treeExpandAndFoldIcon: any;
        hideSortTips: boolean;
    } & {
        empty: string;
        loadingText: string;
        loadingMoreText: string;
        filterInputPlaceholder: string;
        sortAscendingOperationText: string;
        sortCancelOperationText: string;
        sortDescendingOperationText: string;
        clearFilterResultButtonText: string;
        columnConfigButtonText: string;
        columnConfigTitleText: string;
        columnConfigDescriptionText: string;
        confirmText: string;
        cancelText: string;
        resetText: string;
        selectAllText: string;
        searchResultText: string;
    }) | import("..").TableConfig>;
    tableFootHeight: import("vue").Ref<number>;
    virtualScrollHeaderPos: import("vue").Ref<{
        left: number;
        top: number;
    }>;
    tableWidth: import("vue").Ref<number>;
    tableElmWidth: import("vue").Ref<number>;
    tableRef: import("vue").Ref<HTMLDivElement>;
    tableElmRef: import("vue").Ref<HTMLTableElement>;
    sizeClassNames: {
        small: string;
        medium: string;
        large: string;
        default: string;
        xs: string;
        xl: string;
        block: string;
    };
    tableBaseClass: {
        table: string;
        columnResizableTable: string;
        overflowVisible: string;
        body: string;
        content: string;
        topContent: string;
        bottomContent: string;
        paginationWrap: string;
        tdLastRow: string;
        tdFirstCol: string;
        thCellInner: string;
        tableRowEdit: string;
        cellEditable: string;
        cellEditWrap: string;
        bordered: string;
        striped: string;
        hover: string;
        loading: string;
        rowspanAndColspan: string;
        empty: string;
        emptyRow: string;
        headerFixed: string;
        columnFixed: string;
        widthOverflow: string;
        multipleHeader: string;
        footerAffixed: string;
        horizontalBarAffixed: string;
        affixedHeader: string;
        affixedHeaderElm: string;
        affixedFooterElm: string;
        affixedFooterWrap: string;
        scrollbarDivider: string;
        fullHeight: string;
        resizeLine: string;
        obviousScrollbar: string;
        affixedHeaderWrap: string;
    };
    spansAndLeafNodes: import("vue").ComputedRef<{
        rowspanAndColspanMap: import("./interface").ThRowspanAndColspan;
        leafColumns: import("./interface").BaseTableColumns;
    }>;
    dynamicBaseTableClasses: import("vue").ComputedRef<((string | {
        [x: string]: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | Partial<import("../affix").TdAffixProps> | import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>;
    })[] | {
        [x: string]: boolean;
    })[]>;
    tableContentStyles: import("vue").ComputedRef<{
        height: string | number;
        maxHeight: string | number;
    }>;
    tableElementStyles: import("vue").ComputedRef<{
        width: string | number;
    }>;
    virtualScrollClasses: {
        cursor: string;
        header: string;
    };
    tableLayoutClasses: {
        auto: string;
        fixed: string;
    };
    tableElmClasses: import("vue").ComputedRef<(string[] | {
        [x: string]: string | number;
    })[]>;
    tableContentRef: import("vue").Ref<HTMLDivElement>;
    isFixedHeader: import("vue").Ref<boolean>;
    isWidthOverflow: import("vue").Ref<boolean>;
    isFixedColumn: import("vue").Ref<boolean>;
    rowAndColFixedPosition: import("vue").Ref<import("./interface").RowAndColFixedPosition>;
    showColumnShadow: {
        left: boolean;
        right: boolean;
    };
    thWidthList: import("vue").Ref<{
        [colKey: string]: number;
    }>;
    isPaginateData: import("vue").Ref<boolean>;
    dataSource: import("vue").Ref<{
        [x: string]: any;
        children?: any[];
    }[]>;
    scrollType: "lazy" | "virtual";
    rowHeight: number;
    trs: Map<any, any>;
    bufferSize: number;
    scrollHeight: import("vue").ComputedRef<any>;
    visibleData: import("vue").Ref<any[]>;
    translateY: import("vue").ComputedRef<any>;
    affixHeaderRef: import("vue").Ref<HTMLDivElement>;
    affixFooterRef: import("vue").Ref<HTMLDivElement>;
    paginationRef: import("vue").Ref<HTMLDivElement>;
    showAffixHeader: import("vue").Ref<boolean>;
    showAffixFooter: import("vue").Ref<boolean>;
    scrollbarWidth: import("vue").Ref<number>;
    isMultipleHeader: import("vue").ComputedRef<boolean>;
    showRightDivider: import("vue").ComputedRef<boolean>;
    resizeLineRef: import("vue").Ref<HTMLDivElement>;
    resizeLineStyle: {
        display: string;
        left: string;
        height: string;
        bottom: string;
    };
    columnResizeParams: {
        resizeLineRef: import("vue").Ref<HTMLDivElement>;
        resizeLineStyle: {
            display: string;
            left: string;
            height: string;
            bottom: string;
        };
        onColumnMouseover: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
        onColumnMousedown: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
        recalculateColWidth: import("./interface").RecalculateColumnWidthFunc;
        setEffectColMap: (nodes: import("./type").BaseTableCol<import("./type").TableRowData>[], parent: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
    };
    horizontalScrollbarRef: import("vue").Ref<HTMLDivElement>;
    tableBodyRef: import("vue").Ref<HTMLTableElement>;
    showAffixPagination: import("vue").Ref<boolean>;
    renderPagination: () => JSX.Element;
    renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
    handleRowMounted: () => void;
    onFixedChange: () => void;
    onHorizontalScroll: (scrollElement?: HTMLElement) => void;
    updateAffixHeaderOrFooter: () => void;
    refreshTable: import("lodash").DebouncedFunc<() => void>;
    onInnerVirtualScroll: (e: WheelEvent) => void;
    paginationAffixRef: import("vue").Ref<any>;
    horizontalScrollAffixRef: import("vue").Ref<any>;
    headerTopAffixRef: import("vue").Ref<any>;
    footerBottomAffixRef: import("vue").Ref<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    renderExpandedRow: PropType<(params: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
    onLeafColumnsChange: PropType<(columns: import("./interface").BaseTableColumns) => void>;
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    columns: {
        type: PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]>;
        default: () => import("./type").BaseTableCol<import("./type").TableRowData>[];
    };
    data: {
        type: PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    disableDataPage: BooleanConstructor;
    empty: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    firstFullRow: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: PropType<number[]>;
    };
    footData: {
        type: PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    footerAffixProps: {
        type: PropType<Partial<import("../affix").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: PropType<boolean | Partial<import("../affix").TdAffixProps>>;
        default: boolean;
    };
    footerSummary: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: PropType<Partial<import("../affix").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: PropType<boolean | Partial<import("../affix").TdAffixProps>>;
        default: boolean;
    };
    height: {
        type: PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: PropType<boolean | Partial<import("../affix").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    loading: {
        type: PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    loadingProps: {
        type: PropType<import("../loading").TdLoadingProps>;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    pagination: {
        type: PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: PropType<boolean | Partial<import("../affix").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
    };
    rowClassName: {
        type: PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    scroll: {
        type: PropType<import("./type").TableScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onCellClick: PropType<(context: import("./type").BaseTableCellEventContext<import("./type").TableRowData>) => void>;
    onPageChange: PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
    onRowClick: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowDblclick: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMousedown: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseenter: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseleave: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseover: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseup: PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onScroll: PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>>, {
    data: import("./type").TableRowData[];
    columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "bottom" | "middle";
    loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    size: import("../common").SizeEnum;
    empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    hover: boolean;
    bordered: boolean;
    stripe: boolean;
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean;
    headerAffixedTop: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
}>;
export default _default;
