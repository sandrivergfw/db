import { PropType, SetupContext, h } from 'vue';
import { BaseTableCellParams, TableRowData, RowspanColspan, TdPrimaryTableProps, TdBaseTableProps } from './type';
import { RowAndColFixedPosition } from './interface';
import { SkipSpansValue } from './hooks/useRowspanAndColspan';
export interface RenderTdExtra {
    rowAndColFixedPosition: RowAndColFixedPosition;
    columnLength: number;
    dataLength: number;
    cellSpans: RowspanColspan;
    cellEmptyContent: TdBaseTableProps['cellEmptyContent'];
}
export interface RenderEllipsisCellParams {
    cellNode: any;
}
export declare type TrCommonProps = Pick<TdPrimaryTableProps, TrPropsKeys>;
export declare const TABLE_PROPS: readonly ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
export declare type TrPropsKeys = typeof TABLE_PROPS[number];
export interface TrProps extends TrCommonProps {
    rowKey: string;
    row: TableRowData;
    rowIndex: number;
    ellipsisOverlayClassName: string;
    classPrefix: string;
    dataLength: number;
    rowAndColFixedPosition?: RowAndColFixedPosition;
    skipSpansMap?: Map<string, SkipSpansValue>;
    scrollType?: string;
    isVirtual?: boolean;
    rowHeight?: number;
    trs?: Map<number, object>;
    bufferSize?: number;
    tableElm?: any;
    tableContentElm?: any;
    cellEmptyContent: TdBaseTableProps['cellEmptyContent'];
}
export declare const ROW_LISTENERS: string[];
export declare function renderCell(params: BaseTableCellParams<TableRowData>, slots: SetupContext['slots'], extra?: {
    cellEmptyContent?: TdBaseTableProps['cellEmptyContent'];
}): any;
declare const _default: import("vue").DefineComponent<{
    scrollType: StringConstructor;
    rowHeight: NumberConstructor;
    trs: PropType<Map<number, object>>;
    bufferSize: NumberConstructor;
    isVirtual: BooleanConstructor;
    tableElm: {};
    tableContentElm: {};
    columns: {
        type: PropType<import("./type").BaseTableCol<TableRowData>[]>;
        default: () => import("./type").BaseTableCol<TableRowData>[];
    };
    scroll: {
        type: PropType<import("./type").TableScroll>;
    };
    onCellClick: PropType<(context: import("./type").BaseTableCellEventContext<TableRowData>) => void>;
    cellEmptyContent: {
        type: PropType<string | ((h: typeof h, props: BaseTableCellParams<TableRowData>) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: PropType<number[]>;
    };
    footData: {
        type: PropType<TableRowData[]>;
        default: () => TableRowData[];
    };
    rowAttributes: {
        type: PropType<import("./type").TableRowAttributes<TableRowData>>;
    };
    rowClassName: {
        type: PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: PropType<import("./type").TableRowspanAndColspanFunc<TableRowData>>;
    };
    onRowClick: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onRowDblclick: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onRowMousedown: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onRowMouseenter: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onRowMouseleave: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onRowMouseover: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onRowMouseup: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    row: PropType<TableRowData>;
    rowIndex: NumberConstructor;
    dataLength: NumberConstructor;
    ellipsisOverlayClassName: StringConstructor;
    classPrefix: StringConstructor;
    rowAndColFixedPosition: PropType<RowAndColFixedPosition>;
    skipSpansMap: PropType<Map<string, SkipSpansValue>>;
}, {
    trRef: any;
    tableColFixedClasses: {
        left: string;
        right: string;
        lastLeft: string;
        firstRight: string;
        leftShadow: string;
        rightShadow: string;
    };
    tSlots: Readonly<{
        [name: string]: import("vue").Slot;
    }>;
    tdEllipsisClass: string;
    tableBaseClass: {
        table: string;
        columnResizableTable: string;
        overflowVisible: string;
        body: string;
        content: string;
        topContent: string;
        bottomContent: string;
        paginationWrap: string;
        tdLastRow: string;
        tdFirstCol: string;
        thCellInner: string;
        tableRowEdit: string;
        cellEditable: string;
        cellEditWrap: string;
        bordered: string;
        striped: string;
        hover: string;
        loading: string;
        rowspanAndColspan: string;
        empty: string;
        emptyRow: string;
        headerFixed: string;
        columnFixed: string;
        widthOverflow: string;
        multipleHeader: string;
        footerAffixed: string;
        horizontalBarAffixed: string;
        affixedHeader: string;
        affixedHeaderElm: string;
        affixedFooterElm: string;
        affixedFooterWrap: string;
        scrollbarDivider: string;
        fullHeight: string;
        resizeLine: string;
        obviousScrollbar: string;
        affixedHeaderWrap: string;
    };
    tdAlignClasses: {
        left: string;
        right: string;
        center: string;
    };
    tableDraggableClasses: {
        rowDraggable: string;
        rowHandlerDraggable: string;
        colDraggable: string;
        handle: string;
        ghost: string;
        chosen: string;
        dragging: string;
    };
    trStyles: import("vue").ComputedRef<{
        style: import("../common").Styles;
        classes: import("../common").ClassName;
    }>;
    classes: import("vue").ComputedRef<import("../common").ClassName[]>;
    trAttributes: import("vue").ComputedRef<import("../common").HTMLElementAttributes>;
    tRowHeight: import("vue").ComputedRef<number>;
    hasLazyLoadHolder: import("vue").ComputedRef<boolean>;
    getTrListeners: (row: TableRowData, rowIndex: number) => {
        [eventName: string]: (e: MouseEvent) => void;
    };
}, unknown, {}, {
    renderEllipsisCell(cellParams: BaseTableCellParams<TableRowData>, params: RenderEllipsisCellParams): JSX.Element;
    renderTd(params: BaseTableCellParams<TableRowData>, extra: RenderTdExtra): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "row-mounted", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    scrollType: StringConstructor;
    rowHeight: NumberConstructor;
    trs: PropType<Map<number, object>>;
    bufferSize: NumberConstructor;
    isVirtual: BooleanConstructor;
    tableElm: {};
    tableContentElm: {};
    columns: {
        type: PropType<import("./type").BaseTableCol<TableRowData>[]>;
        default: () => import("./type").BaseTableCol<TableRowData>[];
    };
    scroll: {
        type: PropType<import("./type").TableScroll>;
    };
    onCellClick: PropType<(context: import("./type").BaseTableCellEventContext<TableRowData>) => void>;
    cellEmptyContent: {
        type: PropType<string | ((h: typeof h, props: BaseTableCellParams<TableRowData>) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: PropType<number[]>;
    };
    footData: {
        type: PropType<TableRowData[]>;
        default: () => TableRowData[];
    };
    rowAttributes: {
        type: PropType<import("./type").TableRowAttributes<TableRowData>>;
    };
    rowClassName: {
        type: PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: PropType<import("./type").TableRowspanAndColspanFunc<TableRowData>>;
    };
    onRowClick: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onRowDblclick: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onRowMousedown: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onRowMouseenter: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onRowMouseleave: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onRowMouseover: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onRowMouseup: PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    row: PropType<TableRowData>;
    rowIndex: NumberConstructor;
    dataLength: NumberConstructor;
    ellipsisOverlayClassName: StringConstructor;
    classPrefix: StringConstructor;
    rowAndColFixedPosition: PropType<RowAndColFixedPosition>;
    skipSpansMap: PropType<Map<string, SkipSpansValue>>;
}>>, {
    columns: import("./type").BaseTableCol<TableRowData>[];
    isVirtual: boolean;
    footData: TableRowData[];
    rowKey: string;
}>;
export default _default;
