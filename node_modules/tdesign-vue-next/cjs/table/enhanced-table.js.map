{"version":3,"file":"enhanced-table.js","sources":["../../src/table/enhanced-table.tsx"],"sourcesContent":["import { defineComponent, SetupContext, computed, ref, getCurrentInstance, watch } from 'vue';\nimport baseTableProps from './base-table-props';\nimport primaryTableProps from './primary-table-props';\nimport enhancedTableProps from './enhanced-table-props';\nimport PrimaryTable from './primary-table';\nimport { TdEnhancedTableProps, PrimaryTableCol, TableRowData, DragSortContext } from './type';\nimport useTreeData from './hooks/useTreeData';\nimport useTreeSelect from './hooks/useTreeSelect';\n\nexport default defineComponent({\n  name: 'TEnhancedTable',\n\n  props: {\n    ...baseTableProps,\n    ...primaryTableProps,\n    ...enhancedTableProps,\n  },\n\n  setup(props: TdEnhancedTableProps, context: SetupContext) {\n    const primaryTableRef = ref(null);\n    const { store, dataSource, formatTreeColumn, swapData, ...treeInstanceFunctions } = useTreeData(props, context);\n\n    const treeDataMap = ref(store.value.treeDataMap);\n\n    const { tIndeterminateSelectedRowKeys, onInnerSelectChange } = useTreeSelect(props, treeDataMap);\n\n    // 影响列和单元格内容的因素有：树形节点需要添加操作符 [+] [-]\n    const getColumns = (columns: PrimaryTableCol<TableRowData>[]) => {\n      const arr: PrimaryTableCol<TableRowData>[] = [];\n      for (let i = 0, len = columns.length; i < len; i++) {\n        let item = { ...columns[i] };\n        item = formatTreeColumn(item);\n        if (item.children?.length) {\n          item.children = getColumns(item.children);\n        }\n        // 多级表头和自定义列配置特殊逻辑：要么子节点不存在，要么子节点长度大于 1，方便做自定义列配置\n        if (!item.children || item.children?.length) {\n          arr.push(item);\n        }\n      }\n      return arr;\n    };\n\n    const tColumns = computed(() => {\n      // 暂时只有树形结构需要处理 column.cell\n      const isTreeData = !props.tree || !Object.keys(props.tree).length;\n      return isTreeData ? props.columns : getColumns(props.columns);\n    });\n\n    const onDragSortChange = (params: DragSortContext<TableRowData>) => {\n      if (props.beforeDragSort && !props.beforeDragSort(params)) return;\n      swapData({\n        current: params.current,\n        target: params.target,\n        currentIndex: params.currentIndex,\n        targetIndex: params.targetIndex,\n      });\n      props.onDragSort?.(params);\n    };\n\n    context.expose({\n      store: store.value,\n      dataSource: dataSource.value,\n      ...treeInstanceFunctions,\n      validateRowData: (rowValue: any) => {\n        primaryTableRef.value.validateRowData(rowValue);\n      },\n      validateTableData: () => {\n        primaryTableRef.value.validateTableData();\n      },\n      clearValidateData: () => {\n        primaryTableRef.value.clearValidateData();\n      },\n      refreshTable: () => {\n        primaryTableRef.value.refreshTable();\n      },\n    });\n\n    return () => {\n      const { vnode } = getCurrentInstance();\n      const enhancedProps = {\n        ...vnode.props,\n        data: dataSource.value,\n        columns: tColumns.value,\n        // 半选状态节点\n        indeterminateSelectedRowKeys: tIndeterminateSelectedRowKeys.value,\n        // 树形结构不允许本地数据分页\n        disableDataPage: Boolean(props.tree && Object.keys(props.tree).length),\n        onSelectChange: onInnerSelectChange,\n        onDragSort: onDragSortChange,\n      };\n      return <PrimaryTable v-slots={context.slots} {...enhancedProps} ref={primaryTableRef} />;\n    };\n  },\n});\n"],"names":["defineComponent","name","props","baseTableProps","primaryTableProps","enhancedTableProps","setup","context","primaryTableRef","ref","useTreeData","store","dataSource","formatTreeColumn","swapData","treeInstanceFunctions","_objectWithoutProperties","treeDataMap","value","useTreeSelect","tIndeterminateSelectedRowKeys","onInnerSelectChange","getColumns","columns","arr","i","len","length","item","children","push","tColumns","computed","isTreeData","tree","Object","keys","onDragSortChange","params","beforeDragSort","current","target","currentIndex","targetIndex","onDragSort","expose","validateRowData","rowValue","validateTableData","clearValidateData","refreshTable","getCurrentInstance","vnode","enhancedProps","data","indeterminateSelectedRowKeys","disableDataPage","Boolean","onSelectChange","_createVNode","PrimaryTable","_mergeProps","slots"],"mappings":"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"}