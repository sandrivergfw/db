{"version":3,"file":"sorter-button.js","sources":["../../src/table/sorter-button.tsx"],"sourcesContent":["import { computed, defineComponent, PropType } from 'vue';\nimport { ChevronDownIcon as TdChevronDownIcon } from 'tdesign-icons-vue-next';\n\nimport useClassName from './hooks/useClassName';\nimport { SortType } from './type';\nimport Tooltip, { TooltipProps } from '../tooltip';\nimport { useConfig } from '../hooks/useConfig';\nimport { useGlobalIcon } from '../hooks/useGlobalIcon';\nimport { useTNodeDefault } from '../hooks/tnode';\nimport { TNode } from '../common';\n\ntype SortTypeEnums = Array<'desc' | 'asc'>;\n\nexport default defineComponent({\n  name: 'TSorterButton',\n\n  props: {\n    sortType: {\n      type: String as PropType<SortType>,\n      default: 'all',\n    },\n    sortOrder: {\n      type: String,\n      default: (): string => '',\n    },\n    sortIcon: Function as PropType<TNode>,\n    tooltipProps: Object as PropType<TooltipProps>,\n    hideSortTips: Boolean,\n  },\n\n  emits: ['sort-icon-click'],\n\n  setup(props, context) {\n    const { tableSortClasses, negativeRotate180 } = useClassName();\n    const renderTNode = useTNodeDefault();\n    const { t, globalConfig } = useConfig('table');\n    const { ChevronDownIcon } = useGlobalIcon({ ChevronDownIcon: TdChevronDownIcon });\n\n    const allowSortTypes = computed<SortTypeEnums>(() =>\n      props.sortType === 'all' ? ['asc', 'desc'] : [props.sortType],\n    );\n\n    const onSortIconClick = (e: MouseEvent, direction: string) => {\n      context.emit('sort-icon-click', e, { descending: direction === 'desc' });\n    };\n\n    return {\n      t,\n      globalConfig,\n      ChevronDownIcon,\n      tableSortClasses,\n      negativeRotate180,\n      allowSortTypes,\n      onSortIconClick,\n      renderTNode,\n    };\n  },\n\n  methods: {\n    getSortIcon(direction: string, activeClass: string) {\n      const { ChevronDownIcon } = this;\n      const defaultIcon = this.t(this.globalConfig.sortIcon) || <ChevronDownIcon />;\n      const icon = this.renderTNode('sortIcon', defaultIcon);\n      const sortClassName = [\n        activeClass,\n        this.tableSortClasses.sortIcon,\n        this.tableSortClasses.iconDirection[direction],\n        { [this.negativeRotate180]: direction === 'asc' },\n      ];\n      return (\n        <span class={sortClassName} onClick={(e) => this.onSortIconClick(e, direction)}>\n          {icon}\n        </span>\n      );\n    },\n  },\n\n  render() {\n    const { tableSortClasses } = this;\n    const classes = [tableSortClasses.trigger, { [tableSortClasses.doubleIcon]: this.allowSortTypes.length > 1 }];\n    const tooltips = {\n      asc: this.globalConfig.sortAscendingOperationText,\n      desc: this.globalConfig.sortDescendingOperationText,\n    };\n    const sortButton = this.allowSortTypes.map((direction: string) => {\n      const activeClass = direction === this.sortOrder ? tableSortClasses.iconActive : tableSortClasses.iconDefault;\n      const cancelTips = this.globalConfig.sortCancelOperationText;\n      const tips = direction === this.sortOrder ? cancelTips : tooltips[direction];\n      if (this.hideSortTips ?? this.globalConfig.hideSortTips) return this.getSortIcon(direction, activeClass);\n      return (\n        <Tooltip\n          content={tips}\n          placement=\"right\"\n          {...(this.tooltipProps as TooltipProps)}\n          showArrow={false}\n          class={this.tableSortClasses.iconDirection[direction]}\n        >\n          {this.getSortIcon(direction, activeClass)}\n        </Tooltip>\n      );\n    });\n    return <div class={classes}>{sortButton}</div>;\n  },\n});\n"],"names":["_isVNode","defineComponent","name","props","sortType","type","String","sortOrder","sortIcon","Function","tooltipProps","Object","hideSortTips","Boolean","emits","setup","context","useClassName","tableSortClasses","negativeRotate180","renderTNode","useTNodeDefault","useConfig","t","globalConfig","useGlobalIcon","ChevronDownIcon","TdChevronDownIcon","allowSortTypes","computed","onSortIconClick","e","direction","emit","descending","methods","getSortIcon","activeClass","defaultIcon","_createVNode","icon","sortClassName","iconDirection","_defineProperty","render","classes","trigger","doubleIcon","length","tooltips","asc","sortAscendingOperationText","desc","sortDescendingOperationText","sortButton","map","iconActive","iconDefault","cancelTips","sortCancelOperationText","tips","Tooltip","_mergeProps"],"mappings":"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"}