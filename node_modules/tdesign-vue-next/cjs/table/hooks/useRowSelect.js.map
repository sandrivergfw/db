{"version":3,"file":"useRowSelect.js","sources":["../../../src/table/hooks/useRowSelect.tsx"],"sourcesContent":["// 行选中相关功能：单选 + 多选\n\nimport { computed, toRefs, h, ref, watch } from 'vue';\nimport intersection from 'lodash/intersection';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport useDefaultValue from '../../hooks/useDefaultValue';\nimport {\n  PrimaryTableCellParams,\n  PrimaryTableCol,\n  RowClassNameParams,\n  TableRowData,\n  TdPrimaryTableProps,\n} from '../type';\nimport { isRowSelectedDisabled } from '../../_common/js/table/utils';\nimport { TableClassName } from './useClassName';\nimport Checkbox from '../../checkbox';\nimport Radio from '../../radio';\nimport log from '../../_common/js/log';\n\nexport default function useRowSelect(\n  props: TdPrimaryTableProps,\n  tableSelectedClasses: TableClassName['tableSelectedClasses'],\n) {\n  const { selectedRowKeys, columns, data, rowKey } = toRefs(props);\n  const selectedRowClassNames = ref();\n  const [tSelectedRowKeys, setTSelectedRowKeys] = useDefaultValue(\n    selectedRowKeys,\n    props.defaultSelectedRowKeys || [],\n    props.onSelectChange,\n    'selectedRowKeys',\n  );\n  const selectedRowDataMap = ref(new Map<string | number, TableRowData>());\n  const selectColumn = computed(() => props.columns.find(({ type }) => ['multiple', 'single'].includes(type)));\n  const canSelectedRows = computed(() => data.value.filter((row, rowIndex): boolean => !isDisabled(row, rowIndex)));\n  // 选中的行，和所有可以选择的行，交集，用于计算 isSelectedAll 和 isIndeterminate\n  const intersectionKeys = computed(() =>\n    intersection(\n      tSelectedRowKeys.value,\n      canSelectedRows.value.map((t) => get(t, props.rowKey || 'id')),\n    ),\n  );\n\n  watch(\n    [data, columns, tSelectedRowKeys, selectColumn, rowKey],\n    () => {\n      const disabledRowFunc = (p: RowClassNameParams<TableRowData>) =>\n        selectColumn.value.disabled(p) ? tableSelectedClasses.disabled : '';\n      const disabledRowClass = selectColumn.value?.disabled ? disabledRowFunc : undefined;\n      const selected = new Set(tSelectedRowKeys.value);\n      const selectedRowClassFunc = ({ row }: RowClassNameParams<TableRowData>) => {\n        const rowId = get(row, props.rowKey || 'id');\n        return selected.has(rowId) ? tableSelectedClasses.selected : '';\n      };\n      const selectedRowClass = selected.size ? selectedRowClassFunc : undefined;\n      selectedRowClassNames.value = [disabledRowClass, selectedRowClass];\n    },\n    { immediate: true },\n  );\n\n  function isDisabled(row: Record<string, any>, rowIndex: number): boolean {\n    return isRowSelectedDisabled(selectColumn.value, row, rowIndex);\n  }\n\n  function getSelectedHeader() {\n    return () => {\n      const isIndeterminate =\n        intersectionKeys.value.length > 0 && intersectionKeys.value.length < canSelectedRows.value.length;\n      const isChecked =\n        intersectionKeys.value.length !== 0 &&\n        canSelectedRows.value.length !== 0 &&\n        intersectionKeys.value.length === canSelectedRows.value.length;\n      return (\n        <Checkbox\n          checked={isChecked}\n          indeterminate={isIndeterminate}\n          disabled={!canSelectedRows.value.length}\n          onChange={handleSelectAll}\n        />\n      );\n    };\n  }\n\n  function renderSelectCell(p: PrimaryTableCellParams<TableRowData>) {\n    const { col: column, row = {}, rowIndex } = p;\n    const checked = tSelectedRowKeys.value.includes(get(row, props.rowKey || 'id'));\n    const disabled: boolean =\n      typeof column.disabled === 'function' ? column.disabled({ row, rowIndex }) : column.disabled;\n    const checkProps = isFunction(column.checkProps) ? column.checkProps({ row, rowIndex }) : column.checkProps;\n    const selectBoxProps: Object = {\n      checked,\n      disabled,\n      ...checkProps,\n      // 兼容处理不同的参数\n      onClick: (e: MouseEvent | { e: MouseEvent }) => {\n        // 选中行功能中，点击 checkbox/radio 需阻止事件冒泡，避免触发不必要的 onRowClick\n        if (typeof e === 'object' && 'e' in e) {\n          e.e?.stopPropagation();\n        } else {\n          e?.stopPropagation();\n        }\n      },\n      onChange: () => handleSelectChange(row),\n    };\n    if (column.type === 'single') return <Radio {...selectBoxProps} />;\n    if (column.type === 'multiple') {\n      const isIndeterminate = props.indeterminateSelectedRowKeys?.length\n        ? props.indeterminateSelectedRowKeys.includes(get(row, props.rowKey))\n        : false;\n      return <Checkbox indeterminate={isIndeterminate} {...selectBoxProps} />;\n    }\n    return null;\n  }\n\n  function handleSelectChange(row: TableRowData = {}) {\n    let selectedRowKeys = [...tSelectedRowKeys.value];\n    const reRowKey = props.rowKey || 'id';\n    const id = get(row, reRowKey);\n    const selectedRowIndex = selectedRowKeys.indexOf(id);\n    const isExisted = selectedRowIndex !== -1;\n    if (selectColumn.value.type === 'multiple') {\n      isExisted ? selectedRowKeys.splice(selectedRowIndex, 1) : selectedRowKeys.push(id);\n    } else if (selectColumn.value.type === 'single') {\n      selectedRowKeys = !isExisted ? [id] : [];\n    } else {\n      log.warn('Table', '`column.type` must be one of `multiple` and `single`');\n      return;\n    }\n    setTSelectedRowKeys(selectedRowKeys, {\n      selectedRowData: selectedRowKeys.map((t) => selectedRowDataMap.value.get(t)),\n      currentRowKey: id,\n      currentRowData: row,\n      type: isExisted ? 'uncheck' : 'check',\n    });\n  }\n\n  function handleSelectAll(checked: boolean) {\n    const reRowKey = props.rowKey || 'id';\n    const canSelectedRowKeys = canSelectedRows.value.map((record) => get(record, reRowKey));\n    const disabledSelectedRowKeys = selectedRowKeys.value?.filter((id) => !canSelectedRowKeys.includes(id)) || [];\n    const allIds = checked ? [...disabledSelectedRowKeys, ...canSelectedRowKeys] : [...disabledSelectedRowKeys];\n    setTSelectedRowKeys(allIds, {\n      selectedRowData: checked ? allIds.map((t) => selectedRowDataMap.value.get(t)) : [],\n      type: checked ? 'check' : 'uncheck',\n      currentRowKey: 'CHECK_ALL_BOX',\n    });\n  }\n\n  function formatToRowSelectColumn(col: PrimaryTableCol) {\n    const isSelection = ['multiple', 'single'].includes(col.type);\n    if (!isSelection) return col;\n    return {\n      ...col,\n      width: col.width || 64,\n      className: [tableSelectedClasses.checkCell, col.className],\n      cell: (_: typeof h, p: PrimaryTableCellParams<TableRowData>) => renderSelectCell(p),\n      title: col.type === 'multiple' ? getSelectedHeader() : col.title,\n    };\n  }\n\n  watch(\n    [data, rowKey],\n    ([data, rowKey]) => {\n      for (let i = 0, len = data.length; i < len; i++) {\n        selectedRowDataMap.value.set(get(data[i], rowKey || 'id'), data[i]);\n      }\n    },\n    { immediate: true },\n  );\n\n  return {\n    selectedRowClassNames,\n    formatToRowSelectColumn,\n  };\n}\n"],"names":["useRowSelect","props","tableSelectedClasses","toRefs","selectedRowKeys","columns","data","rowKey","selectedRowClassNames","ref","useDefaultValue","defaultSelectedRowKeys","onSelectChange","_slicedToArray","tSelectedRowKeys","setTSelectedRowKeys","selectedRowDataMap","Map","selectColumn","computed","find","type","includes","canSelectedRows","value","filter","row","rowIndex","isDisabled","intersectionKeys","intersection","map","t","get","watch","disabledRowFunc","p","disabled","disabledRowClass","selected","Set","selectedRowClassFunc","rowId","has","selectedRowClass","size","immediate","isRowSelectedDisabled","getSelectedHeader","isIndeterminate","length","isChecked","_createVNode","Checkbox","handleSelectAll","renderSelectCell","column","col","checked","checkProps","isFunction","selectBoxProps","onClick","e","_typeof","stopPropagation","onChange","handleSelectChange","indeterminateSelectedRowKeys","_mergeProps","_toConsumableArray","reRowKey","id","selectedRowIndex","indexOf","isExisted","splice","push","log","warn","selectedRowData","currentRowKey","currentRowData","canSelectedRowKeys","record","disabledSelectedRowKeys","allIds","formatToRowSelectColumn","isSelection","width","className","checkCell","cell","_","title","i","len","set"],"mappings":"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"}