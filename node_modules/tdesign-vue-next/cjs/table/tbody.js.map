{"version":3,"file":"tbody.js","sources":["../../src/table/tbody.tsx"],"sourcesContent":["import { defineComponent, computed, PropType, toRefs } from 'vue';\nimport camelCase from 'lodash/camelCase';\nimport get from 'lodash/get';\nimport pick from 'lodash/pick';\nimport TrElement, { ROW_LISTENERS, TABLE_PROPS } from './tr';\nimport { useConfig } from '../hooks/useConfig';\nimport { useTNodeJSX } from '../hooks/tnode';\nimport useClassName from './hooks/useClassName';\nimport baseTableProps from './base-table-props';\nimport { TNodeReturnValue } from '../common';\nimport useRowspanAndColspan from './hooks/useRowspanAndColspan';\nimport { BaseTableProps, RowAndColFixedPosition } from './interface';\nimport { TdBaseTableProps } from './type';\n\nexport const ROW_AND_TD_LISTENERS = ROW_LISTENERS.concat('cell-click');\nexport interface TableBodyProps extends BaseTableProps {\n  classPrefix: string;\n  ellipsisOverlayClassName: string;\n  // 固定列 left/right 具体值\n  rowAndColFixedPosition: RowAndColFixedPosition;\n  showColumnShadow: { left: boolean; right: boolean };\n  tableElm: any;\n  tableWidth: number;\n  isWidthOverflow: boolean;\n  translateY: number;\n  scrollType: string;\n  isVirtual: boolean;\n  rowHeight: number;\n  trs: Map<number, object>;\n  bufferSize: number;\n  // HTMLDivElement\n  tableContentElm: any;\n  cellEmptyContent: TdBaseTableProps['cellEmptyContent'];\n  handleRowMounted: () => void;\n}\n\n// table 到 body 的相同属性\nexport const extendTableProps = [\n  'rowKey',\n  'rowClassName',\n  'rowAttributes',\n  'loading',\n  'empty',\n  'fixedRows',\n  'firstFullRow',\n  'lastFullRow',\n  'rowspanAndColspan',\n  'scroll',\n  'cellEmptyContent',\n  'onCellClick',\n  'onPageChange',\n  'onRowClick',\n  'onRowDblclick',\n  'onRowMouseover',\n  'onRowMousedown',\n  'onRowMouseenter',\n  'onRowMouseleave',\n  'onRowMouseup',\n  'onScroll',\n  'onScrollX',\n  'onScrollY',\n];\n\nexport default defineComponent({\n  name: 'TBody',\n\n  props: {\n    classPrefix: String,\n    data: Array as PropType<TableBodyProps['data']>,\n    columns: Array as PropType<TableBodyProps['columns']>,\n    ellipsisOverlayClassName: String,\n    rowAndColFixedPosition: Map as PropType<TableBodyProps['rowAndColFixedPosition']>,\n    showColumnShadow: Object as PropType<TableBodyProps['showColumnShadow']>,\n    // eslint-disable-next-line\n    tableElm: {},\n    tableWidth: Number,\n    isWidthOverflow: Boolean,\n    // 以下内容为虚拟滚动所需参数\n    translateY: Number,\n    scrollType: String,\n    isVirtual: Boolean,\n    rowHeight: Number,\n    trs: Map as PropType<TableBodyProps['trs']>,\n    bufferSize: Number,\n    // eslint-disable-next-line\n    tableContentElm: {},\n    handleRowMounted: Function as PropType<TableBodyProps['handleRowMounted']>,\n    renderExpandedRow: Function as PropType<TableBodyProps['renderExpandedRow']>,\n    firstFullRow: [String, Function] as PropType<TableBodyProps['firstFullRow']>,\n    lastFullRow: [String, Function] as PropType<TableBodyProps['lastFullRow']>,\n    ...pick(baseTableProps, extendTableProps),\n  },\n\n  // eslint-disable-next-line\n  setup(props: TableBodyProps) {\n    const renderTNode = useTNodeJSX();\n    const { data, columns, rowKey, rowspanAndColspan } = toRefs(props);\n    const { t, globalConfig } = useConfig('table');\n    const { tableFullRowClasses, tableBaseClass } = useClassName();\n    const { skipSpansMap } = useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan);\n\n    const tbodyClasses = computed(() => [tableBaseClass.body]);\n\n    return {\n      t,\n      globalConfig,\n      renderTNode,\n      tableFullRowClasses,\n      tbodyClasses,\n      tableBaseClass,\n      skipSpansMap,\n    };\n  },\n\n  render() {\n    const renderEmpty = (columns: TableBodyProps['columns']) => {\n      return (\n        <tr class={[this.tableBaseClass.emptyRow, { [this.tableFullRowClasses.base]: this.isWidthOverflow }]}>\n          <td colspan={columns.length}>\n            <div\n              class={[this.tableBaseClass.empty, { [this.tableFullRowClasses.innerFullRow]: this.isWidthOverflow }]}\n              style={this.isWidthOverflow ? { width: `${this.tableWidth}px` } : {}}\n            >\n              {this.renderTNode('empty') || this.t(this.globalConfig.empty)}\n            </div>\n          </td>\n        </tr>\n      );\n    };\n\n    const getFullRow = (columnLength: number, type: 'first-full-row' | 'last-full-row') => {\n      const tType = camelCase(type);\n      const fullRowNode = this.renderTNode(tType);\n      if (['', null, undefined, false].includes(fullRowNode)) return null;\n      const isFixedToLeft = this.isWidthOverflow && this.columns.find((col) => col.fixed === 'left');\n      const classes = [this.tableFullRowClasses.base, this.tableFullRowClasses[tType]];\n      /** innerFullRow 和 innerFullElement 同时存在，是为了保证 固定列时，当前行不随内容进行横向滚动 */\n      return (\n        <tr class={classes} key={`key-full-row-${type}`}>\n          <td colspan={columnLength}>\n            <div\n              class={{ [this.tableFullRowClasses.innerFullRow]: isFixedToLeft }}\n              style={isFixedToLeft ? { width: `${this.tableWidth}px` } : {}}\n            >\n              <div class={this.tableFullRowClasses.innerFullElement}>{fullRowNode}</div>\n            </div>\n          </td>\n        </tr>\n      );\n    };\n\n    const columnLength = this.columns.length;\n    const dataLength = this.data.length;\n    const trNodeList: TNodeReturnValue[] = [];\n\n    const properties = [\n      'classPrefix',\n      'ellipsisOverlayClassName',\n      'rowAndColFixedPosition',\n      'scroll',\n      'tableElm',\n      'tableContentElm',\n      'trs',\n      'bufferSize',\n      'isVirtual',\n      'rowHeight',\n      'scrollType',\n    ];\n    this.data?.forEach((row, rowIndex) => {\n      const trProps = {\n        ...pick(this.$props, TABLE_PROPS),\n        rowKey: this.rowKey || 'id',\n        row,\n        columns: this.columns,\n        rowIndex,\n        dataLength,\n        skipSpansMap: this.skipSpansMap,\n        ...pick(this.$props, properties),\n        // 遍历的同时，计算后面的节点，是否会因为合并单元格跳过渲染\n      };\n      if (this.onCellClick) {\n        trProps.onCellClick = this.onCellClick;\n      }\n\n      const trNode = (\n        <TrElement\n          v-slots={this.$slots}\n          key={get(row, this.rowKey || 'id') || rowIndex}\n          {...trProps}\n          onRowMounted={this.handleRowMounted}\n        ></TrElement>\n      );\n      trNodeList.push(trNode);\n\n      // 执行展开行渲染\n      if (this.renderExpandedRow) {\n        const p = {\n          row,\n          index: rowIndex,\n          columns: this.columns,\n          tableWidth: this.tableWidth,\n          isWidthOverflow: this.isWidthOverflow,\n        };\n        const expandedContent = this.renderExpandedRow(p);\n        expandedContent && trNodeList.push(expandedContent);\n      }\n    });\n\n    const list = [getFullRow(columnLength, 'first-full-row'), ...trNodeList, getFullRow(columnLength, 'last-full-row')];\n    const isEmpty = !this.data?.length && !this.loading && !this.firstFullRow && !this.lastFullRow;\n\n    const translate = `translate(0, ${this.translateY}px)`;\n    const posStyle = {\n      transform: translate,\n      '-ms-transform': translate,\n      '-moz-transform': translate,\n      '-webkit-transform': translate,\n    };\n\n    return (\n      <tbody class={this.tbodyClasses} style={this.isVirtual && { ...posStyle }}>\n        {isEmpty ? renderEmpty(this.columns) : list}\n      </tbody>\n    );\n  },\n});\n"],"names":["ROW_AND_TD_LISTENERS","ROW_LISTENERS","concat","extendTableProps","defineComponent","name","props","classPrefix","String","data","Array","columns","ellipsisOverlayClassName","rowAndColFixedPosition","Map","showColumnShadow","Object","tableElm","tableWidth","Number","isWidthOverflow","Boolean","translateY","scrollType","isVirtual","rowHeight","trs","bufferSize","tableContentElm","handleRowMounted","Function","renderExpandedRow","firstFullRow","lastFullRow","pick","baseTableProps","setup","renderTNode","useTNodeJSX","toRefs","rowKey","rowspanAndColspan","useConfig","t","globalConfig","useClassName","tableFullRowClasses","tableBaseClass","useRowspanAndColspan","skipSpansMap","tbodyClasses","computed","body","render","renderEmpty","_createVNode","emptyRow","_defineProperty","base","length","empty","innerFullRow","width","getFullRow","columnLength","type","tType","camelCase","fullRowNode","includes","isFixedToLeft","find","col","fixed","classes","innerFullElement","dataLength","trNodeList","properties","forEach","row","rowIndex","trProps","$props","TABLE_PROPS","onCellClick","trNode","get","$slots","push","p","index","expandedContent","list","isEmpty","loading","translate","posStyle","transform"],"mappings":"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"}