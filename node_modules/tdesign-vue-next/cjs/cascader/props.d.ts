import { TdCascaderProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    checkProps: {
        type: PropType<import("..").TdCheckboxProps>;
    };
    checkStrictly: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: PropType<(h: typeof import("vue").h, props: {
            value: import("../common").TreeOptionData[];
            collapsedSelectedItems: import("../common").TreeOptionData[];
            count: number;
        }) => import("../common").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    empty: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filter: {
        type: PropType<(filterWords: string, node: import("./interface").TreeNodeModel<import("../common").TreeOptionData>) => boolean | Promise<boolean>>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: PropType<import("..").TdInputProps>;
    };
    keys: {
        type: PropType<import("./type").CascaderKeysType>;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    load: {
        type: PropType<(node: import("./interface").TreeNodeModel<import("../common").TreeOptionData>) => Promise<import("../common").TreeOptionData[]>>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    options: {
        type: PropType<import("../common").TreeOptionData[]>;
        default: () => TdCascaderProps['options'];
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: PropType<import("..").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    selectInputProps: {
        type: PropType<import("./interface").TdSelectInputProps>;
    };
    showAllLevels: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: TdCascaderProps['size']): boolean;
    };
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        validator(val: TdCascaderProps['status']): boolean;
    };
    tagInputProps: {
        type: PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: PropType<import("..").TdTagProps>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    trigger: {
        type: PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: TdCascaderProps['trigger']): boolean;
    };
    value: {
        type: PropType<import("./type").CascaderValue<import("../common").TreeOptionData>>;
        default: any;
    };
    modelValue: {
        type: PropType<import("./type").CascaderValue<import("../common").TreeOptionData>>;
        default: any;
    };
    defaultValue: {
        type: PropType<import("./type").CascaderValue<import("../common").TreeOptionData>>;
        default: () => TdCascaderProps['defaultValue'];
    };
    valueMode: {
        type: PropType<"all" | "onlyLeaf" | "parentFirst">;
        default: "all" | "onlyLeaf" | "parentFirst";
        validator(val: TdCascaderProps['valueMode']): boolean;
    };
    valueType: {
        type: PropType<"full" | "single">;
        default: "full" | "single";
        validator(val: TdCascaderProps['valueType']): boolean;
    };
    onBlur: PropType<(context: {
        value: import("./type").CascaderValue<import("../common").TreeOptionData>;
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: import("./type").CascaderValue<import("../common").TreeOptionData>, context: import("./type").CascaderChangeContext<import("../common").TreeOptionData>) => void>;
    onFocus: PropType<(context: {
        value: import("./type").CascaderValue<import("../common").TreeOptionData>;
        e: FocusEvent;
    }) => void>;
    onPopupVisibleChange: PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onRemove: PropType<(context: import("./type").RemoveContext<import("../common").TreeOptionData>) => void>;
};
export default _default;
