{"version":3,"file":"effect.js","sources":["../../../src/cascader/core/effect.ts"],"sourcesContent":["import isNumber from 'lodash/isNumber';\nimport isFunction from 'lodash/isFunction';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { TreeNode, CascaderContextType, TdCascaderProps, TreeNodeValue, TreeNodeModel } from '../interface';\nimport { getFullPathLabel, getTreeValue } from './helper';\n\n/**\n * 点击item的副作用\n * @param propsTrigger\n * @param trigger\n * @param node\n * @param cascaderContext\n */\nexport function expendClickEffect(\n  propsTrigger: TdCascaderProps['trigger'],\n  trigger: TdCascaderProps['trigger'],\n  node: TreeNode,\n  cascaderContext: CascaderContextType,\n) {\n  const { checkStrictly, multiple, treeStore, setVisible, setValue, setTreeNodes, setExpend, value, max, valueType } =\n    cascaderContext;\n\n  const isDisabled = node.disabled || (multiple && (value as TreeNodeValue[]).length >= max && max !== 0);\n\n  if (isDisabled) return;\n  // 点击展开节点，设置展开状态\n  if (propsTrigger === trigger && !node.isLeaf()) {\n    const expanded = node.setExpanded(true);\n    treeStore.refreshNodes();\n    treeStore.replaceExpanded(expanded);\n    const nodes = treeStore.getNodes().filter((node: TreeNode) => node.visible);\n    setTreeNodes(nodes);\n\n    // 多选条件下手动维护expend\n    if (multiple) {\n      setExpend(expanded);\n    }\n  }\n\n  if (!multiple && (node.isLeaf() || checkStrictly) && trigger === 'click') {\n    treeStore.resetChecked();\n    const checked = node.setChecked(!node.checked);\n    const [value] = checked;\n\n    // 非受控状态下更新状态\n    setValue(valueType === 'single' ? value : node.getPath().map((item) => item.value), 'check', node.getModel());\n\n    if (!checkStrictly) {\n      setVisible(false, {});\n    }\n  }\n}\n\n/**\n * 多选状态下选中状态数据变化的副作用\n * @param node\n * @param cascaderContext\n * @returns\n */\nexport function valueChangeEffect(node: TreeNode, cascaderContext: CascaderContextType) {\n  const { disabled, max, inputVal, multiple, setVisible, setValue, treeNodes, treeStore, valueType } = cascaderContext;\n\n  if (!node || disabled || node.disabled) {\n    return;\n  }\n  const checked = node.setChecked(!node.isChecked());\n\n  if (isNumber(max) && max < 0) {\n    console.warn('TDesign Warn:', 'max should > 0');\n  }\n\n  if (checked.length > max && isNumber(max) && max > 0) {\n    return;\n  }\n\n  if (checked.length === 0) {\n    const expanded = treeStore.getExpanded();\n    setTimeout(() => {\n      treeStore.replaceExpanded(expanded);\n      treeStore.refreshNodes();\n    }, 0);\n  }\n\n  if (!multiple) {\n    setVisible(false, {});\n  }\n\n  const isSelectAll = treeNodes.every((item) => checked.indexOf(item.value) > -1);\n\n  if (inputVal && isSelectAll) {\n    setVisible(false, {});\n  }\n\n  // 处理不同数据类型\n  const resValue =\n    valueType === 'single'\n      ? checked\n      : checked.map((val) =>\n          treeStore\n            .getNode(val)\n            .getPath()\n            .map((item) => item.value),\n        );\n\n  setValue(resValue, 'check', node.getModel());\n}\n\n/**\n * closeIcon点击副作用\n * @param cascaderContext\n */\nexport function closeIconClickEffect(cascaderContext: CascaderContextType) {\n  const { setVisible, multiple, setExpend, setValue } = cascaderContext;\n\n  setVisible(false, {});\n\n  // 手动设置的展开需要去除\n  if (multiple) {\n    setExpend([]);\n  }\n\n  setValue(multiple ? [] : '', 'clear');\n}\n\n/**\n * tag 关闭按钮点击副作用\n * @param cascaderContext\n */\nexport function handleRemoveTagEffect(\n  cascaderContext: CascaderContextType,\n  index: number,\n  onRemove: TdCascaderProps['onRemove'],\n) {\n  const { disabled, setValue, value, valueType, treeStore } = cascaderContext;\n\n  if (disabled) return;\n  const newValue = cloneDeep(value) as [];\n  const res = newValue.splice(index, 1);\n  const node = treeStore.getNodes(res[0])[0];\n\n  setValue(newValue, 'uncheck', node.getModel());\n\n  const checked = node.setChecked(!node.isChecked());\n  // 处理不同数据类型\n  const resValue =\n    valueType === 'single'\n      ? checked\n      : checked.map((val) =>\n          treeStore\n            .getNode(val)\n            .getPath()\n            .map((item) => item.value),\n        );\n\n  setValue(resValue, 'uncheck', node.getModel());\n  if (isFunction(onRemove)) {\n    onRemove({ value: checked, node: node as any });\n  }\n}\n\n/**\n * input和treeStore变化的副作用\n * @param inputVal\n * @param treeStore\n * @param setTreeNodes\n * @returns\n */\nexport const treeNodesEffect = (\n  inputVal: CascaderContextType['inputVal'],\n  treeStore: CascaderContextType['treeStore'],\n  setTreeNodes: CascaderContextType['setTreeNodes'],\n  filter: CascaderContextType['filter'],\n) => {\n  if (!treeStore) return;\n  let nodes = [];\n  if (inputVal) {\n    const filterMethods = (node: TreeNode) => {\n      if (!node.isLeaf()) return;\n      if (isFunction(filter)) {\n        return filter(`${inputVal}`, node as TreeNodeModel & TreeNode);\n      }\n      const fullPathLabel = getFullPathLabel(node, '');\n      return fullPathLabel.indexOf(`${inputVal}`) > -1;\n    };\n\n    nodes = treeStore.nodes.filter(filterMethods);\n  } else {\n    nodes = treeStore.getNodes().filter((node: TreeNode) => node.visible);\n  }\n  setTreeNodes(nodes);\n};\n\n/**\n * 初始化展开阶段与展开状态副作用\n * @param treeStore\n * @param treeValue\n * @param expend\n */\nexport const treeStoreExpendEffect = (\n  treeStore: CascaderContextType['treeStore'],\n  value: CascaderContextType['value'],\n  expend: TreeNodeValue[],\n) => {\n  const treeValue = getTreeValue(value);\n\n  if (!treeStore) return;\n  // init expanded, 无expend状态时设置\n  if (Array.isArray(treeValue) && expend.length === 0) {\n    const expandedMap = new Map();\n    const [val] = treeValue;\n    if (val) {\n      expandedMap.set(val, true);\n      const node = treeStore.getNode(val);\n      if (!node) {\n        treeStore.refreshNodes();\n        return;\n      }\n      node.getParents().forEach((tn: TreeNode) => {\n        expandedMap.set(tn.value, true);\n      });\n      const expandedArr = Array.from(expandedMap.keys());\n      treeStore.replaceExpanded(expandedArr);\n    } else {\n      treeStore.resetExpanded();\n    }\n  }\n  // 本地维护 expend，更加可控，不需要依赖于 tree 的状态\n  if (treeStore.getExpanded() && expend.length) {\n    treeStore.replaceExpanded(expend);\n  }\n  treeStore.refreshNodes();\n};\n"],"names":["expendClickEffect","propsTrigger","trigger","node","cascaderContext","checkStrictly","multiple","treeStore","setVisible","setValue","setTreeNodes","setExpend","value","max","valueType","isDisabled","disabled","length","isLeaf","expanded","setExpanded","refreshNodes","replaceExpanded","nodes","getNodes","filter","visible","resetChecked","checked","setChecked","_slicedToArray","getPath","map","item","getModel","valueChangeEffect","inputVal","treeNodes","isChecked","isNumber","console","warn","getExpanded","setTimeout","isSelectAll","every","indexOf","resValue","val","getNode","closeIconClickEffect","handleRemoveTagEffect","index","onRemove","newValue","cloneDeep","res","splice","isFunction","treeNodesEffect","filterMethods","fullPathLabel","getFullPathLabel","treeStoreExpendEffect","expend","treeValue","getTreeValue","Array","isArray","expandedMap","Map","set","getParents","forEach","tn","expandedArr","from","keys","resetExpanded"],"mappings":"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"}