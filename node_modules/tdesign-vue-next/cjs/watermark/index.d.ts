export * from './type';
export declare const Watermark: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            alpha: number;
            rotate: number;
            removable: boolean;
            lineSpace: number;
            isRepeat: boolean;
            movable: boolean;
            moveInterval: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            alpha: {
                type: NumberConstructor;
                default: number;
            };
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            height: {
                type: NumberConstructor;
            };
            isRepeat: {
                type: BooleanConstructor;
                default: boolean;
            };
            lineSpace: {
                type: NumberConstructor;
                default: number;
            };
            movable: BooleanConstructor;
            moveInterval: {
                type: NumberConstructor;
                default: number;
            };
            offset: {
                type: import("vue").PropType<number[]>;
            };
            removable: {
                type: BooleanConstructor;
                default: boolean;
            };
            rotate: {
                type: NumberConstructor;
                default: number;
            };
            watermarkContent: {
                type: import("vue").PropType<import("./type").WatermarkText | import("./type").WatermarkImage | (import("./type").WatermarkText | import("./type").WatermarkImage)[]>;
            };
            width: {
                type: NumberConstructor;
            };
            x: {
                type: NumberConstructor;
            };
            y: {
                type: NumberConstructor;
            };
            zIndex: {
                type: NumberConstructor;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "alpha" | "rotate" | "removable" | "lineSpace" | "isRepeat" | "movable" | "moveInterval">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            alpha: {
                type: NumberConstructor;
                default: number;
            };
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            height: {
                type: NumberConstructor;
            };
            isRepeat: {
                type: BooleanConstructor;
                default: boolean;
            };
            lineSpace: {
                type: NumberConstructor;
                default: number;
            };
            movable: BooleanConstructor;
            moveInterval: {
                type: NumberConstructor;
                default: number;
            };
            offset: {
                type: import("vue").PropType<number[]>;
            };
            removable: {
                type: BooleanConstructor;
                default: boolean;
            };
            rotate: {
                type: NumberConstructor;
                default: number;
            };
            watermarkContent: {
                type: import("vue").PropType<import("./type").WatermarkText | import("./type").WatermarkImage | (import("./type").WatermarkText | import("./type").WatermarkImage)[]>;
            };
            width: {
                type: NumberConstructor;
            };
            x: {
                type: NumberConstructor;
            };
            y: {
                type: NumberConstructor;
            };
            zIndex: {
                type: NumberConstructor;
            };
        }>>, {
            gapX: import("vue").ComputedRef<number>;
            gapY: import("vue").ComputedRef<number>;
            backgroundRepeat: import("vue").ComputedRef<"no-repeat" | "repeat">;
            backgroundImage: import("vue").Ref<string>;
            watermarkRef: import("vue").Ref<HTMLElement>;
            watermarkContentRef: import("vue").Ref<HTMLElement>;
            bgImageOptions: {
                width: number;
                height: number;
                rotate: number;
                lineSpace: number;
                alpha: number;
                gapX: number;
                gapY: number;
                watermarkContent: unknown;
                offsetLeft: number;
                offsetTop: number;
            };
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            alpha: number;
            rotate: number;
            removable: boolean;
            lineSpace: number;
            isRepeat: boolean;
            movable: boolean;
            moveInterval: number;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        alpha: {
            type: NumberConstructor;
            default: number;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        height: {
            type: NumberConstructor;
        };
        isRepeat: {
            type: BooleanConstructor;
            default: boolean;
        };
        lineSpace: {
            type: NumberConstructor;
            default: number;
        };
        movable: BooleanConstructor;
        moveInterval: {
            type: NumberConstructor;
            default: number;
        };
        offset: {
            type: import("vue").PropType<number[]>;
        };
        removable: {
            type: BooleanConstructor;
            default: boolean;
        };
        rotate: {
            type: NumberConstructor;
            default: number;
        };
        watermarkContent: {
            type: import("vue").PropType<import("./type").WatermarkText | import("./type").WatermarkImage | (import("./type").WatermarkText | import("./type").WatermarkImage)[]>;
        };
        width: {
            type: NumberConstructor;
        };
        x: {
            type: NumberConstructor;
        };
        y: {
            type: NumberConstructor;
        };
        zIndex: {
            type: NumberConstructor;
        };
    }>> & import("vue").ShallowUnwrapRef<{
        gapX: import("vue").ComputedRef<number>;
        gapY: import("vue").ComputedRef<number>;
        backgroundRepeat: import("vue").ComputedRef<"no-repeat" | "repeat">;
        backgroundImage: import("vue").Ref<string>;
        watermarkRef: import("vue").Ref<HTMLElement>;
        watermarkContentRef: import("vue").Ref<HTMLElement>;
        bgImageOptions: {
            width: number;
            height: number;
            rotate: number;
            lineSpace: number;
            alpha: number;
            gapX: number;
            gapY: number;
            watermarkContent: unknown;
            offsetLeft: number;
            offsetTop: number;
        };
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    alpha: {
        type: NumberConstructor;
        default: number;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    height: {
        type: NumberConstructor;
    };
    isRepeat: {
        type: BooleanConstructor;
        default: boolean;
    };
    lineSpace: {
        type: NumberConstructor;
        default: number;
    };
    movable: BooleanConstructor;
    moveInterval: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<number[]>;
    };
    removable: {
        type: BooleanConstructor;
        default: boolean;
    };
    rotate: {
        type: NumberConstructor;
        default: number;
    };
    watermarkContent: {
        type: import("vue").PropType<import("./type").WatermarkText | import("./type").WatermarkImage | (import("./type").WatermarkText | import("./type").WatermarkImage)[]>;
    };
    width: {
        type: NumberConstructor;
    };
    x: {
        type: NumberConstructor;
    };
    y: {
        type: NumberConstructor;
    };
    zIndex: {
        type: NumberConstructor;
    };
}>>, {
    gapX: import("vue").ComputedRef<number>;
    gapY: import("vue").ComputedRef<number>;
    backgroundRepeat: import("vue").ComputedRef<"no-repeat" | "repeat">;
    backgroundImage: import("vue").Ref<string>;
    watermarkRef: import("vue").Ref<HTMLElement>;
    watermarkContentRef: import("vue").Ref<HTMLElement>;
    bgImageOptions: {
        width: number;
        height: number;
        rotate: number;
        lineSpace: number;
        alpha: number;
        gapX: number;
        gapY: number;
        watermarkContent: unknown;
        offsetLeft: number;
        offsetTop: number;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    alpha: number;
    rotate: number;
    removable: boolean;
    lineSpace: number;
    isRepeat: boolean;
    movable: boolean;
    moveInterval: number;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Watermark;
