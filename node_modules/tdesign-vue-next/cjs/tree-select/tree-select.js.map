{"version":3,"file":"tree-select.js","sources":["../../src/tree-select/tree-select.tsx"],"sourcesContent":["import { defineComponent, ref, reactive, computed, watch, onMounted, toRefs } from 'vue';\nimport isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\nimport isBoolean from 'lodash/isBoolean';\nimport isFunction from 'lodash/isFunction';\nimport isNil from 'lodash/isNil';\n\nimport Tree, { TreeProps, TreeNodeModel, TreeNodeValue } from '../tree';\nimport SelectInput from '../select-input';\nimport { TagInputChangeContext } from '../tag-input';\nimport { InputValue } from '../input';\nimport FakeArrow from '../common-components/fake-arrow';\n\nimport { INodeOptions } from './interface';\nimport { TreeSelectValue, TdTreeSelectProps, TreeSelectValueChangeTrigger } from './type';\nimport { TreeOptionData } from '../common';\nimport props from './props';\n\n// hooks\nimport { usePrefixClass, useConfig } from '../hooks/useConfig';\nimport { useFormDisabled } from '../form/hooks';\nimport { useTNodeJSX, useTNodeDefault } from '../hooks/tnode';\nimport useVModel from '../hooks/useVModel';\nimport useDefaultValue from '../hooks/useDefaultValue';\n\nexport default defineComponent({\n  name: 'TTreeSelect',\n  props,\n  setup(props: TdTreeSelectProps, { slots }) {\n    const renderTNodeJSX = useTNodeJSX();\n    const renderDefaultTNode = useTNodeDefault();\n    const classPrefix = usePrefixClass();\n    const { globalConfig } = useConfig('treeSelect');\n    const formDisabled = useFormDisabled();\n\n    // ref\n    const treeRef = ref(null);\n\n    // data\n    const filterByText = ref(null);\n    const actived = ref([]);\n    const expanded = ref([]);\n    const nodeInfo = ref(null);\n    const treeKey = ref(0);\n\n    // model\n    const { value, modelValue, popupVisible, inputValue } = toRefs(props);\n    const [treeSelectValue, setTreeSelectValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n    const [innerVisible, setInnerVisible] = useDefaultValue(\n      popupVisible,\n      false,\n      props.onPopupVisibleChange,\n      'popupVisible',\n    );\n    const [innerInputValue, setInnerInputValue] = useDefaultValue(\n      inputValue,\n      props.defaultInputValue,\n      props.onInputChange,\n      'inputValue',\n    );\n\n    // watch\n    watch(treeSelectValue, async () => {\n      await changeNodeInfo();\n      if (!props.multiple) {\n        actived.value = nodeInfo.value ? [nodeInfo.value.value] : [];\n      }\n    });\n    watch(\n      () => props.data,\n      async () => {\n        await changeNodeInfo();\n        treeRerender();\n      },\n    );\n\n    // computed\n    const tDisabled = computed(() => {\n      return formDisabled.value || props.disabled;\n    });\n\n    const inputPlaceholder = computed(\n      () => (innerVisible.value && nodeInfo.value?.label) || props.placeholder || globalConfig.value.placeholder,\n    );\n\n    const popupClass = computed(() => {\n      return [`${classPrefix.value}-select__dropdown`, 'narrow-scrollbar'];\n    });\n\n    const dropdownInnerSize = computed(() => {\n      return {\n        small: 's',\n        medium: 'm',\n        large: 'l',\n      }[props.size];\n    });\n\n    const isObjectValue = computed(() => props.valueType === 'object');\n\n    const checked = computed((): Array<TreeNodeValue> => {\n      if (props.multiple) {\n        if (isObjectValue.value) {\n          return isArray(treeSelectValue.value)\n            ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => (item as INodeOptions).value)\n            : [];\n        }\n        return isArray(treeSelectValue.value)\n          ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => item as TreeNodeValue)\n          : [];\n      }\n      return [];\n    });\n\n    const multiLimitDisabled = computed(() => {\n      return (\n        props.multiple &&\n        !!props.max &&\n        isArray(treeSelectValue.value) &&\n        props.max <= (treeSelectValue.value as Array<TreeSelectValue>).length\n      );\n    });\n\n    const realLabel = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.label || 'label';\n      }\n      return 'label';\n    });\n\n    const realValue = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.value || 'value';\n      }\n      return 'value';\n    });\n\n    const realChildren = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.children || 'children';\n      }\n      return 'children';\n    });\n\n    // timelifes\n    onMounted(async () => {\n      if (!treeSelectValue.value && props.defaultValue) {\n        await change(props.defaultValue, null, 'uncheck');\n      }\n      if (isObjectValue.value) {\n        actived.value = isArray(treeSelectValue.value)\n          ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => (item as INodeOptions).value)\n          : [(treeSelectValue.value as INodeOptions).value];\n      } else {\n        (actived.value as TreeSelectValue) = isArray(treeSelectValue.value)\n          ? treeSelectValue.value\n          : [treeSelectValue.value];\n      }\n      changeNodeInfo();\n    });\n\n    // methods\n\n    const change = (\n      valueParam: TreeSelectValue,\n      node: TreeNodeModel<TreeOptionData>,\n      trigger: TreeSelectValueChangeTrigger,\n    ) => {\n      setTreeSelectValue(valueParam, { node, trigger });\n      changeNodeInfo();\n    };\n\n    const clear = (content: { e: MouseEvent }) => {\n      const defaultValue: TreeSelectValue = props.multiple ? [] : '';\n      actived.value = [];\n      change(defaultValue, null, 'clear');\n      props.onClear?.({ e: content.e });\n    };\n\n    const treeNodeChange = (\n      valueParam: Array<TreeNodeValue>,\n      context: { node: TreeNodeModel<TreeOptionData>; e: MouseEvent },\n    ) => {\n      let current: TreeSelectValue = valueParam;\n      if (isObjectValue.value) {\n        current = valueParam.map((nodeValue) => getTreeNode(props.data, nodeValue));\n      }\n      change(current, context.node, 'check');\n    };\n\n    const treeNodeActive = (\n      valueParam: Array<TreeNodeValue>,\n      context: { node: TreeNodeModel<TreeOptionData>; e: MouseEvent },\n    ) => {\n      if (!props.multiple) {\n        setInnerVisible(false);\n      }\n      // 多选模式屏蔽 Active 事件\n      if (props.multiple) {\n        return;\n      }\n      // 单选模式重复选择不清空\n      if (treeSelectValue.value === context.node.data[realValue.value]) {\n        return;\n      }\n      let current: TreeSelectValue = valueParam;\n      if (isObjectValue.value) {\n        const nodeValue = isEmpty(valueParam) ? '' : valueParam[0];\n        current = getTreeNode(props.data, nodeValue);\n      } else {\n        current = isEmpty(valueParam) ? '' : valueParam[0];\n      }\n      change(current, context.node, 'check');\n      actived.value = valueParam;\n    };\n\n    const treeNodeExpand = (valueParam: Array<TreeNodeValue>) => {\n      expanded.value = valueParam;\n    };\n\n    const treeNodeLoad = () => {\n      changeNodeInfo();\n    };\n\n    const inputChange = (value: InputValue): boolean => {\n      // 未打开状态不处理输入框输入\n      if (!innerVisible.value) {\n        props.onSearch?.(String(value));\n        return;\n      }\n      setInnerInputValue(value);\n      if (!value) {\n        filterByText.value = null;\n        return null;\n      }\n      filterByText.value = (node: TreeNodeModel<TreeOptionData>) => {\n        if (isFunction(props.filter)) {\n          const filter: boolean | Promise<boolean> = props.filter(String(value), node);\n          if (isBoolean(filter)) {\n            return filter;\n          }\n        }\n        return node.data[realLabel.value].indexOf(value) >= 0;\n      };\n      props.onSearch?.(String(value));\n    };\n\n    const tagChange = (value: string | number, context: TagInputChangeContext) => {\n      const { trigger, index } = context;\n      if (['tag-remove', 'backspace'].includes(trigger)) {\n        isArray(treeSelectValue.value) && (treeSelectValue.value as Array<TreeSelectValue>).splice(index, 1);\n      }\n      props.onRemove?.({ value, data: null, e: context && (context.e as MouseEvent) });\n      change(treeSelectValue.value, null, trigger as 'tag-remove' | 'backspace');\n    };\n\n    const changeNodeInfo = async () => {\n      await treeSelectValue.value;\n\n      if (!props.multiple) {\n        if (treeSelectValue.value || treeSelectValue.value === 0) {\n          nodeInfo.value = getSingleNodeInfo();\n        } else {\n          nodeInfo.value = '';\n        }\n      } else if (props.multiple) {\n        if (isArray(treeSelectValue.value)) {\n          nodeInfo.value = getMultipleNodeInfo();\n        } else {\n          nodeInfo.value = [];\n        }\n      } else {\n        nodeInfo.value = null;\n      }\n    };\n\n    const getSingleNodeInfo = () => {\n      const nodeValue = isObjectValue.value ? (treeSelectValue.value as INodeOptions).value : treeSelectValue.value;\n      if (treeRef.value && (props.treeProps as TreeProps)?.load) {\n        if (!isEmpty(props.data)) {\n          const node = treeRef.value.getItem(nodeValue);\n          if (node) {\n            return { label: node.data[realLabel.value], value: node.data[realValue.value] };\n          }\n        }\n        return { label: nodeValue, value: nodeValue };\n      }\n      const node = getTreeNode(props.data, nodeValue);\n      if (!node) {\n        return { label: nodeValue, value: nodeValue };\n      }\n      return node;\n    };\n\n    const getMultipleNodeInfo = () => {\n      return (treeSelectValue.value as Array<TreeSelectValue>).map((value) => {\n        const nodeValue = isObjectValue.value ? (value as INodeOptions).value : value;\n        if (treeRef.value && (props.treeProps as TreeProps)?.load) {\n          if (!isEmpty(props.data)) {\n            const node = treeRef.value.getItem(nodeValue);\n            if (node) {\n              return { label: node.data[realLabel.value], value: node.data[realValue.value] };\n            }\n          }\n          return { label: nodeValue, value: nodeValue };\n        }\n        const node = getTreeNode(props.data, nodeValue);\n        if (!node) {\n          return { label: nodeValue, value: nodeValue };\n        }\n        return node;\n      });\n    };\n    const getTreeNode = (data: Array<TreeOptionData>, targetValue: TreeSelectValue): TreeSelectValue | null => {\n      for (let i = 0, len = data.length; i < len; i++) {\n        if (data[i][realValue.value] === targetValue) {\n          return { label: data[i][realLabel.value], value: data[i][realValue.value] };\n        }\n        if (data[i]?.[realChildren.value]) {\n          const result = getTreeNode(data[i]?.[realChildren.value], targetValue);\n          if (!isNil(result)) {\n            return result;\n          }\n        }\n      }\n      return null;\n    };\n\n    const treeRerender = () => {\n      treeKey.value += 1;\n    };\n\n    const renderTree = () => (\n      <Tree\n        ref={treeRef}\n        v-show={!props.loading}\n        key={treeKey.value}\n        value={[...checked.value]}\n        hover\n        data={props.data}\n        activable={!props.multiple}\n        checkable={props.multiple}\n        disabled={tDisabled.value || multiLimitDisabled.value}\n        size={props.size}\n        filter={filterByText.value}\n        icon={!filterByText.value}\n        actived={actived.value}\n        expanded={expanded.value}\n        activeMultiple={props.multiple}\n        onChange={treeNodeChange}\n        onActive={treeNodeActive}\n        onExpand={treeNodeExpand}\n        onLoad={treeNodeLoad}\n        expandOnClickNode\n        v-slots={{\n          empty: () =>\n            renderDefaultTNode('empty', {\n              defaultNode: <div class={`${classPrefix.value}-select__empty`}>{globalConfig.value.empty}</div>,\n            }),\n        }}\n        {...(props.treeProps as TdTreeSelectProps['treeProps'])}\n      />\n    );\n\n    const renderSuffixIcon = () => (\n      <FakeArrow\n        isActive={innerVisible.value}\n        disabled={props.disabled}\n        overlayClassName={{\n          [`${classPrefix.value}-fake-arrow--highlight`]: innerVisible.value,\n          [`${classPrefix.value}-fake-arrow--disable`]: props.disabled,\n        }}\n      />\n    );\n\n    return () => (\n      <SelectInput\n        class={`${classPrefix.value}-tree-select`}\n        value={nodeInfo.value}\n        inputValue={innerVisible.value ? innerInputValue.value : ''}\n        popupVisible={innerVisible.value}\n        disabled={tDisabled.value}\n        multiple={props.multiple}\n        loading={props.loading}\n        clearable={props.clearable}\n        autoWidth={props.autoWidth}\n        borderless={props.borderless}\n        readonly={props.readonly}\n        placeholder={inputPlaceholder.value}\n        allowInput={props.filterable || isFunction(props.filter)}\n        minCollapsedNum={props.minCollapsedNum}\n        collapsed-items={props.collapsedItems}\n        popupProps={{\n          overlayClassName: popupClass.value,\n          ...(props.popupProps as TdTreeSelectProps['popupProps']),\n        }}\n        inputProps={{\n          size: props.size,\n          ...(props.inputProps as TdTreeSelectProps['inputProps']),\n        }}\n        tagInputProps={{\n          size: props.size,\n        }}\n        tagProps={{\n          maxWidth: 300,\n          ...(props.tagProps as TdTreeSelectProps['tagProps']),\n        }}\n        label={() => renderTNodeJSX('prefixIcon')}\n        suffixIcon={() => renderSuffixIcon()}\n        onClear={clear}\n        onBlur={(value: InputValue, context: { e: FocusEvent }) => {\n          props.onBlur?.({ value, e: context.e });\n        }}\n        onFocus={(value: InputValue, context: { e: FocusEvent }) => {\n          props.onFocus?.({ value, e: context.e });\n        }}\n        valueDisplay={() =>\n          renderTNodeJSX('valueDisplay', {\n            params: props.multiple\n              ? {\n                  value: nodeInfo.value,\n                  onClose: (value: string | number, context: TagInputChangeContext) => {\n                    tagChange(value, context);\n                  },\n                }\n              : {\n                  value: nodeInfo.value || { [realLabel.value]: '', [realValue.value]: undefined },\n                },\n          })\n        }\n        v-slots={{\n          panel: () => (\n            <div\n              class={[\n                `${classPrefix.value}-select__dropdown-inner`,\n                `${classPrefix.value}-select__dropdown-inner--size-${dropdownInnerSize.value}`,\n              ]}\n            >\n              <p\n                v-show={props.loading && !tDisabled.value}\n                class={[`${classPrefix.value}-select-loading-tips`, `${classPrefix.value}-select__right-icon-polyfill`]}\n              >\n                {renderDefaultTNode('loadingText', {\n                  defaultNode: <div class={`${classPrefix.value}-select__empty`}>{globalConfig.value.loadingText}</div>,\n                })}\n              </p>\n              {renderTree()}\n            </div>\n          ),\n          collapsedItems: slots.collapsedItems,\n        }}\n        onInputChange={inputChange}\n        onTagChange={tagChange}\n        onPopupVisibleChange={(state: boolean) => setInnerVisible(state)}\n        {...(props.selectInputProps as TdTreeSelectProps['selectInputProps'])}\n      />\n    );\n  },\n});\n"],"names":["defineComponent","name","props","setup","slots","renderTNodeJSX","useTNodeJSX","renderDefaultTNode","useTNodeDefault","classPrefix","usePrefixClass","useConfig","globalConfig","formDisabled","useFormDisabled","treeRef","ref","filterByText","actived","expanded","nodeInfo","treeKey","toRefs","value","modelValue","popupVisible","inputValue","useVModel","defaultValue","onChange","_slicedToArray","treeSelectValue","setTreeSelectValue","useDefaultValue","onPopupVisibleChange","innerVisible","setInnerVisible","defaultInputValue","onInputChange","innerInputValue","setInnerInputValue","watch","_asyncToGenerator","_regeneratorRuntime","changeNodeInfo","multiple","data","treeRerender","tDisabled","computed","disabled","inputPlaceholder","label","placeholder","popupClass","dropdownInnerSize","small","medium","large","size","isObjectValue","valueType","checked","isArray","map","item","multiLimitDisabled","max","length","realLabel","isEmpty","treeProps","keys","realValue","realChildren","children","onMounted","change","valueParam","node","trigger","clear","content","onClear","e","treeNodeChange","context","current","nodeValue","getTreeNode","treeNodeActive","treeNodeExpand","treeNodeLoad","inputChange","onSearch","String","isFunction","filter","isBoolean","indexOf","tagChange","index","includes","splice","onRemove","getSingleNodeInfo","getMultipleNodeInfo","load","getItem","targetValue","i","len","result","isNil","renderTree","_withDirectives","_createVNode","Tree","_mergeProps","empty","defaultNode","_vShow","loading","renderSuffixIcon","FakeArrow","_defineProperty","SelectInput","clearable","autoWidth","borderless","readonly","filterable","minCollapsedNum","collapsedItems","overlayClassName","popupProps","inputProps","maxWidth","tagProps","onBlur","onFocus","params","onClose","state","selectInputProps","panel","loadingText"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,kBAAeA,mBAAgB,CAAA;AAC7BC,EAAAA,IAAM,EAAA,aAAA;AACNC,EAAAA,KAAA,EAAAA,2BAAA;EACAC,KAAMD,EAAAA,SAAAA,KAAAA,CAAAA,MAAAA,EAAqC,IAAA,EAAA;IAAA,IAATE,KAAA,QAAAA,KAAA,CAAA;IAChC,IAAMC,iBAAiBC,uBAAY,EAAA,CAAA;IACnC,IAAMC,qBAAqBC,2BAAgB,EAAA,CAAA;IAC3C,IAAMC,cAAcC,8BAAe,EAAA,CAAA;IACnC,IAAyBC,UAAAA,GAAAA,kCAAA,CAAU,YAAY,CAAA;AAAvCC,MAAAA,YAAA,cAAAA,YAAA,CAAA;IACR,IAAMC,eAAeC,0BAAgB,EAAA,CAAA;AAG/B,IAAA,IAAAC,OAAA,GAAUC,QAAI,IAAI,CAAA,CAAA;AAGlB,IAAA,IAAAC,YAAA,GAAeD,QAAI,IAAI,CAAA,CAAA;AACvB,IAAA,IAAAE,OAAA,GAAUF,OAAI,CAAA,EAAE,CAAA,CAAA;AAChB,IAAA,IAAAG,QAAA,GAAWH,OAAI,CAAA,EAAE,CAAA,CAAA;AACjB,IAAA,IAAAI,QAAA,GAAWJ,QAAI,IAAI,CAAA,CAAA;AACnB,IAAA,IAAAK,OAAA,GAAUL,QAAI,CAAC,CAAA,CAAA;IAGrB,IAAwDM,OAAAA,GAAAA,WAAOpB,MAAK,CAAA;AAA5DqB,MAAAA,KAAO,WAAPA,KAAO;AAAAC,MAAAA,UAAA,WAAAA,UAAA;AAAYC,MAAAA,uBAAAA;AAAcC,MAAAA,UAAW,WAAXA,UAAW,CAAA;AAC9C,IAAA,IAAA,UAAA,GAAwCC,0BAAA,CAAUJ,OAAOC,UAAYtB,EAAAA,MAAAA,CAAM0B,YAAc1B,EAAAA,MAAAA,CAAM2B,QAAQ,CAAA;AAAA,MAAA,WAAA,GAAAC,kCAAA,CAAA,UAAA,EAAA,CAAA,CAAA;MAAtGC,eAAiB,GAAA,WAAA,CAAA,CAAA,CAAA;MAAAC,kBAAkB,GAAA,WAAA,CAAA,CAAA,CAAA,CAAA;IACpC,IAAkCC,gBAAAA,GAAAA,gCAAA,CACtCR,YAAA,EACA,KAAA,EACAvB,MAAM,CAAAgC,oBAAA,EACN,cAAA,CACF;AAAA,MAAA,iBAAA,GAAAJ,kCAAA,CAAA,gBAAA,EAAA,CAAA,CAAA;MALOK,YAAc,GAAA,iBAAA,CAAA,CAAA,CAAA;MAAAC,eAAe,GAAA,iBAAA,CAAA,CAAA,CAAA,CAAA;AAM9B,IAAA,IAAA,iBAAA,GAAwCH,gCAAA,CAC5CP,UAAA,EACAxB,MAAM,CAAAmC,iBAAA,EACNnC,MAAM,CAAAoC,aAAA,EACN,YAAA,CACF;AAAA,MAAA,iBAAA,GAAAR,kCAAA,CAAA,iBAAA,EAAA,CAAA,CAAA;MALOS,eAAiB,GAAA,iBAAA,CAAA,CAAA,CAAA;MAAAC,kBAAkB,GAAA,iBAAA,CAAA,CAAA,CAAA,CAAA;IAQ1CC,SAAA,CAAMV,8BAAiBW,qCAAA,eAAAC,uCAAA,CAAA,IAAA,CAAA,SAAA,OAAA,GAAA;AAAA,MAAA,OAAAA,uCAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,YAAA,KAAA,CAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,OACfC,cAAe,EAAA,CAAA;AAAA,YAAA,KAAA,CAAA;AACjB,cAAA,IAAA,CAAC1C,OAAM2C,QAAU,EAAA;AACX3B,gBAAAA,OAAA,CAAAK,KAAA,GAAQH,SAASG,KAAQ,GAAA,CAACH,SAASG,KAAM,CAAAA,KAAK,IAAI,EAAC,CAAA;AAC7D,eAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;AAAA,cAAA,OAAA,QAAA,CAAA,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAA,OAAA,CAAA,CAAA;AAAA,KACD,CAAA,CAAA,CAAA,CAAA;AACDkB,IAAAA,SAAA,CACE,YAAA;MAAA,OAAMvC,MAAM,CAAA4C,IAAA,CAAA;KACZ,eAAAJ,qCAAA,eAAAC,uCAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;AAAA,MAAA,OAAAA,uCAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,YAAA,KAAA,CAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,OACQC,cAAe,EAAA,CAAA;AAAA,YAAA,KAAA,CAAA;AACRG,cAAAA,YAAA,EAAA,CAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;AAAA,cAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAA,QAAA,CAAA,CAAA;AAAA,KACf,CACF,CAAA,CAAA,CAAA;AAGM,IAAA,IAAAC,SAAA,GAAYC,aAAS,YAAM;AACxB,MAAA,OAAApC,YAAA,CAAaU,SAASrB,MAAM,CAAAgD,QAAA,CAAA;AACrC,KAAC,CAAA,CAAA;IAED,IAAMC,gBAAmB,GAAAF,YAAA,CACvB,YAAA;AAAA,MAAA,IAAA,eAAA,CAAA;AAAA,MAAA,OAAOd,aAAaZ,KAAS,wBAAAH,QAAA,CAASG,WAAT,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,eAAA,CAAgB6B,KAAUlD,CAAAA,IAAAA,MAAAA,CAAMmD,WAAe,IAAAzC,YAAA,CAAaW,KAAM,CAAA8B,WAAA,CAAA;KACjG,CAAA,CAAA;AAEM,IAAA,IAAAC,UAAA,GAAaL,aAAS,YAAM;AAChC,MAAA,OAAO,WAAIxC,WAAY,CAAAc,KAAA,EAAA,mBAAA,CAAA,EAA0B,kBAAkB,CAAA,CAAA;AACrE,KAAC,CAAA,CAAA;AAEK,IAAA,IAAAgC,iBAAA,GAAoBN,aAAS,YAAM;MAChC,OAAA;AACLO,QAAAA,KAAO,EAAA,GAAA;AACPC,QAAAA,MAAQ,EAAA,GAAA;AACRC,QAAAA,KAAO,EAAA,GAAA;AACT,QAAExD,MAAM,CAAAyD,IAAA,CAAA,CAAA;AACV,KAAC,CAAA,CAAA;IAED,IAAMC,aAAgB,GAAAX,YAAA,CAAS,YAAA;AAAA,MAAA,OAAM/C,MAAAA,CAAM2D,cAAc,QAAQ,CAAA;KAAA,CAAA,CAAA;AAE3D,IAAA,IAAAC,OAAA,GAAUb,aAAS,YAA4B;MACnD,IAAI/C,OAAM2C,QAAU,EAAA;QAClB,IAAIe,cAAcrC,KAAO,EAAA;AACvB,UAAA,OAAOwC,2BAAQ,CAAAhC,eAAA,CAAgBR,KAAK,CAAA,GAC/BQ,eAAgB,CAAAR,KAAA,CAAiCyC,GAAI,CAAA,UAACC,IAAU,EAAA;YAAA,OAAAA,IAAA,CAAsB1C,KAAK,CAAA;AAAA,WAAA,CAAA,GAC5F,EAAC,CAAA;AACP,SAAA;AACO,QAAA,OAAAwC,2BAAA,CAAQhC,eAAgB,CAAAR,KAAK,CAC/B,GAAAQ,eAAA,CAAgBR,KAAiC,CAAAyC,GAAA,CAAI,UAACC,IAAA,EAAA;AAAA,UAAA,OAASA,IAAqB,CAAA;AAAA,SAAA,CAAA,GACrF,EAAC,CAAA;AACP,OAAA;AACA,MAAA,OAAO,EAAC,CAAA;AACV,KAAC,CAAA,CAAA;AAEK,IAAA,IAAAC,kBAAA,GAAqBjB,aAAS,YAAM;MACxC,OACE/C,MAAM,CAAA2C,QAAA,IACN,CAAC,CAAC3C,MAAM,CAAAiE,GAAA,IACRJ,2BAAQ,CAAAhC,eAAA,CAAgBR,KAAK,CAAA,IAC7BrB,MAAM,CAAAiE,GAAA,IAAQpC,gBAAgBR,KAAiC,CAAA6C,MAAA,CAAA;AAEnE,KAAC,CAAA,CAAA;AAEK,IAAA,IAAAC,SAAA,GAAYpB,aAAS,YAAM;AAC3B,MAAA,IAAA,CAACqB,2BAAQpE,CAAAA,MAAAA,CAAMqE,SAAS,CAAA,IAAK,CAACD,2BAASpE,CAAAA,MAAAA,CAAMqE,SAAwB,CAAAC,IAAI,CAAG,EAAA;QACtEtE,OAAAA,MAAAA,CAAMqE,SAAwB,CAAAC,IAAA,CAAKpB,KAAS,IAAA,OAAA,CAAA;AACtD,OAAA;AACO,MAAA,OAAA,OAAA,CAAA;AACT,KAAC,CAAA,CAAA;AAEK,IAAA,IAAAqB,SAAA,GAAYxB,aAAS,YAAM;AAC3B,MAAA,IAAA,CAACqB,2BAAQpE,CAAAA,MAAAA,CAAMqE,SAAS,CAAA,IAAK,CAACD,2BAASpE,CAAAA,MAAAA,CAAMqE,SAAwB,CAAAC,IAAI,CAAG,EAAA;QACtEtE,OAAAA,MAAAA,CAAMqE,SAAwB,CAAAC,IAAA,CAAKjD,KAAS,IAAA,OAAA,CAAA;AACtD,OAAA;AACO,MAAA,OAAA,OAAA,CAAA;AACT,KAAC,CAAA,CAAA;AAEK,IAAA,IAAAmD,YAAA,GAAezB,aAAS,YAAM;AAC9B,MAAA,IAAA,CAACqB,2BAAQpE,CAAAA,MAAAA,CAAMqE,SAAS,CAAA,IAAK,CAACD,2BAASpE,CAAAA,MAAAA,CAAMqE,SAAwB,CAAAC,IAAI,CAAG,EAAA;QACtEtE,OAAAA,MAAAA,CAAMqE,SAAwB,CAAAC,IAAA,CAAKG,QAAY,IAAA,UAAA,CAAA;AACzD,OAAA;AACO,MAAA,OAAA,UAAA,CAAA;AACT,KAAC,CAAA,CAAA;AAGDC,IAAAA,aAAA,eAAUlC,qCAAA,eAAAC,uCAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;AAAA,MAAA,OAAAA,uCAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,YAAA,KAAA,CAAA;AAAA,cAAA,IAAA,EACJ,CAACZ,eAAA,CAAgBR,KAASrB,IAAAA,MAAAA,CAAM0B,YAAc,CAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,eAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;cAAA,OAC1CiD,MAAO3E,CAAAA,MAAAA,CAAM0B,YAAc,EAAA,IAAA,EAAM,SAAS,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA;cAElD,IAAIgC,cAAcrC,KAAO,EAAA;AACvBL,gBAAAA,OAAA,CAAQK,QAAQwC,2BAAQ,CAAAhC,eAAA,CAAgBR,KAAK,CAAA,GACxCQ,gBAAgBR,KAAiC,CAAAyC,GAAA,CAAI,UAACC,IAAA,EAAA;kBAAA,OAAUA,KAAsB1C,KAAK,CAAA;AAAA,iBAAA,CAAA,GAC5F,CAAEQ,eAAA,CAAgBR,MAAuBA,KAAK,CAAA,CAAA;AACpD,eAAO,MAAA;AACJL,gBAAAA,OAAA,CAAQK,KAA4B,GAAAwC,2BAAA,CAAQhC,eAAgB,CAAAR,KAAK,IAC9DQ,eAAgB,CAAAR,KAAA,GAChB,CAACQ,eAAA,CAAgBR,KAAK,CAAA,CAAA;AAC5B,eAAA;AACeqB,cAAAA,cAAA,EAAA,CAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;AAAA,cAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAA,QAAA,CAAA,CAAA;AAAA,KAChB,CAAA,CAAA,CAAA,CAAA;IAID,IAAMiC,MAAS,GAAA,SAATA,MAAS,CACbC,UACA,EAAAC,IAAA,EACAC,OACG,EAAA;MACHhD,kBAAA,CAAmB8C,UAAY,EAAA;AAAEC,QAAAA,IAAM,EAANA,IAAM;AAAAC,QAAAA,OAAA,EAAAA,OAAAA;AAAQ,OAAC,CAAA,CAAA;AACjCpC,MAAAA,cAAA,EAAA,CAAA;KACjB,CAAA;AAEM,IAAA,IAAAqC,KAAA,GAAQ,SAARA,KAAA,CAASC,OAA+B,EAAA;AAAA,MAAA,IAAA,eAAA,CAAA;MAC5C,IAAMtD,YAAgC1B,GAAAA,MAAAA,CAAM2C,QAAW,GAAA,EAAK,GAAA,EAAA,CAAA;MAC5D3B,OAAA,CAAQK,QAAQ,EAAC,CAAA;AACVsD,MAAAA,MAAA,CAAAjD,YAAA,EAAc,MAAM,OAAO,CAAA,CAAA;AAClC1B,MAAAA,CAAAA,eAAAA,GAAAA,OAAMiF,OAAU,MAAhBjF,IAAAA,IAAAA,eAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,eAAAA,CAAAA,IAAAA,CAAAA,QAAgB;QAAEkF,CAAG,EAAAF,OAAA,CAAQE,CAAAA;AAAE,OAAC,CAAA,CAAA;KAClC,CAAA;IAEM,IAAAC,cAAA,GAAiB,SAAjBA,cAAA,CACJP,UAAA,EACAQ,OACG,EAAA;MACH,IAAIC,OAA2B,GAAAT,UAAA,CAAA;MAC/B,IAAIlB,cAAcrC,KAAO,EAAA;AACbgE,QAAAA,OAAA,GAAAT,UAAA,CAAWd,IAAI,UAACwB,SAAA,EAAA;AAAA,UAAA,OAAcC,YAAYvF,MAAM,CAAA4C,IAAA,EAAM0C,SAAS,CAAC,CAAA;SAAA,CAAA,CAAA;AAC5E,OAAA;MACOX,MAAA,CAAAU,OAAA,EAASD,OAAQ,CAAAP,IAAA,EAAM,OAAO,CAAA,CAAA;KACvC,CAAA;IAEM,IAAAW,cAAA,GAAiB,SAAjBA,cAAA,CACJZ,UAAA,EACAQ,OACG,EAAA;AACC,MAAA,IAAA,CAACpF,OAAM2C,QAAU,EAAA;QACnBT,eAAA,CAAgB,KAAK,CAAA,CAAA;AACvB,OAAA;MAEA,IAAIlC,OAAM2C,QAAU,EAAA;AAClB,QAAA,OAAA;AACF,OAAA;AAEA,MAAA,IAAId,gBAAgBR,KAAU,KAAA+D,OAAA,CAAQP,IAAK,CAAAjC,IAAA,CAAK2B,UAAUlD,KAAQ,CAAA,EAAA;AAChE,QAAA,OAAA;AACF,OAAA;MACA,IAAIgE,OAA2B,GAAAT,UAAA,CAAA;MAC/B,IAAIlB,cAAcrC,KAAO,EAAA;AACvB,QAAA,IAAMiE,SAAY,GAAAlB,2BAAA,CAAQQ,UAAU,CAAA,GAAI,KAAKA,UAAW,CAAA,CAAA,CAAA,CAAA;QAC9CS,OAAA,GAAAE,WAAA,CAAYvF,MAAM,CAAA4C,IAAA,EAAM0C,SAAS,CAAA,CAAA;AAC7C,OAAO,MAAA;QACLD,OAAA,GAAUjB,2BAAQ,CAAAQ,UAAU,CAAI,GAAA,EAAA,GAAKA,UAAW,CAAA,CAAA,CAAA,CAAA;AAClD,OAAA;MACOD,MAAA,CAAAU,OAAA,EAASD,OAAQ,CAAAP,IAAA,EAAM,OAAO,CAAA,CAAA;MACrC7D,OAAA,CAAQK,KAAQ,GAAAuD,UAAA,CAAA;KAClB,CAAA;AAEM,IAAA,IAAAa,cAAA,GAAiB,SAAjBA,cAAA,CAAkBb,UAAqC,EAAA;MAC3D3D,QAAA,CAASI,KAAQ,GAAAuD,UAAA,CAAA;KACnB,CAAA;AAEA,IAAA,IAAMc,eAAe,SAAfA,eAAqB;AACVhD,MAAAA,cAAA,EAAA,CAAA;KACjB,CAAA;AAEM,IAAA,IAAAiD,WAAA,GAAc,SAAdA,WAAA,CAAetE,MAA+B,EAAA;AAAA,MAAA,IAAA,iBAAA,CAAA;AAE9C,MAAA,IAAA,CAACY,aAAaZ,KAAO,EAAA;AAAA,QAAA,IAAA,gBAAA,CAAA;QACvBrB,CAAAA,gBAAAA,GAAAA,MAAM,CAAA4F,QAAA,MAAN5F,IAAAA,IAAAA,gBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAAA,CAAAA,IAAAA,CAAAA,MAAM,EAAW6F,MAAOxE,CAAAA,MAAK,CAAC,CAAA,CAAA;AAC9B,QAAA,OAAA;AACF,OAAA;MACAiB,kBAAA,CAAmBjB,MAAK,CAAA,CAAA;MACxB,IAAI,CAACA,MAAO,EAAA;QACVN,YAAA,CAAaM,KAAQ,GAAA,IAAA,CAAA;AACd,QAAA,OAAA,IAAA,CAAA;AACT,OAAA;AACaN,MAAAA,YAAA,CAAAM,KAAA,GAAQ,UAACwD,IAAwC,EAAA;AACxD,QAAA,IAAAiB,8BAAA,CAAW9F,MAAM,CAAA+F,MAAM,CAAG,EAAA;AAC5B,UAAA,IAAMA,SAAqC/F,MAAM,CAAA+F,MAAA,CAAOF,MAAOxE,CAAAA,MAAK,GAAGwD,IAAI,CAAA,CAAA;AACvE,UAAA,IAAAmB,6BAAA,CAAUD,MAAM,CAAG,EAAA;AACd,YAAA,OAAAA,MAAA,CAAA;AACT,WAAA;AACF,SAAA;AACA,QAAA,OAAOlB,KAAKjC,IAAK,CAAAuB,SAAA,CAAU9C,KAAO,CAAA,CAAA4E,OAAA,CAAQ5E,MAAK,CAAK,IAAA,CAAA,CAAA;OACtD,CAAA;MACArB,CAAAA,iBAAAA,GAAAA,MAAM,CAAA4F,QAAA,MAAN5F,IAAAA,IAAAA,iBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,iBAAAA,CAAAA,IAAAA,CAAAA,MAAM,EAAW6F,MAAOxE,CAAAA,MAAK,CAAC,CAAA,CAAA;KAChC,CAAA;IAEM,IAAA6E,SAAA,GAAY,SAAZA,SAAA,CAAa7E,MAAAA,EAAwB+D,OAAmC,EAAA;AAAA,MAAA,IAAA,gBAAA,CAAA;AACtE,MAAA,IAAEN,OAAS,GAAUM,OAAA,CAAnBN,OAAS;QAAAqB,KAAA,GAAUf,OAAA,CAAVe,KAAA,CAAA;MACjB,IAAI,CAAC,YAAc,EAAA,WAAW,CAAE,CAAAC,QAAA,CAAStB,OAAO,CAAG,EAAA;AACjDjB,QAAAA,2BAAA,CAAQhC,gBAAgBR,KAAK,CAAA,IAAMQ,gBAAgBR,KAAiC,CAAAgF,MAAA,CAAOF,OAAO,CAAC,CAAA,CAAA;AACrG,OAAA;AACAnG,MAAAA,CAAAA,gBAAAA,GAAAA,MAAAA,CAAMsG,QAAW,MAAjBtG,IAAAA,IAAAA,gBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAiB;AAAEqB,QAAAA,KAAAA,EAAAA,MAAAA;AAAOuB,QAAAA,IAAM,EAAA,IAAA;AAAMsC,QAAAA,CAAG,EAAAE,OAAA,IAAYA,OAAQ,CAAAF,CAAAA;AAAiB,OAAC,CAAA,CAAA;MACxEP,MAAA,CAAA9C,eAAA,CAAgBR,KAAO,EAAA,IAAA,EAAMyD,OAAqC,CAAA,CAAA;KAC3E,CAAA;AAEA,IAAA,IAAMpC;UAAiB,KAAA,GAAAF,qCAAA,eAAAC,uCAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;AAAA,QAAA,OAAAA,uCAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,UAAA,OAAA,CAAA,EAAA;AAAA,YAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;gBAAA,OACfZ,eAAgB,CAAAR,KAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAElB,gBAAA,IAAA,CAACrB,OAAM2C,QAAU,EAAA;kBACnB,IAAId,eAAgB,CAAAR,KAAA,IAASQ,eAAgB,CAAAR,KAAA,KAAU,CAAG,EAAA;AACxDH,oBAAAA,QAAA,CAASG,QAAQkF,iBAAkB,EAAA,CAAA;AACrC,mBAAO,MAAA;oBACLrF,QAAA,CAASG,KAAQ,GAAA,EAAA,CAAA;AACnB,mBAAA;AACF,iBAAA,MAAA,IAAWrB,OAAM2C,QAAU,EAAA;AACrB,kBAAA,IAAAkB,2BAAA,CAAQhC,eAAgB,CAAAR,KAAK,CAAG,EAAA;AAClCH,oBAAAA,QAAA,CAASG,QAAQmF,mBAAoB,EAAA,CAAA;AACvC,mBAAO,MAAA;oBACLtF,QAAA,CAASG,QAAQ,EAAC,CAAA;AACpB,mBAAA;AACF,iBAAO,MAAA;kBACLH,QAAA,CAASG,KAAQ,GAAA,IAAA,CAAA;AACnB,iBAAA;AAAA,cAAA,KAAA,CAAA,CAAA;AAAA,cAAA,KAAA,KAAA;AAAA,gBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA;AAAA,SAAA,EAAA,QAAA,CAAA,CAAA;OACF,CAAA,CAAA,CAAA;AAAA,MAAA,OAAA,SAlBMqB;;;KAkBN,EAAA,CAAA;AAEA,IAAA,IAAM6D,oBAAoB,SAApBA,oBAA0B;AAAA,MAAA,IAAA,iBAAA,CAAA;AAC9B,MAAA,IAAMjB,YAAY5B,aAAc,CAAArC,KAAA,GAASQ,eAAgB,CAAAR,KAAA,CAAuBA,QAAQQ,eAAgB,CAAAR,KAAA,CAAA;MACxG,IAAIR,OAAQ,CAAAQ,KAAA,IAAUrB,CAAAA,iBAAAA,GAAAA,MAAM,CAAAqE,SAAA,MAAA,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,IAANrE,iBAA+ByG,CAAAA,IAAM,EAAA;AACzD,QAAA,IAAI,CAACrC,2BAAA,CAAQpE,MAAM,CAAA4C,IAAI,CAAG,EAAA;UACxB,IAAMiC,KAAO,GAAAhE,OAAA,CAAQQ,KAAM,CAAAqF,OAAA,CAAQpB,SAAS,CAAA,CAAA;AAC5C,UAAA,IAAIT,KAAM,EAAA;YACD,OAAA;cAAE3B,KAAO2B,EAAAA,KAAAA,CAAKjC,IAAK,CAAAuB,SAAA,CAAU9C;AAAQA,cAAAA,KAAOwD,EAAAA,KAAAA,CAAKjC,IAAK,CAAA2B,SAAA,CAAUlD,KAAO,CAAA;aAAA,CAAA;AAChF,WAAA;AACF,SAAA;QACA,OAAO;AAAE6B,UAAAA,KAAA,EAAOoC,SAAW;AAAAjE,UAAAA,KAAA,EAAOiE,SAAAA;SAAU,CAAA;AAC9C,OAAA;MACA,IAAMT,IAAO,GAAAU,WAAA,CAAYvF,MAAM,CAAA4C,IAAA,EAAM0C,SAAS,CAAA,CAAA;MAC9C,IAAI,CAACT,IAAM,EAAA;QACT,OAAO;AAAE3B,UAAAA,KAAA,EAAOoC,SAAW;AAAAjE,UAAAA,KAAA,EAAOiE,SAAAA;SAAU,CAAA;AAC9C,OAAA;AACO,MAAA,OAAAT,IAAA,CAAA;KACT,CAAA;AAEA,IAAA,IAAM2B,sBAAsB,SAAtBA,sBAA4B;MAChC,OAAQ3E,eAAgB,CAAAR,KAAA,CAAiCyC,GAAI,CAAA,UAACzC,MAAU,EAAA;AAAA,QAAA,IAAA,kBAAA,CAAA;QACtE,IAAMiE,SAAY,GAAA5B,aAAA,CAAcrC,KAASA,GAAAA,MAAAA,CAAuBA,KAAQA,GAAAA,MAAAA,CAAAA;QACxE,IAAIR,OAAQ,CAAAQ,KAAA,IAAUrB,CAAAA,kBAAAA,GAAAA,MAAM,CAAAqE,SAAA,MAAA,IAAA,IAAA,kBAAA,KAAA,KAAA,CAAA,IAANrE,kBAA+ByG,CAAAA,IAAM,EAAA;AACzD,UAAA,IAAI,CAACrC,2BAAA,CAAQpE,MAAM,CAAA4C,IAAI,CAAG,EAAA;YACxB,IAAMiC,KAAO,GAAAhE,OAAA,CAAQQ,KAAM,CAAAqF,OAAA,CAAQpB,SAAS,CAAA,CAAA;AAC5C,YAAA,IAAIT,KAAM,EAAA;cACD,OAAA;gBAAE3B,KAAO2B,EAAAA,KAAAA,CAAKjC,IAAK,CAAAuB,SAAA,CAAU9C;AAAQA,gBAAAA,KAAOwD,EAAAA,KAAAA,CAAKjC,IAAK,CAAA2B,SAAA,CAAUlD,KAAO,CAAA;eAAA,CAAA;AAChF,aAAA;AACF,WAAA;UACA,OAAO;AAAE6B,YAAAA,KAAA,EAAOoC,SAAW;AAAAjE,YAAAA,KAAA,EAAOiE,SAAAA;WAAU,CAAA;AAC9C,SAAA;QACA,IAAMT,IAAO,GAAAU,WAAA,CAAYvF,MAAM,CAAA4C,IAAA,EAAM0C,SAAS,CAAA,CAAA;QAC9C,IAAI,CAACT,IAAM,EAAA;UACT,OAAO;AAAE3B,YAAAA,KAAA,EAAOoC,SAAW;AAAAjE,YAAAA,KAAA,EAAOiE,SAAAA;WAAU,CAAA;AAC9C,SAAA;AACO,QAAA,OAAAT,IAAA,CAAA;AACT,OAAC,CAAA,CAAA;KACH,CAAA;IACM,IAAAU,WAAA,GAAc,SAAdA,WAAA,CAAe3C,IAAA,EAA6B+D,WAAyD,EAAA;AACzG,MAAA,KAAA,IAASC,IAAI,CAAG,EAAAC,GAAA,GAAMjE,KAAKsB,MAAQ,EAAA0C,CAAA,GAAIC,KAAKD,CAAK,EAAA,EAAA;AAAA,QAAA,IAAA,OAAA,CAAA;QAC/C,IAAIhE,IAAK,CAAAgE,CAAA,CAAA,CAAGrC,SAAU,CAAAlD,KAAA,CAAA,KAAWsF,WAAa,EAAA;UACrC,OAAA;YAAEzD,KAAO,EAAAN,IAAA,CAAKgE,CAAG,CAAA,CAAAzC,SAAA,CAAU9C;YAAQA,KAAO,EAAAuB,IAAA,CAAKgE,CAAG,CAAA,CAAArC,SAAA,CAAUlD,KAAO,CAAA;WAAA,CAAA;AAC5E,SAAA;QACI,IAAAuB,CAAAA,OAAAA,GAAAA,IAAA,CAAKgE,CAAK,CAAA,MAAA,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,IAAV,QAAUpC,YAAA,CAAanD,KAAQ,CAAA,EAAA;AAAA,UAAA,IAAA,QAAA,CAAA;AACjC,UAAA,IAAMyF,SAASvB,WAAY,CAAA3C,CAAAA,QAAAA,GAAAA,IAAA,CAAKgE,CAAK,CAAA,MAAV,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAUpC,YAAA,CAAanD,QAAQsF,WAAW,CAAA,CAAA;AACjE,UAAA,IAAA,CAACI,yBAAM,CAAAD,MAAM,CAAG,EAAA;AACX,YAAA,OAAAA,MAAA,CAAA;AACT,WAAA;AACF,SAAA;AACF,OAAA;AACO,MAAA,OAAA,IAAA,CAAA;KACT,CAAA;AAEA,IAAA,IAAMjE,eAAe,SAAfA,eAAqB;MACzB1B,OAAA,CAAQE,KAAS,IAAA,CAAA,CAAA;KACnB,CAAA;IAEA,IAAM2F,UAAa,GAAA,SAAbA,UAAa,GAAA;AAAA,MAAA,OAAAC,kBAAA,CAAAC,eAAA,CAAAC,eAAA,EAAAC,cAAA,CAAA;AAAA,QAAA,KAAA,EAEVvG,OAAA;QAAA,KAEAM,EAAAA,OAAA,CAAQE,KACb;QAAA,OAAWuC,EAAAA,sCAAAA,CAAAA,OAAQ,CAAAvC,KAAK,CAAA;AAAA,QAAA,OAAA,EAAA,IAAA;QAAA,MAElBrB,EAAAA,MAAAA,CAAM4C,IACZ;QAAA,WAAW,EAAA,CAAC5C,MAAAA,CAAM2C,QAClB;QAAA,WAAW3C,EAAAA,OAAM2C,QACjB;AAAA,QAAA,UAAA,EAAUG,SAAU,CAAAzB,KAAA,IAAS2C,kBAAmB,CAAA3C,KAAA;QAAA,MAC1CrB,EAAAA,MAAAA,CAAMyD,IACZ;QAAA,QAAQ1C,EAAAA,YAAa,CAAAM,KAAA;QAAA,MACf,EAAA,CAACN,YAAa,CAAAM,KAAA;QAAA,SACXL,EAAAA,OAAQ,CAAAK,KAAA;QAAA,UACPJ,EAAAA,QAAA,CAASI,KACnB;QAAA,gBAAgBrB,EAAAA,MAAM,CAAA2C,QAAA;AAAA,QAAA,UAAA,EACZwC,cAAA;AAAA,QAAA,UAAA,EACAK,cAAA;AAAA,QAAA,UAAA,EACAC,cAAA;AAAA,QAAA,QAAA,EACFC,YAAA;AAAA,QAAA,mBAAA,EAAA,IAAA;OAQH1F,EAAAA,OAAMqE,SACb,CAPW,EAAA;AACPgD,QAAAA,KAAA,EAAO,SAAA,KAAA,GAAA;UAAA,OACLhH,kBAAA,CAAmB,OAAS,EAAA;YAC1BiH,WAAA,EAAAJ,eAAA,CAAA,KAAA,EAAA;cAAA,OAA4B3G,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,YAAYc,KAAwB,EAAA,gBAAA,CAAA;AAAA,aAAA,EAAA,CAAAX,YAAA,CAAaW,KAAM,CAAAgG,KAAA,CAAA,CAAA;AACrF,WAAC,CAAA,CAAA;AAAA,SAAA;AACL,OAAA,CAxBQ,EAAA,CAAA,CAAAE,SAAA,EAAA,CAACvH,MAAM,CAAAwH,OAAA,CAAA,CAAA,CAAA,CAAA;KA0BjB,CAAA;IAGI,IAAAC,gBAAA,GAAmB,SAAnBA,gBAAA,GAAA;AAAA,MAAA,IAAA,KAAA,CAAA;AAAA,MAAA,OAAAP,eAAA,CAAAQ,qCAAA,EAAA;QAAA,UAEQzF,EAAAA,aAAaZ,KACvB;QAAA,UAAUrB,EAAAA,MAAM,CAAAgD,QAAA;AAAA,QAAA,kBAAA,GAAA,KAAA,GAAA,EAAA,EAAA2E,mCAAA,CAAA,KAAA,EAAA,EAAA,CAAA,MAAA,CAEVpH,WAAY,CAAAc,KAAA,EAAA,wBAAA,CAAA,EAAgCY,YAAa,CAAAZ,KAAA,CACzDd,EAAAA,mCAAAA,CAAAA,KAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,WAAY,CAAAc,KAAA,EAA8BrB,sBAAAA,CAAAA,EAAAA,MAAM,CAAAgD,QAAA,CAAA,EAAA,KAAA,CAAA;AAAA,OAAA,EAAA,IAAA,CAAA,CAAA;KAExD,CAAA;IAGK,OAAA,YAAA;AAAA,MAAA,OAAAkE,eAAA,CAAAU,6BAAA,EAAAR,cAAA,CAAA;QAAA,OAEO7G,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,WAAY,CAAAc,KAAA,EAAA,cAAA,CAAA;QAAA,OACfH,EAAAA,QAAA,CAASG,KAChB;QAAA,YAAYY,EAAAA,YAAa,CAAAZ,KAAA,GAAQgB,gBAAgBhB,KAAQ,GAAA,EAAA;QAAA,cAC3CY,EAAAA,YAAA,CAAaZ,KAC3B;QAAA,UAAUyB,EAAAA,SAAU,CAAAzB,KAAA;QAAA,UACVrB,EAAAA,MAAAA,CAAM2C,QAChB;QAAA,SAAS3C,EAAAA,MAAM,CAAAwH,OAAA;QAAA,WACJxH,EAAAA,MAAM,CAAA6H,SAAA;QAAA,WACN7H,EAAAA,MAAAA,CAAM8H,SACjB;QAAA,YAAY9H,EAAAA,MAAM,CAAA+H,UAAA;QAAA,UACR/H,EAAAA,MAAAA,CAAMgI,QAChB;QAAA,aAAa/E,EAAAA,gBAAiB,CAAA5B,KAAA;QAAA,YAClBrB,EAAAA,MAAM,CAAAiI,UAAA,IAAcnC,8BAAW9F,CAAAA,MAAAA,CAAM+F,MAAM,CAAA;QAAA,iBACtC/F,EAAAA,MAAAA,CAAMkI,eACvB;QAAA,iBAAiBlI,EAAAA,MAAM,CAAAmI,cAAA;AAAA,QAAA,YAAA,EAAA,aAAA,CAAA;UAErBC,kBAAkBhF,UAAW,CAAA/B,KAAAA;SACzBrB,EAAAA,MAAM,CAAAqI,UAAA,CAAA;AAAA,QAAA,YAAA,EAAA,aAAA,CAAA;UAGV5E,MAAMzD,MAAM,CAAAyD,IAAAA;SACRzD,EAAAA,MAAM,CAAAsI,UAAA,CAAA;QAAA,eAEG,EAAA;UACb7E,MAAMzD,MAAM,CAAAyD,IAAAA;;;AAGZ8E,UAAAA,QAAU,EAAA,GAAA;SACNvI,EAAAA,MAAM,CAAAwI,QAAA,CAAA;QAAA,OAEL,EAAA,SAAA,KAAA,GAAA;UAAA,OAAMrI,cAAA,CAAe,YAAY,CACxC,CAAA;AAAA,SAAA;QAAA,YAAY,EAAA,SAAA,UAAA,GAAA;AAAA,UAAA,OAAMsH,gBAAA;;mBACT1C,KAAA;AAAA,QAAA,QAAA,EACD,SAAC1D,MAAAA,CAAAA,QAAmB+D,OAA+B,EAAA;AAAA,UAAA,IAAA,cAAA,CAAA;AACzDpF,UAAAA,CAAAA,cAAAA,GAAAA,MAAAA,CAAMyI,YAANzI,IAAAA,IAAAA,cAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAe;AAAEqB,YAAAA,KAAA,EAAAA;YAAO6D,CAAG,EAAAE,OAAA,CAAQF,CAAAA;AAAE,WAAC,CAAA,CAAA;SAExC;AAAA,QAAA,SAAA,EAAS,SAAC7D,OAAAA,CAAAA,MAAAA,EAAmB+D,OAA+B,EAAA;AAAA,UAAA,IAAA,eAAA,CAAA;AAC1DpF,UAAAA,CAAAA,eAAAA,GAAAA,MAAAA,CAAM0I,aAAN1I,IAAAA,IAAAA,eAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,eAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAgB;AAAEqB,YAAAA,KAAA,EAAAA;YAAO6D,CAAG,EAAAE,OAAA,CAAQF,CAAAA;AAAE,WAAC,CAAA,CAAA;SAEzC;QAAA,cAAc,EAAA,SAAA,YAAA,GAAA;AAAA,UAAA,IAAA,KAAA,CAAA;UAAA,OACZ/E,cAAA,CAAe,cAAgB,EAAA;AAC7BwI,YAAAA,MAAA,EAAQ3I,OAAM2C,QACV,GAAA;cACEtB,OAAOH,QAAS,CAAAG,KAAA;AAChBuH,cAAAA,OAAA,EAAS,SAAA,OAAA,CAACvH,MAAAA,EAAwB+D,OAAmC,EAAA;AACnEc,gBAAAA,SAAA,CAAU7E,QAAO+D,OAAO,CAAA,CAAA;AAC1B,eAAA;AACF,aACA,GAAA;AACE/D,cAAAA,KAAA,EAAOH,QAAS,CAAAG,KAAA,KAAA,KAAA,GAAA,EAAA,EAAAsG,mCAAA,CAAA,KAAA,EAAYxD,SAAU,CAAA9C,KAAA,EAAQ,EAAI,8CAACkD,SAAU,CAAAlD,KAAA,EAAQ,KAAU,CAAA,CAAA,EAAA,KAAA,CAAA;AACjF,aAAA;AACN,WAAC;;yBAuBYsE,WACf;AAAA,QAAA,aAAA,EAAaO,SACb;AAAA,QAAA,sBAAA,EAAsB,8BAAC2C,KAAA,EAAA;UAAA,OAAmB3G,eAAgB,CAAA2G,KAAK,CAC1D7I,CAAAA;AAAAA,SAAAA;OAAAA,EAAAA,MAAAA,CAAM8I,gBACb,CAzBW,EAAA;AACPC,QAAAA,KAAO,EAAA,SAAA,KAAA,GAAA;AAAA,UAAA,OAAA7B,eAAA,CAAA,KAAA,EAAA;YAAA,OAEI,EAAA,CAAA,EAAA,CAAA,MAAA,CACF3G,WAAY,CAAAc,KAAA,EAAA,yBAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CACZd,WAAY,CAAAc,KAAA,EAAA,gCAAA,CAAA,CAAA,MAAA,CAAsCgC,iBAAkB,CAAAhC,KAAA,CAAA,CAAA;AACzE,WAAA,EAAA,CAAA4F,kBAAA,CAAAC,eAAA,CAAA,GAAA,EAAA;AAAA,YAAA,OAAA,EAIS,WAAI3G,YAAYc,KAA6B,EAAGd,sBAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,YAAYc,KAAmC,EAAA,8BAAA,CAAA,CAAA;WAErGhB,EAAAA,CAAAA,mBAAmB,aAAe,EAAA;YACjCiH,WAAA,EAAAJ,eAAA,CAAA,KAAA,EAAA;cAAA,OAA4B3G,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,YAAYc,KAAwB,EAAA,gBAAA,CAAA;AAAA,aAAA,EAAA,CAAAX,YAAA,CAAaW,KAAM,CAAA2H,WAAA,CAAA,CAAA;AACrF,WAAC,kBALOhJ,OAAMwH,OAAW,IAAA,CAAC1E,UAAUzB,KACpC,CAMD2F,CAAAA,CAAAA,EAAAA,UAAW,EAAA,CAAA,CAAA,CAAA;SAdb;QAiBHmB,gBAAgBjI,KAAM,CAAAiI,cAAAA;OAExB,CAAA,CAAA;KAIF,CAAA;AAEJ,GAAA;AACF,CAAC,CAAA;;;;"}