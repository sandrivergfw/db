/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var badge_props = require('./props.js');
var hooks_tnode = require('../hooks/tnode.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _Badge = vue.defineComponent({
  name: "TBadge",
  props: _objectSpread({}, badge_props["default"]),
  setup: function setup(props2) {
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var content = vue.computed(function () {
      if (props2.dot) return "";
      if (typeof props2.count === "function") {
        return renderTNodeJSX("count");
      }
      if (Number.isNaN(Number(props2.count))) {
        return props2.count;
      }
      var count = Number(props2.count);
      return count > props2.maxCount ? "".concat(props2.maxCount, "+") : count;
    });
    var renderChildren = function renderChildren() {
      return renderTNodeJSX("default");
    };
    var getOffset = function getOffset() {
      if (!props2.offset) return {};
      var _props2$offset = _slicedToArray__default["default"](props2.offset, 2),
        xOffset = _props2$offset[0],
        yOffset = _props2$offset[1];
      xOffset = Number.isNaN(Number(xOffset)) ? xOffset : "".concat(xOffset, "px");
      yOffset = Number.isNaN(Number(yOffset)) ? yOffset : "".concat(yOffset, "px");
      return {
        xOffset: xOffset,
        yOffset: yOffset
      };
    };
    var _useConfig = configProvider_useConfig.useConfig("classPrefix"),
      classPrefix = _useConfig.classPrefix;
    var name = "".concat(classPrefix.value, "-badge");
    var isHidden = vue.computed(function () {
      return !props2.showZero && (content.value === 0 || content.value === "0");
    });
    var badgeClassNames = vue.computed(function () {
      var _ref;
      return [(_ref = {}, _defineProperty__default["default"](_ref, "".concat(name, "--dot"), !!props2.dot), _defineProperty__default["default"](_ref, "".concat(name, "--circle"), !props2.dot && props2.shape === "circle"), _defineProperty__default["default"](_ref, "".concat(name, "--round"), props2.shape === "round"), _defineProperty__default["default"](_ref, "".concat(classPrefix.value, "-size-s"), props2.size === "small"), _ref)];
    });
    var inlineStyle = vue.computed(function () {
      var _getOffset = getOffset(),
        xOffset = _getOffset.xOffset,
        yOffset = _getOffset.yOffset;
      return {
        background: "".concat(props2.color),
        right: xOffset,
        top: yOffset
      };
    });
    return {
      content: content,
      inlineStyle: inlineStyle,
      badgeClassNames: badgeClassNames,
      isHidden: isHidden,
      renderChildren: renderChildren,
      name: name
    };
  },
  render: function render() {
    return vue.createVNode("div", vue.mergeProps({
      "class": this.name
    }, this.$attrs), [this.renderChildren(), this.isHidden ? null : vue.createVNode("sup", {
      "class": this.badgeClassNames,
      "style": this.inlineStyle
    }, [this.content])]);
  }
});

exports["default"] = _Badge;
//# sourceMappingURL=badge.js.map
