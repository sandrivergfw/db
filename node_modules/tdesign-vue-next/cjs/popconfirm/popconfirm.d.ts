import { PopconfirmVisibleChangeContext } from './type';
declare const _default: import("vue").DefineComponent<{
    cancelBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("..").TdButtonProps>;
        default: string;
    };
    confirmBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("..").TdButtonProps>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup/type").TdPopupProps>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "warning" | "danger">;
        default: "default" | "warning" | "danger";
        validator(val: "default" | "warning" | "danger"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    onCancel: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onConfirm: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, context?: PopconfirmVisibleChangeContext) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    cancelBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("..").TdButtonProps>;
        default: string;
    };
    confirmBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("..").TdButtonProps>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup/type").TdPopupProps>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "warning" | "danger">;
        default: "default" | "warning" | "danger";
        validator(val: "default" | "warning" | "danger"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    onCancel: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onConfirm: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, context?: PopconfirmVisibleChangeContext) => void>;
}>>, {
    visible: boolean;
    modelValue: boolean;
    placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    destroyOnClose: boolean;
    showArrow: boolean;
    defaultVisible: boolean;
    theme: "default" | "warning" | "danger";
    cancelBtn: string;
    confirmBtn: string;
}>;
export default _default;
