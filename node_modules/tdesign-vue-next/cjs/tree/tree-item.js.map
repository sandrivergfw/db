{"version":3,"file":"tree-item.js","sources":["../../src/tree/tree-item.tsx"],"sourcesContent":["import { computed, h, defineComponent, ref, PropType, inject, reactive } from 'vue';\nimport isFunction from 'lodash/isFunction';\nimport { CaretRightSmallIcon as TdCaretRightSmallIcon } from 'tdesign-icons-vue-next';\nimport TCheckBox from '../checkbox';\nimport TLoading from '../loading';\n\nimport { getTNode } from './util';\nimport { TypeEventState, TreeNodeModel } from './interface';\nimport { useCLASSNAMES, injectKey } from './constants';\nimport TreeNode from '../_common/js/tree/tree-node';\n\nimport useRipple from '../hooks/useRipple';\nimport { useConfig, usePrefixClass } from '../hooks/useConfig';\nimport { useGlobalIcon } from '../hooks/useGlobalIcon';\n\nimport useDraggable from './hooks/useDraggable';\n\nexport default defineComponent({\n  name: 'TTreeNode',\n  props: {\n    node: {\n      type: Object as PropType<TreeNode>,\n    },\n    onClick: Function as PropType<(e: TypeEventState) => void>,\n    onChange: Function as PropType<(e: TypeEventState) => void>,\n    onDrop: Function as PropType<(node: TreeNode, val: number, e: DragEvent) => void>,\n    onDragStart: Function as PropType<(node: TreeNode, e: DragEvent) => void>,\n    expandOnClickNode: Boolean,\n  },\n  setup(props) {\n    const treeScope = inject(injectKey);\n    const isClicked = ref(false);\n    const label = ref<HTMLElement>();\n    useRipple(label);\n\n    const CLASS_NAMES = useCLASSNAMES();\n\n    const { globalConfig } = useConfig('tree');\n    const classPrefix = usePrefixClass();\n    const { CaretRightSmallIcon } = useGlobalIcon({ CaretRightSmallIcon: TdCaretRightSmallIcon });\n\n    const handleClick = (evt: MouseEvent) => {\n      const { node, expandOnClickNode } = props;\n      const state: TypeEventState = {\n        mouseEvent: evt,\n        event: evt,\n        node,\n        path: node.getPath(),\n      };\n\n      const srcTarget = evt.target as HTMLElement;\n      const isBranchTrigger =\n        node.children &&\n        props.expandOnClickNode &&\n        (srcTarget.className === `${classPrefix.value}-checkbox__input` || srcTarget.tagName.toLowerCase() === 'input');\n      // checkbox 上也有 click 事件, 避免重复的 click 事件触发\n      if (isClicked.value || isBranchTrigger) return;\n\n      // 处理expandOnClickNode时与checkbox的选中的逻辑冲突\n      if (\n        expandOnClickNode &&\n        node.children &&\n        srcTarget.className?.indexOf?.(`${classPrefix.value}-tree__label`) !== -1\n      )\n        evt.preventDefault();\n\n      isClicked.value = true;\n      setTimeout(() => {\n        isClicked.value = false;\n      });\n\n      props.onClick?.(state);\n    };\n\n    const nodeRef = ref<HTMLElement>();\n    const { isDragOver, isDragging, dropPosition, setDragStatus } = useDraggable(\n      reactive({ nodeRef, node: props.node }),\n    );\n\n    const handleDragStart = (evt: DragEvent) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      setDragStatus('dragStart', evt);\n\n      try {\n        // ie throw error firefox-need-it\n        evt.dataTransfer?.setData('text/plain', '');\n      } catch (e) {\n        // empty\n      }\n      props.onDragStart?.(node, evt);\n    };\n\n    const handleDragEnd = (evt: DragEvent) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      setDragStatus('dragEnd', evt);\n    };\n\n    const handleDragOver = (evt: DragEvent) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      evt.preventDefault();\n      setDragStatus('dragOver', evt);\n    };\n\n    const handleDragLeave = (evt: DragEvent) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      setDragStatus('dragLeave', evt);\n    };\n\n    const handleDrop = (evt: DragEvent) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      evt.preventDefault();\n      setDragStatus('drop', evt);\n      props.onDrop?.(node, dropPosition.value, evt);\n    };\n\n    const handleChange = () => {\n      const { node } = props;\n      const event = new Event('change');\n      const state: TypeEventState = {\n        event,\n        node,\n      };\n      props.onChange?.(state);\n    };\n\n    const itemStyles = computed(() => {\n      const { level } = props.node;\n      const styles = `--level: ${level};`;\n      return styles;\n    });\n\n    const itemClassList = computed(() => {\n      const { node } = props;\n      const list = [];\n      list.push(CLASS_NAMES.value.treeNode);\n      list.push({\n        [CLASS_NAMES.value.treeNodeOpen]: node.expanded,\n        [CLASS_NAMES.value.actived]: node.isActivable() ? node.actived : false,\n        [CLASS_NAMES.value.disabled]: node.isDisabled(),\n      });\n      // 拖拽相关 class\n      list.push({\n        [CLASS_NAMES.value.treeNodeDraggable]: node.isDraggable(),\n        [CLASS_NAMES.value.treeNodeDragging]: isDragging.value,\n        [CLASS_NAMES.value.treeNodeDragTipTop]: isDragOver.value && dropPosition.value < 0,\n        [CLASS_NAMES.value.treeNodeDragTipBottom]: isDragOver.value && dropPosition.value > 0,\n        [CLASS_NAMES.value.treeNodeDragTipHighlight]: !isDragging.value && isDragOver.value && dropPosition.value === 0,\n      });\n      return list;\n    });\n\n    const renderLine = () => {\n      const { node } = props;\n      const { line, scopedSlots } = treeScope.value;\n      const iconVisible = !!treeScope.value.icon;\n\n      let lineNode = null;\n      if (line === true) {\n        if (scopedSlots?.line) {\n          lineNode = scopedSlots.line({\n            node: node?.getModel(),\n          });\n        } else if (node.parent && node.tree) {\n          const { vmIsLeaf, vmIsFirst, level } = node;\n\n          const lineClasses = [];\n\n          // 每个节点绘制抵达上一层级的折线\n          lineClasses.push(CLASS_NAMES.value.line);\n\n          // 叶子节点，折线宽度延长，因为没有 icon 呈现\n          // 任意节点，icon 不呈现时也是要延长折线宽度\n          if (vmIsLeaf || !iconVisible) {\n            lineClasses.push(CLASS_NAMES.value.lineIsLeaf);\n          }\n\n          // 分支首节点，到上一节点的折线高度要缩短，让位给 icon 呈现\n          // 如果 icon 隐藏了，则不必缩短折线高度\n          if (vmIsFirst && iconVisible) {\n            lineClasses.push(CLASS_NAMES.value.lineIsFirst);\n          }\n\n          // 如果节点的父节点，不是最后的节点\n          // 则需要绘制节点延长线\n          const shadowStyles: string[] = [];\n          const parents = node.getParents();\n          parents.pop();\n          parents.forEach((pNode: TreeNode, index: number) => {\n            if (!pNode.vmIsLast) {\n              shadowStyles.push(`calc(-${index + 1} * var(--space)) 0 var(--color)`);\n            }\n          });\n\n          const styles = {\n            '--level': level,\n            'box-shadow': shadowStyles.join(','),\n          };\n\n          lineNode = <span class={lineClasses} style={styles}></span>;\n        }\n      } else {\n        lineNode = getTNode(line, {\n          node,\n        });\n      }\n      return lineNode;\n    };\n\n    const renderIcon = () => {\n      const getFolderIcon = () => {\n        if (isFunction(globalConfig.value.folderIcon)) {\n          return globalConfig.value.folderIcon(h);\n        }\n        return <CaretRightSmallIcon />;\n      };\n\n      const { node } = props;\n      const { icon, scopedSlots } = treeScope.value;\n      let isDefaultIcon = false;\n\n      let iconNode = null;\n      if (icon === true) {\n        if (scopedSlots?.icon) {\n          iconNode = scopedSlots.icon({\n            node: node?.getModel(),\n          });\n        } else if (!node.vmIsLeaf) {\n          isDefaultIcon = true;\n          iconNode = getFolderIcon();\n          if (node.loading && node.expanded) {\n            iconNode = <TLoading />;\n          }\n        } else {\n          iconNode = '';\n        }\n      } else {\n        iconNode = getTNode(icon, {\n          node,\n        });\n      }\n      iconNode = (\n        <span\n          class={[\n            CLASS_NAMES.value.treeIcon,\n            CLASS_NAMES.value.folderIcon,\n            isDefaultIcon ? CLASS_NAMES.value.treeIconDefault : '',\n          ]}\n          trigger=\"expand\"\n          ignore=\"active\"\n        >\n          {iconNode}\n        </span>\n      );\n\n      return iconNode;\n    };\n\n    const renderLabel = () => {\n      const { node } = props;\n      const { label, scopedSlots, disableCheck } = treeScope.value;\n      const checkProps = treeScope.value.checkProps || {};\n\n      let labelNode = null;\n      if (label === true) {\n        if (scopedSlots.label) {\n          labelNode = scopedSlots.label({\n            node: node.getModel(),\n          });\n        } else {\n          labelNode = node.label || '';\n        }\n      } else {\n        labelNode = getTNode(label, {\n          node,\n        });\n      }\n\n      const labelClasses = [\n        CLASS_NAMES.value.treeLabel,\n        CLASS_NAMES.value.treeLabelStrictly,\n        {\n          [CLASS_NAMES.value.actived]: node.isActivable() ? node.actived : false,\n        },\n      ];\n\n      if (node.vmCheckable) {\n        let checkboxDisabled = false;\n        if (typeof disableCheck === 'function') {\n          checkboxDisabled = disableCheck(node as TreeNodeModel & TreeNode);\n        } else {\n          checkboxDisabled = !!disableCheck;\n        }\n        if (node.isDisabled()) {\n          checkboxDisabled = true;\n        }\n        const itemCheckProps = {\n          ...checkProps,\n          disabled: checkboxDisabled,\n        };\n\n        // 当开启expandOnClickNode且为非叶子节点时 不选中选项\n        const stopLabelTrigger = props.expandOnClickNode && node.children instanceof Array && node.children?.length > 0;\n\n        labelNode = (\n          <TCheckBox\n            class={labelClasses}\n            checked={node.checked}\n            indeterminate={node.indeterminate}\n            disabled={node.isDisabled()}\n            name={node.value.toString()}\n            onChange={() => handleChange()}\n            ignore=\"expand\"\n            stopLabelTrigger={stopLabelTrigger}\n            needRipple={true}\n            {...itemCheckProps}\n          >\n            {labelNode}\n          </TCheckBox>\n        );\n      } else {\n        const inner = <span style=\"position: relative\">{labelNode}</span>;\n        labelNode = node.isActivable() ? ( // 使用key是为了避免元素复用，从而顺利移除ripple指令\n          <span key=\"1\" ref=\"label\" class={labelClasses}>\n            {inner}\n          </span>\n        ) : (\n          <span key=\"2\" class={labelClasses}>\n            {inner}\n          </span>\n        );\n      }\n\n      return labelNode;\n    };\n\n    const renderOperations = () => {\n      const { node } = props;\n      const { operations, scopedSlots } = treeScope.value;\n\n      let opNode = null;\n      if (scopedSlots?.operations) {\n        opNode = scopedSlots.operations({\n          node: node?.getModel(),\n        });\n      } else {\n        opNode = getTNode(operations, {\n          node,\n        });\n      }\n      if (opNode) {\n        opNode = (\n          <span class={CLASS_NAMES.value.treeOperations} ignore=\"active,expand\">\n            {opNode}\n          </span>\n        );\n      }\n      return opNode;\n    };\n\n    return () => {\n      const { node } = props;\n\n      return (\n        <div\n          ref={nodeRef}\n          class={itemClassList.value}\n          data-value={node.value}\n          data-level={node.level}\n          style={itemStyles.value}\n          onClick={(evt: MouseEvent) => handleClick(evt)}\n          draggable={node.isDraggable()}\n          onDragstart={(evt: DragEvent) => handleDragStart(evt)}\n          onDragend={(evt: DragEvent) => handleDragEnd(evt)}\n          onDragover={(evt: DragEvent) => handleDragOver(evt)}\n          onDragleave={(evt: DragEvent) => handleDragLeave(evt)}\n          onDrop={(evt: DragEvent) => handleDrop(evt)}\n        >\n          {renderLine()}\n          {renderIcon()}\n          {renderLabel()}\n          {renderOperations()}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["_isVNode","defineComponent","name","props","node","type","Object","onClick","Function","onChange","onDrop","onDragStart","expandOnClickNode","Boolean","setup","treeScope","inject","injectKey","isClicked","ref","label","useRipple","CLASS_NAMES","useCLASSNAMES","useConfig","globalConfig","classPrefix","usePrefixClass","useGlobalIcon","CaretRightSmallIcon","TdCaretRightSmallIcon","handleClick","evt","state","mouseEvent","event","path","getPath","srcTarget","target","isBranchTrigger","children","className","value","tagName","toLowerCase","indexOf","preventDefault","setTimeout","nodeRef","useDraggable","reactive","isDragOver","isDragging","dropPosition","setDragStatus","handleDragStart","isDraggable","stopPropagation","dataTransfer","setData","e","handleDragEnd","handleDragOver","handleDragLeave","handleDrop","handleChange","Event","itemStyles","computed","level","styles","itemClassList","list","push","treeNode","_defineProperty","treeNodeOpen","expanded","actived","isActivable","disabled","isDisabled","treeNodeDraggable","treeNodeDragging","treeNodeDragTipTop","treeNodeDragTipBottom","treeNodeDragTipHighlight","renderLine","line","scopedSlots","iconVisible","icon","lineNode","getModel","parent","tree","vmIsLeaf","vmIsFirst","lineClasses","lineIsLeaf","lineIsFirst","shadowStyles","parents","getParents","pop","forEach","pNode","index","vmIsLast","join","_createVNode","getTNode","renderIcon","getFolderIcon","isFunction","folderIcon","h","isDefaultIcon","iconNode","loading","TLoading","treeIcon","treeIconDefault","renderLabel","disableCheck","checkProps","labelNode","labelClasses","treeLabel","treeLabelStrictly","vmCheckable","checkboxDisabled","itemCheckProps","stopLabelTrigger","Array","length","TCheckBox","_mergeProps","checked","indeterminate","toString","inner","renderOperations","operations","opNode","treeOperations"],"mappings":"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"}