import { TreeNode } from './tree-node';
import { TreeNodeValue, TypeIdMap, TypeTimer, TypeTargetNode, TypeTreeNodeData, TypeTreeStoreOptions, TypeTreeFilter, TypeTreeFilterOptions, TypeRelatedNodesOptions, TypeTreeEventState, TypeTreeNodeModel } from './types';
export declare class TreeStore {
    children: TreeNode[];
    nodes: TreeNode[];
    nodeMap: Map<TreeNodeValue, TreeNode>;
    config: TypeTreeStoreOptions;
    activedMap: TypeIdMap;
    updatedMap: TypeIdMap;
    checkedMap: TypeIdMap;
    expandedMap: TypeIdMap;
    filterMap: TypeIdMap;
    updateTimer: TypeTimer;
    shouldReflow: boolean;
    prevFilter: TypeTreeFilter;
    nullNodeModel: TypeTreeNodeModel;
    constructor(options: TypeTreeStoreOptions);
    initNullNodeModel(): void;
    setConfig(options: TypeTreeStoreOptions): void;
    getChildren(): TreeNode[];
    getNode(item: TypeTargetNode): TreeNode;
    getIndex(node: TreeNode): number;
    getParent(value: TypeTargetNode): TreeNode;
    getParents(value: TypeTargetNode): TreeNode[];
    getNodeIndex(value: TypeTargetNode): number;
    getNodes(item?: TypeTargetNode, options?: TypeTreeFilterOptions): TreeNode[];
    append(list: TypeTreeNodeData[]): void;
    reload(list: TypeTreeNodeData[]): void;
    parseNodeData(para: TreeNodeValue | TreeNode | TypeTreeNodeData, item: TypeTreeNodeData | TypeTreeNodeData[] | TreeNode): {
        node: TreeNode;
        data: TreeNode | TypeTreeNodeData | TypeTreeNodeData[];
    };
    appendNodes(para?: TypeTargetNode | TypeTreeNodeData, item?: TypeTreeNodeData | TreeNode): void;
    insertBefore(value: TypeTargetNode, item: TypeTreeNodeData): void;
    insertAfter(value: TypeTargetNode, item: TypeTreeNodeData): void;
    refreshNodes(): void;
    refreshState(): void;
    reflow(node?: TreeNode): void;
    updated(node?: TreeNode): void;
    getActived(map?: TypeIdMap): TreeNodeValue[];
    getActivedNodes(item?: TypeTargetNode): TreeNode[];
    replaceActived(list: TreeNodeValue[]): void;
    setActived(actived: TreeNodeValue[]): void;
    resetActived(): void;
    getExpanded(map?: TypeIdMap): TreeNodeValue[];
    replaceExpanded(list: TreeNodeValue[]): void;
    setExpanded(list: TreeNodeValue[]): void;
    setExpandedDirectly(list: TreeNodeValue[], expanded?: boolean): void;
    resetExpanded(): void;
    updateExpanded(list: TreeNodeValue[]): void;
    getChecked(map?: TypeIdMap): TreeNodeValue[];
    getCheckedNodes(item?: TypeTargetNode): TreeNode[];
    replaceChecked(list: TreeNodeValue[]): void;
    setChecked(list: TreeNodeValue[], isFromValueChange?: boolean): void;
    resetChecked(): void;
    updateAll(): void;
    remove(value?: TypeTargetNode): void;
    removeAll(): void;
    getRelatedNodes(list: TreeNodeValue[], options?: TypeRelatedNodesOptions): TreeNode[];
    emit(name: string, state?: TypeTreeEventState): void;
    lockFilterPathNodes(): void;
}
export default TreeStore;
