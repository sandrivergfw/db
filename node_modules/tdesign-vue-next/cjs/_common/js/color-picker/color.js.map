{"version":3,"file":"color.js","sources":["../../../../src/_common/js/color-picker/color.ts"],"sourcesContent":["import tinyColor from 'tinycolor2';\nimport { cmykInputToColor, rgb2cmyk } from './cmyk';\nimport {\n  parseGradientString, GradientColors, GradientColorPoint, isGradientColor\n} from './gradient';\n\nexport interface ColorObject {\n  alpha: number;\n  css: string;\n  hex: string;\n  hex8: string;\n  hsl: string;\n  hsla: string;\n  hsv: string;\n  hsva: string;\n  rgb: string;\n  rgba: string;\n  saturation: number;\n  value: number;\n  isGradient: boolean;\n  linearGradient?: string;\n}\n\ninterface ColorStates {\n  s: number;\n  v: number;\n  h: number;\n  a: number;\n}\n\ninterface GradientStates {\n  colors: GradientColorPoint[];\n  degree: number;\n  selectedId: string;\n  css?: string;\n}\n\nconst mathRound = Math.round;\nconst hsv2rgba = (states: ColorStates): tinyColor.ColorFormats.RGBA => tinyColor(states).toRgb();\nconst hsv2hsva = (states: ColorStates): tinyColor.ColorFormats.HSVA => tinyColor(states).toHsv();\nconst hsv2hsla = (states: ColorStates): tinyColor.ColorFormats.HSLA => tinyColor(states).toHsl();\n\n/**\n * 将渐变对象转换成字符串\n * @param object\n * @returns\n */\nexport const gradientColors2string = (object: GradientColors): string => {\n  const { points, degree } = object;\n  const colorsStop = points\n    .sort((pA, pB) => pA.left - pB.left)\n    .map((p) => `${p.color} ${Math.round(p.left * 100) / 100}%`);\n\n  return `linear-gradient(${degree}deg,${colorsStop.join(',')})`;\n};\n\n/**\n * 去除颜色的透明度\n * @param color\n * @returns\n */\nexport const getColorWithoutAlpha = (color: string) => tinyColor(color).setAlpha(1).toHexString();\n\n// 生成一个随机ID\nexport const genId = () => (1 + Math.random() * 4294967295).toString(16);\n\n/**\n * 生成一个渐变颜色\n * @param left\n * @param color\n * @returns\n */\nexport const genGradientPoint = (left: number, color: string): GradientColorPoint => ({\n  id: genId(),\n  left,\n  color,\n});\n\nexport class Color {\n  states: ColorStates = {\n    s: 100,\n    v: 100,\n    h: 100,\n    a: 1,\n  };\n\n  originColor: string;\n\n  isGradient: boolean;\n\n  gradientStates: GradientStates = {\n    colors: [],\n    degree: 0,\n    selectedId: null,\n    css: '',\n  };\n\n  constructor(input: string) {\n    this.update(input);\n  }\n\n  update(input: string) {\n    if (input === this.originColor) {\n      return;\n    }\n    this.originColor = input;\n    this.isGradient = false;\n    const gradientColors = parseGradientString(input);\n    let colorInput = input;\n    if (gradientColors) {\n      this.isGradient = true;\n      const object = gradientColors as GradientColors;\n      const points = object.points.map((c) => genGradientPoint(c.left, c.color));\n      this.gradientStates = {\n        colors: points,\n        degree: object.degree,\n        selectedId: points[0]?.id || null,\n      };\n      this.gradientStates.css = this.linearGradient;\n      colorInput = this.gradientSelectedPoint?.color;\n    }\n\n    this.updateStates(colorInput);\n  }\n\n  get saturation() {\n    return this.states.s;\n  }\n\n  set saturation(value) {\n    this.states.s = Math.max(0, Math.min(100, value));\n    this.updateCurrentGradientColor();\n  }\n\n  get value() {\n    return this.states.v;\n  }\n\n  set value(value) {\n    this.states.v = Math.max(0, Math.min(100, value));\n    this.updateCurrentGradientColor();\n  }\n\n  get hue() {\n    return this.states.h;\n  }\n\n  set hue(value) {\n    this.states.h = Math.max(0, Math.min(360, value));\n    this.updateCurrentGradientColor();\n  }\n\n  get alpha() {\n    return this.states.a;\n  }\n\n  set alpha(value) {\n    this.states.a = Math.max(0, Math.min(1, Math.round(value * 100) / 100));\n    this.updateCurrentGradientColor();\n  }\n\n  get rgb() {\n    const { r, g, b } = hsv2rgba(this.states);\n    return `rgb(${mathRound(r)}, ${mathRound(g)}, ${mathRound(b)})`;\n  }\n\n  get rgba() {\n    const {\n      r, g, b, a\n    } = hsv2rgba(this.states);\n    return `rgba(${mathRound(r)}, ${mathRound(g)}, ${mathRound(b)}, ${a})`;\n  }\n\n  get hsv() {\n    const { h, s, v } = this.getHsva();\n    return `hsv(${h}, ${s}%, ${v}%)`;\n  }\n\n  get hsva() {\n    const {\n      h, s, v, a\n    } = this.getHsva();\n    return `hsva(${h}, ${s}%, ${v}%, ${a})`;\n  }\n\n  get hsl() {\n    const { h, s, l } = this.getHsla();\n    return `hsl(${h}, ${s}%, ${l}%)`;\n  }\n\n  get hsla() {\n    const {\n      h, s, l, a\n    } = this.getHsla();\n    return `hsla(${h}, ${s}%, ${l}%, ${a})`;\n  }\n\n  get hex() {\n    return tinyColor(this.states).toHexString();\n  }\n\n  get hex8() {\n    return tinyColor(this.states).toHex8String();\n  }\n\n  get cmyk() {\n    const {\n      c, m, y, k\n    } = this.getCmyk();\n    return `cmyk(${c}, ${m}, ${y}, ${k})`;\n  }\n\n  get css() {\n    if (this.isGradient) {\n      return this.linearGradient;\n    }\n    return this.rgba;\n  }\n\n  get linearGradient() {\n    const { gradientColors, gradientDegree } = this;\n    return gradientColors2string({\n      points: gradientColors,\n      degree: gradientDegree,\n    });\n  }\n\n  get gradientColors() {\n    return this.gradientStates.colors;\n  }\n\n  set gradientColors(colors: GradientColorPoint[]) {\n    this.gradientStates.colors = colors;\n    this.gradientStates.css = this.linearGradient;\n  }\n\n  get gradientSelectedId() {\n    return this.gradientStates.selectedId;\n  }\n\n  set gradientSelectedId(id: string) {\n    if (id === this.gradientSelectedId) {\n      return;\n    }\n    this.gradientStates.selectedId = id;\n    this.updateStates(this.gradientSelectedPoint?.color);\n  }\n\n  get gradientDegree() {\n    return this.gradientStates.degree;\n  }\n\n  set gradientDegree(degree: number) {\n    this.gradientStates.degree = Math.max(0, Math.min(360, degree));\n    this.gradientStates.css = this.linearGradient;\n  }\n\n  get gradientSelectedPoint() {\n    const { gradientColors, gradientSelectedId } = this;\n    return gradientColors.find((color) => color.id === gradientSelectedId);\n  }\n\n  getFormatsColorMap() {\n    return {\n      HEX: this.hex,\n      CMYK: this.cmyk,\n      RGB: this.rgb,\n      RGBA: this.rgba,\n      HSL: this.hsl,\n      HSLA: this.hsla,\n      HSV: this.hsv,\n      HSVA: this.hsva,\n      CSS: this.css,\n    };\n  }\n\n  updateCurrentGradientColor() {\n    const { isGradient, gradientColors, gradientSelectedId } = this;\n    const { length } = gradientColors;\n    const current = this.gradientSelectedPoint;\n    if (!isGradient || length === 0 || !current) {\n      return false;\n    }\n    const index = gradientColors.findIndex((color) => color.id === gradientSelectedId);\n    const newColor = {\n      ...current,\n      color: this.rgba,\n    };\n    gradientColors.splice(index, 1, newColor);\n    this.gradientColors = gradientColors;\n    return this;\n  }\n\n  updateStates(input: string) {\n    const color = tinyColor(cmykInputToColor(input));\n    const hsva = color.toHsv();\n    this.states = hsva;\n  }\n\n  getRgba() {\n    const {\n      r, g, b, a\n    } = hsv2rgba(this.states);\n    return {\n      r: mathRound(r),\n      g: mathRound(g),\n      b: mathRound(b),\n      a,\n    };\n  }\n\n  getCmyk() {\n    const { r, g, b } = this.getRgba();\n    const [c, m, y, k] = rgb2cmyk(r, g, b);\n    return {\n      c: mathRound(c * 100),\n      m: mathRound(m * 100),\n      y: mathRound(y * 100),\n      k: mathRound(k * 100),\n    };\n  }\n\n  getHsva(): tinyColor.ColorFormats.HSVA {\n    let {\n      h, s, v, a\n    } = hsv2hsva(this.states);\n    h = mathRound(h);\n    s = mathRound(s * 100);\n    v = mathRound(v * 100);\n    a *= 1;\n    return {\n      h,\n      s,\n      v,\n      a,\n    };\n  }\n\n  getHsla(): tinyColor.ColorFormats.HSLA {\n    let {\n      h, s, l, a\n    } = hsv2hsla(this.states);\n    h = mathRound(h);\n    s = mathRound(s * 100);\n    l = mathRound(l * 100);\n    a *= 1;\n    return {\n      h,\n      s,\n      l,\n      a,\n    };\n  }\n\n  /**\n   * 判断输入色是否与当前色相同\n   * @param color\n   * @returns\n   */\n  equals(color: string): boolean {\n    return tinyColor.equals(this.rgba, color);\n  }\n\n  /**\n   * 校验输入色是否是一个有效颜色\n   * @param color\n   * @returns\n   */\n  static isValid(color: string): boolean {\n    if (parseGradientString(color)) {\n      return true;\n    }\n    return tinyColor(color).isValid();\n  }\n\n  static hsva2color(h: number, s: number, v: number, a: number) {\n    return tinyColor({\n      h, s, v, a\n    }).toHsvString();\n  }\n\n  static hsla2color(h: number, s: number, l: number, a: number) {\n    return tinyColor({\n      h, s, l, a\n    }).toHslString();\n  }\n\n  static rgba2color(r: number, g: number, b: number, a: number) {\n    return tinyColor({\n      r, g, b, a\n    }).toHsvString();\n  }\n\n  static hex2color(hex: string, a: number) {\n    const color = tinyColor(hex);\n    color.setAlpha(a);\n    return color.toHexString();\n  }\n\n  /**\n   * 对象转颜色字符串\n   * @param object\n   * @param format\n   * @returns\n   */\n  static object2color(object: any, format: string) {\n    if (format === 'CMYK') {\n      const {\n        c, m, y, k\n      } = object;\n      return `cmyk(${c}, ${m}, ${y}, ${k})`;\n    }\n    const color = tinyColor(object, {\n      format,\n    });\n    return color.toRgbString();\n  }\n\n  /**\n   * 是否是渐变色\n   * @param input\n   * @returns\n   */\n  static isGradientColor = (input: string) => !!isGradientColor(input);\n\n  /**\n   * 比较两个颜色是否相同\n   * @param color1\n   * @param color2\n   * @returns\n   */\n  static compare = (color1: string, color2: string): boolean => {\n    const isGradientColor1 = Color.isGradientColor(color1);\n    const isGradientColor2 = Color.isGradientColor(color2);\n    if (isGradientColor1 && isGradientColor2) {\n      const gradientColor1 = gradientColors2string(parseGradientString(color1) as GradientColors);\n      const gradientColor2 = gradientColors2string(parseGradientString(color2) as GradientColors);\n      return gradientColor1 === gradientColor2;\n    }\n    if (!isGradientColor1 && !isGradientColor2) {\n      return tinyColor.equals(color1, color2);\n    }\n    return false;\n  };\n}\n\nconst COLOR_OBJECT_OUTPUT_KEYS = [\n  'alpha',\n  'css',\n  'hex',\n  'hex8',\n  'hsl',\n  'hsla',\n  'hsv',\n  'hsva',\n  'rgb',\n  'rgba',\n  'saturation',\n  'value',\n  'isGradient',\n];\n\n/**\n * 获取对外输出的color对象\n * @param color\n * @returns\n */\nexport const getColorObject = (color: Color): ColorObject => {\n  if (!color) {\n    return null;\n  }\n  const colorObject = Object.create(null);\n  // eslint-disable-next-line no-return-assign\n  COLOR_OBJECT_OUTPUT_KEYS.forEach((key) => (colorObject[key] = color[key]));\n  if (color.isGradient) {\n    colorObject.linearGradient = color.linearGradient;\n  }\n  return colorObject;\n};\n\nexport default Color;\n"],"names":["mathRound","Math","round","hsv2rgba","states","tinyColor","toRgb","hsv2hsva","toHsv","hsv2hsla","toHsl","gradientColors2string","object","points","degree","colorsStop","sort","pA","pB","left","map","p","color","join","getColorWithoutAlpha","setAlpha","toHexString","genId","random","toString","genGradientPoint","id","Color","input","_classCallCheck","_defineProperty","s","v","h","a","colors","selectedId","css","update","_createClass","originColor","isGradient","gradientColors","parseGradientString","colorInput","c","gradientStates","linearGradient","gradientSelectedPoint","updateStates","value","max","min","updateCurrentGradientColor","r","g","b","getHsva","getHsla","l","toHex8String","getCmyk","m","y","k","rgba","gradientDegree","gradientSelectedId","find","HEX","hex","CMYK","cmyk","RGB","rgb","RGBA","HSL","hsl","HSLA","hsla","HSV","hsv","HSVA","hsva","CSS","length","current","index","findIndex","newColor","splice","cmykInputToColor","getRgba","rgb2cmyk","_slicedToArray","equals","isValid","toHsvString","toHslString","format","toRgbString","isGradientColor","color1","color2","isGradientColor1","isGradientColor2","gradientColor1","gradientColor2","COLOR_OBJECT_OUTPUT_KEYS","getColorObject","colorObject","Object","create","forEach","key"],"mappings":"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"}