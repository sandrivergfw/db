{"version":3,"file":"xhr.js","sources":["../../../../src/_common/js/upload/xhr.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport { UploadFile, XhrOptions } from './types';\nimport { getCurrentDate } from './utils';\n\nexport default function xhr({\n  method = 'POST',\n  action,\n  withCredentials = false,\n  headers = {},\n  data = {},\n  file,\n  files = [],\n  name = 'file',\n  useMockProgress = true,\n  formatRequest,\n  onError,\n  onProgress,\n  onSuccess,\n}: XhrOptions) {\n  // support files\n  const innerFiles: UploadFile[] = files || [];\n  let percent = 0;\n\n  // eslint-disable-next-line no-shadow\n  const xhr = new XMLHttpRequest();\n  if (withCredentials) {\n    xhr.withCredentials = true;\n  }\n\n  let timer1: NodeJS.Timeout;\n  let timer2: NodeJS.Timeout;\n  if (useMockProgress && files[0]?.status === 'progress') {\n    // 超过 500 毫秒再开启虚拟进度\n    const timer2 = setTimeout(() => {\n      // 只有真实进度一直不存在时才需要模拟进度\n      timer1 = setInterval(() => {\n        if (percent + 10 < 100) {\n          percent = Math.max(percent + 10, percent);\n          if (files[0] && percent !== files[0].percent) {\n            files[0].percent = percent;\n            onProgress({\n              percent,\n              file: file || innerFiles[0],\n              files: innerFiles.map((file) => ({ ...file, percent })),\n              type: 'mock',\n            });\n          }\n        } else {\n          clearInterval(timer1);\n        }\n      }, 300);\n      clearTimeout(timer2);\n    }, 300);\n  }\n\n  let requestData: { [key: string]: any } = {};\n  if (data) {\n    const extraData = typeof data === 'function' ? data(file) : data;\n    Object.assign(requestData, extraData);\n  }\n  innerFiles.forEach((file, index) => {\n    const fileField = innerFiles.length > 1 ? `${name}[${index}]` : name;\n    requestData[fileField] = file.raw;\n    requestData[name] = file.raw;\n  });\n\n  if (formatRequest) {\n    requestData = formatRequest(requestData);\n  }\n\n  // set send data\n  const formData = new FormData();\n  Object.keys(requestData).forEach((key) => {\n    formData.append(key, requestData[key]);\n  });\n\n  xhr.open(method, action, true);\n  // custom request headers\n  Object.keys(headers).forEach((key) => {\n    xhr.setRequestHeader(key, headers[key]);\n  });\n\n  xhr.onerror = (event: ProgressEvent) => {\n    onError({ event, file, files: innerFiles });\n    clearInterval(timer1);\n    clearTimeout(timer2);\n  };\n\n  if (xhr.upload) {\n    xhr.upload.onprogress = (event: ProgressEvent) => {\n      let realPercent = 0;\n      if (event.total > 0) {\n        realPercent = Math.round((event.loaded / event.total) * 100);\n      }\n      percent = Math.max(realPercent, percent);\n      if (percent !== realPercent && innerFiles[0]?.percent !== percent) {\n        const progressFiles = innerFiles.map((item) => ({ ...item, percent }));\n        onProgress({\n          event,\n          percent,\n          file: file || progressFiles[0],\n          files: progressFiles,\n          type: 'real',\n        });\n      }\n    };\n  }\n\n  // eslint-disable-next-line consistent-return\n  xhr.onload = (event: ProgressEvent) => {\n    let response: { [key: string]: any } = {};\n    const isFail = xhr.status < 200 || xhr.status >= 300;\n    if (isFail) {\n      return onError({\n        event, file, files: innerFiles, response\n      });\n    }\n    const text = xhr.responseText || xhr.response;\n    try {\n      response = JSON.parse(text);\n    } catch (e) {\n      response = text;\n    }\n    clearInterval(timer1);\n    clearTimeout(timer2);\n    innerFiles.forEach((file) => {\n      file.percent = 100;\n      file.status = 'success';\n      // 如果上传请求返回结果没有上传日期，则使用电脑当前日期显示\n      file.uploadTime = response?.uploadTime || getCurrentDate();\n    });\n    onSuccess({\n      event,\n      file: file || innerFiles[0],\n      files: [...innerFiles],\n      response,\n    });\n  };\n\n  xhr.send(formData);\n\n  return xhr;\n}\n"],"names":["xhr","method","action","withCredentials","headers","data","file","files","name","useMockProgress","formatRequest","onError","onProgress","onSuccess","innerFiles","percent","XMLHttpRequest","timer1","timer2","status","setTimeout","setInterval","Math","max","map","type","clearInterval","clearTimeout","requestData","extraData","Object","assign","forEach","index","fileField","length","raw","formData","FormData","keys","key","append","open","setRequestHeader","onerror","event","upload","onprogress","realPercent","total","round","loaded","progressFiles","item","onload","response","isFail","text","responseText","JSON","parse","e","uploadTime","getCurrentDate","_toConsumableArray","send"],"mappings":"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"}