{"version":3,"file":"recalculate-column-width.js","sources":["../../../../src/_common/js/table/recalculate-column-width.ts"],"sourcesContent":["import { BaseTableCol, ThMap } from './types';\nimport { getColWidthAttr } from './utils';\n\n/**\n * 填充未设置width属性的列\n * @param columns 当前表格所有列\n * @param missingWidthCols 未设置width属性的列\n * @param thWidthList 列宽记录字典\n * @param tableLayout 表格布局\n * @param actualWidth 各列实际总列宽\n * @param tableWidth 表格总宽度\n */\nconst setMissingColumnWidth = <T extends BaseTableCol<T>>(\n  columns: T[],\n  missingWidthCols: T[],\n  thWidthList: ThMap,\n  tableLayout: string,\n  actualWidth: number,\n  tableWidth: number\n) : void => {\n  const thMap = thWidthList;\n  // 当前列宽总宽度小于表宽，将剩余宽度平均分配给未指定宽度的列\n  if (actualWidth < tableWidth) {\n    let widthDiff = tableWidth - actualWidth;\n    const remainCols: T[] = [];\n    // 优先保证设置了minWidth的列满足最小宽度\n    missingWidthCols.forEach((col) => {\n      const minWidth = getColWidthAttr(col, 'minWidth');\n      if (minWidth) {\n        thMap[col.colKey] = minWidth;\n        widthDiff -= minWidth;\n      } else {\n        remainCols.push(col);\n      }\n    });\n\n    // 如果剩余宽度 > 0\n    if (widthDiff > 0) {\n      // 如果存在未设置minWidth的列，这些列均分剩余宽度\n      if (remainCols.length) {\n        const avgWidth = widthDiff / remainCols.length;\n        remainCols.forEach((col) => {\n          thMap[col.colKey] = avgWidth;\n        });\n      } else {\n        // 否则所有列均分剩余宽度\n        const avgWidth = widthDiff / missingWidthCols.length;\n        missingWidthCols.forEach((col) => {\n          thMap[col.colKey] += avgWidth;\n        });\n      }\n    } else {\n      // 剩余宽度 <= 0, 所有剩余列默认填充100px\n      remainCols.forEach((col) => {\n        thMap[col.colKey] = 100;\n      });\n    }\n  } else if (tableLayout === 'fixed') {\n    // 当前列表总宽度大于等于表宽，且当前排版模式为fixed，默认填充minWidth || 100px\n    missingWidthCols.forEach((col) => {\n      thMap[col.colKey] = getColWidthAttr(col, 'minWidth') || 100;\n    });\n  } else {\n    // 当前列表总宽度大于等于表宽，且当前排版模式为aut\n    // 默认填充minWidth || 100px，然后按比例重新分配各列宽度\n    let extraWidth = 0;\n    missingWidthCols.forEach((col) => {\n      extraWidth += getColWidthAttr(col, 'minWidth') || 100;\n    });\n    const totalWidth = extraWidth + actualWidth;\n    columns.forEach((col) => {\n      if (!thMap[col.colKey]) {\n        const colWidth = getColWidthAttr(col, 'minWidth') || 100;\n        thMap[col.colKey] = (colWidth / totalWidth) * tableWidth;\n      } else {\n        thMap[col.colKey] = (thMap[col.colKey] / totalWidth) * tableWidth;\n      }\n    });\n  }\n};\n\n/**\n * 设置所有列的宽度\n * @param columns 当前表格所有列\n * @param thWidthList 列宽记录字典\n * @param actualWidth 各列实际总列宽\n * @param tableWidth 表格总宽度\n * @param notCalculateWidthCols 不需要参与计算的列id\n */\nconst setNormalColumnWidth = <T extends BaseTableCol<T>>(\n  columns: T[],\n  thWidthList: ThMap,\n  actualWidth: number,\n  tableWidth: number,\n  notCalculateWidthCols: string[]\n) : void => {\n  const thMap = thWidthList;\n  columns.forEach((col) => {\n    if (notCalculateWidthCols.includes(col.colKey)) return;\n    thMap[col.colKey] = (thMap[col.colKey] / actualWidth) * tableWidth;\n  });\n};\n\n/**\n * 表格未初始化时默认填充各列宽度\n * @param missingWidthCols 未设置width属性的列\n * @param thWidthList 列宽记录字典\n */\nconst setInitialColumnWidth = <T extends BaseTableCol<T>>(\n  missingWidthCols: T[],\n  thWidthList: { [colKey: string]: number },\n) : void => {\n  const thMap = thWidthList;\n  // 表格宽度未初始化，默认填充minWidth || 100px\n  missingWidthCols.forEach((col) => {\n    thMap[col.colKey] = getColWidthAttr(col, 'minWidth') || 100;\n  });\n};\n\n/**\n * 重新按规则分配各列宽度\n * @param columns 当前表格所有列\n * @param thWidthList 列宽记录字典\n * @param tableLayout 表格布局\n * @param tableElmWidth 表格宽度\n * @param notCalculateWidthCols 不需要参与计算的列\n * @param callback 回调函数\n */\nexport default function recalculateColumnWidth<T extends BaseTableCol<T>>(\n  columns: T[],\n  thWidthList: ThMap,\n  tableLayout: string,\n  tableElmWidth: number,\n  notCalculateWidthCols: string[],\n  callback: (widthMap: { [colKey: string]: number }) => void\n): void {\n  let actualWidth = 0;\n  const missingWidthCols: T[] = [];\n  const thMap: ThMap = {};\n\n  // 计算现有列的列宽总和\n  columns.forEach((col) => {\n    if (!thWidthList[col.colKey]) {\n      thMap[col.colKey] = getColWidthAttr(col, 'width');\n    } else {\n      thMap[col.colKey] = thWidthList[col.colKey];\n    }\n    const originWidth = thMap[col.colKey];\n    if (originWidth) {\n      actualWidth += originWidth;\n    } else {\n      missingWidthCols.push(col);\n    }\n  });\n\n  let tableWidth = tableElmWidth;\n  let needUpdate = false;\n  // 表宽没有初始化时，默认给没有指定列宽的列指定宽度为100px\n  if (tableWidth > 0) {\n    // 存在没有指定列宽的列\n    if (missingWidthCols.length) {\n      setMissingColumnWidth(\n        columns,\n        missingWidthCols,\n        thMap,\n        tableLayout,\n        actualWidth,\n        tableWidth\n      );\n      needUpdate = true;\n    } else {\n      // 所有列都已经指定宽度\n      if (notCalculateWidthCols.length) {\n        // 存在不允许重新计算宽度的列（一般是resize后的两列），这些列不参与后续计算\n        let sum = 0;\n        notCalculateWidthCols.forEach((colKey) => {\n          sum += thMap[colKey];\n        });\n        actualWidth -= sum;\n        tableWidth -= sum;\n      }\n      // 重新计算其他列的宽度，按表格剩余宽度进行按比例分配\n      if (actualWidth !== tableWidth || notCalculateWidthCols.length) {\n        setNormalColumnWidth(\n          columns,\n          thMap,\n          actualWidth,\n          tableWidth,\n          notCalculateWidthCols\n        );\n        needUpdate = true;\n      }\n    }\n  } else {\n    setInitialColumnWidth(missingWidthCols, thMap);\n    needUpdate = true;\n  }\n\n  // 列宽转为整数\n  if (needUpdate) {\n    let addon = 0;\n    Object.keys(thMap).forEach((key) => {\n      const width = thMap[key];\n      addon += width - Math.floor(width);\n      thMap[key] = Math.floor(width) + (addon > 1 ? 1 : 0);\n      if (addon > 1) {\n        addon -= 1;\n      }\n    });\n    if (addon > 0.5) {\n      thMap[columns[0].colKey] += 1;\n    }\n  }\n\n  // 回调处理\n  callback(thMap);\n}\n"],"names":["setMissingColumnWidth","columns","missingWidthCols","thWidthList","tableLayout","actualWidth","tableWidth","thMap","widthDiff","remainCols","forEach","col","minWidth","getColWidthAttr","colKey","push","length","avgWidth","extraWidth","totalWidth","colWidth","setNormalColumnWidth","notCalculateWidthCols","includes","setInitialColumnWidth","recalculateColumnWidth","tableElmWidth","callback","originWidth","needUpdate","sum","addon","Object","keys","key","width","Math","floor"],"mappings":"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"}