/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dayjs = require('dayjs');
var _common_js_datePicker_utils = require('./utils.js');
var _common_js_log_log = require('../log/log.js');
require('@babel/runtime/helpers/slicedToArray');
require('@babel/runtime/helpers/objectDestructuringEmpty');
require('@babel/runtime/helpers/extends');
require('@babel/runtime/helpers/defineProperty');
require('../../../_chunks/dep-6d934009.js');
require('../../../_chunks/dep-2424c37b.js');
require('lodash/chunk');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

var TIME_FORMAT = "HH:mm:ss";
function parseToDayjs(value, format, timeOfDay) {
  if (value === "") return dayjs__default["default"]();
  var dateText = value;
  if (/[w|W]/g.test(format)) {
    if (typeof dateText !== "string") {
      dateText = dayjs__default["default"](dateText).format(format);
    }
    var yearStr = dateText.split(/[-/.\s]/)[0];
    var weekStr = dateText.split(/[-/.\s]/)[1];
    var weekFormatStr = format.split(/[-/.\s]/)[1];
    var firstWeek = dayjs__default["default"](yearStr, "YYYY").startOf("year");
    for (var i = 0; i <= 52; i += 1) {
      var nextWeek = firstWeek.add(i, "week");
      if (timeOfDay === "start") nextWeek = nextWeek.subtract(5, "day");
      if (nextWeek.format(weekFormatStr) === weekStr) {
        return nextWeek;
      }
    }
  }
  if (/Q/g.test(format)) {
    if (typeof dateText !== "string") {
      dateText = dayjs__default["default"](dateText).format(format);
    }
    var _yearStr = dateText.split(/[-/.\s]/)[0];
    var quarterStr = dateText.split(/[-/.\s]/)[1];
    var quarterFormatStr = format.split(/[-/.\s]/)[1];
    var firstQuarter = dayjs__default["default"](_yearStr, "YYYY").startOf("year");
    for (var _i = 0; _i < 4; _i += 1) {
      var nextQuarter = firstQuarter.add(_i, "quarter");
      if (nextQuarter.format(quarterFormatStr) === quarterStr) {
        return nextQuarter;
      }
    }
  }
  var result = dayjs__default["default"](dateText, format).isValid() ? dayjs__default["default"](dateText, format) : dayjs__default["default"](dateText);
  if (!result.isValid()) {
    _common_js_log_log["default"].error("DatePicker", "Check whether the format\u3001value format is valid.\n value: '".concat(value, "', format: '").concat(format, "'"));
    return dayjs__default["default"]();
  }
  return result;
}
function formatRange(_ref) {
  var newDate = _ref.newDate,
    format = _ref.format,
    targetFormat = _ref.targetFormat,
    autoSwap = _ref.autoSwap;
  if (!newDate || !Array.isArray(newDate)) return [];
  var dayjsDateList = newDate.map(function (d) {
    return d && parseToDayjs(d, format);
  });
  if (autoSwap && dayjsDateList[0] && dayjsDateList[1] && dayjsDateList[0].toDate().getTime() > dayjsDateList[1].toDate().getTime()) {
    dayjsDateList = [dayjsDateList[1], dayjsDateList[0]];
  }
  if (dayjsDateList.some(function (r) {
    return r && !r.isValid();
  })) {
    _common_js_log_log["default"].error("DatePicker", "Check whether the value\u3001format\u3001valueType format is valid.\nformat: '".concat(format, "' value: '").concat(newDate, "' valueType: '").concat(targetFormat, "'"));
    return [];
  }
  if (targetFormat === "time-stamp") return dayjsDateList.map(function (da) {
    return da && da.toDate().getTime();
  });
  if (targetFormat === "Date") return dayjsDateList.map(function (da) {
    return da && da.toDate();
  });
  return dayjsDateList.map(function (da) {
    return da && da.format(targetFormat || format);
  });
}
function formatSingle(_ref2) {
  var newDate = _ref2.newDate,
    format = _ref2.format,
    targetFormat = _ref2.targetFormat;
  if (!newDate) return "";
  var dayJsDate = parseToDayjs(newDate, format);
  if (!dayJsDate.isValid()) {
    _common_js_log_log["default"].error("DatePicker", "Check whether the format\u3001value format is valid.\nformat: '".concat(format, "' value: '").concat(newDate, "'"));
    return "";
  }
  if (targetFormat === "time-stamp") return dayJsDate.toDate().getTime();
  if (targetFormat === "Date") return dayJsDate.toDate();
  return dayJsDate.format(targetFormat || format);
}
function isValidDate(value, format) {
  if (Array.isArray(value)) {
    return value.every(function (v) {
      return dayjs__default["default"](v, format).isValid() || dayjs__default["default"](v).isValid();
    });
  }
  return dayjs__default["default"](value, format).isValid() || dayjs__default["default"](value).isValid();
}
function formatDate(newDate, _ref3) {
  var format = _ref3.format,
    targetFormat = _ref3.targetFormat,
    autoSwap = _ref3.autoSwap;
  var result;
  if (Array.isArray(newDate)) {
    result = formatRange({
      newDate: newDate,
      format: format,
      targetFormat: targetFormat,
      autoSwap: autoSwap
    });
  } else {
    result = formatSingle({
      newDate: newDate,
      format: format,
      targetFormat: targetFormat
    });
  }
  return result;
}
function formatTime(value, timeFormat) {
  var result;
  if (Array.isArray(value)) {
    result = value.map(function (v) {
      return dayjs__default["default"](v || new Date(new Date().setHours(0, 0, 0, 0))).format(timeFormat);
    });
  } else {
    result = dayjs__default["default"](value || new Date(new Date().setHours(0, 0, 0, 0))).format(timeFormat);
  }
  return result;
}
function getDefaultFormat(_ref4) {
  var _ref4$mode = _ref4.mode,
    mode = _ref4$mode === void 0 ? "date" : _ref4$mode,
    format = _ref4.format,
    valueType = _ref4.valueType,
    enableTimePicker = _ref4.enableTimePicker;
  if (mode === "year") {
    return {
      format: format || "YYYY",
      valueType: valueType || format || "YYYY",
      timeFormat: TIME_FORMAT
    };
  }
  if (mode === "month") {
    return {
      format: format || "YYYY-MM",
      valueType: valueType || format || "YYYY-MM",
      timeFormat: TIME_FORMAT
    };
  }
  if (mode === "quarter") {
    return {
      format: format || "YYYY-[Q]Q",
      valueType: valueType || format || "YYYY-[Q]Q",
      timeFormat: TIME_FORMAT
    };
  }
  if (mode === "week") {
    return {
      format: format || "YYYY-wo",
      valueType: valueType || format || "YYYY-wo",
      timeFormat: TIME_FORMAT
    };
  }
  if (mode === "date") {
    return {
      format: format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
      valueType: valueType || format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
      timeFormat: _common_js_datePicker_utils.extractTimeFormat(format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : "")) || TIME_FORMAT
    };
  }
  _common_js_log_log["default"].error("DatePicker", "Invalid mode: ".concat(mode));
  return {};
}

exports.TIME_FORMAT = TIME_FORMAT;
exports.formatDate = formatDate;
exports.formatTime = formatTime;
exports.getDefaultFormat = getDefaultFormat;
exports.isValidDate = isValidDate;
exports.parseToDayjs = parseToDayjs;
//# sourceMappingURL=format.js.map
