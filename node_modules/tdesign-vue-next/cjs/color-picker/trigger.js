/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var input_index = require('../input/index.js');
var colorPicker_hooks = require('./hooks.js');
var _common_js_colorPicker_color = require('../_common/js/color-picker/color.js');
require('../input/input.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/defineProperty');
require('tdesign-icons-vue-next');
require('../input/props.js');
require('../form/hooks.js');
require('../hooks/useConfig.js');
require('../config-provider/useConfig.js');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../hooks/useGlobalIcon.js');
require('../hooks/tnode.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('../input/useInput.js');
require('@babel/runtime/helpers/slicedToArray');
require('../form/const.js');
require('../hooks/useVModel.js');
require('../input/useLengthLimit.js');
require('@babel/runtime/helpers/typeof');
require('../_common/js/log/log.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../input/useInputEventHandler.js');
require('../input/useInputWidth.js');
require('../input/input-group.js');
require('../utils/withInstall.js');
require('@babel/runtime/helpers/classCallCheck');
require('@babel/runtime/helpers/createClass');
require('tinycolor2');
require('../_common/js/color-picker/cmyk.js');
require('../_common/js/color-picker/gradient.js');

var DefaultTrigger = vue.defineComponent({
  name: "DefaultTrigger",
  inheritAttrs: false,
  props: {
    color: {
      type: String,
      "default": ""
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    inputProps: {
      type: Object,
      "default": function _default() {
        return {
          autoWidth: true
        };
      }
    },
    onTriggerChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  },
  setup: function setup(props) {
    var baseClassName = colorPicker_hooks.useBaseClassName();
    var value = vue.ref(props.color);
    vue.watch(function () {
      return [props.color];
    }, function () {
      return value.value = props.color;
    });
    var handleChange = function handleChange(input) {
      if (input === props.color) {
        return;
      }
      if (!_common_js_colorPicker_color.Color.isValid(input)) {
        value.value = props.color;
      } else {
        value.value = input;
      }
      props.onTriggerChange(value.value);
    };
    return {
      baseClassName: baseClassName,
      value: value,
      handleChange: handleChange
    };
  },
  render: function render() {
    var _this = this;
    var baseClassName = this.baseClassName;
    var inputSlots = {
      label: function label() {
        return vue.createVNode("div", {
          "class": ["".concat(baseClassName, "__trigger--default__color"), "".concat(baseClassName, "--bg-alpha")]
        }, [vue.createVNode("span", {
          "class": ["color-inner"],
          "style": {
            background: _this.value
          }
        }, null)]);
      }
    };
    return vue.createVNode("div", {
      "class": "".concat(baseClassName, "__trigger--default")
    }, [vue.createVNode(input_index.Input, vue.mergeProps(this.inputProps, {
      "modelValue": _this.value,
      "onUpdate:modelValue": function onUpdateModelValue($event) {
        return _this.value = $event;
      },
      "disabled": this.disabled,
      "onBlur": this.handleChange
    }), inputSlots)]);
  }
});

exports["default"] = DefaultTrigger;
//# sourceMappingURL=trigger.js.map
