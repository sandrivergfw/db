/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var colorPicker_hooks = require('../hooks.js');
var hooks_useConfig = require('../../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../../hooks/useGlobalIcon.js');
var colorPicker_panel_baseProps = require('./base-props.js');
var _common_js_colorPicker_color = require('../../_common/js/color-picker/color.js');
require('../../config-provider/useConfig.js');
require('../../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../../_common/js/global-config/default-config.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('@babel/runtime/helpers/slicedToArray');
require('@babel/runtime/helpers/classCallCheck');
require('@babel/runtime/helpers/createClass');
require('tinycolor2');
require('../../_common/js/color-picker/cmyk.js');
require('../../_common/js/color-picker/gradient.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var SwatchesPanel = vue.defineComponent({
  name: "SwatchesPanel",
  props: _objectSpread(_objectSpread({}, colorPicker_panel_baseProps["default"]), {}, {
    colors: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    title: {
      type: String,
      "default": "\u7CFB\u7EDF\u8272\u5F69"
    },
    editable: {
      type: Boolean,
      "default": false
    },
    onSetColor: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    },
    handleAddColor: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  }),
  setup: function setup(props) {
    var baseClassName = colorPicker_hooks.useBaseClassName();
    var _useGlobalIcon = hooks_useGlobalIcon.useGlobalIcon({
        DeleteIcon: tdesignIconsVueNext.DeleteIcon,
        AddIcon: tdesignIconsVueNext.AddIcon
      }),
      DeleteIcon = _useGlobalIcon.DeleteIcon,
      AddIcon = _useGlobalIcon.AddIcon;
    var _useCommonClassName = hooks_useConfig.useCommonClassName(),
      STATUS = _useCommonClassName.STATUS;
    var statusClassNames = STATUS.value;
    var visiblePopConfirm = vue.ref(false);
    var setVisiblePopConfirm = function setVisiblePopConfirm(visible) {
      visiblePopConfirm.value = visible;
    };
    var handleClick = function handleClick(color) {
      return props.onSetColor(color);
    };
    var isEqualCurrentColor = function isEqualCurrentColor(color) {
      return _common_js_colorPicker_color.Color.compare(color, props.color.css);
    };
    var selectedColorIndex = vue.computed(function () {
      return props.colors.findIndex(function (color) {
        return isEqualCurrentColor(color);
      });
    });
    var handleRemoveColor = function handleRemoveColor() {
      var colors = _toConsumableArray__default["default"](props.colors);
      var selectedIndex = selectedColorIndex.value;
      if (selectedIndex > -1) {
        colors.splice(selectedIndex, 1);
      } else {
        colors.length = 0;
      }
      props.onChange(colors);
      setVisiblePopConfirm(false);
    };
    return {
      baseClassName: baseClassName,
      DeleteIcon: DeleteIcon,
      AddIcon: AddIcon,
      statusClassNames: statusClassNames,
      selectedColorIndex: selectedColorIndex,
      visiblePopConfirm: visiblePopConfirm,
      setVisiblePopConfirm: setVisiblePopConfirm,
      handleClick: handleClick,
      isEqualCurrentColor: isEqualCurrentColor,
      handleRemoveColor: handleRemoveColor
    };
  },
  render: function render() {
    var _this = this;
    var baseClassName = this.baseClassName,
      DeleteIcon = this.DeleteIcon,
      AddIcon = this.AddIcon,
      statusClassNames = this.statusClassNames,
      title = this.title,
      editable = this.editable;
    var swatchesClass = "".concat(baseClassName, "__swatches");
    var renderActions = function renderActions() {
      if (!editable) {
        return null;
      }
      return vue.createVNode("div", {
        "class": "".concat(swatchesClass, "--actions")
      }, [vue.createVNode("span", {
        "role": "button",
        "class": "".concat(baseClassName, "__icon"),
        "onClick": function onClick() {
          return _this.handleAddColor();
        }
      }, [vue.createVNode(AddIcon, null, null)]), _this.colors.length > 0 ? vue.createVNode("span", {
        "role": "button",
        "class": "".concat(baseClassName, "__icon"),
        "onClick": function onClick() {
          return _this.handleRemoveColor();
        }
      }, [vue.createVNode(DeleteIcon, null, null)]) : null]);
    };
    return vue.createVNode("div", {
      "class": swatchesClass
    }, [vue.createVNode("h3", {
      "class": "".concat(swatchesClass, "--title")
    }, [vue.createVNode("span", null, [title]), renderActions()]), vue.createVNode("ul", {
      "class": ["".concat(swatchesClass, "--items"), "narrow-scrollbar"]
    }, [this.colors.map(function (color) {
      return vue.createVNode("li", {
        "class": ["".concat(swatchesClass, "--item"), _this.isEqualCurrentColor(color) && editable ? statusClassNames.active : ""],
        "title": color,
        "key": color,
        "onClick": function onClick() {
          if (_this.disabled) {
            return;
          }
          _this.handleClick(color);
        }
      }, [vue.createVNode("div", {
        "class": ["".concat(swatchesClass, "--color"), "".concat(baseClassName, "--bg-alpha")]
      }, [vue.createVNode("span", {
        "class": "".concat(swatchesClass, "--inner"),
        "style": {
          background: color
        }
      }, null)])]);
    })])]);
  }
});

exports["default"] = SwatchesPanel;
//# sourceMappingURL=swatches.js.map
