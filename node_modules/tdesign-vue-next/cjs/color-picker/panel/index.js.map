{"version":3,"file":"index.js","sources":["../../../src/color-picker/panel/index.tsx"],"sourcesContent":["import { defineComponent, ref, toRefs, watch } from 'vue';\nimport { useCommonClassName, useConfig } from '../../hooks/useConfig';\nimport props from '../props';\nimport {\n  DEFAULT_COLOR,\n  DEFAULT_LINEAR_GRADIENT,\n  TD_COLOR_USED_COLORS_MAX_SIZE,\n  DEFAULT_SYSTEM_SWATCH_COLORS,\n} from '../const';\nimport PanelHeader from './header';\nimport LinearGradient from './linear-gradient';\nimport SaturationPanel from './saturation';\nimport HueSlider from './hue';\nimport AlphaSlider from './alpha';\nimport FormatPanel from './format';\nimport SwatchesPanel from './swatches';\nimport { Color, getColorObject, GradientColorPoint } from '../utils';\nimport { TdColorPickerProps, ColorPickerChangeTrigger } from '../type';\nimport { TdColorModes } from '../interfaces';\nimport { useBaseClassName } from '../hooks';\nimport useVModel from '../../hooks/useVModel';\nimport useDefaultValue from '../../hooks/useDefaultValue';\n\nexport default defineComponent({\n  name: 'ColorPanel',\n  props: {\n    ...props,\n    togglePopup: {\n      type: Function,\n    },\n  },\n\n  setup(props) {\n    const baseClassName = useBaseClassName();\n    const { STATUS } = useCommonClassName();\n    const { t, globalConfig } = useConfig('colorPicker');\n    const statusClassNames = STATUS.value;\n    const { value: inputValue, modelValue, recentColors } = toRefs(props);\n    const [innerValue, setInnerValue] = useVModel(inputValue, modelValue, props.defaultValue, props.onChange);\n    const color = ref<Color>(new Color(innerValue.value || DEFAULT_COLOR));\n    const updateColor = () => color.value.update(innerValue.value || DEFAULT_COLOR);\n    const mode = ref<TdColorModes>(color.value.isGradient ? 'linear-gradient' : 'monochrome');\n    const formatModel = ref<TdColorPickerProps['format']>(color.value.isGradient ? 'CSS' : 'RGB');\n\n    const [recentlyUsedColors, setRecentlyUsedColors] = useDefaultValue(\n      recentColors,\n      props.defaultRecentColors,\n      props.onRecentColorsChange,\n      'recentColors',\n    );\n\n    if (props.colorModes.length === 1) {\n      // eslint-disable-next-line vue/no-setup-props-destructure\n      const m = props.colorModes[0];\n      mode.value = m;\n    }\n\n    const formatValue = () => {\n      // 渐变模式下直接输出css样式\n      if (mode.value === 'linear-gradient') {\n        return color.value.linearGradient;\n      }\n      return color.value.getFormatsColorMap()[props.format] || color.value.css;\n    };\n\n    /**\n     * 添加最近使用颜色\n     * @returns void\n     */\n    const addRecentlyUsedColor = () => {\n      if (recentlyUsedColors.value === null || recentlyUsedColors.value === false) {\n        return;\n      }\n      const colors = (recentlyUsedColors.value as string[]) || [];\n      const currentColor = color.value.isGradient ? color.value.linearGradient : color.value.rgba;\n      const index = colors.indexOf(currentColor);\n      if (index > -1) {\n        colors.splice(index, 1);\n      }\n      colors.unshift(currentColor);\n      if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {\n        colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;\n      }\n      handleRecentlyUsedColorsChange(colors);\n    };\n\n    /**\n     * 最近使用颜色变更时触发\n     * @param colors\n     */\n    const handleRecentlyUsedColorsChange = (colors: string[]) => {\n      recentlyUsedColors.value = colors;\n      setRecentlyUsedColors(colors);\n    };\n\n    /**\n     * onChange\n     * @param trigger\n     */\n    const emitColorChange = (trigger?: ColorPickerChangeTrigger) => {\n      setInnerValue(formatValue(), {\n        color: getColorObject(color.value),\n        trigger: trigger || 'palette-saturation-brightness',\n      });\n    };\n\n    watch(() => [props.defaultValue, props.enableAlpha], updateColor);\n\n    watch(\n      () => innerValue.value,\n      (newColor) => {\n        if (newColor !== formatValue()) {\n          updateColor();\n          mode.value = color.value.isGradient ? 'linear-gradient' : 'monochrome';\n        }\n      },\n    );\n\n    /**\n     * mode change\n     * @param value\n     * @returns\n     */\n    const handleModeChange = (value: TdColorModes) => {\n      mode.value = value;\n      if (value === 'linear-gradient') {\n        color.value.update(\n          color.value.gradientColors.length > 0 ? color.value.linearGradient : DEFAULT_LINEAR_GRADIENT,\n        );\n        return;\n      }\n      color.value.update(color.value.rgba);\n    };\n\n    /**\n     * 格式变化\n     * @param format\n     * @returns\n     */\n    const handleFormatModeChange = (format: TdColorPickerProps['format']) => (formatModel.value = format);\n\n    /**\n     * 饱和度亮度变化\n     * @param param0\n     */\n    const handleSatAndValueChange = ({ saturation, value }: { saturation: number; value: number }) => {\n      const { saturation: sat, value: val } = color.value;\n      let changeTrigger: ColorPickerChangeTrigger = 'palette-saturation-brightness';\n      if (value !== val && saturation !== sat) {\n        color.value.saturation = saturation;\n        color.value.value = value;\n        changeTrigger = 'palette-saturation-brightness';\n      } else if (saturation !== sat) {\n        color.value.saturation = saturation;\n        changeTrigger = 'palette-saturation';\n      } else if (value !== val) {\n        color.value.value = value;\n        changeTrigger = 'palette-brightness';\n      } else {\n        return;\n      }\n      emitColorChange(changeTrigger);\n    };\n\n    /**\n     * 色相变化\n     * @param hue\n     */\n    const handleHueChange = (hue: number) => {\n      color.value.hue = hue;\n      emitColorChange('palette-hue-bar');\n      props.onPaletteBarChange?.({\n        color: getColorObject(color.value),\n      });\n    };\n\n    /**\n     * 透明度变化\n     * @param alpha\n     */\n    const handleAlphaChange = (alpha: number) => {\n      color.value.alpha = alpha;\n      emitColorChange('palette-alpha-bar');\n    };\n\n    /**\n     * 输入框触发改变\n     * @param input\n     * @param alpha\n     */\n    const handleInputChange = (input: string, alpha?: number) => {\n      color.value.update(input);\n      color.value.alpha = alpha;\n      emitColorChange('input');\n    };\n\n    /**\n     * 渐变改变\n     * @param param0\n     */\n    const handleGradientChange = ({\n      key,\n      payload,\n    }: {\n      key: 'degree' | 'selectedId' | 'colors';\n      payload: number | string | GradientColorPoint[];\n    }) => {\n      let trigger: ColorPickerChangeTrigger = 'palette-saturation-brightness';\n      switch (key) {\n        case 'degree':\n          color.value.gradientDegree = payload as number;\n          trigger = 'input';\n          break;\n        case 'selectedId':\n          color.value.gradientSelectedId = payload as string;\n          break;\n        case 'colors':\n          color.value.gradientColors = payload as GradientColorPoint[];\n          break;\n      }\n      emitColorChange(trigger);\n    };\n\n    /**\n     * 色块点击\n     * @param type\n     * @param value\n     */\n    const handleSetColor = (type: 'system' | 'used', value: string) => {\n      const isGradientValue = Color.isGradientColor(value);\n      if (isGradientValue) {\n        if (props.colorModes.includes('linear-gradient')) {\n          mode.value = 'linear-gradient';\n          color.value.update(value);\n          color.value.updateCurrentGradientColor();\n        } else {\n          console.warn('该模式不支持渐变色');\n        }\n      } else if (mode.value === 'linear-gradient') {\n        color.value.updateStates(value);\n        color.value.updateCurrentGradientColor();\n      } else {\n        color.value.update(value);\n      }\n      emitColorChange();\n    };\n\n    return {\n      baseClassName,\n      statusClassNames,\n      t,\n      globalConfig,\n      color,\n      mode,\n      formatModel,\n      recentlyUsedColors,\n      addRecentlyUsedColor,\n      handleModeChange,\n      handleSatAndValueChange,\n      handleHueChange,\n      handleAlphaChange,\n      handleGradientChange,\n      handleSetColor,\n      handleFormatModeChange,\n      handleInputChange,\n      handleRecentlyUsedColorsChange,\n    };\n  },\n  render() {\n    const { baseClassName, statusClassNames, t, globalConfig, recentColors, recentlyUsedColors, swatchColors } = this;\n    const baseProps = {\n      color: this.color,\n      disabled: this.disabled,\n    };\n    const showUsedColors = recentColors !== null && recentColors !== false;\n\n    let systemColors = swatchColors;\n    if (systemColors === undefined) {\n      systemColors = [...DEFAULT_SYSTEM_SWATCH_COLORS];\n    }\n    const showSystemColors = systemColors?.length > 0;\n\n    const renderSwatches = () => {\n      if (!showSystemColors && !showUsedColors) {\n        return null;\n      }\n      return (\n        <>\n          <div class={`${baseClassName}__swatches-wrap`}>\n            {showUsedColors ? (\n              <SwatchesPanel\n                {...baseProps}\n                title={t(globalConfig.recentColorTitle)}\n                editable\n                colors={this.recentlyUsedColors as string[]}\n                handleAddColor={this.addRecentlyUsedColor}\n                onSetColor={(color: string) => this.handleSetColor('used', color)}\n                onChange={this.handleRecentlyUsedColorsChange}\n              />\n            ) : null}\n            {showSystemColors ? (\n              <SwatchesPanel\n                {...baseProps}\n                title={t(globalConfig.swatchColorTitle)}\n                colors={systemColors}\n                onSetColor={(color: string) => this.handleSetColor('system', color)}\n              />\n            ) : null}\n          </div>\n        </>\n      );\n    };\n\n    const isGradient = this.mode === 'linear-gradient';\n    return (\n      <div class={[`${baseClassName}__panel`, this.disabled ? statusClassNames.disabled : false]}>\n        <PanelHeader {...this.$props} mode={this.mode} onModeChange={this.handleModeChange} />\n        <div class={[`${baseClassName}__body`]}>\n          {isGradient ? <LinearGradient {...baseProps} onChange={this.handleGradientChange} /> : null}\n\n          <SaturationPanel {...baseProps} onChange={this.handleSatAndValueChange} />\n\n          <div class={[`${baseClassName}__sliders-wrapper`]}>\n            <div class={[`${baseClassName}__sliders`]}>\n              <HueSlider {...baseProps} onChange={this.handleHueChange} />\n              {this.enableAlpha ? <AlphaSlider {...baseProps} onChange={this.handleAlphaChange} /> : null}\n            </div>\n\n            <div class={[`${baseClassName}__sliders-preview`, `${baseClassName}--bg-alpha`]}>\n              <span\n                class={`${baseClassName}__sliders-preview-inner`}\n                style={{\n                  background: isGradient ? this.color.linearGradient : this.color.rgba,\n                }}\n              />\n            </div>\n          </div>\n\n          <FormatPanel\n            {...this.$props}\n            color={this.color}\n            format={this.formatModel}\n            onModeChange={this.handleFormatModeChange}\n            onInputChange={this.handleInputChange}\n          />\n          {renderSwatches()}\n        </div>\n      </div>\n    );\n  },\n});\n"],"names":["defineComponent","name","props","togglePopup","type","Function","setup","baseClassName","useBaseClassName","useCommonClassName","STATUS","useConfig","t","globalConfig","statusClassNames","value","toRefs","inputValue","modelValue","recentColors","useVModel","defaultValue","onChange","_slicedToArray","innerValue","setInnerValue","color","ref","Color","DEFAULT_COLOR","updateColor","update","mode","isGradient","formatModel","useDefaultValue","defaultRecentColors","onRecentColorsChange","recentlyUsedColors","setRecentlyUsedColors","colorModes","length","m","formatValue","linearGradient","getFormatsColorMap","format","css","addRecentlyUsedColor","colors","currentColor","rgba","index","indexOf","splice","unshift","TD_COLOR_USED_COLORS_MAX_SIZE","handleRecentlyUsedColorsChange","emitColorChange","trigger","getColorObject","watch","enableAlpha","newColor","handleModeChange","gradientColors","DEFAULT_LINEAR_GRADIENT","handleFormatModeChange","handleSatAndValueChange","saturation","sat","val","changeTrigger","handleHueChange","hue","onPaletteBarChange","handleAlphaChange","alpha","handleInputChange","input","handleGradientChange","key","payload","gradientDegree","gradientSelectedId","handleSetColor","isGradientValue","isGradientColor","includes","updateCurrentGradientColor","console","warn","updateStates","render","swatchColors","baseProps","disabled","showUsedColors","systemColors","_toConsumableArray","DEFAULT_SYSTEM_SWATCH_COLORS","showSystemColors","renderSwatches","_createVNode","_Fragment","recentColorTitle","swatchColorTitle","PanelHeader","_mergeProps","$props","HueSlider","background","FormatPanel"],"mappings":"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"}