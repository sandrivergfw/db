import './style';
export type { TdTimeLineProps } from './type';
export * from './type';
export declare const Timeline: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            reverse: boolean;
            mode: "alternate" | "same";
            layout: "horizontal" | "vertical";
            labelAlign: "alternate" | "left" | "top" | "bottom" | "right";
            theme: "default" | "dot";
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            labelAlign: {
                type: import("vue").PropType<"alternate" | "left" | "top" | "bottom" | "right">;
                default: "alternate" | "left" | "top" | "bottom" | "right";
                validator(val: "alternate" | "left" | "top" | "bottom" | "right"): boolean;
            };
            layout: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            mode: {
                type: import("vue").PropType<"alternate" | "same">;
                default: "alternate" | "same";
                validator(val: "alternate" | "same"): boolean;
            };
            reverse: BooleanConstructor;
            theme: {
                type: import("vue").PropType<"default" | "dot">;
                default: "default" | "dot";
                validator(val: "default" | "dot"): boolean;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "reverse" | "mode" | "layout" | "labelAlign" | "theme">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            labelAlign: {
                type: import("vue").PropType<"alternate" | "left" | "top" | "bottom" | "right">;
                default: "alternate" | "left" | "top" | "bottom" | "right";
                validator(val: "alternate" | "left" | "top" | "bottom" | "right"): boolean;
            };
            layout: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            mode: {
                type: import("vue").PropType<"alternate" | "same">;
                default: "alternate" | "same";
                validator(val: "alternate" | "same"): boolean;
            };
            reverse: BooleanConstructor;
            theme: {
                type: import("vue").PropType<"default" | "dot">;
                default: "default" | "dot";
                validator(val: "default" | "dot"): boolean;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            reverse: boolean;
            mode: "alternate" | "same";
            layout: "horizontal" | "vertical";
            labelAlign: "alternate" | "left" | "top" | "bottom" | "right";
            theme: "default" | "dot";
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        labelAlign: {
            type: import("vue").PropType<"alternate" | "left" | "top" | "bottom" | "right">;
            default: "alternate" | "left" | "top" | "bottom" | "right";
            validator(val: "alternate" | "left" | "top" | "bottom" | "right"): boolean;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        mode: {
            type: import("vue").PropType<"alternate" | "same">;
            default: "alternate" | "same";
            validator(val: "alternate" | "same"): boolean;
        };
        reverse: BooleanConstructor;
        theme: {
            type: import("vue").PropType<"default" | "dot">;
            default: "default" | "dot";
            validator(val: "default" | "dot"): boolean;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    labelAlign: {
        type: import("vue").PropType<"alternate" | "left" | "top" | "bottom" | "right">;
        default: "alternate" | "left" | "top" | "bottom" | "right";
        validator(val: "alternate" | "left" | "top" | "bottom" | "right"): boolean;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    mode: {
        type: import("vue").PropType<"alternate" | "same">;
        default: "alternate" | "same";
        validator(val: "alternate" | "same"): boolean;
    };
    reverse: BooleanConstructor;
    theme: {
        type: import("vue").PropType<"default" | "dot">;
        default: "default" | "dot";
        validator(val: "default" | "dot"): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    reverse: boolean;
    mode: "alternate" | "same";
    layout: "horizontal" | "vertical";
    labelAlign: "alternate" | "left" | "top" | "bottom" | "right";
    theme: "default" | "dot";
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const TimelineItem: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            loading: boolean;
            dotColor: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            index: {
                type: NumberConstructor;
            };
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            dot: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            dotColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            labelAlign: {
                type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
                validator(val: "left" | "top" | "bottom" | "right"): boolean;
            };
            loading: BooleanConstructor;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "loading" | "dotColor">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            index: {
                type: NumberConstructor;
            };
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            dot: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            dotColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            labelAlign: {
                type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
                validator(val: "left" | "top" | "bottom" | "right"): boolean;
            };
            loading: BooleanConstructor;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            loading: boolean;
            dotColor: string;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        index: {
            type: NumberConstructor;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        dot: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        dotColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        loading: BooleanConstructor;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    index: {
        type: NumberConstructor;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    dot: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    dotColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    loading: BooleanConstructor;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    loading: boolean;
    dotColor: string;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Timeline;
