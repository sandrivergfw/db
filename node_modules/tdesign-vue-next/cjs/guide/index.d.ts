import { TdGuideProps } from './type';
import './style';
export * from './type';
export declare type GuideProps = TdGuideProps;
export declare const Guide: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            zIndex: number;
            mode: "dialog" | "popup";
            modelValue: number;
            current: number;
            showOverlay: boolean;
            skipButtonProps: import("..").TdButtonProps;
            prevButtonProps: import("..").TdButtonProps;
            nextButtonProps: import("..").TdButtonProps;
            highlightPadding: number;
            finishButtonProps: import("..").TdButtonProps;
            hideCounter: boolean;
            hidePrev: boolean;
            hideSkip: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            counter: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            current: {
                type: NumberConstructor;
                default: any;
            };
            modelValue: {
                type: NumberConstructor;
                default: any;
            };
            defaultCurrent: {
                type: NumberConstructor;
            };
            finishButtonProps: {
                type: import("vue").PropType<import("..").TdButtonProps>;
                default: import("..").TdButtonProps;
            };
            hideCounter: BooleanConstructor;
            hidePrev: BooleanConstructor;
            hideSkip: BooleanConstructor;
            highlightPadding: {
                type: NumberConstructor;
                default: number;
            };
            mode: {
                type: import("vue").PropType<"dialog" | "popup">;
                default: "dialog" | "popup";
                validator(val: "dialog" | "popup"): boolean;
            };
            nextButtonProps: {
                type: import("vue").PropType<import("..").TdButtonProps>;
                default: import("..").TdButtonProps;
            };
            prevButtonProps: {
                type: import("vue").PropType<import("..").TdButtonProps>;
                default: import("..").TdButtonProps;
            };
            showOverlay: {
                type: BooleanConstructor;
                default: boolean;
            };
            skipButtonProps: {
                type: import("vue").PropType<import("..").TdButtonProps>;
                default: import("..").TdButtonProps;
            };
            steps: {
                type: import("vue").PropType<import("./type").TdGuideStepProps[]>;
            };
            zIndex: {
                type: NumberConstructor;
                default: number;
            };
            onChange: import("vue").PropType<(current: number, context?: {
                e: MouseEvent;
                total: number;
            }) => void>;
            onFinish: import("vue").PropType<(context: {
                e: MouseEvent;
                current: number;
                total: number;
            }) => void>;
            onNextStepClick: import("vue").PropType<(context: {
                e: MouseEvent;
                next: number;
                current: number;
                total: number;
            }) => void>;
            onPrevStepClick: import("vue").PropType<(context: {
                e: MouseEvent;
                prev: number;
                current: number;
                total: number;
            }) => void>;
            onSkip: import("vue").PropType<(context: {
                e: MouseEvent;
                current: number;
                total: number;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "zIndex" | "mode" | "modelValue" | "current" | "showOverlay" | "skipButtonProps" | "prevButtonProps" | "nextButtonProps" | "highlightPadding" | "finishButtonProps" | "hideCounter" | "hidePrev" | "hideSkip">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            counter: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            current: {
                type: NumberConstructor;
                default: any;
            };
            modelValue: {
                type: NumberConstructor;
                default: any;
            };
            defaultCurrent: {
                type: NumberConstructor;
            };
            finishButtonProps: {
                type: import("vue").PropType<import("..").TdButtonProps>;
                default: import("..").TdButtonProps;
            };
            hideCounter: BooleanConstructor;
            hidePrev: BooleanConstructor;
            hideSkip: BooleanConstructor;
            highlightPadding: {
                type: NumberConstructor;
                default: number;
            };
            mode: {
                type: import("vue").PropType<"dialog" | "popup">;
                default: "dialog" | "popup";
                validator(val: "dialog" | "popup"): boolean;
            };
            nextButtonProps: {
                type: import("vue").PropType<import("..").TdButtonProps>;
                default: import("..").TdButtonProps;
            };
            prevButtonProps: {
                type: import("vue").PropType<import("..").TdButtonProps>;
                default: import("..").TdButtonProps;
            };
            showOverlay: {
                type: BooleanConstructor;
                default: boolean;
            };
            skipButtonProps: {
                type: import("vue").PropType<import("..").TdButtonProps>;
                default: import("..").TdButtonProps;
            };
            steps: {
                type: import("vue").PropType<import("./type").TdGuideStepProps[]>;
            };
            zIndex: {
                type: NumberConstructor;
                default: number;
            };
            onChange: import("vue").PropType<(current: number, context?: {
                e: MouseEvent;
                total: number;
            }) => void>;
            onFinish: import("vue").PropType<(context: {
                e: MouseEvent;
                current: number;
                total: number;
            }) => void>;
            onNextStepClick: import("vue").PropType<(context: {
                e: MouseEvent;
                next: number;
                current: number;
                total: number;
            }) => void>;
            onPrevStepClick: import("vue").PropType<(context: {
                e: MouseEvent;
                prev: number;
                current: number;
                total: number;
            }) => void>;
            onSkip: import("vue").PropType<(context: {
                e: MouseEvent;
                current: number;
                total: number;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            zIndex: number;
            mode: "dialog" | "popup";
            modelValue: number;
            current: number;
            showOverlay: boolean;
            skipButtonProps: import("..").TdButtonProps;
            prevButtonProps: import("..").TdButtonProps;
            nextButtonProps: import("..").TdButtonProps;
            highlightPadding: number;
            finishButtonProps: import("..").TdButtonProps;
            hideCounter: boolean;
            hidePrev: boolean;
            hideSkip: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        counter: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        current: {
            type: NumberConstructor;
            default: any;
        };
        modelValue: {
            type: NumberConstructor;
            default: any;
        };
        defaultCurrent: {
            type: NumberConstructor;
        };
        finishButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
            default: import("..").TdButtonProps;
        };
        hideCounter: BooleanConstructor;
        hidePrev: BooleanConstructor;
        hideSkip: BooleanConstructor;
        highlightPadding: {
            type: NumberConstructor;
            default: number;
        };
        mode: {
            type: import("vue").PropType<"dialog" | "popup">;
            default: "dialog" | "popup";
            validator(val: "dialog" | "popup"): boolean;
        };
        nextButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
            default: import("..").TdButtonProps;
        };
        prevButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
            default: import("..").TdButtonProps;
        };
        showOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        skipButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
            default: import("..").TdButtonProps;
        };
        steps: {
            type: import("vue").PropType<import("./type").TdGuideStepProps[]>;
        };
        zIndex: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<(current: number, context?: {
            e: MouseEvent;
            total: number;
        }) => void>;
        onFinish: import("vue").PropType<(context: {
            e: MouseEvent;
            current: number;
            total: number;
        }) => void>;
        onNextStepClick: import("vue").PropType<(context: {
            e: MouseEvent;
            next: number;
            current: number;
            total: number;
        }) => void>;
        onPrevStepClick: import("vue").PropType<(context: {
            e: MouseEvent;
            prev: number;
            current: number;
            total: number;
        }) => void>;
        onSkip: import("vue").PropType<(context: {
            e: MouseEvent;
            current: number;
            total: number;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    counter: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
    };
    finishButtonProps: {
        type: import("vue").PropType<import("..").TdButtonProps>;
        default: import("..").TdButtonProps;
    };
    hideCounter: BooleanConstructor;
    hidePrev: BooleanConstructor;
    hideSkip: BooleanConstructor;
    highlightPadding: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: import("vue").PropType<"dialog" | "popup">;
        default: "dialog" | "popup";
        validator(val: "dialog" | "popup"): boolean;
    };
    nextButtonProps: {
        type: import("vue").PropType<import("..").TdButtonProps>;
        default: import("..").TdButtonProps;
    };
    prevButtonProps: {
        type: import("vue").PropType<import("..").TdButtonProps>;
        default: import("..").TdButtonProps;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    skipButtonProps: {
        type: import("vue").PropType<import("..").TdButtonProps>;
        default: import("..").TdButtonProps;
    };
    steps: {
        type: import("vue").PropType<import("./type").TdGuideStepProps[]>;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<(current: number, context?: {
        e: MouseEvent;
        total: number;
    }) => void>;
    onFinish: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
    onNextStepClick: import("vue").PropType<(context: {
        e: MouseEvent;
        next: number;
        current: number;
        total: number;
    }) => void>;
    onPrevStepClick: import("vue").PropType<(context: {
        e: MouseEvent;
        prev: number;
        current: number;
        total: number;
    }) => void>;
    onSkip: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    zIndex: number;
    mode: "dialog" | "popup";
    modelValue: number;
    current: number;
    showOverlay: boolean;
    skipButtonProps: import("..").TdButtonProps;
    prevButtonProps: import("..").TdButtonProps;
    nextButtonProps: import("..").TdButtonProps;
    highlightPadding: number;
    finishButtonProps: import("..").TdButtonProps;
    hideCounter: boolean;
    hidePrev: boolean;
    hideSkip: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Guide;
