import { TdAvatarProps, TdAvatarGroupProps } from './type';
import './style';
export * from './type';
export declare type AvatarProps = TdAvatarProps;
export declare type AvatarGroupProps = TdAvatarGroupProps;
export declare const Avatar: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            image: string;
            size: string;
            alt: string;
            shape: import("./type").ShapeEnum;
            hideOnLoadFailed: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            alt: {
                type: StringConstructor;
                default: string;
            };
            hideOnLoadFailed: BooleanConstructor;
            icon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            image: {
                type: StringConstructor;
                default: string;
            };
            shape: {
                type: import("vue").PropType<import("./type").ShapeEnum>;
                default: import("./type").ShapeEnum;
                validator(val: import("./type").ShapeEnum): boolean;
            };
            size: {
                type: StringConstructor;
                default: string;
            };
            onError: import("vue").PropType<() => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "image" | "size" | "alt" | "shape" | "hideOnLoadFailed">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            alt: {
                type: StringConstructor;
                default: string;
            };
            hideOnLoadFailed: BooleanConstructor;
            icon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            image: {
                type: StringConstructor;
                default: string;
            };
            shape: {
                type: import("vue").PropType<import("./type").ShapeEnum>;
                default: import("./type").ShapeEnum;
                validator(val: import("./type").ShapeEnum): boolean;
            };
            size: {
                type: StringConstructor;
                default: string;
            };
            onError: import("vue").PropType<() => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            image: string;
            size: string;
            alt: string;
            shape: import("./type").ShapeEnum;
            hideOnLoadFailed: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            default: string;
        };
        hideOnLoadFailed: BooleanConstructor;
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        image: {
            type: StringConstructor;
            default: string;
        };
        shape: {
            type: import("vue").PropType<import("./type").ShapeEnum>;
            default: import("./type").ShapeEnum;
            validator(val: import("./type").ShapeEnum): boolean;
        };
        size: {
            type: StringConstructor;
            default: string;
        };
        onError: import("vue").PropType<() => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    alt: {
        type: StringConstructor;
        default: string;
    };
    hideOnLoadFailed: BooleanConstructor;
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    image: {
        type: StringConstructor;
        default: string;
    };
    shape: {
        type: import("vue").PropType<import("./type").ShapeEnum>;
        default: import("./type").ShapeEnum;
        validator(val: import("./type").ShapeEnum): boolean;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
    onError: import("vue").PropType<() => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    image: string;
    size: string;
    alt: string;
    shape: import("./type").ShapeEnum;
    hideOnLoadFailed: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const AvatarGroup: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            size: string;
            cascading: import("./type").CascadingValue;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            cascading: {
                type: import("vue").PropType<import("./type").CascadingValue>;
                default: import("./type").CascadingValue;
                validator(val: import("./type").CascadingValue): boolean;
            };
            collapseAvatar: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            max: {
                type: NumberConstructor;
            };
            placement: {
                type: import("vue").PropType<import("./type").MaxOverPlacement>;
                validator(val: import("./type").MaxOverPlacement): boolean;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            size: {
                type: StringConstructor;
                default: string;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "cascading">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            cascading: {
                type: import("vue").PropType<import("./type").CascadingValue>;
                default: import("./type").CascadingValue;
                validator(val: import("./type").CascadingValue): boolean;
            };
            collapseAvatar: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            max: {
                type: NumberConstructor;
            };
            placement: {
                type: import("vue").PropType<import("./type").MaxOverPlacement>;
                validator(val: import("./type").MaxOverPlacement): boolean;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            size: {
                type: StringConstructor;
                default: string;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            size: string;
            cascading: import("./type").CascadingValue;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        cascading: {
            type: import("vue").PropType<import("./type").CascadingValue>;
            default: import("./type").CascadingValue;
            validator(val: import("./type").CascadingValue): boolean;
        };
        collapseAvatar: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
        };
        placement: {
            type: import("vue").PropType<import("./type").MaxOverPlacement>;
            validator(val: import("./type").MaxOverPlacement): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        size: {
            type: StringConstructor;
            default: string;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    cascading: {
        type: import("vue").PropType<import("./type").CascadingValue>;
        default: import("./type").CascadingValue;
        validator(val: import("./type").CascadingValue): boolean;
    };
    collapseAvatar: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
    };
    placement: {
        type: import("vue").PropType<import("./type").MaxOverPlacement>;
        validator(val: import("./type").MaxOverPlacement): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    size: string;
    cascading: import("./type").CascadingValue;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Avatar;
