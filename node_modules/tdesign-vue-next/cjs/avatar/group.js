/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var avatar_avatarGroupProps = require('./avatar-group-props.js');
var avatar_avatar = require('./avatar.js');
var hooks_tnode = require('../hooks/tnode.js');
var hooks_useConfig = require('../hooks/useConfig.js');
require('./props.js');
require('../config-provider/useConfig.js');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}
var _AvatarGroup = vue.defineComponent({
  name: "TAvatarGroup",
  props: avatar_avatarGroupProps["default"],
  setup: function setup(props2) {
    vue.provide("avatarGroup", props2);
    var renderContent = hooks_tnode.useContent();
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var AVATAR_NAME = hooks_useConfig.usePrefixClass("avatar");
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("avatar-group");
    var isIcon = function isIcon() {
      var content = renderTNodeJSX("collapseAvatar");
      return content;
    };
    var renderIcon = function renderIcon() {
      return isIcon() && typeof props2.collapseAvatar !== "string" ? props2.collapseAvatar : null;
    };
    var renderEllipsisAvatar = function renderEllipsisAvatar(children) {
      if ((children === null || children === void 0 ? void 0 : children.length) > props2.max) {
        var content = setEllipsisContent(children);
        var outAvatar = children.slice(0, props2.max);
        outAvatar.push(vue.createVNode(avatar_avatar["default"], {
          "size": props2.size,
          "icon": renderIcon()
        }, _isSlot(content) ? content : {
          "default": function _default() {
            return [content];
          }
        }));
        return [outAvatar];
      }
      return [children];
    };
    var setEllipsisContent = function setEllipsisContent(children) {
      var content = "";
      if (props2.collapseAvatar) {
        if (!isIcon()) {
          content = renderContent("collapseAvatar", "content");
        } else {
          content = isIcon();
        }
      } else {
        content = "+".concat(children.length - props2.max);
      }
      return content;
    };
    return function () {
      var _ref;
      var children = renderTNodeJSX("default");
      var cascading = props2.cascading,
        max = props2.max;
      var groupClass = ["".concat(COMPONENT_NAME.value), (_ref = {}, _defineProperty__default["default"](_ref, "".concat(AVATAR_NAME.value, "--offset-right"), cascading === "right-up"), _defineProperty__default["default"](_ref, "".concat(AVATAR_NAME.value, "--offset-left"), cascading === "left-up"), _ref)];
      var content = [children];
      if (max && max >= 0) {
        content = [renderEllipsisAvatar(children)];
      }
      return vue.createVNode("div", {
        "class": groupClass
      }, [content]);
    };
  }
});

exports["default"] = _AvatarGroup;
//# sourceMappingURL=group.js.map
