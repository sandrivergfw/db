import { TdTabsProps, TdTabPanelProps } from './type';
import './style';
export * from './type';
export declare type TabsProps = TdTabsProps;
export declare type TabPanelProps = TdTabPanelProps;
export declare const Tabs: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: import("./type").TabValue;
            disabled: boolean;
            size: "medium" | "large";
            modelValue: import("./type").TabValue;
            placement: "left" | "top" | "bottom" | "right";
            theme: "normal" | "card";
            dragSort: boolean;
            addable: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            addable: BooleanConstructor;
            disabled: BooleanConstructor;
            dragSort: BooleanConstructor;
            list: {
                type: import("vue").PropType<TdTabPanelProps[]>;
            };
            placement: {
                type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
                default: "left" | "top" | "bottom" | "right";
                validator(val: "left" | "top" | "bottom" | "right"): boolean;
            };
            size: {
                type: import("vue").PropType<"medium" | "large">;
                default: "medium" | "large";
                validator(val: "medium" | "large"): boolean;
            };
            theme: {
                type: import("vue").PropType<"normal" | "card">;
                default: "normal" | "card";
                validator(val: "normal" | "card"): boolean;
            };
            value: {
                type: import("vue").PropType<import("./type").TabValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TabValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TabValue>;
            };
            onAdd: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").TabValue) => void>;
            onDragSort: import("vue").PropType<(context: import("./type").TabsDragSortContext) => void>;
            onRemove: import("vue").PropType<(options: {
                value: import("./type").TabValue;
                index: number;
                e: MouseEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "size" | "modelValue" | "placement" | "theme" | "dragSort" | "addable">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            addable: BooleanConstructor;
            disabled: BooleanConstructor;
            dragSort: BooleanConstructor;
            list: {
                type: import("vue").PropType<TdTabPanelProps[]>;
            };
            placement: {
                type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
                default: "left" | "top" | "bottom" | "right";
                validator(val: "left" | "top" | "bottom" | "right"): boolean;
            };
            size: {
                type: import("vue").PropType<"medium" | "large">;
                default: "medium" | "large";
                validator(val: "medium" | "large"): boolean;
            };
            theme: {
                type: import("vue").PropType<"normal" | "card">;
                default: "normal" | "card";
                validator(val: "normal" | "card"): boolean;
            };
            value: {
                type: import("vue").PropType<import("./type").TabValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TabValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TabValue>;
            };
            onAdd: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").TabValue) => void>;
            onDragSort: import("vue").PropType<(context: import("./type").TabsDragSortContext) => void>;
            onRemove: import("vue").PropType<(options: {
                value: import("./type").TabValue;
                index: number;
                e: MouseEvent;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: import("./type").TabValue;
            disabled: boolean;
            size: "medium" | "large";
            modelValue: import("./type").TabValue;
            placement: "left" | "top" | "bottom" | "right";
            theme: "normal" | "card";
            dragSort: boolean;
            addable: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        addable: BooleanConstructor;
        disabled: BooleanConstructor;
        dragSort: BooleanConstructor;
        list: {
            type: import("vue").PropType<TdTabPanelProps[]>;
        };
        placement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        size: {
            type: import("vue").PropType<"medium" | "large">;
            default: "medium" | "large";
            validator(val: "medium" | "large"): boolean;
        };
        theme: {
            type: import("vue").PropType<"normal" | "card">;
            default: "normal" | "card";
            validator(val: "normal" | "card"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").TabValue>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TabValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TabValue>;
        };
        onAdd: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TabValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").TabsDragSortContext) => void>;
        onRemove: import("vue").PropType<(options: {
            value: import("./type").TabValue;
            index: number;
            e: MouseEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    addable: BooleanConstructor;
    disabled: BooleanConstructor;
    dragSort: BooleanConstructor;
    list: {
        type: import("vue").PropType<TdTabPanelProps[]>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    size: {
        type: import("vue").PropType<"medium" | "large">;
        default: "medium" | "large";
        validator(val: "medium" | "large"): boolean;
    };
    theme: {
        type: import("vue").PropType<"normal" | "card">;
        default: "normal" | "card";
        validator(val: "normal" | "card"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").TabValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TabValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TabValue>;
    };
    onAdd: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TabValue) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").TabsDragSortContext) => void>;
    onRemove: import("vue").PropType<(options: {
        value: import("./type").TabValue;
        index: number;
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").TabValue;
    disabled: boolean;
    size: "medium" | "large";
    modelValue: import("./type").TabValue;
    placement: "left" | "top" | "bottom" | "right";
    theme: "normal" | "card";
    dragSort: boolean;
    addable: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const TabPanel: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            destroyOnHide: boolean;
            removable: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            default: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            destroyOnHide: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: BooleanConstructor;
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            panel: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            removable: BooleanConstructor;
            value: {
                type: import("vue").PropType<import("./type").TabValue>;
            };
            onRemove: import("vue").PropType<(options: {
                value: import("./type").TabValue;
                e: MouseEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "destroyOnHide" | "removable">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            default: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            destroyOnHide: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: BooleanConstructor;
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            panel: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            removable: BooleanConstructor;
            value: {
                type: import("vue").PropType<import("./type").TabValue>;
            };
            onRemove: import("vue").PropType<(options: {
                value: import("./type").TabValue;
                e: MouseEvent;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            disabled: boolean;
            destroyOnHide: boolean;
            removable: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        default: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        destroyOnHide: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: BooleanConstructor;
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        panel: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        removable: BooleanConstructor;
        value: {
            type: import("vue").PropType<import("./type").TabValue>;
        };
        onRemove: import("vue").PropType<(options: {
            value: import("./type").TabValue;
            e: MouseEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    default: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    destroyOnHide: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: BooleanConstructor;
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    panel: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    removable: BooleanConstructor;
    value: {
        type: import("vue").PropType<import("./type").TabValue>;
    };
    onRemove: import("vue").PropType<(options: {
        value: import("./type").TabValue;
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    destroyOnHide: boolean;
    removable: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Tabs;
