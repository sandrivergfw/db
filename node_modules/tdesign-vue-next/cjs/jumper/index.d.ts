import { TdJumperProps } from './type';
import './style';
export * from './type';
export declare type JumperProps = TdJumperProps;
export declare const Jumper: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            size: import("../common").SizeEnum;
            layout: "horizontal" | "vertical";
            variant: "outline" | "text";
            showCurrent: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            disabled: {
                type: import("vue").PropType<boolean | import("./type").JumperDisabledConfig>;
            };
            layout: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            showCurrent: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            tips: {
                type: import("vue").PropType<boolean | import("./type").JumperTipsConfig>;
            };
            variant: {
                type: import("vue").PropType<"outline" | "text">;
                default: "outline" | "text";
                validator(val: "outline" | "text"): boolean;
            };
            onChange: import("vue").PropType<(context: {
                e: MouseEvent;
                trigger: import("./type").JumperTrigger;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "layout" | "variant" | "showCurrent">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            disabled: {
                type: import("vue").PropType<boolean | import("./type").JumperDisabledConfig>;
            };
            layout: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            showCurrent: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            tips: {
                type: import("vue").PropType<boolean | import("./type").JumperTipsConfig>;
            };
            variant: {
                type: import("vue").PropType<"outline" | "text">;
                default: "outline" | "text";
                validator(val: "outline" | "text"): boolean;
            };
            onChange: import("vue").PropType<(context: {
                e: MouseEvent;
                trigger: import("./type").JumperTrigger;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            size: import("../common").SizeEnum;
            layout: "horizontal" | "vertical";
            variant: "outline" | "text";
            showCurrent: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: import("vue").PropType<boolean | import("./type").JumperDisabledConfig>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        showCurrent: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        tips: {
            type: import("vue").PropType<boolean | import("./type").JumperTipsConfig>;
        };
        variant: {
            type: import("vue").PropType<"outline" | "text">;
            default: "outline" | "text";
            validator(val: "outline" | "text"): boolean;
        };
        onChange: import("vue").PropType<(context: {
            e: MouseEvent;
            trigger: import("./type").JumperTrigger;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    disabled: {
        type: import("vue").PropType<boolean | import("./type").JumperDisabledConfig>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    showCurrent: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    tips: {
        type: import("vue").PropType<boolean | import("./type").JumperTipsConfig>;
    };
    variant: {
        type: import("vue").PropType<"outline" | "text">;
        default: "outline" | "text";
        validator(val: "outline" | "text"): boolean;
    };
    onChange: import("vue").PropType<(context: {
        e: MouseEvent;
        trigger: import("./type").JumperTrigger;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    size: import("../common").SizeEnum;
    layout: "horizontal" | "vertical";
    variant: "outline" | "text";
    showCurrent: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Jumper;
