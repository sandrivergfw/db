{"version":3,"file":"pagination.js","sources":["../../src/pagination/pagination.tsx"],"sourcesContent":["import { defineComponent, computed, ref, watch, toRefs } from 'vue';\nimport isNaN from 'lodash/isNaN';\nimport {\n  PageFirstIcon as TdPageFirstIcon,\n  PageLastIcon as TdPageLastIcon,\n  ChevronLeftIcon as TdChevronLeftIcon,\n  ChevronRightIcon as TdChevronRightIcon,\n  ChevronLeftDoubleIcon as TdChevronLeftDoubleIcon,\n  ChevronRightDoubleIcon as TdChevronRightDoubleIcon,\n  EllipsisIcon as TdEllipsisIcon,\n} from 'tdesign-icons-vue-next';\nimport { TdPaginationProps } from '../pagination/type';\nimport { useConfig, usePrefixClass } from '../hooks/useConfig';\nimport { useGlobalIcon } from '../hooks/useGlobalIcon';\nimport TInputNumber from '../input-number';\nimport { Option, Select } from '../select';\nimport TInputAdornment from '../input-adornment';\nimport props from './props';\nimport usePaginationClasses from './usePaginationClasses';\nimport useMoreAction from './useMoreAction';\nimport useVModel from '../hooks/useVModel';\nimport useDefaultValue from '../hooks/useDefaultValue';\nimport { useTNodeJSX } from '../hooks/tnode';\n\nconst min = 1;\n\nexport default defineComponent({\n  name: 'TPagination',\n  props,\n\n  setup(props: TdPaginationProps) {\n    const { modelValue, pageSize, current } = toRefs(props);\n    const renderTNodeJSX = useTNodeJSX();\n    const [innerCurrent, setInnerCurrent] = useVModel(\n      current,\n      modelValue,\n      props.defaultCurrent,\n      props.onCurrentChange,\n      'current',\n    );\n\n    const [innerPageSize, setInnerPageSize] = useDefaultValue(\n      pageSize,\n      props.defaultPageSize,\n      props.onPageSizeChange,\n      'pageSize',\n    );\n\n    const { t, globalConfig } = useConfig('pagination');\n    const COMPONENT_NAME = usePrefixClass('pagination');\n    const {\n      PageFirstIcon,\n      PageLastIcon,\n      ChevronLeftIcon,\n      ChevronRightIcon,\n      ChevronLeftDoubleIcon,\n      ChevronRightDoubleIcon,\n      EllipsisIcon,\n    } = useGlobalIcon({\n      PageFirstIcon: TdPageFirstIcon,\n      PageLastIcon: TdPageLastIcon,\n      ChevronLeftIcon: TdChevronLeftIcon,\n      ChevronRightIcon: TdChevronRightIcon,\n      ChevronLeftDoubleIcon: TdChevronLeftDoubleIcon,\n      ChevronRightDoubleIcon: TdChevronRightDoubleIcon,\n      EllipsisIcon: TdEllipsisIcon,\n    });\n\n    const { pageCount, ...CLASS_MAP } = usePaginationClasses(props, innerCurrent, innerPageSize, COMPONENT_NAME);\n\n    const { prevMore, isPrevMoreShow, curPageLeftCount, nextMore, isNextMoreShow, curPageRightCount } = useMoreAction(\n      props,\n      pageCount,\n      innerCurrent,\n    );\n\n    const jumpIndex = ref(innerCurrent.value);\n\n    const isFolded = computed(() => pageCount.value > props.maxPageBtn);\n\n    const pageCountOption = computed<Array<{ label: string; value: number }>>(() => {\n      const ans = [];\n      for (let i = 1; i <= pageCount.value; i++) {\n        ans.push({ value: i, label: `${i}/${pageCount.value}` });\n      }\n      return ans;\n    });\n\n    const sizeOptions = computed<Array<{ label: string; value: number }>>(() => {\n      const pageSizeOptions = props.pageSizeOptions as TdPaginationProps['pageSizeOptions'];\n      const options = pageSizeOptions.map((option) =>\n        typeof option === 'object'\n          ? option\n          : {\n              label: t(globalConfig.value.itemsPerPage, { size: option }),\n              value: Number(option),\n            },\n      );\n      return options.sort((a, b) => a.value - b.value);\n    });\n\n    const isMidEllipsis = computed(() => {\n      return props.pageEllipsisMode === 'mid';\n    });\n\n    const pages = computed(() => {\n      const array = [];\n      let start;\n      let end;\n\n      if (isFolded.value) {\n        if (isPrevMoreShow.value && isNextMoreShow.value) {\n          start = innerCurrent.value - curPageLeftCount.value;\n          end = innerCurrent.value + curPageRightCount.value;\n        } else {\n          const foldedStart = isMidEllipsis.value ? 2 : 1;\n          const foldedEnd = isMidEllipsis.value ? pageCount.value - 1 : pageCount.value;\n          start = isPrevMoreShow.value ? pageCount.value - props.foldedMaxPageBtn + 1 : foldedStart;\n          end = isPrevMoreShow.value ? foldedEnd : props.foldedMaxPageBtn;\n        }\n      } else {\n        start = 1;\n        end = pageCount.value;\n      }\n\n      for (let i = start; i <= end; i++) {\n        array.push(i);\n      }\n      return array;\n    });\n\n    // 如果页面总数发生变化并当前页数大于总页数则重置为1\n    watch(\n      () => pageCount.value,\n      () => {\n        if (innerCurrent.value > pageCount.value) innerCurrent.value = 1;\n      },\n    );\n    watch(\n      () => innerCurrent.value,\n      (val) => (jumpIndex.value = val),\n    );\n\n    const toPage: (pageIndex: number, isTriggerChange?: boolean) => void = (pageIndex, isTriggerChange) => {\n      if (props.disabled) {\n        return;\n      }\n      let current = pageIndex;\n      if (pageIndex < min) {\n        current = min;\n      } else if (pageIndex > pageCount.value) {\n        current = pageCount.value;\n      }\n      if (innerCurrent.value !== current) {\n        const prev = innerCurrent.value;\n        const pageInfo = {\n          current,\n          previous: prev,\n          pageSize: innerPageSize.value,\n        };\n        if (isTriggerChange !== false) {\n          props.onChange?.(pageInfo);\n        }\n        setInnerCurrent(current, pageInfo);\n      }\n    };\n\n    const handlePageChange = (type: string) => {\n      const pageChangeMap = {\n        prevPage: () => toPage(innerCurrent.value - 1),\n        nextPage: () => toPage(innerCurrent.value + 1),\n        prevMorePage: () => toPage(innerCurrent.value - props.foldedMaxPageBtn),\n        nextMorePage: () => toPage(innerCurrent.value + props.foldedMaxPageBtn),\n      };\n\n      pageChangeMap[type]();\n    };\n\n    const onSelectorChange: (e: string) => void = (e) => {\n      if (props.disabled) {\n        return;\n      }\n      const pageSize: number = parseInt(e, 10);\n      let pageCount = 1;\n      if (pageSize > 0) {\n        pageCount = Math.ceil(props.total / pageSize);\n      }\n\n      let isIndexChange = false;\n\n      if (innerCurrent.value > pageCount) {\n        isIndexChange = true;\n      }\n\n      /**\n       * 分页大小变化事件\n       * @param {Number} pageSize 分页大小\n       * @param {Number} index 当前页\n       */\n      const pageInfo = {\n        current: isIndexChange ? pageCount : innerCurrent.value,\n        previous: innerCurrent.value,\n        pageSize,\n      };\n      props.onChange?.(pageInfo);\n      setInnerPageSize(pageSize, pageInfo);\n      if (isIndexChange) {\n        toPage(pageCount, false);\n      }\n    };\n\n    const onJumperChange = (val: number) => {\n      const currentIndex = Math.trunc(+val);\n      if (isNaN(currentIndex)) return;\n      jumpIndex.value = currentIndex;\n      toPage(currentIndex);\n    };\n\n    return () => {\n      const { total, pageSizeOptions, size, disabled, showPageSize } = props;\n      if (pageCount.value < 1) return null;\n\n      const Jumper = (\n        <div class={CLASS_MAP.jumperClass.value}>\n          {t(globalConfig.value.jumpTo)}\n          <TInputAdornment append={`/ ${pageCount.value} ${t(globalConfig.value.page)}`}>\n            <TInputNumber\n              class={CLASS_MAP.jumperInputClass.value}\n              v-model={jumpIndex.value}\n              onBlur={onJumperChange}\n              onEnter={onJumperChange}\n              max={pageCount.value}\n              min={min}\n              size={size}\n              disabled={disabled}\n              theme=\"normal\"\n              placeholder=\"\"\n            />\n          </TInputAdornment>\n        </div>\n      );\n\n      return (\n        <div class={CLASS_MAP.paginationClass.value}>\n          {/* 数据统计区 */}\n          {renderTNodeJSX(\n            'totalContent',\n            <div class={CLASS_MAP.totalClass.value}>{t(globalConfig.value.total, { total })}</div>,\n          )}\n\n          {/* 分页器 */}\n          {showPageSize && pageSizeOptions.length > 0 && (\n            <Select\n              size={size}\n              value={innerPageSize}\n              disabled={disabled}\n              class={CLASS_MAP.sizerClass.value}\n              autoWidth={true}\n              onChange={onSelectorChange}\n              {...props.selectProps}\n            >\n              {sizeOptions.value.map((item, index) => (\n                <Option value={item.value} label={item.label} key={index} />\n              ))}\n            </Select>\n          )}\n          {/* 首页按钮 */}\n          {props.showFirstAndLastPageBtn ? (\n            <div\n              class={CLASS_MAP.preBtnClass.value}\n              onClick={() => toPage(1)}\n              disabled={props.disabled || props.current === min}\n            >\n              <PageFirstIcon />\n            </div>\n          ) : null}\n          {/* 向前按钮 */}\n          {props.showPreviousAndNextBtn ? (\n            <div\n              class={CLASS_MAP.preBtnClass.value}\n              onClick={() => handlePageChange('prevPage')}\n              disabled={disabled || innerCurrent.value === min}\n            >\n              <ChevronLeftIcon />\n            </div>\n          ) : null}\n          {/* 常规版 */}\n          {props.showPageNumber && props.theme === 'default' ? (\n            <ul class={CLASS_MAP.btnWrapClass.value}>\n              {isFolded.value && isMidEllipsis.value && (\n                <li class={CLASS_MAP.getButtonClass(1)} onClick={() => toPage(min)}>\n                  {min}\n                </li>\n              )}\n              {isFolded.value && isPrevMoreShow.value && isMidEllipsis.value ? (\n                <li\n                  class={CLASS_MAP.btnMoreClass.value}\n                  onClick={() => handlePageChange('prevMorePage')}\n                  onMouseOver={() => (prevMore.value = true)}\n                  onMouseOut={() => (prevMore.value = false)}\n                >\n                  {prevMore.value ? <ChevronLeftDoubleIcon /> : <EllipsisIcon />}\n                </li>\n              ) : null}\n              {pages.value.map((i) => (\n                <li class={CLASS_MAP.getButtonClass(i)} key={i} onClick={() => toPage(i)}>\n                  {i}\n                </li>\n              ))}\n              {isFolded.value && isNextMoreShow.value && isMidEllipsis.value ? (\n                <li\n                  class={CLASS_MAP.btnMoreClass.value}\n                  onClick={() => handlePageChange('nextMorePage')}\n                  onMouseOver={() => (nextMore.value = true)}\n                  onMouseOut={() => (nextMore.value = false)}\n                >\n                  {nextMore.value ? <ChevronRightDoubleIcon /> : <EllipsisIcon />}\n                </li>\n              ) : null}\n              {isFolded.value && isMidEllipsis.value ? (\n                <li class={CLASS_MAP.getButtonClass(pageCount.value)} onClick={() => toPage(pageCount.value)}>\n                  {pageCount.value}\n                </li>\n              ) : null}\n            </ul>\n          ) : null}\n          {/* 极简版 */}\n          {props.theme === 'simple' && Jumper}\n          {/* 向后按钮 */}\n          {props.showPreviousAndNextBtn ? (\n            <div\n              class={CLASS_MAP.nextBtnClass.value}\n              onClick={() => handlePageChange('nextPage')}\n              disabled={disabled || innerCurrent.value === pageCount.value}\n            >\n              <ChevronRightIcon />\n            </div>\n          ) : null}\n          {/* 尾页按钮 */}\n          {props.showFirstAndLastPageBtn ? (\n            <div\n              class={CLASS_MAP.nextBtnClass.value}\n              onClick={() => toPage(pageCount.value)}\n              disabled={disabled || innerCurrent.value === pageCount.value}\n            >\n              <PageLastIcon />\n            </div>\n          ) : null}\n          {/* 快速跳转 */}\n          {props.theme === 'default' && props.showJumper && Jumper}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["_isVNode","min","defineComponent","name","props","setup","toRefs","modelValue","pageSize","current","renderTNodeJSX","useTNodeJSX","useVModel","defaultCurrent","onCurrentChange","_slicedToArray","innerCurrent","setInnerCurrent","useDefaultValue","defaultPageSize","onPageSizeChange","innerPageSize","setInnerPageSize","useConfig","t","globalConfig","COMPONENT_NAME","usePrefixClass","useGlobalIcon","PageFirstIcon","TdPageFirstIcon","PageLastIcon","TdPageLastIcon","ChevronLeftIcon","TdChevronLeftIcon","ChevronRightIcon","TdChevronRightIcon","ChevronLeftDoubleIcon","TdChevronLeftDoubleIcon","ChevronRightDoubleIcon","TdChevronRightDoubleIcon","EllipsisIcon","TdEllipsisIcon","usePaginationClasses","pageCount","CLASS_MAP","_objectWithoutProperties","useMoreAction","prevMore","isPrevMoreShow","curPageLeftCount","nextMore","isNextMoreShow","curPageRightCount","jumpIndex","ref","value","isFolded","computed","maxPageBtn","ans","i","push","label","sizeOptions","pageSizeOptions","options","map","option","_typeof","itemsPerPage","size","Number","sort","a","b","isMidEllipsis","pageEllipsisMode","pages","array","start","end","foldedStart","foldedEnd","foldedMaxPageBtn","watch","val","toPage","pageIndex","isTriggerChange","disabled","prev","pageInfo","previous","onChange","handlePageChange","type","pageChangeMap","prevPage","nextPage","prevMorePage","nextMorePage","onSelectorChange","e","parseInt","Math","ceil","total","isIndexChange","onJumperChange","currentIndex","trunc","isNaN","showPageSize","Jumper","_createVNode","jumperClass","jumpTo","TInputAdornment","page","jumperInputClass","paginationClass","totalClass","length","sizerClass","selectProps","item","index","Option","showFirstAndLastPageBtn","preBtnClass","showPreviousAndNextBtn","showPageNumber","theme","btnWrapClass","getButtonClass","btnMoreClass","nextBtnClass","showJumper"],"mappings":"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"}