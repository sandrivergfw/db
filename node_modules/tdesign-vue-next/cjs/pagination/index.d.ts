import { TdPaginationProps } from './type';
import './style';
export * from './type';
export declare type PaginationProps = TdPaginationProps;
export declare const Pagination: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            total: number;
            disabled: boolean;
            size: "small" | "medium";
            modelValue: number;
            current: number;
            theme: "default" | "simple";
            pageEllipsisMode: "mid" | "both-ends";
            pageSizeOptions: (number | {
                label: string;
                value: number;
            })[];
            totalContent: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            defaultCurrent: number;
            foldedMaxPageBtn: number;
            maxPageBtn: number;
            pageSize: number;
            defaultPageSize: number;
            showFirstAndLastPageBtn: boolean;
            showJumper: boolean;
            showPageNumber: boolean;
            showPageSize: boolean;
            showPreviousAndNextBtn: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            current: {
                type: NumberConstructor;
                default: any;
            };
            modelValue: {
                type: NumberConstructor;
                default: any;
            };
            defaultCurrent: {
                type: NumberConstructor;
                default: number;
            };
            disabled: BooleanConstructor;
            foldedMaxPageBtn: {
                type: NumberConstructor;
                default: number;
            };
            maxPageBtn: {
                type: NumberConstructor;
                default: number;
            };
            pageEllipsisMode: {
                type: import("vue").PropType<"mid" | "both-ends">;
                default: "mid" | "both-ends";
                validator(val: "mid" | "both-ends"): boolean;
            };
            pageSize: {
                type: NumberConstructor;
                default: any;
            };
            defaultPageSize: {
                type: NumberConstructor;
                default: number;
            };
            pageSizeOptions: {
                type: import("vue").PropType<(number | {
                    label: string;
                    value: number;
                })[]>;
                default: () => (number | {
                    label: string;
                    value: number;
                })[];
            };
            selectProps: {
                type: import("vue").PropType<import("..").SelectProps>;
            };
            showFirstAndLastPageBtn: BooleanConstructor;
            showJumper: BooleanConstructor;
            showPageNumber: {
                type: BooleanConstructor;
                default: boolean;
            };
            showPageSize: {
                type: BooleanConstructor;
                default: boolean;
            };
            showPreviousAndNextBtn: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium">;
                default: "small" | "medium";
                validator(val: "small" | "medium"): boolean;
            };
            theme: {
                type: import("vue").PropType<"default" | "simple">;
                default: "default" | "simple";
                validator(val: "default" | "simple"): boolean;
            };
            total: {
                type: NumberConstructor;
                default: number;
            };
            totalContent: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            onChange: import("vue").PropType<(pageInfo: import("./type").PageInfo) => void>;
            onCurrentChange: import("vue").PropType<(current: number, pageInfo: import("./type").PageInfo) => void>;
            onPageSizeChange: import("vue").PropType<(pageSize: number, pageInfo: import("./type").PageInfo) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "total" | "disabled" | "size" | "modelValue" | "current" | "theme" | "pageEllipsisMode" | "pageSizeOptions" | "totalContent" | "defaultCurrent" | "foldedMaxPageBtn" | "maxPageBtn" | "pageSize" | "defaultPageSize" | "showFirstAndLastPageBtn" | "showJumper" | "showPageNumber" | "showPageSize" | "showPreviousAndNextBtn">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            current: {
                type: NumberConstructor;
                default: any;
            };
            modelValue: {
                type: NumberConstructor;
                default: any;
            };
            defaultCurrent: {
                type: NumberConstructor;
                default: number;
            };
            disabled: BooleanConstructor;
            foldedMaxPageBtn: {
                type: NumberConstructor;
                default: number;
            };
            maxPageBtn: {
                type: NumberConstructor;
                default: number;
            };
            pageEllipsisMode: {
                type: import("vue").PropType<"mid" | "both-ends">;
                default: "mid" | "both-ends";
                validator(val: "mid" | "both-ends"): boolean;
            };
            pageSize: {
                type: NumberConstructor;
                default: any;
            };
            defaultPageSize: {
                type: NumberConstructor;
                default: number;
            };
            pageSizeOptions: {
                type: import("vue").PropType<(number | {
                    label: string;
                    value: number;
                })[]>;
                default: () => (number | {
                    label: string;
                    value: number;
                })[];
            };
            selectProps: {
                type: import("vue").PropType<import("..").SelectProps>;
            };
            showFirstAndLastPageBtn: BooleanConstructor;
            showJumper: BooleanConstructor;
            showPageNumber: {
                type: BooleanConstructor;
                default: boolean;
            };
            showPageSize: {
                type: BooleanConstructor;
                default: boolean;
            };
            showPreviousAndNextBtn: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium">;
                default: "small" | "medium";
                validator(val: "small" | "medium"): boolean;
            };
            theme: {
                type: import("vue").PropType<"default" | "simple">;
                default: "default" | "simple";
                validator(val: "default" | "simple"): boolean;
            };
            total: {
                type: NumberConstructor;
                default: number;
            };
            totalContent: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            onChange: import("vue").PropType<(pageInfo: import("./type").PageInfo) => void>;
            onCurrentChange: import("vue").PropType<(current: number, pageInfo: import("./type").PageInfo) => void>;
            onPageSizeChange: import("vue").PropType<(pageSize: number, pageInfo: import("./type").PageInfo) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            total: number;
            disabled: boolean;
            size: "small" | "medium";
            modelValue: number;
            current: number;
            theme: "default" | "simple";
            pageEllipsisMode: "mid" | "both-ends";
            pageSizeOptions: (number | {
                label: string;
                value: number;
            })[];
            totalContent: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            defaultCurrent: number;
            foldedMaxPageBtn: number;
            maxPageBtn: number;
            pageSize: number;
            defaultPageSize: number;
            showFirstAndLastPageBtn: boolean;
            showJumper: boolean;
            showPageNumber: boolean;
            showPageSize: boolean;
            showPreviousAndNextBtn: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        current: {
            type: NumberConstructor;
            default: any;
        };
        modelValue: {
            type: NumberConstructor;
            default: any;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        disabled: BooleanConstructor;
        foldedMaxPageBtn: {
            type: NumberConstructor;
            default: number;
        };
        maxPageBtn: {
            type: NumberConstructor;
            default: number;
        };
        pageEllipsisMode: {
            type: import("vue").PropType<"mid" | "both-ends">;
            default: "mid" | "both-ends";
            validator(val: "mid" | "both-ends"): boolean;
        };
        pageSize: {
            type: NumberConstructor;
            default: any;
        };
        defaultPageSize: {
            type: NumberConstructor;
            default: number;
        };
        pageSizeOptions: {
            type: import("vue").PropType<(number | {
                label: string;
                value: number;
            })[]>;
            default: () => (number | {
                label: string;
                value: number;
            })[];
        };
        selectProps: {
            type: import("vue").PropType<import("..").SelectProps>;
        };
        showFirstAndLastPageBtn: BooleanConstructor;
        showJumper: BooleanConstructor;
        showPageNumber: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPageSize: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPreviousAndNextBtn: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium">;
            default: "small" | "medium";
            validator(val: "small" | "medium"): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "simple">;
            default: "default" | "simple";
            validator(val: "default" | "simple"): boolean;
        };
        total: {
            type: NumberConstructor;
            default: number;
        };
        totalContent: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean;
        };
        onChange: import("vue").PropType<(pageInfo: import("./type").PageInfo) => void>;
        onCurrentChange: import("vue").PropType<(current: number, pageInfo: import("./type").PageInfo) => void>;
        onPageSizeChange: import("vue").PropType<(pageSize: number, pageInfo: import("./type").PageInfo) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    disabled: BooleanConstructor;
    foldedMaxPageBtn: {
        type: NumberConstructor;
        default: number;
    };
    maxPageBtn: {
        type: NumberConstructor;
        default: number;
    };
    pageEllipsisMode: {
        type: import("vue").PropType<"mid" | "both-ends">;
        default: "mid" | "both-ends";
        validator(val: "mid" | "both-ends"): boolean;
    };
    pageSize: {
        type: NumberConstructor;
        default: any;
    };
    defaultPageSize: {
        type: NumberConstructor;
        default: number;
    };
    pageSizeOptions: {
        type: import("vue").PropType<(number | {
            label: string;
            value: number;
        })[]>;
        default: () => (number | {
            label: string;
            value: number;
        })[];
    };
    selectProps: {
        type: import("vue").PropType<import("..").SelectProps>;
    };
    showFirstAndLastPageBtn: BooleanConstructor;
    showJumper: BooleanConstructor;
    showPageNumber: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPageSize: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPreviousAndNextBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium">;
        default: "small" | "medium";
        validator(val: "small" | "medium"): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "simple">;
        default: "default" | "simple";
        validator(val: "default" | "simple"): boolean;
    };
    total: {
        type: NumberConstructor;
        default: number;
    };
    totalContent: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    onChange: import("vue").PropType<(pageInfo: import("./type").PageInfo) => void>;
    onCurrentChange: import("vue").PropType<(current: number, pageInfo: import("./type").PageInfo) => void>;
    onPageSizeChange: import("vue").PropType<(pageSize: number, pageInfo: import("./type").PageInfo) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    total: number;
    disabled: boolean;
    size: "small" | "medium";
    modelValue: number;
    current: number;
    theme: "default" | "simple";
    pageEllipsisMode: "mid" | "both-ends";
    pageSizeOptions: (number | {
        label: string;
        value: number;
    })[];
    totalContent: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    defaultCurrent: number;
    foldedMaxPageBtn: number;
    maxPageBtn: number;
    pageSize: number;
    defaultPageSize: number;
    showFirstAndLastPageBtn: boolean;
    showJumper: boolean;
    showPageNumber: boolean;
    showPageSize: boolean;
    showPreviousAndNextBtn: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Pagination;
