{"version":3,"file":"useUpload.js","sources":["../../../src/upload/hooks/useUpload.ts"],"sourcesContent":["import { ref, computed, toRefs } from 'vue';\nimport merge from 'lodash/merge';\nimport { SizeLimitObj, TdUploadProps, UploadChangeContext, UploadFile, UploadRemoveContext } from '../type';\nimport {\n  getFilesAndErrors,\n  validateFile,\n  upload,\n  getTriggerTextField,\n  getDisplayFiles,\n} from '../../_common/js/upload/main';\nimport { getFileUrlByFileRaw } from '../../_common/js/upload/utils';\nimport useVModel from '../../hooks/useVModel';\nimport { InnerProgressContext, OnResponseErrorContext, SuccessContext } from '../../_common/js/upload/types';\nimport { useConfig } from '../../hooks/useConfig';\n\n/**\n * 上传组件全部逻辑，方便脱离 UI，自定义 UI 组件\n */\nexport default function useUpload(props: TdUploadProps) {\n  const inputRef = ref<HTMLInputElement>();\n  // TODO: Form 表单控制上传组件是否禁用\n  const { disabled, autoUpload, isBatchUpload, multiple, files, modelValue, defaultFiles } = toRefs(props);\n  const { globalConfig, t, classPrefix } = useConfig('upload');\n  const [uploadValue, setUploadValue] = useVModel(files, modelValue, defaultFiles.value, props.onChange, 'files');\n  const xhrReq = ref<{ files: UploadFile[]; xhrReq: XMLHttpRequest }[]>([]);\n  const toUploadFiles = ref<UploadFile[]>([]);\n  const sizeOverLimitMessage = ref('');\n\n  const locale = computed(() => merge({}, globalConfig.value, props.locale));\n\n  const tipsClasses = `${classPrefix.value}-upload__tips ${classPrefix.value}-size-s`;\n  const errorClasses = [tipsClasses].concat(`${classPrefix.value}-upload__tips-error`);\n\n  // 单文件场景：触发元素文本\n  const triggerUploadText = computed(() => {\n    const field = getTriggerTextField({\n      isBatchUpload: isBatchUpload.value,\n      multiple: multiple.value,\n      status: uploadValue.value?.[0]?.status,\n      autoUpload: autoUpload.value,\n    });\n    return locale.value.triggerUploadText[field];\n  });\n\n  const uploading = ref(false);\n\n  // 文件列表显示的内容（自动上传和非自动上传有所不同）\n  const displayFiles = computed(() => {\n    return getDisplayFiles({\n      multiple: props.multiple,\n      toUploadFiles: toUploadFiles.value,\n      uploadValue: uploadValue.value,\n      autoUpload: autoUpload.value,\n      isBatchUpload: isBatchUpload.value,\n    });\n  });\n\n  const updateFilesProgress = () => {\n    if (props.autoUpload) {\n      toUploadFiles.value = [...toUploadFiles.value];\n    }\n  };\n\n  const onResponseError = (p: OnResponseErrorContext) => {\n    if (!p || !p.files || !p.files[0]) return;\n    const { response, event, files } = p;\n    updateFilesProgress();\n    props.onOneFileFail?.({\n      e: event,\n      file: files?.[0],\n      currentFiles: files,\n      failedFiles: files,\n      response,\n    });\n    // 单选或多文件替换，需要清空上一次上传成功的文件\n    if (!props.multiple || props.isBatchUpload) {\n      setUploadValue([], {\n        trigger: 'progress-fail',\n        e: p.event,\n        file: p.files[0],\n      });\n    }\n  };\n\n  // 多文件上传场景，单个文件进度\n  const onResponseProgress = (p: InnerProgressContext) => {\n    updateFilesProgress();\n    props.onProgress?.({\n      e: p.event,\n      file: p.file,\n      currentFiles: p.files,\n      percent: p.percent,\n      type: p.type,\n    });\n  };\n\n  // 多文件上传场景，单个文件上传成功后\n  const onResponseSuccess = (p: SuccessContext) => {\n    // 只有多个上传请求同时触发时才需 onOneFileSuccess\n    if (props.multiple && !props.uploadAllFilesInOneRequest) {\n      updateFilesProgress();\n      props.onOneFileSuccess?.({\n        e: p.event,\n        file: p.files[0],\n        response: p.response,\n      });\n    }\n  };\n\n  function getSizeLimitError(sizeLimitObj: SizeLimitObj) {\n    const limit = sizeLimitObj;\n    return limit.message\n      ? t(limit.message, { sizeLimit: limit.size })\n      : `${t(locale.value.sizeLimitMessage, { sizeLimit: limit.size })} ${limit.unit}`;\n  }\n\n  const handleNonAutoUpload = (toFiles: UploadFile[]) => {\n    // isBatchUpload 场景下，只要没有上传过，就不需要整体替换。只有上传过的文件才需要整体替换\n    const tmpFiles =\n      props.multiple && !(isBatchUpload.value && uploadValue.value[0]?.status === 'success')\n        ? uploadValue.value.concat(toFiles)\n        : toFiles;\n    // 图片需要本地预览\n    if (['image', 'image-flow'].includes(props.theme)) {\n      const list = tmpFiles.map(\n        (file) =>\n          new Promise((resolve) => {\n            getFileUrlByFileRaw(file.raw).then((url) => {\n              resolve({ ...file, url });\n            });\n          }),\n      );\n      Promise.all(list).then((files) => {\n        setUploadValue(files, {\n          trigger: 'add',\n          index: uploadValue.value.length,\n          file: files[0],\n        });\n      });\n    } else {\n      setUploadValue(tmpFiles, {\n        trigger: 'add',\n        index: uploadValue.value.length,\n        file: tmpFiles[0],\n      });\n    }\n    toUploadFiles.value = [];\n  };\n\n  const onFileChange = (files: FileList) => {\n    if (disabled.value) return;\n    // @ts-ignore\n    props.onSelectChange?.([...files], { currentSelectedFiles: toUploadFiles });\n    validateFile({\n      uploadValue: uploadValue.value,\n      // @ts-ignore\n      files: [...files],\n      allowUploadDuplicateFile: props.allowUploadDuplicateFile,\n      max: props.max,\n      sizeLimit: props.sizeLimit,\n      isBatchUpload: isBatchUpload.value,\n      autoUpload: autoUpload.value,\n      format: props.format,\n      beforeUpload: props.beforeUpload,\n      beforeAllFilesUpload: props.beforeAllFilesUpload,\n    }).then((args) => {\n      // 自定义全文件校验不通过\n      if (args.validateResult?.type === 'BEFORE_ALL_FILES_UPLOAD') return;\n      // 文件数量校验不通过\n      if (args.lengthOverLimit) {\n        props.onValidate?.({ type: 'FILES_OVER_LENGTH_LIMIT', files: args.files });\n      }\n      // 过滤相同的文件名\n      if (args.hasSameNameFile) {\n        props.onValidate?.({ type: 'FILTER_FILE_SAME_NAME', files: args.files });\n      }\n      // 文件大小校验结果处理\n      if (args.fileValidateList instanceof Array) {\n        const { sizeLimitErrors, toFiles } = getFilesAndErrors(args.fileValidateList, getSizeLimitError);\n        const tmpWaitingFiles = autoUpload.value ? toFiles : toUploadFiles.value.concat(toFiles);\n        toUploadFiles.value = tmpWaitingFiles;\n        props.onWaitingUploadFilesChange?.({ files: tmpWaitingFiles, trigger: 'validate' });\n        // 错误信息处理\n        if (sizeLimitErrors[0]) {\n          sizeOverLimitMessage.value = sizeLimitErrors[0].file.response.error;\n          props.onValidate?.({ type: 'FILE_OVER_SIZE_LIMIT', files: sizeLimitErrors.map((t) => t.file) });\n        } else {\n          sizeOverLimitMessage.value = '';\n        }\n        // 如果是自动上传\n        if (autoUpload.value) {\n          uploadFiles(tmpWaitingFiles);\n        } else {\n          handleNonAutoUpload(tmpWaitingFiles);\n        }\n      }\n    });\n\n    // 清空 <input type=\"file\"> 元素的文件，避免出现重复文件无法选择的情况\n    inputRef.value.value = null;\n  };\n\n  const onNormalFileChange = (e: Event) => {\n    onFileChange?.((e.target as HTMLInputElement).files);\n  };\n\n  function onDragFileChange(e: DragEvent) {\n    onFileChange?.(e.dataTransfer.files);\n  }\n\n  /**\n   * 上传文件\n   * 对外暴露方法，修改时需谨慎\n   */\n  function uploadFiles(toFiles?: UploadFile[]) {\n    const notUploadedFiles = uploadValue.value.filter((t) => t.status !== 'success');\n    const files = autoUpload.value ? toFiles || toUploadFiles.value : notUploadedFiles;\n    if (!files || !files.length) return;\n    uploading.value = true;\n    xhrReq.value = [];\n    upload({\n      action: props.action,\n      headers: props.headers,\n      name: props.name,\n      withCredentials: props.withCredentials,\n      uploadedFiles: uploadValue.value,\n      toUploadFiles: files,\n      multiple: props.multiple,\n      isBatchUpload: isBatchUpload.value,\n      autoUpload: props.autoUpload,\n      uploadAllFilesInOneRequest: props.uploadAllFilesInOneRequest,\n      useMockProgress: props.useMockProgress,\n      data: props.data,\n      requestMethod: props.requestMethod,\n      formatRequest: props.formatRequest,\n      formatResponse: props.formatResponse,\n      onResponseProgress,\n      onResponseSuccess,\n      onResponseError,\n      setXhrObject: (xhr) => {\n        if (xhr.files[0]?.raw && xhrReq.value.find((item) => item.files[0]?.raw === xhr.files[0].raw)) return;\n        xhrReq.value = xhrReq.value.concat(xhr);\n      },\n    }).then(\n      // 多文件场景时，全量文件完成后\n      ({ status, data, list, failedFiles }) => {\n        uploading.value = false;\n        if (status === 'success') {\n          if (props.autoUpload) {\n            setUploadValue([...data.files], {\n              trigger: 'add',\n              file: data.files[0],\n            });\n          }\n          props.onSuccess?.({\n            fileList: data.files,\n            currentFiles: files,\n            file: files[0],\n            // 只有全部请求完成后，才会存在该字段\n            results: list?.map((t) => t.data),\n            // 单文件单请求有一个 response，多文件多请求有多个 response\n            response: data.response || list.map((t) => t.data.response),\n          });\n          xhrReq.value = [];\n        } else if (failedFiles?.[0]) {\n          props.onFail?.({\n            e: data.event,\n            file: failedFiles[0],\n            failedFiles,\n            currentFiles: files,\n            response: data.response,\n          });\n        }\n\n        // 非自动上传，文件都在 uploadValue，不涉及 toUploadFiles\n        if (autoUpload.value) {\n          toUploadFiles.value = failedFiles;\n          props.onWaitingUploadFilesChange?.({ files: failedFiles, trigger: 'uploaded' });\n        }\n      },\n      (p) => {\n        onResponseError(p);\n        uploading.value = false;\n      },\n    );\n  }\n\n  function onInnerRemove(p: UploadRemoveContext) {\n    sizeOverLimitMessage.value = '';\n    p.e.stopPropagation?.();\n    const changePrams: UploadChangeContext = {\n      e: p.e,\n      trigger: 'remove',\n      index: p.index,\n      file: p.file,\n    };\n    // remove all files for batchUpload\n    if (props.isBatchUpload || !props.multiple) {\n      toUploadFiles.value = [];\n      props.onWaitingUploadFilesChange?.({ files: [], trigger: 'remove' });\n      setUploadValue([], changePrams);\n    } else if (!props.autoUpload) {\n      uploadValue.value.splice(p.index, 1);\n      setUploadValue([...uploadValue.value], changePrams);\n    } else {\n      // eslint-disable-next-line\n      if (p.index < uploadValue.value.length) {\n        uploadValue.value.splice(p.index, 1);\n        setUploadValue([...uploadValue.value], changePrams);\n      } else {\n        toUploadFiles.value.splice(p.index - uploadValue.value.length, 1);\n        toUploadFiles.value = [...toUploadFiles.value];\n        props.onWaitingUploadFilesChange?.({ files: [...toUploadFiles.value], trigger: 'remove' });\n      }\n    }\n    props.onRemove?.(p);\n  }\n\n  const triggerUpload = (e?: MouseEvent) => {\n    if (disabled.value) return;\n    e?.stopPropagation?.();\n    (inputRef.value as HTMLInputElement).click();\n  };\n\n  const cancelUpload = (context?: { file?: UploadFile; e?: MouseEvent }) => {\n    xhrReq.value?.forEach((item) => {\n      item.xhrReq?.abort();\n    });\n    uploading.value = false;\n\n    if (autoUpload.value) {\n      toUploadFiles.value = toUploadFiles.value.map((item) => ({ ...item, status: 'waiting' }));\n    } else {\n      setUploadValue(\n        uploadValue.value.map((item) => {\n          if (item.status !== 'success') {\n            return { ...item, status: 'waiting' };\n          }\n          return item;\n        }),\n        { trigger: 'abort' },\n      );\n    }\n\n    if (context?.file) {\n      onInnerRemove?.({ file: context.file, e: context.e, index: 0 });\n    }\n  };\n\n  return {\n    t,\n    locale,\n    classPrefix,\n    triggerUploadText,\n    toUploadFiles,\n    uploadValue,\n    displayFiles,\n    sizeOverLimitMessage,\n    uploading,\n    tipsClasses,\n    errorClasses,\n    inputRef,\n    disabled,\n    xhrReq,\n    uploadFiles,\n    onFileChange,\n    onNormalFileChange,\n    onDragFileChange,\n    onInnerRemove,\n    triggerUpload,\n    cancelUpload,\n  };\n}\n"],"names":["useUpload","props","inputRef","ref","toRefs","disabled","autoUpload","isBatchUpload","multiple","files","modelValue","defaultFiles","useConfig","globalConfig","t","classPrefix","useVModel","value","onChange","_slicedToArray","uploadValue","setUploadValue","xhrReq","toUploadFiles","sizeOverLimitMessage","locale","computed","merge","tipsClasses","errorClasses","concat","triggerUploadText","field","getTriggerTextField","status","uploading","displayFiles","getDisplayFiles","updateFilesProgress","_toConsumableArray","onResponseError","p","response","event","onOneFileFail","e","file","currentFiles","failedFiles","trigger","onResponseProgress","onProgress","percent","type","onResponseSuccess","uploadAllFilesInOneRequest","onOneFileSuccess","getSizeLimitError","sizeLimitObj","limit","message","sizeLimit","size","sizeLimitMessage","unit","handleNonAutoUpload","toFiles","tmpFiles","includes","theme","list","map","Promise","resolve","getFileUrlByFileRaw","raw","then","url","all","index","length","onFileChange","onSelectChange","currentSelectedFiles","validateFile","allowUploadDuplicateFile","max","format","beforeUpload","beforeAllFilesUpload","args","validateResult","lengthOverLimit","onValidate","hasSameNameFile","fileValidateList","Array","getFilesAndErrors","sizeLimitErrors","tmpWaitingFiles","onWaitingUploadFilesChange","error","uploadFiles","onNormalFileChange","target","onDragFileChange","dataTransfer","notUploadedFiles","filter","upload","action","headers","name","withCredentials","uploadedFiles","useMockProgress","data","requestMethod","formatRequest","formatResponse","setXhrObject","xhr","find","item","onSuccess","fileList","results","onFail","onInnerRemove","stopPropagation","changePrams","splice","onRemove","triggerUpload","click","cancelUpload","context","forEach","abort"],"mappings":"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"}