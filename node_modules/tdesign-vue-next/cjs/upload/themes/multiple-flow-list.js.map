{"version":3,"file":"multiple-flow-list.js","sources":["../../../node_modules/classnames/index.js","../../../src/upload/themes/multiple-flow-list.tsx"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import { reactive, h, computed, defineComponent, toRefs, PropType } from 'vue';\nimport classNames from 'classnames';\nimport {\n  BrowseIcon as TdBrowseIcon,\n  DeleteIcon as TdDeleteIcon,\n  CheckCircleFilledIcon as TdCheckCircleFilledIcon,\n  ErrorCircleFilledIcon as TdErrorCircleFilledIcon,\n  TimeFilledIcon as TdTimeFilledIcon,\n} from 'tdesign-icons-vue-next';\nimport useGlobalIcon from '../../hooks/useGlobalIcon';\nimport ImageViewer from '../../image-viewer';\nimport { CommonDisplayFileProps } from '../interface';\nimport { commonProps } from '../constants';\nimport TButton from '../../button';\nimport { UploadFile, TdUploadProps } from '../type';\nimport useDrag, { UploadDragEvents } from '../hooks/useDrag';\nimport { abridgeName, returnFileSize } from '../../_common/js/upload/utils';\nimport TLoading from '../../loading';\nimport Link from '../../link';\nimport { useTNodeJSX } from '../../hooks';\n\nexport interface ImageFlowListProps extends CommonDisplayFileProps {\n  uploadFiles?: (toFiles?: UploadFile[]) => void;\n  cancelUpload?: (context: { e: MouseEvent; file?: UploadFile }) => void;\n  dragEvents: UploadDragEvents;\n  disabled?: boolean;\n  isBatchUpload?: boolean;\n  draggable?: boolean;\n  onPreview?: TdUploadProps['onPreview'];\n}\n\nexport default defineComponent({\n  name: 'UploadMultipleFlowList',\n\n  props: {\n    ...commonProps,\n    uploadFiles: Function as PropType<ImageFlowListProps['uploadFiles']>,\n    cancelUpload: Function as PropType<ImageFlowListProps['cancelUpload']>,\n    dragEvents: Object as PropType<ImageFlowListProps['dragEvents']>,\n    disabled: Boolean,\n    isBatchUpload: Boolean,\n    draggable: Boolean,\n    onPreview: Function as PropType<ImageFlowListProps['onPreview']>,\n  },\n\n  setup(props: ImageFlowListProps, { slots }) {\n    // locale 已经在 useUpload 中统一处理优先级\n    const { locale, uploading, disabled, displayFiles, classPrefix } = toRefs(props);\n    const uploadPrefix = `${classPrefix.value}-upload`;\n\n    const renderTNodeJSX = useTNodeJSX();\n\n    const { BrowseIcon, DeleteIcon, CheckCircleFilledIcon, ErrorCircleFilledIcon, TimeFilledIcon } = useGlobalIcon({\n      BrowseIcon: TdBrowseIcon,\n      DeleteIcon: TdDeleteIcon,\n      CheckCircleFilledIcon: TdCheckCircleFilledIcon,\n      ErrorCircleFilledIcon: TdErrorCircleFilledIcon,\n      TimeFilledIcon: TdTimeFilledIcon,\n    });\n\n    const drag = useDrag(props.dragEvents);\n\n    const uploadText = computed(() => {\n      if (uploading.value) return `${locale.value.progress.uploadingText}`;\n      return locale.value.triggerUploadText.normal;\n    });\n\n    const innerDragEvents = computed(() => {\n      const draggable = props.draggable === undefined ? true : props.draggable;\n      return draggable\n        ? {\n            onDrop: drag.handleDrop,\n            onDragenter: drag.handleDragenter,\n            onDragover: drag.handleDragover,\n            onDragleave: drag.handleDragleave,\n          }\n        : {};\n    });\n\n    const getStatusMap = () => {\n      const iconMap = {\n        success: <CheckCircleFilledIcon />,\n        fail: <ErrorCircleFilledIcon />,\n        progress: <TLoading />,\n        waiting: <TimeFilledIcon />,\n      };\n      const { progress } = locale.value;\n      const textMap = {\n        success: progress?.successText,\n        fail: progress?.failText,\n        progress: progress?.uploadingText,\n        waiting: progress?.waitingText,\n      };\n      return {\n        iconMap,\n        textMap,\n      };\n    };\n\n    const renderEmpty = () => (\n      <div class={`${uploadPrefix}__flow-empty`}>\n        {drag.dragActive.value ? locale.value.dragger.dragDropText : locale.value.dragger.clickAndDragText}\n      </div>\n    );\n\n    const renderImgItem = (file: UploadFile, index: number) => {\n      const { iconMap, textMap } = getStatusMap();\n      return (\n        <li class={`${uploadPrefix}__card-item`} key={file.name + index + file.percent + file.status}>\n          <div\n            class={classNames([\n              `${uploadPrefix}__card-content`,\n              { [`${classPrefix.value}-is-bordered`]: file.status !== 'waiting' },\n            ])}\n          >\n            {['fail', 'progress'].includes(file.status) && (\n              <div class={`${uploadPrefix}__card-status-wrap`}>\n                {iconMap[file.status as 'fail' | 'progress']}\n                <p>\n                  {textMap[file.status as 'fail' | 'progress']}\n                  {file.status === 'progress' ? ` ${file.percent}%` : ''}\n                </p>\n              </div>\n            )}\n            {(['waiting', 'success'].includes(file.status) || (!file.status && file.url)) && (\n              <img\n                class={`${uploadPrefix}__card-image`}\n                src={file.url || '//tdesign.gtimg.com/tdesign-default-img.png'}\n              />\n            )}\n            <div class={`${uploadPrefix}__card-mask`}>\n              {file.url && (\n                <span class={`${uploadPrefix}__card-mask-item`}>\n                  <ImageViewer\n                    images={displayFiles.value.map((t) => t.url)}\n                    defaultIndex={index}\n                    trigger={(h, { open }) => (\n                      <BrowseIcon\n                        onClick={({ e }: { e: MouseEvent }) => {\n                          open();\n                          props.onPreview?.({ file, index, e });\n                        }}\n                      />\n                    )}\n                  ></ImageViewer>\n                  <span class={`${uploadPrefix}__card-mask-item-divider`}></span>\n                </span>\n              )}\n              {!disabled.value && (\n                <span\n                  class={`${uploadPrefix}__card-mask-item`}\n                  onClick={(e: MouseEvent) => props.onRemove({ e, index, file })}\n                >\n                  <DeleteIcon />\n                </span>\n              )}\n            </div>\n          </div>\n          <p class={`${uploadPrefix}__card-name`}>{abridgeName(file.name)}</p>\n        </li>\n      );\n    };\n\n    const renderStatus = (file: UploadFile) => {\n      const { iconMap, textMap } = getStatusMap();\n      return (\n        <div class={`${uploadPrefix}__flow-status`}>\n          {iconMap[file.status]}\n          <span>\n            {textMap[file.status]}\n            {file.status === 'progress' ? ` ${file.percent}%` : ''}\n          </span>\n        </div>\n      );\n    };\n\n    const renderNormalActionCol = (file: UploadFile, index: number) => (\n      <td>\n        <Link\n          theme=\"primary\"\n          hover=\"color\"\n          content={locale.value?.triggerUploadText?.delete}\n          onClick={(e: MouseEvent) => props.onRemove({ e, index, file })}\n        ></Link>\n      </td>\n    );\n\n    // batchUpload action col\n    const renderBatchActionCol = (index: number) =>\n      // 第一行数据才需要合并单元格\n      index === 0 ? (\n        <td rowSpan={displayFiles.value.length} class={`${uploadPrefix}__flow-table__batch-row`}>\n          <Link\n            theme=\"primary\"\n            hover=\"color\"\n            content={locale.value?.triggerUploadText?.delete}\n            onClick={(e: MouseEvent) => props.onRemove({ e, index: -1, file: null })}\n          ></Link>\n        </td>\n      ) : null;\n\n    const renderFileList = () => {\n      const customList = renderTNodeJSX('fileListDisplay', {\n        params: {\n          files: props.displayFiles,\n          dragEvents: innerDragEvents.value,\n        },\n      });\n      if (customList) return customList;\n      return (\n        <table class={`${uploadPrefix}__flow-table`} {...innerDragEvents.value}>\n          <thead>\n            <tr>\n              <th>{locale.value.file?.fileNameText}</th>\n              <th style={{ minWidth: '120px' }}>{locale.value.file?.fileSizeText}</th>\n              <th style={{ minWidth: '120px' }}>{locale.value.file?.fileStatusText}</th>\n              {disabled.value ? null : <th>{locale.value.file?.fileOperationText}</th>}\n            </tr>\n          </thead>\n          <tbody>\n            {!displayFiles.value.length && (\n              <tr>\n                <td colSpan={4}>{renderEmpty()}</td>\n              </tr>\n            )}\n            {displayFiles.value.map((file, index) => {\n              // 合并操作出现条件为：当前为合并上传模式且列表内没有待上传文件\n              const showBatchUploadAction = props.isBatchUpload;\n              const deleteNode =\n                showBatchUploadAction && !displayFiles.value.find((item) => item.status !== 'success')\n                  ? renderBatchActionCol(index)\n                  : renderNormalActionCol(file, index);\n              const fileName = props.abridgeName?.length ? abridgeName(file.name, ...props.abridgeName) : file.name;\n              return (\n                <tr key={file.name + index}>\n                  <td>\n                    {file.url ? (\n                      <Link href={file.url} target=\"_blank\" hover=\"color\">\n                        {fileName}\n                      </Link>\n                    ) : (\n                      fileName\n                    )}\n                  </td>\n                  <td>{returnFileSize(file.size)}</td>\n                  <td>{renderStatus(file)}</td>\n                  {disabled.value ? null : deleteNode}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      );\n    };\n\n    return () => {\n      const cardClassName = `${uploadPrefix}__flow-card-area`;\n      return (\n        <div class={`${uploadPrefix}__flow ${uploadPrefix}__flow-${props.theme}`}>\n          <div class={`${uploadPrefix}__flow-op`}>\n            {slots.default?.()}\n            {props.placeholder && (\n              <small class={`${uploadPrefix}__flow-placeholder ${uploadPrefix}__placeholder`}>\n                {props.placeholder}\n              </small>\n            )}\n          </div>\n\n          {props.theme === 'image-flow' && (\n            <div class={cardClassName} {...innerDragEvents.value}>\n              {displayFiles.value.length ? (\n                <ul class={`${uploadPrefix}__card clearfix`}>\n                  {displayFiles.value.map((file, index) => renderImgItem(file, index))}\n                </ul>\n              ) : (\n                renderEmpty()\n              )}\n            </div>\n          )}\n\n          {props.theme === 'file-flow' &&\n            (displayFiles.value.length ? (\n              renderFileList()\n            ) : (\n              <div class={cardClassName} {...innerDragEvents.value}>\n                {renderEmpty()}\n              </div>\n            ))}\n\n          {!props.autoUpload && (\n            <div class={`${uploadPrefix}__flow-bottom`}>\n              <TButton\n                theme=\"default\"\n                onClick={(e) => props.cancelUpload?.({ e })}\n                disabled={disabled.value || !uploading.value}\n                content={locale.value?.cancelUploadText}\n              ></TButton>\n              <TButton\n                disabled={disabled.value || uploading.value || !displayFiles.value.length}\n                theme=\"primary\"\n                loading={uploading.value}\n                onClick={() => props.uploadFiles?.()}\n                content={uploadText.value}\n              ></TButton>\n            </div>\n          )}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","window","_isVNode","defineComponent","name","props","commonProps","uploadFiles","Function","cancelUpload","dragEvents","disabled","Boolean","isBatchUpload","draggable","onPreview","setup","slots","toRefs","locale","uploading","displayFiles","classPrefix","uploadPrefix","value","renderTNodeJSX","useTNodeJSX","useGlobalIcon","BrowseIcon","TdBrowseIcon","DeleteIcon","TdDeleteIcon","CheckCircleFilledIcon","TdCheckCircleFilledIcon","ErrorCircleFilledIcon","TdErrorCircleFilledIcon","TimeFilledIcon","TdTimeFilledIcon","drag","useDrag","uploadText","computed","progress","uploadingText","triggerUploadText","normal","innerDragEvents","onDrop","handleDrop","onDragenter","handleDragenter","onDragover","handleDragover","onDragleave","handleDragleave","getStatusMap","iconMap","success","_createVNode","fail","TLoading","waiting","textMap","successText","failText","waitingText","renderEmpty","dragActive","dragger","dragDropText","clickAndDragText","renderImgItem","file","index","percent","status","url","ImageViewer","map","t","h","open","e","onRemove","abridgeName","renderStatus","renderNormalActionCol","Link","renderBatchActionCol","renderFileList","customList","params","files","_mergeProps","fileNameText","minWidth","fileSizeText","fileStatusText","fileOperationText","showBatchUploadAction","deleteNode","find","item","fileName","_toConsumableArray","returnFileSize","size","cardClassName","theme","placeholder","autoUpload","TButton","cancelUploadText"],"mappings":"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"}