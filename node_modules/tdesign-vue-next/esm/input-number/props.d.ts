import { TdInputNumberProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    align: {
        type: PropType<"center" | "left" | "right">;
        validator(val: TdInputNumberProps['align']): boolean;
    };
    allowInputOverLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoWidth: BooleanConstructor;
    decimalPlaces: {
        type: NumberConstructor;
        default: any;
    };
    disabled: BooleanConstructor;
    format: {
        type: PropType<(value: import("./type").InputNumberValue, context?: {
            fixedNumber?: import("./type").InputNumberValue;
        }) => import("./type").InputNumberValue>;
    };
    inputProps: {
        type: PropType<import("..").TdInputProps>;
    };
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    largeNumber: BooleanConstructor;
    max: {
        type: PropType<import("./type").InputNumberValue>;
        default: number;
    };
    min: {
        type: PropType<import("./type").InputNumberValue>;
        default: number;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: TdInputNumberProps['size']): boolean;
    };
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        validator(val: TdInputNumberProps['status']): boolean;
    };
    step: {
        type: PropType<import("./type").InputNumberValue>;
        default: number;
    };
    suffix: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    theme: {
        type: PropType<"normal" | "column" | "row">;
        default: "normal" | "column" | "row";
        validator(val: TdInputNumberProps['theme']): boolean;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: PropType<import("./type").InputNumberValue>;
        default: any;
    };
    modelValue: {
        type: PropType<import("./type").InputNumberValue>;
        default: any;
    };
    defaultValue: {
        type: PropType<import("./type").InputNumberValue>;
    };
    onBlur: PropType<(value: import("./type").InputNumberValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: import("./type").InputNumberValue, context: import("./type").ChangeContext) => void>;
    onEnter: PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onFocus: PropType<(value: import("./type").InputNumberValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onValidate: PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
};
export default _default;
