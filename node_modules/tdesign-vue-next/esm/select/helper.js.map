{"version":3,"file":"helper.js","sources":["../../src/select/helper.ts"],"sourcesContent":["import { InjectionKey, ComputedRef } from 'vue';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { TdSelectProps, TdOptionProps, SelectValue, SelectOption } from './type';\n\nexport const selectInjectKey: InjectionKey<\n  ComputedRef<{\n    hoverIndex: number;\n    selectValue: TdSelectProps['value'];\n    size: TdSelectProps['size'];\n    max: TdSelectProps['max'];\n    reserveKeyword: TdSelectProps['reserveKeyword'];\n    multiple: TdSelectProps['multiple'];\n    handleValueChange: TdSelectProps['onChange'];\n    handleCreate: TdSelectProps['onCreate'];\n    handlerInputChange: TdSelectProps['onInputChange'];\n    handlePopupVisibleChange: TdSelectProps['onPopupVisibleChange'];\n    popupContentRef: ComputedRef<HTMLElement>;\n    indeterminate: boolean;\n    isCheckAll: boolean;\n    onCheckAllChange: (checked: boolean) => void;\n    getSelectedOptions: (selectValue?: SelectValue[] | SelectValue) => TdOptionProps[];\n  }>\n> = Symbol('selectProvide');\n\nexport const getSingleContent = (\n  value: TdSelectProps['value'],\n  optionsMap: ComputedRef<Map<SelectValue<SelectOption>, TdOptionProps>>,\n): string => {\n  const option = optionsMap.value.get(value);\n  return option?.label as string;\n};\n\nexport const getMultipleContent = (\n  value: SelectValue[],\n  optionsMap: ComputedRef<Map<SelectValue<SelectOption>, TdOptionProps>>,\n) => {\n  const res = [];\n  for (const iterator of value) {\n    const resLabel = getSingleContent(iterator, optionsMap);\n    if (resLabel) {\n      res.push(resLabel);\n    }\n  }\n  return res;\n};\n\nexport const getNewMultipleValue = (innerValue: SelectValue[], optionValue: SelectValue) => {\n  const value = cloneDeep(innerValue) as SelectValue[];\n  const valueIndex = value.indexOf(optionValue);\n  if (valueIndex < 0) {\n    value.push(optionValue);\n  } else {\n    value.splice(valueIndex, 1);\n  }\n  return {\n    value,\n    isCheck: valueIndex < 0,\n  };\n};\n"],"names":["selectInjectKey","Symbol","getSingleContent","value","optionsMap","option","get","label","getMultipleContent","res","iterator","resLabel","push","getNewMultipleValue","innerValue","optionValue","cloneDeep","valueIndex","indexOf","splice","isCheck"],"mappings":";;;;;;;;;;;IAIaA,eAAA,GAkBTC,OAAO,eAAe,EAAA;AAEb,IAAAC,gBAAA,GAAmB,SAAnBA,gBAAA,CACXC,KAAA,EACAC,UACW,EAAA;EACX,IAAMC,MAAS,GAAAD,UAAA,CAAWD,KAAM,CAAAG,GAAA,CAAIH,KAAK,CAAA,CAAA;AACzC,EAAA,OAAOE,MAAQ,KAARA,IAAAA,IAAAA,MAAQ,KAARA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAQ,CAAAE,KAAA,CAAA;AACjB,EAAA;AAEa,IAAAC,kBAAA,GAAqB,SAArBA,kBAAA,CACXL,KAAA,EACAC,UACG,EAAA;EACH,IAAMK,MAAM,EAAC,CAAA;AAAA,EAAA,IAAA,SAAA,GAAA,0BAAA,CACUN,KAAO,CAAA;AAAA,IAAA,KAAA,CAAA;AAAA,EAAA,IAAA;IAA9B,KAA8B,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;AAAA,MAAA,IAAnBO;AACH,MAAA,IAAAC,QAAA,GAAWT,gBAAiB,CAAAQ,QAAA,EAAUN,UAAU,CAAA,CAAA;AACtD,MAAA,IAAIO,QAAU,EAAA;AACZF,QAAAA,GAAA,CAAIG,KAAKD,QAAQ,CAAA,CAAA;AACnB,OAAA;AACF,KAAA;AAAA,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,GAAA,SAAA;AAAA,IAAA,SAAA,CAAA,CAAA,EAAA,CAAA;AAAA,GAAA;AACO,EAAA,OAAAF,GAAA,CAAA;AACT,EAAA;AAEa,IAAAI,mBAAA,GAAsB,SAAtBA,mBAAA,CAAuBC,UAAA,EAA2BC,WAA6B,EAAA;AACpF,EAAA,IAAAZ,KAAA,GAAQa,UAAUF,UAAU,CAAA,CAAA;AAC5B,EAAA,IAAAG,UAAA,GAAad,KAAM,CAAAe,OAAA,CAAQH,WAAW,CAAA,CAAA;EAC5C,IAAIE,aAAa,CAAG,EAAA;AAClBd,IAAAA,KAAA,CAAMS,KAAKG,WAAW,CAAA,CAAA;AACxB,GAAO,MAAA;AACCZ,IAAAA,KAAA,CAAAgB,MAAA,CAAOF,YAAY,CAAC,CAAA,CAAA;AAC5B,GAAA;EACO,OAAA;AACLd,IAAAA,KAAA,EAAAA,KAAA;IACAiB,SAASH,UAAa,GAAA,CAAA;GACxB,CAAA;AACF;;;;"}