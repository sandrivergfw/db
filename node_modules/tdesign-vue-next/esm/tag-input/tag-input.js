/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, toRefs, reactive, computed, nextTick, createVNode, mergeProps } from 'vue';
import { CloseCircleFilledIcon } from 'tdesign-icons-vue-next';
import { Input } from '../input/index.js';
import props from './props.js';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import { useConfig } from '../config-provider/useConfig.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { useGlobalIcon } from '../hooks/useGlobalIcon.js';
import useTagScroll from './hooks/useTagScroll.js';
import useTagList from './useTagList.js';
import useHover from './hooks/useHover.js';
import useDefaultValue from '../hooks/useDefaultValue.js';
import useDragSorter from './hooks/useDragSorter.js';
import '../input/input.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../input/props.js';
import '../form/hooks.js';
import '../hooks/tnode.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../input/useInput.js';
import '../form/const.js';
import '../hooks/index.js';
import '../hooks/icon.js';
import '../hooks/slot.js';
import '../hooks/useCommonClassName.js';
import '../hooks/useDestroyOnClose.js';
import '../hooks/useKeepAnimation.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../hooks/useRipple.js';
import '../utils/set-style.js';
import '../hooks/useVirtualScroll.js';
import '../hooks/useVModel.js';
import '../input/useLengthLimit.js';
import '@babel/runtime/helpers/typeof';
import '../_common/js/log/index.js';
import '../_common/js/log/log.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../input/useInputEventHandler.js';
import '../input/useInputWidth.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../config-provider/type.js';
import '../input/input-group.js';
import '../utils/withInstall.js';
import '../input/style';
import '../input/type.js';
import '../tag/index.js';
import '../tag/tag.js';
import '../tag/props.js';
import '../tag/check-tag.js';
import '../tag/check-tag-props.js';
import '../tag/style';
import '../tag/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var useComponentClassName = function useComponentClassName() {
  return {
    NAME_CLASS: usePrefixClass("tag-input"),
    CLEAR_CLASS: usePrefixClass("tag-input__suffix-clear"),
    BREAK_LINE_CLASS: usePrefixClass("tag-input--break-line")
  };
};
var _TagInput = defineComponent({
  name: "TTagInput",
  props: _objectSpread({}, props),
  setup: function setup(props2) {
    var _useComponentClassNam = useComponentClassName(),
      NAME_CLASS = _useComponentClassNam.NAME_CLASS,
      CLEAR_CLASS = _useComponentClassNam.CLEAR_CLASS,
      BREAK_LINE_CLASS = _useComponentClassNam.BREAK_LINE_CLASS;
    var _useGlobalIcon = useGlobalIcon({
        CloseCircleFilledIcon: CloseCircleFilledIcon
      }),
      CloseCircleFilledIcon$1 = _useGlobalIcon.CloseCircleFilledIcon;
    var _toRefs = toRefs(props2),
      inputValue = _toRefs.inputValue;
    var _useDefault = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      tInputValue = _useDefault2[0],
      setTInputValue = _useDefault2[1];
    var _toRefs2 = toRefs(props2),
      excessTagsDisplayType = _toRefs2.excessTagsDisplayType,
      readonly = _toRefs2.readonly,
      disabled = _toRefs2.disabled,
      clearable = _toRefs2.clearable,
      placeholder = _toRefs2.placeholder;
    var _useHover = useHover({
        readonly: props2.readonly,
        disabled: props2.disabled,
        onMouseenter: props2.onMouseenter,
        onMouseleave: props2.onMouseleave
      }),
      isHover = _useHover.isHover,
      addHover = _useHover.addHover,
      cancelHover = _useHover.cancelHover;
    var _useConfig = useConfig(),
      prefix = _useConfig.classPrefix;
    var _useDragSorter = useDragSorter(_objectSpread(_objectSpread({}, props2), {}, {
        sortOnDraggable: props2.dragSort,
        onDragOverCheck: {
          x: true,
          targetClassNameRegExp: new RegExp("^".concat(prefix, "-tag"))
        }
      })),
      getDragProps = _useDragSorter.getDragProps;
    var _useTagScroll = useTagScroll(props2),
      scrollToRight = _useTagScroll.scrollToRight,
      onWheel = _useTagScroll.onWheel,
      scrollToRightOnEnter = _useTagScroll.scrollToRightOnEnter,
      scrollToLeftOnLeave = _useTagScroll.scrollToLeftOnLeave,
      tagInputRef = _useTagScroll.tagInputRef;
    var _useTagList = useTagList(reactive(_objectSpread(_objectSpread({}, toRefs(props2)), {}, {
        getDragProps: getDragProps
      }))),
      tagValue = _useTagList.tagValue,
      onInnerEnter = _useTagList.onInnerEnter,
      onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp,
      clearAll = _useTagList.clearAll,
      renderLabel = _useTagList.renderLabel,
      onClose = _useTagList.onClose;
    var classes = computed(function () {
      return [NAME_CLASS.value, _defineProperty({}, BREAK_LINE_CLASS.value, excessTagsDisplayType.value === "break-line")];
    });
    var tagInputPlaceholder = computed(function () {
      var _tagValue$value;
      return !((_tagValue$value = tagValue.value) !== null && _tagValue$value !== void 0 && _tagValue$value.length) ? placeholder.value : "";
    });
    var showClearIcon = computed(function () {
      var _tagValue$value2;
      return Boolean(!readonly.value && !disabled.value && clearable.value && isHover.value && (((_tagValue$value2 = tagValue.value) === null || _tagValue$value2 === void 0 ? void 0 : _tagValue$value2.length) || tInputValue.value));
    });
    var onInputEnter = function onInputEnter(value, context) {
      var _context$e, _context$e$preventDef;
      (_context$e = context.e) === null || _context$e === void 0 ? void 0 : (_context$e$preventDef = _context$e.preventDefault) === null || _context$e$preventDef === void 0 ? void 0 : _context$e$preventDef.call(_context$e);
      setTInputValue("", {
        e: context.e,
        trigger: "enter"
      });
      onInnerEnter(value, context);
      nextTick(function () {
        scrollToRight();
      });
    };
    var onClick = function onClick() {
      tagInputRef.value.focus();
    };
    var onClearClick = function onClearClick(context) {
      var _props2$onClear;
      clearAll(context);
      setTInputValue("", {
        e: context.e,
        trigger: "clear"
      });
      (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, context);
    };
    return {
      CLEAR_CLASS: CLEAR_CLASS,
      CloseCircleFilledIcon: CloseCircleFilledIcon$1,
      tagValue: tagValue,
      tInputValue: tInputValue,
      isHover: isHover,
      tagInputPlaceholder: tagInputPlaceholder,
      showClearIcon: showClearIcon,
      tagInputRef: tagInputRef,
      setTInputValue: setTInputValue,
      addHover: addHover,
      cancelHover: cancelHover,
      onInputEnter: onInputEnter,
      onInnerEnter: onInnerEnter,
      onInputBackspaceKeyUp: onInputBackspaceKeyUp,
      renderLabel: renderLabel,
      onWheel: onWheel,
      scrollToRightOnEnter: scrollToRightOnEnter,
      scrollToLeftOnLeave: scrollToLeftOnLeave,
      onClick: onClick,
      onClearClick: onClearClick,
      onClose: onClose,
      classes: classes
    };
  },
  render: function render() {
    var _this = this,
      _this$inputProps,
      _this$tagValue;
    var CloseCircleFilledIcon = this.CloseCircleFilledIcon;
    var suffixIconNode = this.showClearIcon ? createVNode(CloseCircleFilledIcon, {
      "class": this.CLEAR_CLASS,
      "onClick": this.onClearClick
    }, null) : renderTNodeJSX(this, "suffixIcon");
    var displayNode = renderTNodeJSX(this, "valueDisplay", {
      params: {
        value: this.tagValue,
        onClose: function onClose(index, item) {
          return _this.onClose({
            index: index,
            item: item
          });
        }
      }
    });
    var _label = renderTNodeJSX(this, "label", {
      silent: true
    });
    return createVNode(Input, mergeProps({
      "ref": "tagInputRef",
      "readonly": this.readonly,
      "value": this.tInputValue,
      "autoWidth": true,
      "size": this.size,
      "disabled": this.disabled,
      "label": function label() {
        return _this.renderLabel({
          displayNode: displayNode,
          label: _label
        });
      },
      "class": this.classes,
      "tips": this.tips,
      "status": this.status,
      "placeholder": this.tagInputPlaceholder,
      "suffix": this.suffix,
      "suffixIcon": function suffixIcon() {
        return suffixIconNode;
      },
      "showInput": !((_this$inputProps = this.inputProps) !== null && _this$inputProps !== void 0 && _this$inputProps.readonly) || !this.tagValue || !((_this$tagValue = this.tagValue) !== null && _this$tagValue !== void 0 && _this$tagValue.length),
      "keepWrapperWidth": !this.autoWidth,
      "onWheel": this.onWheel,
      "onChange": function onChange(val, context) {
        _this.setTInputValue(val, _objectSpread(_objectSpread({}, context), {}, {
          trigger: "input"
        }));
      },
      "onPaste": this.onPaste,
      "onEnter": this.onInputEnter,
      "onKeyup": this.onInputBackspaceKeyUp,
      "onMouseenter": function onMouseenter(context) {
        _this.addHover(context);
        _this.scrollToRightOnEnter();
      },
      "onMouseleave": function onMouseleave(context) {
        _this.cancelHover(context);
        _this.scrollToLeftOnLeave();
      },
      "onFocus": function onFocus(inputValue, context) {
        var _this$onFocus;
        (_this$onFocus = _this.onFocus) === null || _this$onFocus === void 0 ? void 0 : _this$onFocus.call(_this, _this.tagValue, {
          e: context.e,
          inputValue: inputValue
        });
      },
      "onBlur": function onBlur(inputValue, context) {
        var _this$onBlur;
        (_this$onBlur = _this.onBlur) === null || _this$onBlur === void 0 ? void 0 : _this$onBlur.call(_this, _this.tagValue, {
          e: context.e,
          inputValue: inputValue
        });
      },
      "onClick": this.onClick
    }, this.inputProps), null);
  }
});

export { _TagInput as default };
//# sourceMappingURL=tag-input.js.map
