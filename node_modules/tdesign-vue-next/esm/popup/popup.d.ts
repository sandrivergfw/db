import { Ref, ComputedRef } from 'vue';
import { PopupVisibleChangeContext } from './type';
declare const _default: import("vue").DefineComponent<{
    expandAnimation: {
        type: BooleanConstructor;
    };
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    delay: {
        type: import("vue").PropType<number | number[]>;
    };
    destroyOnClose: BooleanConstructor;
    disabled: BooleanConstructor;
    hideEmptyPopup: BooleanConstructor;
    overlayClassName: {
        type: import("vue").PropType<import("../common").ClassName>;
    };
    overlayInnerClassName: {
        type: import("vue").PropType<import("../common").ClassName>;
    };
    overlayInnerStyle: {
        type: import("vue").PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
    };
    overlayStyle: {
        type: import("vue").PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
    };
    placement: {
        type: StringConstructor;
        default: string;
    };
    showArrow: BooleanConstructor;
    trigger: {
        type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
        default: "click" | "focus" | "context-menu" | "hover";
        validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onScroll: import("vue").PropType<(context: {
        e: WheelEvent;
    }) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, context: PopupVisibleChangeContext) => void>;
}, {
    containerRef: Ref<import("vue").DefineComponent<{
        parent: ObjectConstructor;
        visible: BooleanConstructor;
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
            default: string;
        };
        forwardRef: import("vue").PropType<(el: HTMLElement) => void>;
    }, {
        mountContent: Ref<boolean>;
        triggerRef: Ref<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> & {
            $el: HTMLElement;
        }>;
        unmountContent(): void;
        emitResize: () => void;
        emitContentMounted: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("resize" | "contentMounted")[], "resize" | "contentMounted", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        parent: ObjectConstructor;
        visible: BooleanConstructor;
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
            default: string;
        };
        forwardRef: import("vue").PropType<(el: HTMLElement) => void>;
    }>> & {
        onResize?: (...args: any[]) => any;
        onContentMounted?: (...args: any[]) => any;
    }, {
        visible: boolean;
        attach: import("../common").AttachNode;
    }>>;
    innerVisible: Ref<boolean>;
    triggerEl: Ref<HTMLElement>;
    overlayEl: Ref<HTMLElement>;
    popperEl: Ref<HTMLElement>;
    prefixCls: ComputedRef<string>;
    overlayCls: any;
    hasTrigger: ComputedRef<Readonly<Record<"click" | "focus" | "context-menu" | "hover", boolean>>>;
    contentClicked: Ref<boolean>;
    updatePopper: () => void;
    destroyPopper: () => void;
    getOverlayStyle: () => import("../common").Styles;
    updateOverlayInnerStyle: () => void;
    emitVisible: (visible: boolean, context: PopupVisibleChangeContext) => void;
    onMouseEnter: () => void;
    onMouseLeave: (ev: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    expandAnimation: {
        type: BooleanConstructor;
    };
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    delay: {
        type: import("vue").PropType<number | number[]>;
    };
    destroyOnClose: BooleanConstructor;
    disabled: BooleanConstructor;
    hideEmptyPopup: BooleanConstructor;
    overlayClassName: {
        type: import("vue").PropType<import("../common").ClassName>;
    };
    overlayInnerClassName: {
        type: import("vue").PropType<import("../common").ClassName>;
    };
    overlayInnerStyle: {
        type: import("vue").PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
    };
    overlayStyle: {
        type: import("vue").PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
    };
    placement: {
        type: StringConstructor;
        default: string;
    };
    showArrow: BooleanConstructor;
    trigger: {
        type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
        default: "click" | "focus" | "context-menu" | "hover";
        validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onScroll: import("vue").PropType<(context: {
        e: WheelEvent;
    }) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, context: PopupVisibleChangeContext) => void>;
}>>, {
    visible: boolean;
    disabled: boolean;
    trigger: "click" | "focus" | "context-menu" | "hover";
    modelValue: boolean;
    placement: string;
    attach: import("../common").AttachNode;
    expandAnimation: boolean;
    destroyOnClose: boolean;
    hideEmptyPopup: boolean;
    showArrow: boolean;
    defaultVisible: boolean;
}>;
export default _default;
