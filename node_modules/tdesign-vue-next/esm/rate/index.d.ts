import './style';
export * from './type';
export declare const Rate: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            color: string | string[];
            gap: number;
            value: number;
            disabled: boolean;
            size: string;
            modelValue: number;
            defaultValue: number;
            count: number;
            showText: boolean;
            texts: string[];
            allowHalf: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            allowHalf: BooleanConstructor;
            color: {
                type: import("vue").PropType<string | string[]>;
                default: string;
            };
            count: {
                type: NumberConstructor;
                default: number;
            };
            disabled: BooleanConstructor;
            gap: {
                type: NumberConstructor;
                default: number;
            };
            icon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            showText: BooleanConstructor;
            size: {
                type: StringConstructor;
                default: string;
            };
            texts: {
                type: import("vue").PropType<string[]>;
                default: () => string[];
            };
            value: {
                type: NumberConstructor;
                default: any;
            };
            modelValue: {
                type: NumberConstructor;
                default: any;
            };
            defaultValue: {
                type: NumberConstructor;
                default: number;
            };
            onChange: import("vue").PropType<(value: number) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "color" | "gap" | "value" | "disabled" | "size" | "modelValue" | "defaultValue" | "count" | "showText" | "texts" | "allowHalf">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            allowHalf: BooleanConstructor;
            color: {
                type: import("vue").PropType<string | string[]>;
                default: string;
            };
            count: {
                type: NumberConstructor;
                default: number;
            };
            disabled: BooleanConstructor;
            gap: {
                type: NumberConstructor;
                default: number;
            };
            icon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            showText: BooleanConstructor;
            size: {
                type: StringConstructor;
                default: string;
            };
            texts: {
                type: import("vue").PropType<string[]>;
                default: () => string[];
            };
            value: {
                type: NumberConstructor;
                default: any;
            };
            modelValue: {
                type: NumberConstructor;
                default: any;
            };
            defaultValue: {
                type: NumberConstructor;
                default: number;
            };
            onChange: import("vue").PropType<(value: number) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            color: string | string[];
            gap: number;
            value: number;
            disabled: boolean;
            size: string;
            modelValue: number;
            defaultValue: number;
            count: number;
            showText: boolean;
            texts: string[];
            allowHalf: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        allowHalf: BooleanConstructor;
        color: {
            type: import("vue").PropType<string | string[]>;
            default: string;
        };
        count: {
            type: NumberConstructor;
            default: number;
        };
        disabled: BooleanConstructor;
        gap: {
            type: NumberConstructor;
            default: number;
        };
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        showText: BooleanConstructor;
        size: {
            type: StringConstructor;
            default: string;
        };
        texts: {
            type: import("vue").PropType<string[]>;
            default: () => string[];
        };
        value: {
            type: NumberConstructor;
            default: any;
        };
        modelValue: {
            type: NumberConstructor;
            default: any;
        };
        defaultValue: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<(value: number) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowHalf: BooleanConstructor;
    color: {
        type: import("vue").PropType<string | string[]>;
        default: string;
    };
    count: {
        type: NumberConstructor;
        default: number;
    };
    disabled: BooleanConstructor;
    gap: {
        type: NumberConstructor;
        default: number;
    };
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    showText: BooleanConstructor;
    size: {
        type: StringConstructor;
        default: string;
    };
    texts: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    value: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultValue: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<(value: number) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    color: string | string[];
    gap: number;
    value: number;
    disabled: boolean;
    size: string;
    modelValue: number;
    defaultValue: number;
    count: number;
    showText: boolean;
    texts: string[];
    allowHalf: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Rate;
