import { TdTagProps } from './type';
import './style';
export * from './type';
export declare type TagProps = TdTagProps;
export declare const Tag: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            size: import("../common").SizeEnum;
            icon: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
            shape: "square" | "round" | "mark";
            variant: "outline" | "dark" | "light" | "light-outline";
            theme: "default" | "success" | "primary" | "warning" | "danger";
            closable: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            closable: BooleanConstructor;
            content: {
                type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            icon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
                default: any;
            };
            maxWidth: {
                type: import("vue").PropType<string | number>;
            };
            shape: {
                type: import("vue").PropType<"square" | "round" | "mark">;
                default: "square" | "round" | "mark";
                validator(val: "square" | "round" | "mark"): boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            theme: {
                type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
                default: "default" | "success" | "primary" | "warning" | "danger";
                validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
            };
            variant: {
                type: import("vue").PropType<"outline" | "dark" | "light" | "light-outline">;
                default: "outline" | "dark" | "light" | "light-outline";
                validator(val: "outline" | "dark" | "light" | "light-outline"): boolean;
            };
            onClick: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onClose: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "icon" | "shape" | "variant" | "theme" | "closable">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            closable: BooleanConstructor;
            content: {
                type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            icon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
                default: any;
            };
            maxWidth: {
                type: import("vue").PropType<string | number>;
            };
            shape: {
                type: import("vue").PropType<"square" | "round" | "mark">;
                default: "square" | "round" | "mark";
                validator(val: "square" | "round" | "mark"): boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            theme: {
                type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
                default: "default" | "success" | "primary" | "warning" | "danger";
                validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
            };
            variant: {
                type: import("vue").PropType<"outline" | "dark" | "light" | "light-outline">;
                default: "outline" | "dark" | "light" | "light-outline";
                validator(val: "outline" | "dark" | "light" | "light-outline"): boolean;
            };
            onClick: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onClose: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            disabled: boolean;
            size: import("../common").SizeEnum;
            icon: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
            shape: "square" | "round" | "mark";
            variant: "outline" | "dark" | "light" | "light-outline";
            theme: "default" | "success" | "primary" | "warning" | "danger";
            closable: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        closable: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            default: any;
        };
        maxWidth: {
            type: import("vue").PropType<string | number>;
        };
        shape: {
            type: import("vue").PropType<"square" | "round" | "mark">;
            default: "square" | "round" | "mark";
            validator(val: "square" | "round" | "mark"): boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
            default: "default" | "success" | "primary" | "warning" | "danger";
            validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
        };
        variant: {
            type: import("vue").PropType<"outline" | "dark" | "light" | "light-outline">;
            default: "outline" | "dark" | "light" | "light-outline";
            validator(val: "outline" | "dark" | "light" | "light-outline"): boolean;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    closable: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        default: any;
    };
    maxWidth: {
        type: import("vue").PropType<string | number>;
    };
    shape: {
        type: import("vue").PropType<"square" | "round" | "mark">;
        default: "square" | "round" | "mark";
        validator(val: "square" | "round" | "mark"): boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
        default: "default" | "success" | "primary" | "warning" | "danger";
        validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
    };
    variant: {
        type: import("vue").PropType<"outline" | "dark" | "light" | "light-outline">;
        default: "outline" | "dark" | "light" | "light-outline";
        validator(val: "outline" | "dark" | "light" | "light-outline"): boolean;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    size: import("../common").SizeEnum;
    icon: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
    shape: "square" | "round" | "mark";
    variant: "outline" | "dark" | "light" | "light-outline";
    theme: "default" | "success" | "primary" | "warning" | "danger";
    closable: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const CheckTag: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            size: import("../common").SizeEnum;
            checked: boolean;
            modelValue: boolean;
            defaultChecked: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            checked: {
                type: BooleanConstructor;
                default: any;
            };
            modelValue: {
                type: BooleanConstructor;
                default: any;
            };
            defaultChecked: BooleanConstructor;
            content: {
                type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            onChange: import("vue").PropType<(checked: boolean) => void>;
            onClick: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "checked" | "modelValue" | "defaultChecked">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            checked: {
                type: BooleanConstructor;
                default: any;
            };
            modelValue: {
                type: BooleanConstructor;
                default: any;
            };
            defaultChecked: BooleanConstructor;
            content: {
                type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            onChange: import("vue").PropType<(checked: boolean) => void>;
            onClick: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            disabled: boolean;
            size: import("../common").SizeEnum;
            checked: boolean;
            modelValue: boolean;
            defaultChecked: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        onChange: import("vue").PropType<(checked: boolean) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    checked: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultChecked: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    onChange: import("vue").PropType<(checked: boolean) => void>;
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    size: import("../common").SizeEnum;
    checked: boolean;
    modelValue: boolean;
    defaultChecked: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Tag;
