{"version":3,"file":"useTree.js","sources":["../../src/tree/useTree.tsx"],"sourcesContent":["import { ref, watch, toRefs, nextTick } from 'vue';\nimport { TdTreeProps } from './type';\nimport TreeItem from './tree-item';\n\nimport TreeStore from '../_common/js/tree/tree-store';\nimport TreeNode from '../_common/js/tree/tree-node';\n\nimport useDefaultValue from '../hooks/useDefaultValue';\nimport useVModel from '../hooks/useVModel';\nimport useOnDrag from './hooks/useOnDrag';\nimport { getMark, getNode, getStoreConfig } from './util';\n\nimport { TypeEventState, TypeTreeNodeModel } from './interface';\n\nexport default function useTree(props: TdTreeProps) {\n  const treeStore = ref();\n  const cacheMap = new Map();\n  const treeNodeViews = ref([]);\n  const { expanded, actived, value, modelValue } = toRefs(props);\n\n  const [innerChecked, setInnerChecked] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n  const [innerActived, setInnerActived] = useDefaultValue(actived, props.defaultActived, props.onActive, 'actived');\n  const [innerExpanded, setInnerExpanded] = useDefaultValue(\n    expanded,\n    props.defaultExpanded,\n    props.onExpand,\n    'expanded',\n  );\n\n  // 懒加载回调\n  const handleLoad = (info: TypeEventState) => {\n    const { node } = info;\n    const ctx = {\n      node: node.getModel(),\n    };\n    if (innerChecked.value && innerChecked.value.length > 0) {\n      treeStore.value.replaceChecked(innerChecked.value);\n    }\n    if (innerExpanded.value && innerExpanded.value.length > 0) {\n      treeStore.value.replaceExpanded(innerExpanded.value);\n    }\n    if (innerActived.value && innerActived.value.length > 0) {\n      treeStore.value.replaceActived(innerActived.value);\n    }\n    props.onLoad?.(ctx);\n  };\n\n  // 点击回调\n  const handleClick = (state: TypeEventState) => {\n    const { expandOnClickNode } = props;\n    const { mouseEvent, event, node } = state;\n\n    if (!node) {\n      return;\n    }\n    let shouldExpand = expandOnClickNode;\n    let shouldActive = !props.disabled && !node.disabled;\n    ['trigger', 'ignore'].forEach((markName) => {\n      const mark = getMark(markName, event.target as HTMLElement, event.currentTarget as HTMLElement);\n      const markValue = mark?.value || '';\n      if (markValue.indexOf('expand') >= 0) {\n        if (markName === 'trigger') {\n          shouldExpand = true;\n        } else if (markName === 'ignore') {\n          // shouldExpand = false;\n        }\n      }\n      if (markValue.indexOf('active') >= 0) {\n        if (markName === 'ignore') {\n          shouldActive = false;\n        }\n      }\n    });\n\n    const ctx = {\n      node: node.getModel(),\n      e: mouseEvent,\n    };\n\n    if (shouldExpand) {\n      const tnode = getNode(treeStore.value, node);\n      const expanded = node.setExpanded(!tnode.isExpanded());\n      setInnerExpanded(expanded, ctx);\n    }\n\n    if (shouldActive) {\n      const tnode = getNode(treeStore.value, node);\n      const actived = node.setActived(!tnode.isActived());\n      setInnerActived(actived, ctx);\n    }\n\n    props.onClick?.(ctx);\n  };\n\n  const handleChange = (state: TypeEventState) => {\n    const { disabled } = props;\n    const { node, mouseEvent } = state;\n    if (!node || disabled || node.disabled) {\n      return;\n    }\n\n    const tnode = getNode(treeStore.value, node);\n    const checked = node.setChecked(!tnode.isChecked());\n    setInnerChecked(checked, {\n      node: node.getModel(),\n      e: mouseEvent,\n    });\n  };\n\n  // 节点渲染\n  const renderTreeNodeViews = () => {\n    const nodes = treeStore.value.getNodes();\n\n    treeNodeViews.value = nodes\n      .filter((node: TreeNode) => node.visible)\n      .map((node: TreeNode) => {\n        // 如果节点已经存在，则使用缓存节点\n        let nodeView = cacheMap.get(node.value);\n        // 如果节点未曾创建，则临时创建\n        if (!nodeView) {\n          // 初次仅渲染可显示的节点\n          // 不存在节点视图，则创建该节点视图并插入到当前位置\n          nodeView = (\n            <TreeItem\n              key={node.value}\n              node={node}\n              onChange={handleChange}\n              onClick={handleClick}\n              expandOnClickNode={props.expandOnClickNode}\n            />\n          );\n          cacheMap.set(node.value, nodeView);\n        }\n        return nodeView;\n      });\n\n    // 更新缓存后，被删除的节点要移除掉，避免内存泄露\n    nextTick(() => {\n      cacheMap.forEach((view, value: string) => {\n        if (!treeStore.value.getNode(value)) {\n          cacheMap.delete(value);\n        }\n      });\n    });\n  };\n\n  useOnDrag(treeStore);\n\n  // 更新展开状态\n  const updateExpanded = () => {\n    const { expandParent } = props;\n    // 初始化展开状态\n    // 校验是否自动展开父节点\n    if (Array.isArray(innerExpanded.value)) {\n      const expandedMap = new Map();\n      innerExpanded.value.forEach((val) => {\n        expandedMap.set(val, true);\n        if (expandParent) {\n          const node = treeStore.value.getNode(val);\n          node.getParents().forEach((tn: TypeTreeNodeModel) => {\n            expandedMap.set(tn.value, true);\n          });\n        }\n      });\n      const expandedArr = Array.from(expandedMap.keys());\n      treeStore.value.setExpanded(expandedArr);\n    }\n  };\n\n  // 初始化\n  const init = () => {\n    let options = props.data;\n    const store = new TreeStore({\n      ...getStoreConfig(props),\n      onLoad: (info: TypeEventState) => {\n        handleLoad(info);\n      },\n      onUpdate: () => {\n        renderTreeNodeViews();\n      },\n    });\n\n    // 初始化数据\n    treeStore.value = store;\n\n    if (!Array.isArray(options)) {\n      options = [];\n    }\n    store.append(options);\n\n    // 刷新节点，必须在配置选中之前执行\n    // 这样选中态联动判断才能找到父节点\n    store.refreshNodes();\n\n    // 初始化选中状态\n    if (Array.isArray(innerChecked.value)) {\n      store.setChecked(innerChecked.value);\n    }\n\n    updateExpanded();\n\n    // 初始化激活状态\n    if (Array.isArray(innerActived.value)) {\n      store.setActived(innerActived.value);\n    }\n\n    // 树的数据初始化之后，需要立即进行一次视图刷新\n    renderTreeNodeViews();\n  };\n\n  // ------ 监听start ------\n\n  // data变化，重构 tree\n  watch(\n    () => props.data,\n    (list) => {\n      list = props.data;\n      cacheMap.clear();\n\n      treeStore.value.reload(list);\n      // 刷新节点，必须在配置选中之前执行\n      // 这样选中态联动判断才能找到父节点\n      treeStore.value.refreshNodes();\n      if (!list.length) return;\n      // 初始化选中状态\n      if (Array.isArray(innerChecked.value)) {\n        treeStore.value.setChecked(innerChecked.value);\n      }\n\n      // 更新展开状态\n      updateExpanded();\n\n      // 初始化激活状态\n      if (Array.isArray(innerActived.value)) {\n        treeStore.value.setActived(innerActived.value);\n      }\n      // 刷新节点状态\n      treeStore.value.refreshState();\n    },\n  );\n\n  // tree插件配置变化\n  watch(\n    () => getStoreConfig(props),\n    () => {\n      if (!treeStore.value) return;\n      treeStore.value.setConfig(getStoreConfig(props));\n    },\n  );\n  watch(innerChecked, (nVal) => {\n    treeStore.value.replaceChecked(nVal);\n  });\n  watch(innerExpanded, (nVal) => {\n    treeStore.value.replaceExpanded(nVal);\n  });\n  watch(innerActived, (nVal) => {\n    treeStore.value.replaceActived(nVal);\n  });\n\n  // 初始化树\n  init();\n\n  return {\n    treeStore,\n    treeNodeViews,\n  };\n}\n"],"names":["useTree","props","treeStore","ref","cacheMap","Map","treeNodeViews","toRefs","expanded","actived","value","modelValue","useVModel","defaultValue","onChange","innerChecked","setInnerChecked","useDefaultValue","defaultActived","onActive","innerActived","setInnerActived","defaultExpanded","onExpand","innerExpanded","setInnerExpanded","handleLoad","info","node","ctx","getModel","length","replaceChecked","replaceExpanded","replaceActived","onLoad","handleClick","state","expandOnClickNode","mouseEvent","event","shouldExpand","shouldActive","disabled","forEach","markName","mark","getMark","target","currentTarget","markValue","indexOf","e","tnode","getNode","setExpanded","isExpanded","setActived","isActived","onClick","handleChange","checked","setChecked","isChecked","renderTreeNodeViews","nodes","getNodes","filter","visible","map","nodeView","get","_createVNode","set","nextTick","view","useOnDrag","updateExpanded","expandParent","Array","isArray","expandedMap","val","getParents","tn","expandedArr","from","keys","init","options","data","store","TreeStore","getStoreConfig","onUpdate","append","refreshNodes","watch","list","clear","reload","refreshState","setConfig","nVal"],"mappings":"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"}