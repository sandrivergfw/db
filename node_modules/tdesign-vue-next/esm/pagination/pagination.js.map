{"version":3,"file":"pagination.js","sources":["../../src/pagination/pagination.tsx"],"sourcesContent":["import { defineComponent, computed, ref, watch, toRefs } from 'vue';\nimport isNaN from 'lodash/isNaN';\nimport {\n  PageFirstIcon as TdPageFirstIcon,\n  PageLastIcon as TdPageLastIcon,\n  ChevronLeftIcon as TdChevronLeftIcon,\n  ChevronRightIcon as TdChevronRightIcon,\n  ChevronLeftDoubleIcon as TdChevronLeftDoubleIcon,\n  ChevronRightDoubleIcon as TdChevronRightDoubleIcon,\n  EllipsisIcon as TdEllipsisIcon,\n} from 'tdesign-icons-vue-next';\nimport { TdPaginationProps } from '../pagination/type';\nimport { useConfig, usePrefixClass } from '../hooks/useConfig';\nimport { useGlobalIcon } from '../hooks/useGlobalIcon';\nimport TInputNumber from '../input-number';\nimport { Option, Select } from '../select';\nimport TInputAdornment from '../input-adornment';\nimport props from './props';\nimport usePaginationClasses from './usePaginationClasses';\nimport useMoreAction from './useMoreAction';\nimport useVModel from '../hooks/useVModel';\nimport useDefaultValue from '../hooks/useDefaultValue';\nimport { useTNodeJSX } from '../hooks/tnode';\n\nconst min = 1;\n\nexport default defineComponent({\n  name: 'TPagination',\n  props,\n\n  setup(props: TdPaginationProps) {\n    const { modelValue, pageSize, current } = toRefs(props);\n    const renderTNodeJSX = useTNodeJSX();\n    const [innerCurrent, setInnerCurrent] = useVModel(\n      current,\n      modelValue,\n      props.defaultCurrent,\n      props.onCurrentChange,\n      'current',\n    );\n\n    const [innerPageSize, setInnerPageSize] = useDefaultValue(\n      pageSize,\n      props.defaultPageSize,\n      props.onPageSizeChange,\n      'pageSize',\n    );\n\n    const { t, globalConfig } = useConfig('pagination');\n    const COMPONENT_NAME = usePrefixClass('pagination');\n    const {\n      PageFirstIcon,\n      PageLastIcon,\n      ChevronLeftIcon,\n      ChevronRightIcon,\n      ChevronLeftDoubleIcon,\n      ChevronRightDoubleIcon,\n      EllipsisIcon,\n    } = useGlobalIcon({\n      PageFirstIcon: TdPageFirstIcon,\n      PageLastIcon: TdPageLastIcon,\n      ChevronLeftIcon: TdChevronLeftIcon,\n      ChevronRightIcon: TdChevronRightIcon,\n      ChevronLeftDoubleIcon: TdChevronLeftDoubleIcon,\n      ChevronRightDoubleIcon: TdChevronRightDoubleIcon,\n      EllipsisIcon: TdEllipsisIcon,\n    });\n\n    const { pageCount, ...CLASS_MAP } = usePaginationClasses(props, innerCurrent, innerPageSize, COMPONENT_NAME);\n\n    const { prevMore, isPrevMoreShow, curPageLeftCount, nextMore, isNextMoreShow, curPageRightCount } = useMoreAction(\n      props,\n      pageCount,\n      innerCurrent,\n    );\n\n    const jumpIndex = ref(innerCurrent.value);\n\n    const isFolded = computed(() => pageCount.value > props.maxPageBtn);\n\n    const pageCountOption = computed<Array<{ label: string; value: number }>>(() => {\n      const ans = [];\n      for (let i = 1; i <= pageCount.value; i++) {\n        ans.push({ value: i, label: `${i}/${pageCount.value}` });\n      }\n      return ans;\n    });\n\n    const sizeOptions = computed<Array<{ label: string; value: number }>>(() => {\n      const pageSizeOptions = props.pageSizeOptions as TdPaginationProps['pageSizeOptions'];\n      const options = pageSizeOptions.map((option) =>\n        typeof option === 'object'\n          ? option\n          : {\n              label: t(globalConfig.value.itemsPerPage, { size: option }),\n              value: Number(option),\n            },\n      );\n      return options.sort((a, b) => a.value - b.value);\n    });\n\n    const isMidEllipsis = computed(() => {\n      return props.pageEllipsisMode === 'mid';\n    });\n\n    const pages = computed(() => {\n      const array = [];\n      let start;\n      let end;\n\n      if (isFolded.value) {\n        if (isPrevMoreShow.value && isNextMoreShow.value) {\n          start = innerCurrent.value - curPageLeftCount.value;\n          end = innerCurrent.value + curPageRightCount.value;\n        } else {\n          const foldedStart = isMidEllipsis.value ? 2 : 1;\n          const foldedEnd = isMidEllipsis.value ? pageCount.value - 1 : pageCount.value;\n          start = isPrevMoreShow.value ? pageCount.value - props.foldedMaxPageBtn + 1 : foldedStart;\n          end = isPrevMoreShow.value ? foldedEnd : props.foldedMaxPageBtn;\n        }\n      } else {\n        start = 1;\n        end = pageCount.value;\n      }\n\n      for (let i = start; i <= end; i++) {\n        array.push(i);\n      }\n      return array;\n    });\n\n    // 如果页面总数发生变化并当前页数大于总页数则重置为1\n    watch(\n      () => pageCount.value,\n      () => {\n        if (innerCurrent.value > pageCount.value) innerCurrent.value = 1;\n      },\n    );\n    watch(\n      () => innerCurrent.value,\n      (val) => (jumpIndex.value = val),\n    );\n\n    const toPage: (pageIndex: number, isTriggerChange?: boolean) => void = (pageIndex, isTriggerChange) => {\n      if (props.disabled) {\n        return;\n      }\n      let current = pageIndex;\n      if (pageIndex < min) {\n        current = min;\n      } else if (pageIndex > pageCount.value) {\n        current = pageCount.value;\n      }\n      if (innerCurrent.value !== current) {\n        const prev = innerCurrent.value;\n        const pageInfo = {\n          current,\n          previous: prev,\n          pageSize: innerPageSize.value,\n        };\n        if (isTriggerChange !== false) {\n          props.onChange?.(pageInfo);\n        }\n        setInnerCurrent(current, pageInfo);\n      }\n    };\n\n    const handlePageChange = (type: string) => {\n      const pageChangeMap = {\n        prevPage: () => toPage(innerCurrent.value - 1),\n        nextPage: () => toPage(innerCurrent.value + 1),\n        prevMorePage: () => toPage(innerCurrent.value - props.foldedMaxPageBtn),\n        nextMorePage: () => toPage(innerCurrent.value + props.foldedMaxPageBtn),\n      };\n\n      pageChangeMap[type]();\n    };\n\n    const onSelectorChange: (e: string) => void = (e) => {\n      if (props.disabled) {\n        return;\n      }\n      const pageSize: number = parseInt(e, 10);\n      let pageCount = 1;\n      if (pageSize > 0) {\n        pageCount = Math.ceil(props.total / pageSize);\n      }\n\n      let isIndexChange = false;\n\n      if (innerCurrent.value > pageCount) {\n        isIndexChange = true;\n      }\n\n      /**\n       * 分页大小变化事件\n       * @param {Number} pageSize 分页大小\n       * @param {Number} index 当前页\n       */\n      const pageInfo = {\n        current: isIndexChange ? pageCount : innerCurrent.value,\n        previous: innerCurrent.value,\n        pageSize,\n      };\n      props.onChange?.(pageInfo);\n      setInnerPageSize(pageSize, pageInfo);\n      if (isIndexChange) {\n        toPage(pageCount, false);\n      }\n    };\n\n    const onJumperChange = (val: number) => {\n      const currentIndex = Math.trunc(+val);\n      if (isNaN(currentIndex)) return;\n      jumpIndex.value = currentIndex;\n      toPage(currentIndex);\n    };\n\n    return () => {\n      const { total, pageSizeOptions, size, disabled, showPageSize } = props;\n      if (pageCount.value < 1) return null;\n\n      const Jumper = (\n        <div class={CLASS_MAP.jumperClass.value}>\n          {t(globalConfig.value.jumpTo)}\n          <TInputAdornment append={`/ ${pageCount.value} ${t(globalConfig.value.page)}`}>\n            <TInputNumber\n              class={CLASS_MAP.jumperInputClass.value}\n              v-model={jumpIndex.value}\n              onBlur={onJumperChange}\n              onEnter={onJumperChange}\n              max={pageCount.value}\n              min={min}\n              size={size}\n              disabled={disabled}\n              theme=\"normal\"\n              placeholder=\"\"\n            />\n          </TInputAdornment>\n        </div>\n      );\n\n      return (\n        <div class={CLASS_MAP.paginationClass.value}>\n          {/* 数据统计区 */}\n          {renderTNodeJSX(\n            'totalContent',\n            <div class={CLASS_MAP.totalClass.value}>{t(globalConfig.value.total, { total })}</div>,\n          )}\n\n          {/* 分页器 */}\n          {showPageSize && pageSizeOptions.length > 0 && (\n            <Select\n              size={size}\n              value={innerPageSize}\n              disabled={disabled}\n              class={CLASS_MAP.sizerClass.value}\n              autoWidth={true}\n              onChange={onSelectorChange}\n              {...props.selectProps}\n            >\n              {sizeOptions.value.map((item, index) => (\n                <Option value={item.value} label={item.label} key={index} />\n              ))}\n            </Select>\n          )}\n          {/* 首页按钮 */}\n          {props.showFirstAndLastPageBtn ? (\n            <div\n              class={CLASS_MAP.preBtnClass.value}\n              onClick={() => toPage(1)}\n              disabled={props.disabled || props.current === min}\n            >\n              <PageFirstIcon />\n            </div>\n          ) : null}\n          {/* 向前按钮 */}\n          {props.showPreviousAndNextBtn ? (\n            <div\n              class={CLASS_MAP.preBtnClass.value}\n              onClick={() => handlePageChange('prevPage')}\n              disabled={disabled || innerCurrent.value === min}\n            >\n              <ChevronLeftIcon />\n            </div>\n          ) : null}\n          {/* 常规版 */}\n          {props.showPageNumber && props.theme === 'default' ? (\n            <ul class={CLASS_MAP.btnWrapClass.value}>\n              {isFolded.value && isMidEllipsis.value && (\n                <li class={CLASS_MAP.getButtonClass(1)} onClick={() => toPage(min)}>\n                  {min}\n                </li>\n              )}\n              {isFolded.value && isPrevMoreShow.value && isMidEllipsis.value ? (\n                <li\n                  class={CLASS_MAP.btnMoreClass.value}\n                  onClick={() => handlePageChange('prevMorePage')}\n                  onMouseOver={() => (prevMore.value = true)}\n                  onMouseOut={() => (prevMore.value = false)}\n                >\n                  {prevMore.value ? <ChevronLeftDoubleIcon /> : <EllipsisIcon />}\n                </li>\n              ) : null}\n              {pages.value.map((i) => (\n                <li class={CLASS_MAP.getButtonClass(i)} key={i} onClick={() => toPage(i)}>\n                  {i}\n                </li>\n              ))}\n              {isFolded.value && isNextMoreShow.value && isMidEllipsis.value ? (\n                <li\n                  class={CLASS_MAP.btnMoreClass.value}\n                  onClick={() => handlePageChange('nextMorePage')}\n                  onMouseOver={() => (nextMore.value = true)}\n                  onMouseOut={() => (nextMore.value = false)}\n                >\n                  {nextMore.value ? <ChevronRightDoubleIcon /> : <EllipsisIcon />}\n                </li>\n              ) : null}\n              {isFolded.value && isMidEllipsis.value ? (\n                <li class={CLASS_MAP.getButtonClass(pageCount.value)} onClick={() => toPage(pageCount.value)}>\n                  {pageCount.value}\n                </li>\n              ) : null}\n            </ul>\n          ) : null}\n          {/* 极简版 */}\n          {props.theme === 'simple' && Jumper}\n          {/* 向后按钮 */}\n          {props.showPreviousAndNextBtn ? (\n            <div\n              class={CLASS_MAP.nextBtnClass.value}\n              onClick={() => handlePageChange('nextPage')}\n              disabled={disabled || innerCurrent.value === pageCount.value}\n            >\n              <ChevronRightIcon />\n            </div>\n          ) : null}\n          {/* 尾页按钮 */}\n          {props.showFirstAndLastPageBtn ? (\n            <div\n              class={CLASS_MAP.nextBtnClass.value}\n              onClick={() => toPage(pageCount.value)}\n              disabled={disabled || innerCurrent.value === pageCount.value}\n            >\n              <PageLastIcon />\n            </div>\n          ) : null}\n          {/* 快速跳转 */}\n          {props.theme === 'default' && props.showJumper && Jumper}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["_isVNode","min","defineComponent","name","props","setup","toRefs","modelValue","pageSize","current","renderTNodeJSX","useTNodeJSX","useVModel","defaultCurrent","onCurrentChange","innerCurrent","setInnerCurrent","useDefaultValue","defaultPageSize","onPageSizeChange","innerPageSize","setInnerPageSize","useConfig","t","globalConfig","COMPONENT_NAME","usePrefixClass","useGlobalIcon","PageFirstIcon","TdPageFirstIcon","PageLastIcon","TdPageLastIcon","ChevronLeftIcon","TdChevronLeftIcon","ChevronRightIcon","TdChevronRightIcon","ChevronLeftDoubleIcon","TdChevronLeftDoubleIcon","ChevronRightDoubleIcon","TdChevronRightDoubleIcon","EllipsisIcon","TdEllipsisIcon","usePaginationClasses","pageCount","CLASS_MAP","useMoreAction","prevMore","isPrevMoreShow","curPageLeftCount","nextMore","isNextMoreShow","curPageRightCount","jumpIndex","ref","value","isFolded","computed","maxPageBtn","pageCountOption","ans","i","push","label","sizeOptions","pageSizeOptions","options","map","option","itemsPerPage","size","Number","sort","a","b","isMidEllipsis","pageEllipsisMode","pages","array","start","end","foldedStart","foldedEnd","foldedMaxPageBtn","watch","val","toPage","pageIndex","isTriggerChange","disabled","prev","pageInfo","previous","onChange","handlePageChange","type","pageChangeMap","prevPage","nextPage","prevMorePage","nextMorePage","onSelectorChange","e","parseInt","Math","ceil","total","isIndexChange","onJumperChange","currentIndex","trunc","isNaN","showPageSize","Jumper","_createVNode","jumperClass","jumpTo","TInputAdornment","page","jumperInputClass","paginationClass","totalClass","length","sizerClass","selectProps","item","index","showFirstAndLastPageBtn","preBtnClass","showPreviousAndNextBtn","showPageNumber","theme","btnWrapClass","getButtonClass","btnMoreClass","nextBtnClass","showJumper"],"mappings":"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"}