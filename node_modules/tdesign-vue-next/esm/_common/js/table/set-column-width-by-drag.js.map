{"version":3,"file":"set-column-width-by-drag.js","sources":["../../../../src/_common/js/table/set-column-width-by-drag.ts"],"sourcesContent":["import { BaseTableCol, ThMap } from './types';\nimport { getColWidthAttr } from './utils';\n\n/**\n * 获取某一列的所有子列\n * @param col 表格某一列\n * @returns 当前列的所有子列\n */\nconst findAllChildren = <T extends BaseTableCol<T>>(col: T): T[] => {\n  const loopQue: T[] = [];\n  const result: T[] = [];\n  if (col.children) {\n    col.children.forEach((child: T) => loopQue.push(child));\n    while (loopQue.length) {\n      const child = loopQue.shift();\n      if (!child.children || !child.children.length) {\n        result.push(child);\n      } else {\n        child.children.forEach((child: T) => loopQue.push(child));\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * 更新拖动后的列宽记录\n * @param dragCol 被拖动的列\n * @param dragWidth 拖动大小\n * @param effectCol 受影响的列\n * @param options 配置参数\n * @param callback 回调函数\n */\nexport default function setThWidthListByColumnDrag<T extends BaseTableCol<T>>(\n  dragCol: T,\n  dragWidth: number,\n  effectCol: T,\n  options: {\n    getThWidthList: () => ThMap,\n    DEFAULT_MIN_WIDTH: number\n  },\n  callback: (widthMap: ThMap, colKeys: string[]) => void\n): void {\n  const { getThWidthList, DEFAULT_MIN_WIDTH } = options;\n  const thWidthList = getThWidthList();\n\n  // 检测是否有多级表头\n  const dragChildrenCols = findAllChildren(dragCol);\n  const effectChildrenCols = findAllChildren(effectCol);\n\n  // 若有\n  if (dragChildrenCols.length || effectChildrenCols.length) {\n    let oldWidth = 0;\n    let oldEffectWidth = 0;\n    const notCalculateCols: string[] = [];\n    let effectColsMinWidth = 0;\n    const updateMap: { [key: string]: number } = {};\n\n    // 将没有多级表头的列添加到列表中方便后续计算\n    if (!dragChildrenCols.length) {\n      dragChildrenCols.push(dragCol);\n    }\n\n    if (!effectChildrenCols.length) {\n      effectChildrenCols.push(effectCol);\n    }\n\n    // 根据多级表头的叶节点计算实际宽度（拖动列）\n    dragChildrenCols.forEach((child) => {\n      oldWidth += thWidthList[child.colKey] || getColWidthAttr(child, 'width');\n      notCalculateCols.push(child.colKey);\n    });\n\n    // 根据多级表头的叶节点计算实际宽度（受影响的列）\n    effectChildrenCols.forEach((child) => {\n      oldEffectWidth += thWidthList[child.colKey] || getColWidthAttr(child, 'width');\n      notCalculateCols.push(child.colKey);\n      effectColsMinWidth += Math.max(\n        child.resize?.minWidth || DEFAULT_MIN_WIDTH,\n        getColWidthAttr(child, 'minWidth') || DEFAULT_MIN_WIDTH\n      );\n    });\n\n    // 按比例划分新宽度（拖动列）\n    dragChildrenCols.forEach((child) => {\n      updateMap[child.colKey] = (thWidthList[child.colKey] / oldWidth) * dragWidth;\n    });\n\n    // 按比例划分新宽度（受影响的列）\n    const remainWidth = Math.max(\n      effectColsMinWidth,\n      oldWidth + oldEffectWidth - dragWidth,\n      Math.max(\n        getColWidthAttr(effectCol, 'minWidth') || DEFAULT_MIN_WIDTH,\n        effectCol.resize?.minWidth || DEFAULT_MIN_WIDTH\n      ),\n    );\n    effectChildrenCols.forEach((child) => {\n      updateMap[child.colKey] = Math.max(\n        child.resize?.minWidth || DEFAULT_MIN_WIDTH,\n        getColWidthAttr(child, 'minWidth') || DEFAULT_MIN_WIDTH,\n        (thWidthList[child.colKey] / oldEffectWidth) * remainWidth,\n      );\n    });\n\n    // 更新各列宽度\n    callback(updateMap, notCalculateCols);\n  } else {\n    const oldWidth = thWidthList[dragCol.colKey] || getColWidthAttr(dragCol, 'width');\n    const oldEffectWidth = thWidthList[effectCol.colKey] || getColWidthAttr(effectCol, 'width');\n\n    callback({\n      [dragCol.colKey]: dragWidth,\n      [effectCol.colKey]: Math.max(\n        effectCol.resize?.minWidth || DEFAULT_MIN_WIDTH,\n        getColWidthAttr(effectCol, 'minWidth') || DEFAULT_MIN_WIDTH,\n        oldWidth + oldEffectWidth - dragWidth,\n      ),\n    }, [dragCol.colKey, effectCol.colKey]);\n  }\n}\n"],"names":["findAllChildren","col","loopQue","result","children","forEach","child","push","length","shift","setThWidthListByColumnDrag","dragCol","dragWidth","effectCol","options","callback","getThWidthList","DEFAULT_MIN_WIDTH","thWidthList","dragChildrenCols","effectChildrenCols","oldWidth","oldEffectWidth","notCalculateCols","effectColsMinWidth","updateMap","colKey","getColWidthAttr","Math","max","resize","minWidth","remainWidth"],"mappings":"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"}