{"version":3,"file":"tree-node-model.js","sources":["../../../../src/_common/js/tree/tree-node-model.ts"],"sourcesContent":["import pick from 'lodash/pick';\nimport omit from 'lodash/omit';\nimport { TreeNode } from './tree-node';\nimport { OptionData } from '../common';\nimport {\n  TreeNodeValue,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n  TypeTreeItem,\n  TreeNodeModelProps,\n} from './types';\nimport log from '../log/log';\n\n// 获取节点需要暴露的属性\nfunction getExposedProps(node: TreeNode): TreeNodeModelProps {\n  const props = pick(node, [\n    'value',\n    'label',\n    'data',\n    'actived',\n    'expanded',\n    'checked',\n    'indeterminate',\n    'loading',\n  ]) as TreeNodeModelProps;\n  return props;\n}\n\n// 封装对外暴露的对象\nexport function createNodeModel(node: TreeNode): TypeTreeNodeModel {\n  const props = getExposedProps(node);\n\n  const model: TypeTreeNodeModel = {\n    ...props,\n\n    // 获取节点所处层级\n    getLevel() {\n      return node.getLevel();\n    },\n\n    // 获取节点在 children 中的位置\n    getIndex() {\n      return node.getIndex();\n    },\n\n    // 判断节点是否为 children 中的第一个节点\n    isFirst() {\n      return node.isFirst();\n    },\n\n    // 判断节点是否为 children 中的最后一个节点\n    isLast() {\n      return node.isLast();\n    },\n\n    // 判断节点是否为叶节点\n    isLeaf() {\n      return node.isLeaf();\n    },\n\n    // 插入数据到节点之前\n    insertBefore(newData: TypeTreeItem) {\n      return node.insertBefore(newData);\n    },\n\n    // 插入数据到节点之后\n    insertAfter(newData: TypeTreeItem) {\n      return node.insertAfter(newData);\n    },\n\n    // 给当前节点添加子节点数据\n    appendData(data: TypeTreeNodeData | TypeTreeNodeData[]) {\n      return node.append(data);\n    },\n\n    // 返回路径节点数据集合\n    getPath(): TypeTreeNodeModel[] {\n      const nodes = node.getPath();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    // 获取单个父节点数据\n    getParent(): TypeTreeNodeModel {\n      return node.parent?.getModel();\n    },\n\n    // 获取所有父节点数据\n    getParents(): TypeTreeNodeModel[] {\n      const nodes = node.getParents();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    // 获取根节点\n    getRoot(): TypeTreeNodeModel {\n      const root = node.getRoot();\n      return root?.getModel();\n    },\n\n    // 获取兄弟节点，包含自己在内\n    getSiblings(): TypeTreeNodeModel[] {\n      const nodes = node.getSiblings();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    // 返回当前节点的第一层子节点数据集合\n    getChildren(deep?: boolean): boolean | TypeTreeNodeModel[] {\n      let childrenModel: boolean | TypeTreeNodeModel[] = false;\n      const { children } = node;\n      if (Array.isArray(children)) {\n        if (children.length > 0) {\n          if (deep) {\n            const nodes = node.walk();\n            nodes.shift();\n            childrenModel = nodes.map((item) => item.getModel());\n          } else {\n            childrenModel = children.map((item) => item.getModel());\n          }\n        } else {\n          childrenModel = false;\n        }\n      } else if (typeof children === 'boolean') {\n        childrenModel = children;\n      }\n      return childrenModel;\n    },\n\n    // 删除本节点，或者 value 指定的子节点\n    remove(value?: TreeNodeValue) {\n      if (!value) {\n        node.remove();\n        return;\n      }\n\n      const { tree } = node;\n      const targetNode = tree.getNode(value);\n      if (!targetNode) {\n        log.warnOnce('Tree', `\\`${value}\\` is not exist`);\n        return;\n      }\n\n      const parents = targetNode.getParents();\n      const parentValues = parents.map((pnode) => (pnode.value));\n      if (parentValues.indexOf(node.value) < 0) {\n        log.warnOnce('Tree', `\\`${value}\\` is not a childNode of current node`);\n        return;\n      }\n      targetNode.remove();\n    },\n\n    // 设置本节点携带的元数据\n    setData(data: OptionData) {\n      // 详细细节可见 https://github.com/Tencent/tdesign-common/issues/655\n      const _data = omit(data, ['children', 'value', 'label']);\n      const { keys } = node.tree.config;\n      const dataValue = data[keys?.value || 'value'];\n      const dataLabel = data[keys?.label || 'label'];\n      if (dataValue !== undefined) _data.value = dataValue;\n      if (dataLabel !== undefined) _data.label = dataLabel;\n\n      Object.assign(node.data, _data);\n      Object.assign(node, _data);\n    },\n  };\n\n  return model;\n}\n\n// 更新封装对象\nexport function updateNodeModel(model: TypeTreeNodeModel, node: TreeNode) {\n  // 同步节点属性\n  const props = getExposedProps(node);\n  Object.assign(model, props);\n}\n"],"names":["getExposedProps","node","props","pick","createNodeModel","model","getLevel","getIndex","isFirst","isLast","isLeaf","insertBefore","newData","insertAfter","appendData","data","append","getPath","nodes","map","item","getModel","getParent","parent","getParents","getRoot","root","getSiblings","getChildren","deep","childrenModel","children","Array","isArray","length","walk","shift","remove","value","tree","targetNode","getNode","log","warnOnce","parents","parentValues","pnode","indexOf","setData","_data","omit","keys","config","dataValue","dataLabel","label","Object","assign","updateNodeModel"],"mappings":"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"}