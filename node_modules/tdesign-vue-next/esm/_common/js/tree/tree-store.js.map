{"version":3,"file":"tree-store.js","sources":["../../../../src/_common/js/tree/tree-store.ts"],"sourcesContent":["import difference from 'lodash/difference';\nimport camelCase from 'lodash/camelCase';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { TreeNode } from './tree-node';\nimport {\n  TreeNodeValue,\n  TypeIdMap,\n  TypeTimer,\n  TypeTargetNode,\n  TypeTreeNodeData,\n  TypeTreeStoreOptions,\n  TypeTreeFilter,\n  TypeTreeFilterOptions,\n  TypeRelatedNodesOptions,\n  TypeTreeEventState,\n  TypeTreeNodeModel,\n} from './types';\n\n// 构建一个树的数据模型\n// 基本设计思想：写入时更新，减少读取消耗，以减少未来实现虚拟滚动所需的计算量\n// 任何一次数据写入，会触发相应节点的状态更新\nexport class TreeStore {\n  // 根节点集合\n  public children: TreeNode[];\n\n  // 所有节点集合\n  public nodes: TreeNode[];\n\n  // 所有节点映射\n  public nodeMap: Map<TreeNodeValue, TreeNode>;\n\n  // 配置选项\n  public config: TypeTreeStoreOptions;\n\n  // 活动节点集合\n  public activedMap: TypeIdMap;\n\n  // 数据被更新的节点集合\n  public updatedMap: TypeIdMap;\n\n  // 选中节点集合\n  public checkedMap: TypeIdMap;\n\n  // 展开节点的集合\n  public expandedMap: TypeIdMap;\n\n  // 符合过滤条件的节点的集合\n  public filterMap: TypeIdMap;\n\n  // 数据更新计时器\n  public updateTimer: TypeTimer;\n\n  // 识别是否需要重排\n  public shouldReflow: boolean;\n\n  // 树节点过滤器\n  public prevFilter: TypeTreeFilter;\n\n  // 一个空节点 model\n  public nullNodeModel: TypeTreeNodeModel;\n\n  public constructor(options: TypeTreeStoreOptions) {\n    const config: TypeTreeStoreOptions = {\n      prefix: 't',\n      keys: {},\n      expandAll: false,\n      expandLevel: 0,\n      expandMutex: false,\n      expandParent: false,\n      activable: false,\n      activeMultiple: false,\n      checkable: false,\n      checkStrictly: false,\n      disabled: false,\n      draggable: false,\n      load: null,\n      lazy: false,\n      valueMode: 'onlyLeaf',\n      filter: null,\n      onLoad: null,\n      onReflow: null,\n      onUpdate: null,\n      allowFoldNodeOnFilter: false,\n      ...options,\n    };\n    this.config = config;\n    this.nodes = [];\n    this.children = [];\n    this.nodeMap = new Map();\n    this.activedMap = new Map();\n    this.expandedMap = new Map();\n    this.checkedMap = new Map();\n    this.updatedMap = new Map();\n    this.filterMap = new Map();\n    this.prevFilter = null;\n    // 这个计时器确保频繁的 update 事件被归纳为1次完整数据更新后的触发\n    this.updateTimer = null;\n    // 在子节点增删改查时，将此属性设置为 true，来触发视图更新\n    this.shouldReflow = false;\n    this.initNullNodeModel();\n  }\n\n  // 初始化空节点 model\n  public initNullNodeModel() {\n    // 空节点，用于判定当前的 filterText 是否为空，如果 filter(nullNode) 为 true, 那么可以判定 filterText 为空\n    // 这里初始化空节点的方式似乎不是很完美\n    const nullNode = new TreeNode(this, { value: '', label: '', children: [] });\n    this.nullNodeModel = nullNode.getModel();\n    // 需要将节点从树中移除\n    nullNode.remove();\n  }\n\n  // 配置选项\n  public setConfig(options: TypeTreeStoreOptions) {\n    let hasChanged = false;\n    Object.keys(options).forEach((key) => {\n      const val = options[key];\n      if (val !== this.config[key]) {\n        hasChanged = true;\n        this.config[key] = val;\n      }\n    });\n    if (hasChanged) {\n      // 在 td-tree 的 render 方法中调用 setConfig\n      // 这样减少了 watch 属性\n      // 仅在属性变更后刷新状态\n      // 这样可以避免触发渲染死循环\n      this.refreshState();\n    }\n  }\n\n  // 获取根孩子节点列表\n  public getChildren() {\n    return this.children;\n  }\n\n  // 获取节点对象\n  public getNode(item: TypeTargetNode): TreeNode {\n    let node = null;\n    if (typeof item === 'string' || typeof item === 'number') {\n      node = this.nodeMap.get(item);\n    } else if (item instanceof TreeNode) {\n      node = this.nodeMap.get(item.value);\n    }\n    return node;\n  }\n\n  // 获取节点在总节点列表中的位置\n  public getIndex(node: TreeNode): number {\n    return this.nodes.indexOf(node);\n  }\n\n  // 获取指定节点的父节点\n  public getParent(value: TypeTargetNode): TreeNode {\n    let parent = null;\n    const node = this.getNode(value);\n    if (node) {\n      parent = node.getParent();\n    }\n    return parent;\n  }\n\n  // 获取指定节点的所有父节点\n  public getParents(value: TypeTargetNode): TreeNode[] {\n    const node = this.getNode(value);\n    let parents: TreeNode[] = [];\n    if (node) {\n      parents = node.getParents();\n    }\n    return parents;\n  }\n\n  // 获取指定节点在其所在 children 中的位置\n  public getNodeIndex(value: TypeTargetNode): number {\n    const node = this.getNode(value);\n    let index = -1;\n    if (node) {\n      index = node.getIndex();\n    }\n    return index;\n  }\n\n  // 获取所有符合条件的节点\n  public getNodes(\n    item?: TypeTargetNode,\n    options?: TypeTreeFilterOptions,\n  ): TreeNode[] {\n    let nodes: TreeNode[] = [];\n    let val: TreeNodeValue = '';\n    if (typeof item === 'string' || typeof item === 'number') {\n      val = item;\n    } else if (item instanceof TreeNode) {\n      val = item.value;\n    }\n    if (!val) {\n      nodes = this.nodes.slice(0);\n    } else {\n      const node = this.getNode(val);\n      if (node) {\n        nodes = node.walk();\n      }\n    }\n\n    if (options) {\n      const conf: TypeTreeFilterOptions = {\n        filter: null,\n        level: Infinity,\n        ...options,\n      };\n      if (typeof conf.level === 'number' && conf.level !== Infinity) {\n        nodes = nodes.filter((node) => node.level <= conf.level);\n      }\n      if (typeof conf.filter === 'function') {\n        nodes = nodes.filter((node) => {\n          const nodeModel = node.getModel();\n          return conf.filter(nodeModel);\n        });\n      }\n      if (isPlainObject(conf.props)) {\n        nodes = nodes.filter((node) => {\n          const result = Object.keys(conf.props).every((key) => {\n            const propEqual = node[key] === conf.props[key];\n            return propEqual;\n          });\n          return result;\n        });\n      }\n    }\n    return nodes;\n  }\n\n  // 给树添加节点数据\n  public append(list: TypeTreeNodeData[]): void {\n    list.forEach((item) => {\n      const node = new TreeNode(this, item);\n      this.children.push(node);\n    });\n    this.reflow();\n  }\n\n  // 重新加载数据\n  public reload(list: TypeTreeNodeData[]): void {\n    this.expandedMap.clear();\n    this.checkedMap.clear();\n    this.activedMap.clear();\n    this.filterMap.clear();\n    this.removeAll();\n    this.append(list);\n  }\n\n  // 解析节点数据，适配多种节点类型\n  public parseNodeData(\n    para: TreeNodeValue | TreeNode | TypeTreeNodeData,\n    item: TypeTreeNodeData | TypeTreeNodeData[] | TreeNode,\n  ) {\n    let value: TreeNodeValue = '';\n    let node = null;\n    let data = null;\n\n    if (typeof para === 'string' || typeof para === 'number') {\n      value = para;\n      data = item;\n      node = this.getNode(value);\n    } else if (para instanceof TreeNode) {\n      node = para;\n      data = item;\n    } else {\n      data = para;\n    }\n    const spec = {\n      node,\n      data,\n    };\n    return spec;\n  }\n\n  /**\n   * 向指定节点追加节点或者数据\n   * 支持下列使用方式\n   * item: 节点数据, TreeNode: 节点实例, value: 节点值(ID)\n   * appendNodes(item)\n   * appendNodes(TreeNode)\n   * appendNodes(value, item)\n   * appendNodes(value, TreeNode)\n   * appendNodes(TreeNode, item)\n   * appendNodes(TreeNode, TreeNode)\n   */\n  public appendNodes(\n    para?: TypeTargetNode | TypeTreeNodeData,\n    item?: TypeTreeNodeData | TreeNode,\n  ): void {\n    const spec = this.parseNodeData(para, item);\n    if (spec.data) {\n      if (!spec.node) {\n        // 在根节点插入\n        if (spec.data instanceof TreeNode) {\n          spec.data.appendTo(this);\n        } else if (Array.isArray(spec.data)) {\n          this.append(spec.data);\n        } else {\n          this.append([spec.data]);\n        }\n      } else {\n        // 插入到目标节点之下\n        if (spec.data instanceof TreeNode) {\n          spec.data.appendTo(this, spec.node);\n        } else if (Array.isArray(spec.data)) {\n          spec.node.append(spec.data);\n        } else {\n          spec.node.append([spec.data]);\n        }\n        spec.node.updateRelated();\n      }\n    }\n  }\n\n  // 在目标节点之前插入节点\n  public insertBefore(value: TypeTargetNode, item: TypeTreeNodeData): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.insertBefore(item);\n    }\n  }\n\n  // 在目标节点之后插入节点\n  public insertAfter(value: TypeTargetNode, item: TypeTreeNodeData): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.insertAfter(item);\n    }\n  }\n\n  // 更新树结构\n  // 清空 nodes 数组，然后遍历所有根节点重新插入 node\n  public refreshNodes(): void {\n    const { children, nodes } = this;\n    nodes.length = 0;\n    children.forEach((node) => {\n      const list = node.walk();\n      Array.prototype.push.apply(nodes, list);\n    });\n  }\n\n  // 更新所有树节点状态\n  public refreshState(): void {\n    const { nodes } = this;\n    nodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n  }\n\n  // 节点重排\n  // 应该仅在树节点增删改查时调用\n  public reflow(node?: TreeNode): void {\n    this.shouldReflow = true;\n    this.updated(node);\n  }\n\n  // 触发更新事件\n  // 节点属性变更时调用\n  public updated(node?: TreeNode): void {\n    if (node?.value) {\n      this.updatedMap.set(node.value, true);\n    }\n    if (this.updateTimer) return;\n    this.updateTimer = +setTimeout(() => {\n      clearTimeout(this.updateTimer);\n      this.updateTimer = null;\n\n      // 检查节点是否需要回流，重排数组\n      if (this.shouldReflow) {\n        this.refreshNodes();\n        this.emit('reflow');\n      }\n\n      // 检查节点是否有被过滤，锁定路径节点\n      // 在此之前要遍历节点生成一个经过排序的节点数组\n      // 以便于优化锁定检查算法\n      if (!this.config?.allowFoldNodeOnFilter) this.lockFilterPathNodes();\n\n      const updatedList = Array.from(this.updatedMap.keys());\n      if (updatedList.length > 0) {\n        // 统计需要更新状态的节点，派发更新事件\n        const updatedNodes = updatedList.map((value) => this.getNode(value));\n        this.emit('update', {\n          nodes: updatedNodes,\n          map: this.updatedMap,\n        });\n      } else if (this.shouldReflow) {\n        // 单纯的回流不需要更新节点状态\n        // 但需要触发更新事件\n        this.emit('update', {\n          nodes: [],\n          map: this.updatedMap,\n        });\n      }\n\n      // 每次回流检查完毕，还原检查状态\n      this.shouldReflow = false;\n      this.updatedMap.clear();\n    });\n  }\n\n  // 获取激活节点集合\n  public getActived(map?: TypeIdMap): TreeNodeValue[] {\n    const activedMap = map || this.activedMap;\n    return Array.from(activedMap.keys());\n  }\n\n  // 获取指定范围的高亮节点\n  public getActivedNodes(item?: TypeTargetNode): TreeNode[] {\n    let nodes = this.getNodes(item);\n    nodes = nodes.filter((node) => node.isActived());\n    return nodes;\n  }\n\n  // 替换激活态\n  public replaceActived(list: TreeNodeValue[]): void {\n    this.resetActived();\n    this.setActived(list);\n  }\n\n  // 设置激活态\n  public setActived(actived: TreeNodeValue[]): void {\n    const { activeMultiple } = this.config;\n    const list = actived.slice(0);\n    if (!activeMultiple) {\n      list.length = 1;\n    }\n    list.forEach((val) => {\n      this.activedMap.set(val, true);\n      const node = this.getNode(val);\n      if (node) {\n        node.update();\n      }\n    });\n  }\n\n  // 重置激活态\n  public resetActived(): void {\n    const actived = this.getActived();\n    this.activedMap.clear();\n    const relatedNodes = this.getRelatedNodes(actived);\n    relatedNodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 获取展开节点集合\n  public getExpanded(map?: TypeIdMap): TreeNodeValue[] {\n    const expandedMap = map || this.expandedMap;\n    return Array.from(expandedMap.keys());\n  }\n\n  // 替换展开节点\n  public replaceExpanded(list: TreeNodeValue[]): void {\n    const expanded = this.getExpanded();\n    const added = difference(list, expanded);\n    const removed = difference(expanded, list);\n    this.setExpandedDirectly(removed, false);\n    this.updateExpanded(removed);\n    this.setExpanded(added);\n  }\n\n  // 批量设置展开节点\n  public setExpanded(list: TreeNodeValue[]): void {\n    this.setExpandedDirectly(list);\n    this.updateExpanded(list);\n  }\n\n  // 直接设置展开节点数据，不更新节点状态\n  public setExpandedDirectly(list: TreeNodeValue[], expanded = true): void {\n    list.forEach((val) => {\n      if (expanded) {\n        this.expandedMap.set(val, true);\n        const node = this.getNode(val);\n        if (node) {\n          node.afterExpanded();\n        }\n      } else {\n        this.expandedMap.delete(val);\n      }\n    });\n  }\n\n  // 清除所有展开节点\n  public resetExpanded(): void {\n    const expanded = this.getExpanded();\n    this.expandedMap.clear();\n    this.updateExpanded(expanded);\n  }\n\n  // 更新展开节点相关节点的状态\n  public updateExpanded(list: TreeNodeValue[]): void {\n    const relatedNodes = this.getRelatedNodes(list, {\n      withParents: false,\n    });\n    relatedNodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 获取选中态节点 value 数组\n  public getChecked(map?: TypeIdMap): TreeNodeValue[] {\n    const { nodes, config } = this;\n    const { valueMode, checkStrictly } = config;\n    const list: TreeNodeValue[] = [];\n    const checkedMap = map || this.checkedMap;\n    nodes.forEach((node) => {\n      if (node.isChecked(checkedMap)) {\n        if (valueMode === 'parentFirst' && !checkStrictly) {\n          if (!node.parent || !node.parent.isChecked(checkedMap)) {\n            list.push(node.value);\n          }\n        } else if (valueMode === 'onlyLeaf' && !checkStrictly) {\n          if (node.isLeaf()) {\n            list.push(node.value);\n          }\n        } else {\n          list.push(node.value);\n        }\n      }\n    });\n    return list;\n  }\n\n  // 获取指定节点下的选中节点\n  public getCheckedNodes(item?: TypeTargetNode): TreeNode[] {\n    let nodes = this.getNodes(item);\n    nodes = nodes.filter((node) => node.isChecked());\n    return nodes;\n  }\n\n  // 替换选中态列表\n  public replaceChecked(list: TreeNodeValue[]): void {\n    this.resetChecked();\n    this.setChecked(list, true);\n  }\n\n  // 批量设置选中态\n  public setChecked(list: TreeNodeValue[], isFromValueChange?: boolean): void {\n    const { valueMode, checkStrictly, checkable } = this.config;\n    if (!checkable) return;\n    list.forEach((val: TreeNodeValue) => {\n      const node = this.getNode(val);\n      if (node) {\n        if (valueMode === 'parentFirst' && !checkStrictly) {\n          const childrenNodes = node.walk();\n          childrenNodes.forEach((childNode) => {\n            this.checkedMap.set(childNode.value, true);\n          });\n        } else {\n          this.checkedMap.set(val, true);\n          node.updateChecked(isFromValueChange);\n        }\n      }\n    });\n    if (!checkStrictly) {\n      const checked = this.getChecked();\n      const relatedNodes = this.getRelatedNodes(checked);\n      relatedNodes.forEach((node) => {\n        node.updateChecked();\n      });\n    }\n  }\n\n  // 清除所有选中节点\n  public resetChecked(): void {\n    const checked = this.getChecked();\n    const relatedNodes = this.getRelatedNodes(checked);\n    this.checkedMap.clear();\n    relatedNodes.forEach((node) => {\n      node.updateChecked();\n    });\n  }\n\n  // 更新全部节点状态\n  public updateAll(): void {\n    const nodes = this.getNodes();\n    nodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 移除指定节点\n  public remove(value?: TypeTargetNode): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.remove();\n    }\n  }\n\n  // 清空所有节点\n  public removeAll(): void {\n    const nodes = this.getNodes();\n    nodes.forEach((node) => {\n      node.remove();\n    });\n  }\n\n  // 获取节点状态变化可能影响的周边节点\n  // 实现最小遍历集合\n  public getRelatedNodes(\n    list: TreeNodeValue[],\n    options?: TypeRelatedNodesOptions,\n  ): TreeNode[] {\n    const conf = {\n      withParents: true,\n      ...options,\n    };\n    const map = new Map();\n    list.forEach((value) => {\n      if (map.get(value)) return;\n      const node = this.getNode(value);\n      if (node) {\n        const parents = node.getParents();\n        const children = node.walk();\n        let related = [];\n        if (conf.withParents) {\n          related = parents.concat(children);\n        } else {\n          related = children;\n        }\n        related.forEach((relatedNode) => {\n          map.set(relatedNode.value, relatedNode);\n        });\n      }\n    });\n    const relatedNodes = Array.from(map.values());\n    return relatedNodes;\n  }\n\n  // 触发绑定的事件\n  public emit(name: string, state?: TypeTreeEventState): void {\n    const config = this.config || {};\n    const methodName = camelCase(`on-${name}`);\n    const method = config[methodName];\n    if (typeof method === 'function') {\n      method(state);\n    }\n  }\n\n  // 锁定过滤节点的路径节点\n  // 使得路径节点展开，可见，且不可操作\n  public lockFilterPathNodes() {\n    const { config } = this;\n    const allNodes = this.getNodes();\n\n    // 如果之前有进行过滤，则先解锁所有节点\n    if (this.prevFilter) {\n      allNodes.forEach((node: TreeNode) => {\n        node.lock(false);\n      });\n    }\n\n    const currentFilter = config.filter;\n    // 当前没有过滤器\n    // 则无需处理锁定节点\n    if (!currentFilter || typeof currentFilter !== 'function') return;\n\n    if (currentFilter(this.nullNodeModel)) return;\n\n    this.prevFilter = config.filter;\n    // 构造路径节点map\n    const map = new Map();\n\n    // 全部节点要经过排序，才能使用这个算法\n    // 比起每个过滤节点调用 getParents 方法检查父节点状态\n    // 算法复杂度 O(N*log(N)) => O(N)\n    allNodes.reverse().forEach((item: TreeNode) => {\n      const node = item;\n\n      // 被过滤节点父节点固定为展开状态\n      const parent = node.getParent();\n      if (node.vmIsRest) {\n        if (parent) {\n          // 被过滤节点的父节点固定为展开状态\n          parent.expanded = true;\n        }\n        // 被过滤节点固定为展示状态\n        node.visible = true;\n      }\n      if (node.vmIsRest || map.get(node.value)) {\n        if (parent && !parent.vmIsRest) {\n          map.set(parent.value, true);\n        }\n      }\n    });\n\n    // 锁定路径节点展示样式\n    const filterPathValues = Array.from(map.keys());\n    filterPathValues.forEach((value: TreeNodeValue) => {\n      const node = this.getNode(value);\n      if (node) {\n        node.lock(true);\n      }\n    });\n  }\n}\n\nexport default TreeStore;\n"],"names":["TreeStore","options","config","prefix","keys","expandAll","expandLevel","expandMutex","expandParent","activable","activeMultiple","checkable","checkStrictly","disabled","draggable","load","lazy","valueMode","filter","onLoad","onReflow","onUpdate","allowFoldNodeOnFilter","nodes","children","nodeMap","Map","activedMap","expandedMap","checkedMap","updatedMap","filterMap","prevFilter","updateTimer","shouldReflow","initNullNodeModel","nullNode","TreeNode","value","label","nullNodeModel","getModel","remove","hasChanged","Object","forEach","key","val","refreshState","item","node","get","indexOf","parent","getNode","getParent","parents","getParents","index","getIndex","slice","walk","conf","level","Infinity","nodeModel","isPlainObject","props","result","every","propEqual","list","push","reflow","clear","removeAll","append","para","data","spec","parseNodeData","appendTo","Array","isArray","updateRelated","insertBefore","insertAfter","length","prototype","apply","update","updateChecked","updated","set","setTimeout","clearTimeout","refreshNodes","emit","lockFilterPathNodes","updatedList","from","updatedNodes","map","getNodes","isActived","resetActived","setActived","actived","getActived","relatedNodes","getRelatedNodes","expanded","getExpanded","added","difference","removed","setExpandedDirectly","updateExpanded","setExpanded","afterExpanded","withParents","isChecked","isLeaf","resetChecked","setChecked","isFromValueChange","childrenNodes","childNode","checked","getChecked","related","concat","relatedNode","values","name","state","methodName","camelCase","method","allNodes","lock","currentFilter","reverse","vmIsRest","visible","filterPathValues"],"mappings":"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"}