import { SliderValue } from './type';
declare const _default: import("vue").DefineComponent<{
    disabled: BooleanConstructor;
    inputNumberProps: {
        type: import("vue").PropType<import("..").InputNumberProps>;
        default: boolean;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    marks: {
        type: import("vue").PropType<number[] | import("./type").SliderMarks>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    range: BooleanConstructor;
    step: {
        type: NumberConstructor;
        default: number;
    };
    showStep: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<SliderValue>;
        default: any;
    };
    tooltipProps: {
        type: import("vue").PropType<import("..").TdTooltipProps>;
    };
    value: {
        type: import("vue").PropType<SliderValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<SliderValue>;
    };
    onChange: import("vue").PropType<(value: SliderValue) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    inputNumberProps: {
        type: import("vue").PropType<import("..").InputNumberProps>;
        default: boolean;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    marks: {
        type: import("vue").PropType<number[] | import("./type").SliderMarks>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    range: BooleanConstructor;
    step: {
        type: NumberConstructor;
        default: number;
    };
    showStep: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<SliderValue>;
        default: any;
    };
    tooltipProps: {
        type: import("vue").PropType<import("..").TdTooltipProps>;
    };
    value: {
        type: import("vue").PropType<SliderValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<SliderValue>;
    };
    onChange: import("vue").PropType<(value: SliderValue) => void>;
}>>, {
    max: number;
    value: SliderValue;
    label: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    disabled: boolean;
    range: boolean;
    layout: "horizontal" | "vertical";
    step: number;
    min: number;
    modelValue: SliderValue;
    inputNumberProps: boolean;
    showStep: boolean;
}>;
export default _default;
