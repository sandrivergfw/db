declare const _default: import("vue").DefineComponent<{
    allowInput: BooleanConstructor;
    autoWidth: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("./type").SelectInputValue;
            collapsedTags: import("./type").SelectInputValue;
            count: number;
        }) => import("../common").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<string>;
    };
    keys: {
        type: import("vue").PropType<import("./type").SelectInputKeys>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    loading: BooleanConstructor;
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    panel: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    tag: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: string | number;
        }) => import("../common").SlotReturnValue)>;
    };
    tagInputProps: {
        type: import("vue").PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").SelectInputValue>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").SelectInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("../common").SlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEnter: import("vue").PropType<(value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: string;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
    onInputChange: import("vue").PropType<(value: string, context?: import("./type").SelectInputValueChangeContext) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("../popup").PopupVisibleChangeContext) => void>;
    onTagChange: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("..").TagInputChangeContext) => void>;
}, {
    classPrefix: import("vue").ComputedRef<string>;
    NAME_CLASS: import("vue").ComputedRef<string>;
    selectInputWrapRef: import("vue").Ref<any>;
    innerPopupVisible: import("vue").Ref<boolean>;
    commonInputProps: import("vue").ComputedRef<import("./interface").SelectInputCommonProperties>;
    tOverlayInnerStyle: import("vue").ComputedRef<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
    selectInputRef: import("vue").Ref<any>;
    popupClasses: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    onInnerClear: (context: {
        e: MouseEvent;
    }) => void;
    renderSelectSingle: (popupVisible: boolean) => JSX.Element;
    renderSelectMultiple: (p: import("./useMultiple").RenderSelectMultipleParams) => JSX.Element;
    onInnerPopupVisibleChange: (visible: boolean, context: import("../popup").PopupVisibleChangeContext) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    autoWidth: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("./type").SelectInputValue;
            collapsedTags: import("./type").SelectInputValue;
            count: number;
        }) => import("../common").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<string>;
    };
    keys: {
        type: import("vue").PropType<import("./type").SelectInputKeys>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    loading: BooleanConstructor;
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    panel: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    tag: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: string | number;
        }) => import("../common").SlotReturnValue)>;
    };
    tagInputProps: {
        type: import("vue").PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").SelectInputValue>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").SelectInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("../common").SlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEnter: import("vue").PropType<(value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: string;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
    onInputChange: import("vue").PropType<(value: string, context?: import("./type").SelectInputValueChangeContext) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("../popup").PopupVisibleChangeContext) => void>;
    onTagChange: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("..").TagInputChangeContext) => void>;
}>>, {
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    autoWidth: boolean;
    clearable: boolean;
    inputValue: string;
    minCollapsedNum: number;
    allowInput: boolean;
    borderless: boolean;
    popupVisible: boolean;
}>;
export default _default;
