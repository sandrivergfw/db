import { InputProps } from '../input';
import { InputValue } from '../input';
import { PopupProps } from '../popup';
import { TagInputProps, TagInputValue, TagInputChangeContext } from '../tag-input';
import { TagProps } from '../tag';
import { PopupVisibleChangeContext } from '../popup';
import { TNode } from '../common';
export interface TdSelectInputProps {
    allowInput?: boolean;
    autoWidth?: boolean;
    borderless?: boolean;
    clearable?: boolean;
    collapsedItems?: TNode<{
        value: SelectInputValue;
        collapsedTags: SelectInputValue;
        count: number;
    }>;
    disabled?: boolean;
    inputProps?: InputProps;
    inputValue?: InputValue;
    defaultInputValue?: InputValue;
    keys?: SelectInputKeys;
    label?: string | TNode;
    loading?: boolean;
    minCollapsedNum?: number;
    multiple?: boolean;
    panel?: string | TNode;
    placeholder?: string;
    popupProps?: PopupProps;
    popupVisible?: boolean;
    readonly?: boolean;
    status?: 'default' | 'success' | 'warning' | 'error';
    suffix?: string | TNode;
    suffixIcon?: TNode;
    tag?: string | TNode<{
        value: string | number;
    }>;
    tagInputProps?: TagInputProps;
    tagProps?: TagProps;
    tips?: string | TNode;
    value?: SelectInputValue;
    valueDisplay?: string | TNode<{
        value: SelectInputValue;
        onClose: (index: number, item?: any) => void;
    }>;
    onBlur?: (value: SelectInputValue, context: SelectInputFocusContext) => void;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onEnter?: (value: SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: InputValue;
    }) => void;
    onFocus?: (value: SelectInputValue, context: SelectInputFocusContext) => void;
    onInputChange?: (value: InputValue, context?: SelectInputValueChangeContext) => void;
    onMouseenter?: (context: {
        e: MouseEvent;
    }) => void;
    onMouseleave?: (context: {
        e: MouseEvent;
    }) => void;
    onPaste?: (context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void;
    onPopupVisibleChange?: (visible: boolean, context: PopupVisibleChangeContext) => void;
    onTagChange?: (value: SelectInputValue, context: SelectInputChangeContext) => void;
}
export interface SelectInputKeys {
    label?: string;
    value?: string;
    children?: string;
}
export declare type SelectInputValue = string | number | boolean | Date | Object | Array<any> | Array<SelectInputValue>;
export interface SelectInputFocusContext {
    inputValue: InputValue;
    tagInputValue?: TagInputValue;
    e: FocusEvent;
}
export interface SelectInputValueChangeContext {
    e?: InputEvent | MouseEvent | FocusEvent | KeyboardEvent;
    trigger: 'input' | 'clear' | 'blur';
}
export declare type SelectInputChangeContext = TagInputChangeContext;
