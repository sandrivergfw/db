/// <reference types="sortablejs" />
import { TdPrimaryTableProps } from '../table/type';
import { PropType } from 'vue';
declare const _default: {
    asyncLoading: {
        type: PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
    };
    columnController: {
        type: PropType<import("../table/type").TableColumnController>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: PropType<import("../table/type").PrimaryTableCol<import("../table/type").TableRowData>[]>;
        default: () => TdPrimaryTableProps['columns'];
    };
    displayColumns: {
        type: PropType<import("..").CheckboxGroupValue>;
        default: any;
    };
    defaultDisplayColumns: {
        type: PropType<import("..").CheckboxGroupValue>;
    };
    dragSort: {
        type: PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
        validator(val: TdPrimaryTableProps['dragSort']): boolean;
    };
    dragSortOptions: {
        type: PropType<import("sortablejs").SortableOptions>;
    };
    editableCellState: {
        type: PropType<import("../table/type").EditableCellType<import("../table/type").TableRowData>>;
    };
    editableRowKeys: {
        type: PropType<(string | number)[]>;
    };
    expandIcon: {
        type: PropType<boolean | ((h: typeof import("vue").h, props: import("../table/type").ExpandArrowRenderParams<import("../table/type").TableRowData>) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: PropType<(h: typeof import("vue").h, props: import("../table/type").TableExpandedRowParams<import("../table/type").TableRowData>) => import("../common").SlotReturnValue>;
    };
    expandedRowKeys: {
        type: PropType<(string | number)[]>;
        default: any;
    };
    defaultExpandedRowKeys: {
        type: PropType<(string | number)[]>;
        default: () => TdPrimaryTableProps['defaultExpandedRowKeys'];
    };
    filterIcon: {
        type: PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    filterRow: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filterValue: {
        type: PropType<import("../table/type").FilterValue>;
        default: any;
    };
    defaultFilterValue: {
        type: PropType<import("../table/type").FilterValue>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: PropType<(string | number)[]>;
    };
    multipleSort: BooleanConstructor;
    selectedRowKeys: {
        type: PropType<(string | number)[]>;
        default: any;
    };
    defaultSelectedRowKeys: {
        type: PropType<(string | number)[]>;
        default: () => TdPrimaryTableProps['defaultSelectedRowKeys'];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: PropType<import("../table/type").TableSort>;
        default: any;
    };
    defaultSort: {
        type: PropType<import("../table/type").TableSort>;
    };
    sortIcon: {
        type: PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: PropType<(context: import("../table/type").PrimaryTableCellEventContext<import("../table/type").TableRowData>) => void>;
    onChange: PropType<(data: import("../table/type").TableChangeData, context: import("../table/type").TableChangeContext<import("../table/type").TableRowData>) => void>;
    onColumnChange: PropType<(context: import("../table/type").PrimaryTableColumnChange<import("../table/type").TableRowData>) => void>;
    onColumnControllerVisibleChange: PropType<(visible: boolean, context: {
        trigger: "cancel" | "confirm";
    }) => void>;
    onDataChange: PropType<(data: import("../table/type").TableRowData[], context: import("../table/type").TableDataChangeContext) => void>;
    onDisplayColumnsChange: PropType<(value: import("..").CheckboxGroupValue) => void>;
    onDragSort: PropType<(context: import("../table/type").DragSortContext<import("../table/type").TableRowData>) => void>;
    onExpandChange: PropType<(expandedRowKeys: (string | number)[], options: import("../table/type").ExpandOptions<import("../table/type").TableRowData>) => void>;
    onFilterChange: PropType<(filterValue: import("../table/type").FilterValue, context: {
        col?: import("../table/type").PrimaryTableCol<import("../table/type").TableRowData>;
    }) => void>;
    onRowEdit: PropType<(context: import("../table/type").PrimaryTableRowEditContext<import("../table/type").TableRowData>) => void>;
    onRowValidate: PropType<(context: import("../table/type").PrimaryTableRowValidateContext<import("../table/type").TableRowData>) => void>;
    onSelectChange: PropType<(selectedRowKeys: (string | number)[], options: import("../table/type").SelectOptions<import("../table/type").TableRowData>) => void>;
    onSortChange: PropType<(sort: import("../table/type").TableSort, options: import("../table/type").SortOptions<import("../table/type").TableRowData>) => void>;
    onValidate: PropType<(context: import("../table/type").PrimaryTableValidateContext) => void>;
};
export default _default;
