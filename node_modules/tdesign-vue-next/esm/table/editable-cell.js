/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _typeof from '@babel/runtime/helpers/typeof';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, toRefs, ref, computed, watch, createVNode, mergeProps } from 'vue';
import get from 'lodash/get';
import lodashSet from 'lodash/set';
import isFunction from 'lodash/isFunction';
import { Edit1Icon } from 'tdesign-icons-vue-next';
import { useGlobalIcon } from '../hooks/useGlobalIcon.js';
import { renderCell } from './tr.js';
import { validate } from '../form/form-model.js';
import '../_common/js/log/index.js';
import log from '../_common/js/log/log.js';
import '../hooks/useConfig.js';
import '../config-provider/useConfig.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/type.js';
import 'lodash/upperFirst';
import 'lodash/isString';
import 'lodash/pick';
import './utils.js';
import 'lodash/isObject';
import './hooks/useFixed.js';
import 'lodash/debounce';
import '../_common/js/utils/getScrollbarWidth.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../utils/dom.js';
import '../_chunks/dep-ff6303d0.js';
import '../utils/easing.js';
import './hooks/useClassName.js';
import './ellipsis.js';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../tooltip/index.js';
import '../tooltip/tooltip.js';
import '../tooltip/props.js';
import '../popup/props.js';
import '../popup/index.js';
import '../popup/popup.js';
import '@popperjs/core';
import '../_common/js/utils/set-style.js';
import '../popup/container.js';
import '../hooks/useVModel.js';
import '../utils/withInstall.js';
import '../popup/style';
import '../popup/type.js';
import '../hooks/tnode.js';
import '../tooltip/util.js';
import '../tooltip/style';
import '../tooltip/type.js';
import './base-table-props.js';
import './hooks/useLazyLoad.js';
import '../_common/js/utils/observe.js';
import './hooks/useRowspanAndColspan.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import 'lodash/isNumber';
import '../utils/helper.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var EditableCell = defineComponent({
  name: "TableEditableCell",
  props: {
    row: Object,
    rowIndex: Number,
    col: Object,
    colIndex: Number,
    oldCell: [Function, String],
    tableBaseClass: Object,
    cellEmptyContent: [Function, String],
    editable: {
      type: Boolean,
      "default": void 0
    },
    readonly: {
      type: Boolean
    },
    errors: {
      type: Array,
      "default": void 0
    },
    onChange: Function,
    onValidate: Function,
    onRuleChange: Function
  },
  setup: function setup(props, context) {
    var _props$col$edit;
    var _toRefs = toRefs(props),
      row = _toRefs.row,
      col = _toRefs.col;
    var tableEditableCellRef = ref(null);
    var isEdit = ref(((_props$col$edit = props.col.edit) === null || _props$col$edit === void 0 ? void 0 : _props$col$edit.defaultEditable) || false);
    var editValue = ref();
    var errorList = ref();
    var _useGlobalIcon = useGlobalIcon({
        Edit1Icon: Edit1Icon
      }),
      Edit1Icon$1 = _useGlobalIcon.Edit1Icon;
    var cellParams = computed(function () {
      return {
        rowIndex: props.rowIndex,
        colIndex: props.colIndex,
        col: props.col,
        row: props.row
      };
    });
    var currentRow = computed(function () {
      var newRow = _objectSpread({}, row.value);
      lodashSet(newRow, col.value.colKey, editValue.value);
      return newRow;
    });
    var cellNode = computed(function () {
      var node = renderCell({
        row: currentRow.value,
        col: _objectSpread(_objectSpread({}, col.value), {}, {
          cell: props.oldCell
        }),
        rowIndex: props.rowIndex,
        colIndex: props.colIndex
      }, context.slots, {
        cellEmptyContent: props.cellEmptyContent
      });
      return node;
    });
    var componentProps = computed(function () {
      var _edit$abortEditOnEven;
      var edit = col.value.edit;
      if (!edit) return {};
      var editProps = isFunction(edit.props) ? edit.props(_objectSpread(_objectSpread({}, cellParams.value), {}, {
        editedRow: currentRow.value
      })) : _objectSpread({}, edit.props);
      delete editProps.onChange;
      delete editProps.value;
      (_edit$abortEditOnEven = edit.abortEditOnEvent) === null || _edit$abortEditOnEven === void 0 ? void 0 : _edit$abortEditOnEven.forEach(function (item) {
        delete editProps[item];
      });
      return editProps;
    });
    var isAbortEditOnChange = computed(function () {
      var _edit$abortEditOnEven2;
      var edit = col.value.edit;
      if (!edit) return false;
      return Boolean((_edit$abortEditOnEven2 = edit.abortEditOnEvent) === null || _edit$abortEditOnEven2 === void 0 ? void 0 : _edit$abortEditOnEven2.includes("onChange"));
    });
    var validateEdit = function validateEdit(trigger) {
      return new Promise(function (resolve) {
        var params = {
          result: [_objectSpread(_objectSpread({}, cellParams.value), {}, {
            errorList: [],
            value: editValue.value
          })],
          trigger: trigger
        };
        var rules = isFunction(col.value.edit.rules) ? col.value.edit.rules(cellParams.value) : col.value.edit.rules;
        if (!col.value.edit || !rules || !rules.length) {
          var _props$onValidate;
          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, params);
          resolve(true);
          return;
        }
        validate(editValue.value, rules).then(function (result) {
          var _props$onValidate2;
          var list = result === null || result === void 0 ? void 0 : result.filter(function (t) {
            return !t.result;
          });
          params.result[0].errorList = list;
          (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 ? void 0 : _props$onValidate2.call(props, params);
          if (!list || !list.length) {
            resolve(true);
          } else {
            errorList.value = list;
            resolve(list);
          }
        });
      });
    };
    var isSame = function isSame(a, b) {
      if (_typeof(a) === "object" && _typeof(b) === "object") {
        return JSON.stringify(a) === JSON.stringify(b);
      }
      return a === b;
    };
    var updateAndSaveAbort = function updateAndSaveAbort(outsideAbortEvent) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      validateEdit("self").then(function (result) {
        if (result !== true) return;
        var oldValue = get(row.value, col.value.colKey);
        if (!isSame(editValue.value, oldValue)) {
          editValue.value = oldValue;
          outsideAbortEvent === null || outsideAbortEvent === void 0 ? void 0 : outsideAbortEvent.apply(void 0, args);
        }
        var timer = setTimeout(function () {
          isEdit.value = false;
          errorList.value = [];
          clearTimeout(timer);
        }, 0);
      });
    };
    var listeners = computed(function () {
      var _edit$abortEditOnEven3;
      var edit = col.value.edit;
      var isCellEditable = props.editable === void 0;
      if (!isEdit.value || !isCellEditable) return;
      if (!(edit !== null && edit !== void 0 && (_edit$abortEditOnEven3 = edit.abortEditOnEvent) !== null && _edit$abortEditOnEven3 !== void 0 && _edit$abortEditOnEven3.length)) return {};
      var tListeners = {};
      var outsideAbortEvent = edit === null || edit === void 0 ? void 0 : edit.onEdited;
      edit.abortEditOnEvent.forEach(function (itemEvent) {
        if (itemEvent === "onChange") return;
        tListeners[itemEvent] = function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          updateAndSaveAbort.apply(void 0, [outsideAbortEvent, _objectSpread(_objectSpread({}, cellParams.value), {}, {
            trigger: itemEvent,
            newRowData: currentRow.value
          })].concat(args));
        };
      });
      return tListeners;
    });
    var onEditChange = function onEditChange(val) {
      var _props$onChange, _props$onRuleChange;
      editValue.value = val;
      var params = _objectSpread(_objectSpread({}, cellParams.value), {}, {
        value: val,
        editedRow: _objectSpread(_objectSpread({}, props.row), {}, _defineProperty({}, props.col.colKey, val))
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, params);
      (_props$onRuleChange = props.onRuleChange) === null || _props$onRuleChange === void 0 ? void 0 : _props$onRuleChange.call(props, params);
      var isCellEditable = props.editable === void 0;
      if (isCellEditable && isAbortEditOnChange.value) {
        var _col$value$edit;
        var outsideAbortEvent = (_col$value$edit = col.value.edit) === null || _col$value$edit === void 0 ? void 0 : _col$value$edit.onEdited;
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        updateAndSaveAbort.apply(void 0, [outsideAbortEvent, _objectSpread(_objectSpread({}, cellParams.value), {}, {
          trigger: "onChange",
          newRowData: currentRow.value
        })].concat(args));
      }
    };
    var documentClickHandler = function documentClickHandler(e) {
      var _e$path, _tableEditableCellRef;
      if (!col.value.edit || !col.value.edit.component) return;
      if (!isEdit.value) return;
      if ((_e$path = e.path) !== null && _e$path !== void 0 && _e$path.includes((_tableEditableCellRef = tableEditableCellRef.value) === null || _tableEditableCellRef === void 0 ? void 0 : _tableEditableCellRef.$el)) return;
      for (var i = 0, len = e.path.length; i < len; i++) {
        var _node$classList, _node$classList$value;
        var node = e.path[i];
        if ((_node$classList = node.classList) !== null && _node$classList !== void 0 && (_node$classList$value = _node$classList.value) !== null && _node$classList$value !== void 0 && _node$classList$value.includes("popup__content")) {
          return;
        }
      }
      var outsideAbortEvent = col.value.edit.onEdited;
      updateAndSaveAbort(outsideAbortEvent, _objectSpread(_objectSpread({}, cellParams.value), {}, {
        trigger: "document",
        newRowData: currentRow.value
      }));
    };
    var cellValue = computed(function () {
      return get(row.value, col.value.colKey);
    });
    watch(cellValue, function (cellValue2) {
      var val = cellValue2;
      if (_typeof(val) === "object" && val !== null) {
        val = val instanceof Array ? _toConsumableArray(val) : _objectSpread({}, val);
      }
      editValue.value = val;
    }, {
      immediate: true
    });
    watch(isEdit, function (isEdit2) {
      var isCellEditable = props.editable === void 0;
      if (!col.value.edit || !col.value.edit.component || !isCellEditable) return;
      if (isEdit2) {
        document.addEventListener("click", documentClickHandler);
      } else {
        document.removeEventListener("click", documentClickHandler);
      }
    }, {
      immediate: true
    });
    watch(function () {
      return [props.editable, props.row, props.col, props.rowIndex, props.colIndex];
    }, function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
        editable = _ref2[0];
      if (editable === false) {
        editValue.value = cellValue.value;
      } else if (editable === true) {
        var _props$onRuleChange2;
        (_props$onRuleChange2 = props.onRuleChange) === null || _props$onRuleChange2 === void 0 ? void 0 : _props$onRuleChange2.call(props, _objectSpread(_objectSpread({}, cellParams.value), {}, {
          value: cellValue.value,
          editedRow: row.value
        }));
      }
    }, {
      immediate: true
    });
    watch(function () {
      return props.errors;
    }, function (errors) {
      errorList.value = errors;
    });
    return function () {
      var _col$value$edit3, _errorList$value, _errorList$value$, _errorList$value2, _errorList$value2$;
      if (props.readonly) {
        return cellNode.value;
      }
      if (props.editable === void 0 && !isEdit.value || props.editable === false) {
        var _col$value$edit2;
        return createVNode("div", {
          "class": props.tableBaseClass.cellEditable,
          "onClick": function onClick(e) {
            isEdit.value = true;
            e.stopPropagation();
          }
        }, [cellNode.value, ((_col$value$edit2 = col.value.edit) === null || _col$value$edit2 === void 0 ? void 0 : _col$value$edit2.showEditIcon) !== false && createVNode(Edit1Icon$1, {
          "size": "12px"
        }, null)]);
      }
      var Component = (_col$value$edit3 = col.value.edit) === null || _col$value$edit3 === void 0 ? void 0 : _col$value$edit3.component;
      if (!Component) {
        log.error("Table", "edit.component is required.");
        return null;
      }
      var errorMessage = (_errorList$value = errorList.value) === null || _errorList$value === void 0 ? void 0 : (_errorList$value$ = _errorList$value[0]) === null || _errorList$value$ === void 0 ? void 0 : _errorList$value$.message;
      return createVNode("div", {
        "class": props.tableBaseClass.cellEditWrap,
        "onClick": function onClick(e) {
          e.stopPropagation();
        }
      }, [createVNode(Component, mergeProps({
        "ref": "tableEditableCellRef",
        "status": errorMessage ? ((_errorList$value2 = errorList.value) === null || _errorList$value2 === void 0 ? void 0 : (_errorList$value2$ = _errorList$value2[0]) === null || _errorList$value2$ === void 0 ? void 0 : _errorList$value2$.type) || "error" : void 0,
        "tips": errorMessage
      }, componentProps.value, listeners.value, {
        "value": editValue.value,
        "onChange": onEditChange
      }), null)]);
    };
  }
});

export { EditableCell as default };
//# sourceMappingURL=editable-cell.js.map
