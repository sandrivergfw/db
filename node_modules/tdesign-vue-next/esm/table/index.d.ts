/// <reference types="lodash" />
/// <reference types="sortablejs" />
import './style';
export * from './type';
export * from './interface';
export declare const BaseTable: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            data: import("./type").TableRowData[];
            columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
            tableLayout: "fixed" | "auto";
            verticalAlign: "top" | "bottom" | "middle";
            loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            size: import("../common").SizeEnum;
            empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            hover: boolean;
            bordered: boolean;
            stripe: boolean;
            allowResizeColumnWidth: boolean;
            disableDataPage: boolean;
            footData: import("./type").TableRowData[];
            footerAffixedBottom: boolean;
            headerAffixedTop: boolean;
            resizable: boolean;
            rowKey: string;
            showHeader: boolean;
            tableContentWidth: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            renderExpandedRow: import("vue").PropType<(params: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
            onLeafColumnsChange: import("vue").PropType<(columns: import("./interface").BaseTableColumns) => void>;
            allowResizeColumnWidth: {
                type: BooleanConstructor;
                default: any;
            };
            bordered: BooleanConstructor;
            bottomContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            cellEmptyContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            };
            columns: {
                type: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]>;
                default: () => import("./type").BaseTableCol<import("./type").TableRowData>[];
            };
            data: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            disableDataPage: BooleanConstructor;
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            firstFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            fixedRows: {
                type: import("vue").PropType<number[]>;
            };
            footData: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            footerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            footerAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            footerSummary: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            headerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            headerAffixedTop: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            height: {
                type: import("vue").PropType<string | number>;
            };
            horizontalScrollAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            hover: BooleanConstructor;
            lastFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            loading: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: any;
            };
            loadingProps: {
                type: import("vue").PropType<import("..").TdLoadingProps>;
            };
            maxHeight: {
                type: import("vue").PropType<string | number>;
            };
            pagination: {
                type: import("vue").PropType<import("..").TdPaginationProps>;
            };
            paginationAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            resizable: BooleanConstructor;
            rowAttributes: {
                type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
            };
            rowClassName: {
                type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
            };
            rowKey: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            rowspanAndColspanInFooter: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            scroll: {
                type: import("vue").PropType<import("./type").TableScroll>;
            };
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            stripe: BooleanConstructor;
            tableContentWidth: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: import("vue").PropType<"fixed" | "auto">;
                default: "fixed" | "auto";
                validator(val: "fixed" | "auto"): boolean;
            };
            topContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            verticalAlign: {
                type: import("vue").PropType<"top" | "bottom" | "middle">;
                default: "top" | "bottom" | "middle";
                validator(val: "top" | "bottom" | "middle"): boolean;
            };
            onCellClick: import("vue").PropType<(context: import("./type").BaseTableCellEventContext<import("./type").TableRowData>) => void>;
            onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
            onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onScroll: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollX: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollY: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "data" | "columns" | "tableLayout" | "verticalAlign" | "loading" | "size" | "empty" | "hover" | "bordered" | "stripe" | "allowResizeColumnWidth" | "disableDataPage" | "footData" | "footerAffixedBottom" | "headerAffixedTop" | "resizable" | "rowKey" | "showHeader" | "tableContentWidth">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            renderExpandedRow: import("vue").PropType<(params: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
            onLeafColumnsChange: import("vue").PropType<(columns: import("./interface").BaseTableColumns) => void>;
            allowResizeColumnWidth: {
                type: BooleanConstructor;
                default: any;
            };
            bordered: BooleanConstructor;
            bottomContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            cellEmptyContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            };
            columns: {
                type: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]>;
                default: () => import("./type").BaseTableCol<import("./type").TableRowData>[];
            };
            data: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            disableDataPage: BooleanConstructor;
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            firstFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            fixedRows: {
                type: import("vue").PropType<number[]>;
            };
            footData: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            footerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            footerAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            footerSummary: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            headerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            headerAffixedTop: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            height: {
                type: import("vue").PropType<string | number>;
            };
            horizontalScrollAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            hover: BooleanConstructor;
            lastFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            loading: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: any;
            };
            loadingProps: {
                type: import("vue").PropType<import("..").TdLoadingProps>;
            };
            maxHeight: {
                type: import("vue").PropType<string | number>;
            };
            pagination: {
                type: import("vue").PropType<import("..").TdPaginationProps>;
            };
            paginationAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            resizable: BooleanConstructor;
            rowAttributes: {
                type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
            };
            rowClassName: {
                type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
            };
            rowKey: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            rowspanAndColspanInFooter: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            scroll: {
                type: import("vue").PropType<import("./type").TableScroll>;
            };
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            stripe: BooleanConstructor;
            tableContentWidth: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: import("vue").PropType<"fixed" | "auto">;
                default: "fixed" | "auto";
                validator(val: "fixed" | "auto"): boolean;
            };
            topContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            verticalAlign: {
                type: import("vue").PropType<"top" | "bottom" | "middle">;
                default: "top" | "bottom" | "middle";
                validator(val: "top" | "bottom" | "middle"): boolean;
            };
            onCellClick: import("vue").PropType<(context: import("./type").BaseTableCellEventContext<import("./type").TableRowData>) => void>;
            onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
            onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onScroll: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollX: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollY: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
        }>>, {
            thList: import("vue").ComputedRef<import("./interface").BaseTableColumns[]>;
            classPrefix: string;
            isVirtual: import("vue").ComputedRef<boolean>;
            globalConfig: import("vue").ComputedRef<({
                expandIcon: any;
                sortIcon: any;
                filterIcon: any;
                treeExpandAndFoldIcon: any;
                hideSortTips: boolean;
            } & {
                empty: string;
                loadingText: string;
                loadingMoreText: string;
                filterInputPlaceholder: string;
                sortAscendingOperationText: string;
                sortCancelOperationText: string;
                sortDescendingOperationText: string;
                clearFilterResultButtonText: string;
                columnConfigButtonText: string;
                columnConfigTitleText: string;
                columnConfigDescriptionText: string;
                confirmText: string;
                cancelText: string;
                resetText: string;
                selectAllText: string;
                searchResultText: string;
            }) | import("..").TableConfig>;
            tableFootHeight: import("vue").Ref<number>;
            virtualScrollHeaderPos: import("vue").Ref<{
                left: number;
                top: number;
            }>;
            tableWidth: import("vue").Ref<number>;
            tableElmWidth: import("vue").Ref<number>;
            tableRef: import("vue").Ref<HTMLDivElement>;
            tableElmRef: import("vue").Ref<HTMLTableElement>;
            sizeClassNames: {
                small: string;
                medium: string;
                large: string;
                default: string;
                xs: string;
                xl: string;
                block: string;
            };
            tableBaseClass: {
                table: string;
                columnResizableTable: string;
                overflowVisible: string;
                body: string;
                content: string;
                topContent: string;
                bottomContent: string;
                paginationWrap: string;
                tdLastRow: string;
                tdFirstCol: string;
                thCellInner: string;
                tableRowEdit: string;
                cellEditable: string;
                cellEditWrap: string;
                bordered: string;
                striped: string;
                hover: string;
                loading: string;
                rowspanAndColspan: string;
                empty: string;
                emptyRow: string;
                headerFixed: string;
                columnFixed: string;
                widthOverflow: string;
                multipleHeader: string;
                footerAffixed: string;
                horizontalBarAffixed: string;
                affixedHeader: string;
                affixedHeaderElm: string;
                affixedFooterElm: string;
                affixedFooterWrap: string;
                scrollbarDivider: string;
                fullHeight: string;
                resizeLine: string;
                obviousScrollbar: string;
                affixedHeaderWrap: string;
            };
            spansAndLeafNodes: import("vue").ComputedRef<{
                rowspanAndColspanMap: import("./interface").ThRowspanAndColspan;
                leafColumns: import("./interface").BaseTableColumns;
            }>;
            dynamicBaseTableClasses: import("vue").ComputedRef<((string | {
                [x: string]: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | Partial<import("..").TdAffixProps> | import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>;
            })[] | {
                [x: string]: boolean;
            })[]>;
            tableContentStyles: import("vue").ComputedRef<{
                height: string | number;
                maxHeight: string | number;
            }>;
            tableElementStyles: import("vue").ComputedRef<{
                width: string | number;
            }>;
            virtualScrollClasses: {
                cursor: string;
                header: string;
            };
            tableLayoutClasses: {
                auto: string;
                fixed: string;
            };
            tableElmClasses: import("vue").ComputedRef<(string[] | {
                [x: string]: string | number;
            })[]>;
            tableContentRef: import("vue").Ref<HTMLDivElement>;
            isFixedHeader: import("vue").Ref<boolean>;
            isWidthOverflow: import("vue").Ref<boolean>;
            isFixedColumn: import("vue").Ref<boolean>;
            rowAndColFixedPosition: import("vue").Ref<import("./interface").RowAndColFixedPosition>;
            showColumnShadow: {
                left: boolean;
                right: boolean;
            };
            thWidthList: import("vue").Ref<{
                [colKey: string]: number;
            }>;
            isPaginateData: import("vue").Ref<boolean>;
            dataSource: import("vue").Ref<{
                [x: string]: any;
                children?: any[];
            }[]>;
            scrollType: "lazy" | "virtual";
            rowHeight: number;
            trs: Map<any, any>;
            bufferSize: number;
            scrollHeight: import("vue").ComputedRef<any>;
            visibleData: import("vue").Ref<any[]>;
            translateY: import("vue").ComputedRef<any>;
            affixHeaderRef: import("vue").Ref<HTMLDivElement>;
            affixFooterRef: import("vue").Ref<HTMLDivElement>;
            paginationRef: import("vue").Ref<HTMLDivElement>;
            showAffixHeader: import("vue").Ref<boolean>;
            showAffixFooter: import("vue").Ref<boolean>;
            scrollbarWidth: import("vue").Ref<number>;
            isMultipleHeader: import("vue").ComputedRef<boolean>;
            showRightDivider: import("vue").ComputedRef<boolean>;
            resizeLineRef: import("vue").Ref<HTMLDivElement>;
            resizeLineStyle: {
                display: string;
                left: string;
                height: string;
                bottom: string;
            };
            columnResizeParams: {
                resizeLineRef: import("vue").Ref<HTMLDivElement>;
                resizeLineStyle: {
                    display: string;
                    left: string;
                    height: string;
                    bottom: string;
                };
                onColumnMouseover: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
                onColumnMousedown: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
                recalculateColWidth: import("./interface").RecalculateColumnWidthFunc;
                setEffectColMap: (nodes: import("./type").BaseTableCol<import("./type").TableRowData>[], parent: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
            };
            horizontalScrollbarRef: import("vue").Ref<HTMLDivElement>;
            tableBodyRef: import("vue").Ref<HTMLTableElement>;
            showAffixPagination: import("vue").Ref<boolean>;
            renderPagination: () => JSX.Element;
            renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
            handleRowMounted: () => void;
            onFixedChange: () => void;
            onHorizontalScroll: (scrollElement?: HTMLElement) => void;
            updateAffixHeaderOrFooter: () => void;
            refreshTable: import("lodash").DebouncedFunc<() => void>;
            onInnerVirtualScroll: (e: WheelEvent) => void;
            paginationAffixRef: import("vue").Ref<any>;
            horizontalScrollAffixRef: import("vue").Ref<any>;
            headerTopAffixRef: import("vue").Ref<any>;
            footerBottomAffixRef: import("vue").Ref<any>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
            data: import("./type").TableRowData[];
            columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
            tableLayout: "fixed" | "auto";
            verticalAlign: "top" | "bottom" | "middle";
            loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            size: import("../common").SizeEnum;
            empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            hover: boolean;
            bordered: boolean;
            stripe: boolean;
            allowResizeColumnWidth: boolean;
            disableDataPage: boolean;
            footData: import("./type").TableRowData[];
            footerAffixedBottom: boolean;
            headerAffixedTop: boolean;
            resizable: boolean;
            rowKey: string;
            showHeader: boolean;
            tableContentWidth: string;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        renderExpandedRow: import("vue").PropType<(params: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        onLeafColumnsChange: import("vue").PropType<(columns: import("./interface").BaseTableColumns) => void>;
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        columns: {
            type: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").BaseTableCol<import("./type").TableRowData>[];
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string;
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: any;
        };
        loadingProps: {
            type: import("vue").PropType<import("..").TdLoadingProps>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TableScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onCellClick: import("vue").PropType<(context: import("./type").BaseTableCellEventContext<import("./type").TableRowData>) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<{
        thList: import("vue").ComputedRef<import("./interface").BaseTableColumns[]>;
        classPrefix: string;
        isVirtual: import("vue").ComputedRef<boolean>;
        globalConfig: import("vue").ComputedRef<({
            expandIcon: any;
            sortIcon: any;
            filterIcon: any;
            treeExpandAndFoldIcon: any;
            hideSortTips: boolean;
        } & {
            empty: string;
            loadingText: string;
            loadingMoreText: string;
            filterInputPlaceholder: string;
            sortAscendingOperationText: string;
            sortCancelOperationText: string;
            sortDescendingOperationText: string;
            clearFilterResultButtonText: string;
            columnConfigButtonText: string;
            columnConfigTitleText: string;
            columnConfigDescriptionText: string;
            confirmText: string;
            cancelText: string;
            resetText: string;
            selectAllText: string;
            searchResultText: string;
        }) | import("..").TableConfig>;
        tableFootHeight: import("vue").Ref<number>;
        virtualScrollHeaderPos: import("vue").Ref<{
            left: number;
            top: number;
        }>;
        tableWidth: import("vue").Ref<number>;
        tableElmWidth: import("vue").Ref<number>;
        tableRef: import("vue").Ref<HTMLDivElement>;
        tableElmRef: import("vue").Ref<HTMLTableElement>;
        sizeClassNames: {
            small: string;
            medium: string;
            large: string;
            default: string;
            xs: string;
            xl: string;
            block: string;
        };
        tableBaseClass: {
            table: string;
            columnResizableTable: string;
            overflowVisible: string;
            body: string;
            content: string;
            topContent: string;
            bottomContent: string;
            paginationWrap: string;
            tdLastRow: string;
            tdFirstCol: string;
            thCellInner: string;
            tableRowEdit: string;
            cellEditable: string;
            cellEditWrap: string;
            bordered: string;
            striped: string;
            hover: string;
            loading: string;
            rowspanAndColspan: string;
            empty: string;
            emptyRow: string;
            headerFixed: string;
            columnFixed: string;
            widthOverflow: string;
            multipleHeader: string;
            footerAffixed: string;
            horizontalBarAffixed: string;
            affixedHeader: string;
            affixedHeaderElm: string;
            affixedFooterElm: string;
            affixedFooterWrap: string;
            scrollbarDivider: string;
            fullHeight: string;
            resizeLine: string;
            obviousScrollbar: string;
            affixedHeaderWrap: string;
        };
        spansAndLeafNodes: import("vue").ComputedRef<{
            rowspanAndColspanMap: import("./interface").ThRowspanAndColspan;
            leafColumns: import("./interface").BaseTableColumns;
        }>;
        dynamicBaseTableClasses: import("vue").ComputedRef<((string | {
            [x: string]: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | Partial<import("..").TdAffixProps> | import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>;
        })[] | {
            [x: string]: boolean;
        })[]>;
        tableContentStyles: import("vue").ComputedRef<{
            height: string | number;
            maxHeight: string | number;
        }>;
        tableElementStyles: import("vue").ComputedRef<{
            width: string | number;
        }>;
        virtualScrollClasses: {
            cursor: string;
            header: string;
        };
        tableLayoutClasses: {
            auto: string;
            fixed: string;
        };
        tableElmClasses: import("vue").ComputedRef<(string[] | {
            [x: string]: string | number;
        })[]>;
        tableContentRef: import("vue").Ref<HTMLDivElement>;
        isFixedHeader: import("vue").Ref<boolean>;
        isWidthOverflow: import("vue").Ref<boolean>;
        isFixedColumn: import("vue").Ref<boolean>;
        rowAndColFixedPosition: import("vue").Ref<import("./interface").RowAndColFixedPosition>;
        showColumnShadow: {
            left: boolean;
            right: boolean;
        };
        thWidthList: import("vue").Ref<{
            [colKey: string]: number;
        }>;
        isPaginateData: import("vue").Ref<boolean>;
        dataSource: import("vue").Ref<{
            [x: string]: any;
            children?: any[];
        }[]>;
        scrollType: "lazy" | "virtual";
        rowHeight: number;
        trs: Map<any, any>;
        bufferSize: number;
        scrollHeight: import("vue").ComputedRef<any>;
        visibleData: import("vue").Ref<any[]>;
        translateY: import("vue").ComputedRef<any>;
        affixHeaderRef: import("vue").Ref<HTMLDivElement>;
        affixFooterRef: import("vue").Ref<HTMLDivElement>;
        paginationRef: import("vue").Ref<HTMLDivElement>;
        showAffixHeader: import("vue").Ref<boolean>;
        showAffixFooter: import("vue").Ref<boolean>;
        scrollbarWidth: import("vue").Ref<number>;
        isMultipleHeader: import("vue").ComputedRef<boolean>;
        showRightDivider: import("vue").ComputedRef<boolean>;
        resizeLineRef: import("vue").Ref<HTMLDivElement>;
        resizeLineStyle: {
            display: string;
            left: string;
            height: string;
            bottom: string;
        };
        columnResizeParams: {
            resizeLineRef: import("vue").Ref<HTMLDivElement>;
            resizeLineStyle: {
                display: string;
                left: string;
                height: string;
                bottom: string;
            };
            onColumnMouseover: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
            onColumnMousedown: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
            recalculateColWidth: import("./interface").RecalculateColumnWidthFunc;
            setEffectColMap: (nodes: import("./type").BaseTableCol<import("./type").TableRowData>[], parent: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
        };
        horizontalScrollbarRef: import("vue").Ref<HTMLDivElement>;
        tableBodyRef: import("vue").Ref<HTMLTableElement>;
        showAffixPagination: import("vue").Ref<boolean>;
        renderPagination: () => JSX.Element;
        renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        handleRowMounted: () => void;
        onFixedChange: () => void;
        onHorizontalScroll: (scrollElement?: HTMLElement) => void;
        updateAffixHeaderOrFooter: () => void;
        refreshTable: import("lodash").DebouncedFunc<() => void>;
        onInnerVirtualScroll: (e: WheelEvent) => void;
        paginationAffixRef: import("vue").Ref<any>;
        horizontalScrollAffixRef: import("vue").Ref<any>;
        headerTopAffixRef: import("vue").Ref<any>;
        footerBottomAffixRef: import("vue").Ref<any>;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    renderExpandedRow: import("vue").PropType<(params: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
    onLeafColumnsChange: import("vue").PropType<(columns: import("./interface").BaseTableColumns) => void>;
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    columns: {
        type: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]>;
        default: () => import("./type").BaseTableCol<import("./type").TableRowData>[];
    };
    data: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    disableDataPage: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    firstFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: import("vue").PropType<number[]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    footerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    footerSummary: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    loading: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    loadingProps: {
        type: import("vue").PropType<import("..").TdLoadingProps>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TableScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onCellClick: import("vue").PropType<(context: import("./type").BaseTableCellEventContext<import("./type").TableRowData>) => void>;
    onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>>, {
    thList: import("vue").ComputedRef<import("./interface").BaseTableColumns[]>;
    classPrefix: string;
    isVirtual: import("vue").ComputedRef<boolean>;
    globalConfig: import("vue").ComputedRef<({
        expandIcon: any;
        sortIcon: any;
        filterIcon: any;
        treeExpandAndFoldIcon: any;
        hideSortTips: boolean;
    } & {
        empty: string;
        loadingText: string;
        loadingMoreText: string;
        filterInputPlaceholder: string;
        sortAscendingOperationText: string;
        sortCancelOperationText: string;
        sortDescendingOperationText: string;
        clearFilterResultButtonText: string;
        columnConfigButtonText: string;
        columnConfigTitleText: string;
        columnConfigDescriptionText: string;
        confirmText: string;
        cancelText: string;
        resetText: string;
        selectAllText: string;
        searchResultText: string;
    }) | import("..").TableConfig>;
    tableFootHeight: import("vue").Ref<number>;
    virtualScrollHeaderPos: import("vue").Ref<{
        left: number;
        top: number;
    }>;
    tableWidth: import("vue").Ref<number>;
    tableElmWidth: import("vue").Ref<number>;
    tableRef: import("vue").Ref<HTMLDivElement>;
    tableElmRef: import("vue").Ref<HTMLTableElement>;
    sizeClassNames: {
        small: string;
        medium: string;
        large: string;
        default: string;
        xs: string;
        xl: string;
        block: string;
    };
    tableBaseClass: {
        table: string;
        columnResizableTable: string;
        overflowVisible: string;
        body: string;
        content: string;
        topContent: string;
        bottomContent: string;
        paginationWrap: string;
        tdLastRow: string;
        tdFirstCol: string;
        thCellInner: string;
        tableRowEdit: string;
        cellEditable: string;
        cellEditWrap: string;
        bordered: string;
        striped: string;
        hover: string;
        loading: string;
        rowspanAndColspan: string;
        empty: string;
        emptyRow: string;
        headerFixed: string;
        columnFixed: string;
        widthOverflow: string;
        multipleHeader: string;
        footerAffixed: string;
        horizontalBarAffixed: string;
        affixedHeader: string;
        affixedHeaderElm: string;
        affixedFooterElm: string;
        affixedFooterWrap: string;
        scrollbarDivider: string;
        fullHeight: string;
        resizeLine: string;
        obviousScrollbar: string;
        affixedHeaderWrap: string;
    };
    spansAndLeafNodes: import("vue").ComputedRef<{
        rowspanAndColspanMap: import("./interface").ThRowspanAndColspan;
        leafColumns: import("./interface").BaseTableColumns;
    }>;
    dynamicBaseTableClasses: import("vue").ComputedRef<((string | {
        [x: string]: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | Partial<import("..").TdAffixProps> | import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>;
    })[] | {
        [x: string]: boolean;
    })[]>;
    tableContentStyles: import("vue").ComputedRef<{
        height: string | number;
        maxHeight: string | number;
    }>;
    tableElementStyles: import("vue").ComputedRef<{
        width: string | number;
    }>;
    virtualScrollClasses: {
        cursor: string;
        header: string;
    };
    tableLayoutClasses: {
        auto: string;
        fixed: string;
    };
    tableElmClasses: import("vue").ComputedRef<(string[] | {
        [x: string]: string | number;
    })[]>;
    tableContentRef: import("vue").Ref<HTMLDivElement>;
    isFixedHeader: import("vue").Ref<boolean>;
    isWidthOverflow: import("vue").Ref<boolean>;
    isFixedColumn: import("vue").Ref<boolean>;
    rowAndColFixedPosition: import("vue").Ref<import("./interface").RowAndColFixedPosition>;
    showColumnShadow: {
        left: boolean;
        right: boolean;
    };
    thWidthList: import("vue").Ref<{
        [colKey: string]: number;
    }>;
    isPaginateData: import("vue").Ref<boolean>;
    dataSource: import("vue").Ref<{
        [x: string]: any;
        children?: any[];
    }[]>;
    scrollType: "lazy" | "virtual";
    rowHeight: number;
    trs: Map<any, any>;
    bufferSize: number;
    scrollHeight: import("vue").ComputedRef<any>;
    visibleData: import("vue").Ref<any[]>;
    translateY: import("vue").ComputedRef<any>;
    affixHeaderRef: import("vue").Ref<HTMLDivElement>;
    affixFooterRef: import("vue").Ref<HTMLDivElement>;
    paginationRef: import("vue").Ref<HTMLDivElement>;
    showAffixHeader: import("vue").Ref<boolean>;
    showAffixFooter: import("vue").Ref<boolean>;
    scrollbarWidth: import("vue").Ref<number>;
    isMultipleHeader: import("vue").ComputedRef<boolean>;
    showRightDivider: import("vue").ComputedRef<boolean>;
    resizeLineRef: import("vue").Ref<HTMLDivElement>;
    resizeLineStyle: {
        display: string;
        left: string;
        height: string;
        bottom: string;
    };
    columnResizeParams: {
        resizeLineRef: import("vue").Ref<HTMLDivElement>;
        resizeLineStyle: {
            display: string;
            left: string;
            height: string;
            bottom: string;
        };
        onColumnMouseover: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
        onColumnMousedown: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
        recalculateColWidth: import("./interface").RecalculateColumnWidthFunc;
        setEffectColMap: (nodes: import("./type").BaseTableCol<import("./type").TableRowData>[], parent: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
    };
    horizontalScrollbarRef: import("vue").Ref<HTMLDivElement>;
    tableBodyRef: import("vue").Ref<HTMLTableElement>;
    showAffixPagination: import("vue").Ref<boolean>;
    renderPagination: () => JSX.Element;
    renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
    handleRowMounted: () => void;
    onFixedChange: () => void;
    onHorizontalScroll: (scrollElement?: HTMLElement) => void;
    updateAffixHeaderOrFooter: () => void;
    refreshTable: import("lodash").DebouncedFunc<() => void>;
    onInnerVirtualScroll: (e: WheelEvent) => void;
    paginationAffixRef: import("vue").Ref<any>;
    horizontalScrollAffixRef: import("vue").Ref<any>;
    headerTopAffixRef: import("vue").Ref<any>;
    footerBottomAffixRef: import("vue").Ref<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
    data: import("./type").TableRowData[];
    columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "bottom" | "middle";
    loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    size: import("../common").SizeEnum;
    empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    hover: boolean;
    bordered: boolean;
    stripe: boolean;
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean;
    headerAffixedTop: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const PrimaryTable: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            sort: import("./type").TableSort;
            data: import("./type").TableRowData[];
            columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
            tableLayout: "fixed" | "auto";
            verticalAlign: "top" | "bottom" | "middle";
            loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            size: import("../common").SizeEnum;
            empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            hover: boolean;
            bordered: boolean;
            stripe: boolean;
            allowResizeColumnWidth: boolean;
            disableDataPage: boolean;
            footData: import("./type").TableRowData[];
            footerAffixedBottom: boolean;
            headerAffixedTop: boolean;
            resizable: boolean;
            rowKey: string;
            showHeader: boolean;
            tableContentWidth: string;
            columnControllerVisible: boolean;
            defaultColumnControllerVisible: boolean;
            displayColumns: import("..").CheckboxGroupValue;
            expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
            expandOnRowClick: boolean;
            expandedRowKeys: (string | number)[];
            defaultExpandedRowKeys: (string | number)[];
            filterValue: any;
            hideSortTips: boolean;
            multipleSort: boolean;
            selectedRowKeys: (string | number)[];
            defaultSelectedRowKeys: (string | number)[];
            showSortColumnBgColor: boolean;
            sortOnRowDraggable: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            asyncLoading: {
                type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
            };
            columnController: {
                type: import("vue").PropType<import("./type").TableColumnController>;
            };
            columnControllerVisible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultColumnControllerVisible: {
                type: BooleanConstructor;
                default: any;
            };
            columns: {
                type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
                default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
            };
            displayColumns: {
                type: import("vue").PropType<import("..").CheckboxGroupValue>;
                default: any;
            };
            defaultDisplayColumns: {
                type: import("vue").PropType<import("..").CheckboxGroupValue>;
            };
            dragSort: {
                type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
                validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
            };
            dragSortOptions: {
                type: import("vue").PropType<import("sortablejs").SortableOptions>;
            };
            editableCellState: {
                type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
            };
            editableRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
            };
            expandIcon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            expandOnRowClick: BooleanConstructor;
            expandedRow: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
            };
            expandedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: any;
            };
            defaultExpandedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            filterIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            filterRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            filterValue: {
                type: import("vue").PropType<import("./type").FilterValue>;
                default: any;
            };
            defaultFilterValue: {
                type: import("vue").PropType<import("./type").FilterValue>;
            };
            hideSortTips: BooleanConstructor;
            indeterminateSelectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
            };
            multipleSort: BooleanConstructor;
            selectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: any;
            };
            defaultSelectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            showSortColumnBgColor: BooleanConstructor;
            sort: {
                type: import("vue").PropType<import("./type").TableSort>;
                default: any;
            };
            defaultSort: {
                type: import("vue").PropType<import("./type").TableSort>;
            };
            sortIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            sortOnRowDraggable: BooleanConstructor;
            onAsyncLoadingClick: import("vue").PropType<(context: {
                status: "loading" | "load-more";
            }) => void>;
            onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
            onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
            onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
            onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
                trigger: "cancel" | "confirm";
            }) => void>;
            onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
            onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
            onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
            onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
            onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
                col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
            }) => void>;
            onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
            onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
            onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
            onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
            onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
            allowResizeColumnWidth: {
                type: BooleanConstructor;
                default: any;
            };
            bordered: BooleanConstructor;
            bottomContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            cellEmptyContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            };
            data: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            disableDataPage: BooleanConstructor;
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            firstFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            fixedRows: {
                type: import("vue").PropType<number[]>;
            };
            footData: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            footerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            footerAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            footerSummary: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            headerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            headerAffixedTop: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            height: {
                type: import("vue").PropType<string | number>;
            };
            horizontalScrollAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            hover: BooleanConstructor;
            lastFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            loading: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: any;
            };
            loadingProps: {
                type: import("vue").PropType<import("..").TdLoadingProps>;
            };
            maxHeight: {
                type: import("vue").PropType<string | number>;
            };
            pagination: {
                type: import("vue").PropType<import("..").TdPaginationProps>;
            };
            paginationAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            resizable: BooleanConstructor;
            rowAttributes: {
                type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
            };
            rowClassName: {
                type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
            };
            rowKey: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            rowspanAndColspanInFooter: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            scroll: {
                type: import("vue").PropType<import("./type").TableScroll>;
            };
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            stripe: BooleanConstructor;
            tableContentWidth: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: import("vue").PropType<"fixed" | "auto">;
                default: "fixed" | "auto";
                validator(val: "fixed" | "auto"): boolean;
            };
            topContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            verticalAlign: {
                type: import("vue").PropType<"top" | "bottom" | "middle">;
                default: "top" | "bottom" | "middle";
                validator(val: "top" | "bottom" | "middle"): boolean;
            };
            onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
            onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onScroll: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollX: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollY: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "sort" | "data" | "columns" | "tableLayout" | "verticalAlign" | "loading" | "size" | "empty" | "hover" | "bordered" | "stripe" | "allowResizeColumnWidth" | "disableDataPage" | "footData" | "footerAffixedBottom" | "headerAffixedTop" | "resizable" | "rowKey" | "showHeader" | "tableContentWidth" | "columnControllerVisible" | "defaultColumnControllerVisible" | "displayColumns" | "expandIcon" | "expandOnRowClick" | "expandedRowKeys" | "defaultExpandedRowKeys" | "filterValue" | "hideSortTips" | "multipleSort" | "selectedRowKeys" | "defaultSelectedRowKeys" | "showSortColumnBgColor" | "sortOnRowDraggable">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            asyncLoading: {
                type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
            };
            columnController: {
                type: import("vue").PropType<import("./type").TableColumnController>;
            };
            columnControllerVisible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultColumnControllerVisible: {
                type: BooleanConstructor;
                default: any;
            };
            columns: {
                type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
                default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
            };
            displayColumns: {
                type: import("vue").PropType<import("..").CheckboxGroupValue>;
                default: any;
            };
            defaultDisplayColumns: {
                type: import("vue").PropType<import("..").CheckboxGroupValue>;
            };
            dragSort: {
                type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
                validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
            };
            dragSortOptions: {
                type: import("vue").PropType<import("sortablejs").SortableOptions>;
            };
            editableCellState: {
                type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
            };
            editableRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
            };
            expandIcon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            expandOnRowClick: BooleanConstructor;
            expandedRow: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
            };
            expandedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: any;
            };
            defaultExpandedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            filterIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            filterRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            filterValue: {
                type: import("vue").PropType<import("./type").FilterValue>;
                default: any;
            };
            defaultFilterValue: {
                type: import("vue").PropType<import("./type").FilterValue>;
            };
            hideSortTips: BooleanConstructor;
            indeterminateSelectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
            };
            multipleSort: BooleanConstructor;
            selectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: any;
            };
            defaultSelectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            showSortColumnBgColor: BooleanConstructor;
            sort: {
                type: import("vue").PropType<import("./type").TableSort>;
                default: any;
            };
            defaultSort: {
                type: import("vue").PropType<import("./type").TableSort>;
            };
            sortIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            sortOnRowDraggable: BooleanConstructor;
            onAsyncLoadingClick: import("vue").PropType<(context: {
                status: "loading" | "load-more";
            }) => void>;
            onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
            onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
            onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
            onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
                trigger: "cancel" | "confirm";
            }) => void>;
            onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
            onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
            onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
            onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
            onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
                col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
            }) => void>;
            onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
            onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
            onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
            onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
            onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
            allowResizeColumnWidth: {
                type: BooleanConstructor;
                default: any;
            };
            bordered: BooleanConstructor;
            bottomContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            cellEmptyContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            };
            data: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            disableDataPage: BooleanConstructor;
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            firstFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            fixedRows: {
                type: import("vue").PropType<number[]>;
            };
            footData: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            footerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            footerAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            footerSummary: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            headerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            headerAffixedTop: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            height: {
                type: import("vue").PropType<string | number>;
            };
            horizontalScrollAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            hover: BooleanConstructor;
            lastFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            loading: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: any;
            };
            loadingProps: {
                type: import("vue").PropType<import("..").TdLoadingProps>;
            };
            maxHeight: {
                type: import("vue").PropType<string | number>;
            };
            pagination: {
                type: import("vue").PropType<import("..").TdPaginationProps>;
            };
            paginationAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            resizable: BooleanConstructor;
            rowAttributes: {
                type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
            };
            rowClassName: {
                type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
            };
            rowKey: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            rowspanAndColspanInFooter: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            scroll: {
                type: import("vue").PropType<import("./type").TableScroll>;
            };
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            stripe: BooleanConstructor;
            tableContentWidth: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: import("vue").PropType<"fixed" | "auto">;
                default: "fixed" | "auto";
                validator(val: "fixed" | "auto"): boolean;
            };
            topContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            verticalAlign: {
                type: import("vue").PropType<"top" | "bottom" | "middle">;
                default: "top" | "bottom" | "middle";
                validator(val: "top" | "bottom" | "middle"): boolean;
            };
            onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
            onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onScroll: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollX: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollY: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
            sort: import("./type").TableSort;
            data: import("./type").TableRowData[];
            columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
            tableLayout: "fixed" | "auto";
            verticalAlign: "top" | "bottom" | "middle";
            loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            size: import("../common").SizeEnum;
            empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            hover: boolean;
            bordered: boolean;
            stripe: boolean;
            allowResizeColumnWidth: boolean;
            disableDataPage: boolean;
            footData: import("./type").TableRowData[];
            footerAffixedBottom: boolean;
            headerAffixedTop: boolean;
            resizable: boolean;
            rowKey: string;
            showHeader: boolean;
            tableContentWidth: string;
            columnControllerVisible: boolean;
            defaultColumnControllerVisible: boolean;
            displayColumns: import("..").CheckboxGroupValue;
            expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
            expandOnRowClick: boolean;
            expandedRowKeys: (string | number)[];
            defaultExpandedRowKeys: (string | number)[];
            filterValue: any;
            hideSortTips: boolean;
            multipleSort: boolean;
            selectedRowKeys: (string | number)[];
            defaultSelectedRowKeys: (string | number)[];
            showSortColumnBgColor: boolean;
            sortOnRowDraggable: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TableColumnController>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        };
        displayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
            default: any;
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
        };
        dragSort: {
            type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
            validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("sortablejs").SortableOptions>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
        };
        editableRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        expandIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            default: boolean;
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: any;
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        filterIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        filterRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
            default: any;
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        multipleSort: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: any;
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TableSort>;
            default: any;
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TableSort>;
        };
        sortIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<(context: {
            status: "loading" | "load-more";
        }) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
        onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
        onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
        onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
            trigger: "cancel" | "confirm";
        }) => void>;
        onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
        onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
        onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
        onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
            col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
        }) => void>;
        onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
        onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
        onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
        onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
        onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string;
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: any;
        };
        loadingProps: {
            type: import("vue").PropType<import("..").TdLoadingProps>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TableScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TableColumnController>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
        default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    };
    displayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
        default: any;
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
    };
    dragSort: {
        type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
        validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("sortablejs").SortableOptions>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
    };
    editableRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    expandIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: any;
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    filterIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    filterRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
        default: any;
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    multipleSort: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: any;
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TableSort>;
        default: any;
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TableSort>;
    };
    sortIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
    onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
    onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
    onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
        trigger: "cancel" | "confirm";
    }) => void>;
    onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
    onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
    onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
    onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
        col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
    }) => void>;
    onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
    onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
    onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
    onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
    onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    data: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    disableDataPage: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    firstFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: import("vue").PropType<number[]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    footerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    footerSummary: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    loading: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    loadingProps: {
        type: import("vue").PropType<import("..").TdLoadingProps>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TableScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
    sort: import("./type").TableSort;
    data: import("./type").TableRowData[];
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "bottom" | "middle";
    loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    size: import("../common").SizeEnum;
    empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    hover: boolean;
    bordered: boolean;
    stripe: boolean;
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean;
    headerAffixedTop: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: any;
    hideSortTips: boolean;
    multipleSort: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const EnhancedTable: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            sort: import("./type").TableSort;
            data: import("./type").TableRowData[];
            columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
            tableLayout: "fixed" | "auto";
            verticalAlign: "top" | "bottom" | "middle";
            loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            size: import("../common").SizeEnum;
            empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            hover: boolean;
            bordered: boolean;
            stripe: boolean;
            allowResizeColumnWidth: boolean;
            disableDataPage: boolean;
            footData: import("./type").TableRowData[];
            footerAffixedBottom: boolean;
            headerAffixedTop: boolean;
            resizable: boolean;
            rowKey: string;
            showHeader: boolean;
            tableContentWidth: string;
            columnControllerVisible: boolean;
            defaultColumnControllerVisible: boolean;
            displayColumns: import("..").CheckboxGroupValue;
            expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
            expandOnRowClick: boolean;
            expandedRowKeys: (string | number)[];
            defaultExpandedRowKeys: (string | number)[];
            filterValue: any;
            hideSortTips: boolean;
            multipleSort: boolean;
            selectedRowKeys: (string | number)[];
            defaultSelectedRowKeys: (string | number)[];
            showSortColumnBgColor: boolean;
            sortOnRowDraggable: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            beforeDragSort: {
                type: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => boolean>;
            };
            tree: {
                type: import("vue").PropType<import("./type").TableTreeConfig>;
            };
            treeExpandAndFoldIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: {
                    type: "expand" | "fold";
                }) => import("../common").SlotReturnValue>;
            };
            onAbnormalDragSort: import("vue").PropType<(context: import("./type").TableAbnormalDragSortContext<import("./type").TableRowData>) => void>;
            onTreeExpandChange: import("vue").PropType<(context: import("./type").TableTreeExpandChangeContext<import("./type").TableRowData>) => void>;
            asyncLoading: {
                type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
            };
            columnController: {
                type: import("vue").PropType<import("./type").TableColumnController>;
            };
            columnControllerVisible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultColumnControllerVisible: {
                type: BooleanConstructor;
                default: any;
            };
            columns: {
                type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
                default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
            };
            displayColumns: {
                type: import("vue").PropType<import("..").CheckboxGroupValue>;
                default: any;
            };
            defaultDisplayColumns: {
                type: import("vue").PropType<import("..").CheckboxGroupValue>;
            };
            dragSort: {
                type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
                validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
            };
            dragSortOptions: {
                type: import("vue").PropType<import("sortablejs").SortableOptions>;
            };
            editableCellState: {
                type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
            };
            editableRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
            };
            expandIcon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            expandOnRowClick: BooleanConstructor;
            expandedRow: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
            };
            expandedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: any;
            };
            defaultExpandedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            filterIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            filterRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            filterValue: {
                type: import("vue").PropType<import("./type").FilterValue>;
                default: any;
            };
            defaultFilterValue: {
                type: import("vue").PropType<import("./type").FilterValue>;
            };
            hideSortTips: BooleanConstructor;
            indeterminateSelectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
            };
            multipleSort: BooleanConstructor;
            selectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: any;
            };
            defaultSelectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            showSortColumnBgColor: BooleanConstructor;
            sort: {
                type: import("vue").PropType<import("./type").TableSort>;
                default: any;
            };
            defaultSort: {
                type: import("vue").PropType<import("./type").TableSort>;
            };
            sortIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            sortOnRowDraggable: BooleanConstructor;
            onAsyncLoadingClick: import("vue").PropType<(context: {
                status: "loading" | "load-more";
            }) => void>;
            onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
            onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
            onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
            onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
                trigger: "cancel" | "confirm";
            }) => void>;
            onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
            onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
            onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
            onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
            onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
                col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
            }) => void>;
            onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
            onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
            onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
            onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
            onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
            allowResizeColumnWidth: {
                type: BooleanConstructor;
                default: any;
            };
            bordered: BooleanConstructor;
            bottomContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            cellEmptyContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            };
            data: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            disableDataPage: BooleanConstructor;
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            firstFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            fixedRows: {
                type: import("vue").PropType<number[]>;
            };
            footData: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            footerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            footerAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            footerSummary: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            headerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            headerAffixedTop: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            height: {
                type: import("vue").PropType<string | number>;
            };
            horizontalScrollAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            hover: BooleanConstructor;
            lastFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            loading: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: any;
            };
            loadingProps: {
                type: import("vue").PropType<import("..").TdLoadingProps>;
            };
            maxHeight: {
                type: import("vue").PropType<string | number>;
            };
            pagination: {
                type: import("vue").PropType<import("..").TdPaginationProps>;
            };
            paginationAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            resizable: BooleanConstructor;
            rowAttributes: {
                type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
            };
            rowClassName: {
                type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
            };
            rowKey: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            rowspanAndColspanInFooter: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            scroll: {
                type: import("vue").PropType<import("./type").TableScroll>;
            };
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            stripe: BooleanConstructor;
            tableContentWidth: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: import("vue").PropType<"fixed" | "auto">;
                default: "fixed" | "auto";
                validator(val: "fixed" | "auto"): boolean;
            };
            topContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            verticalAlign: {
                type: import("vue").PropType<"top" | "bottom" | "middle">;
                default: "top" | "bottom" | "middle";
                validator(val: "top" | "bottom" | "middle"): boolean;
            };
            onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
            onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onScroll: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollX: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollY: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "sort" | "data" | "columns" | "tableLayout" | "verticalAlign" | "loading" | "size" | "empty" | "hover" | "bordered" | "stripe" | "allowResizeColumnWidth" | "disableDataPage" | "footData" | "footerAffixedBottom" | "headerAffixedTop" | "resizable" | "rowKey" | "showHeader" | "tableContentWidth" | "columnControllerVisible" | "defaultColumnControllerVisible" | "displayColumns" | "expandIcon" | "expandOnRowClick" | "expandedRowKeys" | "defaultExpandedRowKeys" | "filterValue" | "hideSortTips" | "multipleSort" | "selectedRowKeys" | "defaultSelectedRowKeys" | "showSortColumnBgColor" | "sortOnRowDraggable">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            beforeDragSort: {
                type: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => boolean>;
            };
            tree: {
                type: import("vue").PropType<import("./type").TableTreeConfig>;
            };
            treeExpandAndFoldIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: {
                    type: "expand" | "fold";
                }) => import("../common").SlotReturnValue>;
            };
            onAbnormalDragSort: import("vue").PropType<(context: import("./type").TableAbnormalDragSortContext<import("./type").TableRowData>) => void>;
            onTreeExpandChange: import("vue").PropType<(context: import("./type").TableTreeExpandChangeContext<import("./type").TableRowData>) => void>;
            asyncLoading: {
                type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
            };
            columnController: {
                type: import("vue").PropType<import("./type").TableColumnController>;
            };
            columnControllerVisible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultColumnControllerVisible: {
                type: BooleanConstructor;
                default: any;
            };
            columns: {
                type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
                default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
            };
            displayColumns: {
                type: import("vue").PropType<import("..").CheckboxGroupValue>;
                default: any;
            };
            defaultDisplayColumns: {
                type: import("vue").PropType<import("..").CheckboxGroupValue>;
            };
            dragSort: {
                type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
                validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
            };
            dragSortOptions: {
                type: import("vue").PropType<import("sortablejs").SortableOptions>;
            };
            editableCellState: {
                type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
            };
            editableRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
            };
            expandIcon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            expandOnRowClick: BooleanConstructor;
            expandedRow: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
            };
            expandedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: any;
            };
            defaultExpandedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            filterIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            filterRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            filterValue: {
                type: import("vue").PropType<import("./type").FilterValue>;
                default: any;
            };
            defaultFilterValue: {
                type: import("vue").PropType<import("./type").FilterValue>;
            };
            hideSortTips: BooleanConstructor;
            indeterminateSelectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
            };
            multipleSort: BooleanConstructor;
            selectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: any;
            };
            defaultSelectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            showSortColumnBgColor: BooleanConstructor;
            sort: {
                type: import("vue").PropType<import("./type").TableSort>;
                default: any;
            };
            defaultSort: {
                type: import("vue").PropType<import("./type").TableSort>;
            };
            sortIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            sortOnRowDraggable: BooleanConstructor;
            onAsyncLoadingClick: import("vue").PropType<(context: {
                status: "loading" | "load-more";
            }) => void>;
            onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
            onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
            onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
            onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
                trigger: "cancel" | "confirm";
            }) => void>;
            onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
            onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
            onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
            onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
            onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
                col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
            }) => void>;
            onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
            onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
            onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
            onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
            onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
            allowResizeColumnWidth: {
                type: BooleanConstructor;
                default: any;
            };
            bordered: BooleanConstructor;
            bottomContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            cellEmptyContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            };
            data: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            disableDataPage: BooleanConstructor;
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            firstFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            fixedRows: {
                type: import("vue").PropType<number[]>;
            };
            footData: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            footerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            footerAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            footerSummary: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            headerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            headerAffixedTop: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            height: {
                type: import("vue").PropType<string | number>;
            };
            horizontalScrollAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            hover: BooleanConstructor;
            lastFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            loading: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: any;
            };
            loadingProps: {
                type: import("vue").PropType<import("..").TdLoadingProps>;
            };
            maxHeight: {
                type: import("vue").PropType<string | number>;
            };
            pagination: {
                type: import("vue").PropType<import("..").TdPaginationProps>;
            };
            paginationAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            resizable: BooleanConstructor;
            rowAttributes: {
                type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
            };
            rowClassName: {
                type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
            };
            rowKey: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            rowspanAndColspanInFooter: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            scroll: {
                type: import("vue").PropType<import("./type").TableScroll>;
            };
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            stripe: BooleanConstructor;
            tableContentWidth: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: import("vue").PropType<"fixed" | "auto">;
                default: "fixed" | "auto";
                validator(val: "fixed" | "auto"): boolean;
            };
            topContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            verticalAlign: {
                type: import("vue").PropType<"top" | "bottom" | "middle">;
                default: "top" | "bottom" | "middle";
                validator(val: "top" | "bottom" | "middle"): boolean;
            };
            onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
            onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onScroll: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollX: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollY: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
            sort: import("./type").TableSort;
            data: import("./type").TableRowData[];
            columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
            tableLayout: "fixed" | "auto";
            verticalAlign: "top" | "bottom" | "middle";
            loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            size: import("../common").SizeEnum;
            empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            hover: boolean;
            bordered: boolean;
            stripe: boolean;
            allowResizeColumnWidth: boolean;
            disableDataPage: boolean;
            footData: import("./type").TableRowData[];
            footerAffixedBottom: boolean;
            headerAffixedTop: boolean;
            resizable: boolean;
            rowKey: string;
            showHeader: boolean;
            tableContentWidth: string;
            columnControllerVisible: boolean;
            defaultColumnControllerVisible: boolean;
            displayColumns: import("..").CheckboxGroupValue;
            expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
            expandOnRowClick: boolean;
            expandedRowKeys: (string | number)[];
            defaultExpandedRowKeys: (string | number)[];
            filterValue: any;
            hideSortTips: boolean;
            multipleSort: boolean;
            selectedRowKeys: (string | number)[];
            defaultSelectedRowKeys: (string | number)[];
            showSortColumnBgColor: boolean;
            sortOnRowDraggable: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        beforeDragSort: {
            type: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => boolean>;
        };
        tree: {
            type: import("vue").PropType<import("./type").TableTreeConfig>;
        };
        treeExpandAndFoldIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                type: "expand" | "fold";
            }) => import("../common").SlotReturnValue>;
        };
        onAbnormalDragSort: import("vue").PropType<(context: import("./type").TableAbnormalDragSortContext<import("./type").TableRowData>) => void>;
        onTreeExpandChange: import("vue").PropType<(context: import("./type").TableTreeExpandChangeContext<import("./type").TableRowData>) => void>;
        asyncLoading: {
            type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TableColumnController>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        };
        displayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
            default: any;
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
        };
        dragSort: {
            type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
            validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("sortablejs").SortableOptions>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
        };
        editableRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        expandIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            default: boolean;
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: any;
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        filterIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        filterRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
            default: any;
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        multipleSort: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: any;
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TableSort>;
            default: any;
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TableSort>;
        };
        sortIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<(context: {
            status: "loading" | "load-more";
        }) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
        onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
        onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
        onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
            trigger: "cancel" | "confirm";
        }) => void>;
        onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
        onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
        onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
        onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
            col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
        }) => void>;
        onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
        onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
        onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
        onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
        onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string;
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: any;
        };
        loadingProps: {
            type: import("vue").PropType<import("..").TdLoadingProps>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TableScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    beforeDragSort: {
        type: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => boolean>;
    };
    tree: {
        type: import("vue").PropType<import("./type").TableTreeConfig>;
    };
    treeExpandAndFoldIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            type: "expand" | "fold";
        }) => import("../common").SlotReturnValue>;
    };
    onAbnormalDragSort: import("vue").PropType<(context: import("./type").TableAbnormalDragSortContext<import("./type").TableRowData>) => void>;
    onTreeExpandChange: import("vue").PropType<(context: import("./type").TableTreeExpandChangeContext<import("./type").TableRowData>) => void>;
    asyncLoading: {
        type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TableColumnController>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
        default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    };
    displayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
        default: any;
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
    };
    dragSort: {
        type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
        validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("sortablejs").SortableOptions>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
    };
    editableRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    expandIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: any;
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    filterIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    filterRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
        default: any;
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    multipleSort: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: any;
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TableSort>;
        default: any;
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TableSort>;
    };
    sortIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
    onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
    onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
    onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
        trigger: "cancel" | "confirm";
    }) => void>;
    onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
    onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
    onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
    onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
        col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
    }) => void>;
    onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
    onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
    onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
    onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
    onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    data: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    disableDataPage: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    firstFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: import("vue").PropType<number[]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    footerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    footerSummary: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    loading: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    loadingProps: {
        type: import("vue").PropType<import("..").TdLoadingProps>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TableScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
    sort: import("./type").TableSort;
    data: import("./type").TableRowData[];
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "bottom" | "middle";
    loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    size: import("../common").SizeEnum;
    empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    hover: boolean;
    bordered: boolean;
    stripe: boolean;
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean;
    headerAffixedTop: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: any;
    hideSortTips: boolean;
    multipleSort: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const Table: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            sort: import("./type").TableSort;
            data: import("./type").TableRowData[];
            columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
            tableLayout: "fixed" | "auto";
            verticalAlign: "top" | "bottom" | "middle";
            loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            size: import("../common").SizeEnum;
            empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            hover: boolean;
            bordered: boolean;
            stripe: boolean;
            allowResizeColumnWidth: boolean;
            disableDataPage: boolean;
            footData: import("./type").TableRowData[];
            footerAffixedBottom: boolean;
            headerAffixedTop: boolean;
            resizable: boolean;
            rowKey: string;
            showHeader: boolean;
            tableContentWidth: string;
            columnControllerVisible: boolean;
            defaultColumnControllerVisible: boolean;
            displayColumns: import("..").CheckboxGroupValue;
            expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
            expandOnRowClick: boolean;
            expandedRowKeys: (string | number)[];
            defaultExpandedRowKeys: (string | number)[];
            filterValue: any;
            hideSortTips: boolean;
            multipleSort: boolean;
            selectedRowKeys: (string | number)[];
            defaultSelectedRowKeys: (string | number)[];
            showSortColumnBgColor: boolean;
            sortOnRowDraggable: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            asyncLoading: {
                type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
            };
            columnController: {
                type: import("vue").PropType<import("./type").TableColumnController>;
            };
            columnControllerVisible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultColumnControllerVisible: {
                type: BooleanConstructor;
                default: any;
            };
            columns: {
                type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
                default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
            };
            displayColumns: {
                type: import("vue").PropType<import("..").CheckboxGroupValue>;
                default: any;
            };
            defaultDisplayColumns: {
                type: import("vue").PropType<import("..").CheckboxGroupValue>;
            };
            dragSort: {
                type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
                validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
            };
            dragSortOptions: {
                type: import("vue").PropType<import("sortablejs").SortableOptions>;
            };
            editableCellState: {
                type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
            };
            editableRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
            };
            expandIcon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            expandOnRowClick: BooleanConstructor;
            expandedRow: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
            };
            expandedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: any;
            };
            defaultExpandedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            filterIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            filterRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            filterValue: {
                type: import("vue").PropType<import("./type").FilterValue>;
                default: any;
            };
            defaultFilterValue: {
                type: import("vue").PropType<import("./type").FilterValue>;
            };
            hideSortTips: BooleanConstructor;
            indeterminateSelectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
            };
            multipleSort: BooleanConstructor;
            selectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: any;
            };
            defaultSelectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            showSortColumnBgColor: BooleanConstructor;
            sort: {
                type: import("vue").PropType<import("./type").TableSort>;
                default: any;
            };
            defaultSort: {
                type: import("vue").PropType<import("./type").TableSort>;
            };
            sortIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            sortOnRowDraggable: BooleanConstructor;
            onAsyncLoadingClick: import("vue").PropType<(context: {
                status: "loading" | "load-more";
            }) => void>;
            onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
            onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
            onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
            onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
                trigger: "cancel" | "confirm";
            }) => void>;
            onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
            onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
            onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
            onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
            onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
                col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
            }) => void>;
            onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
            onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
            onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
            onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
            onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
            allowResizeColumnWidth: {
                type: BooleanConstructor;
                default: any;
            };
            bordered: BooleanConstructor;
            bottomContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            cellEmptyContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            };
            data: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            disableDataPage: BooleanConstructor;
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            firstFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            fixedRows: {
                type: import("vue").PropType<number[]>;
            };
            footData: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            footerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            footerAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            footerSummary: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            headerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            headerAffixedTop: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            height: {
                type: import("vue").PropType<string | number>;
            };
            horizontalScrollAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            hover: BooleanConstructor;
            lastFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            loading: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: any;
            };
            loadingProps: {
                type: import("vue").PropType<import("..").TdLoadingProps>;
            };
            maxHeight: {
                type: import("vue").PropType<string | number>;
            };
            pagination: {
                type: import("vue").PropType<import("..").TdPaginationProps>;
            };
            paginationAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            resizable: BooleanConstructor;
            rowAttributes: {
                type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
            };
            rowClassName: {
                type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
            };
            rowKey: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            rowspanAndColspanInFooter: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            scroll: {
                type: import("vue").PropType<import("./type").TableScroll>;
            };
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            stripe: BooleanConstructor;
            tableContentWidth: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: import("vue").PropType<"fixed" | "auto">;
                default: "fixed" | "auto";
                validator(val: "fixed" | "auto"): boolean;
            };
            topContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            verticalAlign: {
                type: import("vue").PropType<"top" | "bottom" | "middle">;
                default: "top" | "bottom" | "middle";
                validator(val: "top" | "bottom" | "middle"): boolean;
            };
            onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
            onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onScroll: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollX: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollY: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "sort" | "data" | "columns" | "tableLayout" | "verticalAlign" | "loading" | "size" | "empty" | "hover" | "bordered" | "stripe" | "allowResizeColumnWidth" | "disableDataPage" | "footData" | "footerAffixedBottom" | "headerAffixedTop" | "resizable" | "rowKey" | "showHeader" | "tableContentWidth" | "columnControllerVisible" | "defaultColumnControllerVisible" | "displayColumns" | "expandIcon" | "expandOnRowClick" | "expandedRowKeys" | "defaultExpandedRowKeys" | "filterValue" | "hideSortTips" | "multipleSort" | "selectedRowKeys" | "defaultSelectedRowKeys" | "showSortColumnBgColor" | "sortOnRowDraggable">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            asyncLoading: {
                type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
            };
            columnController: {
                type: import("vue").PropType<import("./type").TableColumnController>;
            };
            columnControllerVisible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultColumnControllerVisible: {
                type: BooleanConstructor;
                default: any;
            };
            columns: {
                type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
                default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
            };
            displayColumns: {
                type: import("vue").PropType<import("..").CheckboxGroupValue>;
                default: any;
            };
            defaultDisplayColumns: {
                type: import("vue").PropType<import("..").CheckboxGroupValue>;
            };
            dragSort: {
                type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
                validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
            };
            dragSortOptions: {
                type: import("vue").PropType<import("sortablejs").SortableOptions>;
            };
            editableCellState: {
                type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
            };
            editableRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
            };
            expandIcon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            expandOnRowClick: BooleanConstructor;
            expandedRow: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
            };
            expandedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: any;
            };
            defaultExpandedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            filterIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            filterRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            filterValue: {
                type: import("vue").PropType<import("./type").FilterValue>;
                default: any;
            };
            defaultFilterValue: {
                type: import("vue").PropType<import("./type").FilterValue>;
            };
            hideSortTips: BooleanConstructor;
            indeterminateSelectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
            };
            multipleSort: BooleanConstructor;
            selectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: any;
            };
            defaultSelectedRowKeys: {
                type: import("vue").PropType<(string | number)[]>;
                default: () => (string | number)[];
            };
            showSortColumnBgColor: BooleanConstructor;
            sort: {
                type: import("vue").PropType<import("./type").TableSort>;
                default: any;
            };
            defaultSort: {
                type: import("vue").PropType<import("./type").TableSort>;
            };
            sortIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            sortOnRowDraggable: BooleanConstructor;
            onAsyncLoadingClick: import("vue").PropType<(context: {
                status: "loading" | "load-more";
            }) => void>;
            onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
            onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
            onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
            onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
                trigger: "cancel" | "confirm";
            }) => void>;
            onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
            onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
            onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
            onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
            onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
                col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
            }) => void>;
            onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
            onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
            onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
            onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
            onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
            allowResizeColumnWidth: {
                type: BooleanConstructor;
                default: any;
            };
            bordered: BooleanConstructor;
            bottomContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            cellEmptyContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            };
            data: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            disableDataPage: BooleanConstructor;
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            firstFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            fixedRows: {
                type: import("vue").PropType<number[]>;
            };
            footData: {
                type: import("vue").PropType<import("./type").TableRowData[]>;
                default: () => import("./type").TableRowData[];
            };
            footerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            footerAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            footerSummary: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            headerAffixProps: {
                type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
            };
            headerAffixedTop: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
                default: boolean;
            };
            height: {
                type: import("vue").PropType<string | number>;
            };
            horizontalScrollAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            hover: BooleanConstructor;
            lastFullRow: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            loading: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: any;
            };
            loadingProps: {
                type: import("vue").PropType<import("..").TdLoadingProps>;
            };
            maxHeight: {
                type: import("vue").PropType<string | number>;
            };
            pagination: {
                type: import("vue").PropType<import("..").TdPaginationProps>;
            };
            paginationAffixedBottom: {
                type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            };
            resizable: BooleanConstructor;
            rowAttributes: {
                type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
            };
            rowClassName: {
                type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
            };
            rowKey: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            rowspanAndColspanInFooter: {
                type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
            };
            scroll: {
                type: import("vue").PropType<import("./type").TableScroll>;
            };
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            stripe: BooleanConstructor;
            tableContentWidth: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: import("vue").PropType<"fixed" | "auto">;
                default: "fixed" | "auto";
                validator(val: "fixed" | "auto"): boolean;
            };
            topContent: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            verticalAlign: {
                type: import("vue").PropType<"top" | "bottom" | "middle">;
                default: "top" | "bottom" | "middle";
                validator(val: "top" | "bottom" | "middle"): boolean;
            };
            onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
            onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
            onScroll: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollX: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
            onScrollY: import("vue").PropType<(params: {
                e: WheelEvent;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
            sort: import("./type").TableSort;
            data: import("./type").TableRowData[];
            columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
            tableLayout: "fixed" | "auto";
            verticalAlign: "top" | "bottom" | "middle";
            loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            size: import("../common").SizeEnum;
            empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            hover: boolean;
            bordered: boolean;
            stripe: boolean;
            allowResizeColumnWidth: boolean;
            disableDataPage: boolean;
            footData: import("./type").TableRowData[];
            footerAffixedBottom: boolean;
            headerAffixedTop: boolean;
            resizable: boolean;
            rowKey: string;
            showHeader: boolean;
            tableContentWidth: string;
            columnControllerVisible: boolean;
            defaultColumnControllerVisible: boolean;
            displayColumns: import("..").CheckboxGroupValue;
            expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
            expandOnRowClick: boolean;
            expandedRowKeys: (string | number)[];
            defaultExpandedRowKeys: (string | number)[];
            filterValue: any;
            hideSortTips: boolean;
            multipleSort: boolean;
            selectedRowKeys: (string | number)[];
            defaultSelectedRowKeys: (string | number)[];
            showSortColumnBgColor: boolean;
            sortOnRowDraggable: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TableColumnController>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        };
        displayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
            default: any;
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
        };
        dragSort: {
            type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
            validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("sortablejs").SortableOptions>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
        };
        editableRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        expandIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            default: boolean;
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: any;
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        filterIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        filterRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
            default: any;
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        multipleSort: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: any;
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TableSort>;
            default: any;
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TableSort>;
        };
        sortIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<(context: {
            status: "loading" | "load-more";
        }) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
        onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
        onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
        onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
            trigger: "cancel" | "confirm";
        }) => void>;
        onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
        onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
        onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
        onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
            col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
        }) => void>;
        onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
        onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
        onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
        onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
        onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string;
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: any;
        };
        loadingProps: {
            type: import("vue").PropType<import("..").TdLoadingProps>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TableScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TableColumnController>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
        default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    };
    displayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
        default: any;
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
    };
    dragSort: {
        type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
        validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("sortablejs").SortableOptions>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
    };
    editableRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    expandIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: any;
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    filterIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    filterRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
        default: any;
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    multipleSort: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: any;
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TableSort>;
        default: any;
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TableSort>;
    };
    sortIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
    onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
    onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
    onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
        trigger: "cancel" | "confirm";
    }) => void>;
    onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
    onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
    onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
    onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
        col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
    }) => void>;
    onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
    onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
    onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
    onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
    onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    data: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    disableDataPage: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    firstFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: import("vue").PropType<number[]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    footerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    footerSummary: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    loading: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    loadingProps: {
        type: import("vue").PropType<import("..").TdLoadingProps>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TableScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
    sort: import("./type").TableSort;
    data: import("./type").TableRowData[];
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "bottom" | "middle";
    loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    size: import("../common").SizeEnum;
    empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    hover: boolean;
    bordered: boolean;
    stripe: boolean;
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean;
    headerAffixedTop: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: any;
    hideSortTips: boolean;
    multipleSort: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Table;
