{"version":3,"file":"useColumnController.js","sources":["../../../src/table/hooks/useColumnController.tsx"],"sourcesContent":["/**\n * 自定义显示列控制器，即列配置\n */\nimport { computed, ref, SetupContext, toRefs, watch } from 'vue';\nimport { SettingIcon as TdSettingIcon } from 'tdesign-icons-vue-next';\n\nimport intersection from 'lodash/intersection';\nimport Checkbox, {\n  CheckboxGroup,\n  CheckboxGroupValue,\n  CheckboxOptionObj,\n  CheckboxGroupChangeContext,\n} from '../../checkbox';\nimport { DialogPlugin } from '../../dialog/plugin';\nimport { renderTitle } from './useTableHeader';\nimport { PrimaryTableCol, TdPrimaryTableProps } from '../type';\nimport { useConfig } from '../../hooks/useConfig';\nimport { useGlobalIcon } from '../../hooks/useGlobalIcon';\nimport useDefaultValue from '../../hooks/useDefaultValue';\nimport { getCurrentRowByKey } from '../utils';\nimport { DialogInstance } from '../../dialog';\nimport TButton from '../../button';\n\nexport function getColumnKeys(columns: PrimaryTableCol[], keys = new Set<string>()) {\n  for (let i = 0, len = columns.length; i < len; i++) {\n    const col = columns[i];\n    col.colKey && keys.add(col.colKey);\n    if (col.children?.length) {\n      getColumnKeys(col.children, keys);\n    }\n  }\n  return keys;\n}\n\nexport default function useColumnController(props: TdPrimaryTableProps, context: SetupContext) {\n  const { classPrefix, globalConfig } = useConfig('table');\n  const { SettingIcon } = useGlobalIcon({ SettingIcon: TdSettingIcon });\n  const { columns, columnController, displayColumns, columnControllerVisible } = toRefs(props);\n  const dialogInstance = ref<DialogInstance>(null);\n\n  const enabledColKeys = computed(() => {\n    const arr = (columnController.value?.fields || [...getColumnKeys(columns.value)] || []).filter((v) => v);\n    return new Set(arr);\n  });\n\n  const keys = [...getColumnKeys(columns.value)];\n\n  // 确认后的列配置\n  const [tDisplayColumns, setTDisplayColumns] = useDefaultValue(\n    displayColumns,\n    props.defaultDisplayColumns || keys,\n    props.onDisplayColumnsChange,\n    'displayColumns',\n  );\n  // 弹框内的多选\n  const columnCheckboxKeys = ref<CheckboxGroupValue>(displayColumns.value || props.defaultDisplayColumns || keys);\n\n  const checkboxOptions = computed<CheckboxOptionObj[]>(() => getCheckboxOptions(columns.value));\n\n  const intersectionChecked = computed(() => intersection(columnCheckboxKeys.value, [...enabledColKeys.value]));\n\n  watch([displayColumns], ([val]) => {\n    columnCheckboxKeys.value = val || props.defaultDisplayColumns || keys;\n  });\n\n  function getCheckboxOptions(columns: PrimaryTableCol[], arr: CheckboxOptionObj[] = []) {\n    // 减少循环次数\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const item = columns[i];\n      if (item.colKey) {\n        arr.push({\n          label: () => renderTitle(context.slots, item, i),\n          value: item.colKey,\n          disabled: !enabledColKeys.value.has(item.colKey),\n        });\n      }\n      if (item.children?.length) {\n        getCheckboxOptions(item.children, arr);\n      }\n    }\n    return arr;\n  }\n\n  const handleCheckChange = (val: CheckboxGroupValue, ctx: CheckboxGroupChangeContext) => {\n    columnCheckboxKeys.value = val;\n    const params = {\n      columns: val,\n      type: ctx.type,\n      currentColumn: getCurrentRowByKey(columns.value, String(ctx.current)),\n      e: ctx.e,\n    };\n    props.onColumnChange?.(params);\n  };\n\n  const handleClickAllShowColumns = (checked: boolean, ctx: { e: Event }) => {\n    if (checked) {\n      const newData = checkboxOptions.value?.map((t) => t.value) || [];\n      columnCheckboxKeys.value = newData;\n      props.onColumnChange?.({ type: 'check', columns: newData, e: ctx.e });\n    } else {\n      const disabledColKeys = checkboxOptions.value.filter((t) => t.disabled).map((t) => t.value);\n      columnCheckboxKeys.value = disabledColKeys;\n      props.onColumnChange?.({ type: 'uncheck', columns: disabledColKeys, e: ctx.e });\n    }\n  };\n\n  const handleToggleColumnController = () => {\n    dialogInstance.value = DialogPlugin.confirm({\n      header: globalConfig.value.columnConfigTitleText,\n      body: () => {\n        const widthMode = columnController.value?.displayType === 'fixed-width' ? 'fixed' : 'auto';\n        const checkedLength = intersectionChecked.value.length;\n        const isCheckedAll = checkedLength === enabledColKeys.value.size;\n        const isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.value.size;\n        const defaultNode = (\n          <div\n            class={[\n              `${classPrefix.value}-table__column-controller`,\n              `${classPrefix.value}-table__column-controller--${widthMode}`,\n            ]}\n          >\n            <div class={`${classPrefix.value}-table__column-controller-body`}>\n              {/* 请选择需要在表格中显示的数据列 */}\n              <p class={`${classPrefix.value}-table__column-controller-desc`}>\n                {globalConfig.value.columnConfigDescriptionText}\n              </p>\n              <div class={`${classPrefix.value}-table__column-controller-block`}>\n                <Checkbox indeterminate={isIndeterminate} checked={isCheckedAll} onChange={handleClickAllShowColumns}>\n                  {globalConfig.value.selectAllText}\n                </Checkbox>\n              </div>\n              <div class={`${classPrefix.value}-table__column-controller-block`}>\n                <CheckboxGroup\n                  options={checkboxOptions.value}\n                  {...(columnController.value?.checkboxProps || {})}\n                  value={columnCheckboxKeys.value}\n                  onChange={handleCheckChange}\n                />\n              </div>\n            </div>\n          </div>\n        );\n        return defaultNode;\n      },\n      confirmBtn: globalConfig.value.confirmText,\n      cancelBtn: globalConfig.value.cancelText,\n      width: 612,\n      onConfirm: () => {\n        setTDisplayColumns([...columnCheckboxKeys.value]);\n        // 此处逻辑不要随意改动，涉及到 内置列配置按钮 和 不包含列配置按钮等场景\n        if (columnControllerVisible.value === undefined) {\n          dialogInstance.value.hide();\n        } else {\n          props.onColumnControllerVisibleChange?.(false, { trigger: 'cancel' });\n          context.emit('update:columnControllerVisible', false);\n        }\n      },\n      onClose: () => {\n        // 此处逻辑不要随意改动，涉及到 内置列配置按钮 和 不包含列配置按钮等场景\n        if (columnControllerVisible.value === undefined) {\n          dialogInstance.value.hide();\n        } else {\n          props.onColumnControllerVisibleChange?.(false, { trigger: 'confirm' });\n          context.emit('update:columnControllerVisible', false);\n        }\n      },\n      ...(columnController.value?.dialogProps || {}),\n    });\n  };\n\n  // columnControllerVisible 一般应用于不包含列配置按钮的场景，有外部直接控制弹框的显示或隐藏\n  watch(\n    [columnControllerVisible],\n    ([visible]) => {\n      if (visible === undefined) return;\n      if (dialogInstance.value) {\n        visible ? dialogInstance.value.show() : dialogInstance.value.hide();\n      } else {\n        visible && handleToggleColumnController();\n      }\n    },\n    { immediate: true },\n  );\n\n  const renderColumnController = () => {\n    const isColumnController = !!(columnController.value && Object.keys(columnController.value).length);\n    const placement = isColumnController ? columnController.value.placement || 'top-right' : '';\n    if (isColumnController && columnController.value.hideTriggerButton) return null;\n    const classes = [\n      `${classPrefix.value}-table__column-controller-trigger`,\n      { [`${classPrefix.value}-align-${placement}`]: !!placement },\n    ];\n    return (\n      <div class={classes}>\n        <TButton\n          theme=\"default\"\n          variant=\"outline\"\n          onClick={handleToggleColumnController}\n          content={globalConfig.value.columnConfigButtonText}\n          v-slots={{\n            icon: () => <SettingIcon />,\n          }}\n          {...props.columnController?.buttonProps}\n        ></TButton>\n      </div>\n    );\n  };\n\n  return {\n    tDisplayColumns,\n    columnCheckboxKeys,\n    checkboxOptions,\n    renderColumnController,\n  };\n}\n"],"names":["getColumnKeys","columns","keys","Set","i","len","length","col","colKey","add","children","useColumnController","props","context","useConfig","classPrefix","globalConfig","useGlobalIcon","SettingIcon","TdSettingIcon","toRefs","columnController","displayColumns","columnControllerVisible","dialogInstance","ref","enabledColKeys","computed","arr","value","fields","filter","v","useDefaultValue","defaultDisplayColumns","onDisplayColumnsChange","tDisplayColumns","setTDisplayColumns","columnCheckboxKeys","checkboxOptions","getCheckboxOptions","intersectionChecked","intersection","watch","val","item","push","label","renderTitle","slots","disabled","has","handleCheckChange","ctx","params","type","currentColumn","getCurrentRowByKey","String","current","e","onColumnChange","handleClickAllShowColumns","checked","newData","map","t","disabledColKeys","handleToggleColumnController","DialogPlugin","confirm","header","columnConfigTitleText","body","widthMode","displayType","checkedLength","isCheckedAll","size","isIndeterminate","defaultNode","_createVNode","columnConfigDescriptionText","selectAllText","_mergeProps","checkboxProps","confirmBtn","confirmText","cancelBtn","cancelText","width","onConfirm","hide","onColumnControllerVisibleChange","trigger","emit","onClose","dialogProps","visible","show","immediate","renderColumnController","isColumnController","Object","placement","hideTriggerButton","classes","TButton","columnConfigButtonText","buttonProps","icon"],"mappings":"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"}