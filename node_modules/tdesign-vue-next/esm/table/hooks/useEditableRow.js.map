{"version":3,"file":"useEditableRow.js","sources":["../../../src/table/hooks/useEditableRow.ts"],"sourcesContent":["import { ref, computed } from 'vue';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport { PrimaryTableProps } from '../interface';\nimport { getEditableKeysMap } from '../utils';\nimport { AllValidateResult } from '../../form/type';\nimport { validate } from '../../form/form-model';\nimport { PrimaryTableRowEditContext, TableRowData, TableErrorListMap } from '../type';\n\nexport type ErrorListObjectType = PrimaryTableRowEditContext<TableRowData> & { errorList: AllValidateResult[] };\n\nexport interface TablePromiseErrorData {\n  errors: ErrorListObjectType[];\n  errorMap: TableErrorListMap;\n}\n\nconst cellRuleMap = new Map<any, PrimaryTableRowEditContext<TableRowData>[]>();\n\nexport default function useRowEdit(props: PrimaryTableProps) {\n  // 校验不通过的错误信息，其中 key 值为 [rowValue, col.colKey].join('__')\n  const errorListMap = ref<TableErrorListMap>({});\n  // 处于编辑态的表格行\n  const editableKeysMap = computed(() => getEditableKeysMap(props.editableRowKeys, props.data, props.rowKey || 'id'));\n\n  const getErrorListMapByErrors = (errors: ErrorListObjectType[]): TableErrorListMap => {\n    const errorMap: TableErrorListMap = {};\n    errors.forEach(({ row, col, errorList }) => {\n      const rowValue = get(row, props.rowKey || 'id');\n      const key = [rowValue, col.colKey].join('__');\n      if (errorList?.length) {\n        errorMap[key] = errorList;\n      } else {\n        delete errorMap[key];\n      }\n    });\n    return errorMap;\n  };\n\n  // 校验一行的数据\n  const validateOneRowData = (rowValue: any) => {\n    const rowRules = cellRuleMap.get(rowValue);\n    if (!rowRules) return;\n    const list = rowRules.map(\n      (item) =>\n        new Promise<ErrorListObjectType>((resolve) => {\n          const { editedRow, col } = item;\n          const rules = isFunction(col.edit.rules) ? col.edit.rules(item) : col.edit.rules;\n          if (!col.edit || !rules || !rules.length) {\n            resolve({ ...item, errorList: [] });\n            return;\n          }\n          validate(editedRow[col.colKey], rules).then((r) => {\n            resolve({ ...item, errorList: r.filter((t) => !t.result) });\n          });\n        }),\n    );\n    return new Promise<TablePromiseErrorData>((resolve, reject) => {\n      Promise.all(list).then((errors) => {\n        resolve({\n          errors: errors.filter((t) => t.errorList?.length),\n          errorMap: getErrorListMapByErrors(errors),\n        });\n      }, reject);\n    });\n  };\n\n  /**\n   * 校验表格单行数据（对外开放方法，修改时需慎重）\n   * @param rowValue 行唯一标识\n   */\n  const validateRowData = (rowValue: any) =>\n    new Promise((resolve, reject) => {\n      validateOneRowData(rowValue).then(({ errors, errorMap }) => {\n        errorListMap.value = errorMap;\n        // 缺少校验文本显示\n        const tTrigger = 'parent';\n        props.onRowValidate?.({ trigger: tTrigger, result: errors });\n        resolve({ trigger: tTrigger, result: errors });\n      }, reject);\n    });\n\n  /**\n   * 校验整个表格数据（对外开放方法，修改时需慎重）\n   */\n  const validateTableData = () => {\n    const promiseList: Promise<TablePromiseErrorData>[] = [];\n    const data = props.data || [];\n    for (let i = 0, len = data.length; i < len; i++) {\n      const rowValue = get(data[i], props.rowKey || 'id');\n      promiseList.push(validateOneRowData(rowValue));\n    }\n    return new Promise((resolve, reject) => {\n      Promise.all(promiseList).then((rList) => {\n        const allErrorListMap: TableErrorListMap = {};\n        rList.forEach(({ errorMap } = { errors: [], errorMap: {} }) => {\n          errorMap && Object.assign(allErrorListMap, errorMap);\n        });\n        errorListMap.value = allErrorListMap;\n        props.onValidate?.({ result: allErrorListMap });\n        resolve({ result: allErrorListMap });\n      }, reject);\n    });\n  };\n\n  const onRuleChange = (context: PrimaryTableRowEditContext<TableRowData>) => {\n    // 编辑行，预存校验信息，方便最终校验\n    if (props.editableRowKeys) {\n      const rowValue = get(context.row, props.rowKey || 'id');\n      const rules = cellRuleMap.get(rowValue);\n      if (rules) {\n        const index = rules.findIndex((t) => t.col.colKey === context.col.colKey);\n        if (index === -1) {\n          rules.push(context);\n        } else {\n          rules[index] = context;\n        }\n        cellRuleMap.set(rowValue, rules);\n      } else {\n        cellRuleMap.set(rowValue, [context]);\n      }\n    }\n  };\n\n  const clearValidateData = () => {\n    errorListMap.value = {};\n  };\n\n  return {\n    errorListMap,\n    editableKeysMap,\n    validateTableData,\n    validateRowData,\n    onRuleChange,\n    clearValidateData,\n  };\n}\n"],"names":["cellRuleMap","Map","useRowEdit","props","errorListMap","ref","editableKeysMap","computed","getEditableKeysMap","editableRowKeys","data","rowKey","getErrorListMapByErrors","errors","errorMap","forEach","row","col","errorList","rowValue","get","key","colKey","join","length","validateOneRowData","rowRules","list","map","item","Promise","resolve","editedRow","rules","isFunction","edit","validate","then","r","filter","t","result","reject","all","validateRowData","value","tTrigger","onRowValidate","trigger","validateTableData","promiseList","i","len","push","rList","allErrorListMap","Object","assign","onValidate","onRuleChange","context","index","findIndex","set","clearValidateData"],"mappings":"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"}