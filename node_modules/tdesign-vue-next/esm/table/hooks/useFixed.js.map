{"version":3,"file":"useFixed.js","sources":["../../../src/table/hooks/useFixed.ts"],"sourcesContent":["import {\n  ref,\n  reactive,\n  watch,\n  toRefs,\n  SetupContext,\n  onMounted,\n  computed,\n  onBeforeMount,\n  ComputedRef,\n  onUnmounted,\n  onBeforeUnmount,\n  Ref,\n} from 'vue';\nimport get from 'lodash/get';\nimport debounce from 'lodash/debounce';\nimport log from '../../_common/js/log';\nimport { ClassName, Styles } from '../../common';\nimport { BaseTableCol, TableRowData, TdBaseTableProps } from '../type';\nimport getScrollbarWidth from '../../_common/js/utils/getScrollbarWidth';\nimport { on, off } from '../../utils/dom';\nimport {\n  FixedColumnInfo,\n  TableRowFixedClasses,\n  RowAndColFixedPosition,\n  TableColFixedClasses,\n  RecalculateColumnWidthFunc,\n} from '../interface';\nimport { getIEVersion } from '../../_common/js/utils/helper';\n\n// 固定列相关类名处理\nexport function getColumnFixedStyles(\n  col: TdBaseTableProps['columns'][0],\n  index: number,\n  rowAndColFixedPosition: RowAndColFixedPosition,\n  tableColFixedClasses: TableColFixedClasses,\n): { style?: Styles; classes?: ClassName } {\n  const fixedPos = rowAndColFixedPosition?.get(col.colKey || index);\n  if (!fixedPos) return {};\n  const thClasses = {\n    [tableColFixedClasses.left]: col.fixed === 'left',\n    [tableColFixedClasses.right]: col.fixed === 'right',\n    [tableColFixedClasses.lastLeft]: col.fixed === 'left' && fixedPos.lastLeftFixedCol,\n    [tableColFixedClasses.firstRight]: col.fixed === 'right' && fixedPos.firstRightFixedCol,\n  };\n  const thStyles = {\n    left: col.fixed === 'left' ? `${fixedPos.left}px` : undefined,\n    right: col.fixed === 'right' ? `${fixedPos.right}px` : undefined,\n  };\n  return {\n    style: thStyles,\n    classes: thClasses,\n  };\n}\n\n// 固定行相关类名处理\nexport function getRowFixedStyles(\n  rowId: string | number,\n  rowIndex: number,\n  rowLength: number,\n  fixedRows: TdBaseTableProps['fixedRows'],\n  rowAndColFixedPosition: RowAndColFixedPosition,\n  tableRowFixedClasses: TableRowFixedClasses,\n): { style: Styles; classes: ClassName } {\n  if (!fixedRows || !fixedRows.length) return { style: undefined, classes: undefined };\n  const fixedTop = rowIndex < fixedRows[0];\n  const fixedBottom = rowIndex > rowLength - 1 - fixedRows[1];\n  const firstFixedBottomRow = rowLength - fixedRows[1];\n  const fixedPos = rowAndColFixedPosition?.get(rowId) || {};\n  const rowClasses = {\n    [tableRowFixedClasses.top]: fixedTop,\n    [tableRowFixedClasses.bottom]: fixedBottom,\n    [tableRowFixedClasses.firstBottom]: rowIndex === firstFixedBottomRow,\n    [tableRowFixedClasses.withoutBorderBottom]: rowIndex === firstFixedBottomRow - 1,\n  };\n  const rowStyles = {\n    top: fixedTop ? `${fixedPos.top}px` : undefined,\n    bottom: fixedBottom ? `${fixedPos.bottom}px` : undefined,\n  };\n  return {\n    style: rowStyles,\n    classes: rowClasses,\n  };\n}\n\nexport default function useFixed(\n  props: TdBaseTableProps,\n  context: SetupContext,\n  finalColumns: ComputedRef<BaseTableCol<TableRowData>[]>,\n  affixRef: Record<string, Ref>,\n) {\n  const {\n    columns,\n    tableLayout,\n    tableContentWidth,\n    fixedRows,\n    firstFullRow,\n    lastFullRow,\n    maxHeight,\n    headerAffixedTop,\n    footerAffixedBottom,\n    bordered,\n    resizable,\n    allowResizeColumnWidth,\n  } = toRefs(props);\n  const data = ref<TableRowData[]>([]);\n  const tableRef = ref<HTMLDivElement>();\n  const tableContentRef = ref<HTMLDivElement>();\n  const isFixedHeader = ref(false);\n  const isWidthOverflow = ref(false);\n  const tableElmRef = ref<HTMLTableElement>();\n  // CSS 样式设置了固定 6px\n  const scrollbarWidth = ref(6);\n  // 固定列、固定表头、固定表尾等内容的位置信息\n  const rowAndColFixedPosition = ref<RowAndColFixedPosition>(new Map());\n  const showColumnShadow = reactive({\n    left: false,\n    right: false,\n  });\n  // 虚拟滚动不能使用 CSS sticky 固定表头\n  const virtualScrollHeaderPos = ref<{ left: number; top: number }>({ left: 0, top: 0 });\n  const tableWidth = ref(0);\n  const tableElmWidth = ref(0);\n  const thWidthList = ref<{ [colKey: string]: number }>({});\n\n  const isFixedColumn = ref(false);\n  const isFixedRightColumn = ref(false);\n  const isFixedLeftColumn = ref(false);\n\n  const columnResizable = computed(() => resizable.value || allowResizeColumnWidth.value || false);\n\n  // 没有表头吸顶，没有虚拟滚动，则不需要表头宽度计算\n  const notNeedThWidthList = computed(\n    () =>\n      !(\n        props.headerAffixedTop ||\n        props.footerAffixedBottom ||\n        props.horizontalScrollAffixedBottom ||\n        props.scroll?.type === 'virtual'\n      ),\n  );\n\n  const recalculateColWidth = ref<RecalculateColumnWidthFunc>(() => {});\n\n  function setUseFixedTableElmRef(val: HTMLTableElement) {\n    tableElmRef.value = val;\n  }\n\n  function setRecalculateColWidthFuncRef(val: RecalculateColumnWidthFunc) {\n    recalculateColWidth.value = val;\n  }\n\n  function getColumnMap(\n    columns: BaseTableCol[],\n    map: RowAndColFixedPosition = new Map(),\n    levelNodes: FixedColumnInfo[][] = [],\n    level = 0,\n    parent?: FixedColumnInfo,\n  ) {\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const col = columns[i];\n      if (['left', 'right'].includes(col.fixed)) {\n        isFixedColumn.value = true;\n      }\n      if (col.fixed === 'right') {\n        isFixedRightColumn.value = true;\n      }\n      if (col.fixed === 'left') {\n        isFixedLeftColumn.value = true;\n      }\n      const key = col.colKey || i;\n      const columnInfo: FixedColumnInfo = { col, parent, index: i };\n      map.set(key, columnInfo);\n      if (col.children?.length) {\n        getColumnMap(col.children, map, levelNodes, level + 1, columnInfo);\n      }\n      if (levelNodes[level]) {\n        levelNodes[level].push(columnInfo);\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        levelNodes[level] = [columnInfo];\n      }\n    }\n    return {\n      newColumnsMap: map,\n      levelNodes,\n    };\n  }\n\n  const setFixedLeftPos = (\n    columns: BaseTableCol[],\n    initialColumnMap: RowAndColFixedPosition,\n    parent: FixedColumnInfo = {},\n  ) => {\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const col = columns[i];\n      if (col.fixed === 'right') return;\n      const colInfo = initialColumnMap.get(col.colKey || i);\n      let lastColIndex = i - 1;\n      while (lastColIndex >= 0 && columns[lastColIndex].fixed !== 'left') {\n        lastColIndex -= 1;\n      }\n      const lastCol = columns[lastColIndex];\n      // 多级表头，使用父元素作为初始基本位置\n      const defaultWidth = i === 0 ? parent?.left || 0 : 0;\n      const lastColInfo = initialColumnMap.get(lastCol?.colKey || i - 1);\n      colInfo.left = (lastColInfo?.left || defaultWidth) + (lastColInfo?.width || 0);\n      // 多级表头\n      if (col.children?.length) {\n        setFixedLeftPos(col.children, initialColumnMap, colInfo);\n      }\n    }\n  };\n\n  const setFixedRightPos = (\n    columns: BaseTableCol[],\n    initialColumnMap: RowAndColFixedPosition,\n    parent: FixedColumnInfo = {},\n  ) => {\n    for (let i = columns.length - 1; i >= 0; i--) {\n      const col = columns[i];\n      if (col.fixed === 'left') return;\n      const colInfo = initialColumnMap.get(col.colKey || i);\n      let lastColIndex = i + 1;\n      while (lastColIndex < columns.length && columns[lastColIndex].fixed !== 'right') {\n        lastColIndex += 1;\n      }\n      const lastCol = columns[lastColIndex];\n      // 多级表头，使用父元素作为初始基本位置\n      const defaultWidth = i === columns.length - 1 ? parent?.right || 0 : 0;\n      const lastColInfo = initialColumnMap.get(lastCol?.colKey || i + 1);\n      colInfo.right = (lastColInfo?.right || defaultWidth) + (lastColInfo?.width || 0);\n      // 多级表头\n      if (col.children?.length) {\n        setFixedRightPos(col.children, initialColumnMap, colInfo);\n      }\n    }\n  };\n\n  // 获取固定列位置信息。先获取节点宽度，再计算\n  const setFixedColPosition = (trList: HTMLCollection, initialColumnMap: RowAndColFixedPosition) => {\n    if (!trList) return;\n    for (let i = 0, len = trList.length; i < len; i++) {\n      const thList = trList[i].children;\n      for (let j = 0, thLen = thList.length; j < thLen; j++) {\n        const th = thList[j] as HTMLElement;\n        const colKey = th.dataset.colkey;\n        if (!colKey) {\n          log.warn('TDesign Table', `${th.innerText} missing colKey. colKey is required for fixed column feature.`);\n        }\n        const obj = initialColumnMap.get(colKey || j);\n        if (obj?.col?.fixed) {\n          initialColumnMap.set(colKey, { ...obj, width: th.getBoundingClientRect().width });\n        }\n      }\n    }\n    setFixedLeftPos(columns.value, initialColumnMap);\n    setFixedRightPos(columns.value, initialColumnMap);\n  };\n\n  // 设置固定行位置信息 top/bottom\n  const setFixedRowPosition = (\n    trList: HTMLCollection,\n    initialColumnMap: RowAndColFixedPosition,\n    thead: HTMLTableSectionElement,\n    tfoot: HTMLTableSectionElement,\n  ) => {\n    const [fixedTopRows, fixedBottomRows] = fixedRows.value || [];\n    const { data, rowKey = 'id' } = props;\n    for (let i = 0; i < fixedTopRows; i++) {\n      const tr = trList[i] as HTMLElement;\n      const rowId = get(data[i], rowKey);\n      const thisRowInfo = initialColumnMap.get(rowId) || {};\n      const lastRowId = get(data[i - 1], rowKey);\n      const lastRowInfo = initialColumnMap.get(lastRowId) || {};\n      let defaultBottom = 0;\n      if (i === 0) {\n        defaultBottom = thead?.getBoundingClientRect().height || 0;\n      }\n      thisRowInfo.top = (lastRowInfo.top || defaultBottom) + (lastRowInfo.height || 0);\n      initialColumnMap.set(rowId, { ...thisRowInfo, height: tr.getBoundingClientRect().height });\n    }\n    for (let i = data.length - 1; i >= data.length - fixedBottomRows; i--) {\n      const tr = trList[i] as HTMLElement;\n      const rowId = get(data[i], rowKey);\n      const thisRowInfo = initialColumnMap.get(rowId) || {};\n      const lastRowId = get(data[i + 1], rowKey);\n      const lastRowInfo = initialColumnMap.get(lastRowId) || {};\n      let defaultBottom = 0;\n      if (i === data.length - 1) {\n        defaultBottom = tfoot?.getBoundingClientRect().height || 0;\n      }\n      thisRowInfo.bottom = (lastRowInfo.bottom || defaultBottom) + (lastRowInfo.height || 0);\n      initialColumnMap.set(rowId, { ...thisRowInfo, height: tr.getBoundingClientRect().height });\n    }\n  };\n\n  const updateRowAndColFixedPosition = (tableContentElm: HTMLElement, initialColumnMap: RowAndColFixedPosition) => {\n    rowAndColFixedPosition.value.clear();\n    if (!tableContentElm) return;\n    const thead = tableContentElm.querySelector('thead');\n    // 处理固定列\n    thead && setFixedColPosition(thead.children, initialColumnMap);\n    // 处理冻结行\n    const tbody = tableContentElm.querySelector('tbody');\n    const tfoot = tableContentElm.querySelector('tfoot');\n    tbody && setFixedRowPosition(tbody.children, initialColumnMap, thead, tfoot);\n    // 更新最终 Map\n    rowAndColFixedPosition.value = initialColumnMap;\n  };\n\n  let shadowLastScrollLeft: number;\n  const updateColumnFixedShadow = (target: HTMLElement, extra?: { skipScrollLimit?: boolean }) => {\n    if (!isFixedColumn.value || !target) return;\n    const { scrollLeft } = target;\n    // 只有左右滚动，需要更新固定列阴影\n    if (shadowLastScrollLeft === scrollLeft && (!extra || !extra.skipScrollLimit)) return;\n    shadowLastScrollLeft = scrollLeft;\n    const isShowRight = target.clientWidth + scrollLeft < target.scrollWidth;\n    showColumnShadow.left = scrollLeft > 0;\n    showColumnShadow.right = isShowRight;\n  };\n\n  // 多级表头场景较为复杂：为了滚动的阴影效果，需要知道哪些列是边界列，左侧固定列的最后一列，右侧固定列的第一列，每一层表头都需要兼顾\n  const setIsLastOrFirstFixedCol = (levelNodes: FixedColumnInfo[][]) => {\n    for (let t = 0; t < levelNodes.length; t++) {\n      const nodes = levelNodes[t];\n      for (let i = 0, len = nodes.length; i < len; i++) {\n        const colMapInfo = nodes[i];\n        const nextColMapInfo = nodes[i + 1];\n        const { parent } = colMapInfo;\n        const isParentLastLeftFixedCol = !parent || parent?.lastLeftFixedCol;\n        if (isParentLastLeftFixedCol && colMapInfo.col.fixed === 'left' && nextColMapInfo?.col.fixed !== 'left') {\n          colMapInfo.lastLeftFixedCol = true;\n        }\n        const lastColMapInfo = nodes[i - 1];\n        const isParentFirstRightFixedCol = !parent || parent?.firstRightFixedCol;\n        if (isParentFirstRightFixedCol && colMapInfo.col.fixed === 'right' && lastColMapInfo?.col.fixed !== 'right') {\n          colMapInfo.firstRightFixedCol = true;\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const updateFixedStatus = () => {\n    const { newColumnsMap, levelNodes } = getColumnMap(columns.value);\n    setIsLastOrFirstFixedCol(levelNodes);\n    const timer = setTimeout(() => {\n      if (isFixedColumn.value || fixedRows.value?.length) {\n        updateRowAndColFixedPosition(tableContentRef.value, newColumnsMap);\n      }\n      clearTimeout(timer);\n    }, 0);\n    return () => {\n      clearTimeout(timer);\n    };\n  };\n\n  const updateFixedHeader = () => {\n    const timer = setTimeout(() => {\n      if (!tableContentRef.value) return;\n      isFixedHeader.value = tableContentRef.value.scrollHeight > tableContentRef.value.clientHeight;\n      isWidthOverflow.value = tableContentRef.value.scrollWidth > tableContentRef.value.clientWidth;\n      const pos = tableContentRef.value.getBoundingClientRect();\n      virtualScrollHeaderPos.value = {\n        top: pos.top,\n        left: pos.left,\n      };\n      clearTimeout(timer);\n    }, 0);\n  };\n\n  const updateTableWidth = () => {\n    const rect = tableContentRef.value?.getBoundingClientRect();\n    if (!rect) return;\n    // 存在纵向滚动条，且固定表头时，需去除滚动条宽度\n    const reduceWidth = isFixedHeader.value ? scrollbarWidth.value : 0;\n    tableWidth.value = rect.width - reduceWidth - (props.bordered ? 1 : 0);\n    const elmRect = tableElmRef?.value?.getBoundingClientRect();\n    tableElmWidth.value = elmRect?.width;\n  };\n\n  const updateAffixPosition = () => {\n    // 在表格高度变化的时候 需要手动调整affix的位置 因为affix本身无法监听到这些变化触发重新计算\n    affixRef.paginationAffixRef.value?.handleScroll?.();\n    affixRef.horizontalScrollAffixRef.value?.handleScroll?.();\n    affixRef.headerTopAffixRef?.value?.handleScroll?.();\n  };\n\n  const updateThWidthList = (trList: HTMLCollection | { [colKey: string]: number }) => {\n    if (trList instanceof HTMLCollection) {\n      if (columnResizable.value) return;\n      const widthMap: { [colKey: string]: number } = {};\n      for (let i = 0, len = trList.length; i < len; i++) {\n        const thList = trList[i].children;\n        for (let j = 0, thLen = thList.length; j < thLen; j++) {\n          const th = thList[j] as HTMLElement;\n          const colKey = th.dataset.colkey;\n          widthMap[colKey] = th.getBoundingClientRect().width;\n        }\n      }\n      thWidthList.value = widthMap;\n    } else {\n      if (!thWidthList.value) {\n        thWidthList.value = {};\n      }\n      Object.entries(trList).forEach(([colKey, width]) => {\n        thWidthList.value[colKey] = width;\n      });\n    }\n  };\n\n  const updateThWidthListHandler = () => {\n    if (columnResizable.value) {\n      recalculateColWidth.value(finalColumns.value, thWidthList.value, tableLayout.value, tableElmWidth.value);\n    }\n    if (notNeedThWidthList.value) return;\n    const timer = setTimeout(() => {\n      updateTableWidth();\n      const thead = tableContentRef.value?.querySelector('thead');\n      if (!thead) return;\n      updateThWidthList(thead.children);\n      clearTimeout(timer);\n    }, 0);\n  };\n\n  const resetThWidthList = () => {\n    thWidthList.value = {};\n  };\n\n  const emitScrollEvent = (e: WheelEvent) => {\n    props.onScrollX?.({ e });\n    props.onScrollY?.({ e });\n    props.onScroll?.({ e });\n  };\n\n  const getThWidthList = () => {\n    if (!thWidthList.value) {\n      thWidthList.value = {};\n    }\n    return thWidthList.value;\n  };\n\n  watch(\n    [\n      data,\n      columns,\n      bordered,\n      tableLayout,\n      tableContentWidth,\n      isFixedHeader,\n      isWidthOverflow,\n      isFixedColumn,\n      fixedRows,\n      firstFullRow,\n      lastFullRow,\n    ],\n    updateFixedStatus,\n    { immediate: true },\n  );\n\n  watch(\n    [isFixedColumn, columns],\n    () => {\n      const timer = setTimeout(() => {\n        if (isFixedColumn.value) {\n          updateColumnFixedShadow(tableContentRef.value);\n        }\n        clearTimeout(timer);\n      }, 0);\n    },\n    { immediate: true },\n  );\n\n  watch([maxHeight, data, columns, bordered], updateFixedHeader, { immediate: true });\n\n  watch(finalColumns, () => {\n    resetThWidthList();\n    if (columnResizable.value) {\n      recalculateColWidth.value(finalColumns.value, thWidthList.value, tableLayout.value, tableElmWidth.value);\n    }\n  });\n\n  // 影响表头宽度的元素\n  watch(\n    [\n      data,\n      columns,\n      bordered,\n      tableLayout,\n      fixedRows,\n      isFixedHeader,\n      headerAffixedTop,\n      footerAffixedBottom,\n      tableContentWidth,\n    ],\n    () => {\n      updateThWidthListHandler();\n      updateAffixPosition();\n    },\n    { immediate: true },\n  );\n\n  const refreshTable = debounce(() => {\n    updateTableWidth();\n    updateFixedHeader();\n    updateThWidthListHandler();\n    updateAffixPosition();\n\n    if (isFixedColumn.value || isFixedHeader.value) {\n      updateFixedStatus();\n      updateColumnFixedShadow(tableContentRef.value, { skipScrollLimit: true });\n    }\n  }, 30);\n\n  const onResize = refreshTable;\n\n  let resizeObserver: ResizeObserver = null;\n  function addTableResizeObserver(tableElement: HTMLDivElement) {\n    // IE 11 以下使用 window resize；IE 11 以上使用 ResizeObserver\n    if (getIEVersion() < 11 || typeof window.ResizeObserver === 'undefined') return;\n    off(window, 'resize', onResize);\n    resizeObserver = new window.ResizeObserver(() => {\n      refreshTable();\n    });\n    resizeObserver.observe(tableElement);\n    tableRef.value = tableElement;\n  }\n\n  onMounted(() => {\n    const scrollWidth = getScrollbarWidth();\n    scrollbarWidth.value = scrollWidth;\n    const timer = setTimeout(() => {\n      updateTableWidth();\n      if (columnResizable.value) {\n        recalculateColWidth.value(finalColumns.value, thWidthList.value, tableLayout.value, tableElmWidth.value);\n      }\n      clearTimeout(timer);\n    });\n    const isWatchResize = isFixedColumn.value || isFixedHeader.value || !notNeedThWidthList.value || !data.value.length;\n    // IE 11 以下使用 window resize；IE 11 以上使用 ResizeObserver\n    if ((isWatchResize && getIEVersion() < 11) || typeof window.ResizeObserver === 'undefined') {\n      on(window, 'resize', onResize);\n    }\n  });\n\n  onBeforeUnmount(() => {\n    off(window, 'resize', onResize);\n    resizeObserver?.unobserve(tableRef.value);\n    resizeObserver?.disconnect();\n  });\n\n  const setData = (dataSource: TableRowData[]) => {\n    data.value = dataSource;\n  };\n\n  return {\n    tableWidth,\n    tableElmWidth,\n    thWidthList,\n    isFixedHeader,\n    isWidthOverflow,\n    tableContentRef,\n    isFixedColumn,\n    showColumnShadow,\n    rowAndColFixedPosition,\n    virtualScrollHeaderPos,\n    scrollbarWidth,\n    setData,\n    refreshTable,\n    emitScrollEvent,\n    updateThWidthListHandler,\n    updateColumnFixedShadow,\n    setUseFixedTableElmRef,\n    getThWidthList,\n    updateThWidthList,\n    setRecalculateColWidthFuncRef,\n    addTableResizeObserver,\n  };\n}\n"],"names":["getColumnFixedStyles","col","index","rowAndColFixedPosition","tableColFixedClasses","fixedPos","get","colKey","thClasses","left","fixed","right","lastLeft","lastLeftFixedCol","firstRight","firstRightFixedCol","thStyles","style","classes","getRowFixedStyles","rowId","rowIndex","rowLength","fixedRows","tableRowFixedClasses","length","fixedTop","fixedBottom","firstFixedBottomRow","rowClasses","top","bottom","firstBottom","withoutBorderBottom","rowStyles","useFixed","props","context","finalColumns","affixRef","toRefs","columns","tableLayout","tableContentWidth","firstFullRow","lastFullRow","maxHeight","headerAffixedTop","footerAffixedBottom","bordered","resizable","allowResizeColumnWidth","data","ref","tableRef","tableContentRef","isFixedHeader","isWidthOverflow","tableElmRef","scrollbarWidth","Map","showColumnShadow","reactive","virtualScrollHeaderPos","tableWidth","tableElmWidth","thWidthList","isFixedColumn","isFixedRightColumn","isFixedLeftColumn","columnResizable","computed","value","notNeedThWidthList","horizontalScrollAffixedBottom","scroll","type","recalculateColWidth","setUseFixedTableElmRef","val","setRecalculateColWidthFuncRef","getColumnMap","map","levelNodes","level","parent","i","len","includes","key","columnInfo","set","children","push","newColumnsMap","setFixedLeftPos","initialColumnMap","colInfo","lastColIndex","lastCol","defaultWidth","lastColInfo","width","setFixedRightPos","setFixedColPosition","trList","thList","j","thLen","th","dataset","colkey","log","warn","innerText","obj","getBoundingClientRect","setFixedRowPosition","thead","tfoot","fixedTopRows","fixedBottomRows","rowKey","tr","thisRowInfo","lastRowId","lastRowInfo","defaultBottom","height","updateRowAndColFixedPosition","tableContentElm","clear","querySelector","tbody","shadowLastScrollLeft","updateColumnFixedShadow","target","extra","scrollLeft","skipScrollLimit","isShowRight","clientWidth","scrollWidth","setIsLastOrFirstFixedCol","t","nodes","colMapInfo","nextColMapInfo","isParentLastLeftFixedCol","lastColMapInfo","isParentFirstRightFixedCol","updateFixedStatus","timer","setTimeout","clearTimeout","updateFixedHeader","scrollHeight","clientHeight","pos","updateTableWidth","rect","reduceWidth","elmRect","updateAffixPosition","paginationAffixRef","handleScroll","horizontalScrollAffixRef","headerTopAffixRef","updateThWidthList","HTMLCollection","widthMap","Object","entries","forEach","updateThWidthListHandler","resetThWidthList","emitScrollEvent","e","onScrollX","onScrollY","onScroll","getThWidthList","watch","immediate","refreshTable","debounce","onResize","resizeObserver","addTableResizeObserver","tableElement","getIEVersion","window","ResizeObserver","off","observe","onMounted","getScrollbarWidth","isWatchResize","on","onBeforeUnmount","unobserve","disconnect","setData","dataSource"],"mappings":"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"}