{"version":3,"file":"useRowExpand.js","sources":["../../../src/table/hooks/useRowExpand.tsx"],"sourcesContent":["import { computed, SetupContext, toRefs, h } from 'vue';\nimport { ChevronRightCircleIcon as TdChevronRightCircleIcon } from 'tdesign-icons-vue-next';\nimport get from 'lodash/get';\n\nimport {\n  TdPrimaryTableProps,\n  PrimaryTableCol,\n  TableRowData,\n  PrimaryTableCellParams,\n  TableExpandedRowParams,\n  RowEventContext,\n} from '../type';\nimport useClassName from './useClassName';\nimport { useTNodeJSX } from '../../hooks/tnode';\nimport useDefaultValue from '../../hooks/useDefaultValue';\nimport { useConfig } from '../../hooks/useConfig';\nimport { useGlobalIcon } from '../../hooks/useGlobalIcon';\n\nexport default function useRowExpand(props: TdPrimaryTableProps, context: SetupContext) {\n  const { expandedRowKeys } = toRefs(props);\n  const renderTNode = useTNodeJSX();\n  const { t, globalConfig } = useConfig('table');\n  const { ChevronRightCircleIcon } = useGlobalIcon({ ChevronRightCircleIcon: TdChevronRightCircleIcon });\n  const { tableExpandClasses, positiveRotate90, tableFullRowClasses } = useClassName();\n  // controlled and uncontrolled\n  const [tExpandedRowKeys, setTExpandedRowKeys] = useDefaultValue(\n    expandedRowKeys,\n    props.defaultExpandedRowKeys || [],\n    props.onExpandChange,\n    'expandedRowKeys',\n  );\n\n  const showExpandedRow = computed(() =>\n    Boolean(props.expandedRow || context.slots.expandedRow || context.slots['expanded-row']),\n  );\n\n  const showExpandIconColumn = computed(() => props.expandIcon !== false && showExpandedRow.value);\n\n  const isFirstColumnFixed = computed(() => props.columns?.[0]?.fixed === 'left');\n\n  const onToggleExpand = (e: MouseEvent, row: TableRowData) => {\n    props.expandOnRowClick && e.stopPropagation();\n    const currentId = get(row, props.rowKey || 'id');\n    const index = tExpandedRowKeys.value.indexOf(currentId);\n    const newKeys = [...tExpandedRowKeys.value];\n    index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);\n    setTExpandedRowKeys(newKeys, {\n      expandedRowData: props.data.filter((t) => newKeys.includes(get(t, props.rowKey || 'id'))),\n      currentRowData: row,\n    });\n  };\n\n  const renderExpandIcon = (_: typeof h, p: PrimaryTableCellParams<TableRowData>) => {\n    const { row, rowIndex } = p;\n    const currentId = get(row, props.rowKey || 'id');\n    const expanded = tExpandedRowKeys.value.includes(currentId);\n    const icon = renderTNode('expandIcon', {\n      defaultNode: t(globalConfig.value.expandIcon) || <ChevronRightCircleIcon />,\n      params: { row, index: rowIndex },\n    });\n    if (!icon) return null;\n    const classes = [\n      tableExpandClasses.iconBox,\n      tableExpandClasses[expanded ? 'expanded' : 'collapsed'],\n      { [positiveRotate90]: expanded },\n    ];\n    return (\n      <span class={classes} onClick={(e: MouseEvent) => onToggleExpand(e, row)}>\n        {icon}\n      </span>\n    );\n  };\n\n  const getExpandColumn = () => {\n    const expandCol: PrimaryTableCol<TableRowData> = {\n      colKey: '__EXPAND_ROW_ICON_COLUMN__',\n      width: 46,\n      className: tableExpandClasses.iconCell,\n      fixed: isFirstColumnFixed.value ? 'left' : undefined,\n      cell: renderExpandIcon,\n    };\n    return expandCol;\n  };\n\n  const renderExpandedRow = (\n    p: TableExpandedRowParams<TableRowData> & { tableWidth: number; isWidthOverflow: boolean },\n  ) => {\n    const rowId = get(p.row, props.rowKey || 'id');\n    if (!tExpandedRowKeys.value || !tExpandedRowKeys.value.includes(rowId)) return null;\n    const isFixedLeft = p.isWidthOverflow && props.columns.find((item) => item.fixed === 'left');\n    return (\n      <tr key={`expand_${rowId}`} class={[tableExpandClasses.row, { [tableFullRowClasses.base]: isFixedLeft }]}>\n        <td colspan={p.columns.length}>\n          <div\n            class={[tableExpandClasses.rowInner, { [tableFullRowClasses.innerFullRow]: isFixedLeft }]}\n            style={isFixedLeft ? { width: `${p.tableWidth}px` } : {}}\n          >\n            <div class={tableFullRowClasses.innerFullElement}>{renderTNode('expandedRow', { params: p })}</div>\n          </div>\n        </td>\n      </tr>\n    );\n  };\n\n  const onInnerExpandRowClick = (p: RowEventContext<TableRowData>) => {\n    onToggleExpand(p.e, p.row);\n  };\n\n  return {\n    showExpandedRow,\n    showExpandIconColumn,\n    getExpandColumn,\n    renderExpandedRow,\n    onInnerExpandRowClick,\n  };\n}\n"],"names":["useRowExpand","props","context","toRefs","expandedRowKeys","renderTNode","useTNodeJSX","useConfig","t","globalConfig","useGlobalIcon","ChevronRightCircleIcon","TdChevronRightCircleIcon","useClassName","tableExpandClasses","positiveRotate90","tableFullRowClasses","useDefaultValue","defaultExpandedRowKeys","onExpandChange","tExpandedRowKeys","setTExpandedRowKeys","showExpandedRow","computed","Boolean","expandedRow","slots","showExpandIconColumn","expandIcon","value","isFirstColumnFixed","columns","fixed","onToggleExpand","e","row","expandOnRowClick","stopPropagation","currentId","get","rowKey","index","indexOf","newKeys","splice","push","expandedRowData","data","filter","includes","currentRowData","renderExpandIcon","_","p","rowIndex","expanded","icon","defaultNode","_createVNode","params","classes","iconBox","getExpandColumn","expandCol","colKey","width","className","iconCell","cell","renderExpandedRow","rowId","isFixedLeft","isWidthOverflow","find","item","base","length","rowInner","innerFullRow","tableWidth","innerFullElement","onInnerExpandRowClick"],"mappings":"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"}