{"version":3,"file":"useMultiHeader.js","sources":["../../../src/table/hooks/useMultiHeader.ts"],"sourcesContent":["/**\n * 多级表头相关逻辑\n ** */\n\nimport { RowspanColspan } from '../type';\nimport { BaseTableColumns, ThRowspanAndColspan } from '../interface';\n\n// 获取节点深度，即表头总层级\nexport function getNodeDepth(columns: BaseTableColumns, depthMap: Map<any, number>, depth = 1): number {\n  let maxDepth = depth;\n  // 树形结构递归已有较多函数上下文，此处不使用 forEach 迭代\n  for (let i = 0, len = columns.length; i < len; i++) {\n    const col = columns[i];\n    depthMap.set(col, depth);\n    if (col?.children?.length) {\n      const deep = getNodeDepth(col.children, depthMap, depth + 1);\n      if (deep > maxDepth) {\n        maxDepth = deep;\n      }\n    }\n  }\n  return maxDepth;\n}\n\n// 或当前节点的叶子结点宽度\nexport function getChildrenNodeWidth(node: BaseTableColumns[0], count = 0) {\n  let countNew = count;\n  const childrenList = node?.children || [];\n  for (let i = 0, len = childrenList.length; i < len; i++) {\n    const item = childrenList[i];\n    if (item.children) {\n      countNew = getChildrenNodeWidth(item, countNew);\n    } else {\n      countNew += 1;\n    }\n  }\n  return countNew;\n}\n\n// 获取多级表头对应的 colspan 和 rowspan，以及叶子节点\nexport function getThRowspanAndColspan(columns: BaseTableColumns) {\n  const depthMap = new Map<any, number>();\n  const columnsDepth = getNodeDepth(columns, depthMap);\n  const rowspanAndColspanMap: ThRowspanAndColspan = new Map();\n  const loop = (nodes: BaseTableColumns, leafColumns: BaseTableColumns) => {\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      const col = nodes[i];\n      const rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;\n      const colspan = col.children ? getChildrenNodeWidth(col) : 1;\n      // 避免存在 rowspan 或者 colspan 空属性\n      const span: RowspanColspan = {};\n      rowspan > 1 && (span.rowspan = rowspan);\n      colspan > 1 && (span.colspan = colspan);\n      rowspanAndColspanMap.set(col, span);\n      if (col?.children?.length) {\n        loop(col.children, leafColumns);\n      } else {\n        leafColumns.push(col);\n      }\n    }\n  };\n  const leafColumns: BaseTableColumns = [];\n  loop(columns, leafColumns);\n  return { rowspanAndColspanMap, leafColumns };\n}\n\n// 表头渲染所需的二维数据\nexport function getThList(columns: BaseTableColumns): Array<BaseTableColumns> {\n  const loop = (nodes: BaseTableColumns, thRows: Array<BaseTableColumns>) => {\n    let thRowData: BaseTableColumns = [];\n    let children: BaseTableColumns = [];\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      const node = nodes[i];\n      const thList = [node];\n      thRowData = thRowData.concat(thList);\n      if (node?.children?.length) {\n        children = children.concat(node.children);\n      }\n    }\n    if (children?.length) {\n      loop(children, thRows);\n    }\n    thRows.push(thRowData);\n    return thRowData;\n  };\n  let list: Array<BaseTableColumns> = [];\n  loop(columns, list);\n  list = list.reverse();\n  return list;\n}\n"],"names":["getNodeDepth","columns","depthMap","depth","maxDepth","i","len","length","col","set","children","deep","getChildrenNodeWidth","node","count","countNew","childrenList","item","getThRowspanAndColspan","Map","columnsDepth","rowspanAndColspanMap","loop","nodes","leafColumns","rowspan","get","colspan","span","push","getThList","thRows","thRowData","thList","concat","list","reverse"],"mappings":"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"}