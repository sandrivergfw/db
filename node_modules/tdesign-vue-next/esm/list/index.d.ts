import { TdListProps, TdListItemProps, TdListItemMetaProps } from './type';
import './style';
export * from './type';
export declare type ListProps = TdListProps;
export declare type ListItemProps = TdListItemProps;
export declare type ListItemMetaProps = TdListItemMetaProps;
export declare const List: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            split: boolean;
            size: "small" | "medium" | "large";
            layout: "horizontal" | "vertical";
            stripe: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            asyncLoading: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            footer: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            header: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            layout: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            split: BooleanConstructor;
            stripe: BooleanConstructor;
            onLoadMore: import("vue").PropType<(options: {
                e: MouseEvent;
            }) => void>;
            onScroll: import("vue").PropType<(options: {
                e: Event | WheelEvent;
                scrollTop: number;
                scrollBottom: number;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "split" | "size" | "layout" | "stripe">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            asyncLoading: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            footer: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            header: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            layout: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            split: BooleanConstructor;
            stripe: BooleanConstructor;
            onLoadMore: import("vue").PropType<(options: {
                e: MouseEvent;
            }) => void>;
            onScroll: import("vue").PropType<(options: {
                e: Event | WheelEvent;
                scrollTop: number;
                scrollBottom: number;
            }) => void>;
        }>>, {
            COMPONENT_NAME: import("vue").ComputedRef<string>;
            listClass: import("vue").ComputedRef<(string | {
                [x: string]: boolean;
            })[]>;
            loadingClass: import("vue").ComputedRef<string>;
            renderLoading: () => any;
            renderContent: () => import("vue").VNodeChild;
            handleScroll: (e: Event | WheelEvent) => void;
            handleLoadMore: (e: MouseEvent) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            split: boolean;
            size: "small" | "medium" | "large";
            layout: "horizontal" | "vertical";
            stripe: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        footer: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        header: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        split: BooleanConstructor;
        stripe: BooleanConstructor;
        onLoadMore: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(options: {
            e: Event | WheelEvent;
            scrollTop: number;
            scrollBottom: number;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<{
        COMPONENT_NAME: import("vue").ComputedRef<string>;
        listClass: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        loadingClass: import("vue").ComputedRef<string>;
        renderLoading: () => any;
        renderContent: () => import("vue").VNodeChild;
        handleScroll: (e: Event | WheelEvent) => void;
        handleLoadMore: (e: MouseEvent) => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    footer: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    header: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    split: BooleanConstructor;
    stripe: BooleanConstructor;
    onLoadMore: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event | WheelEvent;
        scrollTop: number;
        scrollBottom: number;
    }) => void>;
}>>, {
    COMPONENT_NAME: import("vue").ComputedRef<string>;
    listClass: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    loadingClass: import("vue").ComputedRef<string>;
    renderLoading: () => any;
    renderContent: () => import("vue").VNodeChild;
    handleScroll: (e: Event | WheelEvent) => void;
    handleLoadMore: (e: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    split: boolean;
    size: "small" | "medium" | "large";
    layout: "horizontal" | "vertical";
    stripe: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const ListItem: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            split: boolean;
            size: "small" | "medium" | "large";
            layout: "horizontal" | "vertical";
            stripe: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            asyncLoading: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            footer: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            header: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            layout: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            split: BooleanConstructor;
            stripe: BooleanConstructor;
            onLoadMore: import("vue").PropType<(options: {
                e: MouseEvent;
            }) => void>;
            onScroll: import("vue").PropType<(options: {
                e: Event | WheelEvent;
                scrollTop: number;
                scrollBottom: number;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "split" | "size" | "layout" | "stripe">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            asyncLoading: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            footer: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            header: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            layout: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            split: BooleanConstructor;
            stripe: BooleanConstructor;
            onLoadMore: import("vue").PropType<(options: {
                e: MouseEvent;
            }) => void>;
            onScroll: import("vue").PropType<(options: {
                e: Event | WheelEvent;
                scrollTop: number;
                scrollBottom: number;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            split: boolean;
            size: "small" | "medium" | "large";
            layout: "horizontal" | "vertical";
            stripe: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        footer: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        header: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        split: BooleanConstructor;
        stripe: BooleanConstructor;
        onLoadMore: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(options: {
            e: Event | WheelEvent;
            scrollTop: number;
            scrollBottom: number;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    footer: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    header: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    split: BooleanConstructor;
    stripe: BooleanConstructor;
    onLoadMore: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event | WheelEvent;
        scrollTop: number;
        scrollBottom: number;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    split: boolean;
    size: "small" | "medium" | "large";
    layout: "horizontal" | "vertical";
    stripe: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const ListItemMeta: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{}> & Omit<Readonly<import("vue").ExtractPropTypes<{
            avatar: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            description: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            image: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            title: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            avatar: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            description: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            image: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            title: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        avatar: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        description: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        image: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    avatar: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    description: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    image: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
