import { TdStepsProps, TdStepItemProps } from './type';
import './style';
export * from './type';
export declare type StepsProps = TdStepsProps;
export declare type StepItemProps = TdStepItemProps;
export declare const Steps: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            readonly: boolean;
            sequence: "reverse" | "positive";
            layout: "horizontal" | "vertical";
            separator: "line" | "dashed" | "arrow";
            modelValue: string | number;
            current: string | number;
            theme: "default" | "dot";
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            current: {
                type: import("vue").PropType<string | number>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<string | number>;
                default: any;
            };
            defaultCurrent: {
                type: import("vue").PropType<string | number>;
            };
            layout: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            options: {
                type: import("vue").PropType<TdStepItemProps[]>;
            };
            readonly: BooleanConstructor;
            separator: {
                type: import("vue").PropType<"line" | "dashed" | "arrow">;
                default: "line" | "dashed" | "arrow";
                validator(val: "line" | "dashed" | "arrow"): boolean;
            };
            sequence: {
                type: import("vue").PropType<"reverse" | "positive">;
                default: "reverse" | "positive";
                validator(val: "reverse" | "positive"): boolean;
            };
            theme: {
                type: import("vue").PropType<"default" | "dot">;
                default: "default" | "dot";
                validator(val: "default" | "dot"): boolean;
            };
            onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
                e?: MouseEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "readonly" | "sequence" | "layout" | "separator" | "modelValue" | "current" | "theme">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            current: {
                type: import("vue").PropType<string | number>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<string | number>;
                default: any;
            };
            defaultCurrent: {
                type: import("vue").PropType<string | number>;
            };
            layout: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            options: {
                type: import("vue").PropType<TdStepItemProps[]>;
            };
            readonly: BooleanConstructor;
            separator: {
                type: import("vue").PropType<"line" | "dashed" | "arrow">;
                default: "line" | "dashed" | "arrow";
                validator(val: "line" | "dashed" | "arrow"): boolean;
            };
            sequence: {
                type: import("vue").PropType<"reverse" | "positive">;
                default: "reverse" | "positive";
                validator(val: "reverse" | "positive"): boolean;
            };
            theme: {
                type: import("vue").PropType<"default" | "dot">;
                default: "default" | "dot";
                validator(val: "default" | "dot"): boolean;
            };
            onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
                e?: MouseEvent;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            readonly: boolean;
            sequence: "reverse" | "positive";
            layout: "horizontal" | "vertical";
            separator: "line" | "dashed" | "arrow";
            modelValue: string | number;
            current: string | number;
            theme: "default" | "dot";
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        current: {
            type: import("vue").PropType<string | number>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<string | number>;
            default: any;
        };
        defaultCurrent: {
            type: import("vue").PropType<string | number>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        options: {
            type: import("vue").PropType<TdStepItemProps[]>;
        };
        readonly: BooleanConstructor;
        separator: {
            type: import("vue").PropType<"line" | "dashed" | "arrow">;
            default: "line" | "dashed" | "arrow";
            validator(val: "line" | "dashed" | "arrow"): boolean;
        };
        sequence: {
            type: import("vue").PropType<"reverse" | "positive">;
            default: "reverse" | "positive";
            validator(val: "reverse" | "positive"): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "dot">;
            default: "default" | "dot";
            validator(val: "default" | "dot"): boolean;
        };
        onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
            e?: MouseEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    current: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    defaultCurrent: {
        type: import("vue").PropType<string | number>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    options: {
        type: import("vue").PropType<TdStepItemProps[]>;
    };
    readonly: BooleanConstructor;
    separator: {
        type: import("vue").PropType<"line" | "dashed" | "arrow">;
        default: "line" | "dashed" | "arrow";
        validator(val: "line" | "dashed" | "arrow"): boolean;
    };
    sequence: {
        type: import("vue").PropType<"reverse" | "positive">;
        default: "reverse" | "positive";
        validator(val: "reverse" | "positive"): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "dot">;
        default: "default" | "dot";
        validator(val: "default" | "dot"): boolean;
    };
    onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
        e?: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    readonly: boolean;
    sequence: "reverse" | "positive";
    layout: "horizontal" | "vertical";
    separator: "line" | "dashed" | "arrow";
    modelValue: string | number;
    current: string | number;
    theme: "default" | "dot";
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const StepItem: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            content: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            title: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            status: import("./type").StepStatus;
            icon: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            index: NumberConstructor;
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            extra: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            icon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            status: {
                type: import("vue").PropType<import("./type").StepStatus>;
                default: import("./type").StepStatus;
                validator(val: import("./type").StepStatus): boolean;
            };
            title: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            value: {
                type: import("vue").PropType<string | number>;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "content" | "title" | "status" | "icon">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            index: NumberConstructor;
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            extra: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            icon: {
                type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            status: {
                type: import("vue").PropType<import("./type").StepStatus>;
                default: import("./type").StepStatus;
                validator(val: import("./type").StepStatus): boolean;
            };
            title: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            value: {
                type: import("vue").PropType<string | number>;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            content: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            title: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            status: import("./type").StepStatus;
            icon: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        index: NumberConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        extra: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        icon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean;
        };
        status: {
            type: import("vue").PropType<import("./type").StepStatus>;
            default: import("./type").StepStatus;
            validator(val: import("./type").StepStatus): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string;
        };
        value: {
            type: import("vue").PropType<string | number>;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    index: NumberConstructor;
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    extra: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    icon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    status: {
        type: import("vue").PropType<import("./type").StepStatus>;
        default: import("./type").StepStatus;
        validator(val: import("./type").StepStatus): boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    value: {
        type: import("vue").PropType<string | number>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    content: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    title: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    status: import("./type").StepStatus;
    icon: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Steps;
