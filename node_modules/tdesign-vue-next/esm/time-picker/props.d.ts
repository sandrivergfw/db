import { TdTimePickerProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disableTime: {
        type: PropType<(h: number, m: number, s: number) => Partial<{
            hour: number[];
            minute: number[];
            second: number[];
        }>>;
    };
    disabled: BooleanConstructor;
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputProps: {
        type: PropType<import("..").TdInputProps>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: PropType<import("..").TdPopupProps>;
    };
    presets: {
        type: PropType<import("./type").PresetTime>;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: TdTimePickerProps['size']): boolean;
    };
    steps: {
        type: PropType<(string | number)[]>;
        default: () => TdTimePickerProps['steps'];
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onBlur: PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: string) => void>;
    onClose: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onInput: PropType<(context: {
        value: string;
        e: InputEvent;
    }) => void>;
    onOpen: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPick: PropType<(value: string) => void>;
};
export default _default;
