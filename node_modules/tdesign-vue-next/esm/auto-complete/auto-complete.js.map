{"version":3,"file":"auto-complete.js","sources":["../../src/auto-complete/auto-complete.tsx"],"sourcesContent":["import { computed, ref, defineComponent, toRefs } from 'vue';\nimport props from './props';\nimport { TdAutoCompleteProps } from './type';\nimport Input, { InputProps } from '../input';\nimport Popup, { PopupProps } from '../popup';\nimport useCommonClassName from '../hooks/useCommonClassName';\nimport AutoCompleteOptionList from './option-list';\nimport useVModel from '../hooks/useVModel';\nimport { useConfig } from '../config-provider/useConfig';\nimport { ClassName } from '../common';\nimport { useContent, useTNodeJSX } from '../hooks';\n\nexport default defineComponent({\n  name: 'TAutoComplete',\n\n  props,\n\n  setup(props: TdAutoCompleteProps, { slots }) {\n    const { value, modelValue } = toRefs(props);\n    const [tValue, setTValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n    const renderContent = useContent();\n    const renderTNodeJSX = useTNodeJSX();\n    const { classPrefix, sizeClassNames } = useCommonClassName();\n    const { globalConfig: global } = useConfig('input');\n\n    const popupVisible = ref();\n\n    const getOverlayStyle = (trigger: HTMLElement, popupElement: HTMLElement) => {\n      const triggerWidth = trigger.getBoundingClientRect().width || trigger.offsetWidth || trigger.clientWidth;\n      const popupWidth =\n        popupElement.getBoundingClientRect().width || popupElement.offsetWidth || popupElement.clientWidth;\n      return {\n        width: triggerWidth >= popupWidth ? `${triggerWidth}px` : 'auto',\n        ...props.popupProps?.overlayInnerStyle,\n      };\n    };\n\n    const classes = computed(() => [`${classPrefix.value}-auto-complete`]);\n    const popupClasses = computed(() => {\n      let classes: ClassName = [`${classPrefix.value}-select__dropdown`];\n      if (props.popupProps?.overlayClassName) {\n        classes = classes.concat(props.popupProps.overlayClassName);\n      }\n      return classes;\n    });\n    const popupInnerClasses = computed(() => {\n      let classes: ClassName = [`${classPrefix.value}-select__dropdown-inner`];\n      if (props.popupProps?.overlayInnerClassName) {\n        classes = classes.concat(props.popupProps.overlayInnerClassName);\n      }\n      return classes;\n    });\n\n    const onInputChange = (value: string, context: { e?: InputEvent | MouseEvent }) => {\n      setTValue(value, context);\n    };\n\n    const innerInputProps = computed(() => {\n      const tProps: InputProps = {\n        value: tValue.value,\n        size: props.size,\n        ...props.inputProps,\n      };\n      return tProps;\n    });\n\n    const onInnerFocus: InputProps['onFocus'] = (value, context) => {\n      popupVisible.value = true;\n      props.onFocus?.({ ...context, value });\n    };\n\n    const onInnerSelect: TdAutoCompleteProps['onSelect'] = (value, context) => {\n      if (props.readonly || props.disabled) return;\n      popupVisible.value = false;\n      setTValue(value, context);\n      props.onSelect?.(value, context);\n    };\n\n    const onPopupVisibleChange: PopupProps['onVisibleChange'] = (visible, { trigger }) => {\n      if (trigger !== 'trigger-element-click') {\n        popupVisible.value = visible;\n      }\n    };\n\n    return () => {\n      // 触发元素\n      const triggerNode = renderContent('default', 'content') || (\n        <Input\n          placeholder={props.placeholder ?? global.value.placeholder}\n          tips={props.tips}\n          status={props.status}\n          readonly={props.readonly}\n          disabled={props.disabled}\n          onChange={onInputChange}\n          onFocus={onInnerFocus}\n          {...innerInputProps.value}\n          v-slots={slots}\n        />\n      );\n      // 联想词列表\n      const listContent = (\n        <AutoCompleteOptionList\n          value={tValue.value}\n          options={props.options}\n          size={props.size}\n          sizeClassNames={sizeClassNames}\n          onSelect={onInnerSelect}\n          popupVisible={popupVisible.value}\n          highlightKeyword={props.highlightKeyword}\n          filterable={props.filterable}\n          filter={props.filter}\n          v-slots={{ option: slots.option }}\n        />\n      );\n      const topContent = renderTNodeJSX('panelTopContent');\n      const bottomContent = renderTNodeJSX('panelBottomContent');\n      const panelContent =\n        topContent || listContent || bottomContent ? (\n          <div class={`${classPrefix.value}-autocomplete__panel`}>\n            {topContent}\n            {listContent}\n            {bottomContent}\n          </div>\n        ) : null;\n      const popupProps = {\n        ...props.popupProps,\n        overlayInnerStyle: getOverlayStyle,\n        overlayInnerClassName: popupInnerClasses.value,\n        overlayClassName: popupClasses.value,\n      };\n      return (\n        <div class={classes.value}>\n          <Popup\n            visible={popupVisible.value}\n            onVisibleChange={onPopupVisibleChange}\n            trigger=\"focus\"\n            placement=\"bottom-left\"\n            hideEmptyPopup={true}\n            content={panelContent ? () => panelContent : null}\n            {...popupProps}\n          >\n            {triggerNode}\n          </Popup>\n        </div>\n      );\n    };\n  },\n});\n"],"names":["_isVNode","defineComponent","name","props","setup","slots","toRefs","value","modelValue","useVModel","defaultValue","onChange","tValue","setTValue","renderContent","useContent","renderTNodeJSX","useTNodeJSX","useCommonClassName","classPrefix","sizeClassNames","useConfig","global","globalConfig","popupVisible","ref","getOverlayStyle","trigger","popupElement","triggerWidth","getBoundingClientRect","width","offsetWidth","clientWidth","popupWidth","popupProps","overlayInnerStyle","classes","computed","popupClasses","overlayClassName","concat","popupInnerClasses","overlayInnerClassName","onInputChange","context","innerInputProps","tProps","size","inputProps","onInnerFocus","onFocus","onInnerSelect","readonly","disabled","onSelect","onPopupVisibleChange","visible","triggerNode","placeholder","tips","status","listContent","_createVNode","options","highlightKeyword","filterable","filter","option","topContent","bottomContent","panelContent","_mergeProps"],"mappings":"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"}