import { TdAutoCompleteProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    autoFocus: BooleanConstructor;
    clearable: BooleanConstructor;
    default: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    filter: {
        type: PropType<(filterWords: string, option: import("./type").AutoCompleteOption) => boolean | Promise<boolean>>;
    };
    filterable: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightKeyword: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputProps: {
        type: PropType<import("..").TdInputProps>;
    };
    options: {
        type: PropType<import("./type").AutoCompleteOption[]>;
    };
    panelBottomContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    panelTopContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: PropType<import("..").TdPopupProps>;
    };
    readonly: BooleanConstructor;
    size: {
        type: PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: TdAutoCompleteProps['size']): boolean;
    };
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        validator(val: TdAutoCompleteProps['status']): boolean;
    };
    textareaProps: {
        type: PropType<import("..").TdTextareaProps>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    triggerElement: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onBlur: PropType<(context: {
        e: FocusEvent;
        value: string;
    }) => void>;
    onChange: PropType<(value: string, context?: {
        e?: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCompositionend: PropType<(context: {
        e: CompositionEvent;
        value: string;
    }) => void>;
    onCompositionstart: PropType<(context: {
        e: CompositionEvent;
        value: string;
    }) => void>;
    onEnter: PropType<(context: {
        e: KeyboardEvent;
        value: string;
    }) => void>;
    onFocus: PropType<(context: {
        e: FocusEvent;
        value: string;
    }) => void>;
    onSelect: PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
};
export default _default;
