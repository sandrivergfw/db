import { CalendarCell } from './type';
declare const _default: import("vue").DefineComponent<{
    cell: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: CalendarCell) => import("../common").SlotReturnValue)>;
    };
    cellAppend: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: CalendarCell) => import("../common").SlotReturnValue)>;
    };
    controllerConfig: {
        type: import("vue").PropType<boolean | import("./type").CalendarController>;
        default: any;
    };
    fillWithZero: {
        type: BooleanConstructor;
        default: any;
    };
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    head: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").ControllerOptions) => import("../common").SlotReturnValue)>;
    };
    isShowWeekendDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    mode: {
        type: import("vue").PropType<"month" | "year">;
        default: "month" | "year";
        validator(val: "month" | "year"): boolean;
    };
    month: {
        type: import("vue").PropType<string | number>;
    };
    preventCellContextmenu: BooleanConstructor;
    range: {
        type: import("vue").PropType<import("./type").CalendarValue[]>;
    };
    theme: {
        type: import("vue").PropType<"full" | "card">;
        default: "full" | "card";
        validator(val: "full" | "card"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").CalendarValue>;
    };
    week: {
        type: import("vue").PropType<string[] | ((h: typeof import("vue").h, props: import("./type").CalendarWeek) => import("../common").SlotReturnValue)>;
    };
    year: {
        type: import("vue").PropType<string | number>;
    };
    onCellClick: import("vue").PropType<(options: {
        cell: CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellDoubleClick: import("vue").PropType<(options: {
        cell: CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellRightClick: import("vue").PropType<(options: {
        cell: CalendarCell;
        e: MouseEvent;
    }) => void>;
    onControllerChange: import("vue").PropType<(options: import("./type").ControllerOptions) => void>;
    onMonthChange: import("vue").PropType<(options: {
        month: string;
        year: string;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    cell: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: CalendarCell) => import("../common").SlotReturnValue)>;
    };
    cellAppend: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: CalendarCell) => import("../common").SlotReturnValue)>;
    };
    controllerConfig: {
        type: import("vue").PropType<boolean | import("./type").CalendarController>;
        default: any;
    };
    fillWithZero: {
        type: BooleanConstructor;
        default: any;
    };
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    head: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").ControllerOptions) => import("../common").SlotReturnValue)>;
    };
    isShowWeekendDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    mode: {
        type: import("vue").PropType<"month" | "year">;
        default: "month" | "year";
        validator(val: "month" | "year"): boolean;
    };
    month: {
        type: import("vue").PropType<string | number>;
    };
    preventCellContextmenu: BooleanConstructor;
    range: {
        type: import("vue").PropType<import("./type").CalendarValue[]>;
    };
    theme: {
        type: import("vue").PropType<"full" | "card">;
        default: "full" | "card";
        validator(val: "full" | "card"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").CalendarValue>;
    };
    week: {
        type: import("vue").PropType<string[] | ((h: typeof import("vue").h, props: import("./type").CalendarWeek) => import("../common").SlotReturnValue)>;
    };
    year: {
        type: import("vue").PropType<string | number>;
    };
    onCellClick: import("vue").PropType<(options: {
        cell: CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellDoubleClick: import("vue").PropType<(options: {
        cell: CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellRightClick: import("vue").PropType<(options: {
        cell: CalendarCell;
        e: MouseEvent;
    }) => void>;
    onControllerChange: import("vue").PropType<(options: import("./type").ControllerOptions) => void>;
    onMonthChange: import("vue").PropType<(options: {
        month: string;
        year: string;
    }) => void>;
}>>, {
    mode: "month" | "year";
    format: string;
    theme: "full" | "card";
    controllerConfig: any;
    isShowWeekendDefault: boolean;
    fillWithZero: boolean;
    preventCellContextmenu: boolean;
}>;
export default _default;
