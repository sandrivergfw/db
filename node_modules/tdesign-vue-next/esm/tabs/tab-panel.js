/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, inject, withDirectives, createVNode, vShow } from 'vue';
import tabPanelProps from './tab-panel-props.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import useDestroyOnClose from '../hooks/useDestroyOnClose.js';
import { useContent } from '../hooks/tnode.js';
import '../config-provider/useConfig.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/type.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _TabPanel = defineComponent({
  name: "TTabPanel",
  props: _objectSpread({}, tabPanelProps),
  setup: function setup(props2) {
    var COMPONENT_NAME = usePrefixClass("tab-panel");
    var renderTNodeContent = useContent();
    useDestroyOnClose();
    var tabs = inject("tabs");
    return function () {
      var isActive = props2.value === tabs.value.value;
      if (props2.destroyOnHide && !isActive) return null;
      return withDirectives(createVNode("div", {
        "class": COMPONENT_NAME.value
      }, [renderTNodeContent("default", "panel")]), [[vShow, isActive]]);
    };
  }
});

export { _TabPanel as default };
//# sourceMappingURL=tab-panel.js.map
