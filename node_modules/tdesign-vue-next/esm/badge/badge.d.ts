declare const _default: import("vue").DefineComponent<{
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    count: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: number;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    dot: BooleanConstructor;
    maxCount: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
    };
    shape: {
        type: import("vue").PropType<"round" | "circle">;
        default: "round" | "circle";
        validator(val: "round" | "circle"): boolean;
    };
    showZero: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium">;
        default: "small" | "medium";
        validator(val: "small" | "medium"): boolean;
    };
}, {
    content: import("vue").ComputedRef<any>;
    inlineStyle: import("vue").ComputedRef<{
        background: string;
        right: string | number;
        top: string | number;
    }>;
    badgeClassNames: import("vue").ComputedRef<{
        [x: string]: boolean;
    }[]>;
    isHidden: import("vue").ComputedRef<boolean>;
    renderChildren: () => any;
    name: string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    count: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: number;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    dot: BooleanConstructor;
    maxCount: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
    };
    shape: {
        type: import("vue").PropType<"round" | "circle">;
        default: "round" | "circle";
        validator(val: "round" | "circle"): boolean;
    };
    showZero: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium">;
        default: "small" | "medium";
        validator(val: "small" | "medium"): boolean;
    };
}>>, {
    color: string;
    size: "small" | "medium";
    dot: boolean;
    shape: "round" | "circle";
    count: string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    maxCount: number;
    showZero: boolean;
}>;
export default _default;
