/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, createVNode, mergeProps } from 'vue';
import props from './props.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import '../hooks/useConfig.js';
import { useConfig } from '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _Badge = defineComponent({
  name: "TBadge",
  props: _objectSpread({}, props),
  setup: function setup(props2) {
    var renderTNodeJSX = useTNodeJSX();
    var content = computed(function () {
      if (props2.dot) return "";
      if (typeof props2.count === "function") {
        return renderTNodeJSX("count");
      }
      if (Number.isNaN(Number(props2.count))) {
        return props2.count;
      }
      var count = Number(props2.count);
      return count > props2.maxCount ? "".concat(props2.maxCount, "+") : count;
    });
    var renderChildren = function renderChildren() {
      return renderTNodeJSX("default");
    };
    var getOffset = function getOffset() {
      if (!props2.offset) return {};
      var _props2$offset = _slicedToArray(props2.offset, 2),
        xOffset = _props2$offset[0],
        yOffset = _props2$offset[1];
      xOffset = Number.isNaN(Number(xOffset)) ? xOffset : "".concat(xOffset, "px");
      yOffset = Number.isNaN(Number(yOffset)) ? yOffset : "".concat(yOffset, "px");
      return {
        xOffset: xOffset,
        yOffset: yOffset
      };
    };
    var _useConfig = useConfig("classPrefix"),
      classPrefix = _useConfig.classPrefix;
    var name = "".concat(classPrefix.value, "-badge");
    var isHidden = computed(function () {
      return !props2.showZero && (content.value === 0 || content.value === "0");
    });
    var badgeClassNames = computed(function () {
      var _ref;
      return [(_ref = {}, _defineProperty(_ref, "".concat(name, "--dot"), !!props2.dot), _defineProperty(_ref, "".concat(name, "--circle"), !props2.dot && props2.shape === "circle"), _defineProperty(_ref, "".concat(name, "--round"), props2.shape === "round"), _defineProperty(_ref, "".concat(classPrefix.value, "-size-s"), props2.size === "small"), _ref)];
    });
    var inlineStyle = computed(function () {
      var _getOffset = getOffset(),
        xOffset = _getOffset.xOffset,
        yOffset = _getOffset.yOffset;
      return {
        background: "".concat(props2.color),
        right: xOffset,
        top: yOffset
      };
    });
    return {
      content: content,
      inlineStyle: inlineStyle,
      badgeClassNames: badgeClassNames,
      isHidden: isHidden,
      renderChildren: renderChildren,
      name: name
    };
  },
  render: function render() {
    return createVNode("div", mergeProps({
      "class": this.name
    }, this.$attrs), [this.renderChildren(), this.isHidden ? null : createVNode("sup", {
      "class": this.badgeClassNames,
      "style": this.inlineStyle
    }, [this.content])]);
  }
});

export { _Badge as default };
//# sourceMappingURL=badge.js.map
