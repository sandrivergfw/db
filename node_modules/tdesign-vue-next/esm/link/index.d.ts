import { TdLinkProps } from './type';
import './style';
export * from './type';
export declare type LinkProps = TdLinkProps;
export declare const Link: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            target: string;
            disabled: boolean;
            underline: boolean;
            href: string;
            hover: "color" | "underline";
            theme: "default" | "success" | "primary" | "warning" | "danger";
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            hover: {
                type: import("vue").PropType<"color" | "underline">;
                default: "color" | "underline";
                validator(val: "color" | "underline"): boolean;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            prefixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                validator(val: import("../common").SizeEnum): boolean;
            };
            suffixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            target: {
                type: StringConstructor;
                default: string;
            };
            theme: {
                type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
                default: "default" | "success" | "primary" | "warning" | "danger";
                validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
            };
            underline: BooleanConstructor;
            onClick: import("vue").PropType<(e: MouseEvent) => void>;
        }>> & {
            onClick?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "target" | "disabled" | "underline" | "href" | "hover" | "theme">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: "click", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            hover: {
                type: import("vue").PropType<"color" | "underline">;
                default: "color" | "underline";
                validator(val: "color" | "underline"): boolean;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            prefixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                validator(val: import("../common").SizeEnum): boolean;
            };
            suffixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            target: {
                type: StringConstructor;
                default: string;
            };
            theme: {
                type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
                default: "default" | "success" | "primary" | "warning" | "danger";
                validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
            };
            underline: BooleanConstructor;
            onClick: import("vue").PropType<(e: MouseEvent) => void>;
        }>> & {
            onClick?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], string, {
            target: string;
            disabled: boolean;
            underline: boolean;
            href: string;
            hover: "color" | "underline";
            theme: "default" | "success" | "primary" | "warning" | "danger";
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        hover: {
            type: import("vue").PropType<"color" | "underline">;
            default: "color" | "underline";
            validator(val: "color" | "underline"): boolean;
        };
        href: {
            type: StringConstructor;
            default: string;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        target: {
            type: StringConstructor;
            default: string;
        };
        theme: {
            type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
            default: "default" | "success" | "primary" | "warning" | "danger";
            validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
        };
        underline: BooleanConstructor;
        onClick: import("vue").PropType<(e: MouseEvent) => void>;
    }>> & {
        onClick?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    hover: {
        type: import("vue").PropType<"color" | "underline">;
        default: "color" | "underline";
        validator(val: "color" | "underline"): boolean;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        validator(val: import("../common").SizeEnum): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
        default: "default" | "success" | "primary" | "warning" | "danger";
        validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
    };
    underline: BooleanConstructor;
    onClick: import("vue").PropType<(e: MouseEvent) => void>;
}>> & {
    onClick?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", {
    target: string;
    disabled: boolean;
    underline: boolean;
    href: string;
    hover: "color" | "underline";
    theme: "default" | "success" | "primary" | "warning" | "danger";
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Link;
