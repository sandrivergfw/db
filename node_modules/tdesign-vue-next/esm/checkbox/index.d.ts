import { TdCheckboxProps, TdCheckboxGroupProps } from './type';
import './style';
export * from './type';
export declare type CheckboxProps = TdCheckboxProps;
export declare type CheckboxGroupProps = TdCheckboxGroupProps;
export declare const Checkbox: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            name: string;
            disabled: boolean;
            readonly: boolean;
            checked: boolean;
            indeterminate: boolean;
            modelValue: boolean;
            defaultChecked: boolean;
            needRipple: boolean;
            stopLabelTrigger: boolean;
            checkAll: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            needRipple: BooleanConstructor;
            stopLabelTrigger: BooleanConstructor;
            checkAll: BooleanConstructor;
            checked: {
                type: BooleanConstructor;
                default: any;
            };
            modelValue: {
                type: BooleanConstructor;
                default: any;
            };
            defaultChecked: BooleanConstructor;
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: {
                type: BooleanConstructor;
                default: any;
            };
            indeterminate: BooleanConstructor;
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            readonly: BooleanConstructor;
            value: {
                type: import("vue").PropType<string | number>;
            };
            onChange: import("vue").PropType<(checked: boolean, context: {
                e: Event;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "name" | "disabled" | "readonly" | "checked" | "indeterminate" | "modelValue" | "defaultChecked" | "needRipple" | "stopLabelTrigger" | "checkAll">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            needRipple: BooleanConstructor;
            stopLabelTrigger: BooleanConstructor;
            checkAll: BooleanConstructor;
            checked: {
                type: BooleanConstructor;
                default: any;
            };
            modelValue: {
                type: BooleanConstructor;
                default: any;
            };
            defaultChecked: BooleanConstructor;
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: {
                type: BooleanConstructor;
                default: any;
            };
            indeterminate: BooleanConstructor;
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            readonly: BooleanConstructor;
            value: {
                type: import("vue").PropType<string | number>;
            };
            onChange: import("vue").PropType<(checked: boolean, context: {
                e: Event;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            name: string;
            disabled: boolean;
            readonly: boolean;
            checked: boolean;
            indeterminate: boolean;
            modelValue: boolean;
            defaultChecked: boolean;
            needRipple: boolean;
            stopLabelTrigger: boolean;
            checkAll: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        needRipple: BooleanConstructor;
        stopLabelTrigger: BooleanConstructor;
        checkAll: BooleanConstructor;
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        indeterminate: BooleanConstructor;
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        readonly: BooleanConstructor;
        value: {
            type: import("vue").PropType<string | number>;
        };
        onChange: import("vue").PropType<(checked: boolean, context: {
            e: Event;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    needRipple: BooleanConstructor;
    stopLabelTrigger: BooleanConstructor;
    checkAll: BooleanConstructor;
    checked: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultChecked: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    indeterminate: BooleanConstructor;
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    readonly: BooleanConstructor;
    value: {
        type: import("vue").PropType<string | number>;
    };
    onChange: import("vue").PropType<(checked: boolean, context: {
        e: Event;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    name: string;
    disabled: boolean;
    readonly: boolean;
    checked: boolean;
    indeterminate: boolean;
    modelValue: boolean;
    defaultChecked: boolean;
    needRipple: boolean;
    stopLabelTrigger: boolean;
    checkAll: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const CheckboxGroup: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            max: number;
            name: string;
            value: import("./type").CheckboxGroupValue;
            disabled: boolean;
            options: import("./type").CheckboxOption[];
            modelValue: import("./type").CheckboxGroupValue;
            defaultValue: import("./type").CheckboxGroupValue;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            disabled: BooleanConstructor;
            max: {
                type: NumberConstructor;
                default: any;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            options: {
                type: import("vue").PropType<import("./type").CheckboxOption[]>;
                default: () => import("./type").CheckboxOption[];
            };
            value: {
                type: import("vue").PropType<import("./type").CheckboxGroupValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").CheckboxGroupValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").CheckboxGroupValue>;
                default: () => import("./type").CheckboxGroupValue;
            };
            onChange: import("vue").PropType<(value: import("./type").CheckboxGroupValue, context: import("./type").CheckboxGroupChangeContext) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "max" | "name" | "value" | "disabled" | "options" | "modelValue" | "defaultValue">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            disabled: BooleanConstructor;
            max: {
                type: NumberConstructor;
                default: any;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            options: {
                type: import("vue").PropType<import("./type").CheckboxOption[]>;
                default: () => import("./type").CheckboxOption[];
            };
            value: {
                type: import("vue").PropType<import("./type").CheckboxGroupValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").CheckboxGroupValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").CheckboxGroupValue>;
                default: () => import("./type").CheckboxGroupValue;
            };
            onChange: import("vue").PropType<(value: import("./type").CheckboxGroupValue, context: import("./type").CheckboxGroupChangeContext) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            max: number;
            name: string;
            value: import("./type").CheckboxGroupValue;
            disabled: boolean;
            options: import("./type").CheckboxOption[];
            modelValue: import("./type").CheckboxGroupValue;
            defaultValue: import("./type").CheckboxGroupValue;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        disabled: BooleanConstructor;
        max: {
            type: NumberConstructor;
            default: any;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        options: {
            type: import("vue").PropType<import("./type").CheckboxOption[]>;
            default: () => import("./type").CheckboxOption[];
        };
        value: {
            type: import("vue").PropType<import("./type").CheckboxGroupValue>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").CheckboxGroupValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").CheckboxGroupValue>;
            default: () => import("./type").CheckboxGroupValue;
        };
        onChange: import("vue").PropType<(value: import("./type").CheckboxGroupValue, context: import("./type").CheckboxGroupChangeContext) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    max: {
        type: NumberConstructor;
        default: any;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    options: {
        type: import("vue").PropType<import("./type").CheckboxOption[]>;
        default: () => import("./type").CheckboxOption[];
    };
    value: {
        type: import("vue").PropType<import("./type").CheckboxGroupValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").CheckboxGroupValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").CheckboxGroupValue>;
        default: () => import("./type").CheckboxGroupValue;
    };
    onChange: import("vue").PropType<(value: import("./type").CheckboxGroupValue, context: import("./type").CheckboxGroupChangeContext) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    max: number;
    name: string;
    value: import("./type").CheckboxGroupValue;
    disabled: boolean;
    options: import("./type").CheckboxOption[];
    modelValue: import("./type").CheckboxGroupValue;
    defaultValue: import("./type").CheckboxGroupValue;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Checkbox;
