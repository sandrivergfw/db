import { DrawerCloseContext } from './type';
declare const _default: import("vue").DefineComponent<{
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    body: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cancelBtn: {
        type: import("vue").PropType<import("./type").FooterButton>;
        default: string;
    };
    closeBtn: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: any;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    confirmBtn: {
        type: import("vue").PropType<import("./type").FooterButton>;
        default: string;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    destroyOnClose: BooleanConstructor;
    footer: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    header: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    mode: {
        type: import("vue").PropType<"push" | "overlay">;
        default: "push" | "overlay";
        validator(val: "push" | "overlay"): boolean;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInAttachedElement: BooleanConstructor;
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        default: any;
    };
    sizeDraggable: BooleanConstructor;
    visible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: DrawerCloseContext) => void>;
    onCloseBtnClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onConfirm: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEscKeydown: import("vue").PropType<(context: {
        e: KeyboardEvent;
    }) => void>;
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:visible"[], "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    body: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cancelBtn: {
        type: import("vue").PropType<import("./type").FooterButton>;
        default: string;
    };
    closeBtn: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: any;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    confirmBtn: {
        type: import("vue").PropType<import("./type").FooterButton>;
        default: string;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    destroyOnClose: BooleanConstructor;
    footer: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    header: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    mode: {
        type: import("vue").PropType<"push" | "overlay">;
        default: "push" | "overlay";
        validator(val: "push" | "overlay"): boolean;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInAttachedElement: BooleanConstructor;
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        default: any;
    };
    sizeDraggable: BooleanConstructor;
    visible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: DrawerCloseContext) => void>;
    onCloseBtnClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onConfirm: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEscKeydown: import("vue").PropType<(context: {
        e: KeyboardEvent;
    }) => void>;
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>> & {
    "onUpdate:visible"?: (...args: any[]) => any;
}, {
    visible: boolean;
    footer: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    header: string | boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    size: string;
    mode: "push" | "overlay";
    placement: "left" | "top" | "bottom" | "right";
    attach: import("../common").AttachNode;
    destroyOnClose: boolean;
    preventScrollThrough: boolean;
    showOverlay: boolean;
    cancelBtn: string;
    closeOnEscKeydown: boolean;
    closeOnOverlayClick: boolean;
    confirmBtn: string;
    showInAttachedElement: boolean;
    sizeDraggable: boolean;
}>;
export default _default;
