/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { isVNode, defineComponent, inject, computed, createVNode } from 'vue';
import props from './col-props.js';
import { useRowSize, getColClasses, parseFlex, calcColPadding } from './common.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import 'lodash/isObject';
import '../utils/responsive.js';
import '../hooks/useListener.js';
import '../utils/dom.js';
import '../_chunks/dep-ff6303d0.js';
import 'lodash/isString';
import '../utils/easing.js';
import '../config-provider/useConfig.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/type.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var _Col = defineComponent({
  name: "TCol",
  inject: ["rowContext"],
  props: _objectSpread({}, props),
  setup: function setup(props2) {
    var COMPONENT_NAME = usePrefixClass("col");
    var renderTNodeJSX = useTNodeJSX();
    var rowContext = inject("rowContext", /* @__PURE__ */Object.create(null));
    var size = useRowSize();
    var colClasses = computed(function () {
      return getColClasses(COMPONENT_NAME.value, props2);
    });
    var colStyle = computed(function () {
      var colStyle2 = {};
      var flex = props2.flex;
      flex && (colStyle2.flex = parseFlex(flex));
      if (rowContext) {
        var rowGutter = rowContext.gutter;
        Object.assign(colStyle2, calcColPadding(rowGutter, size.value));
      }
      return colStyle2;
    });
    return function () {
      var _slot;
      var TAG = props2.tag;
      return createVNode(TAG, {
        "class": colClasses.value,
        "style": colStyle.value
      }, _isSlot(_slot = renderTNodeJSX("default")) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      });
    };
  }
});

export { _Col as default };
//# sourceMappingURL=col.js.map
