import { TdButtonProps } from './type';
import './style';
export * from './type';
export declare type ButtonProps = TdButtonProps;
export declare const Button: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            type: "button" | "reset" | "submit";
            block: boolean;
            loading: boolean;
            disabled: boolean;
            size: import("../common").SizeEnum;
            shape: "square" | "round" | "circle" | "rectangle";
            variant: "outline" | "base" | "text" | "dashed";
            ghost: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            block: BooleanConstructor;
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            ghost: BooleanConstructor;
            href: StringConstructor;
            icon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            loading: BooleanConstructor;
            shape: {
                type: import("vue").PropType<"square" | "round" | "circle" | "rectangle">;
                default: "square" | "round" | "circle" | "rectangle";
                validator(val: "square" | "round" | "circle" | "rectangle"): boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            suffix: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            tag: {
                type: import("vue").PropType<"button" | "a" | "div">;
                validator(val: "button" | "a" | "div"): boolean;
            };
            theme: {
                type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
                validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
            };
            type: {
                type: import("vue").PropType<"button" | "reset" | "submit">;
                default: "button" | "reset" | "submit";
                validator(val: "button" | "reset" | "submit"): boolean;
            };
            variant: {
                type: import("vue").PropType<"outline" | "base" | "text" | "dashed">;
                default: "outline" | "base" | "text" | "dashed";
                validator(val: "outline" | "base" | "text" | "dashed"): boolean;
            };
            onClick: import("vue").PropType<(e: MouseEvent) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "type" | "block" | "loading" | "disabled" | "size" | "shape" | "variant" | "ghost">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            block: BooleanConstructor;
            content: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            ghost: BooleanConstructor;
            href: StringConstructor;
            icon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            loading: BooleanConstructor;
            shape: {
                type: import("vue").PropType<"square" | "round" | "circle" | "rectangle">;
                default: "square" | "round" | "circle" | "rectangle";
                validator(val: "square" | "round" | "circle" | "rectangle"): boolean;
            };
            size: {
                type: import("vue").PropType<import("../common").SizeEnum>;
                default: import("../common").SizeEnum;
                validator(val: import("../common").SizeEnum): boolean;
            };
            suffix: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            tag: {
                type: import("vue").PropType<"button" | "a" | "div">;
                validator(val: "button" | "a" | "div"): boolean;
            };
            theme: {
                type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
                validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
            };
            type: {
                type: import("vue").PropType<"button" | "reset" | "submit">;
                default: "button" | "reset" | "submit";
                validator(val: "button" | "reset" | "submit"): boolean;
            };
            variant: {
                type: import("vue").PropType<"outline" | "base" | "text" | "dashed">;
                default: "outline" | "base" | "text" | "dashed";
                validator(val: "outline" | "base" | "text" | "dashed"): boolean;
            };
            onClick: import("vue").PropType<(e: MouseEvent) => void>;
        }>>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            type: "button" | "reset" | "submit";
            block: boolean;
            loading: boolean;
            disabled: boolean;
            size: import("../common").SizeEnum;
            shape: "square" | "round" | "circle" | "rectangle";
            variant: "outline" | "base" | "text" | "dashed";
            ghost: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        block: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        ghost: BooleanConstructor;
        href: StringConstructor;
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        loading: BooleanConstructor;
        shape: {
            type: import("vue").PropType<"square" | "round" | "circle" | "rectangle">;
            default: "square" | "round" | "circle" | "rectangle";
            validator(val: "square" | "round" | "circle" | "rectangle"): boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        suffix: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        tag: {
            type: import("vue").PropType<"button" | "a" | "div">;
            validator(val: "button" | "a" | "div"): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
            validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
        };
        type: {
            type: import("vue").PropType<"button" | "reset" | "submit">;
            default: "button" | "reset" | "submit";
            validator(val: "button" | "reset" | "submit"): boolean;
        };
        variant: {
            type: import("vue").PropType<"outline" | "base" | "text" | "dashed">;
            default: "outline" | "base" | "text" | "dashed";
            validator(val: "outline" | "base" | "text" | "dashed"): boolean;
        };
        onClick: import("vue").PropType<(e: MouseEvent) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    block: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    ghost: BooleanConstructor;
    href: StringConstructor;
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    loading: BooleanConstructor;
    shape: {
        type: import("vue").PropType<"square" | "round" | "circle" | "rectangle">;
        default: "square" | "round" | "circle" | "rectangle";
        validator(val: "square" | "round" | "circle" | "rectangle"): boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    suffix: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    tag: {
        type: import("vue").PropType<"button" | "a" | "div">;
        validator(val: "button" | "a" | "div"): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
        validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
    };
    type: {
        type: import("vue").PropType<"button" | "reset" | "submit">;
        default: "button" | "reset" | "submit";
        validator(val: "button" | "reset" | "submit"): boolean;
    };
    variant: {
        type: import("vue").PropType<"outline" | "base" | "text" | "dashed">;
        default: "outline" | "base" | "text" | "dashed";
        validator(val: "outline" | "base" | "text" | "dashed"): boolean;
    };
    onClick: import("vue").PropType<(e: MouseEvent) => void>;
}>>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    type: "button" | "reset" | "submit";
    block: boolean;
    loading: boolean;
    disabled: boolean;
    size: import("../common").SizeEnum;
    shape: "square" | "round" | "circle" | "rectangle";
    variant: "outline" | "base" | "text" | "dashed";
    ghost: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Button;
