import './style';
export * from './interface';
export declare const TreeSelect: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            max: number;
            data: import("../common").TreeOptionData[];
            value: import("./type").TreeSelectValue;
            loading: boolean;
            disabled: boolean;
            multiple: boolean;
            size: "small" | "medium" | "large";
            readonly: boolean;
            empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            placeholder: string;
            modelValue: import("./type").TreeSelectValue;
            autoWidth: boolean;
            clearable: boolean;
            inputValue: string;
            minCollapsedNum: number;
            borderless: boolean;
            popupVisible: boolean;
            loadingText: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            valueType: "object" | "value";
            filterable: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            autoWidth: BooleanConstructor;
            borderless: BooleanConstructor;
            clearable: BooleanConstructor;
            collapsedItems: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: {
                    value: import("../common").TreeOptionData[];
                    collapsedSelectedItems: import("../common").TreeOptionData[];
                    count: number;
                }) => import("../common").SlotReturnValue>;
            };
            data: {
                type: import("vue").PropType<import("../common").TreeOptionData[]>;
                default: () => import("../common").TreeOptionData[];
            };
            disabled: BooleanConstructor;
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            filter: {
                type: import("vue").PropType<(filterWords: string, option: import("../common").TreeOptionData) => boolean>;
            };
            filterable: BooleanConstructor;
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            inputValue: {
                type: import("vue").PropType<string>;
                default: any;
            };
            defaultInputValue: {
                type: import("vue").PropType<string>;
            };
            loading: BooleanConstructor;
            loadingText: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            max: {
                type: NumberConstructor;
                default: number;
            };
            minCollapsedNum: {
                type: NumberConstructor;
                default: number;
            };
            multiple: BooleanConstructor;
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            popupVisible: {
                type: BooleanConstructor;
                default: any;
            };
            prefixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            readonly: BooleanConstructor;
            selectInputProps: {
                type: import("vue").PropType<import("..").TdSelectInputProps>;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            tagProps: {
                type: import("vue").PropType<import("..").TdTagProps>;
            };
            treeProps: {
                type: import("vue").PropType<import("..").TreeProps>;
            };
            value: {
                type: import("vue").PropType<import("./type").TreeSelectValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TreeSelectValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TreeSelectValue>;
            };
            valueDisplay: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: {
                    value: import("../common").TreeOptionData[];
                    onClose: () => void;
                }) => import("../common").SlotReturnValue>;
            };
            valueType: {
                type: import("vue").PropType<"object" | "value">;
                default: "object" | "value";
                validator(val: "object" | "value"): boolean;
            };
            onBlur: import("vue").PropType<(context: {
                value: import("./type").TreeSelectValue;
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").TreeSelectValue, context: {
                node: import("..").TreeNodeModel<import("../common").TreeOptionData>;
                trigger: import("./type").TreeSelectValueChangeTrigger;
                e?: MouseEvent | KeyboardEvent;
            }) => void>;
            onClear: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onFocus: import("vue").PropType<(context: {
                value: import("./type").TreeSelectValue;
                e: FocusEvent;
            }) => void>;
            onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
            onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
            onRemove: import("vue").PropType<(options: import("./type").RemoveOptions<import("../common").TreeOptionData>) => void>;
            onSearch: import("vue").PropType<(filterWords: string) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "max" | "data" | "value" | "loading" | "disabled" | "multiple" | "size" | "readonly" | "empty" | "placeholder" | "modelValue" | "autoWidth" | "clearable" | "inputValue" | "minCollapsedNum" | "borderless" | "popupVisible" | "loadingText" | "valueType" | "filterable">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            autoWidth: BooleanConstructor;
            borderless: BooleanConstructor;
            clearable: BooleanConstructor;
            collapsedItems: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: {
                    value: import("../common").TreeOptionData[];
                    collapsedSelectedItems: import("../common").TreeOptionData[];
                    count: number;
                }) => import("../common").SlotReturnValue>;
            };
            data: {
                type: import("vue").PropType<import("../common").TreeOptionData[]>;
                default: () => import("../common").TreeOptionData[];
            };
            disabled: BooleanConstructor;
            empty: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            filter: {
                type: import("vue").PropType<(filterWords: string, option: import("../common").TreeOptionData) => boolean>;
            };
            filterable: BooleanConstructor;
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            inputValue: {
                type: import("vue").PropType<string>;
                default: any;
            };
            defaultInputValue: {
                type: import("vue").PropType<string>;
            };
            loading: BooleanConstructor;
            loadingText: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            max: {
                type: NumberConstructor;
                default: number;
            };
            minCollapsedNum: {
                type: NumberConstructor;
                default: number;
            };
            multiple: BooleanConstructor;
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            popupVisible: {
                type: BooleanConstructor;
                default: any;
            };
            prefixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            readonly: BooleanConstructor;
            selectInputProps: {
                type: import("vue").PropType<import("..").TdSelectInputProps>;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            tagProps: {
                type: import("vue").PropType<import("..").TdTagProps>;
            };
            treeProps: {
                type: import("vue").PropType<import("..").TreeProps>;
            };
            value: {
                type: import("vue").PropType<import("./type").TreeSelectValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TreeSelectValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TreeSelectValue>;
            };
            valueDisplay: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: {
                    value: import("../common").TreeOptionData[];
                    onClose: () => void;
                }) => import("../common").SlotReturnValue>;
            };
            valueType: {
                type: import("vue").PropType<"object" | "value">;
                default: "object" | "value";
                validator(val: "object" | "value"): boolean;
            };
            onBlur: import("vue").PropType<(context: {
                value: import("./type").TreeSelectValue;
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").TreeSelectValue, context: {
                node: import("..").TreeNodeModel<import("../common").TreeOptionData>;
                trigger: import("./type").TreeSelectValueChangeTrigger;
                e?: MouseEvent | KeyboardEvent;
            }) => void>;
            onClear: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onFocus: import("vue").PropType<(context: {
                value: import("./type").TreeSelectValue;
                e: FocusEvent;
            }) => void>;
            onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
            onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
            onRemove: import("vue").PropType<(options: import("./type").RemoveOptions<import("../common").TreeOptionData>) => void>;
            onSearch: import("vue").PropType<(filterWords: string) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            max: number;
            data: import("../common").TreeOptionData[];
            value: import("./type").TreeSelectValue;
            loading: boolean;
            disabled: boolean;
            multiple: boolean;
            size: "small" | "medium" | "large";
            readonly: boolean;
            empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            placeholder: string;
            modelValue: import("./type").TreeSelectValue;
            autoWidth: boolean;
            clearable: boolean;
            inputValue: string;
            minCollapsedNum: number;
            borderless: boolean;
            popupVisible: boolean;
            loadingText: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            valueType: "object" | "value";
            filterable: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("../common").TreeOptionData[];
                collapsedSelectedItems: import("../common").TreeOptionData[];
                count: number;
            }) => import("../common").SlotReturnValue>;
        };
        data: {
            type: import("vue").PropType<import("../common").TreeOptionData[]>;
            default: () => import("../common").TreeOptionData[];
        };
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, option: import("../common").TreeOptionData) => boolean>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").TdInputProps>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        treeProps: {
            type: import("vue").PropType<import("..").TreeProps>;
        };
        value: {
            type: import("vue").PropType<import("./type").TreeSelectValue>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TreeSelectValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TreeSelectValue>;
        };
        valueDisplay: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("../common").TreeOptionData[];
                onClose: () => void;
            }) => import("../common").SlotReturnValue>;
        };
        valueType: {
            type: import("vue").PropType<"object" | "value">;
            default: "object" | "value";
            validator(val: "object" | "value"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").TreeSelectValue;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TreeSelectValue, context: {
            node: import("..").TreeNodeModel<import("../common").TreeOptionData>;
            trigger: import("./type").TreeSelectValueChangeTrigger;
            e?: MouseEvent | KeyboardEvent;
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").TreeSelectValue;
            e: FocusEvent;
        }) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(options: import("./type").RemoveOptions<import("../common").TreeOptionData>) => void>;
        onSearch: import("vue").PropType<(filterWords: string) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autoWidth: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("../common").TreeOptionData[];
            collapsedSelectedItems: import("../common").TreeOptionData[];
            count: number;
        }) => import("../common").SlotReturnValue>;
    };
    data: {
        type: import("vue").PropType<import("../common").TreeOptionData[]>;
        default: () => import("../common").TreeOptionData[];
    };
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    filter: {
        type: import("vue").PropType<(filterWords: string, option: import("../common").TreeOptionData) => boolean>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<string>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    selectInputProps: {
        type: import("vue").PropType<import("..").TdSelectInputProps>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    treeProps: {
        type: import("vue").PropType<import("..").TreeProps>;
    };
    value: {
        type: import("vue").PropType<import("./type").TreeSelectValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TreeSelectValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TreeSelectValue>;
    };
    valueDisplay: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("../common").TreeOptionData[];
            onClose: () => void;
        }) => import("../common").SlotReturnValue>;
    };
    valueType: {
        type: import("vue").PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: "object" | "value"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").TreeSelectValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TreeSelectValue, context: {
        node: import("..").TreeNodeModel<import("../common").TreeOptionData>;
        trigger: import("./type").TreeSelectValueChangeTrigger;
        e?: MouseEvent | KeyboardEvent;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").TreeSelectValue;
        e: FocusEvent;
    }) => void>;
    onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onRemove: import("vue").PropType<(options: import("./type").RemoveOptions<import("../common").TreeOptionData>) => void>;
    onSearch: import("vue").PropType<(filterWords: string) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    max: number;
    data: import("../common").TreeOptionData[];
    value: import("./type").TreeSelectValue;
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    placeholder: string;
    modelValue: import("./type").TreeSelectValue;
    autoWidth: boolean;
    clearable: boolean;
    inputValue: string;
    minCollapsedNum: number;
    borderless: boolean;
    popupVisible: boolean;
    loadingText: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    valueType: "object" | "value";
    filterable: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default TreeSelect;
