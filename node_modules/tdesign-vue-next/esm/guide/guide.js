/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, toRefs, ref, computed, nextTick, watch, onMounted, withDirectives, createVNode, resolveDirective, Fragment, mergeProps } from 'vue';
import props from './props.js';
import './utils/index.js';
import setStyle from '../_common/js/utils/set-style.js';
import TransferDom from '../utils/transfer-dom.js';
import { isFixed, getWindowScroll, removeClass, addClass } from '../utils/dom.js';
import useVModel from '../hooks/useVModel.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { Button } from '../button/index.js';
import { Popup } from '../popup/index.js';
import getRelativePosition from './utils/getRelativePosition.js';
import getTargetElm from './utils/getTargetElm.js';
import { scrollToParentVisibleArea } from './utils/getScrollParent.js';
import scrollToElm from './utils/scrollToElm.js';
import '../_chunks/dep-ff6303d0.js';
import 'lodash/isString';
import '../utils/easing.js';
import 'lodash/kebabCase';
import 'lodash/isFunction';
import 'lodash/camelCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../config-provider/useConfig.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/type.js';
import '../button/button.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../loading/index.js';
import '../loading/directive.js';
import '../loading/plugin.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../loading/props.js';
import '../utils/withInstall.js';
import '../loading/style';
import '../loading/type.js';
import '../button/props.js';
import '../hooks/useRipple.js';
import '../hooks/useKeepAnimation.js';
import '../utils/set-style.js';
import '../form/hooks.js';
import '../button/style';
import '../button/type.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/typeof';
import '@popperjs/core';
import '../popup/props.js';
import '../popup/container.js';
import '../popup/style';
import '../popup/type.js';

var _Guide = defineComponent({
  name: "TGuide",
  directives: {
    TransferDom: TransferDom
  },
  props: props,
  setup: function setup(props2) {
    var renderTNodeJSX = useTNodeJSX();
    var COMPONENT_NAME = usePrefixClass("guide");
    var LOCK_CLASS = usePrefixClass("guide--lock");
    var _toRefs = toRefs(props2),
      current = _toRefs.current,
      modelValue = _toRefs.modelValue,
      hideCounter = _toRefs.hideCounter,
      hidePrev = _toRefs.hidePrev,
      hideSkip = _toRefs.hideSkip,
      steps = _toRefs.steps,
      zIndex = _toRefs.zIndex;
    var _useVModel = useVModel(current, modelValue, props2.defaultCurrent, props2.onChange, "current"),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerCurrent = _useVModel2[0],
      setInnerCurrent = _useVModel2[1];
    var overlayLayerRef = ref();
    var highlightLayerRef = ref();
    var referenceLayerRef = ref();
    var currentHighlightLayerElm = ref();
    var nextHighlightLayerElm = ref();
    var dialogWrapperRef = ref();
    var dialogTooltipRef = ref();
    var actived = ref(false);
    var stepsTotal = computed(function () {
      return steps.value.length;
    });
    var currentStepInfo = computed(function () {
      return steps.value[innerCurrent.value];
    });
    var isPopup = computed(function () {
      return getCurrentCrossProps("mode") === "popup";
    });
    var currentElmIsFixed = computed(function () {
      return isFixed(currentHighlightLayerElm.value || document.body);
    });
    var getCurrentCrossProps = function getCurrentCrossProps(propsName) {
      var _currentStepInfo$valu;
      return (_currentStepInfo$valu = currentStepInfo.value[propsName]) !== null && _currentStepInfo$valu !== void 0 ? _currentStepInfo$valu : props2[propsName];
    };
    var setHighlightLayerPosition = function setHighlightLayerPosition(highlighLayer) {
      var _getRelativePosition = getRelativePosition(nextHighlightLayerElm.value, currentHighlightLayerElm.value),
        top = _getRelativePosition.top,
        left = _getRelativePosition.left;
      var _nextHighlightLayerEl = nextHighlightLayerElm.value.getBoundingClientRect(),
        width = _nextHighlightLayerEl.width,
        height = _nextHighlightLayerEl.height;
      var highlightPadding = getCurrentCrossProps("highlightPadding");
      if (isPopup.value) {
        width += highlightPadding * 2;
        height += highlightPadding * 2;
        top -= highlightPadding;
        left -= highlightPadding;
      } else {
        var _getWindowScroll = getWindowScroll(),
          scrollTop = _getWindowScroll.scrollTop,
          scrollLeft = _getWindowScroll.scrollLeft;
        top += scrollTop;
        left += scrollLeft;
      }
      setStyle(highlighLayer, {
        width: "".concat(width, "px"),
        height: "".concat(height, "px"),
        top: "".concat(top, "px"),
        left: "".concat(left, "px")
      });
    };
    var showPopupGuide = function showPopupGuide() {
      var currentElement = getTargetElm(currentStepInfo.value.element);
      nextHighlightLayerElm.value = currentElement;
      nextTick(function () {
        scrollToParentVisibleArea(nextHighlightLayerElm.value);
        setHighlightLayerPosition(highlightLayerRef.value);
        setHighlightLayerPosition(referenceLayerRef.value);
        scrollToElm(nextHighlightLayerElm.value);
        currentHighlightLayerElm.value = currentElement;
      });
    };
    var destroyTooltipElm = function destroyTooltipElm() {
      var _referenceLayerRef$va;
      (_referenceLayerRef$va = referenceLayerRef.value) === null || _referenceLayerRef$va === void 0 ? void 0 : _referenceLayerRef$va.parentNode.removeChild(referenceLayerRef.value);
    };
    var showDialogGuide = function showDialogGuide() {
      nextTick(function () {
        var currentElement = dialogTooltipRef.value;
        nextHighlightLayerElm.value = currentElement;
        scrollToParentVisibleArea(nextHighlightLayerElm.value);
        setHighlightLayerPosition(highlightLayerRef.value);
        scrollToElm(nextHighlightLayerElm.value);
        currentHighlightLayerElm.value = currentElement;
      });
    };
    var destroyDialogTooltipElm = function destroyDialogTooltipElm() {
      var _dialogTooltipRef$val, _dialogWrapperRef$val;
      (_dialogTooltipRef$val = dialogTooltipRef.value) === null || _dialogTooltipRef$val === void 0 ? void 0 : _dialogTooltipRef$val.parentNode.removeChild(dialogTooltipRef.value);
      (_dialogWrapperRef$val = dialogWrapperRef.value) === null || _dialogWrapperRef$val === void 0 ? void 0 : _dialogWrapperRef$val.parentNode.removeChild(dialogWrapperRef.value);
    };
    var showGuide = function showGuide() {
      if (isPopup.value) {
        destroyDialogTooltipElm();
        showPopupGuide();
      } else {
        destroyTooltipElm();
        showDialogGuide();
      }
    };
    var destroyGuide = function destroyGuide() {
      var _highlightLayerRef$va, _overlayLayerRef$valu;
      destroyTooltipElm();
      destroyDialogTooltipElm();
      (_highlightLayerRef$va = highlightLayerRef.value) === null || _highlightLayerRef$va === void 0 ? void 0 : _highlightLayerRef$va.parentNode.removeChild(highlightLayerRef.value);
      (_overlayLayerRef$valu = overlayLayerRef.value) === null || _overlayLayerRef$valu === void 0 ? void 0 : _overlayLayerRef$valu.parentNode.removeChild(overlayLayerRef.value);
      removeClass(document.body, LOCK_CLASS.value);
    };
    var handleSkip = function handleSkip(e) {
      var _props2$onSkip;
      var total = stepsTotal.value;
      actived.value = false;
      setInnerCurrent(-1, {
        e: e,
        total: total
      });
      (_props2$onSkip = props2.onSkip) === null || _props2$onSkip === void 0 ? void 0 : _props2$onSkip.call(props2, {
        e: e,
        current: -1,
        total: total
      });
    };
    var handlePrev = function handlePrev(e) {
      var _props2$onPrevStepCli;
      var total = stepsTotal.value;
      setInnerCurrent(innerCurrent.value - 1, {
        e: e,
        total: total
      });
      (_props2$onPrevStepCli = props2.onPrevStepClick) === null || _props2$onPrevStepCli === void 0 ? void 0 : _props2$onPrevStepCli.call(props2, {
        e: e,
        prev: innerCurrent.value - 1,
        current: innerCurrent.value,
        total: total
      });
    };
    var handleNext = function handleNext(e) {
      var _props2$onNextStepCli;
      var total = stepsTotal.value;
      setInnerCurrent(innerCurrent.value + 1, {
        e: e,
        total: total
      });
      (_props2$onNextStepCli = props2.onNextStepClick) === null || _props2$onNextStepCli === void 0 ? void 0 : _props2$onNextStepCli.call(props2, {
        e: e,
        next: innerCurrent.value + 1,
        current: innerCurrent.value,
        total: total
      });
    };
    var handleFinish = function handleFinish(e) {
      var _props2$onFinish;
      var total = stepsTotal.value;
      actived.value = false;
      setInnerCurrent(-1, {
        e: e,
        total: total
      });
      (_props2$onFinish = props2.onFinish) === null || _props2$onFinish === void 0 ? void 0 : _props2$onFinish.call(props2, {
        e: e,
        current: -1,
        total: total
      });
    };
    var initGuide = function initGuide() {
      if (innerCurrent.value >= 0 && innerCurrent.value < steps.value.length) {
        if (!actived.value) {
          actived.value = true;
          addClass(document.body, LOCK_CLASS.value);
        }
        showGuide();
      }
    };
    watch(innerCurrent, function (val) {
      if (val >= 0 && val < steps.value.length) {
        initGuide();
      } else {
        actived.value = false;
        destroyGuide();
      }
    });
    onMounted(function () {
      initGuide();
    });
    return function () {
      var renderOverlayLayer = function renderOverlayLayer() {
        return withDirectives(createVNode("div", {
          "ref": overlayLayerRef,
          "class": "".concat(COMPONENT_NAME.value, "__overlay"),
          "style": {
            zIndex: zIndex.value - 2
          }
        }, null), [[resolveDirective("transfer-dom"), "body"]]);
      };
      var renderHighlightLayer = function renderHighlightLayer() {
        var style = {
          zIndex: zIndex.value - 1
        };
        var highlightClass = ["".concat(COMPONENT_NAME.value, "__highlight"), "".concat(COMPONENT_NAME.value, "__highlight--").concat(isPopup.value ? "popup" : "dialog"), "".concat(COMPONENT_NAME.value, "--").concat(currentElmIsFixed.value && isPopup.value ? "fixed" : "absolute")];
        var showOverlay = getCurrentCrossProps("showOverlay");
        var maskClass = ["".concat(COMPONENT_NAME.value, "__highlight--").concat(showOverlay ? "mask" : "nomask")];
        var highlightContent = currentStepInfo.value.highlightContent;
        var showHighlightContent = highlightContent && isPopup.value;
        return withDirectives(createVNode("div", {
          "ref": highlightLayerRef,
          "class": highlightClass.concat(showHighlightContent ? highlightClass : maskClass),
          "style": style
        }, [showHighlightContent && createVNode(highlightContent, {
          "class": highlightClass.concat(maskClass),
          "style": style
        }, null)]), [[resolveDirective("transfer-dom"), "body"]]);
      };
      var renderCounter = function renderCounter() {
        var popupSlotCounter = renderTNodeJSX("counter", {
          params: {
            total: stepsTotal.value,
            current: innerCurrent.value
          }
        });
        var popupDefaultCounter = createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__counter")
        }, [popupSlotCounter || createVNode("span", null, [innerCurrent.value + 1, "/", stepsTotal.value])]);
        return createVNode(Fragment, null, [!hideCounter.value && popupDefaultCounter]);
      };
      var renderAction = function renderAction(mode) {
        var isLast = innerCurrent.value === stepsTotal.value - 1;
        var isFirst = innerCurrent.value === 0;
        var buttonSize = mode === "popup" ? "small" : "medium";
        return createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__action")
        }, [!hideSkip.value && !isLast && createVNode(Button, mergeProps({
          "class": "".concat(COMPONENT_NAME.value, "__skip"),
          "theme": "default",
          "size": buttonSize,
          "variant": "base",
          "onClick": handleSkip
        }, getCurrentCrossProps("skipButtonProps")), null), !hidePrev.value && !isFirst && createVNode(Button, mergeProps({
          "class": "".concat(COMPONENT_NAME.value, "__prev"),
          "theme": "primary",
          "size": buttonSize,
          "variant": "base",
          "onClick": handlePrev
        }, getCurrentCrossProps("prevButtonProps")), null), !isLast && createVNode(Button, mergeProps({
          "class": "".concat(COMPONENT_NAME.value, "__next"),
          "theme": "primary",
          "size": buttonSize,
          "variant": "base",
          "onClick": handleNext
        }, getCurrentCrossProps("nextButtonProps")), null), isLast && createVNode(Button, mergeProps({
          "class": "".concat(COMPONENT_NAME.value, "__finish"),
          "theme": "primary",
          "size": buttonSize,
          "variant": "base",
          "onClick": handleFinish
        }, props2.finishButtonProps), null)]);
      };
      var renderTooltipBody = function renderTooltipBody() {
        var title = createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__title")
        }, [currentStepInfo.value.title]);
        var descBody = currentStepInfo.value.body;
        var renderDesc;
        if (typeof descBody === "string") {
          renderDesc = descBody;
        } else {
          renderDesc = createVNode(descBody, null, null);
        }
        var desc = createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__desc")
        }, [typeof descBody === "string" ? descBody : createVNode(descBody, null, null)]);
        return createVNode(Fragment, null, [title, desc]);
      };
      var renderPopupContent = function renderPopupContent() {
        var footerClasses = ["".concat(COMPONENT_NAME.value, "__footer"), "".concat(COMPONENT_NAME.value, "__footer--popup")];
        var action = createVNode("div", {
          "class": footerClasses
        }, [renderCounter(), renderAction("popup")]);
        return createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__tooltip")
        }, [renderTooltipBody(), action]);
      };
      var renderPopupGuide = function renderPopupGuide() {
        var content = currentStepInfo.value.content;
        var renderBody;
        if (content) {
          var contentProps = {
            handlePrev: handlePrev,
            handleNext: handleNext,
            handleSkip: handleSkip,
            handleFinish: handleFinish,
            current: innerCurrent.value,
            total: stepsTotal.value
          };
          renderBody = function renderBody() {
            return createVNode(content, contentProps, null);
          };
        } else {
          renderBody = renderPopupContent;
        }
        var classes = ["".concat(COMPONENT_NAME.value, "__reference"), "".concat(COMPONENT_NAME.value, "--").concat(currentElmIsFixed.value ? "fixed" : "absolute")];
        return createVNode(Popup, {
          "visible": true,
          "show-arrow": !content,
          "zIndex": zIndex.value,
          "overlayClassName": currentStepInfo.value.stepOverlayClass,
          "overlayInnerClassName": _defineProperty({}, "".concat(COMPONENT_NAME.value, "__popup--content"), !!content),
          "placement": currentStepInfo.value.placement
        }, {
          "default": function _default() {
            return [withDirectives(createVNode("div", {
              "ref": referenceLayerRef,
              "class": classes
            }, null), [[resolveDirective("transfer-dom"), "body"]])];
          },
          content: renderBody
        });
      };
      var renderDialogGuide = function renderDialogGuide() {
        var _ref3;
        var style = {
          zIndex: zIndex.value
        };
        var wrapperClasses = ["".concat(COMPONENT_NAME.value, "__wrapper"), _defineProperty({}, "".concat(COMPONENT_NAME.value, "__wrapper--center"), currentStepInfo.value.placement === "center")];
        var dialogClasses = ["".concat(COMPONENT_NAME.value, "__reference"), "".concat(COMPONENT_NAME.value, "--absolute"), "".concat(COMPONENT_NAME.value, "__dialog"), (_ref3 = {}, _defineProperty(_ref3, "".concat(COMPONENT_NAME.value, "__dialog--nomask"), !getCurrentCrossProps("showOverlay")), _defineProperty(_ref3, currentStepInfo.value.stepOverlayClass, !!currentStepInfo.value.stepOverlayClass), _ref3)];
        var footerClasses = ["".concat(COMPONENT_NAME.value, "__footer"), "".concat(COMPONENT_NAME.value, "__footer--popup")];
        return createVNode(Fragment, null, [withDirectives(createVNode("div", {
          "ref": dialogWrapperRef,
          "class": wrapperClasses,
          "style": style
        }, [createVNode("div", {
          "ref": dialogTooltipRef,
          "class": dialogClasses
        }, [renderTooltipBody(), createVNode("div", {
          "class": footerClasses
        }, [renderCounter(), renderAction("dialog")])])]), [[resolveDirective("transfer-dom"), "body"]])]);
      };
      var renderGuide = function renderGuide() {
        return createVNode(Fragment, null, [renderOverlayLayer(), renderHighlightLayer(), isPopup.value ? renderPopupGuide() : renderDialogGuide()]);
      };
      return createVNode(Fragment, null, [actived.value && renderGuide()]);
    };
  }
});

export { _Guide as default };
//# sourceMappingURL=guide.js.map
