{"version":3,"file":"main.mjs","sources":["../../../../node_modules/@babel/runtime/helpers/esm/toArray.js","../../../../src/_common/js/upload/main.ts"],"sourcesContent":["import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","/* eslint-disable no-param-reassign */\nimport { isOverSizeLimit } from './utils';\nimport xhr from './xhr';\nimport log from '../log/log';\nimport {\n  UploadFile,\n  SizeLimitObj,\n  FileChangeParams,\n  FileChangeReturn,\n  RequestMethodResponse,\n  HandleUploadParams,\n  SuccessContext,\n  handleSuccessParams,\n  UploadTriggerUploadText,\n} from './types';\n\nexport interface BeforeUploadExtra {\n  /** 图片文件大小限制 */\n  sizeLimit?: number | SizeLimitObj;\n  /** 上传文件之前的钩子，参数为上传的文件，返回值决定是否上传 */\n  beforeUpload?: (file: UploadFile) => boolean | Promise<boolean>;\n}\n\nexport type BeforeUploadPromiseList = [Promise<SizeLimitObj>, undefined | Promise<boolean>]\n\nexport function handleBeforeUpload(\n  file: UploadFile, params: BeforeUploadExtra,\n): Promise<[SizeLimitObj, boolean]> {\n  const { sizeLimit, beforeUpload } = params;\n  // 文件大小校验\n  const sizePromise = new Promise<SizeLimitObj>((resolve) => {\n    let result: SizeLimitObj = null;\n    if (sizeLimit) {\n      const sizeLimitObj: SizeLimitObj = typeof sizeLimit === 'number'\n        ? { size: sizeLimit, unit: 'KB' }\n        : sizeLimit;\n      const limit = isOverSizeLimit(file.size, sizeLimitObj.size, sizeLimitObj.unit);\n      if (limit) {\n        result = sizeLimitObj;\n      }\n    }\n    resolve(result);\n  });\n\n  // 自定义校验\n  const promiseList: BeforeUploadPromiseList = [sizePromise, undefined];\n  if (typeof beforeUpload === 'function') {\n    const r = beforeUpload(file);\n    const p = r instanceof Promise ? r : (new Promise<boolean>((resolve) => resolve(r)));\n    promiseList[1] = p;\n  }\n\n  // 同时进行文件大小校验和自定义校验函数\n  return new Promise((resolve) => {\n    Promise.all(promiseList).then((r) => {\n      resolve(r);\n    });\n  });\n}\n\nexport interface OnErrorParams {\n  event?: ProgressEvent;\n  files?: UploadFile[];\n  response?: any;\n  formatResponse?: HandleUploadParams['formatResponse'];\n}\n\nexport function handleError(options: OnErrorParams) {\n  const { event, files, response, formatResponse } = options;\n  files.forEach((file) => {\n    file.status = 'fail';\n  });\n  let res = response;\n  if (typeof formatResponse === 'function') {\n    res = formatResponse(response, { file: files[0], currentFiles: files });\n  }\n  return { response: res, event, files };\n}\n\nexport function handleSuccess(params: handleSuccessParams) {\n  const { event, files, response } = params;\n  if (files?.length <= 0) {\n    log.error('Upload', 'Empty File in Success Callback');\n  }\n  files.forEach((file) => {\n    file.percent = 100;\n    file.status = 'success';\n    delete file.response?.error;\n  });\n  const res = response;\n  files[0].url = res.url || files[0].url;\n  return { response: res, event, files };\n}\n\nexport type UploadRequestReturn = {\n  status?: 'fail' | 'success';\n  /** 上传失败的文件，需等待继续上传 */\n  failedFiles?: UploadFile[];\n  data?: SuccessContext;\n  /** 批量文件上传，一个文件一个请求的场景下，响应结果的列表 */\n  list?: UploadRequestReturn[];\n}\n\nexport function handleRequestMethodResponse(res: RequestMethodResponse) {\n  if (!res) {\n    log.error('Upload', '`requestMethodResponse` is required.');\n    return false;\n  }\n  if (!res.status) {\n    log.error('Upload', '`requestMethodResponse.status` is missing, which value only can be `success` or `fail`');\n    return false;\n  }\n  if (!['success', 'fail'].includes(res.status)) {\n    log.error('Upload', '`requestMethodResponse.status` must be `success` or `fail`, examples `{ status: \\'success\\', response: { url: \\'\\' } }`');\n    return false;\n  }\n  if (res.status === 'success' && (!res.response || !res.response.url)) {\n    log.warn('Upload', '`requestMethodResponse.response.url` is required as `status` is `success`');\n  }\n  return true;\n}\n\n/**\n * 一次上传请求的返回结果\n */\nexport function uploadOneRequest(params: HandleUploadParams): Promise<UploadRequestReturn> {\n  const { action, toUploadFiles, requestMethod } = params;\n  return new Promise<UploadRequestReturn>((resolve) => {\n    if (!action && !requestMethod) {\n      log.error('Upload', 'one of action and requestMethod must be exist.');\n      resolve({});\n      return;\n    }\n    if (!toUploadFiles || !toUploadFiles.length) {\n      log.warn('Upload', 'No files need to be uploaded');\n      resolve({});\n      return;\n    }\n    toUploadFiles.forEach((file) => {\n      file.status = 'progress';\n    });\n    // 自定义上传方法\n    if (requestMethod) {\n      requestMethod(params.multiple ? toUploadFiles : toUploadFiles[0]).then((res) => {\n        if (!handleRequestMethodResponse(res)) {\n          resolve({});\n          return;\n        }\n        let { response } = res;\n        if (res.status === 'fail') {\n          response = response || {};\n          response.error = res.error || response.error;\n        }\n        toUploadFiles.forEach((file) => {\n          file.status = res.status;\n          file.response = response;\n          file.url = response.url;\n        });\n        const result = { response, file: toUploadFiles[0], files: toUploadFiles };\n        if (res.status === 'success') {\n          params.onResponseSuccess?.(result);\n        } else if (res.status === 'fail') {\n          params.onResponseError?.(result);\n        }\n        resolve({\n          status: res.status,\n          data: result,\n        });\n      });\n    } else {\n      const xhrReq = xhr({\n        action: params.action,\n        files: params.toUploadFiles,\n        useMockProgress: params.useMockProgress,\n        onError: (p: OnErrorParams) => {\n          const r = handleError({ ...p, formatResponse: params.formatResponse });\n          params.onResponseError?.(r);\n          resolve({ status: 'fail', data: r });\n        },\n        onProgress: params.onResponseProgress,\n        onSuccess: (p: SuccessContext) => {\n          const { formatResponse } = params;\n          let res = p.response;\n          if (typeof formatResponse === 'function') {\n            res = formatResponse(p.response, {\n              file: p.file,\n              currentFiles: p.files,\n            });\n          }\n          if (res.error) {\n            const r = handleError({ ...p, response: res });\n            params.onResponseError?.(r);\n            resolve({ status: 'fail', data: r });\n          } else {\n            p.file.response = res;\n            p.files[0].response = res;\n            const r = handleSuccess({ ...p, response: res });\n            params.onResponseSuccess?.(r);\n            resolve({ status: 'success', data: r });\n          }\n        },\n        formatRequest: params.formatRequest,\n        data: params.data,\n        name: params.name,\n        headers: params.headers,\n        withCredentials: params.withCredentials,\n        method: params.method,\n      });\n      params.setXhrObject?.({\n        files: params.toUploadFiles,\n        xhrReq,\n      });\n    }\n  });\n}\n\n/**\n * 可能单个文件上传，也可能批量文件一次性上传\n * 返回上传成功或上传失败的文件列表\n */\nexport function upload(params: HandleUploadParams):\nPromise<UploadRequestReturn> {\n  const { uploadAllFilesInOneRequest, toUploadFiles, uploadedFiles, isBatchUpload } = params;\n  // 一批文件上传，部分文件失败，重新上传失败的文件\n  const thisUploadFiles = toUploadFiles.filter((t) => (\n    !t.response || (t.response && !t.response.error)\n  ));\n  return new Promise((resolve) => {\n    // 所有文件一次性上传\n    if (uploadAllFilesInOneRequest || !params.multiple) {\n      uploadOneRequest(params).then((r) => {\n        if (r.status === 'success') {\n          r.data.files = isBatchUpload || !params.multiple\n            ? r.data.files\n            : uploadedFiles.concat(r.data.files);\n        }\n        const failedFiles = r.status === 'fail' ? r.data.files : [];\n        resolve({ ...r, failedFiles });\n      });\n      return;\n    }\n    // 一个文件一个文件上传\n    const list = thisUploadFiles.map((file) => (\n      uploadOneRequest({ ...params, toUploadFiles: [file] })\n    ));\n    Promise.all(list).then((arr) => {\n      const files: UploadFile[] = [];\n      const failedFiles: UploadFile[] = [];\n      arr.forEach((one) => {\n        if (one.status === 'success') {\n          files.push(one.data.files[0]);\n        } else if (one.status === 'fail') {\n          failedFiles.push(one.data.files[0]);\n        }\n      });\n      const tFiles = params.autoUpload\n        ? uploadedFiles.concat(files)\n        : uploadedFiles;\n      const newFiles = isBatchUpload || !params.multiple ? files : tFiles;\n      resolve({\n        status: files.length ? 'success' : 'fail',\n        data: {\n          files: newFiles,\n        },\n        // 上传失败的文件，需等待继续上传\n        failedFiles,\n        list: arr,\n      });\n    });\n  });\n}\n\nexport function formatToUploadFile(\n  tmpFiles: File[],\n  format: FileChangeParams['format'],\n  autoUpload: boolean,\n) {\n  return tmpFiles.map((fileRaw: File) => {\n    let file: UploadFile = fileRaw;\n    if (typeof format === 'function') {\n      file = format(fileRaw);\n    }\n    const uploadFile: UploadFile = {\n      raw: fileRaw,\n      lastModified: fileRaw.lastModified,\n      name: fileRaw.name,\n      size: fileRaw.size,\n      type: fileRaw.type,\n      percent: 0,\n      status: autoUpload ? 'progress' : 'waiting',\n      ...file,\n    };\n    return uploadFile;\n  });\n}\n\nexport function validateFile(\n  params: FileChangeParams\n): Promise<FileChangeReturn> {\n  const { files, uploadValue, max, allowUploadDuplicateFile } = params;\n  return new Promise((resolve) => {\n    // 是否允许相同的文件名存在\n    let tmpFiles = files.filter((file) => {\n      const sameNameFile = uploadValue.find((t) => t.name === file.name);\n      return allowUploadDuplicateFile || !sameNameFile;\n    });\n\n    let hasSameNameFile = false;\n    if (tmpFiles.length < files.length) {\n      hasSameNameFile = true;\n    }\n    if (!tmpFiles.length) {\n      const tFiles = formatToUploadFile(files, params.format, params.autoUpload);\n      resolve({ hasSameNameFile, file: tFiles?.[0], files: tFiles, validateResult: { type: 'FILTER_FILE_SAME_NAME' } });\n      return;\n    }\n\n    // 上传文件数量限制\n    let lengthOverLimit = false;\n    if (max && tmpFiles.length && !params.isBatchUpload) {\n      tmpFiles = tmpFiles.slice(0, max - uploadValue.length);\n      if (tmpFiles.length !== files.length) {\n        lengthOverLimit = true;\n      }\n    }\n\n    // 格式化文件对象\n    const formattedFiles = formatToUploadFile(tmpFiles, params.format, params.autoUpload);\n\n    // 全量文件，一波校验，整体上传 或 终止上传\n    let allFileValidatePromise;\n    if (params.beforeAllFilesUpload) {\n      const r = params.beforeAllFilesUpload?.(formattedFiles);\n      allFileValidatePromise = r instanceof Promise ? r : new Promise((resolve) => resolve(r));\n    }\n\n    // 单文件合法性校验，一个文件校验不通过其他文件可继续上传\n    const promiseList = formattedFiles.map((file: UploadFile) => new Promise((resolve) => {\n      handleBeforeUpload(\n        file,\n        { beforeUpload: params.beforeUpload, sizeLimit: params.sizeLimit },\n      ).then(([sizeResult, customResult]) => {\n        if (sizeResult) {\n          resolve({ file, validateResult: { type: 'FILE_OVER_SIZE_LIMIT', extra: sizeResult } });\n        } else if (customResult === false) {\n          resolve({ file, validateResult: { type: 'CUSTOM_BEFORE_UPLOAD' } });\n        }\n        resolve({ file });\n      });\n    }));\n    Promise.all([allFileValidatePromise].concat(promiseList)).then((results) => {\n      const [allFilesResult, ...others] = results;\n      if (allFilesResult === false) {\n        resolve({\n          lengthOverLimit,\n          hasSameNameFile,\n          validateResult: { type: 'BEFORE_ALL_FILES_UPLOAD' },\n          files: formattedFiles,\n        });\n      } else {\n        resolve({\n          lengthOverLimit,\n          hasSameNameFile,\n          fileValidateList: others,\n          files: formattedFiles,\n        });\n      }\n    });\n  });\n}\n\nexport function getFilesAndErrors(fileValidateList: FileChangeReturn[], getError: (p: {[key: string]: any }) => string) {\n  const sizeLimitErrors: FileChangeReturn[] = [];\n  const toFiles: UploadFile[] = [];\n  fileValidateList.forEach((oneFile) => {\n    if (oneFile.validateResult?.type === 'CUSTOM_BEFORE_UPLOAD') return;\n    if (oneFile.validateResult?.type === 'FILE_OVER_SIZE_LIMIT') {\n      if (!oneFile.file.response) {\n        oneFile.file.response = {};\n      }\n      oneFile.file.response.error = oneFile.file.response.error\n      || getError(oneFile.validateResult.extra);\n      sizeLimitErrors.push(oneFile);\n      return;\n    }\n    toFiles.push(oneFile.file);\n  });\n\n  return { sizeLimitErrors, toFiles };\n}\n\n/**\n * 获取文件上传触发元素文本 在全局配置中的字段\n */\nexport function getTriggerTextField(p: {\n  status: 'success' | 'fail' | 'progress' | 'waiting',\n  multiple: boolean,\n  autoUpload: boolean;\n  isBatchUpload: boolean;\n}): keyof UploadTriggerUploadText {\n  if (p.isBatchUpload && p.status) return 'reupload';\n  if (p.status === 'fail') return 'reupload';\n  if (p.status === 'progress') return 'uploading';\n  if (p.status === 'success' || (!p.autoUpload && p.status === 'waiting')) {\n    return p.multiple ? 'continueUpload' : 'reupload';\n  }\n  return 'fileInput';\n}\n\nexport interface GetDisplayFilesParams {\n  multiple: boolean;\n  autoUpload: boolean;\n  isBatchUpload: boolean;\n  uploadValue: UploadFile[];\n  toUploadFiles: UploadFile[];\n}\n\n/**\n * 获取文件列表显示\n */\nexport function getDisplayFiles(params: GetDisplayFilesParams) {\n  const { multiple, uploadValue, toUploadFiles, autoUpload } = params;\n  const waitingUploadFiles = autoUpload\n    ? toUploadFiles\n    : toUploadFiles.filter((file) => file.status !== 'success');\n  if (multiple && !params.isBatchUpload) {\n    if (!autoUpload) return uploadValue;\n    return (waitingUploadFiles.length ? uploadValue.concat(waitingUploadFiles) : uploadValue) || [];\n  }\n  return (waitingUploadFiles.length ? waitingUploadFiles : uploadValue) || [];\n}\n"],"names":["_toArray","arr","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","handleBeforeUpload","file","params","sizeLimit","beforeUpload","sizePromise","Promise","resolve","result","sizeLimitObj","size","unit","limit","isOverSizeLimit","promiseList","r","p","all","then","handleError","options","event","files","response","formatResponse","forEach","status","res","currentFiles","handleSuccess","length","log","error","percent","url","handleRequestMethodResponse","includes","warn","uploadOneRequest","action","toUploadFiles","requestMethod","multiple","onResponseSuccess","onResponseError","data","xhrReq","xhr","useMockProgress","onError","onProgress","onResponseProgress","onSuccess","formatRequest","name","headers","withCredentials","method","setXhrObject","upload","uploadAllFilesInOneRequest","uploadedFiles","isBatchUpload","thisUploadFiles","filter","t","concat","failedFiles","list","map","one","push","tFiles","autoUpload","newFiles","formatToUploadFile","tmpFiles","format","fileRaw","uploadFile","raw","lastModified","type","validateFile","uploadValue","max","allowUploadDuplicateFile","sameNameFile","find","hasSameNameFile","validateResult","lengthOverLimit","slice","formattedFiles","allFileValidatePromise","beforeAllFilesUpload","sizeResult","customResult","extra","results","allFilesResult","others","fileValidateList","getFilesAndErrors","getError","sizeLimitErrors","toFiles","oneFile","getTriggerTextField","getDisplayFiles","waitingUploadFiles"],"mappings":"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"}