{"version":3,"file":"format.mjs","sources":["../../../../src/_common/js/date-picker/format.ts"],"sourcesContent":["import dayjs from 'dayjs';\nimport { extractTimeFormat } from './utils';\nimport log from '../log';\n\ntype DateValue = string | number | Date;\n\nexport const TIME_FORMAT = 'HH:mm:ss';\n\n// 统一解析日期格式字符串成 Dayjs 对象\nexport function parseToDayjs(\n  value: string | Date | number,\n  format: string,\n  timeOfDay?: string\n) {\n  if (value === '') return dayjs();\n\n  let dateText = value;\n  // format week\n  if (/[w|W]/g.test(format)) {\n    if (typeof dateText !== 'string') {\n      dateText = dayjs(dateText).format(format) as string;\n    }\n\n    const yearStr = dateText.split(/[-/.\\s]/)[0];\n    const weekStr = dateText.split(/[-/.\\s]/)[1];\n    const weekFormatStr = format.split(/[-/.\\s]/)[1];\n    const firstWeek = dayjs(yearStr, 'YYYY').startOf('year');\n    for (let i = 0; i <= 52; i += 1) {\n      let nextWeek = firstWeek.add(i, 'week');\n      // 重置为周的第一天\n      if (timeOfDay === 'start') nextWeek = nextWeek.subtract(5, 'day');\n      if (nextWeek.format(weekFormatStr) === weekStr) {\n        return nextWeek;\n      }\n    }\n  }\n\n  // format quarter\n  if (/Q/g.test(format)) {\n    if (typeof dateText !== 'string') {\n      dateText = dayjs(dateText).format(format) as string;\n    }\n\n    const yearStr = dateText.split(/[-/.\\s]/)[0];\n    const quarterStr = dateText.split(/[-/.\\s]/)[1];\n    const quarterFormatStr = format.split(/[-/.\\s]/)[1];\n    const firstQuarter = dayjs(yearStr, 'YYYY').startOf('year');\n    for (let i = 0; i < 4; i += 1) {\n      const nextQuarter = firstQuarter.add(i, 'quarter');\n      if (nextQuarter.format(quarterFormatStr) === quarterStr) {\n        return nextQuarter;\n      }\n    }\n  }\n\n  // 兼容数据格式不标准场景 YYYY-MM-D\n  const result = dayjs(dateText, format).isValid()\n    ? dayjs(dateText, format)\n    : dayjs(dateText);\n\n  // 兼容数据异常情况\n  if (!result.isValid()) {\n    log.error('DatePicker', `Check whether the format、value format is valid.\\n value: '${value}', format: '${format}'`);\n    return dayjs();\n  }\n\n  return result;\n}\n\n// 格式化 range\nfunction formatRange({\n  newDate,\n  format,\n  targetFormat,\n  autoSwap,\n}: {\n  newDate: any;\n  format: string;\n  targetFormat?: string;\n  autoSwap?: boolean;\n}) {\n  if (!newDate || !Array.isArray(newDate)) return [];\n\n  let dayjsDateList = newDate.map((d) => d && parseToDayjs(d, format));\n\n  // 保证后面的时间大于前面的时间\n  if (\n    autoSwap\n    && dayjsDateList[0]\n    && dayjsDateList[1]\n    && dayjsDateList[0].toDate().getTime() > dayjsDateList[1].toDate().getTime()\n  ) {\n    // 数据兼容规则\n    dayjsDateList = [dayjsDateList[1], dayjsDateList[0]];\n  }\n\n  // 格式化失败提示\n  if (dayjsDateList.some((r) => r && !r.isValid())) {\n    log.error(\n      'DatePicker',\n      `Check whether the value、format、valueType format is valid.\\nformat: '${format}' value: '${newDate}' valueType: '${targetFormat}'`\n    );\n    return [];\n  }\n\n  // valueType = 'time-stamp' 返回时间戳\n  if (targetFormat === 'time-stamp') return dayjsDateList.map((da) => da && da.toDate().getTime());\n  // valueType = 'Date' 返回时间对象\n  if (targetFormat === 'Date') return dayjsDateList.map((da) => da && da.toDate());\n\n  return dayjsDateList.map((da) => da && da.format(targetFormat || format));\n}\n\n// 格式化单选\nfunction formatSingle({\n  newDate,\n  format,\n  targetFormat,\n}: {\n  newDate: any;\n  format: string;\n  targetFormat?: string;\n}) {\n  if (!newDate) return '';\n\n  const dayJsDate = parseToDayjs(newDate, format);\n\n  // 格式化失败提示\n  if (!dayJsDate.isValid()) {\n    log.error(\n      'DatePicker',\n      `Check whether the format、value format is valid.\\nformat: '${format}' value: '${newDate}'`\n    );\n    return '';\n  }\n\n  // valueType = 'time-stamp' 返回时间戳\n  if (targetFormat === 'time-stamp') return dayJsDate.toDate().getTime();\n  // valueType = 'Date' 返回时间对象\n  if (targetFormat === 'Date') return dayJsDate.toDate();\n\n  return dayJsDate.format(targetFormat || format);\n}\n\n// 检测日期是否合法\nexport function isValidDate(value: DateValue | DateValue[], format: string) {\n  if (Array.isArray(value)) {\n    return value.every((v) => dayjs(v, format).isValid() || dayjs(v).isValid());\n  }\n\n  return dayjs(value, format).isValid() || dayjs(value).isValid();\n}\n\n// 日期格式化\nexport function formatDate(\n  newDate: DateValue | DateValue[],\n  {\n    format,\n    targetFormat,\n    autoSwap,\n  }: { format: string; targetFormat?: string; autoSwap?: boolean }\n) {\n  let result;\n\n  if (Array.isArray(newDate)) {\n    result = formatRange({ newDate, format, targetFormat, autoSwap });\n  } else {\n    result = formatSingle({ newDate, format, targetFormat });\n  }\n\n  return result;\n}\n\n// 格式化时间\nexport function formatTime(value: DateValue | DateValue[], timeFormat: string) {\n  let result;\n\n  if (Array.isArray(value)) {\n    result = value.map((v) => dayjs(v || new Date(new Date().setHours(0, 0, 0, 0))).format(timeFormat));\n  } else {\n    result = dayjs((value || new Date(new Date().setHours(0, 0, 0, 0)))).format(timeFormat);\n  }\n\n  return result;\n}\n\n// 根据不同 mode 给出格式化默认值\nexport function getDefaultFormat({\n  mode = 'date',\n  format,\n  valueType,\n  enableTimePicker,\n}: {\n  mode?: string;\n  format?: string;\n  valueType?: string;\n  enableTimePicker?: boolean;\n}) {\n  if (mode === 'year') {\n    return {\n      format: format || 'YYYY',\n      valueType: valueType || format || 'YYYY',\n      timeFormat: TIME_FORMAT,\n    };\n  }\n  if (mode === 'month') {\n    return {\n      format: format || 'YYYY-MM',\n      valueType: valueType || format || 'YYYY-MM',\n      timeFormat: TIME_FORMAT,\n    };\n  }\n  if (mode === 'quarter') {\n    return {\n      format: format || 'YYYY-[Q]Q',\n      valueType: valueType || format || 'YYYY-[Q]Q',\n      timeFormat: TIME_FORMAT,\n    };\n  }\n  if (mode === 'week') {\n    return {\n      format: format || 'YYYY-wo',\n      valueType: valueType || format || 'YYYY-wo',\n      timeFormat: TIME_FORMAT,\n    };\n  }\n  if (mode === 'date') {\n    return {\n      format: format || `YYYY-MM-DD${enableTimePicker ? ' HH:mm:ss' : ''}`,\n      valueType: valueType || format || `YYYY-MM-DD${enableTimePicker ? ' HH:mm:ss' : ''}`,\n      timeFormat: extractTimeFormat(format || `YYYY-MM-DD${enableTimePicker ? ' HH:mm:ss' : ''}`) || TIME_FORMAT,\n    };\n  }\n  log.error('DatePicker', `Invalid mode: ${mode}`);\n  return {};\n}\n"],"names":["TIME_FORMAT","parseToDayjs","value","format","timeOfDay","dayjs","dateText","test","yearStr","split","weekStr","weekFormatStr","firstWeek","startOf","i","nextWeek","add","subtract","quarterStr","quarterFormatStr","firstQuarter","nextQuarter","result","isValid","log","error","formatRange","newDate","targetFormat","autoSwap","Array","isArray","dayjsDateList","map","d","toDate","getTime","some","r","da","formatSingle","dayJsDate","isValidDate","every","v","formatDate","formatTime","timeFormat","Date","setHours","getDefaultFormat","mode","valueType","enableTimePicker","extractTimeFormat"],"mappings":"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"}