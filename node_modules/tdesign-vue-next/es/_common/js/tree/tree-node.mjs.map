{"version":3,"file":"tree-node.mjs","sources":["../../../../node_modules/lodash/uniqueId.js","../../../../src/_common/js/tree/tree-node.ts"],"sourcesContent":["var toString = require('./toString');\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nmodule.exports = uniqueId;\n","import uniqueId from 'lodash/uniqueId';\nimport isNil from 'lodash/isNil';\nimport get from 'lodash/get';\nimport { TreeStore } from './tree-store';\nimport {\n  TreeNodeValue,\n  TreeNodeState,\n  TypeIdMap,\n  TypeTreeItem,\n  TypeSettingOptions,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n} from './types';\nimport {\n  createNodeModel,\n  updateNodeModel,\n} from './tree-node-model';\n\nconst { hasOwnProperty } = Object.prototype;\n\nconst defaultStatus = {\n  expandMutex: false,\n  activable: false,\n  checkable: false,\n  disabled: false,\n  draggable: false,\n  loading: false,\n};\n\n// vm 开头为视图属性，不可以外部设置\n// 用于触发视图更新\nexport class TreeNode {\n  // 节点隶属的树实例\n  public tree: TreeStore;\n\n  // 节点 id ，唯一标志\n  public value: string;\n\n  // 节点文本\n  public label: string;\n\n  // 节点数据\n  public data: TypeTreeNodeData;\n\n  // 父节点\n  public parent: TreeNode;\n\n  // 子节点列表\n  public children: TreeNode[] | boolean;\n\n  // 暴露的 treeNodeModel，这个对象的属性和 api 提供给用户使用\n  public model: TypeTreeNodeModel;\n\n  // 是否为叶节点\n  public vmIsLeaf: boolean;\n\n  // 是否为子节点中的第一个\n  public vmIsFirst: boolean;\n\n  // 是否为子节点中的最后\n  public vmIsLast: boolean;\n\n  // 节点是否是经过过滤剩下的\n  public vmIsRest: boolean;\n\n  // 节点是否展示为锁定状态\n  public vmIsLocked: boolean;\n\n  // 节点在视图上实际的展开状态\n  public expanded: boolean;\n\n  // 展开时是否收起同级节点，对子节点生效\n  public expandMutex: boolean;\n\n  // 节点在视图上实际的激活状态\n  public actived: boolean;\n\n  // 是否可激活\n  public activable: boolean;\n\n  // 是否可选中\n  public checkable: boolean;\n\n  // 是否可选中的视图呈现\n  public vmCheckable: boolean;\n\n  // 节点在视图上实际的选中态\n  public checked: boolean;\n\n  // 节点实际是否为半选状态\n  public indeterminate: boolean;\n\n  // 节点是否已禁用\n  public disabled: boolean;\n\n  // 节点是否可拖动\n  public draggable: boolean;\n\n  // 节点是否可视\n  public visible: boolean;\n\n  // 节点在树中的层级\n  public level: number;\n\n  // 节点是否正在加载数据\n  public loading: boolean;\n\n  public constructor(\n    tree: TreeStore,\n    data?: TypeTreeNodeData,\n    parent?: TreeNode,\n  ) {\n    this.data = data;\n    this.tree = tree;\n\n    const config = tree.config || {};\n    const prefix = config.prefix || 't';\n    const keys = get(tree, 'config.keys') || {};\n    const propChildren = keys.children || 'children';\n    const propLabel = keys.label || 'label';\n    const propValue = keys.value || 'value';\n\n    this.model = null;\n    this.children = null;\n    this.vmCheckable = false;\n    this.vmIsLeaf = false;\n    this.vmIsFirst = false;\n    this.vmIsLast = false;\n    this.vmIsRest = true;\n    this.vmIsLocked = false;\n\n    const spec = {\n      ...defaultStatus,\n      actived: false,\n      expanded: false,\n      checked: false,\n      ...data,\n    };\n    const children = spec[propChildren];\n\n    this.set(spec);\n    this.label = spec[propLabel] || '';\n    this.value = isNil(spec[propValue]) ? uniqueId(prefix) : spec[propValue];\n    this.tree.nodeMap.set(this.value, this);\n\n    if (parent && parent instanceof TreeNode) {\n      this.parent = parent;\n    } else {\n      this.parent = null;\n    }\n\n    // 子节点为 true 的状态逻辑需要放到状态计算之前\n    // 初始化加载逻辑需要依据这个来进行\n    if (children === true) {\n      this.children = children;\n    }\n\n    // 初始化状态计算\n    this.level = 0;\n    this.visible = true;\n\n    this.actived = spec.actived;\n    this.initActived();\n\n    this.expanded = spec.expanded;\n    this.initExpanded();\n\n    this.checked = spec.checked;\n    this.initChecked();\n\n    this.update();\n    tree.reflow(this);\n\n    // 这里的子节点加载逻辑不能放到状态计算之前\n    // 因为子节点状态计算依赖父节点状态\n    if (Array.isArray(children)) {\n      this.append(children);\n    } else if (children === true && !config.lazy) {\n      this.loadChildren();\n    }\n\n    // checked 状态依赖于子节点状态\n    // 因此初始化状态放到子节点插入之后\n    this.checked = false;\n    this.indeterminate = false;\n    this.updateChecked();\n  }\n\n  /* ------ 状态初始化 ------ */\n\n  // 初始化选中态\n  public initChecked() {\n    const { tree, value, parent } = this;\n    const { checkStrictly } = tree.config;\n    let { checked } = this;\n    checked = parent?.isChecked();\n    if (checked && !checkStrictly) {\n      tree.checkedMap.set(value, true);\n    }\n    this.checked = checked;\n  }\n\n  // 初始化节点展开状态\n  public initExpanded(): void {\n    const { tree } = this;\n    let { expanded } = this;\n    const { config } = tree;\n    if (\n      typeof config.expandLevel === 'number'\n      && this.getLevel() < config.expandLevel\n    ) {\n      tree.expandedMap.set(this.value, true);\n      expanded = true;\n    }\n    if (config.expandAll) {\n      expanded = true;\n    }\n    if (this.children === true && config.lazy) {\n      expanded = false;\n    }\n    if (expanded) {\n      tree.expandedMap.set(this.value, true);\n    } else {\n      tree.expandedMap.delete(this.value);\n    }\n    this.expanded = expanded;\n  }\n\n  // 初始化高亮状态\n  public initActived(): void {\n    const { tree, actived } = this;\n    if (actived) {\n      tree.activedMap.set(this.value, true);\n    }\n  }\n\n  /* ------ 节点操作 ------ */\n\n  // 追加数据\n  public append(data: TypeTreeNodeData | TypeTreeNodeData[]): void {\n    const list = [];\n    if (!Array.isArray(data)) {\n      list.push(data);\n    } else {\n      list.push(...data);\n    }\n    if (list.length <= 0) {\n      return;\n    }\n    if (!Array.isArray(this.children)) {\n      this.children = [];\n    }\n    const { children, tree } = this;\n    list.forEach((item) => {\n      let node = null;\n      if (item instanceof TreeNode) {\n        node = item;\n        node.appendTo(this.tree, this);\n      } else {\n        node = new TreeNode(this.tree, item, this);\n        children.push(node);\n      }\n    });\n    tree.reflow(this);\n    this.updateRelated();\n  }\n\n  // 将当前节点追加到某个父节点的子节点列表中\n  public appendTo(\n    tree: TreeStore,\n    parent?: TreeNode,\n    index?: number,\n  ): void {\n    const parentNode = parent;\n    let targetIndex = -1;\n    if (typeof index === 'number') {\n      targetIndex = index;\n    }\n\n    const targetParents = parentNode?.getParents() || [];\n    const includeCurrent = targetParents.some((pnode) => pnode === this);\n    if (includeCurrent) {\n      throw new Error('无法将父节点插入到子节点');\n    }\n\n    if (Array.isArray(parentNode?.children)) {\n      const targetPosNode = parentNode?.children[targetIndex];\n      if (targetPosNode && targetPosNode === this) {\n        // 无需将节点插入到原位置\n        return;\n      }\n    }\n\n    // 先要取得 siblings\n    // 因为要应对节点在同一个 siblings 中变换位置的情况\n    let siblings = null;\n    if (parentNode instanceof TreeNode) {\n      if (!Array.isArray(parentNode?.children)) {\n        parentNode.children = [];\n      }\n      siblings = parent.children;\n    } else {\n      siblings = tree.children;\n    }\n\n    if (!Array.isArray(siblings)) {\n      throw new Error('无法插入到目标位置，可插入的节点列表不存在');\n    }\n\n    const prevLength = siblings.length;\n    const prevIndex = this.getIndex();\n\n    this.remove();\n\n    if (typeof index === 'number') {\n      let targetIndex = index;\n      if (parentNode === this.parent) {\n        // 前置节点被拔出后再插入到同一个 siblings 时，会引起目标 index 的变化\n        // 因此要相应的变更插入位置\n        // 后置节点被拔出时，目标 index 是不变的\n        const curLength = siblings.length;\n        if (\n          curLength < prevLength\n          && prevIndex <= targetIndex\n        ) {\n          targetIndex -= 1;\n        }\n      }\n      siblings.splice(targetIndex, 0, this);\n    } else {\n      siblings.push(this);\n    }\n\n    this.parent = parentNode;\n\n    // 插入节点应当继承展开状态\n    // 但建议不要继承选中状态和高亮状态\n    const nodes = this.walk();\n    nodes.forEach((item) => {\n      const node = item;\n      node.tree = tree;\n      tree.nodeMap.set(node.value, node);\n      if (node.expanded) {\n        tree.expandedMap.set(node.value, true);\n      }\n    });\n\n    const updateNodes = parentNode?.walk() || tree.children.map((item) => item.walk()).flat();\n    updateNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n\n    tree.reflow();\n  }\n\n  // 插入一个同级节点数据\n  public insert(\n    item: TypeTreeItem,\n    index?: number,\n  ): void {\n    const { tree, parent } = this;\n    const siblings = this.getSiblings();\n    let node = null;\n    if (item instanceof TreeNode) {\n      node = item;\n      node.appendTo(tree, parent, index);\n    } else if (item) {\n      node = new TreeNode(tree, item, parent);\n      if (typeof index === 'number') {\n        siblings.splice(index, 0, node);\n      }\n      siblings.forEach((sibling) => {\n        sibling.update();\n      });\n    }\n    tree.reflow();\n  }\n\n  // 在当前节点之前插入节点\n  public insertBefore(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index);\n  }\n\n  // 在当前节点之后插入节点\n  public insertAfter(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index + 1);\n  }\n\n  // 从一个树移除本节点\n  public remove(): void {\n    const { tree } = this;\n\n    const nodes = this.walk();\n    const siblings = this.getSiblings();\n    const index = this.getIndex();\n    // 从父节点的子节点列表中移除自己\n    // 但不要将自己的父节点移除，避免渲染与判断失败\n    if (Array.isArray(siblings)) {\n      siblings.splice(index, 1);\n    }\n    // 清理与树的关系，但不清理自身状态\n    nodes.forEach((node) => {\n      node.clean();\n    });\n    // 同级节点的连线状态会受到影响\n    siblings.forEach((node) => {\n      node.update();\n    });\n    // 父节点选中态会受到影响\n    this.updateParents();\n    tree.reflow();\n  }\n\n  // 清除本节点与一个树的关系\n  public clean(): void {\n    const { tree, value } = this;\n    tree.activedMap.delete(value);\n    tree.checkedMap.delete(value);\n    tree.expandedMap.delete(value);\n    tree.nodeMap.delete(value);\n  }\n\n  // 异步加载子节点数据\n  public async loadChildren(): Promise<void> {\n    const config = get(this, 'tree.config') || {};\n    if (this.children === true && !this.loading) {\n      if (typeof config.load === 'function') {\n        this.loading = true;\n        this.update();\n        let list = [];\n        list = await config.load(this);\n        this.tree.emit('load', {\n          node: this,\n          data: list,\n        });\n        this.loading = false;\n        if (Array.isArray(list) && list.length > 0) {\n          this.append(list);\n        } else {\n          this.children = false;\n        }\n        this.update();\n      }\n    }\n  }\n\n  // 设置状态\n  public set(item: TreeNodeState): void {\n    const { tree } = this;\n    const keys = Object.keys(item);\n    keys.forEach((key) => {\n      if (hasOwnProperty.call(defaultStatus, key) || key === 'label') {\n        this[key] = item[key];\n      }\n    });\n    tree.updated(this);\n  }\n\n  /* ------ 节点获取 ------- */\n\n  // 获取单个父节点\n  public getParent(): TreeNode {\n    return this.parent;\n  }\n\n  // 获取所有父节点\n  public getParents(): TreeNode[] {\n    const parents = [];\n    let node = this.parent;\n    while (node) {\n      parents.push(node);\n      node = node.parent;\n    }\n    return parents;\n  }\n\n  // 获取兄弟节点，包含自己在内\n  public getSiblings(): TreeNode[] {\n    const { parent, tree } = this;\n    let list: TreeNode[] = [];\n    if (parent) {\n      if (Array.isArray(parent.children)) {\n        list = parent.children;\n      }\n    } else if (tree) {\n      list = tree.children;\n    }\n    return list;\n  }\n\n  // 获取根节点\n  public getRoot(): TreeNode {\n    const parents = this.getParents();\n    return parents[parents.length - 1] || null;\n  }\n\n  // 获取节点在父节点的子节点列表中的位置\n  // 如果没有父节点，则获取节点在根节点列表的位置\n  public getIndex(): number {\n    const list = this.getSiblings();\n    return list.indexOf(this);\n  }\n\n  // 返回路径节点\n  public getPath(): TreeNode[] {\n    const nodes = this.getParents();\n    nodes.unshift(this);\n    return nodes.reverse();\n  }\n\n  // 获取节点所在层级\n  public getLevel(): number {\n    const parents = this.getParents();\n    return parents.length;\n  }\n\n  /* ------ 节点状态判断 ------ */\n\n  // 判断节点是否被过滤\n  public isRest(): boolean {\n    const {\n      config,\n      filterMap,\n    } = this.tree;\n\n    let rest = true;\n    if (typeof config.filter === 'function') {\n      const nodeModel = this.getModel();\n      rest = config.filter(nodeModel);\n    }\n\n    if (rest) {\n      filterMap.set(this.value, true);\n    } else if (filterMap.get(this.value)) {\n      filterMap.delete(this.value);\n    }\n\n    return rest;\n  }\n\n  // 判断节点是否可视\n  public isVisible(): boolean {\n    const {\n      nodeMap,\n    } = this.tree;\n\n    let visible = true;\n\n    // 锁定状态，直接呈现\n    if (this.vmIsLocked) {\n      return true;\n    }\n\n    // 在当前树上，未被移除\n    if (nodeMap.get(this.value)) {\n      // 节点未被过滤\n      const filterVisible = this.isRest();\n\n      // 所有父节点展开\n      let expandVisible = true;\n      const parents = this.getParents();\n      if (parents.length > 0) {\n        expandVisible = parents.every((node: TreeNode) => node.isExpanded());\n      }\n\n      // 节点为未被过滤节点的父节点\n      visible = expandVisible && filterVisible;\n    } else {\n      visible = false;\n    }\n    return visible;\n  }\n\n  // 判断节点是否被禁用\n  public isDisabled() {\n    if (this.vmIsLocked) return true;\n    const treeDisabled = get(this, 'tree.config.disabled');\n    return !!(treeDisabled || this.disabled);\n  }\n\n  // 判断节点是否能拖拽\n  public isDraggable() {\n    return !!(get(this, 'tree.config.draggable') || this.draggable);\n  }\n\n  // 判断节点是否支持互斥展开\n  public isExpandMutex() {\n    return !!(get(this, 'tree.config.expandMutex') || this.expandMutex);\n  }\n\n  // 节点可高亮\n  public isActivable() {\n    return !!(get(this, 'tree.config.activable') || this.activable);\n  }\n\n  // 是否可选\n  public isCheckable() {\n    return !!(get(this, 'tree.config.checkable') || this.checkable);\n  }\n\n  // 检查节点是否被激活\n  public isActived(map?: Map<string, boolean>): boolean {\n    const { tree, value } = this;\n    const activedMap = map || tree.activedMap;\n    return !!(tree.nodeMap.get(value) && activedMap.get(value));\n  }\n\n  // 检查节点是否已展开\n  public isExpanded(map?: Map<string, boolean>): boolean {\n    const { tree, value, vmIsLocked } = this;\n    if (vmIsLocked) return true;\n    const expandedMap = map || tree.expandedMap;\n    return !!(tree.nodeMap.get(value) && expandedMap.get(value));\n  }\n\n  // 计算属性，判断节点是否被选中\n  // map: 预期选中项map，用于计算节点在预期环境中的选中态\n  public isChecked(map?: TypeIdMap): boolean {\n    const { children, tree } = this;\n    const { checkStrictly } = tree.config;\n    let checked = false;\n    const checkedMap = map || tree.checkedMap;\n    if (tree.nodeMap.get(this.value)) {\n      if (checkedMap.get(this.value)) {\n        // 如果在 checked 节点列表中，则直接为 true\n        checked = true;\n      } else if (\n        Array.isArray(children)\n        && children.length > 0\n        && !checkStrictly\n      ) {\n        // 如果是父节点，需检查所有子节点状态\n        checked = children.every((node) => {\n          const childIsChecked = node.isChecked(checkedMap);\n          return childIsChecked;\n        });\n      } else if (!checkStrictly) {\n        // 从父节点状态推断子节点状态\n        // 这里再调用 isChecked 会导致死循环\n        const parents = this.getParents();\n        checked = parents.some((node) => checkedMap.get(node.value));\n      }\n    }\n    return !!checked;\n  }\n\n  // 是否为半选状态\n  public isIndeterminate(): boolean {\n    const { children, tree } = this;\n    const { checkStrictly } = tree.config;\n    if (checkStrictly) {\n      return false;\n    }\n    let indeterminate = false;\n    if (Array.isArray(children)) {\n      // 叶节点不存在半选状态\n      let childChecked: null | boolean = null;\n      indeterminate = children.some((node: TreeNode) => {\n        if (node.isIndeterminate()) {\n          // 子节点有任意一个半选，则其为半选状态\n          return true;\n        }\n        if (childChecked === null) {\n          childChecked = node.isChecked();\n        }\n        if (childChecked !== node.isChecked()) {\n          // 子节点选中状态不一致，则其为半选状态\n          return true;\n        }\n        return false;\n      });\n    }\n    return indeterminate;\n  }\n\n  public isFirst(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[0] === this;\n  }\n\n  public isLast(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[siblings.length - 1] === this;\n  }\n\n  // 是叶节点\n  public isLeaf(): boolean {\n    let isLeaf = false;\n    if (Array.isArray(this.children)) {\n      isLeaf = this.children.length <= 0;\n    } else {\n      isLeaf = !this.children;\n    }\n    return isLeaf;\n  }\n\n  /* ------ 节点状态切换 ------ */\n\n  // 锁定节点\n  // 搜索过滤节点时，路径节点需要固定呈现，视其为锁定态\n  public lock(lockState: boolean): void {\n    this.vmIsLocked = lockState;\n    this.expanded = this.isExpanded();\n    this.visible = this.isVisible();\n  }\n\n  // 节点展开关闭后需要调用的状态检查函数\n  public afterExpanded(): void {\n    this.update();\n    // 节点展开时检查延迟加载的数据\n    if (this.expanded && this.children === true) {\n      this.loadChildren();\n    }\n  }\n\n  // 展开或者关闭节点\n  public toggleExpanded(): TreeNodeValue[] {\n    return this.setExpanded(!this.isExpanded());\n  }\n\n  // 设置节点展开状态\n  public setExpanded(expanded: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n\n    let map = tree.expandedMap;\n    if (!options.directly) {\n      map = new Map(tree.expandedMap);\n    }\n\n    // 手风琴效果，先折叠同级节点\n    if (expanded) {\n      const shouldExpandNodes = [];\n      shouldExpandNodes.push(this);\n      if (get(tree, 'config.expandParent')) {\n        this.getParents().forEach((node) => {\n          shouldExpandNodes.push(node);\n        });\n      }\n      shouldExpandNodes.forEach((node) => {\n        let isExpandMutex = false;\n        if (node.parent) {\n          isExpandMutex = node.parent.isExpandMutex();\n        } else {\n          isExpandMutex = tree?.config?.expandMutex;\n        }\n        if (isExpandMutex) {\n          const siblings = node.getSiblings();\n          siblings.forEach((snode) => {\n            map.delete(snode.value);\n          });\n        }\n        map.set(node.value, true);\n      });\n    } else {\n      map.delete(this.value);\n    }\n\n    if (options.directly) {\n      this.afterExpanded();\n      this.update();\n      this.updateChildren();\n    }\n\n    return tree.getExpanded(map);\n  }\n\n  // 切换节点激活态\n  public toggleActived(): TreeNodeValue[] {\n    return this.setActived(!this.isActived());\n  }\n\n  // 设置节点激活态\n  public setActived(actived: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    const config = tree.config || {};\n    let map = tree.activedMap;\n    if (!options.directly) {\n      map = new Map(tree.activedMap);\n    }\n    if (this.isActivable()) {\n      if (actived) {\n        if (!config.activeMultiple) {\n          map.clear();\n        }\n        map.set(this.value, true);\n      } else {\n        map.delete(this.value);\n      }\n    }\n    if (options.directly) {\n      this.update();\n    }\n    return tree.getActived(map);\n  }\n\n  // 切换选中态\n  public toggleChecked(): TreeNodeValue[] {\n    return this.setChecked(!this.isChecked());\n  }\n\n  // 更新单个节点的选中态\n  // 返回树选中列表\n  public setChecked(checked: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const config = tree.config || {};\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    let map = tree.checkedMap;\n    if (!options.directly) {\n      map = new Map(tree.checkedMap);\n    }\n    if (this.isCheckable() && checked !== this.isChecked()) {\n      if (config.checkStrictly) {\n        if (checked) {\n          map.set(this.value, true);\n        } else {\n          map.delete(this.value);\n        }\n      } else {\n        const children = this.walk();\n        // 子节点的预期选中态与当前节点同步\n        children.forEach((node) => {\n          if (checked) {\n            map.set(node.value, true);\n          } else {\n            map.delete(node.value);\n          }\n        });\n        // 消除全部父节点的预期选中态\n        // 父节点的预期选中态将通过计算得出\n        const parents = this.getParents();\n        parents.forEach((node) => {\n          map.delete(node.value);\n        });\n      }\n    }\n    if (options.directly) {\n      if (config.checkStrictly) {\n        this.updateChecked();\n      } else {\n        const relatedNodes = tree.getRelatedNodes([this.value]);\n        relatedNodes.forEach((node) => {\n          node.updateChecked();\n        });\n      }\n    }\n    return tree.getChecked(map);\n  }\n\n  /* ------ 节点状态更新 ------ */\n\n  // 更新节点状态\n  public update(): void {\n    this.level = this.getLevel();\n    this.actived = this.isActived();\n    this.expanded = this.isExpanded();\n    this.vmCheckable = this.isCheckable();\n    this.visible = this.isVisible();\n    this.vmIsRest = this.isRest();\n    this.vmIsFirst = this.isFirst();\n    this.vmIsLast = this.isLast();\n    this.vmIsLeaf = this.isLeaf();\n    this.tree.updated(this);\n  }\n\n  // 更新选中态属性值\n  public updateChecked(isFromValueChange?: boolean): void {\n    const { tree } = this;\n    this.vmCheckable = this.isCheckable();\n    if (this.vmCheckable && (!this.disabled || isFromValueChange)) {\n      this.checked = this.isChecked();\n      if (this.checked) {\n        tree.checkedMap.set(this.value, true);\n      }\n      this.indeterminate = this.isIndeterminate();\n      tree.updated(this);\n    }\n  }\n\n  // 更新所有子节点状态\n  // 注意:不包含自己\n  public updateChildren(): void {\n    const { children } = this;\n    if (Array.isArray(children)) {\n      children.forEach((node) => {\n        node.update();\n        node.updateChecked();\n        node.updateChildren();\n      });\n    }\n  }\n\n  // 父节点状态更新\n  // 注意:不包含自己\n  public updateParents(): void {\n    const { parent } = this;\n    if (parent) {\n      parent.update();\n      parent.updateChecked();\n      parent.updateParents();\n    }\n  }\n\n  // 更新上下游相关节点\n  public updateRelated() {\n    const { tree } = this;\n    const relatedNodes = tree.getRelatedNodes([this.value]);\n    relatedNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n    tree.reflow();\n  }\n\n  /* ------ 节点遍历 ------ */\n\n  // 获取包含自己在内所有的子节点\n  public walk(): TreeNode[] {\n    const { children } = this;\n    let list: TreeNode[] = [];\n    list.push(this);\n    if (Array.isArray(children) && children.length > 0) {\n      children.forEach((node) => {\n        list = list.concat(node.walk());\n      });\n    }\n    return list;\n  }\n\n  // TreeNode 对象 => TypeTreeNodeModel 对象\n  // 用于 treeNode 对外暴露的 api\n  // 经过封装的对象，减少了对外暴露的 api，利于代码重构\n  public getModel(): TypeTreeNodeModel {\n    let { model } = this;\n    if (!model) {\n      model = createNodeModel(this);\n      this.model = model;\n    }\n    updateNodeModel(model, this);\n    return model;\n  }\n}\n\nexport default TreeNode;\n"],"names":["toString","require$$0","idCounter","uniqueId","prefix","id","uniqueId_1","hasOwnProperty","Object","prototype","defaultStatus","expandMutex","activable","checkable","disabled","draggable","loading","TreeNode","tree","data","parent","config","keys","get","propChildren","children","propLabel","label","propValue","value","model","vmCheckable","vmIsLeaf","vmIsFirst","vmIsLast","vmIsRest","vmIsLocked","spec","actived","expanded","checked","set","isNil","nodeMap","level","visible","initActived","initExpanded","initChecked","update","reflow","Array","isArray","append","lazy","loadChildren","indeterminate","updateChecked","checkStrictly","isChecked","checkedMap","expandLevel","getLevel","expandedMap","expandAll","activedMap","list","push","length","forEach","item","node","appendTo","updateRelated","index","parentNode","targetIndex","targetParents","getParents","includeCurrent","some","pnode","Error","targetPosNode","siblings","prevLength","prevIndex","getIndex","remove","curLength","splice","nodes","walk","updateNodes","map","flat","getSiblings","sibling","newData","insert","clean","updateParents","_regeneratorRuntime","load","emit","key","call","updated","parents","indexOf","unshift","reverse","filterMap","rest","filter","nodeModel","getModel","filterVisible","isRest","expandVisible","every","isExpanded","treeDisabled","childIsChecked","childChecked","isIndeterminate","isLeaf","lockState","isVisible","setExpanded","opts","options","directly","Map","shouldExpandNodes","isExpandMutex","snode","afterExpanded","updateChildren","getExpanded","setActived","isActived","isActivable","activeMultiple","clear","getActived","setChecked","isCheckable","relatedNodes","getRelatedNodes","getChecked","isFirst","isLast","isFromValueChange","concat","createNodeModel","updateNodeModel"],"mappings":"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"}