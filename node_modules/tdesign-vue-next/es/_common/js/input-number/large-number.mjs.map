{"version":3,"file":"large-number.mjs","sources":["../../../../src/_common/js/input-number/large-number.ts"],"sourcesContent":["import log from '../log/log';\n\nexport function fillZero(length: number) {\n  return new Array(length).fill(0).join('');\n}\n\n/**\n * 大数，是否是一个数字，数字字符包括 - . e [0-9]\n */\nexport function isInputNumber(num: number | string): boolean {\n  if (!num) return true;\n  if (typeof num === 'number') return !Number.isNaN(num);\n  const r = /^[0-9|e|E|-]+\\.*[0-9|e|E|-]*$/.test(num);\n  if (!r) return false;\n  // only allow one [.e] and two [-]\n  let eCount = 0;\n  let negativeCount = 0;\n  let dotCount = 0;\n  for (let i = 0, len = num.length; i < len; i++) {\n    if (num[i] === '.') {\n      dotCount += 1;\n      if (dotCount > 1) return false;\n    }\n    if (/(e|E)+/.test(num[i])) {\n      eCount += 1;\n      if (eCount > 1) return false;\n    }\n    if (num[i] === '-') {\n      negativeCount += 1;\n      if (negativeCount > 2) return false;\n    }\n  }\n  return true;\n}\n\n// 整数，去除前面的无效 0（本身是 0 除外）；小数去除末尾的无效 0\nexport function removeInvalidZero(num: string, decimal = false) {\n  if (num.indexOf('.') !== -1) {\n    log.error('InputNumber', 'num is not a integer number.');\n    return num;\n  }\n  if (!num || (num === '0' && decimal)) return '';\n  if (num === '0') return num;\n  return (decimal ? num.replace(/0+$/, '') : num.replace(/^0+/, '')) || '0';\n}\n\n/**\n * 大数加法，仅支持正整数（没有精度问题）\n * @param num1 被加数\n * @param num2 加数\n */\nexport function largeIntNumberAdd(num1: string, num2: string, decimal = false): string {\n  const number1 = removeInvalidZero(num1, decimal);\n  const number2 = removeInvalidZero(num2, decimal);\n  const isFirstLarger = number1.length > number2.length;\n  const maxNumber = isFirstLarger ? number1 : number2;\n  const minNumber = isFirstLarger ? number2 : number1;\n  const newNumber: string[] = [];\n  const step = [];\n  const diff = decimal ? 0 : maxNumber.length - minNumber.length;\n  const len = decimal ? minNumber.length : maxNumber.length;\n  for (let i = len - 1; i >= 0; i--) {\n    const minIndex = i - diff;\n    // 第一个数，加第二个数，加进位\n    const count = Number(maxNumber[i]) + (Number(minNumber[minIndex]) || 0) + (step[i] || 0);\n    if (count >= 10) {\n      step[i - 1] = 1;\n    }\n    newNumber.unshift(String(count % 10));\n  }\n  // 999 + 1 = 1000，之类的进位\n  if (step[-1]) {\n    newNumber.unshift('1');\n  }\n  if (decimal) {\n    return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join('');\n  }\n  return newNumber.join('');\n}\n\n/**\n * 大数加法，支持小数和整数（没有精度问题）\n * @param num1 被加数\n * @param num2 加数\n */\nexport function largePositiveNumberAdd(num1: string, num2: string): string {\n  const [intNumber1 = '0', decimalNumber1 = '0'] = num1.split('.');\n  const [intNumber2 = '0', decimalNumber2 = '0'] = num2.split('.');\n  const integerSum = largeIntNumberAdd(intNumber1, intNumber2);\n  // 如果不存在小数，则直接返回整数相加结果\n  if (decimalNumber1 === '0' && decimalNumber2 === '0') return integerSum;\n  const newDecimalNumber1 = removeInvalidZero(decimalNumber1, true);\n  const newDecimalNumber2 = removeInvalidZero(decimalNumber2, true);\n  // 小数点相加\n  const decimalNumberSum = largeIntNumberAdd(newDecimalNumber1, newDecimalNumber2, true);\n  // 组合整数部分和小数部分\n  const decimalLength = decimalNumberSum.length;\n  // 如果小数相加进位\n  if (decimalLength > newDecimalNumber1.length && decimalLength > newDecimalNumber2.length) {\n    return [\n      removeInvalidZero(largeIntNumberAdd(integerSum, '1')),\n      removeInvalidZero(decimalNumberSum.slice(1), true),\n    ].filter((v: string) => v).join('.');\n  }\n  return [\n    removeInvalidZero(integerSum),\n    removeInvalidZero(decimalNumberSum, true)\n  ].filter((v: string) => v).join('.');\n}\n\n/**\n * 比较两个大数的大小，仅正整数有效\n */\nfunction compareLargeIntegerNumber(num1: string, num2: string): 1 | -1 | 0 {\n  const number1 = removeInvalidZero(num1);\n  const number2 = removeInvalidZero(num2);\n  if (number1.length === number2.length) {\n    for (let i = 0, len = number1.length; i < len; i++) {\n      if (number1[i] > number2[i]) return 1;\n      if (number1[i] < number2[i]) return -1;\n    }\n    return 0;\n  }\n  return number1.length > number2.length ? 1 : -1;\n}\n\nfunction compareLargeDecimalNumber(num1: string, num2: string) {\n  const number1 = num1 && num1 !== '0' ? num1.replace(/0+$/, '') : '0';\n  const number2 = num2 && num2 !== '0' ? num2.replace(/0+$/, '') : '0';\n  const maxLength = Math.max(number1.length, number2.length);\n  for (let i = 0, len = maxLength; i < len; i++) {\n    if ((number1[i] || 0) > (number2[i] || 0)) return 1;\n    if ((number1[i] || 0) < (number2[i] || 0)) return -1;\n  }\n  return 0;\n}\n\n/**\n * 比较两个大数的大小\n */\nexport function compareLargeNumber(\n  num1: string,\n  num2: string,\n): 1 | -1 | 0 {\n  const [integer1, decimal1] = num1.split('.');\n  const [integer2, decimal2] = num2.split('.');\n  const result = compareLargeIntegerNumber(integer1.replace('-', ''), integer2.replace('-', ''));\n  const integer1IsNegative = integer1.includes('-');\n  const integer2IsNegative = integer2.includes('-');\n  if (integer1IsNegative && !integer2IsNegative) return -1;\n  if (!integer1IsNegative && integer2IsNegative) return 1;\n  if (integer1IsNegative && integer2IsNegative) {\n    if (result === 0) return 0;\n    return result > 0 ? -1 : 1;\n  }\n  if (result === 0) {\n    return compareLargeDecimalNumber(decimal1, decimal2);\n  }\n  return result;\n}\n\n// 确认是否为无限大/小\nexport function isInfinity(num: number| string) {\n  return [-Infinity, Infinity].includes(Number(num));\n}\n\n// 确认是否是大数\nexport function isSafeNumber(num: string | number) {\n  return Number(num) < Number.MAX_SAFE_INTEGER && Number(num) > Number.MIN_SAFE_INTEGER;\n}\n\n/**\n * 比较两个数的大小\n */\nexport function compareNumber(\n  num1: string | number,\n  num2: string | number,\n  largeNumber?: boolean,\n) {\n  const isSafeNumberCompare = isSafeNumber(num1) && isSafeNumber(num2) && !largeNumber;\n  const isInfinityCompare = isInfinity(num1) || isInfinity(num2);\n  if (isSafeNumberCompare || isInfinityCompare) {\n    // 比较两个非大数或涉及无穷的大小\n    if (Number(num1) === Number(num2)) return 0;\n    return Number(num1) > Number(num2) ? 1 : -1;\n  }\n  // 比较两个大数的大小\n  return compareLargeNumber(String(num1), String(num2));\n}\n\n/**\n * 大数减法，仅支持整数\n * @param num1 被减数\n * @param num2 减数\n * @param decimal 是否为小数位相减\n */\nexport function largeIntegerNumberSubtract(\n  num1: string, num2: string, p?: { decimal?: boolean, stayZero?: boolean }\n): string {\n  if (num1 === num2) return '0';\n  const { decimal, stayZero } = p || {};\n  const number1 = removeInvalidZero(num1);\n  const number2 = removeInvalidZero(num2);\n  const isFirstLarger = compareLargeIntegerNumber(number1, number2) > 0;\n  const maxNumber = isFirstLarger ? number1 : number2;\n  const minNumber = isFirstLarger ? number2 : number1;\n  const newNumber: string[] = [];\n  // step 存储借位信息\n  const step = [];\n  const diff = decimal ? 0 : maxNumber.length - minNumber.length;\n  const len = decimal ? minNumber.length : maxNumber.length;\n  for (let i = len - 1; i >= 0; i--) {\n    const minIndex = i - diff;\n    // 第一个数，减第二个数，减借位\n    let count = Number(maxNumber[i]) - (Number(minNumber[minIndex]) || 0) - (step[i] || 0);\n    if (count < 0) {\n      step[i - 1] = 1;\n      count += 10;\n    }\n    newNumber.unshift(String(count));\n  }\n  if (decimal) {\n    return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join('');\n  }\n  let finalNumber = newNumber.join('');\n  if (!stayZero) {\n    finalNumber = finalNumber.replace(/^0+/, '');\n  }\n  return removeInvalidZero(isFirstLarger ? finalNumber : `-${finalNumber}`);\n}\n\n/**\n * 大数减法，支持整数和小数（无精度问题）\n * @param num1 被减数\n * @param num2 减数\n * @param decimal 是否为小数位相减\n */\nexport function largePositiveNumberSubtract(num1: string, num2: string): string {\n  if (num1 === num2) return '0';\n  const isFirstLarger = compareNumber(num1, num2, true) > 0;\n  const maxNumber = isFirstLarger ? num1 : num2;\n  const minNumber = isFirstLarger ? num2 : num1;\n  // 整数部分和小数部分分开处理\n  const [intNumber1, decimalNumber1 = '0'] = maxNumber.split('.');\n  const [intNumber2, decimalNumber2 = '0'] = minNumber.split('.');\n  let integerNumber = largeIntegerNumberSubtract(intNumber1, intNumber2);\n  // 如果不存在小数，则直接返回整数相加结果\n  if (decimalNumber1 === '0' && decimalNumber2 === '0') {\n    return isFirstLarger ? integerNumber : `-${integerNumber}`;\n  }\n  // 小数点相减\n  let decimalNumber = '';\n  let addOneNumber = decimalNumber1;\n  // 第一个数字的小数位数比第二个少，需补足 0\n  if (decimalNumber1.length < decimalNumber2.length) {\n    addOneNumber = `${decimalNumber1}${fillZero(decimalNumber2.length - decimalNumber1.length)}`;\n  }\n  // 第一个小数位更小，是否需要借位\n  if (compareLargeDecimalNumber(addOneNumber, decimalNumber2) >= 0) {\n    decimalNumber = largeIntegerNumberSubtract(addOneNumber, decimalNumber2, { decimal: true });\n  } else {\n    if (decimalNumber1.length < decimalNumber2.length || decimalNumber1 === '0') {\n      decimalNumber = largeIntegerNumberSubtract(`1${addOneNumber}`, decimalNumber2, { stayZero: true });\n      decimalNumber = fillZero(decimalNumber2.length - decimalNumber.length) + decimalNumber;\n    } else {\n      decimalNumber = largeIntegerNumberSubtract(decimalNumber1, decimalNumber2, { decimal: true });\n    }\n    integerNumber = largeIntegerNumberSubtract(integerNumber, '1');\n  }\n  const finalNumber = decimalNumber ? [integerNumber, decimalNumber].join('.') : integerNumber;\n  return isFirstLarger ? finalNumber : `-${finalNumber}`;\n}\n\n/**\n * -0.6 - 0.8        =>  -(0.6 + 0.8)\n * -0.6 - (-0.8)     =>  0.8 - 0.6\n * 0.6 - (-0.8)      => 0.6 + 0.8\n * 0.6 - 0.8         => 0.6 - 0.8\n */\nexport function largeNumberSubtract(num1: string, num2: string): string {\n  const isFirstNegative = num1[0] === '-';\n  const isSecondNegative = num2[0] === '-';\n  if (isFirstNegative && !isSecondNegative) {\n    const r = largePositiveNumberAdd(num1.slice(1), num2);\n    return `-${r}`;\n  }\n  if (isFirstNegative && isSecondNegative) {\n    return largePositiveNumberSubtract(num2.slice(1), num1.slice(1));\n  }\n  if (!isFirstNegative && isSecondNegative) {\n    return largePositiveNumberAdd(num1, num2.slice(1));\n  }\n  return largePositiveNumberSubtract(num1, num2);\n}\n\n/**\n * -0.6 + 0.8        =>  0.8 - 0.6\n * -0.6 + (-0.8)     =>  -(0.6 + 0.8)\n * 0.6 + (-0.8)      => 0.6 - 0.8\n * 0.6 + 0.8         => 0.6 + 0.8\n */\nexport function largeNumberAdd(num1: string, num2: string): string {\n  const isFirstNegative = num1[0] === '-';\n  const isSecondNegative = num2[0] === '-';\n  if (isFirstNegative && !isSecondNegative) {\n    return largePositiveNumberSubtract(num2, num1.slice(1));\n  }\n  if (isFirstNegative && isSecondNegative) {\n    const r = largePositiveNumberAdd(num2.slice(1), num1.slice(1));\n    return `-${r}`;\n  }\n  if (!isFirstNegative && isSecondNegative) {\n    return largePositiveNumberSubtract(num1, num2.slice(1));\n  }\n  return largePositiveNumberAdd(num1, num2);\n}\n\n/**\n * 大数保留 N 位小数（没有精度问题）\n * @param {String} number 大数（只能使用字符串表示）\n * @param {Number} decimalPlaces 保留的小数位数\n * @param {Boolean} largeNumber 是否为大数\n */\nexport function largeNumberToFixed(\n  number: string | number, decimalPlaces: number = 0, largeNumber = true,\n): string {\n  if (!largeNumber) return Number(number).toFixed(decimalPlaces);\n  if (typeof number !== 'string') return String(number);\n  const [num1, num2] = number.split('.');\n  // 如果不存在小数点，则补足位数\n  if (!num2) {\n    return decimalPlaces ? [number, (fillZero(decimalPlaces))].join('.') : number;\n  }\n  // 存在小数点，保留 0 位小数，四舍五入\n  if (decimalPlaces === 0) {\n    return Number(num2[0]) >= 5 ? largePositiveNumberAdd(num1, '1') : num1;\n  }\n  // 存在小数点，保留 > 0 位小数，四舍五入（此时，整数位不会发生任何变化，只需关注小数位数）\n  let decimalNumber = num2.slice(0, decimalPlaces);\n  if (num2.length < decimalPlaces) {\n    decimalNumber += (fillZero(decimalPlaces - num2.length));\n  } else {\n    decimalNumber = Number(num2[decimalPlaces]) >= 5\n      ? largePositiveNumberAdd(decimalNumber, '1')\n      : decimalNumber;\n  }\n  return [num1, decimalNumber].join('.');\n}\n\n/**\n * 2e3 => 2000\n * 0.2e3 => 200\n */\nexport function formatENumber(num: string): string {\n  const [num1, num2] = num.split('e');\n  const [integer, initDecimal = ''] = num.split('.');\n  const zeroCount = Number(num2);\n  const [decimal] = initDecimal.split('e');\n  if (zeroCount > decimal.length) {\n    const multipleZero = fillZero(zeroCount - decimal.length);\n    return num1.replace(/(^0+|\\.)/g, '') + multipleZero;\n  }\n  const n1 = integer.replace(/^0+/, '') + decimal.slice(0, zeroCount);\n  const d2 = decimal.slice(zeroCount);\n  return d2 ? [n1, d2].join('.') : n1;\n}\n"],"names":["fillZero","length","Array","fill","join","isInputNumber","num","Number","isNaN","r","test","eCount","negativeCount","dotCount","i","len","removeInvalidZero","decimal","indexOf","log","error","replace","largeIntNumberAdd","num1","num2","number1","number2","isFirstLarger","maxNumber","minNumber","newNumber","step","diff","minIndex","count","unshift","String","concat","slice","largePositiveNumberAdd","split","intNumber1","decimalNumber1","intNumber2","decimalNumber2","integerSum","newDecimalNumber1","newDecimalNumber2","decimalNumberSum","decimalLength","filter","v","compareLargeIntegerNumber","compareLargeDecimalNumber","maxLength","Math","max","compareLargeNumber","integer1","decimal1","integer2","decimal2","result","integer1IsNegative","includes","integer2IsNegative","isInfinity","Infinity","isSafeNumber","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","compareNumber","largeNumber","isSafeNumberCompare","isInfinityCompare","largeIntegerNumberSubtract","p","stayZero","finalNumber","largePositiveNumberSubtract","integerNumber","decimalNumber","addOneNumber","largeNumberSubtract","isFirstNegative","isSecondNegative","largeNumberAdd","largeNumberToFixed","number","decimalPlaces","toFixed","formatENumber","integer","initDecimal","zeroCount","multipleZero","n1","d2"],"mappings":";;;;;;;;;;AAEO,SAASA,SAASC,MAAgB,EAAA;AAChC,EAAA,OAAA,IAAIC,MAAMD,MAAM,CAAA,CAAEE,KAAK,CAAC,CAAA,CAAEC,KAAK,EAAE,CAAA,CAAA;AAC1C,CAAA;AAKO,SAASC,cAAcC,GAA+B,EAAA;AAC3D,EAAA,IAAI,CAACA,GAAA,EAAY,OAAA,IAAA,CAAA;AACjB,EAAA,IAAI,OAAOA,GAAQ,KAAA,QAAA,EAAiB,OAAA,CAACC,MAAO,CAAAC,KAAA,CAAMF,GAAG,CAAA,CAAA;AAC/C,EAAA,IAAAG,CAAA,GAAI,+BAAgC,CAAAC,IAAA,CAAKJ,GAAG,CAAA,CAAA;AAClD,EAAA,IAAI,CAACG,CAAA,EAAU,OAAA,KAAA,CAAA;EAEf,IAAIE,MAAS,GAAA,CAAA,CAAA;EACb,IAAIC,aAAgB,GAAA,CAAA,CAAA;EACpB,IAAIC,QAAW,GAAA,CAAA,CAAA;AACf,EAAA,KAAA,IAASC,IAAI,CAAG,EAAAC,GAAA,GAAMT,IAAIL,MAAQ,EAAAa,CAAA,GAAIC,KAAKD,CAAK,EAAA,EAAA;AAC1C,IAAA,IAAAR,GAAA,CAAIQ,OAAO,GAAK,EAAA;AACND,MAAAA,QAAA,IAAA,CAAA,CAAA;AACZ,MAAA,IAAIA,QAAW,GAAA,CAAA,EAAU,OAAA,KAAA,CAAA;AAC3B,KAAA;IACA,IAAI,QAAS,CAAAH,IAAA,CAAKJ,GAAI,CAAAQ,CAAA,CAAE,CAAG,EAAA;AACfH,MAAAA,MAAA,IAAA,CAAA,CAAA;AACV,MAAA,IAAIA,MAAS,GAAA,CAAA,EAAU,OAAA,KAAA,CAAA;AACzB,KAAA;AACI,IAAA,IAAAL,GAAA,CAAIQ,OAAO,GAAK,EAAA;AACDF,MAAAA,aAAA,IAAA,CAAA,CAAA;AACjB,MAAA,IAAIA,aAAgB,GAAA,CAAA,EAAU,OAAA,KAAA,CAAA;AAChC,KAAA;AACF,GAAA;AACO,EAAA,OAAA,IAAA,CAAA;AACT,CAAA;AAGgB,SAAAI,iBAAA,CAAkBV,GAAa,EAAiB;EAAA,IAAjBW,OAAA,uEAAU,KAAO,CAAA;EAC9D,IAAIX,GAAI,CAAAY,OAAA,CAAQ,GAAG,CAAA,KAAM,CAAI,CAAA,EAAA;AACvBC,IAAAA,GAAA,CAAAC,KAAA,CAAM,eAAe,8BAA8B,CAAA,CAAA;AAChD,IAAA,OAAAd,GAAA,CAAA;AACT,GAAA;EACI,IAAA,CAACA,GAAQ,IAAAA,GAAA,KAAQ,GAAO,IAAAW,OAAA,EAAiB,OAAA,EAAA,CAAA;AAC7C,EAAA,IAAIX,GAAQ,KAAA,GAAA,EAAY,OAAAA,GAAA,CAAA;EAChB,OAAA,CAAAW,OAAA,GAAUX,GAAI,CAAAe,OAAA,CAAQ,KAAO,EAAA,EAAE,IAAIf,GAAI,CAAAe,OAAA,CAAQ,KAAO,EAAA,EAAE,CAAM,KAAA,GAAA,CAAA;AACxE,CAAA;AAOO,SAASC,iBAAkB,CAAAC,IAAA,EAAcC,IAAc,EAAyB;EAAA,IAAzBP,OAAA,uEAAU,KAAe,CAAA;AAC/E,EAAA,IAAAQ,OAAA,GAAUT,iBAAkB,CAAAO,IAAA,EAAMN,OAAO,CAAA,CAAA;AACzC,EAAA,IAAAS,OAAA,GAAUV,iBAAkB,CAAAQ,IAAA,EAAMP,OAAO,CAAA,CAAA;EACzC,IAAAU,aAAA,GAAgBF,OAAQ,CAAAxB,MAAA,GAASyB,OAAQ,CAAAzB,MAAA,CAAA;AACzC,EAAA,IAAA2B,SAAA,GAAYD,gBAAgBF,OAAU,GAAAC,OAAA,CAAA;AACtC,EAAA,IAAAG,SAAA,GAAYF,gBAAgBD,OAAU,GAAAD,OAAA,CAAA;EAC5C,IAAMK,YAAsB,EAAC,CAAA;EAC7B,IAAMC,OAAO,EAAC,CAAA;AACd,EAAA,IAAMC,IAAO,GAAAf,OAAA,GAAU,CAAI,GAAAW,SAAA,CAAU3B,SAAS4B,SAAU,CAAA5B,MAAA,CAAA;EACxD,IAAMc,GAAM,GAAAE,OAAA,GAAUY,SAAU,CAAA5B,MAAA,GAAS2B,SAAU,CAAA3B,MAAA,CAAA;AACnD,EAAA,KAAA,IAASa,CAAI,GAAAC,GAAA,GAAM,CAAG,EAAAD,CAAA,IAAK,GAAGA,CAAK,EAAA,EAAA;AACjC,IAAA,IAAMmB,WAAWnB,CAAI,GAAAkB,IAAA,CAAA;IAEf,IAAAE,KAAA,GAAQ3B,MAAO,CAAAqB,SAAA,CAAUd,CAAE,CAAA,CAAA,IAAKP,MAAO,CAAAsB,SAAA,CAAUI,QAAS,CAAA,CAAA,IAAK,CAAM,CAAA,IAAAF,IAAA,CAAKjB,CAAM,CAAA,IAAA,CAAA,CAAA,CAAA;IACtF,IAAIoB,SAAS,EAAI,EAAA;AACfH,MAAAA,IAAA,CAAKjB,IAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AAChB,KAAA;IACAgB,SAAA,CAAUK,OAAQ,CAAAC,MAAA,CAAOF,KAAQ,GAAA,EAAE,CAAC,CAAA,CAAA;AACtC,GAAA;AAEA,EAAA,IAAIH,KAAK,CAAK,CAAA,CAAA,EAAA;AACZD,IAAAA,SAAA,CAAUK,QAAQ,GAAG,CAAA,CAAA;AACvB,GAAA;AACA,EAAA,IAAIlB,OAAS,EAAA;AACJ,IAAA,OAAAa,SAAA,CAAUO,MAAO,CAAAT,SAAA,CAAUU,KAAM,CAAAvB,GAAA,EAAKa,UAAU3B,MAAM,CAAC,CAAE,CAAAG,IAAA,CAAK,EAAE,CAAA,CAAA;AACzE,GAAA;AACO,EAAA,OAAA0B,SAAA,CAAU1B,KAAK,EAAE,CAAA,CAAA;AAC1B,CAAA;AAOgB,SAAAmC,sBAAA,CAAuBhB,MAAcC,IAAsB,EAAA;AACnE,EAAA,IAAA,WAAA,GAA2CD,IAAA,CAAKiB,MAAM,GAAG,CAAA;AAAA,IAAA,YAAA,GAAA,cAAA,CAAA,WAAA,EAAA,CAAA,CAAA;AAAA,IAAA,aAAA,GAAA,YAAA,CAAA,CAAA,CAAA;AAAxDC,IAAAA,wCAAa,GAAK,GAAA,aAAA;AAAA,IAAA,cAAA,GAAA,YAAA,CAAA,CAAA,CAAA;AAAAC,IAAAA,cAAA,+BAAiB,GAAG,GAAA,cAAA,CAAA;AACvC,EAAA,IAAA,WAAA,GAA2ClB,IAAA,CAAKgB,MAAM,GAAG,CAAA;AAAA,IAAA,YAAA,GAAA,cAAA,CAAA,WAAA,EAAA,CAAA,CAAA;AAAA,IAAA,aAAA,GAAA,YAAA,CAAA,CAAA,CAAA;AAAxDG,IAAAA,wCAAa,GAAK,GAAA,aAAA;AAAA,IAAA,cAAA,GAAA,YAAA,CAAA,CAAA,CAAA;AAAAC,IAAAA,cAAA,+BAAiB,GAAG,GAAA,cAAA,CAAA;AACvC,EAAA,IAAAC,UAAA,GAAavB,iBAAkB,CAAAmB,UAAA,EAAYE,UAAU,CAAA,CAAA;EAEvD,IAAAD,cAAA,KAAmB,OAAOE,cAAmB,KAAA,GAAA,EAAY,OAAAC,UAAA,CAAA;AACvD,EAAA,IAAAC,iBAAA,GAAoB9B,iBAAkB,CAAA0B,cAAA,EAAgB,IAAI,CAAA,CAAA;AAC1D,EAAA,IAAAK,iBAAA,GAAoB/B,iBAAkB,CAAA4B,cAAA,EAAgB,IAAI,CAAA,CAAA;EAEhE,IAAMI,gBAAmB,GAAA1B,iBAAA,CAAkBwB,iBAAmB,EAAAC,iBAAA,EAAmB,IAAI,CAAA,CAAA;AAErF,EAAA,IAAME,gBAAgBD,gBAAiB,CAAA/C,MAAA,CAAA;EAEvC,IAAIgD,aAAgB,GAAAH,iBAAA,CAAkB7C,MAAU,IAAAgD,aAAA,GAAgBF,kBAAkB9C,MAAQ,EAAA;IACjF,OAAA,CACLe,iBAAkB,CAAAM,iBAAA,CAAkBuB,UAAY,EAAA,GAAG,CAAC,CAAA,EACpD7B,iBAAkB,CAAAgC,gBAAA,CAAiBV,KAAM,CAAA,CAAC,GAAG,IAAI,CAAA,EACjDY,MAAO,CAAA,UAACC;aAAcA,CAAC,CAAA;AAAA,KAAA,CAAA,CAAE/C,KAAK,GAAG,CAAA,CAAA;AACrC,GAAA;AACO,EAAA,OAAA,CACLY,kBAAkB6B,UAAU,CAAA,EAC5B7B,iBAAA,CAAkBgC,kBAAkB,IAAI,CAAA,EACxCE,MAAO,CAAA,UAACC;WAAcA,CAAC,CAAA;AAAA,GAAA,CAAA,CAAE/C,KAAK,GAAG,CAAA,CAAA;AACrC,CAAA;AAKA,SAASgD,yBAAA,CAA0B7B,MAAcC,IAA0B,EAAA;AACnE,EAAA,IAAAC,OAAA,GAAUT,kBAAkBO,IAAI,CAAA,CAAA;AAChC,EAAA,IAAAG,OAAA,GAAUV,kBAAkBQ,IAAI,CAAA,CAAA;AAClC,EAAA,IAAAC,OAAA,CAAQxB,MAAW,KAAAyB,OAAA,CAAQzB,MAAQ,EAAA;AACrC,IAAA,KAAA,IAASa,IAAI,CAAG,EAAAC,GAAA,GAAMU,QAAQxB,MAAQ,EAAAa,CAAA,GAAIC,KAAKD,CAAK,EAAA,EAAA;MAC9C,IAAAW,OAAA,CAAQX,KAAKY,OAAQ,CAAAZ,CAAA,CAAA,EAAW,OAAA,CAAA,CAAA;AAChC,MAAA,IAAAW,OAAA,CAAQX,KAAKY,OAAQ,CAAAZ,CAAA,CAAA,EAAW,OAAA,CAAA,CAAA,CAAA;AACtC,KAAA;AACO,IAAA,OAAA,CAAA,CAAA;AACT,GAAA;EACA,OAAOW,OAAQ,CAAAxB,MAAA,GAASyB,OAAQ,CAAAzB,MAAA,GAAS,CAAI,GAAA,CAAA,CAAA,CAAA;AAC/C,CAAA;AAEA,SAASoD,yBAAA,CAA0B9B,MAAcC,IAAc,EAAA;AACvD,EAAA,IAAAC,OAAA,GAAUF,QAAQA,IAAS,KAAA,GAAA,GAAMA,KAAKF,OAAQ,CAAA,KAAA,EAAO,EAAE,CAAI,GAAA,GAAA,CAAA;AAC3D,EAAA,IAAAK,OAAA,GAAUF,QAAQA,IAAS,KAAA,GAAA,GAAMA,KAAKH,OAAQ,CAAA,KAAA,EAAO,EAAE,CAAI,GAAA,GAAA,CAAA;AACjE,EAAA,IAAMiC,YAAYC,IAAK,CAAAC,GAAA,CAAI/B,OAAQ,CAAAxB,MAAA,EAAQyB,QAAQzB,MAAM,CAAA,CAAA;AACzD,EAAA,KAAA,IAASa,IAAI,CAAG,EAAAC,GAAA,GAAMuC,SAAW,EAAAxC,CAAA,GAAIC,KAAKD,CAAK,EAAA,EAAA;AAC7C,IAAA,IAAA,CAAKW,OAAQ,CAAAX,CAAA,CAAA,IAAM,CAAM,KAAAY,OAAA,CAAQZ,CAAM,CAAA,IAAA,CAAA,CAAA,EAAW,OAAA,CAAA,CAAA;AAClD,IAAA,IAAA,CAAKW,OAAQ,CAAAX,CAAA,CAAA,IAAM,CAAM,KAAAY,OAAA,CAAQZ,CAAM,CAAA,IAAA,CAAA,CAAA,EAAW,OAAA,CAAA,CAAA,CAAA;AACpD,GAAA;AACO,EAAA,OAAA,CAAA,CAAA;AACT,CAAA;AAKgB,SAAA2C,kBAAA,CACdlC,MACAC,IACY,EAAA;AACZ,EAAA,IAAA,YAAA,GAA6BD,IAAA,CAAKiB,MAAM,GAAG,CAAA;AAAA,IAAA,YAAA,GAAA,cAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IAApCkB,QAAU,GAAA,YAAA,CAAA,CAAA,CAAA;IAAAC,QAAQ,GAAA,YAAA,CAAA,CAAA,CAAA,CAAA;AACzB,EAAA,IAAA,YAAA,GAA6BnC,IAAA,CAAKgB,MAAM,GAAG,CAAA;AAAA,IAAA,YAAA,GAAA,cAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IAApCoB,QAAU,GAAA,YAAA,CAAA,CAAA,CAAA;IAAAC,QAAQ,GAAA,YAAA,CAAA,CAAA,CAAA,CAAA;EACnB,IAAAC,MAAA,GAASV,yBAA0B,CAAAM,QAAA,CAASrC,OAAQ,CAAA,GAAA,EAAK,EAAE,CAAA,EAAGuC,QAAS,CAAAvC,OAAA,CAAQ,GAAK,EAAA,EAAE,CAAC,CAAA,CAAA;AACvF,EAAA,IAAA0C,kBAAA,GAAqBL,QAAS,CAAAM,QAAA,CAAS,GAAG,CAAA,CAAA;AAC1C,EAAA,IAAAC,kBAAA,GAAqBL,QAAS,CAAAI,QAAA,CAAS,GAAG,CAAA,CAAA;AAChD,EAAA,IAAID,sBAAsB,CAACE,kBAAA,EAA2B,OAAA,CAAA,CAAA,CAAA;AACtD,EAAA,IAAI,CAACF,kBAAsB,IAAAE,kBAAA,EAA2B,OAAA,CAAA,CAAA;EACtD,IAAIF,sBAAsBE,kBAAoB,EAAA;AAC5C,IAAA,IAAIH,MAAW,KAAA,CAAA,EAAU,OAAA,CAAA,CAAA;AAClB,IAAA,OAAAA,MAAA,GAAS,IAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AAC3B,GAAA;EACA,IAAIA,WAAW,CAAG,EAAA;AACT,IAAA,OAAAT,yBAAA,CAA0BM,UAAUE,QAAQ,CAAA,CAAA;AACrD,GAAA;AACO,EAAA,OAAAC,MAAA,CAAA;AACT,CAAA;AAGO,SAASI,WAAW5D,GAAqB,EAAA;AAC9C,EAAA,OAAO,CAAC,CAAW6D,QAAA,EAAAA,QAAQ,EAAEH,QAAS,CAAAzD,MAAA,CAAOD,GAAG,CAAC,CAAA,CAAA;AACnD,CAAA;AAGO,SAAS8D,aAAa9D,GAAsB,EAAA;AAC1C,EAAA,OAAAC,MAAA,CAAOD,GAAG,CAAI,GAAAC,MAAA,CAAO8D,oBAAoB9D,MAAO,CAAAD,GAAG,IAAIC,MAAO,CAAA+D,gBAAA,CAAA;AACvE,CAAA;AAKgB,SAAAC,aAAA,CACdhD,IACA,EAAAC,IAAA,EACAgD,WACA,EAAA;AACA,EAAA,IAAMC,sBAAsBL,YAAa,CAAA7C,IAAI,KAAK6C,YAAa,CAAA5C,IAAI,KAAK,CAACgD,WAAA,CAAA;EACzE,IAAME,iBAAoB,GAAAR,UAAA,CAAW3C,IAAI,CAAA,IAAK2C,WAAW1C,IAAI,CAAA,CAAA;EAC7D,IAAIiD,uBAAuBC,iBAAmB,EAAA;IAE5C,IAAInE,MAAO,CAAAgB,IAAI,CAAM,KAAAhB,MAAA,CAAOiB,IAAI,CAAA,EAAU,OAAA,CAAA,CAAA;AAC1C,IAAA,OAAOjB,OAAOgB,IAAI,CAAA,GAAIhB,MAAO,CAAAiB,IAAI,IAAI,CAAI,GAAA,CAAA,CAAA,CAAA;AAC3C,GAAA;EAEA,OAAOiC,mBAAmBrB,MAAO,CAAAb,IAAI,CAAG,EAAAa,MAAA,CAAOZ,IAAI,CAAC,CAAA,CAAA;AACtD,CAAA;AAQgB,SAAAmD,0BAAA,CACdpD,IAAc,EAAAC,IAAA,EAAcoD,CACpB,EAAA;AACR,EAAA,IAAIrD,IAAS,KAAAC,IAAA,EAAa,OAAA,GAAA,CAAA;EAC1B,IAA8BoD,IAAAA,GAAAA,KAAK,EAAC;AAA5B3D,IAAAA,OAAA,QAAAA,OAAA;AAAS4D,IAAAA,QAAS,QAATA,QAAS,CAAA;AACpB,EAAA,IAAApD,OAAA,GAAUT,kBAAkBO,IAAI,CAAA,CAAA;AAChC,EAAA,IAAAG,OAAA,GAAUV,kBAAkBQ,IAAI,CAAA,CAAA;EACtC,IAAMG,aAAgB,GAAAyB,yBAAA,CAA0B3B,OAAS,EAAAC,OAAO,CAAI,GAAA,CAAA,CAAA;AAC9D,EAAA,IAAAE,SAAA,GAAYD,gBAAgBF,OAAU,GAAAC,OAAA,CAAA;AACtC,EAAA,IAAAG,SAAA,GAAYF,gBAAgBD,OAAU,GAAAD,OAAA,CAAA;EAC5C,IAAMK,YAAsB,EAAC,CAAA;EAE7B,IAAMC,OAAO,EAAC,CAAA;AACd,EAAA,IAAMC,IAAO,GAAAf,OAAA,GAAU,CAAI,GAAAW,SAAA,CAAU3B,SAAS4B,SAAU,CAAA5B,MAAA,CAAA;EACxD,IAAMc,GAAM,GAAAE,OAAA,GAAUY,SAAU,CAAA5B,MAAA,GAAS2B,SAAU,CAAA3B,MAAA,CAAA;AACnD,EAAA,KAAA,IAASa,CAAI,GAAAC,GAAA,GAAM,CAAG,EAAAD,CAAA,IAAK,GAAGA,CAAK,EAAA,EAAA;AACjC,IAAA,IAAMmB,WAAWnB,CAAI,GAAAkB,IAAA,CAAA;IAEjB,IAAAE,KAAA,GAAQ3B,MAAO,CAAAqB,SAAA,CAAUd,CAAE,CAAA,CAAA,IAAKP,MAAO,CAAAsB,SAAA,CAAUI,QAAS,CAAA,CAAA,IAAK,CAAM,CAAA,IAAAF,IAAA,CAAKjB,CAAM,CAAA,IAAA,CAAA,CAAA,CAAA;IACpF,IAAIoB,QAAQ,CAAG,EAAA;AACbH,MAAAA,IAAA,CAAKjB,IAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AACLoB,MAAAA,KAAA,IAAA,EAAA,CAAA;AACX,KAAA;AACUJ,IAAAA,SAAA,CAAAK,OAAA,CAAQC,MAAO,CAAAF,KAAK,CAAC,CAAA,CAAA;AACjC,GAAA;AACA,EAAA,IAAIjB,OAAS,EAAA;AACJ,IAAA,OAAAa,SAAA,CAAUO,MAAO,CAAAT,SAAA,CAAUU,KAAM,CAAAvB,GAAA,EAAKa,UAAU3B,MAAM,CAAC,CAAE,CAAAG,IAAA,CAAK,EAAE,CAAA,CAAA;AACzE,GAAA;AACI,EAAA,IAAA0E,WAAA,GAAchD,SAAU,CAAA1B,IAAA,CAAK,EAAE,CAAA,CAAA;EACnC,IAAI,CAACyE,QAAU,EAAA;IACCC,WAAA,GAAAA,WAAA,CAAYzD,OAAQ,CAAA,KAAA,EAAO,EAAE,CAAA,CAAA;AAC7C,GAAA;EACA,OAAOL,iBAAkB,CAAAW,aAAA,GAAgBmD,WAAc,GAAIA,GAAAA,CAAAA,MAAAA,CAAAA,WAAa,CAAA,CAAA,CAAA;AAC1E,CAAA;AAQgB,SAAAC,2BAAA,CAA4BxD,MAAcC,IAAsB,EAAA;AAC9E,EAAA,IAAID,IAAS,KAAAC,IAAA,EAAa,OAAA,GAAA,CAAA;EAC1B,IAAMG,aAAgB,GAAA4C,aAAA,CAAchD,IAAM,EAAAC,IAAA,EAAM,IAAI,CAAI,GAAA,CAAA,CAAA;AAClD,EAAA,IAAAI,SAAA,GAAYD,gBAAgBJ,IAAO,GAAAC,IAAA,CAAA;AACnC,EAAA,IAAAK,SAAA,GAAYF,gBAAgBH,IAAO,GAAAD,IAAA,CAAA;AAEzC,EAAA,IAAA,gBAAA,GAA2CK,SAAA,CAAUY,MAAM,GAAG,CAAA;AAAA,IAAA,iBAAA,GAAA,cAAA,CAAA,gBAAA,EAAA,CAAA,CAAA;IAAvDC,UAAY,GAAA,iBAAA,CAAA,CAAA,CAAA;AAAA,IAAA,kBAAA,GAAA,iBAAA,CAAA,CAAA,CAAA;AAAAC,IAAAA,cAAA,mCAAiB,GAAG,GAAA,kBAAA,CAAA;AACvC,EAAA,IAAA,gBAAA,GAA2Cb,SAAA,CAAUW,MAAM,GAAG,CAAA;AAAA,IAAA,iBAAA,GAAA,cAAA,CAAA,gBAAA,EAAA,CAAA,CAAA;IAAvDG,UAAY,GAAA,iBAAA,CAAA,CAAA,CAAA;AAAA,IAAA,kBAAA,GAAA,iBAAA,CAAA,CAAA,CAAA;AAAAC,IAAAA,cAAA,mCAAiB,GAAG,GAAA,kBAAA,CAAA;AACnC,EAAA,IAAAoC,aAAA,GAAgBL,0BAA2B,CAAAlC,UAAA,EAAYE,UAAU,CAAA,CAAA;AAEjE,EAAA,IAAAD,cAAA,KAAmB,GAAO,IAAAE,cAAA,KAAmB,GAAK,EAAA;AAC7C,IAAA,OAAAjB,aAAA,GAAgBqD,2BAAoBA,aAAA,CAAA,CAAA;AAC7C,GAAA;EAEA,IAAIC,aAAgB,GAAA,EAAA,CAAA;EACpB,IAAIC,YAAe,GAAAxC,cAAA,CAAA;AAEf,EAAA,IAAAA,cAAA,CAAezC,MAAS,GAAA2C,cAAA,CAAe3C,MAAQ,EAAA;AACjDiF,IAAAA,YAAA,GAAkBxC,EAAAA,CAAAA,MAAAA,CAAAA,cAAiB,CAAA1C,CAAAA,MAAAA,CAAAA,QAAA,CAAS4C,cAAe,CAAA3C,MAAA,GAASyC,eAAezC,MAAM,CAAA,CAAA,CAAA;AAC3F,GAAA;EAEA,IAAIoD,yBAA0B,CAAA6B,YAAA,EAActC,cAAc,CAAA,IAAK,CAAG,EAAA;AAChEqC,IAAAA,aAAA,GAAgBN,2BAA2BO,YAAc,EAAAtC,cAAA,EAAgB;AAAE3B,MAAAA,OAAA,EAAS,IAAA;AAAK,KAAC,CAAA,CAAA;AAC5F,GAAO,MAAA;IACL,IAAIyB,cAAe,CAAAzC,MAAA,GAAS2C,cAAe,CAAA3C,MAAA,IAAUyC,mBAAmB,GAAK,EAAA;AAC3EuC,MAAAA,aAAA,GAAgBN,sCAA+BO,YAAA,CAAA,EAAgBtC,gBAAgB;AAAEiC,QAAAA,QAAA,EAAU,IAAA;AAAK,OAAC,CAAA,CAAA;AACjGI,MAAAA,aAAA,GAAgBjF,QAAS,CAAA4C,cAAA,CAAe3C,MAAS,GAAAgF,aAAA,CAAchF,MAAM,CAAI,GAAAgF,aAAA,CAAA;AAC3E,KAAO,MAAA;AACLA,MAAAA,aAAA,GAAgBN,2BAA2BjC,cAAgB,EAAAE,cAAA,EAAgB;AAAE3B,QAAAA,OAAA,EAAS,IAAA;AAAK,OAAC,CAAA,CAAA;AAC9F,KAAA;AACgB+D,IAAAA,aAAA,GAAAL,0BAAA,CAA2BK,eAAe,GAAG,CAAA,CAAA;AAC/D,GAAA;AACM,EAAA,IAAAF,WAAA,GAAcG,gBAAgB,CAACD,aAAA,EAAeC,aAAa,CAAE,CAAA7E,IAAA,CAAK,GAAG,CAAI,GAAA4E,aAAA,CAAA;AACxE,EAAA,OAAArD,aAAA,GAAgBmD,yBAAkBA,WAAA,CAAA,CAAA;AAC3C,CAAA;AAQgB,SAAAK,mBAAA,CAAoB5D,MAAcC,IAAsB,EAAA;AAChE,EAAA,IAAA4D,eAAA,GAAkB7D,KAAK,CAAO,CAAA,KAAA,GAAA,CAAA;AAC9B,EAAA,IAAA8D,gBAAA,GAAmB7D,KAAK,CAAO,CAAA,KAAA,GAAA,CAAA;AACjC,EAAA,IAAA4D,eAAA,IAAmB,CAACC,gBAAkB,EAAA;AACxC,IAAA,IAAM5E,IAAI8B,sBAAuB,CAAAhB,IAAA,CAAKe,KAAM,CAAA,CAAC,GAAGd,IAAI,CAAA,CAAA;AACpD,IAAA,OAAA,GAAA,CAAA,MAAA,CAAWf,CAAA,CAAA,CAAA;AACb,GAAA;EACA,IAAI2E,mBAAmBC,gBAAkB,EAAA;AAChC,IAAA,OAAAN,2BAAA,CAA4BvD,KAAKc,KAAM,CAAA,CAAC,GAAGf,IAAK,CAAAe,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AACjE,GAAA;AACI,EAAA,IAAA,CAAC8C,mBAAmBC,gBAAkB,EAAA;IACxC,OAAO9C,sBAAuB,CAAAhB,IAAA,EAAMC,IAAK,CAAAc,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AACnD,GAAA;AACO,EAAA,OAAAyC,2BAAA,CAA4BxD,MAAMC,IAAI,CAAA,CAAA;AAC/C,CAAA;AAQgB,SAAA8D,cAAA,CAAe/D,MAAcC,IAAsB,EAAA;AAC3D,EAAA,IAAA4D,eAAA,GAAkB7D,KAAK,CAAO,CAAA,KAAA,GAAA,CAAA;AAC9B,EAAA,IAAA8D,gBAAA,GAAmB7D,KAAK,CAAO,CAAA,KAAA,GAAA,CAAA;AACjC,EAAA,IAAA4D,eAAA,IAAmB,CAACC,gBAAkB,EAAA;IACxC,OAAON,2BAA4B,CAAAvD,IAAA,EAAMD,IAAK,CAAAe,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AACxD,GAAA;EACA,IAAI8C,mBAAmBC,gBAAkB,EAAA;AACjC,IAAA,IAAA5E,CAAA,GAAI8B,uBAAuBf,IAAK,CAAAc,KAAA,CAAM,CAAC,CAAG,EAAAf,IAAA,CAAKe,KAAM,CAAA,CAAC,CAAC,CAAA,CAAA;AAC7D,IAAA,OAAA,GAAA,CAAA,MAAA,CAAW7B,CAAA,CAAA,CAAA;AACb,GAAA;AACI,EAAA,IAAA,CAAC2E,mBAAmBC,gBAAkB,EAAA;IACxC,OAAON,2BAA4B,CAAAxD,IAAA,EAAMC,IAAK,CAAAc,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AACxD,GAAA;AACO,EAAA,OAAAC,sBAAA,CAAuBhB,MAAMC,IAAI,CAAA,CAAA;AAC1C,CAAA;AAQO,SAAS+D,kBACd,CAAAC,MAAA,EACQ;EAAA,IADiBC,aAAwB,uEAAA,CAAA,CAAA;EAAA,IAAGjB,kFAAc,IAC1D,CAAA;AACR,EAAA,IAAI,CAACA,WAAA,EAAa,OAAOjE,MAAO,CAAAiF,MAAM,CAAE,CAAAE,OAAA,CAAQD,aAAa,CAAA,CAAA;EAC7D,IAAI,OAAOD,MAAW,KAAA,QAAA,EAAU,OAAOpD,OAAOoD,MAAM,CAAA,CAAA;AACpD,EAAA,IAAA,aAAA,GAAqBA,MAAA,CAAOhD,MAAM,GAAG,CAAA;AAAA,IAAA,cAAA,GAAA,cAAA,CAAA,aAAA,EAAA,CAAA,CAAA;IAA9BjB,IAAM,GAAA,cAAA,CAAA,CAAA,CAAA;IAAAC,IAAI,GAAA,cAAA,CAAA,CAAA,CAAA,CAAA;EAEjB,IAAI,CAACA,IAAM,EAAA;AACF,IAAA,OAAAiE,aAAA,GAAgB,CAACD,MAAS,EAAAxF,QAAA,CAASyF,aAAa,CAAE,CAAA,CAAErF,IAAK,CAAA,GAAG,CAAI,GAAAoF,MAAA,CAAA;AACzE,GAAA;EAEA,IAAIC,kBAAkB,CAAG,EAAA;AAChB,IAAA,OAAAlF,MAAA,CAAOiB,KAAK,CAAE,CAAA,CAAA,IAAK,IAAIe,sBAAuB,CAAAhB,IAAA,EAAM,GAAG,CAAI,GAAAA,IAAA,CAAA;AACpE,GAAA;EAEA,IAAI0D,aAAgB,GAAAzD,IAAA,CAAKc,KAAM,CAAA,CAAA,EAAGmD,aAAa,CAAA,CAAA;AAC3C,EAAA,IAAAjE,IAAA,CAAKvB,SAASwF,aAAe,EAAA;IACbR,aAAA,IAAAjF,QAAA,CAASyF,aAAgB,GAAAjE,IAAA,CAAKvB,MAAM,CAAA,CAAA;AACxD,GAAO,MAAA;AACWgF,IAAAA,aAAA,GAAA1E,MAAA,CAAOiB,KAAKiE,aAAc,CAAA,CAAA,IAAK,IAC3ClD,sBAAuB,CAAA0C,aAAA,EAAe,GAAG,CACzC,GAAAA,aAAA,CAAA;AACN,GAAA;EACA,OAAO,CAAC1D,IAAA,EAAM0D,aAAa,CAAA,CAAE7E,KAAK,GAAG,CAAA,CAAA;AACvC,CAAA;AAMO,SAASuF,cAAcrF,GAAqB,EAAA;AACjD,EAAA,IAAA,UAAA,GAAqBA,GAAA,CAAIkC,MAAM,GAAG,CAAA;AAAA,IAAA,WAAA,GAAA,cAAA,CAAA,UAAA,EAAA,CAAA,CAAA;IAA3BjB,IAAM,GAAA,WAAA,CAAA,CAAA,CAAA;IAAAC,IAAI,GAAA,WAAA,CAAA,CAAA,CAAA,CAAA;AACjB,EAAA,IAAA,WAAA,GAAoClB,GAAA,CAAIkC,MAAM,GAAG,CAAA;AAAA,IAAA,WAAA,GAAA,cAAA,CAAA,WAAA,EAAA,CAAA,CAAA;IAA1CoD,OAAS,GAAA,WAAA,CAAA,CAAA,CAAA;AAAA,IAAA,YAAA,GAAA,WAAA,CAAA,CAAA,CAAA;AAAAC,IAAAA,WAAA,6BAAc,EAAE,GAAA,YAAA,CAAA;AAC1B,EAAA,IAAAC,SAAA,GAAYvF,OAAOiB,IAAI,CAAA,CAAA;AAC7B,EAAA,IAAA,kBAAA,GAAkBqE,WAAA,CAAYrD,MAAM,GAAG,CAAA;AAAA,IAAA,mBAAA,GAAA,cAAA,CAAA,kBAAA,EAAA,CAAA,CAAA;IAAhCvB,OAAO,GAAA,mBAAA,CAAA,CAAA,CAAA,CAAA;AACV,EAAA,IAAA6E,SAAA,GAAY7E,QAAQhB,MAAQ,EAAA;IAC9B,IAAM8F,YAAe,GAAA/F,QAAA,CAAS8F,SAAY,GAAA7E,OAAA,CAAQhB,MAAM,CAAA,CAAA;IACxD,OAAOsB,IAAK,CAAAF,OAAA,CAAQ,WAAa,EAAA,EAAE,CAAI,GAAA0E,YAAA,CAAA;AACzC,GAAA;AACM,EAAA,IAAAC,EAAA,GAAKJ,QAAQvE,OAAQ,CAAA,KAAA,EAAO,EAAE,CAAI,GAAAJ,OAAA,CAAQqB,KAAM,CAAA,CAAA,EAAGwD,SAAS,CAAA,CAAA;AAC5D,EAAA,IAAAG,EAAA,GAAKhF,OAAQ,CAAAqB,KAAA,CAAMwD,SAAS,CAAA,CAAA;AAClC,EAAA,OAAOG,KAAK,CAACD,EAAA,EAAIC,EAAE,CAAE,CAAA7F,IAAA,CAAK,GAAG,CAAI,GAAA4F,EAAA,CAAA;AACnC;;;;"}