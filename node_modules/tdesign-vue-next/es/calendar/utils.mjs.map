{"version":3,"file":"utils.mjs","sources":["../../src/calendar/utils.ts"],"sourcesContent":["import dayjs from 'dayjs';\n\nimport { CalendarCell } from './type';\n\n// 组件的一些常量\nimport { FIRST_MONTH_OF_YEAR, LAST_MONTH_OF_YEAR, DAY_CN_MAP } from './const';\n\n/**\n * 获取一个日期是周几（1~7）\n */\nexport const getDay = (dt: Date): number => {\n  let day = dayjs(dt).day();\n  if (day === 0) {\n    day = 7;\n  }\n  return day;\n};\n\n/**\n * 获取星期的中文\n * @param num 星期（1~7）\n */\nexport const getDayCn = (num: number): string => {\n  let re = '';\n  const numStr = num.toString();\n  if (numStr in DAY_CN_MAP) {\n    re = DAY_CN_MAP[numStr];\n  }\n  return re;\n};\n\n/**\n * 获取一个日期在日历上的列下标\n * @param firstDayOfWeek 周起始日（1~7）\n * @param dt\n */\nexport const getCellColIndex = (firstDayOfWeek: number, dt: Date): number => {\n  let re = 0;\n  const day = getDay(dt);\n  if (day >= firstDayOfWeek) {\n    re = day - firstDayOfWeek;\n  } else {\n    re = 7 - firstDayOfWeek + day;\n  }\n  return re;\n};\n/**\n * 返回日期+天数（天数可以负数）\n */\nexport const addDate = (dt: Date, days: number) => {\n  const d = new Date(dt);\n  d.setDate(d.getDate() + days);\n  return d;\n};\n\n/**\n * 创建月历单元格数据\n * @param year 月历年份\n * @param curDate 当前日期\n */\nexport const createYearCellsData = (year: number, curDate: dayjs.Dayjs, format: string): CalendarCell[] => {\n  const monthsArr: CalendarCell[] = [];\n  const isCurYear = curDate.year() === year;\n  for (let num = FIRST_MONTH_OF_YEAR; num <= LAST_MONTH_OF_YEAR; num++) {\n    const date = new Date(year, num - 1);\n    const curDateMon = parseInt(curDate.format('M'), 10);\n    const isCurrent = isCurYear && curDateMon === num;\n    monthsArr.push({\n      mode: 'year',\n      isCurrent,\n      date,\n      formattedDate: dayjs(date).format(format),\n      filterDate: null,\n      formattedFilterDate: null,\n      isShowWeekend: true,\n    });\n  }\n\n  return monthsArr;\n};\n\n/**\n * 创建日历单元格数据\n * @param year 日历年份\n * @param month 日历月份\n * @param firstDayOfWeek 周起始日（1~7）\n * @param curDate 当前日期\n * @param format 日期格式\n */\nexport const createMonthCellsData = (\n  year: number,\n  month: number,\n  firstDayOfWeek: number,\n  curDate: dayjs.Dayjs,\n  format: string,\n): CalendarCell[][] => {\n  const daysArr: CalendarCell[][] = [];\n  // 当前月份的开始日期\n  const begin: Date = dayjs(`${year}-${month}`).startOf('month').toDate();\n  // 当前月份的结束日期\n  const end: Date = dayjs(`${year}-${month}`).endOf('month').toDate();\n  const days = end.getDate();\n\n  const beginDateColIndex = getCellColIndex(firstDayOfWeek, begin);\n  let arr = [];\n  let num = 1;\n\n  const createCellData = (belongTo: number, isCurrent: boolean, date: Date, weekOrder: number): CalendarCell => {\n    const day = getDay(date);\n    return {\n      mode: 'month',\n      belongTo,\n      isCurrent,\n      day,\n      weekOrder,\n      date,\n      formattedDate: dayjs(date).format(format),\n      filterDate: null,\n      formattedFilterDate: null,\n      isShowWeekend: true,\n    };\n  };\n\n  // 添加上个月中和当前月第一天同一周的日期\n  for (let i = 0; i < beginDateColIndex; i++) {\n    const date = addDate(begin, i - beginDateColIndex);\n    arr.push(createCellData(-1, false, date, num));\n    if (arr.length === 7) {\n      daysArr.push(arr);\n      arr = [];\n      num += 1;\n    }\n  }\n  for (let i = 0; i < days; i++) {\n    const date = addDate(begin, i);\n    arr.push(createCellData(0, curDate.isSame(dayjs(date)), date, num));\n    if (arr.length === 7) {\n      daysArr.push(arr);\n      arr = [];\n      num += 1;\n    }\n  }\n  // 添加下个月中和当前月最后同一周的日期\n  if (arr.length) {\n    const nextMonthCellNum = 7 - arr.length;\n    for (let i = 0; i < nextMonthCellNum; i++) {\n      const date = addDate(end, i + 1);\n      arr.push(createCellData(1, false, date, num));\n    }\n    daysArr.push(arr);\n  }\n\n  return daysArr;\n};\n\n/**\n * 根据当前时间创建一个默认日期\n * @returns 当前日期都dayjs对象\n */\nexport const createDefaultCurDate = (): dayjs.Dayjs => dayjs(dayjs().format('YYYY-MM-DD'));\n"],"names":["getDay","dt","day","dayjs","getDayCn","num","re","numStr","toString","DAY_CN_MAP","getCellColIndex","firstDayOfWeek","addDate","days","d","Date","setDate","getDate","createYearCellsData","year","curDate","format","monthsArr","isCurYear","FIRST_MONTH_OF_YEAR","LAST_MONTH_OF_YEAR","date","curDateMon","parseInt","isCurrent","push","mode","formattedDate","filterDate","formattedFilterDate","isShowWeekend","createMonthCellsData","month","daysArr","begin","startOf","toDate","end","endOf","beginDateColIndex","arr","createCellData","belongTo","weekOrder","i","length","isSame","nextMonthCellNum","createDefaultCurDate"],"mappings":"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"}