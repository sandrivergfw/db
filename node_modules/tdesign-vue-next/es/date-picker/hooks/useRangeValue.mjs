/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../_chunks/dep-a9a65d10.mjs';
import { toRefs, computed, ref, watchEffect } from 'vue';
import { d as dayjs } from '../../_chunks/dep-ba2c55ff.mjs';
import useVModel from '../../hooks/useVModel.mjs';
import { parseToDayjs, getDefaultFormat, isValidDate, formatDate, formatTime } from '../../_common/js/date-picker/format.mjs';
import { extractTimeFormat } from '../../_common/js/date-picker/utils.mjs';
import '../../_chunks/dep-7fde6385.mjs';
import '../../_chunks/dep-178810f1.mjs';
import '../../_chunks/dep-bedb7d80.mjs';
import '../../_chunks/dep-96027ed5.mjs';
import '../../_chunks/dep-9bb59c1a.mjs';
import '../../_chunks/dep-61d894c9.mjs';
import '../../_chunks/dep-bfc93151.mjs';
import '../../_chunks/dep-cacce51a.mjs';
import '../../_chunks/dep-1375bf98.mjs';
import '../../_chunks/dep-74473837.mjs';
import '../../_common/js/log/index.mjs';
import '../../_common/js/log/log.mjs';
import '../../_chunks/dep-b077039f.mjs';
import '../../_chunks/dep-cdc28404.mjs';
import '../../_chunks/dep-bc166b41.mjs';
import '../../_chunks/dep-7a4db73f.mjs';
import '../../_chunks/dep-ecf1f329.mjs';
import '../../_chunks/dep-7a8fb00c.mjs';
import '../../_chunks/dep-560cf0c7.mjs';
import '../../_chunks/dep-e97b14c2.mjs';
import '../../_chunks/dep-ea278d31.mjs';
import '../../_chunks/dep-da01978e.mjs';
import '../../_chunks/dep-2539b27d.mjs';
import '../../_chunks/dep-03d7fa8b.mjs';

var PARTIAL_MAP = {
  first: "start",
  second: "end"
};
function initYearMonthTime(_ref) {
  var value = _ref.value,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? "date" : _ref$mode,
    format = _ref.format,
    _ref$timeFormat = _ref.timeFormat,
    timeFormat = _ref$timeFormat === void 0 ? "HH:mm:ss" : _ref$timeFormat,
    enableTimePicker = _ref.enableTimePicker;
  var defaultYearMonthTime = {
    year: [dayjs().year(), dayjs().year()],
    month: [dayjs().month(), dayjs().month()],
    time: [dayjs().format(timeFormat), dayjs().format(timeFormat)]
  };
  if (mode === "year") {
    defaultYearMonthTime.year[1] += 10;
  } else if (mode === "month" || mode === "quarter") {
    defaultYearMonthTime.year[1] += 1;
  } else if ((mode === "date" || mode === "week") && !enableTimePicker) {
    defaultYearMonthTime.month[1] += 1;
  }
  if (!value || !Array.isArray(value) || !value.length) {
    return defaultYearMonthTime;
  }
  return {
    year: value.map(function (v) {
      return parseToDayjs(v, format).year();
    }),
    month: value.map(function (v) {
      return parseToDayjs(v, format).month();
    }),
    time: value.map(function (v) {
      return parseToDayjs(v, format).format(timeFormat);
    })
  };
}
function useRangeValue(props) {
  var _toRefs = toRefs(props),
    valueFromProps = _toRefs.value,
    modelValue = _toRefs.modelValue;
  var _useVModel = useVModel(valueFromProps, modelValue, props.defaultValue, props.onChange),
    _useVModel2 = _slicedToArray(_useVModel, 2),
    value = _useVModel2[0],
    onChange = _useVModel2[1];
  var formatRef = computed(function () {
    return getDefaultFormat({
      mode: props.mode,
      format: props.format,
      enableTimePicker: props.enableTimePicker
    });
  });
  if (props.enableTimePicker) {
    if (!extractTimeFormat(formatRef.value.format)) console.error("format: ".concat(formatRef.value.format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
  }
  if (!Array.isArray(value.value)) {
    console.error("typeof value: ".concat(value.value, " must be Array!"));
  } else if (!isValidDate(value.value, formatRef.value.format)) {
    console.error("value: ".concat(value.value, " is invalid dateTime! Check whether the value is consistent with format: ").concat(formatRef.value.format));
  }
  var isFirstValueSelected = ref(false);
  var time = ref(initYearMonthTime({
    value: value.value,
    mode: props.mode,
    format: formatRef.value.format,
    timeFormat: formatRef.value.timeFormat
  }).time);
  var month = ref(initYearMonthTime({
    value: value.value,
    mode: props.mode,
    format: formatRef.value.format,
    enableTimePicker: props.enableTimePicker
  }).month);
  var year = ref(initYearMonthTime({
    value: value.value,
    mode: props.mode,
    format: formatRef.value.format
  }).year);
  var cacheValue = ref(formatDate(value.value, {
    format: formatRef.value.format
  }));
  watchEffect(function () {
    if (!value.value) {
      cacheValue.value = [];
      return;
    }
    if (!isValidDate(value.value, formatRef.value.format)) return;
    cacheValue.value = formatDate(value.value, {
      format: formatRef.value.format
    });
    time.value = formatTime(value.value, formatRef.value.timeFormat);
  });
  return {
    year: year,
    month: month,
    value: value,
    time: time,
    isFirstValueSelected: isFirstValueSelected,
    cacheValue: cacheValue,
    onChange: onChange
  };
}

export { PARTIAL_MAP, useRangeValue as default, initYearMonthTime };
//# sourceMappingURL=useRangeValue.mjs.map
