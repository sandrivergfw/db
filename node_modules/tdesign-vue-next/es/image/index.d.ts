import { TdImageProps } from './type';
import './style';
export declare type ImageProps = TdImageProps;
export * from './type';
export declare const Image: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            position: string;
            lazy: boolean;
            disabled: boolean;
            alt: string;
            shape: "square" | "round" | "circle";
            src: string;
            fit: "fill" | "none" | "contain" | "cover" | "scale-down";
            overlayTrigger: "always" | "hover";
            gallery: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            alt: {
                type: StringConstructor;
                default: string;
            };
            disabled: BooleanConstructor;
            error: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            fit: {
                type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
                default: "fill" | "none" | "contain" | "cover" | "scale-down";
                validator(val: "fill" | "none" | "contain" | "cover" | "scale-down"): boolean;
            };
            gallery: BooleanConstructor;
            lazy: BooleanConstructor;
            loading: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            overlayContent: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            overlayTrigger: {
                type: import("vue").PropType<"always" | "hover">;
                default: "always" | "hover";
                validator(val: "always" | "hover"): boolean;
            };
            placeholder: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            position: {
                type: StringConstructor;
                default: string;
            };
            shape: {
                type: import("vue").PropType<"square" | "round" | "circle">;
                default: "square" | "round" | "circle";
                validator(val: "square" | "round" | "circle"): boolean;
            };
            src: {
                type: StringConstructor;
                default: string;
            };
            onError: import("vue").PropType<() => void>;
            onLoad: import("vue").PropType<() => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "position" | "lazy" | "disabled" | "alt" | "shape" | "src" | "fit" | "overlayTrigger" | "gallery">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            alt: {
                type: StringConstructor;
                default: string;
            };
            disabled: BooleanConstructor;
            error: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            fit: {
                type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
                default: "fill" | "none" | "contain" | "cover" | "scale-down";
                validator(val: "fill" | "none" | "contain" | "cover" | "scale-down"): boolean;
            };
            gallery: BooleanConstructor;
            lazy: BooleanConstructor;
            loading: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            overlayContent: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            overlayTrigger: {
                type: import("vue").PropType<"always" | "hover">;
                default: "always" | "hover";
                validator(val: "always" | "hover"): boolean;
            };
            placeholder: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            position: {
                type: StringConstructor;
                default: string;
            };
            shape: {
                type: import("vue").PropType<"square" | "round" | "circle">;
                default: "square" | "round" | "circle";
                validator(val: "square" | "round" | "circle"): boolean;
            };
            src: {
                type: StringConstructor;
                default: string;
            };
            onError: import("vue").PropType<() => void>;
            onLoad: import("vue").PropType<() => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            position: string;
            lazy: boolean;
            disabled: boolean;
            alt: string;
            shape: "square" | "round" | "circle";
            src: string;
            fit: "fill" | "none" | "contain" | "cover" | "scale-down";
            overlayTrigger: "always" | "hover";
            gallery: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            default: string;
        };
        disabled: BooleanConstructor;
        error: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fit: {
            type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
            default: "fill" | "none" | "contain" | "cover" | "scale-down";
            validator(val: "fill" | "none" | "contain" | "cover" | "scale-down"): boolean;
        };
        gallery: BooleanConstructor;
        lazy: BooleanConstructor;
        loading: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        overlayContent: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        overlayTrigger: {
            type: import("vue").PropType<"always" | "hover">;
            default: "always" | "hover";
            validator(val: "always" | "hover"): boolean;
        };
        placeholder: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        position: {
            type: StringConstructor;
            default: string;
        };
        shape: {
            type: import("vue").PropType<"square" | "round" | "circle">;
            default: "square" | "round" | "circle";
            validator(val: "square" | "round" | "circle"): boolean;
        };
        src: {
            type: StringConstructor;
            default: string;
        };
        onError: import("vue").PropType<() => void>;
        onLoad: import("vue").PropType<() => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    alt: {
        type: StringConstructor;
        default: string;
    };
    disabled: BooleanConstructor;
    error: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fit: {
        type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
        default: "fill" | "none" | "contain" | "cover" | "scale-down";
        validator(val: "fill" | "none" | "contain" | "cover" | "scale-down"): boolean;
    };
    gallery: BooleanConstructor;
    lazy: BooleanConstructor;
    loading: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    overlayContent: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    overlayTrigger: {
        type: import("vue").PropType<"always" | "hover">;
        default: "always" | "hover";
        validator(val: "always" | "hover"): boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    shape: {
        type: import("vue").PropType<"square" | "round" | "circle">;
        default: "square" | "round" | "circle";
        validator(val: "square" | "round" | "circle"): boolean;
    };
    src: {
        type: StringConstructor;
        default: string;
    };
    onError: import("vue").PropType<() => void>;
    onLoad: import("vue").PropType<() => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    position: string;
    lazy: boolean;
    disabled: boolean;
    alt: string;
    shape: "square" | "round" | "circle";
    src: string;
    fit: "fill" | "none" | "contain" | "cover" | "scale-down";
    overlayTrigger: "always" | "hover";
    gallery: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Image;
