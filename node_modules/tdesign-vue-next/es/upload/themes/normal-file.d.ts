import { UploadFile } from '../type';
import { CommonDisplayFileProps } from '../interface';
export interface NormalFileProps extends CommonDisplayFileProps {
    multiple: boolean;
}
declare const NormalFile: import("vue").DefineComponent<{
    files: import("vue").PropType<UploadFile[]>;
    toUploadFiles: import("vue").PropType<UploadFile[]>;
    displayFiles: import("vue").PropType<UploadFile[]>;
    theme: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
    abridgeName: import("vue").PropType<number[]>;
    placeholder: StringConstructor;
    classPrefix: StringConstructor;
    tips: StringConstructor;
    status: import("vue").PropType<"error" | "default" | "success" | "warning">;
    locale: import("vue").PropType<import("../..").UploadConfig>;
    sizeOverLimitMessage: StringConstructor;
    autoUpload: BooleanConstructor;
    disabled: BooleanConstructor;
    uploading: BooleanConstructor;
    tipsClasses: import("vue").PropType<string>;
    errorClasses: import("vue").PropType<string[]>;
    default: import("vue").PropType<(h: typeof import("vue").h) => import("../../common").SlotReturnValue>;
    fileListDisplay: import("vue").PropType<(h: typeof import("vue").h, props: {
        files: UploadFile[];
        dragEvents?: import("../type").UploadDisplayDragEvents;
    }) => import("../../common").SlotReturnValue>;
    onRemove: import("vue").PropType<(p: import("../type").UploadRemoveContext) => void>;
    multiple: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    files: import("vue").PropType<UploadFile[]>;
    toUploadFiles: import("vue").PropType<UploadFile[]>;
    displayFiles: import("vue").PropType<UploadFile[]>;
    theme: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
    abridgeName: import("vue").PropType<number[]>;
    placeholder: StringConstructor;
    classPrefix: StringConstructor;
    tips: StringConstructor;
    status: import("vue").PropType<"error" | "default" | "success" | "warning">;
    locale: import("vue").PropType<import("../..").UploadConfig>;
    sizeOverLimitMessage: StringConstructor;
    autoUpload: BooleanConstructor;
    disabled: BooleanConstructor;
    uploading: BooleanConstructor;
    tipsClasses: import("vue").PropType<string>;
    errorClasses: import("vue").PropType<string[]>;
    default: import("vue").PropType<(h: typeof import("vue").h) => import("../../common").SlotReturnValue>;
    fileListDisplay: import("vue").PropType<(h: typeof import("vue").h, props: {
        files: UploadFile[];
        dragEvents?: import("../type").UploadDisplayDragEvents;
    }) => import("../../common").SlotReturnValue>;
    onRemove: import("vue").PropType<(p: import("../type").UploadRemoveContext) => void>;
    multiple: BooleanConstructor;
}>>, {
    disabled: boolean;
    multiple: boolean;
    autoUpload: boolean;
    uploading: boolean;
}>;
export default NormalFile;
