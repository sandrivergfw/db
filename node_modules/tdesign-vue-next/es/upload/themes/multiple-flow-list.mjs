/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-4cfcf90d.mjs';
import { _ as _defineProperty } from '../../_chunks/dep-b077039f.mjs';
import { isVNode, defineComponent, toRefs, computed, createVNode, mergeProps } from 'vue';
import { _ as _typeof } from '../../_chunks/dep-178810f1.mjs';
import '../../_chunks/dep-bedb7d80.mjs';
import { BrowseIcon, DeleteIcon, CheckCircleFilledIcon, ErrorCircleFilledIcon, TimeFilledIcon } from 'tdesign-icons-vue-next';
import { useGlobalIcon } from '../../hooks/useGlobalIcon.mjs';
import { ImageViewer } from '../../image-viewer/index.mjs';
import { commonProps } from '../constants.mjs';
import { Button } from '../../button/index.mjs';
import useDrag from '../hooks/useDrag.mjs';
import { abridgeName, returnFileSize } from '../../_common/js/upload/utils.mjs';
import { Loading } from '../../loading/index.mjs';
import { Link } from '../../link/index.mjs';
import '../../hooks/index.mjs';
import { useTNodeJSX } from '../../hooks/tnode.mjs';
import '../../_chunks/dep-7fde6385.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-10b9d296.mjs';
import '../../_chunks/dep-dc72ac1e.mjs';
import '../../_chunks/dep-55f8205a.mjs';
import '../../_chunks/dep-4975791d.mjs';
import '../../_chunks/dep-ecf1f329.mjs';
import '../../_chunks/dep-bfc93151.mjs';
import '../../_chunks/dep-7a4db73f.mjs';
import '../../_chunks/dep-da01978e.mjs';
import '../../_chunks/dep-e97b14c2.mjs';
import '../../_chunks/dep-df662d99.mjs';
import '../../_chunks/dep-2539b27d.mjs';
import '../../_chunks/dep-74473837.mjs';
import '../../_chunks/dep-671fd175.mjs';
import '../../_chunks/dep-708d2dc7.mjs';
import '../../_chunks/dep-df473a63.mjs';
import '../../_chunks/dep-2aad0459.mjs';
import '../../_chunks/dep-cacce51a.mjs';
import '../../_chunks/dep-03d7fa8b.mjs';
import '../../_chunks/dep-ea278d31.mjs';
import '../../_chunks/dep-3374d433.mjs';
import '../../_chunks/dep-180ba4d7.mjs';
import '../../_chunks/dep-0b20cec5.mjs';
import '../../_chunks/dep-560cf0c7.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';
import '../../image-viewer/image-viewer.mjs';
import '../../_chunks/dep-a9a65d10.mjs';
import '../../image-viewer/props.mjs';
import '../../image-viewer/base/ImageModalIcon.mjs';
import '../../_chunks/dep-de4be2ca.mjs';
import '../../_chunks/dep-61d894c9.mjs';
import '../../_chunks/dep-1375bf98.mjs';
import '../../_chunks/dep-cd4a1d40.mjs';
import '../../_chunks/dep-5179d432.mjs';
import '../../_chunks/dep-7a8fb00c.mjs';
import '../../_chunks/dep-9bb59c1a.mjs';
import '../../_chunks/dep-96027ed5.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-64597fc0.mjs';
import '../../_chunks/dep-cddb9124.mjs';
import '../../_chunks/dep-a63b383f.mjs';
import '../../image-viewer/base/ImageViewerUtils.mjs';
import '../../tooltip/index.mjs';
import '../../tooltip/tooltip.mjs';
import '../../tooltip/props.mjs';
import '../../popup/props.mjs';
import '../../popup/index.mjs';
import '../../popup/popup.mjs';
import '@popperjs/core';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../../_common/js/utils/set-style.mjs';
import '../../popup/container.mjs';
import '../../hooks/useVModel.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../popup/type.mjs';
import '../../tooltip/util.mjs';
import '../../tooltip/type.mjs';
import '../../image-viewer/utils.mjs';
import '../../image-viewer/base/ImageItem.mjs';
import '../../image-viewer/hooks.mjs';
import '../../image-viewer/base/ImageViewerModal.mjs';
import '../../dialog/index.mjs';
import '../../dialog/dialog.mjs';
import '../../dialog/props.mjs';
import '../../utils/transfer-dom.mjs';
import '../../dialog/hooks.mjs';
import '../../button/button.mjs';
import '../../button/props.mjs';
import '../../hooks/useRipple.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../utils/set-style.mjs';
import '../../form/hooks.mjs';
import '../../loading/directive.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_common/js/loading/circle-adapter.mjs';
import '../../_common/js/utils/helper.mjs';
import '../../_chunks/dep-b9d3e48f.mjs';
import '../../loading/props.mjs';
import '../../loading/type.mjs';
import '../../button/type.mjs';
import '../../hooks/useDestroyOnClose.mjs';
import '../../dialog/stack.mjs';
import '../../dialog/type.mjs';
import '../../dialog/plugin.mjs';
import '../../hooks/useDefaultValue.mjs';
import '../../image-viewer/const.mjs';
import '../../image-viewer/type.mjs';
import '../../_common/js/log/log.mjs';
import '../../link/link.mjs';
import '../../link/props.mjs';
import '../../link/type.mjs';
import '../../hooks/icon.mjs';
import '../../hooks/slot.mjs';
import '../../hooks/useCommonClassName.mjs';
import '../../hooks/useVirtualScroll.mjs';

var classnames = {exports: {}};

(function (module) {
  /* global define */

  (function () {
    'use strict';

    var hasOwn = {}.hasOwnProperty;
    var nativeCodeString = '[native code]';
    function classNames() {
      var classes = [];
      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (!arg) continue;
        var argType = _typeof(arg);
        if (argType === 'string' || argType === 'number') {
          classes.push(arg);
        } else if (Array.isArray(arg)) {
          if (arg.length) {
            var inner = classNames.apply(null, arg);
            if (inner) {
              classes.push(inner);
            }
          }
        } else if (argType === 'object') {
          if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
            classes.push(arg.toString());
            continue;
          }
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        }
      }
      return classes.join(' ');
    }
    if ('object' !== 'undefined' && module.exports) {
      classNames["default"] = classNames;
      module.exports = classNames;
    } else if (typeof undefined === 'function' && _typeof(undefined.amd) === 'object' && undefined.amd) {
      // register as 'classnames', consistent with npm package name
      undefined('classnames', [], function () {
        return classNames;
      });
    } else {
      window.classNames = classNames;
    }
  })();
})(classnames);
var classNames = classnames.exports;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var MultipleFlowList = defineComponent({
  name: "UploadMultipleFlowList",
  props: _objectSpread(_objectSpread({}, commonProps), {}, {
    uploadFiles: Function,
    cancelUpload: Function,
    dragEvents: Object,
    disabled: Boolean,
    isBatchUpload: Boolean,
    draggable: Boolean,
    onPreview: Function
  }),
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var _toRefs = toRefs(props),
      locale = _toRefs.locale,
      uploading = _toRefs.uploading,
      disabled = _toRefs.disabled,
      displayFiles = _toRefs.displayFiles,
      classPrefix = _toRefs.classPrefix;
    var uploadPrefix = "".concat(classPrefix.value, "-upload");
    var renderTNodeJSX = useTNodeJSX();
    var _useGlobalIcon = useGlobalIcon({
        BrowseIcon: BrowseIcon,
        DeleteIcon: DeleteIcon,
        CheckCircleFilledIcon: CheckCircleFilledIcon,
        ErrorCircleFilledIcon: ErrorCircleFilledIcon,
        TimeFilledIcon: TimeFilledIcon
      }),
      BrowseIcon$1 = _useGlobalIcon.BrowseIcon,
      DeleteIcon$1 = _useGlobalIcon.DeleteIcon,
      CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon,
      TimeFilledIcon$1 = _useGlobalIcon.TimeFilledIcon;
    var drag = useDrag(props.dragEvents);
    var uploadText = computed(function () {
      if (uploading.value) return "".concat(locale.value.progress.uploadingText);
      return locale.value.triggerUploadText.normal;
    });
    var innerDragEvents = computed(function () {
      var draggable = props.draggable === void 0 ? true : props.draggable;
      return draggable ? {
        onDrop: drag.handleDrop,
        onDragenter: drag.handleDragenter,
        onDragover: drag.handleDragover,
        onDragleave: drag.handleDragleave
      } : {};
    });
    var getStatusMap = function getStatusMap() {
      var iconMap = {
        success: createVNode(CheckCircleFilledIcon$1, null, null),
        fail: createVNode(ErrorCircleFilledIcon$1, null, null),
        progress: createVNode(Loading, null, null),
        waiting: createVNode(TimeFilledIcon$1, null, null)
      };
      var progress = locale.value.progress;
      var textMap = {
        success: progress === null || progress === void 0 ? void 0 : progress.successText,
        fail: progress === null || progress === void 0 ? void 0 : progress.failText,
        progress: progress === null || progress === void 0 ? void 0 : progress.uploadingText,
        waiting: progress === null || progress === void 0 ? void 0 : progress.waitingText
      };
      return {
        iconMap: iconMap,
        textMap: textMap
      };
    };
    var renderEmpty = function renderEmpty() {
      return createVNode("div", {
        "class": "".concat(uploadPrefix, "__flow-empty")
      }, [drag.dragActive.value ? locale.value.dragger.dragDropText : locale.value.dragger.clickAndDragText]);
    };
    var renderImgItem = function renderImgItem(file, index) {
      var _getStatusMap = getStatusMap(),
        iconMap = _getStatusMap.iconMap,
        textMap = _getStatusMap.textMap;
      return createVNode("li", {
        "class": "".concat(uploadPrefix, "__card-item"),
        "key": file.name + index + file.percent + file.status
      }, [createVNode("div", {
        "class": classNames(["".concat(uploadPrefix, "__card-content"), _defineProperty({}, "".concat(classPrefix.value, "-is-bordered"), file.status !== "waiting")])
      }, [["fail", "progress"].includes(file.status) && createVNode("div", {
        "class": "".concat(uploadPrefix, "__card-status-wrap")
      }, [iconMap[file.status], createVNode("p", null, [textMap[file.status], file.status === "progress" ? " ".concat(file.percent, "%") : ""])]), (["waiting", "success"].includes(file.status) || !file.status && file.url) && createVNode("img", {
        "class": "".concat(uploadPrefix, "__card-image"),
        "src": file.url || "//tdesign.gtimg.com/tdesign-default-img.png"
      }, null), createVNode("div", {
        "class": "".concat(uploadPrefix, "__card-mask")
      }, [file.url && createVNode("span", {
        "class": "".concat(uploadPrefix, "__card-mask-item")
      }, [createVNode(ImageViewer, {
        "images": displayFiles.value.map(function (t) {
          return t.url;
        }),
        "defaultIndex": index,
        "trigger": function trigger(h2, _ref3) {
          var open = _ref3.open;
          return createVNode(BrowseIcon$1, {
            "onClick": function onClick(_ref4) {
              var _props$onPreview;
              var e = _ref4.e;
              open();
              (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 ? void 0 : _props$onPreview.call(props, {
                file: file,
                index: index,
                e: e
              });
            }
          }, null);
        }
      }, null), createVNode("span", {
        "class": "".concat(uploadPrefix, "__card-mask-item-divider")
      }, null)]), !disabled.value && createVNode("span", {
        "class": "".concat(uploadPrefix, "__card-mask-item"),
        "onClick": function onClick(e) {
          return props.onRemove({
            e: e,
            index: index,
            file: file
          });
        }
      }, [createVNode(DeleteIcon$1, null, null)])])]), createVNode("p", {
        "class": "".concat(uploadPrefix, "__card-name")
      }, [abridgeName(file.name)])]);
    };
    var renderStatus = function renderStatus(file) {
      var _getStatusMap2 = getStatusMap(),
        iconMap = _getStatusMap2.iconMap,
        textMap = _getStatusMap2.textMap;
      return createVNode("div", {
        "class": "".concat(uploadPrefix, "__flow-status")
      }, [iconMap[file.status], createVNode("span", null, [textMap[file.status], file.status === "progress" ? " ".concat(file.percent, "%") : ""])]);
    };
    var renderNormalActionCol = function renderNormalActionCol(file, index) {
      var _locale$value, _locale$value$trigger;
      return createVNode("td", null, [createVNode(Link, {
        "theme": "primary",
        "hover": "color",
        "content": (_locale$value = locale.value) === null || _locale$value === void 0 ? void 0 : (_locale$value$trigger = _locale$value.triggerUploadText) === null || _locale$value$trigger === void 0 ? void 0 : _locale$value$trigger["delete"],
        "onClick": function onClick(e) {
          return props.onRemove({
            e: e,
            index: index,
            file: file
          });
        }
      }, null)]);
    };
    var renderBatchActionCol = function renderBatchActionCol(index) {
      var _locale$value2, _locale$value2$trigge;
      return index === 0 ? createVNode("td", {
        "rowSpan": displayFiles.value.length,
        "class": "".concat(uploadPrefix, "__flow-table__batch-row")
      }, [createVNode(Link, {
        "theme": "primary",
        "hover": "color",
        "content": (_locale$value2 = locale.value) === null || _locale$value2 === void 0 ? void 0 : (_locale$value2$trigge = _locale$value2.triggerUploadText) === null || _locale$value2$trigge === void 0 ? void 0 : _locale$value2$trigge["delete"],
        "onClick": function onClick(e) {
          return props.onRemove({
            e: e,
            index: -1,
            file: null
          });
        }
      }, null)]) : null;
    };
    var renderFileList = function renderFileList() {
      var _locale$value$file, _locale$value$file2, _locale$value$file3, _locale$value$file4;
      var customList = renderTNodeJSX("fileListDisplay", {
        params: {
          files: props.displayFiles,
          dragEvents: innerDragEvents.value
        }
      });
      if (customList) return customList;
      return createVNode("table", mergeProps({
        "class": "".concat(uploadPrefix, "__flow-table")
      }, innerDragEvents.value), [createVNode("thead", null, [createVNode("tr", null, [createVNode("th", null, [(_locale$value$file = locale.value.file) === null || _locale$value$file === void 0 ? void 0 : _locale$value$file.fileNameText]), createVNode("th", {
        "style": {
          minWidth: "120px"
        }
      }, [(_locale$value$file2 = locale.value.file) === null || _locale$value$file2 === void 0 ? void 0 : _locale$value$file2.fileSizeText]), createVNode("th", {
        "style": {
          minWidth: "120px"
        }
      }, [(_locale$value$file3 = locale.value.file) === null || _locale$value$file3 === void 0 ? void 0 : _locale$value$file3.fileStatusText]), disabled.value ? null : createVNode("th", null, [(_locale$value$file4 = locale.value.file) === null || _locale$value$file4 === void 0 ? void 0 : _locale$value$file4.fileOperationText])])]), createVNode("tbody", null, [!displayFiles.value.length && createVNode("tr", null, [createVNode("td", {
        "colSpan": 4
      }, [renderEmpty()])]), displayFiles.value.map(function (file, index) {
        var _props$abridgeName;
        var showBatchUploadAction = props.isBatchUpload;
        var deleteNode = showBatchUploadAction && !displayFiles.value.find(function (item) {
          return item.status !== "success";
        }) ? renderBatchActionCol(index) : renderNormalActionCol(file, index);
        var fileName = (_props$abridgeName = props.abridgeName) !== null && _props$abridgeName !== void 0 && _props$abridgeName.length ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
        return createVNode("tr", {
          "key": file.name + index
        }, [createVNode("td", null, [file.url ? createVNode(Link, {
          "href": file.url,
          "target": "_blank",
          "hover": "color"
        }, _isSlot(fileName) ? fileName : {
          "default": function _default() {
            return [fileName];
          }
        }) : fileName]), createVNode("td", null, [returnFileSize(file.size)]), createVNode("td", null, [renderStatus(file)]), disabled.value ? null : deleteNode]);
      })])]);
    };
    return function () {
      var _slots$default, _locale$value3;
      var cardClassName = "".concat(uploadPrefix, "__flow-card-area");
      return createVNode("div", {
        "class": "".concat(uploadPrefix, "__flow ").concat(uploadPrefix, "__flow-").concat(props.theme)
      }, [createVNode("div", {
        "class": "".concat(uploadPrefix, "__flow-op")
      }, [(_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots), props.placeholder && createVNode("small", {
        "class": "".concat(uploadPrefix, "__flow-placeholder ").concat(uploadPrefix, "__placeholder")
      }, [props.placeholder])]), props.theme === "image-flow" && createVNode("div", mergeProps({
        "class": cardClassName
      }, innerDragEvents.value), [displayFiles.value.length ? createVNode("ul", {
        "class": "".concat(uploadPrefix, "__card clearfix")
      }, [displayFiles.value.map(function (file, index) {
        return renderImgItem(file, index);
      })]) : renderEmpty()]), props.theme === "file-flow" && (displayFiles.value.length ? renderFileList() : createVNode("div", mergeProps({
        "class": cardClassName
      }, innerDragEvents.value), [renderEmpty()])), !props.autoUpload && createVNode("div", {
        "class": "".concat(uploadPrefix, "__flow-bottom")
      }, [createVNode(Button, {
        "theme": "default",
        "onClick": function onClick(e) {
          var _props$cancelUpload;
          return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
            e: e
          });
        },
        "disabled": disabled.value || !uploading.value,
        "content": (_locale$value3 = locale.value) === null || _locale$value3 === void 0 ? void 0 : _locale$value3.cancelUploadText
      }, null), createVNode(Button, {
        "disabled": disabled.value || uploading.value || !displayFiles.value.length,
        "theme": "primary",
        "loading": uploading.value,
        "onClick": function onClick() {
          var _props$uploadFiles;
          return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
        },
        "content": uploadText.value
      }, null)])]);
    };
  }
});

export { MultipleFlowList as default };
//# sourceMappingURL=multiple-flow-list.mjs.map
