import { PropType, h } from 'vue';
import { TdUploadProps, UploadFile } from '../type';
import { CommonDisplayFileProps } from '../interface';
import { UploadDragEvents } from '../hooks/useDrag';
export interface DraggerProps extends CommonDisplayFileProps {
    trigger?: TdUploadProps['trigger'];
    triggerUpload?: (e: MouseEvent) => void;
    uploadFiles?: (toFiles?: UploadFile[]) => void;
    cancelUpload?: (context: {
        e: MouseEvent;
        file: UploadFile;
    }) => void;
    dragEvents: UploadDragEvents;
}
declare const _default: import("vue").DefineComponent<{
    trigger: PropType<(h: typeof h, props: import("../type").TriggerContext) => import("../../common").SlotReturnValue>;
    triggerUpload: PropType<(e: MouseEvent) => void>;
    uploadFiles: PropType<(toFiles?: UploadFile[]) => void>;
    cancelUpload: PropType<(context: {
        e: MouseEvent;
        file: UploadFile;
    }) => void>;
    dragEvents: PropType<UploadDragEvents>;
    files: PropType<UploadFile[]>;
    toUploadFiles: PropType<UploadFile[]>;
    displayFiles: PropType<UploadFile[]>;
    theme: PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
    abridgeName: PropType<number[]>;
    placeholder: StringConstructor;
    classPrefix: StringConstructor;
    tips: StringConstructor;
    status: PropType<"error" | "default" | "success" | "warning">;
    locale: PropType<import("../..").UploadConfig>;
    sizeOverLimitMessage: StringConstructor;
    autoUpload: BooleanConstructor;
    disabled: BooleanConstructor;
    uploading: BooleanConstructor;
    tipsClasses: PropType<string>;
    errorClasses: PropType<string[]>;
    default: PropType<(h: typeof h) => import("../../common").SlotReturnValue>;
    fileListDisplay: PropType<(h: typeof h, props: {
        files: UploadFile[];
        dragEvents?: import("../type").UploadDisplayDragEvents;
    }) => import("../../common").SlotReturnValue>;
    onRemove: PropType<(p: import("../type").UploadRemoveContext) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    trigger: PropType<(h: typeof h, props: import("../type").TriggerContext) => import("../../common").SlotReturnValue>;
    triggerUpload: PropType<(e: MouseEvent) => void>;
    uploadFiles: PropType<(toFiles?: UploadFile[]) => void>;
    cancelUpload: PropType<(context: {
        e: MouseEvent;
        file: UploadFile;
    }) => void>;
    dragEvents: PropType<UploadDragEvents>;
    files: PropType<UploadFile[]>;
    toUploadFiles: PropType<UploadFile[]>;
    displayFiles: PropType<UploadFile[]>;
    theme: PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
    abridgeName: PropType<number[]>;
    placeholder: StringConstructor;
    classPrefix: StringConstructor;
    tips: StringConstructor;
    status: PropType<"error" | "default" | "success" | "warning">;
    locale: PropType<import("../..").UploadConfig>;
    sizeOverLimitMessage: StringConstructor;
    autoUpload: BooleanConstructor;
    disabled: BooleanConstructor;
    uploading: BooleanConstructor;
    tipsClasses: PropType<string>;
    errorClasses: PropType<string[]>;
    default: PropType<(h: typeof h) => import("../../common").SlotReturnValue>;
    fileListDisplay: PropType<(h: typeof h, props: {
        files: UploadFile[];
        dragEvents?: import("../type").UploadDisplayDragEvents;
    }) => import("../../common").SlotReturnValue>;
    onRemove: PropType<(p: import("../type").UploadRemoveContext) => void>;
}>>, {
    disabled: boolean;
    autoUpload: boolean;
    uploading: boolean;
}>;
export default _default;
