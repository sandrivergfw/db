/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-b077039f.mjs';
import { defineComponent, createVNode, mergeProps, computed } from 'vue';
import { UploadIcon } from 'tdesign-icons-vue-next';
import props from './props.mjs';
import NormalFile from './themes/normal-file.mjs';
import DraggerFile from './themes/dragger-file.mjs';
import ImageCard from './themes/image-card.mjs';
import MultipleFlowList from './themes/multiple-flow-list.mjs';
import useUpload from './hooks/useUpload.mjs';
import { Button } from '../button/index.mjs';
import CustomFile from './themes/custom-file.mjs';
import { useContent } from '../hooks/tnode.mjs';
import '../_chunks/dep-4cfcf90d.mjs';
import '../_chunks/dep-7fde6385.mjs';
import '../loading/index.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../_chunks/dep-a9a65d10.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/set-style.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-b9d3e48f.mjs';
import '../hooks/useConfig.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-10b9d296.mjs';
import '../_chunks/dep-bedb7d80.mjs';
import '../_chunks/dep-dc72ac1e.mjs';
import '../_chunks/dep-55f8205a.mjs';
import '../_chunks/dep-4975791d.mjs';
import '../_chunks/dep-ecf1f329.mjs';
import '../_chunks/dep-bfc93151.mjs';
import '../_chunks/dep-178810f1.mjs';
import '../_chunks/dep-7a4db73f.mjs';
import '../_chunks/dep-da01978e.mjs';
import '../_chunks/dep-e97b14c2.mjs';
import '../_chunks/dep-df662d99.mjs';
import '../_chunks/dep-2539b27d.mjs';
import '../_chunks/dep-74473837.mjs';
import '../_chunks/dep-671fd175.mjs';
import '../_chunks/dep-708d2dc7.mjs';
import '../_chunks/dep-df473a63.mjs';
import '../_chunks/dep-2aad0459.mjs';
import '../_chunks/dep-cacce51a.mjs';
import '../_chunks/dep-03d7fa8b.mjs';
import '../_chunks/dep-ea278d31.mjs';
import '../_chunks/dep-3374d433.mjs';
import '../_chunks/dep-180ba4d7.mjs';
import '../_chunks/dep-0b20cec5.mjs';
import '../_chunks/dep-560cf0c7.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../utils/dom.mjs';
import '../_chunks/dep-a63b383f.mjs';
import '../utils/easing.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-64597fc0.mjs';
import '../_chunks/dep-cddb9124.mjs';
import '../_chunks/dep-de4be2ca.mjs';
import '../_chunks/dep-61d894c9.mjs';
import '../_chunks/dep-1375bf98.mjs';
import '../_chunks/dep-cd4a1d40.mjs';
import '../_chunks/dep-5179d432.mjs';
import '../_chunks/dep-7a8fb00c.mjs';
import '../_chunks/dep-9bb59c1a.mjs';
import '../_chunks/dep-96027ed5.mjs';
import '../utils/transfer-dom.mjs';
import '../loading/props.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../loading/type.mjs';
import '../link/index.mjs';
import '../link/link.mjs';
import '../link/props.mjs';
import '../link/type.mjs';
import '../_common/js/upload/utils.mjs';
import '../_common/js/log/log.mjs';
import '../hooks/useGlobalIcon.mjs';
import './constants.mjs';
import '../hooks/useCommonClassName.mjs';
import './hooks/useDrag.mjs';
import '../image-viewer/index.mjs';
import '../image-viewer/image-viewer.mjs';
import '../image-viewer/props.mjs';
import '../image-viewer/base/ImageModalIcon.mjs';
import '../image-viewer/base/ImageViewerUtils.mjs';
import '../tooltip/index.mjs';
import '../tooltip/tooltip.mjs';
import '../tooltip/props.mjs';
import '../popup/props.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../popup/container.mjs';
import '../hooks/useVModel.mjs';
import '../popup/type.mjs';
import '../tooltip/util.mjs';
import '../tooltip/type.mjs';
import '../image-viewer/utils.mjs';
import '../image-viewer/base/ImageItem.mjs';
import '../image-viewer/hooks.mjs';
import '../image-viewer/base/ImageViewerModal.mjs';
import '../dialog/index.mjs';
import '../dialog/dialog.mjs';
import '../dialog/props.mjs';
import '../dialog/hooks.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../dialog/stack.mjs';
import '../button/button.mjs';
import '../button/props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../utils/set-style.mjs';
import '../form/hooks.mjs';
import '../button/type.mjs';
import '../dialog/type.mjs';
import '../dialog/plugin.mjs';
import '../hooks/useDefaultValue.mjs';
import '../image-viewer/const.mjs';
import '../image-viewer/type.mjs';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../_common/js/upload/main.mjs';
import '../_common/js/upload/xhr.mjs';

var _Upload = defineComponent({
  name: "TUpload",
  props: props,
  setup: function setup(props2, _ref) {
    var slots = _ref.slots,
      expose = _ref.expose;
    var renderContent = useContent();
    var _useUpload = useUpload(props2),
      locale = _useUpload.locale,
      classPrefix = _useUpload.classPrefix,
      triggerUploadText = _useUpload.triggerUploadText,
      toUploadFiles = _useUpload.toUploadFiles,
      displayFiles = _useUpload.displayFiles,
      uploadValue = _useUpload.uploadValue,
      sizeOverLimitMessage = _useUpload.sizeOverLimitMessage,
      uploading = _useUpload.uploading,
      tipsClasses = _useUpload.tipsClasses,
      errorClasses = _useUpload.errorClasses,
      inputRef = _useUpload.inputRef,
      disabled = _useUpload.disabled,
      onInnerRemove = _useUpload.onInnerRemove,
      uploadFiles = _useUpload.uploadFiles,
      onNormalFileChange = _useUpload.onNormalFileChange,
      onDragFileChange = _useUpload.onDragFileChange,
      triggerUpload = _useUpload.triggerUpload,
      cancelUpload = _useUpload.cancelUpload;
    expose({
      upload: inputRef.value,
      uploading: uploading,
      triggerUpload: triggerUpload,
      uploadFiles: uploadFiles,
      cancelUpload: cancelUpload
    });
    var renderTrigger = function renderTrigger() {
      var getDefaultTrigger = function getDefaultTrigger() {
        if (props2.theme === "file-input") {
          return createVNode(Button, mergeProps({
            "disabled": disabled.value,
            "variant": "outline"
          }, props2.triggerButtonProps), {
            "default": function _default() {
              return [triggerUploadText.value];
            }
          });
        }
        return createVNode(Button, mergeProps({
          "disabled": disabled.value,
          "variant": "outline",
          "icon": function icon() {
            return createVNode(UploadIcon, null, null);
          }
        }, props2.triggerButtonProps), {
          "default": function _default() {
            return [triggerUploadText.value];
          }
        });
      };
      return renderContent("default", "trigger") || getDefaultTrigger();
    };
    var commonDisplayFileProps = computed(function () {
      return {
        files: uploadValue.value,
        toUploadFiles: toUploadFiles.value,
        displayFiles: displayFiles.value,
        theme: props2.theme,
        placeholder: props2.placeholder,
        disabled: disabled.value,
        tips: props2.tips,
        status: props2.status,
        sizeOverLimitMessage: sizeOverLimitMessage.value,
        uploading: uploading.value,
        classPrefix: classPrefix.value,
        tipsClasses: tipsClasses,
        errorClasses: errorClasses,
        locale: locale.value,
        autoUpload: props2.autoUpload,
        abridgeName: props2.abridgeName,
        fileListDisplay: props2.fileListDisplay,
        onRemove: onInnerRemove
      };
    });
    var dragProps = {
      onDragFileChange: onDragFileChange,
      onDragenter: props2.onDragenter,
      onDragleave: props2.onDragleave,
      onDrop: props2.onDrop
    };
    var getNormalFileNode = function getNormalFileNode() {
      return createVNode(NormalFile, mergeProps(commonDisplayFileProps.value, {
        "multiple": props2.multiple
      }), {
        "default": function _default() {
          return [createVNode("div", {
            "class": "".concat(classPrefix.value, "-upload__trigger"),
            "onClick": triggerUpload
          }, [renderTrigger()])];
        },
        fileListDisplay: slots.fileListDisplay
      });
    };
    var getSingleFileDraggerUploadNode = function getSingleFileDraggerUploadNode() {
      return createVNode(DraggerFile, mergeProps(commonDisplayFileProps.value, {
        "dragEvents": dragProps,
        "trigger": props2.trigger,
        "cancelUpload": cancelUpload,
        "triggerUpload": triggerUpload,
        "uploadFiles": uploadFiles
      }), null);
    };
    var getImageCardUploadNode = function getImageCardUploadNode() {
      return createVNode(ImageCard, mergeProps(commonDisplayFileProps.value, {
        "multiple": props2.multiple,
        "max": props2.max,
        "showUploadProgress": props2.showUploadProgress,
        "triggerUpload": triggerUpload,
        "uploadFiles": uploadFiles,
        "cancelUpload": cancelUpload,
        "onPreview": props2.onPreview
      }), null);
    };
    var getFlowListNode = function getFlowListNode() {
      return createVNode(MultipleFlowList, mergeProps(commonDisplayFileProps.value, {
        "isBatchUpload": props2.isBatchUpload,
        "draggable": props2.draggable,
        "dragEvents": dragProps,
        "uploadFiles": uploadFiles,
        "cancelUpload": cancelUpload,
        "onPreview": props2.onPreview,
        "slots": Object.keys(slots).length ? slots : void 0
      }), {
        "default": function _default() {
          return [createVNode("div", {
            "class": "".concat(classPrefix.value, "-upload__trigger"),
            "onClick": triggerUpload
          }, [renderTrigger()])];
        }
      });
    };
    var getCustomFile = function getCustomFile() {
      return createVNode(CustomFile, mergeProps(commonDisplayFileProps.value, {
        "draggable": props2.draggable,
        "dragContent": props2.dragContent,
        "dragEvents": dragProps,
        "triggerUpload": triggerUpload,
        "trigger": props2.trigger,
        "childrenNode": slots["default"]
      }), {
        "default": function _default() {
          return [renderTrigger()];
        },
        dragContent: slots.dragContent,
        trigger: slots.trigger
      });
    };
    return function () {
      return createVNode("div", {
        "class": "".concat(classPrefix.value, "-upload")
      }, [createVNode("input", {
        "ref": inputRef,
        "type": "file",
        "disabled": disabled.value,
        "onChange": onNormalFileChange,
        "multiple": props2.multiple,
        "accept": props2.accept,
        "hidden": true
      }, null), ["file", "file-input"].includes(props2.theme) && !props2.draggable && getNormalFileNode(), ["file", "image"].includes(props2.theme) && props2.draggable && getSingleFileDraggerUploadNode(), props2.theme === "image" && !props2.draggable && getImageCardUploadNode(), ["image-flow", "file-flow"].includes(props2.theme) && getFlowListNode(), props2.theme === "custom" && getCustomFile(), props2.tips && createVNode("small", {
        "class": [tipsClasses, _defineProperty({}, "".concat(classPrefix.value, "-upload__tips-").concat(props2.status), props2.status)]
      }, [props2.tips])]);
    };
  }
});

export { _Upload as default };
//# sourceMappingURL=upload.mjs.map
