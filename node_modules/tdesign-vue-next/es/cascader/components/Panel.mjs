/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-b077039f.mjs';
import { defineComponent, computed, createVNode } from 'vue';
import Item from './Item.mjs';
import props from '../props.mjs';
import { usePrefixClass } from '../../hooks/useConfig.mjs';
import { useTNodeDefault } from '../../hooks/tnode.mjs';
import { getPanels } from '../core/helper.mjs';
import { expendClickEffect, valueChangeEffect } from '../core/effect.mjs';
import { useConfig } from '../../config-provider/useConfig.mjs';
import 'tdesign-icons-vue-next';
import '../core/className.mjs';
import '../../_chunks/dep-4cfcf90d.mjs';
import '../../_chunks/dep-7fde6385.mjs';
import '../../checkbox/index.mjs';
import '../../checkbox/checkbox.mjs';
import '../../_chunks/dep-a9a65d10.mjs';
import '../../checkbox/props.mjs';
import '../../hooks/useVModel.mjs';
import '../../_chunks/dep-96027ed5.mjs';
import '../../_chunks/dep-bedb7d80.mjs';
import '../../_chunks/dep-9bb59c1a.mjs';
import '../../_chunks/dep-61d894c9.mjs';
import '../../_chunks/dep-bfc93151.mjs';
import '../../_chunks/dep-178810f1.mjs';
import '../../_chunks/dep-cacce51a.mjs';
import '../../_chunks/dep-1375bf98.mjs';
import '../../_chunks/dep-74473837.mjs';
import '../../form/hooks.mjs';
import '../../hooks/useRipple.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../_chunks/dep-10b9d296.mjs';
import '../../_chunks/dep-dc72ac1e.mjs';
import '../../_chunks/dep-55f8205a.mjs';
import '../../_chunks/dep-4975791d.mjs';
import '../../_chunks/dep-ecf1f329.mjs';
import '../../_chunks/dep-7a4db73f.mjs';
import '../../_chunks/dep-da01978e.mjs';
import '../../_chunks/dep-e97b14c2.mjs';
import '../../_chunks/dep-df662d99.mjs';
import '../../_chunks/dep-2539b27d.mjs';
import '../../_chunks/dep-671fd175.mjs';
import '../../_chunks/dep-708d2dc7.mjs';
import '../../_chunks/dep-df473a63.mjs';
import '../../_chunks/dep-2aad0459.mjs';
import '../../_chunks/dep-03d7fa8b.mjs';
import '../../_chunks/dep-ea278d31.mjs';
import '../../_chunks/dep-3374d433.mjs';
import '../../_chunks/dep-180ba4d7.mjs';
import '../../_chunks/dep-0b20cec5.mjs';
import '../../_chunks/dep-560cf0c7.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../utils/set-style.mjs';
import '../../config-provider/type.mjs';
import '../../checkbox/constants.mjs';
import '../../_chunks/dep-de4be2ca.mjs';
import '../../_chunks/dep-cd4a1d40.mjs';
import '../../_chunks/dep-5179d432.mjs';
import '../../_chunks/dep-7a8fb00c.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-64597fc0.mjs';
import '../../_chunks/dep-cddb9124.mjs';
import '../../_chunks/dep-a63b383f.mjs';
import '../../checkbox/group.mjs';
import '../../_chunks/dep-4e771d76.mjs';
import '../../_chunks/dep-a1fe3b7b.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import '../../hooks/slot.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../checkbox/type.mjs';
import '../../loading/index.mjs';
import '../../loading/directive.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_common/js/loading/circle-adapter.mjs';
import '../../_common/js/utils/set-style.mjs';
import '../../_common/js/utils/helper.mjs';
import '../../_chunks/dep-b9d3e48f.mjs';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../../utils/transfer-dom.mjs';
import '../../loading/props.mjs';
import '../../loading/type.mjs';
import '../../hooks/useGlobalIcon.mjs';
import '../../_chunks/dep-588eeb31.mjs';
import '../../_chunks/dep-6f654c46.mjs';
import '../../_chunks/dep-f7262050.mjs';
import '../../_chunks/dep-7934d0a9.mjs';

var Panel = defineComponent({
  name: "TCascaderSubPanel",
  props: {
    empty: props.empty,
    trigger: props.trigger,
    onChange: props.onChange,
    loading: props.loading,
    loadingText: props.loadingText,
    cascaderContext: {
      type: Object
    }
  },
  setup: function setup(props) {
    var renderTNodeJSXDefault = useTNodeDefault();
    var COMPONENT_NAME = usePrefixClass("cascader");
    var _useConfig = useConfig("cascader"),
      globalConfig = _useConfig.globalConfig,
      t = _useConfig.t;
    var panels = computed(function () {
      return getPanels(props.cascaderContext.treeNodes);
    });
    var handleExpand = function handleExpand(node, trigger) {
      var propsTrigger = props.trigger,
        cascaderContext = props.cascaderContext;
      expendClickEffect(propsTrigger, trigger, node, cascaderContext);
    };
    var renderItem = function renderItem(node) {
      return createVNode(Item, {
        "key": node.value,
        "node": node,
        "cascaderContext": props.cascaderContext,
        "onClick": function onClick() {
          handleExpand(node, "click");
        },
        "onMouseenter": function onMouseenter() {
          handleExpand(node, "hover");
        },
        "onChange": function onChange() {
          valueChangeEffect(node, props.cascaderContext);
        }
      }, null);
    };
    var renderList = function renderList(treeNodes) {
      var _ref;
      var isFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var segment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "1";
      return createVNode("ul", {
        "class": ["".concat(COMPONENT_NAME.value, "__menu"), "narrow-scrollbar", (_ref = {}, _defineProperty(_ref, "".concat(COMPONENT_NAME.value, "__menu--segment"), segment), _defineProperty(_ref, "".concat(COMPONENT_NAME.value, "__menu--filter"), isFilter), _ref)],
        "key": key
      }, [treeNodes.map(function (node) {
        return renderItem(node);
      })]);
    };
    var renderPanels = function renderPanels() {
      var _props$cascaderContex = props.cascaderContext,
        inputVal = _props$cascaderContex.inputVal,
        treeNodes = _props$cascaderContex.treeNodes;
      return inputVal ? renderList(treeNodes, true) : panels.value.map(function (treeNodes2, index) {
        return renderList(treeNodes2, false, index !== panels.value.length - 1, "".concat(COMPONENT_NAME.value, "__menu").concat(index));
      });
    };
    return function () {
      var content;
      if (props.loading) {
        content = renderTNodeJSXDefault("loadingText", createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__panel--empty")
        }, [globalConfig.value.loadingText]));
      } else {
        content = panels.value.length ? renderPanels() : renderTNodeJSXDefault("empty", createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__panel--empty")
        }, [globalConfig.value.empty]));
      }
      return createVNode("div", {
        "class": ["".concat(COMPONENT_NAME.value, "__panel"), _defineProperty({}, "".concat(COMPONENT_NAME.value, "--normal"), panels.value.length && !props.loading)]
      }, [content]);
    };
  }
});

export { Panel as default };
//# sourceMappingURL=Panel.mjs.map
