{"version":3,"file":"Item.mjs","sources":["../../../src/cascader/components/Item.tsx"],"sourcesContent":["import { defineComponent, PropType, computed, ref } from 'vue';\nimport { ChevronRightIcon as TdChevronRightIcon } from 'tdesign-icons-vue-next';\n\nimport { getFullPathLabel } from '../core/helper';\nimport { getCascaderItemClass, getCascaderItemIconClass } from '../core/className';\n\nimport Checkbox from '../../checkbox/index';\nimport TLoading from '../../loading';\n\nimport { CascaderContextType, TreeNodeValue, TreeNode } from '../interface';\nimport { usePrefixClass, useCommonClassName } from '../../hooks/useConfig';\nimport { useGlobalIcon } from '../../hooks/useGlobalIcon';\nimport useRipple from '../../hooks/useRipple';\n\nconst props = {\n  node: {\n    type: Object as PropType<TreeNode>,\n    default() {\n      return {};\n    },\n  },\n  cascaderContext: {\n    type: Object as PropType<CascaderContextType>,\n  },\n  onChange: Function as PropType<() => void>,\n  onClick: Function as PropType<() => void>,\n  onMouseenter: Function as PropType<() => void>,\n};\n\nexport default defineComponent({\n  name: 'TCascaderItem',\n  props,\n  setup(props) {\n    const liRef = ref<HTMLElement>();\n    useRipple(liRef);\n\n    const COMPONENT_NAME = usePrefixClass('cascader__item');\n    const classPrefix = usePrefixClass();\n    const { ChevronRightIcon } = useGlobalIcon({ ChevronRightIcon: TdChevronRightIcon });\n    const { STATUS, SIZE } = useCommonClassName();\n\n    const itemClass = computed(() => {\n      return getCascaderItemClass(classPrefix.value, props.node, SIZE.value, STATUS.value, props.cascaderContext);\n    });\n\n    const iconClass = computed(() => {\n      return getCascaderItemIconClass(classPrefix.value, props.node, STATUS.value, props.cascaderContext);\n    });\n\n    function RenderLabelInner(node: TreeNode, cascaderContext: CascaderContextType) {\n      const { inputVal } = cascaderContext;\n      const labelText = inputVal ? getFullPathLabel(node) : node.label;\n      if (inputVal) {\n        const texts = labelText.split(inputVal as string);\n        const doms = [];\n        for (let index = 0; index < texts.length; index++) {\n          doms.push(<span key={index}>{texts[index]}</span>);\n          if (index === texts.length - 1) break;\n          doms.push(\n            <span key={`${index}filter`} class={`${COMPONENT_NAME.value}-label--filter`}>\n              {inputVal}\n            </span>,\n          );\n        }\n        return doms;\n      }\n      return labelText;\n    }\n\n    function RenderLabelContent(node: TreeNode, cascaderContext: CascaderContextType) {\n      const label = RenderLabelInner(node, cascaderContext);\n\n      const labelCont = (\n        <span\n          title={cascaderContext.inputVal ? getFullPathLabel(node) : node.label}\n          class={[`${COMPONENT_NAME.value}-label`, `${COMPONENT_NAME.value}-label--ellipsis`]}\n          role=\"label\"\n        >\n          {label}\n        </span>\n      );\n\n      return labelCont;\n    }\n\n    function RenderCheckBox(node: TreeNode, cascaderContext: CascaderContextType) {\n      const { checkProps, value, max, inputVal } = cascaderContext;\n      const label = RenderLabelInner(node, cascaderContext);\n      return (\n        <Checkbox\n          checked={node.checked}\n          indeterminate={node.indeterminate}\n          disabled={node.isDisabled() || ((value as TreeNodeValue[]).length >= max && max !== 0)}\n          // node.value maybe string or number\n          name={String(node.value)}\n          stopLabelTrigger={!!node.children}\n          title={inputVal ? getFullPathLabel(node) : node.label}\n          onChange={() => {\n            props.onChange();\n          }}\n          {...checkProps}\n        >\n          {label}\n        </Checkbox>\n      );\n    }\n\n    return () => {\n      const { cascaderContext, node } = props;\n      return (\n        <li\n          ref={liRef}\n          class={itemClass.value}\n          onClick={(e: Event) => {\n            e.stopPropagation();\n            props.onClick();\n          }}\n          onMouseenter={(e: Event) => {\n            e.stopPropagation();\n            props.onMouseenter();\n          }}\n        >\n          {cascaderContext.multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext)}\n          {node.children &&\n            (node.loading ? (\n              <TLoading class={iconClass.value} size=\"small\" />\n            ) : (\n              <ChevronRightIcon class={iconClass.value} />\n            ))}\n        </li>\n      );\n    };\n  },\n});\n"],"names":["_isVNode","props","node","type","Object","cascaderContext","onChange","Function","onClick","onMouseenter","defineComponent","name","setup","liRef","ref","useRipple","COMPONENT_NAME","usePrefixClass","classPrefix","useGlobalIcon","ChevronRightIcon","TdChevronRightIcon","useCommonClassName","STATUS","SIZE","itemClass","computed","getCascaderItemClass","value","iconClass","getCascaderItemIconClass","RenderLabelInner","inputVal","labelText","getFullPathLabel","label","texts","split","doms","index","length","push","_createVNode","RenderLabelContent","labelCont","RenderCheckBox","checkProps","max","_mergeProps","checked","indeterminate","isDisabled","String","children","e","stopPropagation","multiple","loading","TLoading"],"mappings":"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"}