import { PropType, VNode } from 'vue';
declare const _default: import("vue").DefineComponent<{
    parent: ObjectConstructor;
    visible: BooleanConstructor;
    attach: {
        type: PropType<import("../common").AttachNode>;
        default: string;
    };
    forwardRef: PropType<(el: HTMLElement) => void>;
}, {
    mountContent: import("vue").Ref<boolean>;
    triggerRef: import("vue").Ref<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> & {
        $el: HTMLElement;
    }>;
    unmountContent(): void;
    emitResize: () => void;
    emitContentMounted: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("resize" | "contentMounted")[], "resize" | "contentMounted", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    parent: ObjectConstructor;
    visible: BooleanConstructor;
    attach: {
        type: PropType<import("../common").AttachNode>;
        default: string;
    };
    forwardRef: PropType<(el: HTMLElement) => void>;
}>> & {
    onResize?: (...args: any[]) => any;
    onContentMounted?: (...args: any[]) => any;
}, {
    visible: boolean;
    attach: import("../common").AttachNode;
}>;
export default _default;
