import { TdRangeInputProps, TdRangeInputPopupProps } from './type';
import './style';
export * from './type';
export declare type RangeInputProps = TdRangeInputProps;
export declare type RangeInputPopupProps = TdRangeInputPopupProps;
export declare const RangeInput: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: import("./type").RangeInputValue;
            disabled: boolean;
            size: "small" | "medium" | "large";
            readonly: boolean;
            separator: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            modelValue: import("./type").RangeInputValue;
            defaultValue: import("./type").RangeInputValue;
            clearable: boolean;
            showClearIconOnEmpty: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            activeIndex: {
                type: NumberConstructor;
            };
            clearable: BooleanConstructor;
            disabled: BooleanConstructor;
            format: {
                type: import("vue").PropType<import("..").InputFormatType | import("..").InputFormatType[]>;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps | import("..").TdInputProps[]>;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            placeholder: {
                type: import("vue").PropType<string | string[]>;
            };
            prefixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            readonly: BooleanConstructor;
            separator: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            showClearIconOnEmpty: BooleanConstructor;
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            suffix: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            suffixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").RangeInputValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").RangeInputValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").RangeInputValue>;
                default: () => import("./type").RangeInputValue;
            };
            onBlur: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
                e?: FocusEvent;
                position?: import("./type").RangeInputPosition;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
                e?: MouseEvent | InputEvent;
                position?: import("./type").RangeInputPosition;
                trigger?: "input" | "clear";
            }) => void>;
            onClear: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onClick: import("vue").PropType<(context?: {
                e?: MouseEvent;
                position?: import("./type").RangeInputPosition;
            }) => void>;
            onEnter: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
                e?: MouseEvent | InputEvent;
                position?: import("./type").RangeInputPosition;
            }) => void>;
            onFocus: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
                e?: FocusEvent;
                position?: import("./type").RangeInputPosition;
            }) => void>;
            onMouseenter: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onMouseleave: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "size" | "readonly" | "separator" | "modelValue" | "defaultValue" | "clearable" | "showClearIconOnEmpty">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            activeIndex: {
                type: NumberConstructor;
            };
            clearable: BooleanConstructor;
            disabled: BooleanConstructor;
            format: {
                type: import("vue").PropType<import("..").InputFormatType | import("..").InputFormatType[]>;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps | import("..").TdInputProps[]>;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            placeholder: {
                type: import("vue").PropType<string | string[]>;
            };
            prefixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            readonly: BooleanConstructor;
            separator: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: string;
            };
            showClearIconOnEmpty: BooleanConstructor;
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            suffix: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            suffixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").RangeInputValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").RangeInputValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").RangeInputValue>;
                default: () => import("./type").RangeInputValue;
            };
            onBlur: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
                e?: FocusEvent;
                position?: import("./type").RangeInputPosition;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
                e?: MouseEvent | InputEvent;
                position?: import("./type").RangeInputPosition;
                trigger?: "input" | "clear";
            }) => void>;
            onClear: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onClick: import("vue").PropType<(context?: {
                e?: MouseEvent;
                position?: import("./type").RangeInputPosition;
            }) => void>;
            onEnter: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
                e?: MouseEvent | InputEvent;
                position?: import("./type").RangeInputPosition;
            }) => void>;
            onFocus: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
                e?: FocusEvent;
                position?: import("./type").RangeInputPosition;
            }) => void>;
            onMouseenter: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onMouseleave: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: import("./type").RangeInputValue;
            disabled: boolean;
            size: "small" | "medium" | "large";
            readonly: boolean;
            separator: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            modelValue: import("./type").RangeInputValue;
            defaultValue: import("./type").RangeInputValue;
            clearable: boolean;
            showClearIconOnEmpty: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        activeIndex: {
            type: NumberConstructor;
        };
        clearable: BooleanConstructor;
        disabled: BooleanConstructor;
        format: {
            type: import("vue").PropType<import("..").InputFormatType | import("..").InputFormatType[]>;
        };
        inputProps: {
            type: import("vue").PropType<import("..").TdInputProps | import("..").TdInputProps[]>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        separator: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string;
        };
        showClearIconOnEmpty: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: () => import("./type").RangeInputValue;
        };
        onBlur: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: FocusEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: MouseEvent | InputEvent;
            position?: import("./type").RangeInputPosition;
            trigger?: "input" | "clear";
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClick: import("vue").PropType<(context?: {
            e?: MouseEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onEnter: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: MouseEvent | InputEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: FocusEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    activeIndex: {
        type: NumberConstructor;
    };
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    format: {
        type: import("vue").PropType<import("..").InputFormatType | import("..").InputFormatType[]>;
    };
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps | import("..").TdInputProps[]>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    separator: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    showClearIconOnEmpty: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
        default: () => import("./type").RangeInputValue;
    };
    onBlur: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
        e?: FocusEvent;
        position?: import("./type").RangeInputPosition;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
        e?: MouseEvent | InputEvent;
        position?: import("./type").RangeInputPosition;
        trigger?: "input" | "clear";
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClick: import("vue").PropType<(context?: {
        e?: MouseEvent;
        position?: import("./type").RangeInputPosition;
    }) => void>;
    onEnter: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
        e?: MouseEvent | InputEvent;
        position?: import("./type").RangeInputPosition;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
        e?: FocusEvent;
        position?: import("./type").RangeInputPosition;
    }) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").RangeInputValue;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    separator: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    modelValue: import("./type").RangeInputValue;
    defaultValue: import("./type").RangeInputValue;
    clearable: boolean;
    showClearIconOnEmpty: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const RangeInputPopup: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            readonly: boolean;
            autoWidth: boolean;
            inputValue: import("./type").RangeInputValue;
            popupVisible: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            autoWidth: BooleanConstructor;
            disabled: BooleanConstructor;
            inputValue: {
                type: import("vue").PropType<import("./type").RangeInputValue>;
                default: any;
            };
            defaultInputValue: {
                type: import("vue").PropType<import("./type").RangeInputValue>;
            };
            panel: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            popupVisible: BooleanConstructor;
            rangeInputProps: {
                type: import("vue").PropType<TdRangeInputProps>;
            };
            readonly: BooleanConstructor;
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            onInputChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: import("./type").RangeInputValueChangeContext) => void>;
            onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "readonly" | "autoWidth" | "inputValue" | "popupVisible">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            autoWidth: BooleanConstructor;
            disabled: BooleanConstructor;
            inputValue: {
                type: import("vue").PropType<import("./type").RangeInputValue>;
                default: any;
            };
            defaultInputValue: {
                type: import("vue").PropType<import("./type").RangeInputValue>;
            };
            panel: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            popupProps: {
                type: import("vue").PropType<import("..").TdPopupProps>;
            };
            popupVisible: BooleanConstructor;
            rangeInputProps: {
                type: import("vue").PropType<TdRangeInputProps>;
            };
            readonly: BooleanConstructor;
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            onInputChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: import("./type").RangeInputValueChangeContext) => void>;
            onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            disabled: boolean;
            readonly: boolean;
            autoWidth: boolean;
            inputValue: import("./type").RangeInputValue;
            popupVisible: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        disabled: BooleanConstructor;
        inputValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
        };
        panel: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: BooleanConstructor;
        rangeInputProps: {
            type: import("vue").PropType<TdRangeInputProps>;
        };
        readonly: BooleanConstructor;
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        onInputChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: import("./type").RangeInputValueChangeContext) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autoWidth: BooleanConstructor;
    disabled: BooleanConstructor;
    inputValue: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
    };
    panel: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: BooleanConstructor;
    rangeInputProps: {
        type: import("vue").PropType<TdRangeInputProps>;
    };
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    onInputChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: import("./type").RangeInputValueChangeContext) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    readonly: boolean;
    autoWidth: boolean;
    inputValue: import("./type").RangeInputValue;
    popupVisible: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default RangeInput;
