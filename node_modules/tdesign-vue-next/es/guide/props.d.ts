import { TdGuideProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    counter: {
        type: PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
    };
    finishButtonProps: {
        type: PropType<import("../button").TdButtonProps>;
        default: import("../button").TdButtonProps;
    };
    hideCounter: BooleanConstructor;
    hidePrev: BooleanConstructor;
    hideSkip: BooleanConstructor;
    highlightPadding: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: PropType<"dialog" | "popup">;
        default: "dialog" | "popup";
        validator(val: TdGuideProps['mode']): boolean;
    };
    nextButtonProps: {
        type: PropType<import("../button").TdButtonProps>;
        default: import("../button").TdButtonProps;
    };
    prevButtonProps: {
        type: PropType<import("../button").TdButtonProps>;
        default: import("../button").TdButtonProps;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    skipButtonProps: {
        type: PropType<import("../button").TdButtonProps>;
        default: import("../button").TdButtonProps;
    };
    steps: {
        type: PropType<import("./type").TdGuideStepProps[]>;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    onChange: PropType<(current: number, context?: {
        e: MouseEvent;
        total: number;
    }) => void>;
    onFinish: PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
    onNextStepClick: PropType<(context: {
        e: MouseEvent;
        next: number;
        current: number;
        total: number;
    }) => void>;
    onPrevStepClick: PropType<(context: {
        e: MouseEvent;
        prev: number;
        current: number;
        total: number;
    }) => void>;
    onSkip: PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
};
export default _default;
