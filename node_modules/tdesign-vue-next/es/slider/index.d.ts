import './style';
export * from './type';
export declare const Slider: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            max: number;
            value: import("./type").SliderValue;
            label: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            disabled: boolean;
            range: boolean;
            layout: "horizontal" | "vertical";
            step: number;
            min: number;
            modelValue: import("./type").SliderValue;
            inputNumberProps: boolean;
            showStep: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            disabled: BooleanConstructor;
            inputNumberProps: {
                type: import("vue").PropType<import("..").InputNumberProps>;
                default: boolean;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            layout: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            marks: {
                type: import("vue").PropType<number[] | import("./type").SliderMarks>;
            };
            max: {
                type: NumberConstructor;
                default: number;
            };
            min: {
                type: NumberConstructor;
                default: number;
            };
            range: BooleanConstructor;
            step: {
                type: NumberConstructor;
                default: number;
            };
            showStep: {
                type: BooleanConstructor;
                default: boolean;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").SliderValue>;
                default: any;
            };
            tooltipProps: {
                type: import("vue").PropType<import("..").TdTooltipProps>;
            };
            value: {
                type: import("vue").PropType<import("./type").SliderValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").SliderValue>;
            };
            onChange: import("vue").PropType<(value: import("./type").SliderValue) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "max" | "value" | "label" | "disabled" | "range" | "layout" | "step" | "min" | "modelValue" | "inputNumberProps" | "showStep">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            disabled: BooleanConstructor;
            inputNumberProps: {
                type: import("vue").PropType<import("..").InputNumberProps>;
                default: boolean;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
            layout: {
                type: import("vue").PropType<"horizontal" | "vertical">;
                default: "horizontal" | "vertical";
                validator(val: "horizontal" | "vertical"): boolean;
            };
            marks: {
                type: import("vue").PropType<number[] | import("./type").SliderMarks>;
            };
            max: {
                type: NumberConstructor;
                default: number;
            };
            min: {
                type: NumberConstructor;
                default: number;
            };
            range: BooleanConstructor;
            step: {
                type: NumberConstructor;
                default: number;
            };
            showStep: {
                type: BooleanConstructor;
                default: boolean;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").SliderValue>;
                default: any;
            };
            tooltipProps: {
                type: import("vue").PropType<import("..").TdTooltipProps>;
            };
            value: {
                type: import("vue").PropType<import("./type").SliderValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").SliderValue>;
            };
            onChange: import("vue").PropType<(value: import("./type").SliderValue) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            max: number;
            value: import("./type").SliderValue;
            label: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            disabled: boolean;
            range: boolean;
            layout: "horizontal" | "vertical";
            step: number;
            min: number;
            modelValue: import("./type").SliderValue;
            inputNumberProps: boolean;
            showStep: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        disabled: BooleanConstructor;
        inputNumberProps: {
            type: import("vue").PropType<import("..").InputNumberProps>;
            default: boolean;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        marks: {
            type: import("vue").PropType<number[] | import("./type").SliderMarks>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        min: {
            type: NumberConstructor;
            default: number;
        };
        range: BooleanConstructor;
        step: {
            type: NumberConstructor;
            default: number;
        };
        showStep: {
            type: BooleanConstructor;
            default: boolean;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").SliderValue>;
            default: any;
        };
        tooltipProps: {
            type: import("vue").PropType<import("..").TdTooltipProps>;
        };
        value: {
            type: import("vue").PropType<import("./type").SliderValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").SliderValue>;
        };
        onChange: import("vue").PropType<(value: import("./type").SliderValue) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    inputNumberProps: {
        type: import("vue").PropType<import("..").InputNumberProps>;
        default: boolean;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    marks: {
        type: import("vue").PropType<number[] | import("./type").SliderMarks>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    range: BooleanConstructor;
    step: {
        type: NumberConstructor;
        default: number;
    };
    showStep: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").SliderValue>;
        default: any;
    };
    tooltipProps: {
        type: import("vue").PropType<import("..").TdTooltipProps>;
    };
    value: {
        type: import("vue").PropType<import("./type").SliderValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").SliderValue>;
    };
    onChange: import("vue").PropType<(value: import("./type").SliderValue) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    max: number;
    value: import("./type").SliderValue;
    label: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    disabled: boolean;
    range: boolean;
    layout: "horizontal" | "vertical";
    step: number;
    min: number;
    modelValue: import("./type").SliderValue;
    inputNumberProps: boolean;
    showStep: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export declare const SliderButton: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: number;
            label: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            vertical: boolean;
            tooltipProps: boolean | Record<string, any>;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: NumberConstructor[];
                default: number;
            };
            vertical: {
                type: BooleanConstructor;
                default: boolean;
            };
            tooltipProps: {
                type: (ObjectConstructor | BooleanConstructor)[];
                default: boolean;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
        }>> & {
            onInput?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "label" | "vertical" | "tooltipProps">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: "input", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: NumberConstructor[];
                default: number;
            };
            vertical: {
                type: BooleanConstructor;
                default: boolean;
            };
            tooltipProps: {
                type: (ObjectConstructor | BooleanConstructor)[];
                default: boolean;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
                default: boolean;
            };
        }>> & {
            onInput?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "input"[], string, {
            value: number;
            label: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            vertical: boolean;
            tooltipProps: boolean | Record<string, any>;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        value: {
            type: NumberConstructor[];
            default: number;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        tooltipProps: {
            type: (ObjectConstructor | BooleanConstructor)[];
            default: boolean;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean;
        };
    }>> & {
        onInput?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: NumberConstructor[];
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    tooltipProps: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: boolean;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
}>> & {
    onInput?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "input"[], "input", {
    value: number;
    label: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    vertical: boolean;
    tooltipProps: boolean | Record<string, any>;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Slider;
