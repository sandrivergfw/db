declare const _default: import("vue").DefineComponent<{
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    closeOnOverlay: BooleanConstructor;
    draggable: {
        type: BooleanConstructor;
        default: any;
    };
    imageScale: {
        type: import("vue").PropType<import("./type").ImageScale>;
    };
    images: {
        type: import("vue").PropType<(string | import("./type").ImageInfo)[]>;
        default: () => (string | import("./type").ImageInfo)[];
    };
    index: {
        type: NumberConstructor;
        default: any;
    };
    defaultIndex: {
        type: NumberConstructor;
    };
    mode: {
        type: import("vue").PropType<"modal" | "modeless">;
        default: "modal" | "modeless";
        validator(val: "modal" | "modeless"): boolean;
    };
    navigationArrow: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: any;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    trigger: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            open: () => void;
        }) => import("../common").SlotReturnValue)>;
    };
    viewerScale: {
        type: import("vue").PropType<import("./type").ImageViewerScale>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onClose: import("vue").PropType<(context: {
        trigger: "overlay" | "close-btn" | "esc";
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onIndexChange: import("vue").PropType<(index: number, context: {
        trigger: "next" | "prev";
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    closeOnOverlay: BooleanConstructor;
    draggable: {
        type: BooleanConstructor;
        default: any;
    };
    imageScale: {
        type: import("vue").PropType<import("./type").ImageScale>;
    };
    images: {
        type: import("vue").PropType<(string | import("./type").ImageInfo)[]>;
        default: () => (string | import("./type").ImageInfo)[];
    };
    index: {
        type: NumberConstructor;
        default: any;
    };
    defaultIndex: {
        type: NumberConstructor;
    };
    mode: {
        type: import("vue").PropType<"modal" | "modeless">;
        default: "modal" | "modeless";
        validator(val: "modal" | "modeless"): boolean;
    };
    navigationArrow: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: any;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    trigger: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            open: () => void;
        }) => import("../common").SlotReturnValue)>;
    };
    viewerScale: {
        type: import("vue").PropType<import("./type").ImageViewerScale>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onClose: import("vue").PropType<(context: {
        trigger: "overlay" | "close-btn" | "esc";
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onIndexChange: import("vue").PropType<(index: number, context: {
        trigger: "next" | "prev";
    }) => void>;
}>>, {
    index: number;
    visible: boolean;
    draggable: boolean;
    mode: "modal" | "modeless";
    modelValue: boolean;
    defaultVisible: boolean;
    showOverlay: boolean;
    closeBtn: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    images: (string | import("./type").ImageInfo)[];
    navigationArrow: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    closeOnOverlay: boolean;
}>;
export default _default;
