/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-a9a65d10.mjs';
import { toRefs, ref, computed, nextTick, inject, watch } from 'vue';
import { FormItemInjectionKey } from '../form/const.mjs';
import useVModel from '../hooks/useVModel.mjs';
import { useFormDisabled } from '../form/hooks.mjs';
import useLengthLimit from './useLengthLimit.mjs';
import '../_chunks/dep-7fde6385.mjs';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/tnode.mjs';
import '../_chunks/dep-ecf1f329.mjs';
import '../_chunks/dep-bedb7d80.mjs';
import '../_chunks/dep-bfc93151.mjs';
import '../_chunks/dep-178810f1.mjs';
import '../_chunks/dep-7a4db73f.mjs';
import '../_chunks/dep-de4be2ca.mjs';
import '../_chunks/dep-61d894c9.mjs';
import '../_chunks/dep-cacce51a.mjs';
import '../_chunks/dep-1375bf98.mjs';
import '../_chunks/dep-74473837.mjs';
import '../_chunks/dep-cd4a1d40.mjs';
import '../_chunks/dep-5179d432.mjs';
import '../_chunks/dep-7a8fb00c.mjs';
import '../_chunks/dep-9bb59c1a.mjs';
import '../_chunks/dep-96027ed5.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-64597fc0.mjs';
import '../_chunks/dep-cddb9124.mjs';
import '../_chunks/dep-df662d99.mjs';
import '../_chunks/dep-2539b27d.mjs';
import '../_chunks/dep-671fd175.mjs';
import '../_chunks/dep-4975791d.mjs';
import '../_chunks/dep-da01978e.mjs';
import '../_chunks/dep-2aad0459.mjs';
import '../_chunks/dep-ea278d31.mjs';
import '../_chunks/dep-a63b383f.mjs';
import '../hooks/useConfig.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-10b9d296.mjs';
import '../_chunks/dep-dc72ac1e.mjs';
import '../_chunks/dep-55f8205a.mjs';
import '../_chunks/dep-e97b14c2.mjs';
import '../_chunks/dep-708d2dc7.mjs';
import '../_chunks/dep-df473a63.mjs';
import '../_chunks/dep-03d7fa8b.mjs';
import '../_chunks/dep-3374d433.mjs';
import '../_chunks/dep-180ba4d7.mjs';
import '../_chunks/dep-0b20cec5.mjs';
import '../_chunks/dep-560cf0c7.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../hooks/useCommonClassName.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../utils/set-style.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../_chunks/dep-b077039f.mjs';
import '../_common/js/log/index.mjs';
import '../_common/js/log/log.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-4cfcf90d.mjs';
import '../_chunks/dep-b9d3e48f.mjs';

function useInput(props, expose) {
  var _toRefs = toRefs(props),
    value = _toRefs.value,
    modelValue = _toRefs.modelValue;
  var inputValue = ref();
  var clearIconRef = ref(null);
  var innerClickElement = ref();
  var disabled = useFormDisabled();
  var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
    _useVModel2 = _slicedToArray(_useVModel, 2),
    innerValue = _useVModel2[0],
    setInnerValue = _useVModel2[1];
  var isHover = ref(false);
  var focused = ref(false);
  var renderType = ref(props.type);
  var inputRef = ref(null);
  var limitParams = computed(function () {
    return {
      value: innerValue.value === void 0 ? void 0 : String(innerValue.value),
      status: props.status,
      maxlength: props.maxlength,
      maxcharacter: props.maxcharacter,
      allowInputOverMax: props.allowInputOverMax,
      onValidate: props.onValidate
    };
  });
  var _useLengthLimit = useLengthLimit(limitParams),
    limitNumber = _useLengthLimit.limitNumber,
    getValueByLimitNumber = _useLengthLimit.getValueByLimitNumber,
    tStatus = _useLengthLimit.tStatus;
  var showClear = computed(function () {
    return (innerValue.value && !disabled.value && props.clearable && !props.readonly || props.showClearIconOnEmpty) && isHover.value;
  });
  var focus = function focus() {
    var _inputRef$value;
    return (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 ? void 0 : _inputRef$value.focus();
  };
  var blur = function blur() {
    var _inputRef$value2;
    return (_inputRef$value2 = inputRef.value) === null || _inputRef$value2 === void 0 ? void 0 : _inputRef$value2.blur();
  };
  var emitFocus = function emitFocus(e) {
    var _props$onFocus;
    inputValue.value = innerValue.value;
    if (props.disabled || props.readonly) return;
    focused.value = true;
    (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, innerValue.value, {
      e: e
    });
  };
  var emitClear = function emitClear(_ref) {
    var _props$onClear;
    var e = _ref.e;
    (_props$onClear = props.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props, {
      e: e
    });
    setInnerValue("", {
      e: e
    });
  };
  var onClearIconMousedown = function onClearIconMousedown(e) {
    innerClickElement.value = e.target;
  };
  var emitPassword = function emitPassword() {
    var toggleType = renderType.value === "password" ? "text" : "password";
    renderType.value = toggleType;
  };
  var setInputElValue = function setInputElValue() {
    var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var inputEl = inputRef.value;
    if (!inputEl) return;
    var sV = String(v);
    if (!inputEl.value) {
      return;
    }
    if (inputEl.value !== sV) {
      inputEl.value = sV;
    }
  };
  var inputValueChangeHandle = function inputValueChangeHandle(e) {
    var target = e.target;
    var val = target.value;
    if (props.type !== "number") {
      val = getValueByLimitNumber(val);
    }
    setInnerValue(val, {
      e: e
    });
    nextTick(function () {
      return setInputElValue(innerValue.value);
    });
  };
  var handleInput = function handleInput(e) {
    var checkInputType = e.inputType && e.inputType === "insertCompositionText";
    if (e.isComposing || checkInputType) return;
    inputValueChangeHandle(e);
  };
  var isClearIcon = function isClearIcon() {
    var _clearIconRef$value;
    var tmp = innerClickElement.value;
    if (!tmp || !tmp.tagName || !((_clearIconRef$value = clearIconRef.value) !== null && _clearIconRef$value !== void 0 && _clearIconRef$value.$el) || !["path", "svg"].includes(tmp.tagName)) return false;
    while (tmp) {
      var _clearIconRef$value2;
      if (((_clearIconRef$value2 = clearIconRef.value) === null || _clearIconRef$value2 === void 0 ? void 0 : _clearIconRef$value2.$el) === tmp) {
        return true;
      }
      tmp = tmp.parentNode;
    }
    return false;
  };
  var formItem = inject(FormItemInjectionKey, void 0);
  var formatAndEmitBlur = function formatAndEmitBlur(e) {
    if (props.format) {
      inputValue.value = props.format(innerValue.value);
    }
    focused.value = false;
    if (!isClearIcon() && props.allowTriggerBlur) {
      var _props$onBlur;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, innerValue.value, {
        e: e
      });
      formItem === null || formItem === void 0 ? void 0 : formItem.handleBlur();
    }
  };
  var onHandleCompositionend = function onHandleCompositionend(e) {
    var _props$onCompositione;
    inputValueChangeHandle(e);
    (_props$onCompositione = props.onCompositionend) === null || _props$onCompositione === void 0 ? void 0 : _props$onCompositione.call(props, innerValue.value, {
      e: e
    });
  };
  var onHandleCompositionstart = function onHandleCompositionstart(e) {
    var _props$onCompositions;
    (_props$onCompositions = props.onCompositionstart) === null || _props$onCompositions === void 0 ? void 0 : _props$onCompositions.call(props, innerValue.value, {
      e: e
    });
  };
  var onRootClick = function onRootClick(e) {
    var _inputRef$value3;
    (_inputRef$value3 = inputRef.value) === null || _inputRef$value3 === void 0 ? void 0 : _inputRef$value3.focus();
  };
  watch(function () {
    return props.autofocus;
  }, function (value2) {
    if (value2 === true) {
      nextTick(function () {
        var _inputRef$value4;
        (_inputRef$value4 = inputRef.value) === null || _inputRef$value4 === void 0 ? void 0 : _inputRef$value4.focus();
      });
    }
  }, {
    immediate: true
  });
  watch(innerValue, function (v) {
    var format = props.format;
    if (format) {
      var r = format(innerValue.value);
      if (inputValue.value !== r) {
        inputValue.value = r;
      }
    } else {
      inputValue.value = v;
    }
  }, {
    immediate: true
  });
  watch(function () {
    return props.type;
  }, function (v) {
    renderType.value = v;
  }, {
    immediate: true
  });
  expose({
    inputRef: inputRef,
    focus: focus,
    blur: blur
  });
  return {
    isHover: isHover,
    focused: focused,
    renderType: renderType,
    showClear: showClear,
    inputRef: inputRef,
    clearIconRef: clearIconRef,
    inputValue: inputValue,
    limitNumber: limitNumber,
    tStatus: tStatus,
    emitFocus: emitFocus,
    formatAndEmitBlur: formatAndEmitBlur,
    onHandleCompositionend: onHandleCompositionend,
    onHandleCompositionstart: onHandleCompositionstart,
    onRootClick: onRootClick,
    emitPassword: emitPassword,
    handleInput: handleInput,
    emitClear: emitClear,
    onClearIconMousedown: onClearIconMousedown,
    innerValue: innerValue
  };
}

export { useInput as default };
//# sourceMappingURL=useInput.mjs.map
