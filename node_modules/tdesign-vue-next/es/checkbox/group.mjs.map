{"version":3,"file":"group.mjs","sources":["../../src/checkbox/group.tsx"],"sourcesContent":["import { defineComponent, provide, VNode, computed, h, reactive, watchEffect, ref, toRefs } from 'vue';\nimport intersection from 'lodash/intersection';\nimport Checkbox from './checkbox';\nimport props from './checkbox-group-props';\nimport { CheckboxOptionObj, TdCheckboxProps, CheckboxGroupValue } from './type';\nimport { CheckboxGroupInjectionKey } from './constants';\n\n// hooks\nimport useVModel from '../hooks/useVModel';\nimport { usePrefixClass } from '../hooks/useConfig';\nimport { useTNodeJSX } from '../hooks/tnode';\nimport { useChildComponentSlots } from '../hooks/slot';\n\nexport default defineComponent({\n  name: 'TCheckboxGroup',\n  props,\n\n  setup(props) {\n    /** 样式 */\n    const COMPONENT_NAME = usePrefixClass('checkbox-group');\n    const renderTNodeJSX = useTNodeJSX();\n\n    const { isArray } = Array;\n    const { value, modelValue } = toRefs(props);\n    const [innerValue, setInnerValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n\n    const checkedMap = computed(() => {\n      const map = {};\n      if (isArray(innerValue.value)) {\n        innerValue.value.forEach((item: string | number) => {\n          map[item] = true;\n        });\n      }\n      return map;\n    });\n    const optionList = ref<Array<CheckboxOptionObj>>([]);\n\n    const intersectionLen = computed<number>(() => {\n      if (!isArray(innerValue.value)) return 0;\n      const values = optionList.value.map((item) => item.value);\n      const n = intersection(innerValue.value, values);\n      return n.length;\n    });\n\n    const isCheckAll = computed<boolean>(() => {\n      const excludeCount = optionList.value.filter((item) => item.disabled || item.checkAll).length;\n      if (isArray(innerValue.value) && innerValue.value.length !== optionList.value.length - excludeCount) return false;\n      return intersectionLen.value === optionList.value.length - excludeCount;\n    });\n\n    const indeterminate = computed<boolean>(\n      () => !isCheckAll.value && intersectionLen.value < optionList.value.length && intersectionLen.value !== 0,\n    );\n\n    const maxExceeded = computed<boolean>(() => props.max !== undefined && innerValue.value.length === props.max);\n\n    watchEffect(() => {\n      if (!props.options) return [];\n      optionList.value = props.options.map((item) => {\n        let r: CheckboxOptionObj = {};\n        if (typeof item !== 'object') {\n          r = { label: String(item), value: item };\n        } else {\n          r = { ...item };\n          r.disabled = r.disabled === undefined ? props.disabled : r.disabled;\n        }\n        return r;\n      });\n    });\n\n    const getAllCheckboxValue = (): CheckboxGroupValue => {\n      const val = new Set<TdCheckboxProps['value']>();\n      for (let i = 0, len = optionList.value.length; i < len; i++) {\n        const item = optionList.value[i];\n        if (item.checkAll) continue;\n        if (item.disabled) continue;\n        val.add(item.value);\n        if (maxExceeded.value) break;\n      }\n      return [...val];\n    };\n\n    const onCheckAllChange = (checked: boolean, context: { e: Event; source?: 't-checkbox' }) => {\n      const value: CheckboxGroupValue = checked ? getAllCheckboxValue() : [];\n      setInnerValue(value, {\n        e: context.e,\n        type: checked ? 'check' : 'uncheck',\n        current: undefined,\n        option: undefined,\n      });\n    };\n\n    const handleCheckboxChange = (data: { checked: boolean; e: Event; option: TdCheckboxProps }) => {\n      const currentValue = data.option.value;\n      if (isArray(innerValue.value)) {\n        const val = [...innerValue.value];\n        if (data.checked) {\n          val.push(currentValue);\n        } else {\n          const i = val.indexOf(currentValue);\n          val.splice(i, 1);\n        }\n        setInnerValue(val, {\n          e: data.e,\n          current: data.option.value,\n          option: data.option,\n          type: data.checked ? 'check' : 'uncheck',\n        });\n      } else {\n        console.warn(`TDesign CheckboxGroup Warn: \\`value\\` must be an array, instead of ${typeof innerValue.value}`);\n      }\n    };\n\n    const onCheckedChange = (p: { checked: boolean; checkAll: boolean; e: Event; option: TdCheckboxProps }) => {\n      const { checked, checkAll, e } = p;\n      if (checkAll) {\n        onCheckAllChange(checked, { e });\n      } else {\n        handleCheckboxChange(p);\n      }\n    };\n\n    const getChildComponentSlots = useChildComponentSlots();\n\n    const getOptionListBySlots = () => {\n      const nodes = getChildComponentSlots('Checkbox');\n      const arr: Array<CheckboxOptionObj> = [];\n      nodes?.forEach((node) => {\n        const option = node.props as CheckboxOptionObj;\n        if (option?.['check-all'] === '' || option?.['check-all'] === true) {\n          option.checkAll = true;\n        }\n        option && arr.push(option);\n      });\n      return arr;\n    };\n\n    const renderLabel = (option: CheckboxOptionObj) => {\n      if (typeof option.label === 'function') {\n        return option.label(h);\n      }\n      return option.label;\n    };\n\n    // provide\n    const { name, disabled } = toRefs(props);\n    provide(\n      CheckboxGroupInjectionKey,\n      reactive({\n        name,\n        isCheckAll,\n        checkedMap,\n        maxExceeded,\n        disabled,\n        indeterminate,\n        handleCheckboxChange,\n        onCheckedChange,\n      }),\n    );\n\n    return () => {\n      let children = null;\n      if (props.options?.length) {\n        children = optionList.value?.map((option, index) => (\n          <Checkbox key={`${option.value}${index}`} {...option} checked={checkedMap.value[option.value]}>\n            {renderLabel(option)}\n          </Checkbox>\n        ));\n      } else {\n        const nodes = renderTNodeJSX('default');\n        optionList.value = getOptionListBySlots();\n        children = nodes;\n      }\n      return <div class={COMPONENT_NAME.value}>{children}</div>;\n    };\n  },\n});\n"],"names":["_isVNode","defineComponent","name","props","setup","COMPONENT_NAME","usePrefixClass","renderTNodeJSX","useTNodeJSX","isArray","Array","toRefs","value","modelValue","useVModel","defaultValue","onChange","innerValue","setInnerValue","checkedMap","computed","map","forEach","item","optionList","ref","intersectionLen","values","n","intersection","length","isCheckAll","excludeCount","filter","disabled","checkAll","indeterminate","maxExceeded","max","watchEffect","options","r","label","String","getAllCheckboxValue","val","Set","i","len","add","onCheckAllChange","checked","context","e","type","current","option","handleCheckboxChange","data","currentValue","push","indexOf","splice","console","warn","onCheckedChange","p","getChildComponentSlots","useChildComponentSlots","getOptionListBySlots","nodes","arr","node","renderLabel","h","provide","CheckboxGroupInjectionKey","reactive","children","index","_createVNode","Checkbox","_mergeProps"],"mappings":"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"}