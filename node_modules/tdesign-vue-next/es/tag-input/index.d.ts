import { TdTagInputProps } from './type';
import './style';
export * from './type';
export declare type TagInputProps = TdTagInputProps;
export declare const TagInput: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: import("./type").TagInputValue;
            disabled: boolean;
            size: "small" | "medium" | "large";
            readonly: boolean;
            status: "error" | "default" | "success" | "warning";
            placeholder: string;
            modelValue: import("./type").TagInputValue;
            autoWidth: boolean;
            clearable: boolean;
            inputValue: string;
            excessTagsDisplayType: "scroll" | "break-line";
            defaultInputValue: string;
            dragSort: boolean;
            minCollapsedNum: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            autoWidth: BooleanConstructor;
            clearable: BooleanConstructor;
            collapsedItems: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: {
                    value: import("./type").TagInputValue;
                    collapsedTags: import("./type").TagInputValue;
                    count: number;
                }) => import("../common").SlotReturnValue>;
            };
            disabled: BooleanConstructor;
            dragSort: BooleanConstructor;
            excessTagsDisplayType: {
                type: import("vue").PropType<"scroll" | "break-line">;
                default: "scroll" | "break-line";
                validator(val: "scroll" | "break-line"): boolean;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            inputValue: {
                type: import("vue").PropType<string>;
                default: any;
            };
            defaultInputValue: {
                type: import("vue").PropType<string>;
                default: string;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            max: {
                type: NumberConstructor;
            };
            minCollapsedNum: {
                type: NumberConstructor;
                default: number;
            };
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            readonly: BooleanConstructor;
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                default: "error" | "default" | "success" | "warning";
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            suffix: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            suffixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            tag: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                    value: string | number;
                }) => import("../common").SlotReturnValue)>;
            };
            tagProps: {
                type: import("vue").PropType<import("..").TdTagProps>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").TagInputValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TagInputValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TagInputValue>;
            };
            valueDisplay: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                    value: import("./type").TagInputValue;
                    onClose: (index: number, item?: any) => void;
                }) => import("../common").SlotReturnValue)>;
            };
            onBlur: import("vue").PropType<(value: import("./type").TagInputValue, context: {
                inputValue: string;
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void>;
            onClear: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onDragSort: import("vue").PropType<(context: import("./type").TagInputDragSortContext) => void>;
            onEnter: import("vue").PropType<(value: import("./type").TagInputValue, context: {
                e: KeyboardEvent;
                inputValue: string;
            }) => void>;
            onFocus: import("vue").PropType<(value: import("./type").TagInputValue, context: {
                inputValue: string;
                e: FocusEvent;
            }) => void>;
            onInputChange: import("vue").PropType<(value: string, context?: import("./type").InputValueChangeContext) => void>;
            onMouseenter: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onMouseleave: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onPaste: import("vue").PropType<(context: {
                e: ClipboardEvent;
                pasteValue: string;
            }) => void>;
            onRemove: import("vue").PropType<(context: import("./type").TagInputRemoveContext) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "disabled" | "size" | "readonly" | "status" | "placeholder" | "modelValue" | "autoWidth" | "clearable" | "inputValue" | "excessTagsDisplayType" | "defaultInputValue" | "dragSort" | "minCollapsedNum">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            autoWidth: BooleanConstructor;
            clearable: BooleanConstructor;
            collapsedItems: {
                type: import("vue").PropType<(h: typeof import("vue").h, props: {
                    value: import("./type").TagInputValue;
                    collapsedTags: import("./type").TagInputValue;
                    count: number;
                }) => import("../common").SlotReturnValue>;
            };
            disabled: BooleanConstructor;
            dragSort: BooleanConstructor;
            excessTagsDisplayType: {
                type: import("vue").PropType<"scroll" | "break-line">;
                default: "scroll" | "break-line";
                validator(val: "scroll" | "break-line"): boolean;
            };
            inputProps: {
                type: import("vue").PropType<import("..").TdInputProps>;
            };
            inputValue: {
                type: import("vue").PropType<string>;
                default: any;
            };
            defaultInputValue: {
                type: import("vue").PropType<string>;
                default: string;
            };
            label: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            max: {
                type: NumberConstructor;
            };
            minCollapsedNum: {
                type: NumberConstructor;
                default: number;
            };
            placeholder: {
                type: StringConstructor;
                default: any;
            };
            readonly: BooleanConstructor;
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: "small" | "medium" | "large";
                validator(val: "small" | "medium" | "large"): boolean;
            };
            status: {
                type: import("vue").PropType<"error" | "default" | "success" | "warning">;
                default: "error" | "default" | "success" | "warning";
                validator(val: "error" | "default" | "success" | "warning"): boolean;
            };
            suffix: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            suffixIcon: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            tag: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                    value: string | number;
                }) => import("../common").SlotReturnValue)>;
            };
            tagProps: {
                type: import("vue").PropType<import("..").TdTagProps>;
            };
            tips: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            value: {
                type: import("vue").PropType<import("./type").TagInputValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").TagInputValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").TagInputValue>;
            };
            valueDisplay: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                    value: import("./type").TagInputValue;
                    onClose: (index: number, item?: any) => void;
                }) => import("../common").SlotReturnValue)>;
            };
            onBlur: import("vue").PropType<(value: import("./type").TagInputValue, context: {
                inputValue: string;
                e: FocusEvent;
            }) => void>;
            onChange: import("vue").PropType<(value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void>;
            onClear: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onDragSort: import("vue").PropType<(context: import("./type").TagInputDragSortContext) => void>;
            onEnter: import("vue").PropType<(value: import("./type").TagInputValue, context: {
                e: KeyboardEvent;
                inputValue: string;
            }) => void>;
            onFocus: import("vue").PropType<(value: import("./type").TagInputValue, context: {
                inputValue: string;
                e: FocusEvent;
            }) => void>;
            onInputChange: import("vue").PropType<(value: string, context?: import("./type").InputValueChangeContext) => void>;
            onMouseenter: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onMouseleave: import("vue").PropType<(context: {
                e: MouseEvent;
            }) => void>;
            onPaste: import("vue").PropType<(context: {
                e: ClipboardEvent;
                pasteValue: string;
            }) => void>;
            onRemove: import("vue").PropType<(context: import("./type").TagInputRemoveContext) => void>;
        }>>, {
            CLEAR_CLASS: import("vue").ComputedRef<string>;
            CloseCircleFilledIcon: any;
            tagValue: import("vue").Ref<import("./type").TagInputValue>;
            tInputValue: import("vue").Ref<string>;
            isHover: import("vue").Ref<boolean>;
            tagInputPlaceholder: import("vue").ComputedRef<string>;
            showClearIcon: import("vue").ComputedRef<boolean>;
            tagInputRef: import("vue").Ref<any>;
            setTInputValue: import("../hooks").ChangeHandler<string>;
            addHover: (context: {
                e: MouseEvent;
            }) => void;
            cancelHover: (context: {
                e: MouseEvent;
            }) => void;
            onInputEnter: (value: string, context: {
                e: KeyboardEvent;
            }) => void;
            onInnerEnter: (value: string, context: {
                e: KeyboardEvent;
            }) => void;
            onInputBackspaceKeyUp: (value: string, context: {
                e: KeyboardEvent;
            }) => void;
            renderLabel: ({ displayNode, label }: {
                displayNode: any;
                label: any;
            }) => any[];
            onWheel: ({ e }: {
                e: WheelEvent;
            }) => void;
            scrollToRightOnEnter: () => void;
            scrollToLeftOnLeave: () => void;
            onClick: () => void;
            onClearClick: (context: {
                e: MouseEvent;
            }) => void;
            onClose: (p: {
                e?: MouseEvent;
                index: number;
                item: string | number;
            }) => void;
            classes: import("vue").ComputedRef<(string | {
                [x: string]: boolean;
            })[]>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: import("./type").TagInputValue;
            disabled: boolean;
            size: "small" | "medium" | "large";
            readonly: boolean;
            status: "error" | "default" | "success" | "warning";
            placeholder: string;
            modelValue: import("./type").TagInputValue;
            autoWidth: boolean;
            clearable: boolean;
            inputValue: string;
            excessTagsDisplayType: "scroll" | "break-line";
            defaultInputValue: string;
            dragSort: boolean;
            minCollapsedNum: number;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("./type").TagInputValue;
                collapsedTags: import("./type").TagInputValue;
                count: number;
            }) => import("../common").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        dragSort: BooleanConstructor;
        excessTagsDisplayType: {
            type: import("vue").PropType<"scroll" | "break-line">;
            default: "scroll" | "break-line";
            validator(val: "scroll" | "break-line"): boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").TdInputProps>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        readonly: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        tag: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: string | number;
            }) => import("../common").SlotReturnValue)>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").TagInputValue>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TagInputValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TagInputValue>;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").TagInputValue;
                onClose: (index: number, item?: any) => void;
            }) => import("../common").SlotReturnValue)>;
        };
        onBlur: import("vue").PropType<(value: import("./type").TagInputValue, context: {
            inputValue: string;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").TagInputDragSortContext) => void>;
        onEnter: import("vue").PropType<(value: import("./type").TagInputValue, context: {
            e: KeyboardEvent;
            inputValue: string;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").TagInputValue, context: {
            inputValue: string;
            e: FocusEvent;
        }) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("./type").InputValueChangeContext) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPaste: import("vue").PropType<(context: {
            e: ClipboardEvent;
            pasteValue: string;
        }) => void>;
        onRemove: import("vue").PropType<(context: import("./type").TagInputRemoveContext) => void>;
    }>> & import("vue").ShallowUnwrapRef<{
        CLEAR_CLASS: import("vue").ComputedRef<string>;
        CloseCircleFilledIcon: any;
        tagValue: import("vue").Ref<import("./type").TagInputValue>;
        tInputValue: import("vue").Ref<string>;
        isHover: import("vue").Ref<boolean>;
        tagInputPlaceholder: import("vue").ComputedRef<string>;
        showClearIcon: import("vue").ComputedRef<boolean>;
        tagInputRef: import("vue").Ref<any>;
        setTInputValue: import("../hooks").ChangeHandler<string>;
        addHover: (context: {
            e: MouseEvent;
        }) => void;
        cancelHover: (context: {
            e: MouseEvent;
        }) => void;
        onInputEnter: (value: string, context: {
            e: KeyboardEvent;
        }) => void;
        onInnerEnter: (value: string, context: {
            e: KeyboardEvent;
        }) => void;
        onInputBackspaceKeyUp: (value: string, context: {
            e: KeyboardEvent;
        }) => void;
        renderLabel: ({ displayNode, label }: {
            displayNode: any;
            label: any;
        }) => any[];
        onWheel: ({ e }: {
            e: WheelEvent;
        }) => void;
        scrollToRightOnEnter: () => void;
        scrollToLeftOnLeave: () => void;
        onClick: () => void;
        onClearClick: (context: {
            e: MouseEvent;
        }) => void;
        onClose: (p: {
            e?: MouseEvent;
            index: number;
            item: string | number;
        }) => void;
        classes: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autoWidth: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("./type").TagInputValue;
            collapsedTags: import("./type").TagInputValue;
            count: number;
        }) => import("../common").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    dragSort: BooleanConstructor;
    excessTagsDisplayType: {
        type: import("vue").PropType<"scroll" | "break-line">;
        default: "scroll" | "break-line";
        validator(val: "scroll" | "break-line"): boolean;
    };
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    tag: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: string | number;
        }) => import("../common").SlotReturnValue)>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").TagInputValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TagInputValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TagInputValue>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").TagInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("../common").SlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        inputValue: string;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").TagInputDragSortContext) => void>;
    onEnter: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        e: KeyboardEvent;
        inputValue: string;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        inputValue: string;
        e: FocusEvent;
    }) => void>;
    onInputChange: import("vue").PropType<(value: string, context?: import("./type").InputValueChangeContext) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onRemove: import("vue").PropType<(context: import("./type").TagInputRemoveContext) => void>;
}>>, {
    CLEAR_CLASS: import("vue").ComputedRef<string>;
    CloseCircleFilledIcon: any;
    tagValue: import("vue").Ref<import("./type").TagInputValue>;
    tInputValue: import("vue").Ref<string>;
    isHover: import("vue").Ref<boolean>;
    tagInputPlaceholder: import("vue").ComputedRef<string>;
    showClearIcon: import("vue").ComputedRef<boolean>;
    tagInputRef: import("vue").Ref<any>;
    setTInputValue: import("../hooks").ChangeHandler<string>;
    addHover: (context: {
        e: MouseEvent;
    }) => void;
    cancelHover: (context: {
        e: MouseEvent;
    }) => void;
    onInputEnter: (value: string, context: {
        e: KeyboardEvent;
    }) => void;
    onInnerEnter: (value: string, context: {
        e: KeyboardEvent;
    }) => void;
    onInputBackspaceKeyUp: (value: string, context: {
        e: KeyboardEvent;
    }) => void;
    renderLabel: ({ displayNode, label }: {
        displayNode: any;
        label: any;
    }) => any[];
    onWheel: ({ e }: {
        e: WheelEvent;
    }) => void;
    scrollToRightOnEnter: () => void;
    scrollToLeftOnLeave: () => void;
    onClick: () => void;
    onClearClick: (context: {
        e: MouseEvent;
    }) => void;
    onClose: (p: {
        e?: MouseEvent;
        index: number;
        item: string | number;
    }) => void;
    classes: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").TagInputValue;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    modelValue: import("./type").TagInputValue;
    autoWidth: boolean;
    clearable: boolean;
    inputValue: string;
    excessTagsDisplayType: "scroll" | "break-line";
    defaultInputValue: string;
    dragSort: boolean;
    minCollapsedNum: number;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default TagInput;
