import { InputValue } from '../input';
declare const _default: import("vue").DefineComponent<{
    autoWidth: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("./type").TagInputValue;
            collapsedTags: import("./type").TagInputValue;
            count: number;
        }) => import("../common").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    dragSort: BooleanConstructor;
    excessTagsDisplayType: {
        type: import("vue").PropType<"scroll" | "break-line">;
        default: "scroll" | "break-line";
        validator(val: "scroll" | "break-line"): boolean;
    };
    inputProps: {
        type: import("vue").PropType<import("../input").TdInputProps>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    tag: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: string | number;
        }) => import("../common").SlotReturnValue)>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").TagInputValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TagInputValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TagInputValue>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").TagInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("../common").SlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        inputValue: string;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").TagInputDragSortContext) => void>;
    onEnter: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        e: KeyboardEvent;
        inputValue: string;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        inputValue: string;
        e: FocusEvent;
    }) => void>;
    onInputChange: import("vue").PropType<(value: string, context?: import("./type").InputValueChangeContext) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onRemove: import("vue").PropType<(context: import("./type").TagInputRemoveContext) => void>;
}, {
    CLEAR_CLASS: import("vue").ComputedRef<string>;
    CloseCircleFilledIcon: any;
    tagValue: import("vue").Ref<import("./type").TagInputValue>;
    tInputValue: import("vue").Ref<string>;
    isHover: import("vue").Ref<boolean>;
    tagInputPlaceholder: import("vue").ComputedRef<string>;
    showClearIcon: import("vue").ComputedRef<boolean>;
    tagInputRef: import("vue").Ref<any>;
    setTInputValue: import("../hooks").ChangeHandler<string>;
    addHover: (context: {
        e: MouseEvent;
    }) => void;
    cancelHover: (context: {
        e: MouseEvent;
    }) => void;
    onInputEnter: (value: InputValue, context: {
        e: KeyboardEvent;
    }) => void;
    onInnerEnter: (value: string, context: {
        e: KeyboardEvent;
    }) => void;
    onInputBackspaceKeyUp: (value: string, context: {
        e: KeyboardEvent;
    }) => void;
    renderLabel: ({ displayNode, label }: {
        displayNode: any;
        label: any;
    }) => any[];
    onWheel: ({ e }: {
        e: WheelEvent;
    }) => void;
    scrollToRightOnEnter: () => void;
    scrollToLeftOnLeave: () => void;
    onClick: () => void;
    onClearClick: (context: {
        e: MouseEvent;
    }) => void;
    onClose: (p: {
        e?: MouseEvent;
        index: number;
        item: string | number;
    }) => void;
    classes: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    autoWidth: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("./type").TagInputValue;
            collapsedTags: import("./type").TagInputValue;
            count: number;
        }) => import("../common").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    dragSort: BooleanConstructor;
    excessTagsDisplayType: {
        type: import("vue").PropType<"scroll" | "break-line">;
        default: "scroll" | "break-line";
        validator(val: "scroll" | "break-line"): boolean;
    };
    inputProps: {
        type: import("vue").PropType<import("../input").TdInputProps>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    tag: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: string | number;
        }) => import("../common").SlotReturnValue)>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").TagInputValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TagInputValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TagInputValue>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").TagInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("../common").SlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        inputValue: string;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").TagInputDragSortContext) => void>;
    onEnter: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        e: KeyboardEvent;
        inputValue: string;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        inputValue: string;
        e: FocusEvent;
    }) => void>;
    onInputChange: import("vue").PropType<(value: string, context?: import("./type").InputValueChangeContext) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onRemove: import("vue").PropType<(context: import("./type").TagInputRemoveContext) => void>;
}>>, {
    value: import("./type").TagInputValue;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    modelValue: import("./type").TagInputValue;
    autoWidth: boolean;
    clearable: boolean;
    inputValue: string;
    excessTagsDisplayType: "scroll" | "break-line";
    defaultInputValue: string;
    dragSort: boolean;
    minCollapsedNum: number;
}>;
export default _default;
