/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import { ref, getCurrentInstance, provide } from 'vue';
import { dragInjectKey } from '../constants.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-10b9d296.mjs';
import '../../_chunks/dep-bedb7d80.mjs';
import '../../_chunks/dep-dc72ac1e.mjs';
import '../../_chunks/dep-55f8205a.mjs';
import '../../_chunks/dep-4975791d.mjs';
import '../../_chunks/dep-ecf1f329.mjs';
import '../../_chunks/dep-bfc93151.mjs';
import '../../_chunks/dep-178810f1.mjs';
import '../../_chunks/dep-7a4db73f.mjs';
import '../../_chunks/dep-da01978e.mjs';
import '../../_chunks/dep-e97b14c2.mjs';
import '../../_chunks/dep-df662d99.mjs';
import '../../_chunks/dep-2539b27d.mjs';
import '../../_chunks/dep-74473837.mjs';
import '../../_chunks/dep-671fd175.mjs';
import '../../_chunks/dep-708d2dc7.mjs';
import '../../_chunks/dep-df473a63.mjs';
import '../../_chunks/dep-2aad0459.mjs';
import '../../_chunks/dep-cacce51a.mjs';
import '../../_chunks/dep-03d7fa8b.mjs';
import '../../_chunks/dep-ea278d31.mjs';
import '../../_chunks/dep-3374d433.mjs';
import '../../_chunks/dep-180ba4d7.mjs';
import '../../_chunks/dep-0b20cec5.mjs';
import '../../_chunks/dep-560cf0c7.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';

function useOnDrag(treeStore) {
  var dragNode = ref();
  var _getCurrentInstance = getCurrentInstance(),
    emit = _getCurrentInstance.emit;
  var onDragStart = function onDragStart(context) {
    dragNode.value = context.node;
    emit === null || emit === void 0 ? void 0 : emit("dragStart", context);
  };
  var onDragEnd = function onDragEnd(context) {
    dragNode.value = context.node;
    emit === null || emit === void 0 ? void 0 : emit("dragEnd", context);
  };
  var onDragOver = function onDragOver(context) {
    emit === null || emit === void 0 ? void 0 : emit("dragOver", context);
  };
  var onDragLeave = function onDragLeave(context) {
    emit === null || emit === void 0 ? void 0 : emit("dragLeave", context);
  };
  var onDrop = function onDrop(context) {
    var node = context.node,
      dropPosition = context.dropPosition;
    if (node.value === dragNode.value.value || node.getParents().some(function (_node) {
      return _node.value === dragNode.value.value;
    })) return;
    var nodes = treeStore.value.getNodes();
    nodes.some(function (_node, _index) {
      if (_node.value === node.value) {
        if (dropPosition === 0) {
          dragNode.value.appendTo(treeStore.value, _node);
        } else if (dropPosition < 0) {
          node.insertBefore(dragNode.value);
        } else {
          node.insertAfter(dragNode.value);
        }
        return true;
      }
      return false;
    });
    emit === null || emit === void 0 ? void 0 : emit("drop", context);
  };
  provide(dragInjectKey, {
    onDragStart: onDragStart,
    onDragEnd: onDragEnd,
    onDragOver: onDragOver,
    onDragLeave: onDragLeave,
    onDrop: onDrop
  });
}

export { useOnDrag as default };
//# sourceMappingURL=useOnDrag.mjs.map
