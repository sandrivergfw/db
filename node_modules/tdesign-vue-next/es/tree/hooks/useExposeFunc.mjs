/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import { u as upperFirst_1 } from '../../_chunks/dep-cd4a1d40.mjs';
import { getNode } from '../util.mjs';
import '../../_chunks/dep-bedb7d80.mjs';
import '../../_chunks/dep-5179d432.mjs';
import '../../_chunks/dep-7a8fb00c.mjs';
import '../../_chunks/dep-61d894c9.mjs';
import '../../_chunks/dep-bfc93151.mjs';
import '../../_chunks/dep-178810f1.mjs';
import '../../_chunks/dep-cacce51a.mjs';
import '../../_chunks/dep-1375bf98.mjs';
import '../../_chunks/dep-74473837.mjs';
import '../../_chunks/dep-b077039f.mjs';
import 'vue';
import '../../_chunks/dep-cc833d5e.mjs';
import '../../_chunks/dep-e03d87af.mjs';
import '../../_chunks/dep-55f8205a.mjs';
import '../../_chunks/dep-4975791d.mjs';
import '../../_chunks/dep-ecf1f329.mjs';
import '../../_chunks/dep-7a4db73f.mjs';
import '../../_chunks/dep-da01978e.mjs';
import '../../_chunks/dep-e97b14c2.mjs';
import '../../_chunks/dep-74d2e059.mjs';
import '../../_chunks/dep-708d2dc7.mjs';
import '../../_chunks/dep-df473a63.mjs';
import '../../_chunks/dep-03d7fa8b.mjs';
import '../../_chunks/dep-2aad0459.mjs';
import '../../_chunks/dep-2539b27d.mjs';
import '../../_chunks/dep-c62bd505.mjs';
import '../../_chunks/dep-7934d0a9.mjs';
import '../../_chunks/dep-180ba4d7.mjs';

function useExposeFunc(treeStore, expose) {
  var setItem = function setItem(value, options) {
    var node = treeStore.value.getNode(value);
    var spec = options;
    var keys = Object.keys(spec);
    if (node && spec) {
      ["expanded", "actived", "checked"].forEach(function (name) {
        if (keys.includes(name)) {
          node["set".concat(upperFirst_1(name))](spec[name], {
            directly: true
          });
        }
      });
    }
  };
  var getItem = function getItem(value) {
    var node = treeStore.value.getNode(value);
    return node === null || node === void 0 ? void 0 : node.getModel();
  };
  var getItems = function getItems(value) {
    var nodes = treeStore.value.getNodes(value);
    return nodes.map(function (node) {
      return node.getModel();
    });
  };
  var appendTo = function appendTo(para, item) {
    var list = [];
    if (Array.isArray(item)) {
      list = item;
    } else {
      list = [item];
    }
    list.forEach(function (item2) {
      var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
      var node = getNode(treeStore.value, val);
      if (node) {
        treeStore.value.appendNodes(para, node);
      } else {
        treeStore.value.appendNodes(para, item2);
      }
    });
  };
  var insertBefore = function insertBefore(value, item) {
    var val = (item === null || item === void 0 ? void 0 : item.value) || "";
    var node = getNode(treeStore.value, val);
    if (node) {
      treeStore.value.insertBefore(value, node);
    } else {
      treeStore.value.insertBefore(value, item);
    }
  };
  var insertAfter = function insertAfter(value, item) {
    var val = (item === null || item === void 0 ? void 0 : item.value) || "";
    var node = getNode(treeStore.value, val);
    if (node) {
      treeStore.value.insertAfter(value, node);
    } else {
      treeStore.value.insertAfter(value, item);
    }
  };
  var remove = function remove(value) {
    return treeStore.value.remove(value);
  };
  var getIndex = function getIndex(value) {
    return treeStore.value.getNodeIndex(value);
  };
  var getParent = function getParent(value) {
    var node = treeStore.value.getParent(value);
    return node === null || node === void 0 ? void 0 : node.getModel();
  };
  var getParents = function getParents(value) {
    var nodes = treeStore.value.getParents(value);
    return nodes.map(function (node) {
      return node.getModel();
    });
  };
  var getPath = function getPath(value) {
    var node = treeStore.value.getNode(value);
    var pathNodes = [];
    if (node) {
      pathNodes = node.getPath().map(function (node2) {
        return node2.getModel();
      });
    }
    return pathNodes;
  };
  expose({
    setItem: setItem,
    getItem: getItem,
    getItems: getItems,
    appendTo: appendTo,
    insertBefore: insertBefore,
    insertAfter: insertAfter,
    remove: remove,
    getIndex: getIndex,
    getParent: getParent,
    getParents: getParents,
    getPath: getPath
  });
}

export { useExposeFunc as default };
//# sourceMappingURL=useExposeFunc.mjs.map
