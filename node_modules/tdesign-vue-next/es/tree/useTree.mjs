/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-b077039f.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-a9a65d10.mjs';
import { ref, toRefs, createVNode, nextTick, watch } from 'vue';
import TreeItem from './tree-item.mjs';
import { TreeStore } from '../_common/js/tree/tree-store.mjs';
import useDefaultValue from '../hooks/useDefaultValue.mjs';
import useVModel from '../hooks/useVModel.mjs';
import useOnDrag from './hooks/useOnDrag.mjs';
import { getMark, getNode, getStoreConfig } from './util.mjs';
import '../_chunks/dep-7fde6385.mjs';
import '../_chunks/dep-ecf1f329.mjs';
import '../_chunks/dep-bedb7d80.mjs';
import '../_chunks/dep-bfc93151.mjs';
import '../_chunks/dep-178810f1.mjs';
import '../_chunks/dep-7a4db73f.mjs';
import 'tdesign-icons-vue-next';
import '../checkbox/index.mjs';
import '../checkbox/checkbox.mjs';
import '../checkbox/props.mjs';
import '../form/hooks.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useConfig.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-10b9d296.mjs';
import '../_chunks/dep-dc72ac1e.mjs';
import '../_chunks/dep-55f8205a.mjs';
import '../_chunks/dep-4975791d.mjs';
import '../_chunks/dep-da01978e.mjs';
import '../_chunks/dep-e97b14c2.mjs';
import '../_chunks/dep-df662d99.mjs';
import '../_chunks/dep-2539b27d.mjs';
import '../_chunks/dep-74473837.mjs';
import '../_chunks/dep-671fd175.mjs';
import '../_chunks/dep-708d2dc7.mjs';
import '../_chunks/dep-df473a63.mjs';
import '../_chunks/dep-2aad0459.mjs';
import '../_chunks/dep-cacce51a.mjs';
import '../_chunks/dep-03d7fa8b.mjs';
import '../_chunks/dep-ea278d31.mjs';
import '../_chunks/dep-3374d433.mjs';
import '../_chunks/dep-180ba4d7.mjs';
import '../_chunks/dep-0b20cec5.mjs';
import '../_chunks/dep-560cf0c7.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../utils/set-style.mjs';
import '../hooks/tnode.mjs';
import '../_chunks/dep-de4be2ca.mjs';
import '../_chunks/dep-61d894c9.mjs';
import '../_chunks/dep-1375bf98.mjs';
import '../_chunks/dep-cd4a1d40.mjs';
import '../_chunks/dep-5179d432.mjs';
import '../_chunks/dep-7a8fb00c.mjs';
import '../_chunks/dep-9bb59c1a.mjs';
import '../_chunks/dep-96027ed5.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-64597fc0.mjs';
import '../_chunks/dep-cddb9124.mjs';
import '../_chunks/dep-a63b383f.mjs';
import '../checkbox/constants.mjs';
import '../checkbox/group.mjs';
import '../_chunks/dep-4cfcf90d.mjs';
import '../_chunks/dep-4e771d76.mjs';
import '../_chunks/dep-a1fe3b7b.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../hooks/slot.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../checkbox/type.mjs';
import '../loading/index.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/set-style.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-b9d3e48f.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../utils/transfer-dom.mjs';
import '../loading/props.mjs';
import '../loading/type.mjs';
import './constants.mjs';
import '../hooks/useGlobalIcon.mjs';
import './hooks/useDraggable.mjs';
import '../_chunks/dep-921c8a11.mjs';
import '../_chunks/dep-ec5c33ee.mjs';
import '../_chunks/dep-bc166b41.mjs';
import '../_chunks/dep-e677d52b.mjs';
import '../_chunks/dep-c62bd505.mjs';
import '../_chunks/dep-7934d0a9.mjs';
import '../_common/js/tree/tree-node.mjs';
import '../_chunks/dep-9844db06.mjs';
import '../_chunks/dep-e7aac5f1.mjs';
import '../_chunks/dep-8513ec81.mjs';
import '../_chunks/dep-e03d87af.mjs';
import '../_common/js/tree/tree-node-model.mjs';
import '../_chunks/dep-cc833d5e.mjs';
import '../_chunks/dep-74d2e059.mjs';
import '../_chunks/dep-2a924a48.mjs';
import '../_chunks/dep-f7262050.mjs';
import '../_common/js/log/log.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useTree(props) {
  var treeStore = ref();
  var cacheMap = /* @__PURE__ */new Map();
  var treeNodeViews = ref([]);
  var _toRefs = toRefs(props),
    expanded = _toRefs.expanded,
    actived = _toRefs.actived,
    value = _toRefs.value,
    modelValue = _toRefs.modelValue;
  var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
    _useVModel2 = _slicedToArray(_useVModel, 2),
    innerChecked = _useVModel2[0],
    setInnerChecked = _useVModel2[1];
  var _useDefaultValue = useDefaultValue(actived, props.defaultActived, props.onActive, "actived"),
    _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
    innerActived = _useDefaultValue2[0],
    setInnerActived = _useDefaultValue2[1];
  var _useDefaultValue3 = useDefaultValue(expanded, props.defaultExpanded, props.onExpand, "expanded"),
    _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2),
    innerExpanded = _useDefaultValue4[0],
    setInnerExpanded = _useDefaultValue4[1];
  var handleLoad = function handleLoad(info) {
    var _props$onLoad;
    var node = info.node;
    var ctx = {
      node: node.getModel()
    };
    if (innerChecked.value && innerChecked.value.length > 0) {
      treeStore.value.replaceChecked(innerChecked.value);
    }
    if (innerExpanded.value && innerExpanded.value.length > 0) {
      treeStore.value.replaceExpanded(innerExpanded.value);
    }
    if (innerActived.value && innerActived.value.length > 0) {
      treeStore.value.replaceActived(innerActived.value);
    }
    (_props$onLoad = props.onLoad) === null || _props$onLoad === void 0 ? void 0 : _props$onLoad.call(props, ctx);
  };
  var handleClick = function handleClick(state) {
    var _props$onClick;
    var expandOnClickNode = props.expandOnClickNode;
    var mouseEvent = state.mouseEvent,
      event = state.event,
      node = state.node;
    if (!node) {
      return;
    }
    var shouldExpand = expandOnClickNode;
    var shouldActive = !props.disabled && !node.disabled;
    ["trigger", "ignore"].forEach(function (markName) {
      var mark = getMark(markName, event.target, event.currentTarget);
      var markValue = (mark === null || mark === void 0 ? void 0 : mark.value) || "";
      if (markValue.indexOf("expand") >= 0) {
        if (markName === "trigger") {
          shouldExpand = true;
        } else if (markName === "ignore") {}
      }
      if (markValue.indexOf("active") >= 0) {
        if (markName === "ignore") {
          shouldActive = false;
        }
      }
    });
    var ctx = {
      node: node.getModel(),
      e: mouseEvent
    };
    if (shouldExpand) {
      var tnode = getNode(treeStore.value, node);
      var expanded2 = node.setExpanded(!tnode.isExpanded());
      setInnerExpanded(expanded2, ctx);
    }
    if (shouldActive) {
      var _tnode = getNode(treeStore.value, node);
      var actived2 = node.setActived(!_tnode.isActived());
      setInnerActived(actived2, ctx);
    }
    (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, ctx);
  };
  var handleChange = function handleChange(state) {
    var disabled = props.disabled;
    var node = state.node,
      mouseEvent = state.mouseEvent;
    if (!node || disabled || node.disabled) {
      return;
    }
    var tnode = getNode(treeStore.value, node);
    var checked = node.setChecked(!tnode.isChecked());
    setInnerChecked(checked, {
      node: node.getModel(),
      e: mouseEvent
    });
  };
  var renderTreeNodeViews = function renderTreeNodeViews() {
    var nodes = treeStore.value.getNodes();
    treeNodeViews.value = nodes.filter(function (node) {
      return node.visible;
    }).map(function (node) {
      var nodeView = cacheMap.get(node.value);
      if (!nodeView) {
        nodeView = createVNode(TreeItem, {
          "key": node.value,
          "node": node,
          "onChange": handleChange,
          "onClick": handleClick,
          "expandOnClickNode": props.expandOnClickNode
        }, null);
        cacheMap.set(node.value, nodeView);
      }
      return nodeView;
    });
    nextTick(function () {
      cacheMap.forEach(function (view, value2) {
        if (!treeStore.value.getNode(value2)) {
          cacheMap["delete"](value2);
        }
      });
    });
  };
  useOnDrag(treeStore);
  var updateExpanded = function updateExpanded() {
    var expandParent = props.expandParent;
    if (Array.isArray(innerExpanded.value)) {
      var expandedMap = /* @__PURE__ */new Map();
      innerExpanded.value.forEach(function (val) {
        expandedMap.set(val, true);
        if (expandParent) {
          var node = treeStore.value.getNode(val);
          node.getParents().forEach(function (tn) {
            expandedMap.set(tn.value, true);
          });
        }
      });
      var expandedArr = Array.from(expandedMap.keys());
      treeStore.value.setExpanded(expandedArr);
    }
  };
  var init = function init() {
    var options = props.data;
    var store = new TreeStore(_objectSpread(_objectSpread({}, getStoreConfig(props)), {}, {
      onLoad: function onLoad(info) {
        handleLoad(info);
      },
      onUpdate: function onUpdate() {
        renderTreeNodeViews();
      }
    }));
    treeStore.value = store;
    if (!Array.isArray(options)) {
      options = [];
    }
    store.append(options);
    store.refreshNodes();
    if (Array.isArray(innerChecked.value)) {
      store.setChecked(innerChecked.value);
    }
    updateExpanded();
    if (Array.isArray(innerActived.value)) {
      store.setActived(innerActived.value);
    }
    renderTreeNodeViews();
  };
  watch(function () {
    return props.data;
  }, function (list) {
    list = props.data;
    cacheMap.clear();
    treeStore.value.reload(list);
    treeStore.value.refreshNodes();
    if (!list.length) return;
    if (Array.isArray(innerChecked.value)) {
      treeStore.value.setChecked(innerChecked.value);
    }
    updateExpanded();
    if (Array.isArray(innerActived.value)) {
      treeStore.value.setActived(innerActived.value);
    }
    treeStore.value.refreshState();
  });
  watch(function () {
    return getStoreConfig(props);
  }, function () {
    if (!treeStore.value) return;
    treeStore.value.setConfig(getStoreConfig(props));
  });
  watch(innerChecked, function (nVal) {
    treeStore.value.replaceChecked(nVal);
  });
  watch(innerExpanded, function (nVal) {
    treeStore.value.replaceExpanded(nVal);
  });
  watch(innerActived, function (nVal) {
    treeStore.value.replaceActived(nVal);
  });
  init();
  return {
    treeStore: treeStore,
    treeNodeViews: treeNodeViews
  };
}

export { useTree as default };
//# sourceMappingURL=useTree.mjs.map
