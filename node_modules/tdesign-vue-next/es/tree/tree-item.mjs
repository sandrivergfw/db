/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-b077039f.mjs';
import { isVNode, defineComponent, inject, ref, reactive, computed, createVNode, h, mergeProps } from 'vue';
import { i as isFunction_1 } from '../_chunks/dep-ecf1f329.mjs';
import { CaretRightSmallIcon } from 'tdesign-icons-vue-next';
import { Checkbox } from '../checkbox/index.mjs';
import { Loading } from '../loading/index.mjs';
import { getTNode } from './util.mjs';
import { injectKey, useCLASSNAMES } from './constants.mjs';
import useRipple from '../hooks/useRipple.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import useDraggable from './hooks/useDraggable.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../_chunks/dep-bedb7d80.mjs';
import '../_chunks/dep-bfc93151.mjs';
import '../_chunks/dep-178810f1.mjs';
import '../_chunks/dep-7a4db73f.mjs';
import '../checkbox/checkbox.mjs';
import '../_chunks/dep-a9a65d10.mjs';
import '../_chunks/dep-7fde6385.mjs';
import '../checkbox/props.mjs';
import '../hooks/useVModel.mjs';
import '../_chunks/dep-96027ed5.mjs';
import '../_chunks/dep-9bb59c1a.mjs';
import '../_chunks/dep-61d894c9.mjs';
import '../_chunks/dep-cacce51a.mjs';
import '../_chunks/dep-1375bf98.mjs';
import '../_chunks/dep-74473837.mjs';
import '../form/hooks.mjs';
import '../hooks/tnode.mjs';
import '../_chunks/dep-de4be2ca.mjs';
import '../_chunks/dep-cd4a1d40.mjs';
import '../_chunks/dep-5179d432.mjs';
import '../_chunks/dep-7a8fb00c.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-64597fc0.mjs';
import '../_chunks/dep-cddb9124.mjs';
import '../_chunks/dep-df662d99.mjs';
import '../_chunks/dep-2539b27d.mjs';
import '../_chunks/dep-671fd175.mjs';
import '../_chunks/dep-4975791d.mjs';
import '../_chunks/dep-da01978e.mjs';
import '../_chunks/dep-2aad0459.mjs';
import '../_chunks/dep-ea278d31.mjs';
import '../_chunks/dep-a63b383f.mjs';
import '../checkbox/constants.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../_chunks/dep-10b9d296.mjs';
import '../_chunks/dep-dc72ac1e.mjs';
import '../_chunks/dep-55f8205a.mjs';
import '../_chunks/dep-e97b14c2.mjs';
import '../_chunks/dep-708d2dc7.mjs';
import '../_chunks/dep-df473a63.mjs';
import '../_chunks/dep-03d7fa8b.mjs';
import '../_chunks/dep-3374d433.mjs';
import '../_chunks/dep-180ba4d7.mjs';
import '../_chunks/dep-0b20cec5.mjs';
import '../_chunks/dep-560cf0c7.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../utils/set-style.mjs';
import '../checkbox/group.mjs';
import '../_chunks/dep-4cfcf90d.mjs';
import '../_chunks/dep-4e771d76.mjs';
import '../_chunks/dep-a1fe3b7b.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../hooks/slot.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../checkbox/type.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/set-style.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-b9d3e48f.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../utils/transfer-dom.mjs';
import '../loading/props.mjs';
import '../loading/type.mjs';
import '../_chunks/dep-cc833d5e.mjs';
import '../_chunks/dep-e03d87af.mjs';
import '../_chunks/dep-74d2e059.mjs';
import '../_chunks/dep-c62bd505.mjs';
import '../_chunks/dep-7934d0a9.mjs';
import '../_chunks/dep-921c8a11.mjs';
import '../_chunks/dep-ec5c33ee.mjs';
import '../_chunks/dep-bc166b41.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var TreeItem = defineComponent({
  name: "TTreeNode",
  props: {
    node: {
      type: Object
    },
    onClick: Function,
    onChange: Function,
    onDrop: Function,
    onDragStart: Function,
    expandOnClickNode: Boolean
  },
  setup: function setup(props) {
    var treeScope = inject(injectKey);
    var isClicked = ref(false);
    var label = ref();
    useRipple(label);
    var CLASS_NAMES = useCLASSNAMES();
    var _useConfig = useConfig("tree"),
      globalConfig = _useConfig.globalConfig;
    var classPrefix = usePrefixClass();
    var _useGlobalIcon = useGlobalIcon({
        CaretRightSmallIcon: CaretRightSmallIcon
      }),
      CaretRightSmallIcon$1 = _useGlobalIcon.CaretRightSmallIcon;
    var handleClick = function handleClick(evt) {
      var _srcTarget$className, _srcTarget$className$, _props$onClick;
      var node = props.node,
        expandOnClickNode = props.expandOnClickNode;
      var state = {
        mouseEvent: evt,
        event: evt,
        node: node,
        path: node.getPath()
      };
      var srcTarget = evt.target;
      var isBranchTrigger = node.children && props.expandOnClickNode && (srcTarget.className === "".concat(classPrefix.value, "-checkbox__input") || srcTarget.tagName.toLowerCase() === "input");
      if (isClicked.value || isBranchTrigger) return;
      if (expandOnClickNode && node.children && ((_srcTarget$className = srcTarget.className) === null || _srcTarget$className === void 0 ? void 0 : (_srcTarget$className$ = _srcTarget$className.indexOf) === null || _srcTarget$className$ === void 0 ? void 0 : _srcTarget$className$.call(_srcTarget$className, "".concat(classPrefix.value, "-tree__label"))) !== -1) evt.preventDefault();
      isClicked.value = true;
      setTimeout(function () {
        isClicked.value = false;
      });
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, state);
    };
    var nodeRef = ref();
    var _useDraggable = useDraggable(reactive({
        nodeRef: nodeRef,
        node: props.node
      })),
      isDragOver = _useDraggable.isDragOver,
      isDragging = _useDraggable.isDragging,
      dropPosition = _useDraggable.dropPosition,
      setDragStatus = _useDraggable.setDragStatus;
    var handleDragStart = function handleDragStart(evt) {
      var _props$onDragStart;
      var node = props.node;
      if (!node.isDraggable()) return;
      evt.stopPropagation();
      setDragStatus("dragStart", evt);
      try {
        var _evt$dataTransfer;
        (_evt$dataTransfer = evt.dataTransfer) === null || _evt$dataTransfer === void 0 ? void 0 : _evt$dataTransfer.setData("text/plain", "");
      } catch (e) {}
      (_props$onDragStart = props.onDragStart) === null || _props$onDragStart === void 0 ? void 0 : _props$onDragStart.call(props, node, evt);
    };
    var handleDragEnd = function handleDragEnd(evt) {
      var node = props.node;
      if (!node.isDraggable()) return;
      evt.stopPropagation();
      setDragStatus("dragEnd", evt);
    };
    var handleDragOver = function handleDragOver(evt) {
      var node = props.node;
      if (!node.isDraggable()) return;
      evt.stopPropagation();
      evt.preventDefault();
      setDragStatus("dragOver", evt);
    };
    var handleDragLeave = function handleDragLeave(evt) {
      var node = props.node;
      if (!node.isDraggable()) return;
      evt.stopPropagation();
      setDragStatus("dragLeave", evt);
    };
    var handleDrop = function handleDrop(evt) {
      var _props$onDrop;
      var node = props.node;
      if (!node.isDraggable()) return;
      evt.stopPropagation();
      evt.preventDefault();
      setDragStatus("drop", evt);
      (_props$onDrop = props.onDrop) === null || _props$onDrop === void 0 ? void 0 : _props$onDrop.call(props, node, dropPosition.value, evt);
    };
    var handleChange = function handleChange() {
      var _props$onChange;
      var node = props.node;
      var event = new Event("change");
      var state = {
        event: event,
        node: node
      };
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, state);
    };
    var itemStyles = computed(function () {
      var level = props.node.level;
      var styles = "--level: ".concat(level, ";");
      return styles;
    });
    var itemClassList = computed(function () {
      var _list$push, _list$push2;
      var node = props.node;
      var list = [];
      list.push(CLASS_NAMES.value.treeNode);
      list.push((_list$push = {}, _defineProperty(_list$push, CLASS_NAMES.value.treeNodeOpen, node.expanded), _defineProperty(_list$push, CLASS_NAMES.value.actived, node.isActivable() ? node.actived : false), _defineProperty(_list$push, CLASS_NAMES.value.disabled, node.isDisabled()), _list$push));
      list.push((_list$push2 = {}, _defineProperty(_list$push2, CLASS_NAMES.value.treeNodeDraggable, node.isDraggable()), _defineProperty(_list$push2, CLASS_NAMES.value.treeNodeDragging, isDragging.value), _defineProperty(_list$push2, CLASS_NAMES.value.treeNodeDragTipTop, isDragOver.value && dropPosition.value < 0), _defineProperty(_list$push2, CLASS_NAMES.value.treeNodeDragTipBottom, isDragOver.value && dropPosition.value > 0), _defineProperty(_list$push2, CLASS_NAMES.value.treeNodeDragTipHighlight, !isDragging.value && isDragOver.value && dropPosition.value === 0), _list$push2));
      return list;
    });
    var renderLine = function renderLine() {
      var node = props.node;
      var _treeScope$value = treeScope.value,
        line = _treeScope$value.line,
        scopedSlots = _treeScope$value.scopedSlots;
      var iconVisible = !!treeScope.value.icon;
      var lineNode = null;
      if (line === true) {
        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.line) {
          lineNode = scopedSlots.line({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else if (node.parent && node.tree) {
          var vmIsLeaf = node.vmIsLeaf,
            vmIsFirst = node.vmIsFirst,
            level = node.level;
          var lineClasses = [];
          lineClasses.push(CLASS_NAMES.value.line);
          if (vmIsLeaf || !iconVisible) {
            lineClasses.push(CLASS_NAMES.value.lineIsLeaf);
          }
          if (vmIsFirst && iconVisible) {
            lineClasses.push(CLASS_NAMES.value.lineIsFirst);
          }
          var shadowStyles = [];
          var parents = node.getParents();
          parents.pop();
          parents.forEach(function (pNode, index) {
            if (!pNode.vmIsLast) {
              shadowStyles.push("calc(-".concat(index + 1, " * var(--space)) 0 var(--color)"));
            }
          });
          var styles = {
            "--level": level,
            "box-shadow": shadowStyles.join(",")
          };
          lineNode = createVNode("span", {
            "class": lineClasses,
            "style": styles
          }, null);
        }
      } else {
        lineNode = getTNode(line, {
          node: node
        });
      }
      return lineNode;
    };
    var renderIcon = function renderIcon() {
      var getFolderIcon = function getFolderIcon() {
        if (isFunction_1(globalConfig.value.folderIcon)) {
          return globalConfig.value.folderIcon(h);
        }
        return createVNode(CaretRightSmallIcon$1, null, null);
      };
      var node = props.node;
      var _treeScope$value2 = treeScope.value,
        icon = _treeScope$value2.icon,
        scopedSlots = _treeScope$value2.scopedSlots;
      var isDefaultIcon = false;
      var iconNode = null;
      if (icon === true) {
        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.icon) {
          iconNode = scopedSlots.icon({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else if (!node.vmIsLeaf) {
          isDefaultIcon = true;
          iconNode = getFolderIcon();
          if (node.loading && node.expanded) {
            iconNode = createVNode(Loading, null, null);
          }
        } else {
          iconNode = "";
        }
      } else {
        iconNode = getTNode(icon, {
          node: node
        });
      }
      var _iconNode = function () {
        return iconNode;
      }();
      iconNode = createVNode("span", {
        "class": [CLASS_NAMES.value.treeIcon, CLASS_NAMES.value.folderIcon, isDefaultIcon ? CLASS_NAMES.value.treeIconDefault : ""],
        "trigger": "expand",
        "ignore": "active"
      }, [iconNode]);
      return iconNode;
    };
    var renderLabel = function renderLabel() {
      var node = props.node;
      var _treeScope$value3 = treeScope.value,
        label2 = _treeScope$value3.label,
        scopedSlots = _treeScope$value3.scopedSlots,
        disableCheck = _treeScope$value3.disableCheck;
      var checkProps = treeScope.value.checkProps || {};
      var labelNode = null;
      if (label2 === true) {
        if (scopedSlots.label) {
          labelNode = scopedSlots.label({
            node: node.getModel()
          });
        } else {
          labelNode = node.label || "";
        }
      } else {
        labelNode = getTNode(label2, {
          node: node
        });
      }
      var labelClasses = [CLASS_NAMES.value.treeLabel, CLASS_NAMES.value.treeLabelStrictly, _defineProperty({}, CLASS_NAMES.value.actived, node.isActivable() ? node.actived : false)];
      if (node.vmCheckable) {
        var _node$children;
        var checkboxDisabled = false;
        if (typeof disableCheck === "function") {
          checkboxDisabled = disableCheck(node);
        } else {
          checkboxDisabled = !!disableCheck;
        }
        if (node.isDisabled()) {
          checkboxDisabled = true;
        }
        var itemCheckProps = _objectSpread(_objectSpread({}, checkProps), {}, {
          disabled: checkboxDisabled
        });
        var stopLabelTrigger = props.expandOnClickNode && node.children instanceof Array && ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0;
        var _labelNode = function () {
          return labelNode;
        }();
        labelNode = createVNode(Checkbox, mergeProps({
          "class": labelClasses,
          "checked": node.checked,
          "indeterminate": node.indeterminate,
          "disabled": node.isDisabled(),
          "name": node.value.toString(),
          "onChange": function onChange() {
            return handleChange();
          },
          "ignore": "expand",
          "stopLabelTrigger": stopLabelTrigger,
          "needRipple": true
        }, itemCheckProps), _isSlot(labelNode) ? labelNode : {
          "default": function _default() {
            return [_labelNode];
          }
        });
      } else {
        var inner = createVNode("span", {
          "style": "position: relative"
        }, [labelNode]);
        labelNode = node.isActivable() ? createVNode("span", {
          "key": "1",
          "ref": "label",
          "class": labelClasses
        }, [inner]) : createVNode("span", {
          "key": "2",
          "class": labelClasses
        }, [inner]);
      }
      return labelNode;
    };
    var renderOperations = function renderOperations() {
      var node = props.node;
      var _treeScope$value4 = treeScope.value,
        operations = _treeScope$value4.operations,
        scopedSlots = _treeScope$value4.scopedSlots;
      var opNode = null;
      if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.operations) {
        opNode = scopedSlots.operations({
          node: node === null || node === void 0 ? void 0 : node.getModel()
        });
      } else {
        opNode = getTNode(operations, {
          node: node
        });
      }
      if (opNode) {
        var _opNode = function () {
          return opNode;
        }();
        opNode = createVNode("span", {
          "class": CLASS_NAMES.value.treeOperations,
          "ignore": "active,expand"
        }, [opNode]);
      }
      return opNode;
    };
    return function () {
      var node = props.node;
      return createVNode("div", {
        "ref": nodeRef,
        "class": itemClassList.value,
        "data-value": node.value,
        "data-level": node.level,
        "style": itemStyles.value,
        "onClick": function onClick(evt) {
          return handleClick(evt);
        },
        "draggable": node.isDraggable(),
        "onDragstart": function onDragstart(evt) {
          return handleDragStart(evt);
        },
        "onDragend": function onDragend(evt) {
          return handleDragEnd(evt);
        },
        "onDragover": function onDragover(evt) {
          return handleDragOver(evt);
        },
        "onDragleave": function onDragleave(evt) {
          return handleDragLeave(evt);
        },
        "onDrop": function onDrop(evt) {
          return handleDrop(evt);
        }
      }, [renderLine(), renderIcon(), renderLabel(), renderOperations()]);
    };
  }
});

export { TreeItem as default };
//# sourceMappingURL=tree-item.mjs.map
