{"version":3,"file":"tnode.mjs","sources":["../../src/hooks/tnode.ts"],"sourcesContent":["import { h, getCurrentInstance, ComponentInternalInstance, VNode } from 'vue';\nimport isFunction from 'lodash/isFunction';\nimport camelCase from 'lodash/camelCase';\nimport kebabCase from 'lodash/kebabCase';\nimport { getDefaultNode, getParams, OptionsType, JSXRenderContext } from '../utils/render-tnode';\n\n// 兼容处理插槽名称，同时支持驼峰命名和中划线命名，示例：value-display 和 valueDisplay\nfunction handleSlots(instance: ComponentInternalInstance, name: string, params: Record<string, any>) {\n  // 检查是否存在 驼峰命名 的插槽\n  let node = instance.slots[camelCase(name)]?.(params);\n  if (node) return node;\n  // 检查是否存在 中划线命名 的插槽\n  node = instance.slots[kebabCase(name)]?.(params);\n  if (node) return node;\n  return null;\n}\n\n/**\n * 是否为空节点，需要过滤掉注释节点。注释节点也会被认为是空节点\n */\nfunction isEmptyNode(node: any) {\n  if ([undefined, null, ''].includes(node)) return true;\n  const innerNodes = node instanceof Array ? node : [node];\n  const r = innerNodes.filter((node) => node?.type?.toString() !== 'Symbol(Comment)');\n  return !r.length;\n}\n\n/**\n * 通过 JSX 的方式渲染 TNode，props 和 插槽同时处理，也能处理默认值为 true 则渲染默认节点的情况\n * 优先级：Props 大于插槽\n * 如果 props 值为 true ，则使用插槽渲染。如果也没有插槽的情况下，则使用 defaultNode 渲染\n * @example const renderTNodeJSX = useTNodeJSX()\n * @return () => {}\n * @param name 插槽和属性名称\n * @param options 值可能为默认渲染节点，也可能是默认渲染节点和参数的集合\n * @example renderTNodeJSX('closeBtn')  优先级 props function 大于 插槽\n * @example renderTNodeJSX('closeBtn', <close-icon />)。 当属性值为 true 时则渲染 <close-icon />\n * @example renderTNodeJSX('closeBtn', { defaultNode: <close-icon />, params })。 params 为渲染节点时所需的参数\n */\nexport const useTNodeJSX = () => {\n  const instance = getCurrentInstance();\n  return function (name: string, options?: OptionsType) {\n    // assemble params && defaultNode\n    const params = getParams(options);\n    const defaultNode = getDefaultNode(options);\n\n    // 处理 props 类型的Node\n    let propsNode;\n    if (Object.keys(instance.props).includes(name)) {\n      propsNode = instance.props[name];\n    }\n\n    // 是否静默日志\n    // const isSilent = Boolean(isObject(options) && 'silent' in options && options.silent);\n    // // 同名插槽和属性同时存在，则提醒用户只需要选择一种方式即可\n    // if (instance.slots[name] && propsNode && propsNode !== true && !isSilent) {\n    //   log.warn('', `Both slots.${name} and props.${name} exist, props.${name} is preferred`);\n    // }\n    // propsNode 为 false 不渲染\n    if (propsNode === false) return;\n    if (propsNode === true) {\n      return handleSlots(instance, name, params) || defaultNode;\n    }\n\n    // 同名 props 和 slot 优先处理 props\n    if (isFunction(propsNode)) return propsNode(h, params);\n    const isPropsEmpty = [undefined, params, ''].includes(propsNode);\n    if (isPropsEmpty && (instance.slots[camelCase(name)] || instance.slots[kebabCase(name)])) {\n      return handleSlots(instance, name, params);\n    }\n    return propsNode;\n  };\n};\n\n/**\n * 在setup中，通过JSX的方式 TNode，props 和 插槽同时处理。与 renderTNodeJSX 区别在于属性值为 undefined 时会渲染默认节点\n * @example const renderTNodeJSXDefault = useTNodeDefault()\n * @return () => {}\n * @param name 插槽和属性名称\n * @example renderTNodeJSXDefault('closeBtn')\n * @example renderTNodeJSXDefault('closeBtn', <close-icon />) closeBtn 为空时，则兜底渲染 <close-icon />\n * @example renderTNodeJSXDefault('closeBtn', { defaultNode: <close-icon />, params }) 。params 为渲染节点时所需的参数\n */\nexport const useTNodeDefault = () => {\n  const renderTNodeJSX = useTNodeJSX();\n  return function (name: string, options?: VNode | JSXRenderContext) {\n    const defaultNode = getDefaultNode(options);\n    return renderTNodeJSX(name, options) || defaultNode;\n  };\n};\n\n/**\n * 在setup中，用于处理相同名称的 TNode 渲染\n * @example const renderContent = useContent()\n * @return () => {}\n * @param name1 第一个名称，优先级高于 name2\n * @param name2 第二个名称\n * @param defaultNode 默认渲染内容：当 name1 和 name2 都为空时会启动默认内容渲染\n * @example renderContent('default', 'content')\n * @example renderContent('default', 'content', '我是默认内容')\n * @example renderContent('default', 'content', { defaultNode: '我是默认内容', params })\n */\nexport const useContent = () => {\n  const renderTNodeJSX = useTNodeJSX();\n  return function (name1: string, name2: string, options?: VNode | JSXRenderContext) {\n    // assemble params && defaultNode\n    const params = getParams(options);\n    const defaultNode = getDefaultNode(options);\n\n    const toParams = params ? { params } : undefined;\n\n    const node1 = renderTNodeJSX(name1, toParams);\n    const node2 = renderTNodeJSX(name2, toParams);\n\n    const res = isEmptyNode(node1) ? node2 : node1;\n    return isEmptyNode(res) ? defaultNode : res;\n  };\n};\n"],"names":["handleSlots","instance","name","params","node","slots","camelCase","kebabCase","isEmptyNode","includes","innerNodes","Array","r","filter","type","toString","length","useTNodeJSX","getCurrentInstance","options","getParams","defaultNode","getDefaultNode","propsNode","Object","keys","props","isFunction","h","isPropsEmpty","useTNodeDefault","renderTNodeJSX","useContent","name1","name2","toParams","node1","node2","res"],"mappings":"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"}