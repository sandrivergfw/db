{"version":3,"file":"useTreeData.mjs","sources":["../../../src/table/hooks/useTreeData.tsx"],"sourcesContent":["import { SetupContext, ref, watch, toRefs, onUnmounted, computed, h } from 'vue';\nimport {\n  AddRectangleIcon as TdAddRectangleIcon,\n  MinusRectangleIcon as TdMinusRectangleIcon,\n} from 'tdesign-icons-vue-next';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\n\nimport TableTreeStore, { SwapParams } from '../../_common/js/table/tree-store';\nimport {\n  TdEnhancedTableProps,\n  PrimaryTableCol,\n  TableRowData,\n  TableRowValue,\n  TableRowState,\n  PrimaryTableCellParams,\n} from '../type';\nimport useClassName from './useClassName';\nimport { renderCell } from '../tr';\nimport { useConfig } from '../../hooks/useConfig';\nimport { useGlobalIcon } from '../../hooks/useGlobalIcon';\nimport { useTNodeDefault } from '../../hooks';\n\nexport default function useTreeData(props: TdEnhancedTableProps, context: SetupContext) {\n  const { data, columns } = toRefs(props);\n  const { t, globalConfig } = useConfig('table');\n  const { AddRectangleIcon, MinusRectangleIcon } = useGlobalIcon({\n    AddRectangleIcon: TdAddRectangleIcon,\n    MinusRectangleIcon: TdMinusRectangleIcon,\n  });\n\n  const store = ref(new TableTreeStore());\n  const treeNodeCol = ref<PrimaryTableCol>();\n  const dataSource = ref<TdEnhancedTableProps['data']>([]);\n  const { tableTreeClasses } = useClassName();\n  const renderTNode = useTNodeDefault();\n\n  const rowDataKeys = computed(() => ({\n    rowKey: props.rowKey || 'id',\n    childrenKey: props.tree?.childrenKey || 'children',\n  }));\n\n  const checkedColumn = computed(() => columns.value.find((col) => col.colKey === 'row-select'));\n\n  watch(checkedColumn, (column) => {\n    if (!store.value) return;\n    store.value.updateDisabledState(dataSource.value, column, rowDataKeys.value);\n  });\n\n  const foldIcon = (context: PrimaryTableCellParams<TableRowData>) => {\n    const params = { ...context, type: 'fold' };\n    const defaultFoldIcon = t(globalConfig.value.treeExpandAndFoldIcon, h, params) || <MinusRectangleIcon />;\n    return renderTNode('treeExpandAndFoldIcon', {\n      defaultNode: defaultFoldIcon,\n      params,\n    });\n  };\n\n  const expandIcon = (context: PrimaryTableCellParams<TableRowData>) => {\n    const params = { ...context, type: 'expand' };\n    const defaultExpandIcon = t(globalConfig.value.treeExpandAndFoldIcon, h, params) || <AddRectangleIcon />;\n    return renderTNode('treeExpandAndFoldIcon', {\n      defaultNode: defaultExpandIcon,\n      params,\n    });\n  };\n\n  const uniqueKeys = computed(() => store.value?.getAllUniqueKeys(data.value, rowDataKeys.value)?.join() || '');\n\n  watch(\n    [uniqueKeys],\n    () => {\n      if (!data.value) return;\n      // 如果没有树形解构，则不需要相关逻辑\n      if (!props.tree) {\n        dataSource.value = data.value;\n        return;\n      }\n      resetData(data.value);\n    },\n    { immediate: true },\n  );\n\n  // 不能启用这部分代码。如果启用，会导致选中树形结构子节点时数据被重置，全部节点收起\n  // watch([columns, rowDataKeys], ([columns, rowDataKeys]) => {\n  //   store.value.initialTreeStore(data.value, columns, rowDataKeys);\n  // });\n\n  onUnmounted(() => {\n    if (!props.tree) return;\n    store.value.treeDataMap?.clear();\n    store.value = null;\n  });\n\n  watch(\n    () => [columns, props.tree?.treeNodeColumnIndex],\n    () => {\n      treeNodeCol.value = getTreeNodeColumnCol();\n    },\n    { immediate: true },\n  );\n\n  function resetData(data: TableRowData[]) {\n    let newVal = cloneDeep(data);\n    store.value.initialTreeStore(newVal, props.columns, rowDataKeys.value);\n    if (props.tree?.defaultExpandAll) {\n      newVal = store.value.expandAll(newVal, rowDataKeys.value);\n    }\n    dataSource.value = newVal;\n  }\n\n  function getTreeNodeStyle(level: number) {\n    if (level === undefined) return;\n    const indent = props.tree?.indent === undefined ? 24 : props.tree?.indent;\n    // 默认 1px 是为了临界省略\n    return indent ? { paddingLeft: `${level * indent || 1}px` } : {};\n  }\n\n  /**\n   * 组件实例方法，展开或收起某一行\n   * @param p 行数据\n   */\n  function toggleExpandData(p: { row: TableRowData; rowIndex: number }, trigger?: 'expand-fold-icon') {\n    dataSource.value = [...store.value.toggleExpandData(p, dataSource.value, rowDataKeys.value)];\n    const rowValue = get(p.row, rowDataKeys.value.rowKey);\n    const rowState = store.value?.treeDataMap?.get(rowValue);\n    props.onTreeExpandChange?.({\n      row: p.row,\n      rowIndex: p.rowIndex,\n      rowState,\n      trigger,\n    });\n  }\n\n  function getTreeNodeColumnCol() {\n    const { columns } = props;\n    let treeNodeColumnIndex = props.tree?.treeNodeColumnIndex || 0;\n    // type 存在，则表示表格内部渲染的特殊列，比如：展开行按钮、复选框、单选按钮等，不能作为树结点列。因此树结点展开列向后顺移\n    while (\n      columns[treeNodeColumnIndex]?.type ||\n      columns[treeNodeColumnIndex]?.colKey === '__EXPAND_ROW_ICON_COLUMN__'\n    ) {\n      treeNodeColumnIndex += 1;\n    }\n    return columns[treeNodeColumnIndex];\n  }\n\n  function formatTreeColumn(col: PrimaryTableCol): PrimaryTableCol {\n    if (!props.tree || col.colKey !== treeNodeCol.value.colKey) return col;\n    const newCol = { ...treeNodeCol.value };\n    newCol.cell = (h, p) => {\n      const cellInfo = renderCell({ ...p, col: { ...treeNodeCol.value } }, context.slots, {\n        cellEmptyContent: props.cellEmptyContent,\n      });\n      const currentState = store.value.treeDataMap.get(get(p.row, rowDataKeys.value.rowKey));\n      const colStyle = getTreeNodeStyle(currentState?.level);\n      const classes = { [tableTreeClasses.inlineCol]: !!col.ellipsis };\n      const childrenNodes = get(p.row, rowDataKeys.value.childrenKey);\n      if ((childrenNodes && childrenNodes instanceof Array) || childrenNodes === true) {\n        const iconNode = store.value.treeDataMap.get(get(p.row, rowDataKeys.value.rowKey))?.expanded\n          ? foldIcon(p)\n          : expandIcon(p);\n        return (\n          <div class={[tableTreeClasses.col, classes]} style={colStyle}>\n            {!!(childrenNodes.length || childrenNodes === true) && (\n              <span class={tableTreeClasses.icon} onClick={() => toggleExpandData(p, 'expand-fold-icon')}>\n                {iconNode}\n              </span>\n            )}\n            {cellInfo}\n          </div>\n        );\n      }\n      return (\n        <div style={colStyle} class={[classes, tableTreeClasses.leafNode]}>\n          <span class={tableTreeClasses.icon}></span>\n          {cellInfo}\n        </div>\n      );\n    };\n    // 树形节点会显示操作符号 [+] 和 [-]，但省略显示的浮层中不需要操作符\n    if (newCol.ellipsis === true) {\n      newCol.ellipsis = (h, p) => renderCell({ ...p, col: { ...treeNodeCol.value } }, context.slots);\n    }\n    return newCol;\n  }\n\n  /**\n   * 对外暴露的组件实例方法，设置行数据，自动刷新界面\n   * @param key 当前行唯一标识值\n   * @param newRowData 新行数据\n   */\n  function setData<T>(key: TableRowValue, newRowData: T) {\n    const rowIndex = store.value.updateData(key, newRowData, dataSource.value, rowDataKeys.value);\n    const newData = [...dataSource.value];\n    newData[rowIndex] = newRowData;\n    dataSource.value = newData;\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取当前行全部数据\n   * @param key 行唯一标识\n   * @returns {TableRowState} 当前行数据\n   */\n  function getData(key: TableRowValue): TableRowState {\n    return store.value.getData(key);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，移除指定节点\n   * @param key 行唯一标识\n   */\n  function remove(key: TableRowValue) {\n    // 引用传值，可自动更新 dataSource。（dataSource 本是内部变量，可以在任何地方进行任何改变）\n    dataSource.value = [...store.value.remove(key, dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，为当前节点添加子节点，默认添加到最后一个节点\n   * @param key 当前节点唯一标识，值为空，则表示给根节点添加元素\n   * @param newData 待添加的新节点\n   */\n  function appendTo<T>(key: TableRowValue = '', newData: T | T[]) {\n    if (!key) {\n      dataSource.value = store.value.appendToRoot(newData, dataSource.value, rowDataKeys.value);\n      return;\n    }\n    // 引用传值，可自动更新 dataSource。（dataSource 本是内部变量，可以在任何地方进行任何改变）\n    dataSource.value = [...store.value.appendTo(key, newData, dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，当前节点之后，插入节点\n   */\n  function insertAfter<T>(rowValue: TableRowValue, newData: T) {\n    dataSource.value = [...store.value.insertAfter(rowValue, newData, dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，当前节点之后，插入节点\n   */\n  function insertBefore<T>(rowValue: TableRowValue, newData: T) {\n    dataSource.value = [...store.value.insertBefore(rowValue, newData, dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，展开所有节点\n   */\n  function expandAll() {\n    dataSource.value = [...store.value.expandAll(dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，收起所有节点\n   */\n  function foldAll() {\n    dataSource.value = [...store.value.foldAll(dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，交换行数据\n   */\n  function swapData(params: SwapParams<TableRowData>) {\n    const r = store.value.swapData(dataSource.value, params, rowDataKeys.value);\n    if (r.result) {\n      dataSource.value = [...r.dataSource];\n    } else {\n      const params = {\n        code: r.code,\n        reason: r.reason,\n      };\n      props.onAbnormalDragSort?.(params);\n    }\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取全部数据的树形结构\n   * @param key 节点唯一标识\n   */\n  function getTreeNode() {\n    return store.value.getTreeNode(dataSource.value, rowDataKeys.value);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取树形结构展开的节点\n   */\n  function getTreeExpandedRow(type: 'unique' | 'data' | 'all' = 'data') {\n    return store.value.getTreeExpandedRow(dataSource.value, rowDataKeys.value, type);\n  }\n\n  return {\n    store,\n    rowDataKeys,\n    dataSource,\n    swapData,\n    setData,\n    getData,\n    remove,\n    appendTo,\n    insertAfter,\n    insertBefore,\n    formatTreeColumn,\n    toggleExpandData,\n    expandAll,\n    foldAll,\n    getTreeNode,\n    resetData,\n    getTreeExpandedRow,\n  };\n}\n"],"names":["useTreeData","props","context","toRefs","data","columns","useConfig","t","globalConfig","useGlobalIcon","AddRectangleIcon","TdAddRectangleIcon","MinusRectangleIcon","TdMinusRectangleIcon","store","ref","TableTreeStore","treeNodeCol","dataSource","useClassName","tableTreeClasses","renderTNode","useTNodeDefault","rowDataKeys","computed","rowKey","childrenKey","tree","checkedColumn","value","find","col","colKey","watch","column","updateDisabledState","foldIcon","params","type","defaultFoldIcon","treeExpandAndFoldIcon","h","_createVNode","defaultNode","expandIcon","defaultExpandIcon","uniqueKeys","getAllUniqueKeys","join","resetData","immediate","onUnmounted","treeDataMap","clear","treeNodeColumnIndex","getTreeNodeColumnCol","newVal","cloneDeep","initialTreeStore","defaultExpandAll","expandAll","getTreeNodeStyle","level","indent","paddingLeft","toggleExpandData","p","trigger","rowValue","get","row","rowState","onTreeExpandChange","rowIndex","formatTreeColumn","newCol","cell","cellInfo","renderCell","slots","cellEmptyContent","currentState","colStyle","classes","inlineCol","ellipsis","childrenNodes","Array","iconNode","expanded","length","icon","leafNode","setData","key","newRowData","updateData","newData","getData","remove","appendTo","appendToRoot","insertAfter","insertBefore","foldAll","swapData","r","result","code","reason","onAbnormalDragSort","getTreeNode","getTreeExpandedRow"],"mappings":"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"}