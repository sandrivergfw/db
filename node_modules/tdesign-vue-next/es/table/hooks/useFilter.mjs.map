{"version":3,"file":"useFilter.mjs","sources":["../../../src/table/hooks/useFilter.tsx"],"sourcesContent":["import { toRefs, ref, watch, computed, SetupContext } from 'vue';\nimport useClassName from './useClassName';\nimport TButton from '../../button';\nimport { TdPrimaryTableProps, PrimaryTableCol, TableRowData, FilterValue } from '../type';\nimport useDefaultValue from '../../hooks/useDefaultValue';\nimport { useTNodeDefault } from '../../hooks/tnode';\nimport TableFilterController from '../filter-controller';\nimport { useConfig } from '../../hooks/useConfig';\n\nfunction isFilterValueExist(value: any) {\n  const isArrayTrue = value instanceof Array && value.length;\n  const isObject = typeof value === 'object' && !(value instanceof Array);\n  const isObjectTrue = isObject && Object.keys(value).length;\n  return isArrayTrue || isObjectTrue || !['null', '', 'undefined'].includes(String(value));\n}\n\n// 筛选条件不为空，才需要显示筛选结果行\nfunction filterEmptyData(data: FilterValue) {\n  const newFilterValue: FilterValue = {};\n  Object.keys(data).forEach((key) => {\n    const item = data[key];\n    if (isFilterValueExist(item)) {\n      newFilterValue[key] = item;\n    }\n  });\n  return newFilterValue;\n}\n\nexport default function useFilter(props: TdPrimaryTableProps, context: SetupContext) {\n  const primaryTableRef = ref(null);\n  const { t, globalConfig } = useConfig('table');\n  const renderTNode = useTNodeDefault();\n  const { filterValue } = toRefs(props);\n  const { tableFilterClasses, isFocusClass } = useClassName();\n  const isTableOverflowHidden = ref<boolean>();\n\n  // unControl and control\n  const [tFilterValue, setTFilterValue] = useDefaultValue(\n    filterValue,\n    props.defaultFilterValue,\n    props.onFilterChange,\n    'filterValue',\n  );\n\n  // 过滤内部值\n  const innerFilterValue = ref<FilterValue>(tFilterValue.value);\n\n  const hasEmptyCondition = computed(() => {\n    const filterEmpty = filterEmptyData(tFilterValue.value || {});\n    return !tFilterValue.value || !Object.keys(filterEmpty).length;\n  });\n\n  watch([tFilterValue], ([val]) => {\n    innerFilterValue.value = val;\n  });\n\n  function renderFirstFilterRow() {\n    if (hasEmptyCondition.value) return null;\n    const defaultNode = (\n      <div class={tableFilterClasses.result}>\n        <span>\n          {/* 搜索 “{getFilterResultContent()}”， */}\n          {/* 找到 {props.pagination?.total || props.data?.length} 条结果 */}\n          {t(globalConfig.value.searchResultText, {\n            result: getFilterResultContent(),\n            count: props.pagination?.total || props.data?.length,\n          })}\n        </span>\n        <TButton theme=\"primary\" variant=\"text\" onClick={onResetAll}>\n          {globalConfig.value.clearFilterResultButtonText}\n        </TButton>\n      </div>\n    );\n    const filterContent = renderTNode('filterRow');\n    if (props.filterRow && !filterContent) return null;\n    return <div class={tableFilterClasses.inner}>{filterContent || defaultNode}</div>;\n  }\n\n  // 获取搜索条件内容，存在 options 需要获取其 label 显示\n  function getFilterResultContent(): string {\n    const arr: string[] = [];\n    props.columns\n      .filter((col) => col.filter)\n      .forEach((col) => {\n        let value = tFilterValue.value[col.colKey];\n        if (col.filter.list && !['null', '', 'undefined'].includes(String(value))) {\n          const formattedValue = value instanceof Array ? value : [value];\n          const label: string[] = [];\n          col.filter.list.forEach((option) => {\n            if (formattedValue.includes(option.value)) {\n              label.push(option.label);\n            }\n          });\n          value = label.join();\n        }\n        if (isFilterValueExist(value)) {\n          arr.push(`${col.title}：${value}`);\n        }\n      });\n    return arr.join('；');\n  }\n\n  function onInnerFilterChange(val: any, column: PrimaryTableCol) {\n    const filterValue = {\n      ...innerFilterValue.value,\n      [column.colKey]: val,\n    };\n    innerFilterValue.value = filterValue;\n    if (!column.filter.showConfirmAndReset) {\n      emitFilterChange(filterValue, column);\n    }\n  }\n\n  function emitFilterChange(filterValue: FilterValue, column?: PrimaryTableCol) {\n    setTFilterValue(filterValue, { col: column });\n    props.onChange?.({ filter: filterValue }, { trigger: 'filter' });\n  }\n\n  function onReset(column: PrimaryTableCol) {\n    const filterValue: FilterValue = {\n      ...tFilterValue.value,\n      [column.colKey]:\n        column.filter.resetValue ??\n        {\n          single: '',\n          multiple: [],\n          input: '',\n        }[column.filter.type] ??\n        '',\n    };\n    emitFilterChange(filterValue, column);\n  }\n\n  function onResetAll() {\n    emitFilterChange({}, undefined);\n  }\n\n  function onConfirm(column: PrimaryTableCol) {\n    emitFilterChange(innerFilterValue.value, column);\n  }\n\n  // 图标：内置图标，组件自定义图标，全局配置图标\n  function renderFilterIcon({ col }: { col: PrimaryTableCol<TableRowData>; colIndex: number }) {\n    return (\n      <TableFilterController\n        v-slots={{ filterIcon: context.slots.filterIcon }}\n        column={col}\n        filterIcon={props.filterIcon}\n        tFilterValue={tFilterValue.value}\n        innerFilterValue={innerFilterValue.value}\n        tableFilterClasses={tableFilterClasses}\n        isFocusClass={isFocusClass}\n        onReset={onReset}\n        onConfirm={onConfirm}\n        onInnerFilterChange={onInnerFilterChange}\n        primaryTableElement={primaryTableRef.value?.$el}\n        onVisibleChange={onPopupVisibleChange}\n      ></TableFilterController>\n    );\n  }\n\n  function setFilterPrimaryTableRef(primaryTableElement: any) {\n    primaryTableRef.value = primaryTableElement;\n  }\n\n  function onPopupVisibleChange(visible: boolean) {\n    if (visible && !isTableOverflowHidden.value) {\n      isTableOverflowHidden.value = !visible;\n    }\n  }\n\n  return {\n    hasEmptyCondition,\n    isTableOverflowHidden,\n    renderFilterIcon,\n    renderFirstFilterRow,\n    setFilterPrimaryTableRef,\n  };\n}\n"],"names":["isFilterValueExist","value","isArrayTrue","Array","length","isObject","isObjectTrue","Object","keys","includes","String","filterEmptyData","data","newFilterValue","forEach","key","item","useFilter","props","context","primaryTableRef","ref","useConfig","t","globalConfig","renderTNode","useTNodeDefault","toRefs","filterValue","useClassName","tableFilterClasses","isFocusClass","isTableOverflowHidden","useDefaultValue","defaultFilterValue","onFilterChange","tFilterValue","setTFilterValue","innerFilterValue","hasEmptyCondition","computed","filterEmpty","watch","val","renderFirstFilterRow","defaultNode","_createVNode","result","searchResultText","getFilterResultContent","count","pagination","total","onResetAll","clearFilterResultButtonText","filterContent","filterRow","inner","arr","columns","filter","col","colKey","list","formattedValue","label","option","push","join","title","onInnerFilterChange","column","showConfirmAndReset","emitFilterChange","onChange","trigger","onReset","resetValue","single","multiple","input","type","onConfirm","renderFilterIcon","filterIcon","$el","onPopupVisibleChange","slots","setFilterPrimaryTableRef","primaryTableElement","visible"],"mappings":"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"}