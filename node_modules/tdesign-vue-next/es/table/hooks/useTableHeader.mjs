/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _typeof } from '../../_chunks/dep-178810f1.mjs';
import { _ as _slicedToArray } from '../../_chunks/dep-a9a65d10.mjs';
import { _ as _defineProperty } from '../../_chunks/dep-b077039f.mjs';
import { isVNode, h, computed, createVNode } from 'vue';
import { i as isString_1 } from '../../_chunks/dep-a63b383f.mjs';
import { i as isFunction_1 } from '../../_chunks/dep-ecf1f329.mjs';
import { getThRowspanAndColspan, getThList } from './useMultiHeader.mjs';
import useClassName from './useClassName.mjs';
import TEllipsis from '../ellipsis.mjs';
import '../../_chunks/dep-7fde6385.mjs';
import '../../_chunks/dep-bedb7d80.mjs';
import '../../_chunks/dep-bfc93151.mjs';
import '../../_chunks/dep-cacce51a.mjs';
import '../../_chunks/dep-74473837.mjs';
import '../../_chunks/dep-7a4db73f.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-10b9d296.mjs';
import '../../_chunks/dep-dc72ac1e.mjs';
import '../../_chunks/dep-55f8205a.mjs';
import '../../_chunks/dep-4975791d.mjs';
import '../../_chunks/dep-da01978e.mjs';
import '../../_chunks/dep-e97b14c2.mjs';
import '../../_chunks/dep-df662d99.mjs';
import '../../_chunks/dep-2539b27d.mjs';
import '../../_chunks/dep-671fd175.mjs';
import '../../_chunks/dep-708d2dc7.mjs';
import '../../_chunks/dep-df473a63.mjs';
import '../../_chunks/dep-2aad0459.mjs';
import '../../_chunks/dep-03d7fa8b.mjs';
import '../../_chunks/dep-ea278d31.mjs';
import '../../_chunks/dep-3374d433.mjs';
import '../../_chunks/dep-180ba4d7.mjs';
import '../../_chunks/dep-0b20cec5.mjs';
import '../../_chunks/dep-560cf0c7.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';
import '../../_chunks/dep-ec5c33ee.mjs';
import '../../_chunks/dep-bc166b41.mjs';
import '../../_chunks/dep-1375bf98.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-64597fc0.mjs';
import '../../_chunks/dep-cddb9124.mjs';
import '../../_chunks/dep-de4be2ca.mjs';
import '../../_chunks/dep-61d894c9.mjs';
import '../../_chunks/dep-cd4a1d40.mjs';
import '../../_chunks/dep-5179d432.mjs';
import '../../_chunks/dep-7a8fb00c.mjs';
import '../../_chunks/dep-9bb59c1a.mjs';
import '../../_chunks/dep-96027ed5.mjs';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../../tooltip/index.mjs';
import '../../tooltip/tooltip.mjs';
import '../../tooltip/props.mjs';
import '../../popup/props.mjs';
import '../../popup/index.mjs';
import '../../popup/popup.mjs';
import '@popperjs/core';
import '../../_common/js/utils/set-style.mjs';
import '../../popup/container.mjs';
import '../../_chunks/dep-4cfcf90d.mjs';
import '../../hooks/useVModel.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../popup/type.mjs';
import '../../hooks/tnode.mjs';
import '../../tooltip/util.mjs';
import '../../tooltip/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
function renderTitle(slots, col, index) {
  var params = {
    col: col,
    colIndex: index
  };
  if (isFunction_1(col.title)) {
    return col.title(h, params);
  }
  if (isString_1(col.title) && slots[col.title]) {
    return slots[col.title](params);
  }
  if (isFunction_1(col.render)) {
    return col.render(h, _objectSpread(_objectSpread({}, params), {}, {
      type: "title",
      row: {},
      rowIndex: -1
    })) || col.title;
  }
  return col.title;
}
function useTableHeader(props) {
  var _useClassName = useClassName(),
    tableSortClasses = _useClassName.tableSortClasses,
    tableFilterClasses = _useClassName.tableFilterClasses;
  var spansAndLeafNodes = computed(function () {
    return getThRowspanAndColspan(props.columns);
  });
  var thList = computed(function () {
    return getThList(props.columns);
  });
  var isMultipleHeader = computed(function () {
    return thList.value.length > 1;
  });
  var renderTitleWidthIcon = function renderTitleWidthIcon(_ref, col, colIndex, ellipsisTitle, attach, extra) {
    var _classes;
    var _ref2 = _slicedToArray(_ref, 3),
      title = _ref2[0],
      sortIcon = _ref2[1],
      filterIcon = _ref2[2];
    var classes = (_classes = {}, _defineProperty(_classes, tableSortClasses.sortable, sortIcon), _defineProperty(_classes, tableFilterClasses.filterable, filterIcon), _classes);
    var content = isFunction_1(ellipsisTitle) ? ellipsisTitle(h, {
      col: col,
      colIndex: colIndex
    }) : void 0;
    var isEllipsis = ellipsisTitle !== void 0 ? Boolean(ellipsisTitle) : Boolean(col.ellipsis);
    return createVNode("div", {
      "class": classes
    }, [createVNode("div", {
      "class": tableSortClasses.title
    }, [isEllipsis ? createVNode(TEllipsis, {
      "placement": "bottom",
      "attach": attach ? function () {
        return attach;
      } : void 0,
      "tooltipContent": content && function () {
        return content;
      },
      "tooltipProps": _typeof(ellipsisTitle) === "object" ? ellipsisTitle : void 0,
      "classPrefix": extra === null || extra === void 0 ? void 0 : extra.classPrefix,
      "overlayClassName": extra === null || extra === void 0 ? void 0 : extra.ellipsisOverlayClassName
    }, _isSlot(title) ? title : {
      "default": function _default() {
        return [title];
      }
    }) : createVNode("div", null, [title]), Boolean(sortIcon || filterIcon) && createVNode("div", {
      "class": tableFilterClasses.iconWrap
    }, [sortIcon, filterIcon])])]);
  };
  return {
    thList: thList,
    isMultipleHeader: isMultipleHeader,
    spansAndLeafNodes: spansAndLeafNodes,
    renderTitleWidthIcon: renderTitleWidthIcon
  };
}

export { useTableHeader as default, renderTitle };
//# sourceMappingURL=useTableHeader.mjs.map
