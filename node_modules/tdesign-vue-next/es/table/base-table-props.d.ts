import { TdBaseTableProps } from '../table/type';
import { PropType } from 'vue';
declare const _default: {
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: PropType<string | ((h: typeof import("vue").h, props: import("../table/type").BaseTableCellParams<import("../table/type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    columns: {
        type: PropType<import("../table/type").BaseTableCol<import("../table/type").TableRowData>[]>;
        default: () => TdBaseTableProps['columns'];
    };
    data: {
        type: PropType<import("../table/type").TableRowData[]>;
        default: () => TdBaseTableProps['data'];
    };
    disableDataPage: BooleanConstructor;
    empty: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    firstFullRow: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: PropType<number[]>;
    };
    footData: {
        type: PropType<import("../table/type").TableRowData[]>;
        default: () => TdBaseTableProps['footData'];
    };
    footerAffixProps: {
        type: PropType<Partial<import("..").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    footerSummary: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: PropType<Partial<import("..").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    height: {
        type: PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    loading: {
        type: PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    loadingProps: {
        type: PropType<import("..").TdLoadingProps>;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    pagination: {
        type: PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: PropType<import("../table/type").TableRowAttributes<import("../table/type").TableRowData>>;
    };
    rowClassName: {
        type: PropType<import("../common").ClassName | ((params: import("../table/type").RowClassNameParams<import("../table/type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: PropType<import("../table/type").TableRowspanAndColspanFunc<import("../table/type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: PropType<import("../table/type").TableRowspanAndColspanFunc<import("../table/type").TableRowData>>;
    };
    scroll: {
        type: PropType<import("../table/type").TableScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: TdBaseTableProps['size']): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: TdBaseTableProps['tableLayout']): boolean;
    };
    topContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: TdBaseTableProps['verticalAlign']): boolean;
    };
    onCellClick: PropType<(context: import("../table/type").BaseTableCellEventContext<import("../table/type").TableRowData>) => void>;
    onPageChange: PropType<(pageInfo: import("..").PageInfo, newDataSource: import("../table/type").TableRowData[]) => void>;
    onRowClick: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onRowDblclick: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onRowMousedown: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onRowMouseenter: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onRowMouseleave: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onRowMouseover: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onRowMouseup: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onScroll: PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: PropType<(params: {
        e: WheelEvent;
    }) => void>;
};
export default _default;
