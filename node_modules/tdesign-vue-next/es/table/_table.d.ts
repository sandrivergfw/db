/// <reference types="sortablejs" />
declare const _default: import("vue").DefineComponent<{
    asyncLoading: {
        type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TableColumnController>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
        default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    };
    displayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
        default: any;
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
    };
    dragSort: {
        type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
        validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("sortablejs").SortableOptions>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
    };
    editableRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    expandIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: any;
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    filterIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    filterRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
        default: any;
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    multipleSort: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: any;
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TableSort>;
        default: any;
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TableSort>;
    };
    sortIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
    onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
    onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
    onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
        trigger: "cancel" | "confirm";
    }) => void>;
    onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
    onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
    onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
    onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
        col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
    }) => void>;
    onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
    onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
    onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
    onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
    onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    data: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    disableDataPage: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    firstFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: import("vue").PropType<number[]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    footerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    footerSummary: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    loading: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    loadingProps: {
        type: import("vue").PropType<import("..").TdLoadingProps>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TableScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TableColumnController>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
        default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    };
    displayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
        default: any;
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
    };
    dragSort: {
        type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
        validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("sortablejs").SortableOptions>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
    };
    editableRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    expandIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: any;
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    filterIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    filterRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
        default: any;
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    multipleSort: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: any;
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TableSort>;
        default: any;
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TableSort>;
    };
    sortIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
    onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
    onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
    onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
        trigger: "cancel" | "confirm";
    }) => void>;
    onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
    onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
    onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
    onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: {
        col?: import("./type").PrimaryTableCol<import("./type").TableRowData>;
    }) => void>;
    onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
    onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
    onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
    onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
    onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    data: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    disableDataPage: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    firstFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: import("vue").PropType<number[]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    footerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    footerSummary: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    loading: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    loadingProps: {
        type: import("vue").PropType<import("..").TdLoadingProps>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TableScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>>, {
    sort: import("./type").TableSort;
    data: import("./type").TableRowData[];
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "bottom" | "middle";
    loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    size: import("../common").SizeEnum;
    empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    hover: boolean;
    bordered: boolean;
    stripe: boolean;
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean;
    headerAffixedTop: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: any;
    hideSortTips: boolean;
    multipleSort: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
}>;
export default _default;
