{"version":3,"file":"thead.mjs","sources":["../../src/table/thead.tsx"],"sourcesContent":["import { defineComponent, computed, SetupContext, PropType, ref, Ref, h, CSSProperties } from 'vue';\nimport isFunction from 'lodash/isFunction';\nimport { getColumnFixedStyles } from './hooks/useFixed';\nimport useClassName from './hooks/useClassName';\nimport { BaseTableCol, TableRowData } from './type';\nimport { renderTitle } from './hooks/useTableHeader';\nimport TEllipsis from './ellipsis';\nimport { formatClassNames } from './utils';\nimport { RowAndColFixedPosition, BaseTableColumns, ThRowspanAndColspan } from './interface';\n\nexport interface TheadProps {\n  classPrefix: string;\n  ellipsisOverlayClassName: string;\n  // 是否固定表头\n  isFixedHeader: boolean;\n  // 固定列 left/right 具体值\n  rowAndColFixedPosition: RowAndColFixedPosition;\n  // 虚拟滚动单独渲染表头；表头吸顶单独渲染表头\n  thWidthList?: { [colKey: string]: number };\n  bordered: boolean;\n  isMultipleHeader: boolean;\n  spansAndLeafNodes: {\n    rowspanAndColspanMap: ThRowspanAndColspan;\n    leafColumns: BaseTableCol<TableRowData>[];\n  };\n  thList: BaseTableCol<TableRowData>[][];\n  columnResizeParams: {\n    resizeLineRef: Ref<HTMLDivElement>;\n    resizeLineStyle: CSSProperties;\n    onColumnMouseover: (e: MouseEvent, col: BaseTableCol<TableRowData>) => void;\n    onColumnMousedown: (e: MouseEvent, col: BaseTableCol<TableRowData>) => void;\n  };\n  resizable: Boolean;\n}\n\nexport default defineComponent({\n  name: 'THead',\n\n  props: {\n    classPrefix: String,\n    ellipsisOverlayClassName: String,\n    isFixedHeader: Boolean,\n    rowAndColFixedPosition: Map as PropType<TheadProps['rowAndColFixedPosition']>,\n    thWidthList: Object as PropType<TheadProps['thWidthList']>,\n    bordered: Boolean,\n    isMultipleHeader: Boolean,\n    resizable: Boolean,\n    spansAndLeafNodes: Object as PropType<TheadProps['spansAndLeafNodes']>,\n    thList: Array as PropType<TheadProps['thList']>,\n    columnResizeParams: Object as PropType<TheadProps['columnResizeParams']>,\n  },\n\n  setup(props: TheadProps, { slots }: SetupContext) {\n    const theadRef = ref<HTMLHeadElement>();\n    const classnames = useClassName();\n    const { tableHeaderClasses, tableBaseClass } = classnames;\n    const theadClasses = computed(() => [\n      tableHeaderClasses.header,\n      {\n        [tableHeaderClasses.fixed]: props.isFixedHeader,\n        [tableBaseClass.bordered]: props.bordered && props.isMultipleHeader,\n        [tableHeaderClasses.multipleHeader]: props.isMultipleHeader,\n      },\n    ]);\n\n    // 单行表格合并\n    const colspanSkipMap = computed(() => {\n      const map: { [key: string]: boolean } = {};\n      const list = props.thList[0];\n      for (let i = 0, len = list.length; i < len; i++) {\n        const item = list[i];\n        if (item.colspan > 1) {\n          for (let j = i + 1; j < i + item.colspan; j++) {\n            if (list[j]) {\n              map[list[j].colKey] = true;\n            }\n          }\n        }\n      }\n      return map;\n    });\n\n    const getTableNode = (thead: HTMLElement) => {\n      let parent = thead;\n      while (parent) {\n        parent = parent.parentNode as HTMLElement;\n        if (parent?.classList?.contains(`${props.classPrefix}-table`)) {\n          break;\n        }\n      }\n      return parent;\n    };\n\n    return {\n      ...classnames,\n      colspanSkipMap,\n      theadClasses,\n      theadRef,\n      slots,\n    };\n  },\n\n  render() {\n    const renderThNodeList = (\n      rowAndColFixedPosition: RowAndColFixedPosition,\n      thWidthList: TheadProps['thWidthList'],\n    ) => {\n      // thBorderMap: rowspan 会影响 tr > th 是否为第一列表头，从而影响边框\n      const thBorderMap = new Map<any, boolean>();\n      const thRowspanAndColspan = this.spansAndLeafNodes.rowspanAndColspanMap;\n      return this.thList.map((row, rowIndex) => {\n        const thRow = row.map((col: BaseTableColumns[0], index: number) => {\n          // 因合并单行表头，跳过\n          if (this.colspanSkipMap[col.colKey]) return null;\n          const rowspanAndColspan = thRowspanAndColspan.get(col);\n          if (index === 0 && rowspanAndColspan.rowspan > 1) {\n            for (let j = rowIndex + 1; j < rowIndex + rowspanAndColspan.rowspan; j++) {\n              thBorderMap.set(this.thList[j][0], true);\n            }\n          }\n          const thStyles = getColumnFixedStyles(col, index, rowAndColFixedPosition, this.tableColFixedClasses);\n          const colParams = {\n            col,\n            colIndex: index,\n            row: {},\n            rowIndex: -1,\n          };\n          const customClasses = formatClassNames(col.className, { ...colParams, type: 'th' });\n          const thClasses = [\n            thStyles.classes,\n            customClasses,\n            {\n              // 受 rowspan 影响，部分 tr > th:first-child 需要补足左边框\n              [this.tableHeaderClasses.thBordered]: thBorderMap.get(col),\n              [`${this.classPrefix}-table__th-${col.colKey}`]: col.colKey,\n              [this.tdAlignClasses[col.align]]: col.align && col.align !== 'left',\n            },\n          ];\n          const withoutChildren = !col.children?.length;\n          const width = withoutChildren && thWidthList?.[col.colKey] ? `${thWidthList?.[col.colKey]}px` : undefined;\n          const styles = { ...(thStyles.style || {}), width };\n          const innerTh = renderTitle(this.slots, col, index);\n          const resizeColumnListener = this.resizable\n            ? {\n                onMousedown: (e: MouseEvent) => this.columnResizeParams?.onColumnMousedown?.(e, col),\n                onMousemove: (e: MouseEvent) => this.columnResizeParams?.onColumnMouseover?.(e, col),\n              }\n            : {};\n          const content = isFunction(col.ellipsisTitle) ? col.ellipsisTitle(h, { col, colIndex: index }) : undefined;\n          const isEllipsis = col.ellipsisTitle !== undefined ? Boolean(col.ellipsisTitle) : Boolean(col.ellipsis);\n          const attrs = (isFunction(col.attrs) ? col.attrs({ ...colParams, type: 'th' }) : col.attrs) || {};\n          if (col.colspan > 1) {\n            attrs.colspan = col.colspan;\n          }\n          return (\n            <th\n              key={col.colKey}\n              data-colkey={col.colKey}\n              class={thClasses}\n              style={styles}\n              {...attrs}\n              {...rowspanAndColspan}\n              {...resizeColumnListener}\n            >\n              <div class={this.tableBaseClass.thCellInner}>\n                {isEllipsis ? (\n                  <TEllipsis\n                    placement=\"bottom\"\n                    attach={this.theadRef ? () => this.getTableNode(this.theadRef) : undefined}\n                    tooltipContent={content && (() => content)}\n                    tooltipProps={typeof col.ellipsisTitle === 'object' ? col.ellipsisTitle : undefined}\n                    overlayClassName={this.ellipsisOverlayClassName}\n                    classPrefix={this.classPrefix}\n                  >\n                    {innerTh}\n                  </TEllipsis>\n                ) : (\n                  innerTh\n                )}\n              </div>\n            </th>\n          );\n        });\n        return <tr key={rowIndex}>{thRow}</tr>;\n      });\n    };\n\n    return (\n      <thead ref=\"theadRef\" class={this.theadClasses}>\n        {renderThNodeList(this.rowAndColFixedPosition, this.thWidthList)}\n      </thead>\n    );\n  },\n});\n"],"names":["_isVNode","defineComponent","name","props","classPrefix","String","ellipsisOverlayClassName","isFixedHeader","Boolean","rowAndColFixedPosition","Map","thWidthList","Object","bordered","isMultipleHeader","resizable","spansAndLeafNodes","thList","Array","columnResizeParams","setup","slots","theadRef","ref","classnames","useClassName","tableHeaderClasses","tableBaseClass","theadClasses","computed","header","fixed","multipleHeader","colspanSkipMap","map","list","i","len","length","item","colspan","j","colKey","getTableNode","thead","parent","parentNode","classList","contains","render","renderThNodeList","thBorderMap","thRowspanAndColspan","rowspanAndColspanMap","row","rowIndex","thRow","col","index","rowspanAndColspan","get","rowspan","set","thStyles","getColumnFixedStyles","tableColFixedClasses","colParams","colIndex","customClasses","formatClassNames","className","type","thClasses","classes","thBordered","tdAlignClasses","align","withoutChildren","children","width","styles","style","innerTh","renderTitle","resizeColumnListener","onMousedown","e","onColumnMousedown","onMousemove","onColumnMouseover","content","isFunction","ellipsisTitle","h","isEllipsis","ellipsis","attrs","_createVNode","_mergeProps","thCellInner"],"mappings":"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"}