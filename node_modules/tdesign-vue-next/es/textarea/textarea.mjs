/**
 * tdesign v0.24.9
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _typeof } from '../_chunks/dep-178810f1.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-a9a65d10.mjs';
import { _ as _defineProperty } from '../_chunks/dep-b077039f.mjs';
import { defineComponent, computed, toRefs, ref, nextTick, inject, watch, onMounted, createVNode, mergeProps } from 'vue';
import props from './props.mjs';
import { getCharacterLength, omit } from '../utils/helper.mjs';
import calcTextareaHeight from './calcTextareaHeight.mjs';
import { FormItemInjectionKey } from '../form/const.mjs';
import useVModel from '../hooks/useVModel.mjs';
import { useFormDisabled } from '../form/hooks.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import { usePrefixClass, useCommonClassName } from '../hooks/useConfig.mjs';
import '../_chunks/dep-7fde6385.mjs';
import '../_chunks/dep-b9d3e48f.mjs';
import '../_chunks/dep-de4be2ca.mjs';
import '../_chunks/dep-bedb7d80.mjs';
import '../_chunks/dep-61d894c9.mjs';
import '../_chunks/dep-bfc93151.mjs';
import '../_chunks/dep-cacce51a.mjs';
import '../_chunks/dep-1375bf98.mjs';
import '../_chunks/dep-74473837.mjs';
import '../_chunks/dep-cd4a1d40.mjs';
import '../_chunks/dep-5179d432.mjs';
import '../_chunks/dep-7a8fb00c.mjs';
import '../_chunks/dep-9bb59c1a.mjs';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/useCommonClassName.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-10b9d296.mjs';
import '../_chunks/dep-dc72ac1e.mjs';
import '../_chunks/dep-55f8205a.mjs';
import '../_chunks/dep-4975791d.mjs';
import '../_chunks/dep-ecf1f329.mjs';
import '../_chunks/dep-7a4db73f.mjs';
import '../_chunks/dep-da01978e.mjs';
import '../_chunks/dep-e97b14c2.mjs';
import '../_chunks/dep-df662d99.mjs';
import '../_chunks/dep-2539b27d.mjs';
import '../_chunks/dep-671fd175.mjs';
import '../_chunks/dep-708d2dc7.mjs';
import '../_chunks/dep-df473a63.mjs';
import '../_chunks/dep-2aad0459.mjs';
import '../_chunks/dep-03d7fa8b.mjs';
import '../_chunks/dep-ea278d31.mjs';
import '../_chunks/dep-3374d433.mjs';
import '../_chunks/dep-180ba4d7.mjs';
import '../_chunks/dep-0b20cec5.mjs';
import '../_chunks/dep-560cf0c7.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../hooks/useDefaultValue.mjs';
import '../_chunks/dep-96027ed5.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../utils/set-style.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-64597fc0.mjs';
import '../_chunks/dep-cddb9124.mjs';
import '../_chunks/dep-a63b383f.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function getValidAttrs(obj) {
  var newObj = {};
  Object.keys(obj).forEach(function (key) {
    if (typeof obj[key] !== "undefined") {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}
var _Textarea = defineComponent({
  name: "TTextarea",
  inheritAttrs: false,
  props: _objectSpread({}, props),
  setup: function setup(props2, _ref) {
    var attrs = _ref.attrs,
      expose = _ref.expose;
    var prefix = usePrefixClass();
    var name = usePrefixClass("textarea");
    var TEXTAREA_TIPS_CLASS = computed(function () {
      return "".concat(name.value, "__tips");
    });
    var TEXTAREA_LIMIT = computed(function () {
      return "".concat(name.value, "__limit");
    });
    var _toRefs = toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var disabled = useFormDisabled();
    var textareaStyle = ref({});
    var computedStyle = computed(function () {
      var style = attrs.style;
      return [style, textareaStyle.value];
    });
    var refTextareaElem = ref();
    var focused = ref(false);
    var focus = function focus() {
      var _refTextareaElem$valu;
      return (_refTextareaElem$valu = refTextareaElem.value) === null || _refTextareaElem$valu === void 0 ? void 0 : _refTextareaElem$valu.focus();
    };
    var blur = function blur() {
      var _refTextareaElem$valu2;
      return (_refTextareaElem$valu2 = refTextareaElem.value) === null || _refTextareaElem$valu2 === void 0 ? void 0 : _refTextareaElem$valu2.blur();
    };
    var adjustTextareaHeight = function adjustTextareaHeight() {
      var _refTextareaElem$valu3, _refTextareaElem$valu4;
      if (props2.autosize === true) {
        nextTick(function () {
          textareaStyle.value = calcTextareaHeight(refTextareaElem.value);
        });
      } else if (_typeof(props2.autosize) === "object") {
        var _props2$autosize = props2.autosize,
          minRows = _props2$autosize.minRows,
          maxRows = _props2$autosize.maxRows;
        textareaStyle.value = calcTextareaHeight(refTextareaElem.value, minRows, maxRows);
      } else if (attrs.rows) {
        textareaStyle.value = {
          height: "auto",
          minHeight: "auto"
        };
      } else if (attrs.style && (_refTextareaElem$valu3 = refTextareaElem.value) !== null && _refTextareaElem$valu3 !== void 0 && (_refTextareaElem$valu4 = _refTextareaElem$valu3.style) !== null && _refTextareaElem$valu4 !== void 0 && _refTextareaElem$valu4.height) {
        textareaStyle.value = {
          height: refTextareaElem.value.style.height
        };
      }
    };
    var setInputValue = function setInputValue() {
      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var textareaElem = refTextareaElem.value;
      var sV = String(v);
      if (!textareaElem) {
        return;
      }
      if (textareaElem.value !== sV) {
        textareaElem.value = sV;
        innerValue.value = sV;
      }
    };
    var inputValueChangeHandle = function inputValueChangeHandle(e) {
      var target = e.target;
      var val = target.value;
      if (props2.maxcharacter && props2.maxcharacter >= 0) {
        var stringInfo = getCharacterLength(val, props2.maxcharacter);
        val = _typeof(stringInfo) === "object" && stringInfo.characters;
      }
      setInnerValue(val, {
        e: e
      });
      nextTick(function () {
        return setInputValue(val);
      });
      adjustTextareaHeight();
    };
    var handleInput = function handleInput(e) {
      if (e.isComposing || e.inputType === "insertCompositionText") return;
      inputValueChangeHandle(e);
    };
    var onCompositionend = function onCompositionend(e) {
      inputValueChangeHandle(e);
    };
    var eventDeal = function eventDeal(name2, e) {
      var _props2$_name;
      if (disabled.value) return;
      var _name = "on".concat(name2[0].toUpperCase()).concat(name2.slice(1));
      (_props2$_name = props2[_name]) === null || _props2$_name === void 0 ? void 0 : _props2$_name.call(props2, innerValue.value, {
        e: e
      });
    };
    var emitKeyDown = function emitKeyDown(e) {
      eventDeal("keydown", e);
    };
    var emitKeyUp = function emitKeyUp(e) {
      eventDeal("keyup", e);
    };
    var emitKeypress = function emitKeypress(e) {
      eventDeal("keypress", e);
    };
    var emitFocus = function emitFocus(e) {
      var _props2$onFocus;
      adjustTextareaHeight();
      if (disabled.value) return;
      focused.value = true;
      (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, innerValue.value, {
        e: e
      });
    };
    var formItem = inject(FormItemInjectionKey, void 0);
    var emitBlur = function emitBlur(e) {
      var _props2$onBlur;
      adjustTextareaHeight();
      focused.value = false;
      (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, innerValue.value, {
        e: e
      });
      formItem === null || formItem === void 0 ? void 0 : formItem.handleBlur();
    };
    var textareaClasses = computed(function () {
      var _ref2;
      return [name.value, (_ref2 = {}, _defineProperty(_ref2, "".concat(prefix.value, "-is-disabled"), disabled.value), _defineProperty(_ref2, "".concat(prefix.value, "-is-readonly"), props2.readonly), _ref2)];
    });
    var inputAttrs = computed(function () {
      return getValidAttrs({
        autofocus: props2.autofocus,
        disabled: disabled.value,
        readonly: props2.readonly,
        placeholder: props2.placeholder,
        maxlength: props2.maxlength || void 0,
        name: props2.name || void 0
      });
    });
    var characterNumber = computed(function () {
      var characterInfo = getCharacterLength(String(innerValue.value || ""));
      if (_typeof(characterInfo) === "object") {
        return characterInfo.length;
      }
      return characterInfo;
    });
    watch(function () {
      return innerValue.value;
    }, function () {
      return adjustTextareaHeight();
    });
    watch(refTextareaElem, function (el) {
      if (!el) return;
      adjustTextareaHeight();
    });
    watch(function () {
      return props2.autofocus;
    }, function (val) {
      if (val) {
        refTextareaElem.value.focus();
      }
    });
    expose({
      focus: focus,
      blur: blur
    });
    onMounted(function () {
      adjustTextareaHeight();
    });
    var renderTNodeJSX = useTNodeJSX();
    return function () {
      var _String;
      var inputEvents = getValidAttrs({
        onFocus: emitFocus,
        onBlur: emitBlur,
        onKeydown: emitKeyDown,
        onKeyup: emitKeyUp,
        onKeypress: emitKeypress
      });
      var _useCommonClassName = useCommonClassName(),
        STATUS = _useCommonClassName.STATUS;
      var classes = computed(function () {
        var _ref3;
        return ["".concat(name.value, "__inner"), (_ref3 = {}, _defineProperty(_ref3, "".concat(prefix.value, "-is-").concat(props2.status), props2.status), _defineProperty(_ref3, STATUS.value.disabled, disabled.value), _defineProperty(_ref3, STATUS.value.focused, focused.value), _defineProperty(_ref3, "".concat(prefix.value, "-resize-none"), props2.maxlength), _ref3), "narrow-scrollbar"];
      });
      var tips = renderTNodeJSX("tips");
      return createVNode("div", mergeProps({
        "class": textareaClasses.value
      }, omit(attrs, ["style"])), [createVNode("textarea", mergeProps({
        "onInput": handleInput,
        "onCompositionend": onCompositionend,
        "ref": refTextareaElem,
        "value": innerValue.value,
        "style": computedStyle.value,
        "class": classes.value
      }, inputEvents, inputAttrs.value), null), props2.maxcharacter && createVNode("span", {
        "class": TEXTAREA_LIMIT.value
      }, ["".concat(characterNumber.value, "/").concat(props2.maxcharacter)]), !props2.maxcharacter && props2.maxlength ? createVNode("span", {
        "class": TEXTAREA_LIMIT.value
      }, ["".concat(innerValue.value ? (_String = String(innerValue.value)) === null || _String === void 0 ? void 0 : _String.length : 0, "/").concat(props2.maxlength)]) : null, tips && createVNode("div", {
        "class": "".concat(TEXTAREA_TIPS_CLASS.value, " ").concat(name.value, "__tips--").concat(props2.status || "normal")
      }, [tips])]);
    };
  }
});

export { _Textarea as default };
//# sourceMappingURL=textarea.mjs.map
